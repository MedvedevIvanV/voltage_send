
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e748  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800e8d8  0800e8d8  0000f8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef30  0800ef30  000102c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ef30  0800ef30  0000ff30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef38  0800ef38  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef38  0800ef38  0000ff38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ef3c  0800ef3c  0000ff3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800ef40  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c4  2**0
                  CONTENTS
 10 .bss          00001ed8  200002c4  200002c4  000102c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000219c  2000219c  000102c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c83  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003697  00000000  00000000  00024f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  00028610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce9  00000000  00000000  00029718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022643  00000000  00000000  0002a401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d1f  00000000  00000000  0004ca44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfec9  00000000  00000000  00062763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012262c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f18  00000000  00000000  00122670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00128588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e8c0 	.word	0x0800e8c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800e8c0 	.word	0x0800e8c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Spi3_Init>:
    return *(float*)&voltageData;
}



void Spi3_Init(void) {
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
    // Включаем тактирование порта C и SPI3
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <Spi3_Init+0x78>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001028:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <Spi3_Init+0x78>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001030:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <Spi3_Init+0x78>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001034:	4a18      	ldr	r2, [pc, #96]	@ (8001098 <Spi3_Init+0x78>)
 8001036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800103a:	6413      	str	r3, [r2, #64]	@ 0x40

    // Настройка PC8 (CS) как выход
    GPIOC->MODER |= GPIO_MODER_MODER8_0;  // Output mode
 800103c:	4b17      	ldr	r3, [pc, #92]	@ (800109c <Spi3_Init+0x7c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a16      	ldr	r2, [pc, #88]	@ (800109c <Spi3_Init+0x7c>)
 8001042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001046:	6013      	str	r3, [r2, #0]
    GPIOC->OTYPER &= ~GPIO_OTYPER_OT_8;   // Push-pull
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <Spi3_Init+0x7c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a13      	ldr	r2, [pc, #76]	@ (800109c <Spi3_Init+0x7c>)
 800104e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001052:	6053      	str	r3, [r2, #4]
    GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED8; // High speed
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <Spi3_Init+0x7c>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4a10      	ldr	r2, [pc, #64]	@ (800109c <Spi3_Init+0x7c>)
 800105a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800105e:	6093      	str	r3, [r2, #8]

    // Настройка PC10 (SCK) и PC11 (MISO) как альтернативные функции
    GPIOC->MODER |= GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1; // Alternate function mode
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <Spi3_Init+0x7c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <Spi3_Init+0x7c>)
 8001066:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 800106a:	6013      	str	r3, [r2, #0]
    GPIOC->AFR[1] |= (6 << (4*(10-8))) | (6 << (4*(11-8))); // AF6 for SPI3
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <Spi3_Init+0x7c>)
 800106e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001070:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <Spi3_Init+0x7c>)
 8001072:	f443 43cc 	orr.w	r3, r3, #26112	@ 0x6600
 8001076:	6253      	str	r3, [r2, #36]	@ 0x24

    // Настройка SPI3
    SPI3->CR1 = SPI_CR1_SSM |          // Software slave management
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <Spi3_Init+0x80>)
 800107a:	f640 3225 	movw	r2, #2853	@ 0xb25
 800107e:	601a      	str	r2, [r3, #0]
                SPI_CR1_MSTR |         // Master mode
                SPI_CR1_BR_2 |         // Baud rate control: fPCLK/256
                SPI_CR1_CPHA |         // CPHA = 1
                SPI_CR1_DFF;           // 16-bit data format

    SPI3->CR1 |= SPI_CR1_SPE;          // Enable SPI3
 8001080:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <Spi3_Init+0x80>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a06      	ldr	r2, [pc, #24]	@ (80010a0 <Spi3_Init+0x80>)
 8001086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020800 	.word	0x40020800
 80010a0:	40003c00 	.word	0x40003c00

080010a4 <Spi3_Read_Data>:

uint16_t Spi3_Read_Data(void) {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
    uint16_t data = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	80fb      	strh	r3, [r7, #6]

    // Активируем Chip Select
    CS_LOW;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <Spi3_Read_Data+0x50>)
 80010b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80010b4:	619a      	str	r2, [r3, #24]

    // Ждем, пока Tx буфер опустеет
    while(!(SPI3->SR & SPI_SR_TXE));
 80010b6:	bf00      	nop
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <Spi3_Read_Data+0x54>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f9      	beq.n	80010b8 <Spi3_Read_Data+0x14>

    // Отправляем "пустые" данные для генерации тактовых импульсов
    SPI3->DR = 0x0000;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <Spi3_Read_Data+0x54>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]

    // Ждем, пока данные будут получены
    while(!(SPI3->SR & SPI_SR_RXNE));
 80010ca:	bf00      	nop
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <Spi3_Read_Data+0x54>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f9      	beq.n	80010cc <Spi3_Read_Data+0x28>

    // Считываем полученные данные
    data = SPI3->DR;
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <Spi3_Read_Data+0x54>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	80fb      	strh	r3, [r7, #6]

    // Деактивируем Chip Select
    CS_HIGH;
 80010de:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <Spi3_Read_Data+0x50>)
 80010e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010e4:	619a      	str	r2, [r3, #24]

    return data;
 80010e6:	88fb      	ldrh	r3, [r7, #6]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40003c00 	.word	0x40003c00

080010fc <Read_Temperature>:

float Read_Temperature(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
    uint16_t raw_data = Spi3_Read_Data();
 8001102:	f7ff ffcf 	bl	80010a4 <Spi3_Read_Data>
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]

    // Проверка на разрыв термопары (бит D2)
    if(raw_data & 0x04) {
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <Read_Temperature+0x1e>
        return -1.0f; // Ошибка - разрыв термопары
 8001114:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8001118:	e00b      	b.n	8001132 <Read_Temperature+0x36>
    }

    // Извлекаем 12-битное значение температуры (биты D15-D3)
    raw_data >>= 3;
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	80fb      	strh	r3, [r7, #6]

    // Преобразуем в градусы Цельсия (0.25°C на LSB)
    return raw_data * 0.25f;
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112a:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800112e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001132:	eeb0 0a67 	vmov.f32	s0, s15
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <Process_USB_Command>:

void Process_USB_Command(volatile uint8_t* data) {
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b09c      	sub	sp, #112	@ 0x70
 8001140:	af04      	add	r7, sp, #16
 8001142:	6078      	str	r0, [r7, #4]
    char response[64];
    static uint32_t led_off_time = 0;

    // Обработка команды SETDATA
    if (strncmp((char*)data, "SETDATA=", 8) == 0) {
 8001144:	2208      	movs	r2, #8
 8001146:	495b      	ldr	r1, [pc, #364]	@ (80012b4 <Process_USB_Command+0x178>)
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f009 fcc8 	bl	800aade <strncmp>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d14f      	bne.n	80011f4 <Process_USB_Command+0xb8>
        char* comma_pos = strchr((char*)data + 8, ',');
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3308      	adds	r3, #8
 8001158:	212c      	movs	r1, #44	@ 0x2c
 800115a:	4618      	mov	r0, r3
 800115c:	f009 fcb2 	bl	800aac4 <strchr>
 8001160:	6578      	str	r0, [r7, #84]	@ 0x54
        char* newline_pos = strchr((char*)data, '\n');
 8001162:	210a      	movs	r1, #10
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f009 fcad 	bl	800aac4 <strchr>
 800116a:	6538      	str	r0, [r7, #80]	@ 0x50

        // Проверка формата
        if (!comma_pos || !newline_pos || comma_pos > newline_pos) {
 800116c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <Process_USB_Command+0x44>
 8001172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <Process_USB_Command+0x44>
 8001178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800117a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800117c:	429a      	cmp	r2, r3
 800117e:	d904      	bls.n	800118a <Process_USB_Command+0x4e>
            CDC_Transmit_FS((uint8_t*)"ERR: Bad format\n", 16);
 8001180:	2110      	movs	r1, #16
 8001182:	484d      	ldr	r0, [pc, #308]	@ (80012b8 <Process_USB_Command+0x17c>)
 8001184:	f007 feb6 	bl	8008ef4 <CDC_Transmit_FS>
            return;
 8001188:	e091      	b.n	80012ae <Process_USB_Command+0x172>
        }

        // Извлекаем дату
        size_t date_len = comma_pos - ((char*)data + 8);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3308      	adds	r3, #8
 800118e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	64fb      	str	r3, [r7, #76]	@ 0x4c
        strncpy(app_data.date, (char*)data + 8, date_len);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3308      	adds	r3, #8
 8001198:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800119a:	4619      	mov	r1, r3
 800119c:	4847      	ldr	r0, [pc, #284]	@ (80012bc <Process_USB_Command+0x180>)
 800119e:	f009 fcb0 	bl	800ab02 <strncpy>
        app_data.date[date_len] = '\0';
 80011a2:	4a46      	ldr	r2, [pc, #280]	@ (80012bc <Process_USB_Command+0x180>)
 80011a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011a6:	4413      	add	r3, r2
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]

        // Извлекаем период
        app_data.period = atoi(comma_pos + 1);
 80011ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011ae:	3301      	adds	r3, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f008 fb01 	bl	80097b8 <atoi>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b40      	ldr	r3, [pc, #256]	@ (80012bc <Process_USB_Command+0x180>)
 80011bc:	615a      	str	r2, [r3, #20]

        // Формируем подтверждение с принятыми данными
        snprintf(response, sizeof(response),
 80011be:	4b3f      	ldr	r3, [pc, #252]	@ (80012bc <Process_USB_Command+0x180>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f107 000c 	add.w	r0, r7, #12
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	4b3c      	ldr	r3, [pc, #240]	@ (80012bc <Process_USB_Command+0x180>)
 80011ca:	4a3d      	ldr	r2, [pc, #244]	@ (80012c0 <Process_USB_Command+0x184>)
 80011cc:	2140      	movs	r1, #64	@ 0x40
 80011ce:	f009 fb13 	bl	800a7f8 <sniprintf>
                "ACK: Date=%s, Period=%lus\n",
                app_data.date, app_data.period);
        CDC_Transmit_FS((uint8_t*)response, strlen(response));
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f84a 	bl	8000270 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f007 fe84 	bl	8008ef4 <CDC_Transmit_FS>
        Send_To_Backup_MK(&app_data);
 80011ec:	4833      	ldr	r0, [pc, #204]	@ (80012bc <Process_USB_Command+0x180>)
 80011ee:	f000 f979 	bl	80014e4 <Send_To_Backup_MK>

        return;
 80011f2:	e05c      	b.n	80012ae <Process_USB_Command+0x172>
    }
    // Команда измерения напряжения
    else if (data[0] == '1') {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b31      	cmp	r3, #49	@ 0x31
 80011fc:	d127      	bne.n	800124e <Process_USB_Command+0x112>
        float voltage_pa0 = 0.0f; // Здесь должны быть реальные измерения
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	65fb      	str	r3, [r7, #92]	@ 0x5c
        float voltage_pa1 = 0.0f;
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	65bb      	str	r3, [r7, #88]	@ 0x58

        snprintf(response, sizeof(response),
 800120a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800120c:	f7ff f99c 	bl	8000548 <__aeabi_f2d>
 8001210:	4604      	mov	r4, r0
 8001212:	460d      	mov	r5, r1
 8001214:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001216:	f7ff f997 	bl	8000548 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	f107 000c 	add.w	r0, r7, #12
 8001222:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001226:	e9cd 4500 	strd	r4, r5, [sp]
 800122a:	4a26      	ldr	r2, [pc, #152]	@ (80012c4 <Process_USB_Command+0x188>)
 800122c:	2140      	movs	r1, #64	@ 0x40
 800122e:	f009 fae3 	bl	800a7f8 <sniprintf>
                "PA0=%.2fV,PA1=%.2fV\n",
                voltage_pa0, voltage_pa1);
        CDC_Transmit_FS((uint8_t*)response, strlen(response));
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f81a 	bl	8000270 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	b29a      	uxth	r2, r3
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f007 fe54 	bl	8008ef4 <CDC_Transmit_FS>
 800124c:	e01b      	b.n	8001286 <Process_USB_Command+0x14a>
    }
    // Команда светодиода
    else if (data[0] == '2') {
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b32      	cmp	r3, #50	@ 0x32
 8001256:	d112      	bne.n	800127e <Process_USB_Command+0x142>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800125e:	481a      	ldr	r0, [pc, #104]	@ (80012c8 <Process_USB_Command+0x18c>)
 8001260:	f001 f918 	bl	8002494 <HAL_GPIO_WritePin>
        led_off_time = HAL_GetTick() + 5000;
 8001264:	f000 fda6 	bl	8001db4 <HAL_GetTick>
 8001268:	4603      	mov	r3, r0
 800126a:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800126e:	3308      	adds	r3, #8
 8001270:	4a16      	ldr	r2, [pc, #88]	@ (80012cc <Process_USB_Command+0x190>)
 8001272:	6013      	str	r3, [r2, #0]
        CDC_Transmit_FS((uint8_t*)"LED: ON 5s\n", 11);
 8001274:	210b      	movs	r1, #11
 8001276:	4816      	ldr	r0, [pc, #88]	@ (80012d0 <Process_USB_Command+0x194>)
 8001278:	f007 fe3c 	bl	8008ef4 <CDC_Transmit_FS>
 800127c:	e003      	b.n	8001286 <Process_USB_Command+0x14a>
    }
    // Неизвестная команда
    else {
        CDC_Transmit_FS((uint8_t*)"ERR: Unknown cmd\n", 17);
 800127e:	2111      	movs	r1, #17
 8001280:	4814      	ldr	r0, [pc, #80]	@ (80012d4 <Process_USB_Command+0x198>)
 8001282:	f007 fe37 	bl	8008ef4 <CDC_Transmit_FS>
    }

    // Автовыключение светодиода
    if (led_off_time && HAL_GetTick() > led_off_time) {
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <Process_USB_Command+0x190>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00f      	beq.n	80012ae <Process_USB_Command+0x172>
 800128e:	f000 fd91 	bl	8001db4 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <Process_USB_Command+0x190>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d908      	bls.n	80012ae <Process_USB_Command+0x172>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012a2:	4809      	ldr	r0, [pc, #36]	@ (80012c8 <Process_USB_Command+0x18c>)
 80012a4:	f001 f8f6 	bl	8002494 <HAL_GPIO_WritePin>
        led_off_time = 0;
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <Process_USB_Command+0x190>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
    }
}
 80012ae:	3760      	adds	r7, #96	@ 0x60
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}
 80012b4:	0800e8dc 	.word	0x0800e8dc
 80012b8:	0800e8e8 	.word	0x0800e8e8
 80012bc:	20000380 	.word	0x20000380
 80012c0:	0800e8fc 	.word	0x0800e8fc
 80012c4:	0800e918 	.word	0x0800e918
 80012c8:	40020800 	.word	0x40020800
 80012cc:	2000041c 	.word	0x2000041c
 80012d0:	0800e930 	.word	0x0800e930
 80012d4:	0800e93c 	.word	0x0800e93c

080012d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001364 <HAL_UART_RxCpltCallback+0x8c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d138      	bne.n	800135c <HAL_UART_RxCpltCallback+0x84>
        if(uart_byte == '\n' || uart_byte == '\r') {
 80012ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <HAL_UART_RxCpltCallback+0x90>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b0a      	cmp	r3, #10
 80012f0:	d003      	beq.n	80012fa <HAL_UART_RxCpltCallback+0x22>
 80012f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <HAL_UART_RxCpltCallback+0x90>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b0d      	cmp	r3, #13
 80012f8:	d110      	bne.n	800131c <HAL_UART_RxCpltCallback+0x44>
            // Завершаем строку только если получили какие-то данные
            if(uart_pos > 0) {
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <HAL_UART_RxCpltCallback+0x94>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <HAL_UART_RxCpltCallback+0x3c>
                uart_buf[uart_pos] = '\0'; // Добавляем нуль-терминатор
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <HAL_UART_RxCpltCallback+0x94>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <HAL_UART_RxCpltCallback+0x98>)
 800130a:	2100      	movs	r1, #0
 800130c:	5499      	strb	r1, [r3, r2]
                uart_msg_ready = 1;       // Устанавливаем флаг готовности
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <HAL_UART_RxCpltCallback+0x9c>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
            }
            // Всегда сбрасываем позицию для нового сообщения
            uart_pos = 0;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_UART_RxCpltCallback+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	e01a      	b.n	8001352 <HAL_UART_RxCpltCallback+0x7a>
        }
        else if(uart_byte >= 32 && uart_byte <= 126) { // Только печатные ASCII символы
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_UART_RxCpltCallback+0x90>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b1f      	cmp	r3, #31
 8001322:	d916      	bls.n	8001352 <HAL_UART_RxCpltCallback+0x7a>
 8001324:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <HAL_UART_RxCpltCallback+0x90>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b7e      	cmp	r3, #126	@ 0x7e
 800132a:	d812      	bhi.n	8001352 <HAL_UART_RxCpltCallback+0x7a>
            if(uart_pos < UART_BUF_SIZE-1) { // Проверяем, чтобы не выйти за границы буфера
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <HAL_UART_RxCpltCallback+0x94>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	2b7e      	cmp	r3, #126	@ 0x7e
 8001332:	d80b      	bhi.n	800134c <HAL_UART_RxCpltCallback+0x74>
                uart_buf[uart_pos++] = uart_byte;
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_UART_RxCpltCallback+0x94>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	b291      	uxth	r1, r2
 800133c:	4a0b      	ldr	r2, [pc, #44]	@ (800136c <HAL_UART_RxCpltCallback+0x94>)
 800133e:	8011      	strh	r1, [r2, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_UART_RxCpltCallback+0x90>)
 8001344:	7819      	ldrb	r1, [r3, #0]
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_UART_RxCpltCallback+0x98>)
 8001348:	5499      	strb	r1, [r3, r2]
 800134a:	e002      	b.n	8001352 <HAL_UART_RxCpltCallback+0x7a>
            } else {
                // Переполнение буфера - начинаем сначала
                uart_pos = 0;
 800134c:	4b07      	ldr	r3, [pc, #28]	@ (800136c <HAL_UART_RxCpltCallback+0x94>)
 800134e:	2200      	movs	r2, #0
 8001350:	801a      	strh	r2, [r3, #0]
            }
        }
        // Возобновляем прием
        HAL_UART_Receive_IT(&huart1, &uart_byte, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	4904      	ldr	r1, [pc, #16]	@ (8001368 <HAL_UART_RxCpltCallback+0x90>)
 8001356:	4808      	ldr	r0, [pc, #32]	@ (8001378 <HAL_UART_RxCpltCallback+0xa0>)
 8001358:	f003 fa23 	bl	80047a2 <HAL_UART_Receive_IT>
    }
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40011000 	.word	0x40011000
 8001368:	2000041b 	.word	0x2000041b
 800136c:	20000418 	.word	0x20000418
 8001370:	20000398 	.word	0x20000398
 8001374:	2000041a 	.word	0x2000041a
 8001378:	20000338 	.word	0x20000338

0800137c <Process_UART_Data>:

void Process_UART_Data(uint8_t* data) {
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	b0b3      	sub	sp, #204	@ 0xcc
 8001380:	af06      	add	r7, sp, #24
 8001382:	6078      	str	r0, [r7, #4]
    // Проверяем минимальную длину сообщения
    if(strlen((char*)data) < 20) { // DATE:2000-01-01 = 14 символов минимум
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7fe ff73 	bl	8000270 <strlen>
 800138a:	4603      	mov	r3, r0
 800138c:	2b13      	cmp	r3, #19
 800138e:	d804      	bhi.n	800139a <Process_UART_Data+0x1e>
        CDC_Transmit_FS((uint8_t*)"ERR: Message too short\r\n", 24);
 8001390:	2118      	movs	r1, #24
 8001392:	484a      	ldr	r0, [pc, #296]	@ (80014bc <Process_UART_Data+0x140>)
 8001394:	f007 fdae 	bl	8008ef4 <CDC_Transmit_FS>
        return;
 8001398:	e08c      	b.n	80014b4 <Process_UART_Data+0x138>
    }

    // Ищем разделители в строгом порядке
    char* date_ptr = strstr((char*)data, "DATE:");
 800139a:	4949      	ldr	r1, [pc, #292]	@ (80014c0 <Process_UART_Data+0x144>)
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f009 fbc3 	bl	800ab28 <strstr>
 80013a2:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    char* time_ptr = date_ptr ? strstr(date_ptr, ";TIME:") : NULL;
 80013a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <Process_UART_Data+0x40>
 80013ae:	4945      	ldr	r1, [pc, #276]	@ (80014c4 <Process_UART_Data+0x148>)
 80013b0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80013b4:	f009 fbb8 	bl	800ab28 <strstr>
 80013b8:	4603      	mov	r3, r0
 80013ba:	e000      	b.n	80013be <Process_UART_Data+0x42>
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    char* period_ptr = time_ptr ? strstr(time_ptr, ";PERIOD:") : NULL;
 80013c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <Process_UART_Data+0x5c>
 80013ca:	493f      	ldr	r1, [pc, #252]	@ (80014c8 <Process_UART_Data+0x14c>)
 80013cc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80013d0:	f009 fbaa 	bl	800ab28 <strstr>
 80013d4:	4603      	mov	r3, r0
 80013d6:	e000      	b.n	80013da <Process_UART_Data+0x5e>
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    if(!date_ptr || !time_ptr || !period_ptr) {
 80013de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <Process_UART_Data+0x7a>
 80013e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <Process_UART_Data+0x7a>
 80013ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d104      	bne.n	8001400 <Process_UART_Data+0x84>
        CDC_Transmit_FS((uint8_t*)"ERR: Invalid message format\r\n", 28);
 80013f6:	211c      	movs	r1, #28
 80013f8:	4834      	ldr	r0, [pc, #208]	@ (80014cc <Process_UART_Data+0x150>)
 80013fa:	f007 fd7b 	bl	8008ef4 <CDC_Transmit_FS>
        return;
 80013fe:	e059      	b.n	80014b4 <Process_UART_Data+0x138>

    // Парсим компоненты
    int year, month, day, hour, min, sec;
    unsigned long period;

    if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) != 3 ||
 8001400:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8001404:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001408:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	460b      	mov	r3, r1
 8001410:	492f      	ldr	r1, [pc, #188]	@ (80014d0 <Process_UART_Data+0x154>)
 8001412:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001416:	f009 fa47 	bl	800a8a8 <siscanf>
 800141a:	4603      	mov	r3, r0
 800141c:	2b03      	cmp	r3, #3
 800141e:	d11a      	bne.n	8001456 <Process_UART_Data+0xda>
       sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) != 3 ||
 8001420:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001424:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8001428:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	460b      	mov	r3, r1
 8001430:	4928      	ldr	r1, [pc, #160]	@ (80014d4 <Process_UART_Data+0x158>)
 8001432:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001436:	f009 fa37 	bl	800a8a8 <siscanf>
 800143a:	4603      	mov	r3, r0
    if(sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day) != 3 ||
 800143c:	2b03      	cmp	r3, #3
 800143e:	d10a      	bne.n	8001456 <Process_UART_Data+0xda>
       sscanf(period_ptr, ";PERIOD:%lu", &period) != 1) {
 8001440:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001444:	461a      	mov	r2, r3
 8001446:	4924      	ldr	r1, [pc, #144]	@ (80014d8 <Process_UART_Data+0x15c>)
 8001448:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800144c:	f009 fa2c 	bl	800a8a8 <siscanf>
 8001450:	4603      	mov	r3, r0
       sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec) != 3 ||
 8001452:	2b01      	cmp	r3, #1
 8001454:	d004      	beq.n	8001460 <Process_UART_Data+0xe4>
        CDC_Transmit_FS((uint8_t*)"ERR: Parsing failed\r\n", 20);
 8001456:	2114      	movs	r1, #20
 8001458:	4820      	ldr	r0, [pc, #128]	@ (80014dc <Process_UART_Data+0x160>)
 800145a:	f007 fd4b 	bl	8008ef4 <CDC_Transmit_FS>
        return;
 800145e:	e029      	b.n	80014b4 <Process_UART_Data+0x138>
    }

    // Формируем и отправляем результат
    char usb_msg[128];
    snprintf(usb_msg, sizeof(usb_msg),
 8001460:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800146a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800146e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8001472:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001476:	f8d7 408c 	ldr.w	r4, [r7, #140]	@ 0x8c
 800147a:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 800147e:	f107 0608 	add.w	r6, r7, #8
 8001482:	9505      	str	r5, [sp, #20]
 8001484:	9404      	str	r4, [sp, #16]
 8001486:	9003      	str	r0, [sp, #12]
 8001488:	9102      	str	r1, [sp, #8]
 800148a:	9201      	str	r2, [sp, #4]
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	4a13      	ldr	r2, [pc, #76]	@ (80014e0 <Process_UART_Data+0x164>)
 8001492:	2180      	movs	r1, #128	@ 0x80
 8001494:	4630      	mov	r0, r6
 8001496:	f009 f9af 	bl	800a7f8 <sniprintf>
           "Date=%04d-%02d-%02d Time=%02d:%02d:%02d Period=%lus\r\n",
           year, month, day, hour, min, sec, period);

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe fee6 	bl	8000270 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f007 fd20 	bl	8008ef4 <CDC_Transmit_FS>
}
 80014b4:	37b4      	adds	r7, #180	@ 0xb4
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	0800e950 	.word	0x0800e950
 80014c0:	0800e96c 	.word	0x0800e96c
 80014c4:	0800e974 	.word	0x0800e974
 80014c8:	0800e97c 	.word	0x0800e97c
 80014cc:	0800e988 	.word	0x0800e988
 80014d0:	0800e9a8 	.word	0x0800e9a8
 80014d4:	0800e9b8 	.word	0x0800e9b8
 80014d8:	0800e9c8 	.word	0x0800e9c8
 80014dc:	0800e9d4 	.word	0x0800e9d4
 80014e0:	0800e9ec 	.word	0x0800e9ec

080014e4 <Send_To_Backup_MK>:


void Send_To_Backup_MK(DateTimeData* data)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b094      	sub	sp, #80	@ 0x50
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	6078      	str	r0, [r7, #4]
    char uart_msg[64];
    snprintf(uart_msg, sizeof(uart_msg),
           "DATE:%s;TIME:%s;PERIOD:%lu\r\n",
           data->date,  // Формат "YYYY-MM-DD"
 80014ec:	6879      	ldr	r1, [r7, #4]
           data->date + 11, // Время "HH:MM:SS"
 80014ee:	687b      	ldr	r3, [r7, #4]
    snprintf(uart_msg, sizeof(uart_msg),
 80014f0:	330b      	adds	r3, #11
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6952      	ldr	r2, [r2, #20]
 80014f6:	f107 0008 	add.w	r0, r7, #8
 80014fa:	9201      	str	r2, [sp, #4]
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	460b      	mov	r3, r1
 8001500:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <Send_To_Backup_MK+0x48>)
 8001502:	2140      	movs	r1, #64	@ 0x40
 8001504:	f009 f978 	bl	800a7f8 <sniprintf>
           data->period);

    HAL_UART_Transmit(&huart1, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe feaf 	bl	8000270 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	f107 0108 	add.w	r1, r7, #8
 800151a:	2364      	movs	r3, #100	@ 0x64
 800151c:	4804      	ldr	r0, [pc, #16]	@ (8001530 <Send_To_Backup_MK+0x4c>)
 800151e:	f003 f8b5 	bl	800468c <HAL_UART_Transmit>
}
 8001522:	bf00      	nop
 8001524:	3748      	adds	r7, #72	@ 0x48
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	0800ea24 	.word	0x0800ea24
 8001530:	20000338 	.word	0x20000338

08001534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0a8      	sub	sp, #160	@ 0xa0
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153a:	f000 fbd5 	bl	8001ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153e:	f000 f875 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001542:	f000 f93d 	bl	80017c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001546:	f000 f911 	bl	800176c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800154a:	f007 fbf9 	bl	8008d40 <MX_USB_DEVICE_Init>
  MX_SPI3_Init();
 800154e:	f000 f8d5 	bl	80016fc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);  // Включаем транзистор
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001558:	4829      	ldr	r0, [pc, #164]	@ (8001600 <main+0xcc>)
 800155a:	f000 ff9b 	bl	8002494 <HAL_GPIO_WritePin>
  Spi3_Init();
 800155e:	f7ff fd5f 	bl	8001020 <Spi3_Init>

  float temperature = Read_Temperature();
 8001562:	f7ff fdcb 	bl	80010fc <Read_Temperature>
 8001566:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c

  if(temperature < 0) {
 800156a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800156e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	d503      	bpl.n	8001580 <main+0x4c>
      printf("Error: Thermocouple open!\n");
 8001578:	4822      	ldr	r0, [pc, #136]	@ (8001604 <main+0xd0>)
 800157a:	f009 f935 	bl	800a7e8 <puts>
 800157e:	e008      	b.n	8001592 <main+0x5e>
  } else {
      printf("Temperature: %.2f C\n", temperature);
 8001580:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001584:	f7fe ffe0 	bl	8000548 <__aeabi_f2d>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	481e      	ldr	r0, [pc, #120]	@ (8001608 <main+0xd4>)
 800158e:	f009 f8c3 	bl	800a718 <iprintf>
  }

  HAL_Delay(1000);
 8001592:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001596:	f000 fc19 	bl	8001dcc <HAL_Delay>

  // Добавляем инициализацию UART приема
  HAL_UART_Receive_IT(&huart1, &uart_byte, 1);
 800159a:	2201      	movs	r2, #1
 800159c:	491b      	ldr	r1, [pc, #108]	@ (800160c <main+0xd8>)
 800159e:	481c      	ldr	r0, [pc, #112]	@ (8001610 <main+0xdc>)
 80015a0:	f003 f8ff 	bl	80047a2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	    // Обработка USB данных
	    if(new_data_received) {
 80015a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <main+0xe0>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00a      	beq.n	80015c4 <main+0x90>
	        new_data_received = 0;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <main+0xe0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
	        Process_USB_Command(usb_rx_buffer);
 80015b4:	4818      	ldr	r0, [pc, #96]	@ (8001618 <main+0xe4>)
 80015b6:	f7ff fdc1 	bl	800113c <Process_USB_Command>
	        memset((void*)usb_rx_buffer, 0, sizeof(usb_rx_buffer)); // Очистка буфера
 80015ba:	2240      	movs	r2, #64	@ 0x40
 80015bc:	2100      	movs	r1, #0
 80015be:	4816      	ldr	r0, [pc, #88]	@ (8001618 <main+0xe4>)
 80015c0:	f009 fa78 	bl	800aab4 <memset>
	    }

	    if(uart_msg_ready) {
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <main+0xe8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d013      	beq.n	80015f6 <main+0xc2>
	        uart_msg_ready = 0;
 80015ce:	4b13      	ldr	r3, [pc, #76]	@ (800161c <main+0xe8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
	        char raw_msg[150];
	        snprintf(raw_msg, sizeof(raw_msg), "UART RAW: %s\r\n", uart_buf);
 80015d4:	1d38      	adds	r0, r7, #4
 80015d6:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <main+0xec>)
 80015d8:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <main+0xf0>)
 80015da:	2196      	movs	r1, #150	@ 0x96
 80015dc:	f009 f90c 	bl	800a7f8 <sniprintf>
//	        CDC_Transmit_FS((uint8_t*)raw_msg, strlen(raw_msg));
	        Process_UART_Data(uart_buf);
 80015e0:	480f      	ldr	r0, [pc, #60]	@ (8001620 <main+0xec>)
 80015e2:	f7ff fecb 	bl	800137c <Process_UART_Data>
	        memset(uart_buf, 0, sizeof(uart_buf));
 80015e6:	2280      	movs	r2, #128	@ 0x80
 80015e8:	2100      	movs	r1, #0
 80015ea:	480d      	ldr	r0, [pc, #52]	@ (8001620 <main+0xec>)
 80015ec:	f009 fa62 	bl	800aab4 <memset>
	        uart_pos = 0;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <main+0xf4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	801a      	strh	r2, [r3, #0]
	    }
	    HAL_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 fbe8 	bl	8001dcc <HAL_Delay>
	    if(new_data_received) {
 80015fc:	e7d2      	b.n	80015a4 <main+0x70>
 80015fe:	bf00      	nop
 8001600:	40020800 	.word	0x40020800
 8001604:	0800ea44 	.word	0x0800ea44
 8001608:	0800ea60 	.word	0x0800ea60
 800160c:	2000041b 	.word	0x2000041b
 8001610:	20000338 	.word	0x20000338
 8001614:	20000748 	.word	0x20000748
 8001618:	20000708 	.word	0x20000708
 800161c:	2000041a 	.word	0x2000041a
 8001620:	20000398 	.word	0x20000398
 8001624:	0800ea78 	.word	0x0800ea78
 8001628:	20000418 	.word	0x20000418

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	@ 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	2230      	movs	r2, #48	@ 0x30
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f009 fa3a 	bl	800aab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <SystemClock_Config+0xc8>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	4a26      	ldr	r2, [pc, #152]	@ (80016f4 <SystemClock_Config+0xc8>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001660:	4b24      	ldr	r3, [pc, #144]	@ (80016f4 <SystemClock_Config+0xc8>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <SystemClock_Config+0xcc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a20      	ldr	r2, [pc, #128]	@ (80016f8 <SystemClock_Config+0xcc>)
 8001676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <SystemClock_Config+0xcc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001688:	2301      	movs	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800168c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001692:	2302      	movs	r3, #2
 8001694:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001696:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800169a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800169c:	2304      	movs	r3, #4
 800169e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016a0:	2348      	movs	r3, #72	@ 0x48
 80016a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016a8:	2303      	movs	r3, #3
 80016aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 f95b 	bl	800396c <HAL_RCC_OscConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016bc:	f000 f8f6 	bl	80018ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c0:	230f      	movs	r3, #15
 80016c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c4:	2302      	movs	r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	2102      	movs	r1, #2
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 fbbd 	bl	8003e5c <HAL_RCC_ClockConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016e8:	f000 f8e0 	bl	80018ac <Error_Handler>
  }
}
 80016ec:	bf00      	nop
 80016ee:	3750      	adds	r7, #80	@ 0x50
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40007000 	.word	0x40007000

080016fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001700:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <MX_SPI3_Init+0x68>)
 8001702:	4a19      	ldr	r2, [pc, #100]	@ (8001768 <MX_SPI3_Init+0x6c>)
 8001704:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <MX_SPI3_Init+0x68>)
 8001708:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800170c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <MX_SPI3_Init+0x68>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <MX_SPI3_Init+0x68>)
 8001716:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800171a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_SPI3_Init+0x68>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <MX_SPI3_Init+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_SPI3_Init+0x68>)
 800172a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800172e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <MX_SPI3_Init+0x68>)
 8001732:	2238      	movs	r2, #56	@ 0x38
 8001734:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <MX_SPI3_Init+0x68>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_SPI3_Init+0x68>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <MX_SPI3_Init+0x68>)
 8001744:	2200      	movs	r2, #0
 8001746:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_SPI3_Init+0x68>)
 800174a:	220a      	movs	r2, #10
 800174c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_SPI3_Init+0x68>)
 8001750:	f002 fda4 	bl	800429c <HAL_SPI_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800175a:	f000 f8a7 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200002e0 	.word	0x200002e0
 8001768:	40003c00 	.word	0x40003c00

0800176c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <MX_USART1_UART_Init+0x50>)
 8001774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001778:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800177c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 80017a4:	f002 ff22 	bl	80045ec <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ae:	f000 f87d 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000338 	.word	0x20000338
 80017bc:	40011000 	.word	0x40011000

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a30      	ldr	r2, [pc, #192]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a29      	ldr	r2, [pc, #164]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 80017fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b23      	ldr	r3, [pc, #140]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a22      	ldr	r2, [pc, #136]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b20      	ldr	r3, [pc, #128]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a1b      	ldr	r2, [pc, #108]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TH_CS_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 800184c:	4815      	ldr	r0, [pc, #84]	@ (80018a4 <MX_GPIO_Init+0xe4>)
 800184e:	f000 fe21 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2120      	movs	r1, #32
 8001856:	4814      	ldr	r0, [pc, #80]	@ (80018a8 <MX_GPIO_Init+0xe8>)
 8001858:	f000 fe1c 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TH_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TH_CS_Pin;
 800185c:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	480b      	ldr	r0, [pc, #44]	@ (80018a4 <MX_GPIO_Init+0xe4>)
 8001876:	f000 fc71 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800187a:	2320      	movs	r3, #32
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_GPIO_Init+0xe8>)
 8001892:	f000 fc63 	bl	800215c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020000 	.word	0x40020000

080018ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b0:	b672      	cpsid	i
}
 80018b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <Error_Handler+0x8>

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <HAL_MspInit+0x4c>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_MspInit+0x4c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800

08001908 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1d      	ldr	r2, [pc, #116]	@ (800199c <HAL_SPI_MspInit+0x94>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d134      	bne.n	8001994 <HAL_SPI_MspInit+0x8c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <HAL_SPI_MspInit+0x98>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	4a1b      	ldr	r2, [pc, #108]	@ (80019a0 <HAL_SPI_MspInit+0x98>)
 8001934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001938:	6413      	str	r3, [r2, #64]	@ 0x40
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_SPI_MspInit+0x98>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_SPI_MspInit+0x98>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a14      	ldr	r2, [pc, #80]	@ (80019a0 <HAL_SPI_MspInit+0x98>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_SPI_MspInit+0x98>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SPI3_SCK_Pin|SPI3_MISO_Pin|GPIO_PIN_12;
 8001962:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001974:	2306      	movs	r3, #6
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4809      	ldr	r0, [pc, #36]	@ (80019a4 <HAL_SPI_MspInit+0x9c>)
 8001980:	f000 fbec 	bl	800215c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2100      	movs	r1, #0
 8001988:	2033      	movs	r0, #51	@ 0x33
 800198a:	f000 fb1e 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800198e:	2033      	movs	r0, #51	@ 0x33
 8001990:	f000 fb37 	bl	8002002 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	@ 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40003c00 	.word	0x40003c00
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020800 	.word	0x40020800

080019a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	@ 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a3c <HAL_UART_MspInit+0x94>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d133      	bne.n	8001a32 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019d4:	f043 0310 	orr.w	r3, r3, #16
 80019d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019da:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a02:	23c0      	movs	r3, #192	@ 0xc0
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a12:	2307      	movs	r3, #7
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4809      	ldr	r0, [pc, #36]	@ (8001a44 <HAL_UART_MspInit+0x9c>)
 8001a1e:	f000 fb9d 	bl	800215c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2025      	movs	r0, #37	@ 0x25
 8001a28:	f000 facf 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a2c:	2025      	movs	r0, #37	@ 0x25
 8001a2e:	f000 fae8 	bl	8002002 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	@ 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020400 	.word	0x40020400

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <NMI_Handler+0x4>

08001a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <MemManage_Handler+0x4>

08001a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9e:	f000 f975 	bl	8001d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <USART1_IRQHandler+0x10>)
 8001aae:	f002 fe9d 	bl	80047ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000338 	.word	0x20000338

08001abc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <SPI3_IRQHandler+0x10>)
 8001ac2:	f002 fc75 	bl	80043b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002e0 	.word	0x200002e0

08001ad0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <OTG_FS_IRQHandler+0x10>)
 8001ad6:	f000 fe3a 	bl	800274e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000194c 	.word	0x2000194c

08001ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_kill>:

int _kill(int pid, int sig)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001afe:	f009 f873 	bl	800abe8 <__errno>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2216      	movs	r2, #22
 8001b06:	601a      	str	r2, [r3, #0]
  return -1;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_exit>:

void _exit (int status)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ffe7 	bl	8001af4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b26:	bf00      	nop
 8001b28:	e7fd      	b.n	8001b26 <_exit+0x12>

08001b2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e00a      	b.n	8001b52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b3c:	f3af 8000 	nop.w
 8001b40:	4601      	mov	r1, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	60ba      	str	r2, [r7, #8]
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dbf0      	blt.n	8001b3c <_read+0x12>
  }

  return len;
 8001b5a:	687b      	ldr	r3, [r7, #4]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e009      	b.n	8001b8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	60ba      	str	r2, [r7, #8]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	dbf1      	blt.n	8001b76 <_write+0x12>
  }
  return len;
 8001b92:	687b      	ldr	r3, [r7, #4]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_close>:

int _close(int file)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc4:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_isatty>:

int _isatty(int file)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	@ (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f008 ffd8 	bl	800abe8 <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	@ (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20020000 	.word	0x20020000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	20000420 	.word	0x20000420
 8001c6c:	200021a0 	.word	0x200021a0

08001c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <SystemInit+0x20>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <SystemInit+0x20>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ccc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c98:	f7ff ffea 	bl	8001c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c9c:	480c      	ldr	r0, [pc, #48]	@ (8001cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c9e:	490d      	ldr	r1, [pc, #52]	@ (8001cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca4:	e002      	b.n	8001cac <LoopCopyDataInit>

08001ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001caa:	3304      	adds	r3, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb0:	d3f9      	bcc.n	8001ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb8:	e001      	b.n	8001cbe <LoopFillZerobss>

08001cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cbc:	3204      	adds	r2, #4

08001cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc0:	d3fb      	bcc.n	8001cba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001cc2:	f008 ff97 	bl	800abf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc6:	f7ff fc35 	bl	8001534 <main>
  bx  lr    
 8001cca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd4:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001cd8:	0800ef40 	.word	0x0800ef40
  ldr r2, =_sbss
 8001cdc:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001ce0:	2000219c 	.word	0x2000219c

08001ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce4:	e7fe      	b.n	8001ce4 <ADC_IRQHandler>
	...

08001ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <HAL_Init+0x40>)
 8001cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <HAL_Init+0x40>)
 8001cfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a07      	ldr	r2, [pc, #28]	@ (8001d28 <HAL_Init+0x40>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d10:	2003      	movs	r0, #3
 8001d12:	f000 f94f 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d16:	200f      	movs	r0, #15
 8001d18:	f000 f808 	bl	8001d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d1c:	f7ff fdcc 	bl	80018b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023c00 	.word	0x40023c00

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_InitTick+0x54>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_InitTick+0x58>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f967 	bl	800201e <HAL_SYSTICK_Config>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00e      	b.n	8001d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b0f      	cmp	r3, #15
 8001d5e:	d80a      	bhi.n	8001d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d60:	2200      	movs	r2, #0
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f000 f92f 	bl	8001fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d6c:	4a06      	ldr	r2, [pc, #24]	@ (8001d88 <HAL_InitTick+0x5c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000008 	.word	0x20000008
 8001db0:	20000424 	.word	0x20000424

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000424 	.word	0x20000424

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff ffee 	bl	8001db4 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df2:	bf00      	nop
 8001df4:	f7ff ffde 	bl	8001db4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000008 	.word	0x20000008

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4907      	ldr	r1, [pc, #28]	@ (8001eb0 <__NVIC_EnableIRQ+0x38>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	490c      	ldr	r1, [pc, #48]	@ (8001f00 <__NVIC_SetPriority+0x4c>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4908      	ldr	r1, [pc, #32]	@ (8001f04 <__NVIC_SetPriority+0x50>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3b04      	subs	r3, #4
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	761a      	strb	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000e100 	.word	0xe000e100
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	@ 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f1c3 0307 	rsb	r3, r3, #7
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf28      	it	cs
 8001f26:	2304      	movcs	r3, #4
 8001f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d902      	bls.n	8001f38 <NVIC_EncodePriority+0x30>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3b03      	subs	r3, #3
 8001f36:	e000      	b.n	8001f3a <NVIC_EncodePriority+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	4313      	orrs	r3, r2
         );
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	@ 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f7ff ff8e 	bl	8001eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff29 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff3e 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff8e 	bl	8001f08 <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5d 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff31 	bl	8001e78 <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffa2 	bl	8001f70 <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff feb6 	bl	8001db4 <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d008      	beq.n	8002068 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2280      	movs	r2, #128	@ 0x80
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e052      	b.n	800210e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0216 	bic.w	r2, r2, #22
 8002076:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002086:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d103      	bne.n	8002098 <HAL_DMA_Abort+0x62>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0208 	bic.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b8:	e013      	b.n	80020e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ba:	f7ff fe7b 	bl	8001db4 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d90c      	bls.n	80020e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2203      	movs	r2, #3
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e015      	b.n	800210e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e4      	bne.n	80020ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	223f      	movs	r2, #63	@ 0x3f
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d004      	beq.n	8002134 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2280      	movs	r2, #128	@ 0x80
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e00c      	b.n	800214e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2205      	movs	r2, #5
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	@ 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e16b      	b.n	8002450 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 815a 	bne.w	800244a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d005      	beq.n	80021ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d130      	bne.n	8002210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e4:	2201      	movs	r2, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 0201 	and.w	r2, r3, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b03      	cmp	r3, #3
 800221a:	d017      	beq.n	800224c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80b4 	beq.w	800244a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b60      	ldr	r3, [pc, #384]	@ (8002468 <HAL_GPIO_Init+0x30c>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002468 <HAL_GPIO_Init+0x30c>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002468 <HAL_GPIO_Init+0x30c>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a5b      	ldr	r2, [pc, #364]	@ (800246c <HAL_GPIO_Init+0x310>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a52      	ldr	r2, [pc, #328]	@ (8002470 <HAL_GPIO_Init+0x314>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d02b      	beq.n	8002382 <HAL_GPIO_Init+0x226>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a51      	ldr	r2, [pc, #324]	@ (8002474 <HAL_GPIO_Init+0x318>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d025      	beq.n	800237e <HAL_GPIO_Init+0x222>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a50      	ldr	r2, [pc, #320]	@ (8002478 <HAL_GPIO_Init+0x31c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01f      	beq.n	800237a <HAL_GPIO_Init+0x21e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4f      	ldr	r2, [pc, #316]	@ (800247c <HAL_GPIO_Init+0x320>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d019      	beq.n	8002376 <HAL_GPIO_Init+0x21a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4e      	ldr	r2, [pc, #312]	@ (8002480 <HAL_GPIO_Init+0x324>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0x216>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4d      	ldr	r2, [pc, #308]	@ (8002484 <HAL_GPIO_Init+0x328>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_GPIO_Init+0x212>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4c      	ldr	r2, [pc, #304]	@ (8002488 <HAL_GPIO_Init+0x32c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x20e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4b      	ldr	r2, [pc, #300]	@ (800248c <HAL_GPIO_Init+0x330>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_GPIO_Init+0x20a>
 8002362:	2307      	movs	r3, #7
 8002364:	e00e      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002366:	2308      	movs	r3, #8
 8002368:	e00c      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800236a:	2306      	movs	r3, #6
 800236c:	e00a      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800236e:	2305      	movs	r3, #5
 8002370:	e008      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002372:	2304      	movs	r3, #4
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002376:	2303      	movs	r3, #3
 8002378:	e004      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800237a:	2302      	movs	r3, #2
 800237c:	e002      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002382:	2300      	movs	r3, #0
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	f002 0203 	and.w	r2, r2, #3
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	4093      	lsls	r3, r2
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002394:	4935      	ldr	r1, [pc, #212]	@ (800246c <HAL_GPIO_Init+0x310>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002490 <HAL_GPIO_Init+0x334>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c6:	4a32      	ldr	r2, [pc, #200]	@ (8002490 <HAL_GPIO_Init+0x334>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023cc:	4b30      	ldr	r3, [pc, #192]	@ (8002490 <HAL_GPIO_Init+0x334>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f0:	4a27      	ldr	r2, [pc, #156]	@ (8002490 <HAL_GPIO_Init+0x334>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023f6:	4b26      	ldr	r3, [pc, #152]	@ (8002490 <HAL_GPIO_Init+0x334>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800241a:	4a1d      	ldr	r2, [pc, #116]	@ (8002490 <HAL_GPIO_Init+0x334>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <HAL_GPIO_Init+0x334>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002444:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <HAL_GPIO_Init+0x334>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3301      	adds	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b0f      	cmp	r3, #15
 8002454:	f67f ae90 	bls.w	8002178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3724      	adds	r7, #36	@ 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40013800 	.word	0x40013800
 8002470:	40020000 	.word	0x40020000
 8002474:	40020400 	.word	0x40020400
 8002478:	40020800 	.word	0x40020800
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40021000 	.word	0x40021000
 8002484:	40021400 	.word	0x40021400
 8002488:	40021800 	.word	0x40021800
 800248c:	40021c00 	.word	0x40021c00
 8002490:	40013c00 	.word	0x40013c00

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b0:	e003      	b.n	80024ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	041a      	lsls	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af02      	add	r7, sp, #8
 80024cc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e101      	b.n	80026dc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f006 fe4c 	bl	8009190 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2203      	movs	r2, #3
 80024fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002506:	d102      	bne.n	800250e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f003 f9ed 	bl	80058f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7c1a      	ldrb	r2, [r3, #16]
 8002520:	f88d 2000 	strb.w	r2, [sp]
 8002524:	3304      	adds	r3, #4
 8002526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002528:	f003 f8cc 	bl	80056c4 <USB_CoreInit>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0ce      	b.n	80026dc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f003 f9e5 	bl	8005914 <USB_SetCurrentMode>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0bf      	b.n	80026dc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e04a      	b.n	80025f8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	3315      	adds	r3, #21
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	3314      	adds	r3, #20
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	b298      	uxth	r0, r3
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	332e      	adds	r3, #46	@ 0x2e
 800259e:	4602      	mov	r2, r0
 80025a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	3318      	adds	r3, #24
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	331c      	adds	r3, #28
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3320      	adds	r3, #32
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3324      	adds	r3, #36	@ 0x24
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	3301      	adds	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	791b      	ldrb	r3, [r3, #4]
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3af      	bcc.n	8002562 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e044      	b.n	8002692 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	3301      	adds	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	791b      	ldrb	r3, [r3, #4]
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3b5      	bcc.n	8002608 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7c1a      	ldrb	r2, [r3, #16]
 80026a4:	f88d 2000 	strb.w	r2, [sp]
 80026a8:	3304      	adds	r3, #4
 80026aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ac:	f003 f97e 	bl	80059ac <USB_DevInit>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00c      	b.n	80026dc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f004 f9c8 	bl	8006a6a <USB_DevDisconnect>

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_PCD_Start+0x1c>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e022      	b.n	8002746 <HAL_PCD_Start+0x62>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002720:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 f8cf 	bl	80058d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f004 f976 	bl	8006a28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800274e:	b590      	push	{r4, r7, lr}
 8002750:	b08d      	sub	sp, #52	@ 0x34
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f004 fa34 	bl	8006bd2 <USB_GetMode>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 848c 	bne.w	800308a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f004 f998 	bl	8006aac <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8482 	beq.w	8003088 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f004 f985 	bl	8006aac <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d107      	bne.n	80027bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f002 0202 	and.w	r2, r2, #2
 80027ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 f973 	bl	8006aac <USB_ReadInterrupts>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d161      	bne.n	8002894 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0210 	bic.w	r2, r2, #16
 80027de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f003 020f 	and.w	r2, r3, #15
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002806:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800280a:	d124      	bne.n	8002856 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d035      	beq.n	8002884 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	6a38      	ldr	r0, [r7, #32]
 800282c:	f003 ffaa 	bl	8006784 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800283c:	441a      	add	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800284e:	441a      	add	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	615a      	str	r2, [r3, #20]
 8002854:	e016      	b.n	8002884 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800285c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002860:	d110      	bne.n	8002884 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002868:	2208      	movs	r2, #8
 800286a:	4619      	mov	r1, r3
 800286c:	6a38      	ldr	r0, [r7, #32]
 800286e:	f003 ff89 	bl	8006784 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800287e:	441a      	add	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0210 	orr.w	r2, r2, #16
 8002892:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f004 f907 	bl	8006aac <USB_ReadInterrupts>
 800289e:	4603      	mov	r3, r0
 80028a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028a8:	f040 80a7 	bne.w	80029fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 f90c 	bl	8006ad2 <USB_ReadDevAllOutEpInterrupt>
 80028ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80028bc:	e099      	b.n	80029f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 808e 	beq.w	80029e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f004 f930 	bl	8006b3a <USB_ReadDevOutEPInterrupt>
 80028da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f2:	461a      	mov	r2, r3
 80028f4:	2301      	movs	r3, #1
 80028f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fea4 	bl	8003648 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	2308      	movs	r3, #8
 800291a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800291c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 ff7a 	bl	8003818 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800293a:	461a      	mov	r2, r3
 800293c:	2310      	movs	r3, #16
 800293e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d030      	beq.n	80029ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002952:	2b80      	cmp	r3, #128	@ 0x80
 8002954:	d109      	bne.n	800296a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002964:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002968:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800296a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	3304      	adds	r3, #4
 800297e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	78db      	ldrb	r3, [r3, #3]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d108      	bne.n	800299a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2200      	movs	r2, #0
 800298c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	b2db      	uxtb	r3, r3
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f006 fd01 	bl	800939c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a6:	461a      	mov	r2, r3
 80029a8:	2302      	movs	r3, #2
 80029aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029c2:	461a      	mov	r2, r3
 80029c4:	2320      	movs	r3, #32
 80029c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029de:	461a      	mov	r2, r3
 80029e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	3301      	adds	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f47f af62 	bne.w	80028be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f004 f854 	bl	8006aac <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a0e:	f040 80db 	bne.w	8002bc8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 f875 	bl	8006b06 <USB_ReadDevAllInEpInterrupt>
 8002a1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a22:	e0cd      	b.n	8002bc0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80c2 	beq.w	8002bb4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 f89b 	bl	8006b76 <USB_ReadDevInEPInterrupt>
 8002a40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d057      	beq.n	8002afc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	2201      	movs	r2, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69f9      	ldr	r1, [r7, #28]
 8002a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2301      	movs	r3, #1
 8002a80:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	799b      	ldrb	r3, [r3, #6]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d132      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3320      	adds	r3, #32
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4403      	add	r3, r0
 8002aaa:	331c      	adds	r3, #28
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4419      	add	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4403      	add	r3, r0
 8002abe:	3320      	adds	r3, #32
 8002ac0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d113      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x3a2>
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3324      	adds	r3, #36	@ 0x24
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d108      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2101      	movs	r1, #1
 8002aec:	f004 f8a2 	bl	8006c34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f006 fbcb 	bl	8009292 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b12:	461a      	mov	r2, r3
 8002b14:	2308      	movs	r3, #8
 8002b16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2310      	movs	r3, #16
 8002b32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2340      	movs	r3, #64	@ 0x40
 8002b4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d023      	beq.n	8002ba2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b5c:	6a38      	ldr	r0, [r7, #32]
 8002b5e:	f003 f889 	bl	8005c74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	3310      	adds	r3, #16
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	78db      	ldrb	r3, [r3, #3]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f006 fc18 	bl	80093c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fcbd 	bl	800352e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bbc:	085b      	lsrs	r3, r3, #1
 8002bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f47f af2e 	bne.w	8002a24 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 ff6d 	bl	8006aac <USB_ReadInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bdc:	d122      	bne.n	8002c24 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d108      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c04:	2100      	movs	r1, #0
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fea4 	bl	8003954 <HAL_PCDEx_LPM_Callback>
 8002c0c:	e002      	b.n	8002c14 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f006 fbb6 	bl	8009380 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 ff3f 	bl	8006aac <USB_ReadInterrupts>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c38:	d112      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d102      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f006 fb72 	bl	8009334 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c5e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 ff21 	bl	8006aac <USB_ReadInterrupts>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c74:	f040 80b7 	bne.w	8002de6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2110      	movs	r1, #16
 8002c92:	4618      	mov	r0, r3
 8002c94:	f002 ffee 	bl	8005c74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c9c:	e046      	b.n	8002d2c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002caa:	461a      	mov	r2, r3
 8002cac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cc2:	0151      	lsls	r1, r2, #5
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	440a      	add	r2, r1
 8002cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002ccc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ce4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cf6:	0151      	lsls	r1, r2, #5
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	440a      	add	r2, r1
 8002cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d16:	0151      	lsls	r1, r2, #5
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	440a      	add	r2, r1
 8002d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d28:	3301      	adds	r3, #1
 8002d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	791b      	ldrb	r3, [r3, #4]
 8002d30:	461a      	mov	r2, r3
 8002d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d3b2      	bcc.n	8002c9e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d46:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d4a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7bdb      	ldrb	r3, [r3, #15]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d016      	beq.n	8002d82 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d64:	f043 030b 	orr.w	r3, r3, #11
 8002d68:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d7a:	f043 030b 	orr.w	r3, r3, #11
 8002d7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d80:	e015      	b.n	8002dae <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d94:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d98:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002da8:	f043 030b 	orr.w	r3, r3, #11
 8002dac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dbc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002dc0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f003 ff2f 	bl	8006c34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fe5e 	bl	8006aac <USB_ReadInterrupts>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dfa:	d123      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 fef4 	bl	8006bee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f002 ffab 	bl	8005d66 <USB_GetDevSpeed>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681c      	ldr	r4, [r3, #0]
 8002e1c:	f001 fa0a 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8002e20:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e26:	461a      	mov	r2, r3
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f002 fcaf 	bl	800578c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f006 fa57 	bl	80092e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f003 fe2f 	bl	8006aac <USB_ReadInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d10a      	bne.n	8002e6e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f006 fa34 	bl	80092c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f002 0208 	and.w	r2, r2, #8
 8002e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 fe1a 	bl	8006aac <USB_ReadInterrupts>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7e:	2b80      	cmp	r3, #128	@ 0x80
 8002e80:	d123      	bne.n	8002eca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e8e:	2301      	movs	r3, #1
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e92:	e014      	b.n	8002ebe <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fb0a 	bl	80034cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	3301      	adds	r3, #1
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	791b      	ldrb	r3, [r3, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d3e4      	bcc.n	8002e94 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fdec 	bl	8006aac <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ede:	d13c      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee4:	e02b      	b.n	8002f3e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3318      	adds	r3, #24
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d115      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da12      	bge.n	8002f38 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	3317      	adds	r3, #23
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 faca 	bl	80034cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	791b      	ldrb	r3, [r3, #4]
 8002f42:	461a      	mov	r2, r3
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d3cd      	bcc.n	8002ee6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 fda4 	bl	8006aac <USB_ReadInterrupts>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f6e:	d156      	bne.n	800301e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f70:	2301      	movs	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f74:	e045      	b.n	8003002 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d12e      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	da2b      	bge.n	8002ffc <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	0c1a      	lsrs	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002fae:	4053      	eors	r3, r2
 8002fb0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d121      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ff4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ff8:	6053      	str	r3, [r2, #4]
            break;
 8002ffa:	e008      	b.n	800300e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	3301      	adds	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	791b      	ldrb	r3, [r3, #4]
 8003006:	461a      	mov	r2, r3
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	4293      	cmp	r3, r2
 800300c:	d3b3      	bcc.n	8002f76 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800301c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 fd42 	bl	8006aac <USB_ReadInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800302e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003032:	d10a      	bne.n	800304a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f006 f9d5 	bl	80093e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f003 fd2c 	bl	8006aac <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d115      	bne.n	800308a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f006 f9c5 	bl	8009400 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	e000      	b.n	800308a <HAL_PCD_IRQHandler+0x93c>
      return;
 8003088:	bf00      	nop
    }
  }
}
 800308a:	3734      	adds	r7, #52	@ 0x34
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}

08003090 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_PCD_SetAddress+0x1a>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e012      	b.n	80030d0 <HAL_PCD_SetAddress+0x40>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 fc8b 	bl	80069dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	4608      	mov	r0, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	70fb      	strb	r3, [r7, #3]
 80030ea:	460b      	mov	r3, r1
 80030ec:	803b      	strh	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da0f      	bge.n	800311e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	3310      	adds	r3, #16
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	3304      	adds	r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	705a      	strb	r2, [r3, #1]
 800311c:	e00f      	b.n	800313e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	f003 020f 	and.w	r2, r3, #15
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	3304      	adds	r3, #4
 8003136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800314a:	883b      	ldrh	r3, [r7, #0]
 800314c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	78ba      	ldrb	r2, [r7, #2]
 8003158:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800316c:	78bb      	ldrb	r3, [r7, #2]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d102      	bne.n	8003178 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_PCD_EP_Open+0xae>
 8003182:	2302      	movs	r3, #2
 8003184:	e00e      	b.n	80031a4 <HAL_PCD_EP_Open+0xcc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	4618      	mov	r0, r3
 8003196:	f002 fe0b 	bl	8005db0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80031a2:	7afb      	ldrb	r3, [r7, #11]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	da0f      	bge.n	80031e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	3310      	adds	r3, #16
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	705a      	strb	r2, [r3, #1]
 80031de:	e00f      	b.n	8003200 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	b2da      	uxtb	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_PCD_EP_Close+0x6e>
 8003216:	2302      	movs	r3, #2
 8003218:	e00e      	b.n	8003238 <HAL_PCD_EP_Close+0x8c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	4618      	mov	r0, r3
 800322a:	f002 fe49 	bl	8005ec0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	460b      	mov	r3, r1
 800324e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003250:	7afb      	ldrb	r3, [r7, #11]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2200      	movs	r2, #0
 8003280:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003282:	7afb      	ldrb	r3, [r7, #11]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	b2da      	uxtb	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	799b      	ldrb	r3, [r3, #6]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d102      	bne.n	800329c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	799b      	ldrb	r3, [r3, #6]
 80032a4:	461a      	mov	r2, r3
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	f002 fee6 	bl	8006078 <USB_EPStartXfer>

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80032d8:	681b      	ldr	r3, [r3, #0]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	460b      	mov	r3, r1
 80032f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f6:	7afb      	ldrb	r3, [r7, #11]
 80032f8:	f003 020f 	and.w	r2, r3, #15
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	3310      	adds	r3, #16
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4413      	add	r3, r2
 800330a:	3304      	adds	r3, #4
 800330c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2200      	movs	r2, #0
 800331e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2201      	movs	r2, #1
 8003324:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003326:	7afb      	ldrb	r3, [r7, #11]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	b2da      	uxtb	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	799b      	ldrb	r3, [r3, #6]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d102      	bne.n	8003340 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	799b      	ldrb	r3, [r3, #6]
 8003348:	461a      	mov	r2, r3
 800334a:	6979      	ldr	r1, [r7, #20]
 800334c:	f002 fe94 	bl	8006078 <USB_EPStartXfer>

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	7912      	ldrb	r2, [r2, #4]
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e04f      	b.n	8003418 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800337c:	2b00      	cmp	r3, #0
 800337e:	da0f      	bge.n	80033a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	f003 020f 	and.w	r2, r3, #15
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	3310      	adds	r3, #16
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	3304      	adds	r3, #4
 8003396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	705a      	strb	r2, [r3, #1]
 800339e:	e00d      	b.n	80033bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_PCD_EP_SetStall+0x82>
 80033d8:	2302      	movs	r3, #2
 80033da:	e01d      	b.n	8003418 <HAL_PCD_EP_SetStall+0xbe>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fa22 	bl	8006834 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	7999      	ldrb	r1, [r3, #6]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003408:	461a      	mov	r2, r3
 800340a:	f003 fc13 	bl	8006c34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	7912      	ldrb	r2, [r2, #4]
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e042      	b.n	80034c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800343e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003442:	2b00      	cmp	r3, #0
 8003444:	da0f      	bge.n	8003466 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 020f 	and.w	r2, r3, #15
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	3310      	adds	r3, #16
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	3304      	adds	r3, #4
 800345c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	705a      	strb	r2, [r3, #1]
 8003464:	e00f      	b.n	8003486 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f003 020f 	and.w	r2, r3, #15
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	3304      	adds	r3, #4
 800347e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_PCD_EP_ClrStall+0x86>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e00e      	b.n	80034c4 <HAL_PCD_EP_ClrStall+0xa4>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68f9      	ldr	r1, [r7, #12]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 fa2b 	bl	8006910 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	da0c      	bge.n	80034fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	3310      	adds	r3, #16
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4413      	add	r3, r2
 80034f4:	3304      	adds	r3, #4
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e00c      	b.n	8003514 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	f003 020f 	and.w	r2, r3, #15
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	3304      	adds	r3, #4
 8003512:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	4618      	mov	r0, r3
 800351c:	f003 f84a 	bl	80065b4 <USB_EPStopXfer>
 8003520:	4603      	mov	r3, r0
 8003522:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003524:	7afb      	ldrb	r3, [r7, #11]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b08a      	sub	sp, #40	@ 0x28
 8003532:	af02      	add	r7, sp, #8
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	3310      	adds	r3, #16
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	3304      	adds	r3, #4
 8003554:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	429a      	cmp	r2, r3
 8003560:	d901      	bls.n	8003566 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e06b      	b.n	800363e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	429a      	cmp	r2, r3
 800357a:	d902      	bls.n	8003582 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3303      	adds	r3, #3
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800358a:	e02a      	b.n	80035e2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d902      	bls.n	80035a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3303      	adds	r3, #3
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68d9      	ldr	r1, [r3, #12]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	4603      	mov	r3, r0
 80035c4:	6978      	ldr	r0, [r7, #20]
 80035c6:	f003 f89f 	bl	8006708 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	441a      	add	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	441a      	add	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d809      	bhi.n	800360c <PCD_WriteEmptyTxFifo+0xde>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003600:	429a      	cmp	r2, r3
 8003602:	d203      	bcs.n	800360c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1bf      	bne.n	800358c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	d811      	bhi.n	800363c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	2201      	movs	r2, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800362c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	43db      	mvns	r3, r3
 8003632:	6939      	ldr	r1, [r7, #16]
 8003634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003638:	4013      	ands	r3, r2
 800363a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	333c      	adds	r3, #60	@ 0x3c
 8003660:	3304      	adds	r3, #4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	799b      	ldrb	r3, [r3, #6]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d17b      	bne.n	8003776 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	4a61      	ldr	r2, [pc, #388]	@ (8003810 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	f240 80b9 	bls.w	8003804 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80b3 	beq.w	8003804 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036aa:	461a      	mov	r2, r3
 80036ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036b0:	6093      	str	r3, [r2, #8]
 80036b2:	e0a7      	b.n	8003804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ca:	461a      	mov	r2, r3
 80036cc:	2320      	movs	r3, #32
 80036ce:	6093      	str	r3, [r2, #8]
 80036d0:	e098      	b.n	8003804 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f040 8093 	bne.w	8003804 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003810 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d90f      	bls.n	8003706 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036fc:	461a      	mov	r2, r3
 80036fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003702:	6093      	str	r3, [r2, #8]
 8003704:	e07e      	b.n	8003804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1a      	ldr	r2, [r3, #32]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	0159      	lsls	r1, r3, #5
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	440b      	add	r3, r1
 8003728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003732:	1ad2      	subs	r2, r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d114      	bne.n	8003768 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003750:	461a      	mov	r2, r3
 8003752:	2101      	movs	r1, #1
 8003754:	f003 fa6e 	bl	8006c34 <USB_EP0_OutStart>
 8003758:	e006      	b.n	8003768 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	441a      	add	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	4619      	mov	r1, r3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f005 fd74 	bl	800925c <HAL_PCD_DataOutStageCallback>
 8003774:	e046      	b.n	8003804 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	4a26      	ldr	r2, [pc, #152]	@ (8003814 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d124      	bne.n	80037c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003794:	461a      	mov	r2, r3
 8003796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800379a:	6093      	str	r3, [r2, #8]
 800379c:	e032      	b.n	8003804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b4:	461a      	mov	r2, r3
 80037b6:	2320      	movs	r3, #32
 80037b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f005 fd4b 	bl	800925c <HAL_PCD_DataOutStageCallback>
 80037c6:	e01d      	b.n	8003804 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d114      	bne.n	80037f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d108      	bne.n	80037f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037f0:	461a      	mov	r2, r3
 80037f2:	2100      	movs	r1, #0
 80037f4:	f003 fa1e 	bl	8006c34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	4619      	mov	r1, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f005 fd2c 	bl	800925c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	4f54300a 	.word	0x4f54300a
 8003814:	4f54310a 	.word	0x4f54310a

08003818 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	333c      	adds	r3, #60	@ 0x3c
 8003830:	3304      	adds	r3, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a15      	ldr	r2, [pc, #84]	@ (80038a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d90e      	bls.n	800386c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003854:	2b00      	cmp	r3, #0
 8003856:	d009      	beq.n	800386c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003864:	461a      	mov	r2, r3
 8003866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800386a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f005 fce3 	bl	8009238 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d90c      	bls.n	8003894 <PCD_EP_OutSetupPacket_int+0x7c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	799b      	ldrb	r3, [r3, #6]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d108      	bne.n	8003894 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800388c:	461a      	mov	r2, r3
 800388e:	2101      	movs	r1, #1
 8003890:	f003 f9d0 	bl	8006c34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	4f54300a 	.word	0x4f54300a

080038a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
 80038b0:	4613      	mov	r3, r2
 80038b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d107      	bne.n	80038d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038c2:	883b      	ldrh	r3, [r7, #0]
 80038c4:	0419      	lsls	r1, r3, #16
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80038d0:	e028      	b.n	8003924 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	4413      	add	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	e00d      	b.n	8003902 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	3340      	adds	r3, #64	@ 0x40
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4413      	add	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	3301      	adds	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	3b01      	subs	r3, #1
 8003908:	429a      	cmp	r2, r3
 800390a:	d3ec      	bcc.n	80038e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800390c:	883b      	ldrh	r3, [r7, #0]
 800390e:	0418      	lsls	r0, r3, #16
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	3b01      	subs	r3, #1
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	4302      	orrs	r2, r0
 800391c:	3340      	adds	r3, #64	@ 0x40
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	460b      	mov	r3, r1
 800393c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e267      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d075      	beq.n	8003a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800398a:	4b88      	ldr	r3, [pc, #544]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d00c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b85      	ldr	r3, [pc, #532]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d112      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a2:	4b82      	ldr	r3, [pc, #520]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ae:	d10b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	4b7e      	ldr	r3, [pc, #504]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d05b      	beq.n	8003a74 <HAL_RCC_OscConfig+0x108>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d157      	bne.n	8003a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e242      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d0:	d106      	bne.n	80039e0 <HAL_RCC_OscConfig+0x74>
 80039d2:	4b76      	ldr	r3, [pc, #472]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a75      	ldr	r2, [pc, #468]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e01d      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x98>
 80039ea:	4b70      	ldr	r3, [pc, #448]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6f      	ldr	r2, [pc, #444]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b6d      	ldr	r3, [pc, #436]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6c      	ldr	r2, [pc, #432]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
 8003a04:	4b69      	ldr	r3, [pc, #420]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a68      	ldr	r2, [pc, #416]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b66      	ldr	r3, [pc, #408]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a65      	ldr	r2, [pc, #404]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fe f9c6 	bl	8001db4 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fe f9c2 	bl	8001db4 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	@ 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e207      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0xc0>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fe f9b2 	bl	8001db4 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fe f9ae 	bl	8001db4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e1f3      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	4b51      	ldr	r3, [pc, #324]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0xe8>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d063      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a82:	4b4a      	ldr	r3, [pc, #296]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b47      	ldr	r3, [pc, #284]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d11c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9a:	4b44      	ldr	r3, [pc, #272]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d116      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa6:	4b41      	ldr	r3, [pc, #260]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_RCC_OscConfig+0x152>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e1c7      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b3b      	ldr	r3, [pc, #236]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4937      	ldr	r1, [pc, #220]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad2:	e03a      	b.n	8003b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003adc:	4b34      	ldr	r3, [pc, #208]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fe f967 	bl	8001db4 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aea:	f7fe f963 	bl	8001db4 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e1a8      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	4b2b      	ldr	r3, [pc, #172]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b08:	4b28      	ldr	r3, [pc, #160]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4925      	ldr	r1, [pc, #148]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]
 8003b1c:	e015      	b.n	8003b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1e:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe f946 	bl	8001db4 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2c:	f7fe f942 	bl	8001db4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e187      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d036      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5e:	4b15      	ldr	r3, [pc, #84]	@ (8003bb4 <HAL_RCC_OscConfig+0x248>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fe f926 	bl	8001db4 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fe f922 	bl	8001db4 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e167      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x200>
 8003b8a:	e01b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8c:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <HAL_RCC_OscConfig+0x248>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b92:	f7fe f90f 	bl	8001db4 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b98:	e00e      	b.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b9a:	f7fe f90b 	bl	8001db4 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d907      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e150      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	42470000 	.word	0x42470000
 8003bb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b88      	ldr	r3, [pc, #544]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ea      	bne.n	8003b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8097 	beq.w	8003d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b81      	ldr	r3, [pc, #516]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	4b7d      	ldr	r3, [pc, #500]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	4a7c      	ldr	r2, [pc, #496]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bf2:	4b7a      	ldr	r3, [pc, #488]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b77      	ldr	r3, [pc, #476]	@ (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4b74      	ldr	r3, [pc, #464]	@ (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a73      	ldr	r2, [pc, #460]	@ (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fe f8cb 	bl	8001db4 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fe f8c7 	bl	8001db4 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e10c      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b6a      	ldr	r3, [pc, #424]	@ (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x2ea>
 8003c48:	4b64      	ldr	r3, [pc, #400]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4c:	4a63      	ldr	r2, [pc, #396]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c54:	e01c      	b.n	8003c90 <HAL_RCC_OscConfig+0x324>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x30c>
 8003c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a5e      	ldr	r2, [pc, #376]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0x324>
 8003c78:	4b58      	ldr	r3, [pc, #352]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7c:	4a57      	ldr	r2, [pc, #348]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c84:	4b55      	ldr	r3, [pc, #340]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c88:	4a54      	ldr	r2, [pc, #336]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f023 0304 	bic.w	r3, r3, #4
 8003c8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fe f88c 	bl	8001db4 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca0:	f7fe f888 	bl	8001db4 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e0cb      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	4b49      	ldr	r3, [pc, #292]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ee      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x334>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fe f876 	bl	8001db4 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fe f872 	bl	8001db4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0b5      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ee      	bne.n	8003ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf4:	4b39      	ldr	r3, [pc, #228]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	4a38      	ldr	r2, [pc, #224]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80a1 	beq.w	8003e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d0a:	4b34      	ldr	r3, [pc, #208]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d05c      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d141      	bne.n	8003da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b31      	ldr	r3, [pc, #196]	@ (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe f846 	bl	8001db4 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe f842 	bl	8001db4 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e087      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b27      	ldr	r3, [pc, #156]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	019b      	lsls	r3, r3, #6
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	3b01      	subs	r3, #1
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	491b      	ldr	r1, [pc, #108]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d74:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fe f81b 	bl	8001db4 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fe f817 	bl	8001db4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e05c      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d94:	4b11      	ldr	r3, [pc, #68]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x416>
 8003da0:	e054      	b.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da2:	4b10      	ldr	r3, [pc, #64]	@ (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fe f804 	bl	8001db4 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fe f800 	bl	8001db4 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e045      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x444>
 8003dce:	e03d      	b.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e038      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000
 8003de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <HAL_RCC_OscConfig+0x4ec>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d028      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d121      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d11a      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d111      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	3b01      	subs	r3, #1
 8003e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800

08003e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0cc      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e70:	4b68      	ldr	r3, [pc, #416]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d90c      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b65      	ldr	r3, [pc, #404]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b63      	ldr	r3, [pc, #396]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0b8      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb0:	4b59      	ldr	r3, [pc, #356]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a58      	ldr	r2, [pc, #352]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec8:	4b53      	ldr	r3, [pc, #332]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed4:	4b50      	ldr	r3, [pc, #320]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	494d      	ldr	r1, [pc, #308]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d044      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b47      	ldr	r3, [pc, #284]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d119      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e07f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e06f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e067      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f3a:	4b37      	ldr	r3, [pc, #220]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 0203 	bic.w	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4934      	ldr	r1, [pc, #208]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f4c:	f7fd ff32 	bl	8001db4 <HAL_GetTick>
 8003f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f54:	f7fd ff2e 	bl	8001db4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e04f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 020c 	and.w	r2, r3, #12
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d1eb      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b25      	ldr	r3, [pc, #148]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d20c      	bcs.n	8003fa4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b22      	ldr	r3, [pc, #136]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b20      	ldr	r3, [pc, #128]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e032      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb0:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4916      	ldr	r1, [pc, #88]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fce:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	490e      	ldr	r1, [pc, #56]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fe2:	f000 f821 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	490a      	ldr	r1, [pc, #40]	@ (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff4:	5ccb      	ldrb	r3, [r1, r3]
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	4a09      	ldr	r2, [pc, #36]	@ (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ffe:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <HAL_RCC_ClockConfig+0x1c8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fd fe92 	bl	8001d2c <HAL_InitTick>

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023c00 	.word	0x40023c00
 8004018:	40023800 	.word	0x40023800
 800401c:	0800eadc 	.word	0x0800eadc
 8004020:	20000000 	.word	0x20000000
 8004024:	20000004 	.word	0x20000004

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800402c:	b094      	sub	sp, #80	@ 0x50
 800402e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004040:	4b79      	ldr	r3, [pc, #484]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d00d      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x40>
 800404c:	2b08      	cmp	r3, #8
 800404e:	f200 80e1 	bhi.w	8004214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x34>
 8004056:	2b04      	cmp	r3, #4
 8004058:	d003      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x3a>
 800405a:	e0db      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b73      	ldr	r3, [pc, #460]	@ (800422c <HAL_RCC_GetSysClockFreq+0x204>)
 800405e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004060:	e0db      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004062:	4b73      	ldr	r3, [pc, #460]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x208>)
 8004064:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004066:	e0d8      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004068:	4b6f      	ldr	r3, [pc, #444]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004070:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004072:	4b6d      	ldr	r3, [pc, #436]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d063      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b6a      	ldr	r3, [pc, #424]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	2200      	movs	r2, #0
 8004086:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004088:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004090:	633b      	str	r3, [r7, #48]	@ 0x30
 8004092:	2300      	movs	r3, #0
 8004094:	637b      	str	r3, [r7, #52]	@ 0x34
 8004096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	f04f 0000 	mov.w	r0, #0
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	0159      	lsls	r1, r3, #5
 80040a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ac:	0150      	lsls	r0, r2, #5
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4621      	mov	r1, r4
 80040b4:	1a51      	subs	r1, r2, r1
 80040b6:	6139      	str	r1, [r7, #16]
 80040b8:	4629      	mov	r1, r5
 80040ba:	eb63 0301 	sbc.w	r3, r3, r1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040cc:	4659      	mov	r1, fp
 80040ce:	018b      	lsls	r3, r1, #6
 80040d0:	4651      	mov	r1, sl
 80040d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d6:	4651      	mov	r1, sl
 80040d8:	018a      	lsls	r2, r1, #6
 80040da:	4651      	mov	r1, sl
 80040dc:	ebb2 0801 	subs.w	r8, r2, r1
 80040e0:	4659      	mov	r1, fp
 80040e2:	eb63 0901 	sbc.w	r9, r3, r1
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fa:	4690      	mov	r8, r2
 80040fc:	4699      	mov	r9, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	eb18 0303 	adds.w	r3, r8, r3
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	462b      	mov	r3, r5
 8004108:	eb49 0303 	adc.w	r3, r9, r3
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800411a:	4629      	mov	r1, r5
 800411c:	024b      	lsls	r3, r1, #9
 800411e:	4621      	mov	r1, r4
 8004120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004124:	4621      	mov	r1, r4
 8004126:	024a      	lsls	r2, r1, #9
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412e:	2200      	movs	r2, #0
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004132:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004138:	f7fc fda6 	bl	8000c88 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4613      	mov	r3, r2
 8004142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004144:	e058      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	2200      	movs	r2, #0
 800414e:	4618      	mov	r0, r3
 8004150:	4611      	mov	r1, r2
 8004152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	2300      	movs	r3, #0
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24
 800415c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	0159      	lsls	r1, r3, #5
 800416e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004172:	0150      	lsls	r0, r2, #5
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4641      	mov	r1, r8
 800417a:	ebb2 0a01 	subs.w	sl, r2, r1
 800417e:	4649      	mov	r1, r9
 8004180:	eb63 0b01 	sbc.w	fp, r3, r1
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004198:	ebb2 040a 	subs.w	r4, r2, sl
 800419c:	eb63 050b 	sbc.w	r5, r3, fp
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	00eb      	lsls	r3, r5, #3
 80041aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ae:	00e2      	lsls	r2, r4, #3
 80041b0:	4614      	mov	r4, r2
 80041b2:	461d      	mov	r5, r3
 80041b4:	4643      	mov	r3, r8
 80041b6:	18e3      	adds	r3, r4, r3
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	464b      	mov	r3, r9
 80041bc:	eb45 0303 	adc.w	r3, r5, r3
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ce:	4629      	mov	r1, r5
 80041d0:	028b      	lsls	r3, r1, #10
 80041d2:	4621      	mov	r1, r4
 80041d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041d8:	4621      	mov	r1, r4
 80041da:	028a      	lsls	r2, r1, #10
 80041dc:	4610      	mov	r0, r2
 80041de:	4619      	mov	r1, r3
 80041e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041e2:	2200      	movs	r2, #0
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	61fa      	str	r2, [r7, #28]
 80041e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ec:	f7fc fd4c 	bl	8000c88 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4613      	mov	r3, r2
 80041f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	3301      	adds	r3, #1
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004208:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800420a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004212:	e002      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCC_GetSysClockFreq+0x204>)
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800421c:	4618      	mov	r0, r3
 800421e:	3750      	adds	r7, #80	@ 0x50
 8004220:	46bd      	mov	sp, r7
 8004222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800
 800422c:	00f42400 	.word	0x00f42400
 8004230:	007a1200 	.word	0x007a1200

08004234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004238:	4b03      	ldr	r3, [pc, #12]	@ (8004248 <HAL_RCC_GetHCLKFreq+0x14>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000000 	.word	0x20000000

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004250:	f7ff fff0 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b05      	ldr	r3, [pc, #20]	@ (800426c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0a9b      	lsrs	r3, r3, #10
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4903      	ldr	r1, [pc, #12]	@ (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40023800 	.word	0x40023800
 8004270:	0800eaec 	.word	0x0800eaec

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004278:	f7ff ffdc 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0b5b      	lsrs	r3, r3, #13
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	@ (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	0800eaec 	.word	0x0800eaec

0800429c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07b      	b.n	80043a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d108      	bne.n	80042c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042be:	d009      	beq.n	80042d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	61da      	str	r2, [r3, #28]
 80042c6:	e005      	b.n	80042d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd fb0a 	bl	8001908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800430a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004358:	ea42 0103 	orr.w	r1, r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	f003 0104 	and.w	r1, r3, #4
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	f003 0210 	and.w	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
    return;
 80043f2:	e0d7      	b.n	80045a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_SPI_IRQHandler+0x66>
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	09db      	lsrs	r3, r3, #7
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
    return;
 8004414:	e0c6      	b.n	80045a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_SPI_IRQHandler+0x8c>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	099b      	lsrs	r3, r3, #6
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	0a1b      	lsrs	r3, r3, #8
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80b4 	beq.w	80045a4 <HAL_SPI_IRQHandler+0x1f4>
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80ad 	beq.w	80045a4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d023      	beq.n	800449e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b03      	cmp	r3, #3
 8004460:	d011      	beq.n	8004486 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	e00b      	b.n	800449e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	693b      	ldr	r3, [r7, #16]
        return;
 800449c:	e082      	b.n	80045a4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d014      	beq.n	80044d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ae:	f043 0201 	orr.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00c      	beq.n	80044fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e4:	f043 0208 	orr.w	r2, r3, #8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d04f      	beq.n	80045a2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004510:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_SPI_IRQHandler+0x17e>
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d034      	beq.n	8004598 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0203 	bic.w	r2, r2, #3
 800453c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d011      	beq.n	800456a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454a:	4a18      	ldr	r2, [pc, #96]	@ (80045ac <HAL_SPI_IRQHandler+0x1fc>)
 800454c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd fddf 	bl	8002116 <HAL_DMA_Abort_IT>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004576:	4a0d      	ldr	r2, [pc, #52]	@ (80045ac <HAL_SPI_IRQHandler+0x1fc>)
 8004578:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fdc9 	bl	8002116 <HAL_DMA_Abort_IT>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004596:	e003      	b.n	80045a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f809 	bl	80045b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800459e:	e000      	b.n	80045a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80045a0:	bf00      	nop
    return;
 80045a2:	bf00      	nop
  }
}
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	080045c5 	.word	0x080045c5

080045b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff ffe6 	bl	80045b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e042      	b.n	8004684 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fd f9c8 	bl	80019a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	@ 0x24
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800462e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fdd3 	bl	80051dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	@ 0x28
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d175      	bne.n	8004798 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_UART_Transmit+0x2c>
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e06e      	b.n	800479a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2221      	movs	r2, #33	@ 0x21
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ca:	f7fd fb73 	bl	8001db4 <HAL_GetTick>
 80046ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	88fa      	ldrh	r2, [r7, #6]
 80046da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e4:	d108      	bne.n	80046f8 <HAL_UART_Transmit+0x6c>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	e003      	b.n	8004700 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004700:	e02e      	b.n	8004760 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2200      	movs	r2, #0
 800470a:	2180      	movs	r1, #128	@ 0x80
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fb37 	bl	8004d80 <UART_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e03a      	b.n	800479a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	3302      	adds	r3, #2
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	e007      	b.n	8004752 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	3301      	adds	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1cb      	bne.n	8004702 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	2140      	movs	r1, #64	@ 0x40
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fb03 	bl	8004d80 <UART_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e006      	b.n	800479a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	4613      	mov	r3, r2
 80047ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d112      	bne.n	80047e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_UART_Receive_IT+0x26>
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e00b      	b.n	80047e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	461a      	mov	r2, r3
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fb2a 	bl	8004e32 <UART_Start_Receive_IT>
 80047de:	4603      	mov	r3, r0
 80047e0:	e000      	b.n	80047e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b0ba      	sub	sp, #232	@ 0xe8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004818:	2300      	movs	r3, #0
 800481a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800482a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <HAL_UART_IRQHandler+0x66>
 800483e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fc07 	bl	800505e <UART_Receive_IT>
      return;
 8004850:	e273      	b.n	8004d3a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80de 	beq.w	8004a18 <HAL_UART_IRQHandler+0x22c>
 800485c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800486c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80d1 	beq.w	8004a18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_UART_IRQHandler+0xae>
 8004882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	f043 0201 	orr.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HAL_UART_IRQHandler+0xd2>
 80048a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	f043 0202 	orr.w	r2, r3, #2
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_UART_IRQHandler+0xf6>
 80048ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	f043 0204 	orr.w	r2, r3, #4
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d011      	beq.n	8004912 <HAL_UART_IRQHandler+0x126>
 80048ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d105      	bne.n	8004906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490a:	f043 0208 	orr.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 820a 	beq.w	8004d30 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800491c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_UART_IRQHandler+0x14e>
 8004928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fb92 	bl	800505e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004944:	2b40      	cmp	r3, #64	@ 0x40
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_UART_IRQHandler+0x17a>
 800495e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d04f      	beq.n	8004a06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa9d 	bl	8004ea6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b40      	cmp	r3, #64	@ 0x40
 8004978:	d141      	bne.n	80049fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3314      	adds	r3, #20
 8004980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3314      	adds	r3, #20
 80049a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d9      	bne.n	800497a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d013      	beq.n	80049f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d2:	4a8a      	ldr	r2, [pc, #552]	@ (8004bfc <HAL_UART_IRQHandler+0x410>)
 80049d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fd fb9b 	bl	8002116 <HAL_DMA_Abort_IT>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049f0:	4610      	mov	r0, r2
 80049f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	e00e      	b.n	8004a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f9ac 	bl	8004d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	e00a      	b.n	8004a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9a8 	bl	8004d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e006      	b.n	8004a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9a4 	bl	8004d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a12:	e18d      	b.n	8004d30 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	bf00      	nop
    return;
 8004a16:	e18b      	b.n	8004d30 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	f040 8167 	bne.w	8004cf0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8160 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8159 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5e:	2b40      	cmp	r3, #64	@ 0x40
 8004a60:	f040 80ce 	bne.w	8004c00 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80a9 	beq.w	8004bcc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a82:	429a      	cmp	r2, r3
 8004a84:	f080 80a2 	bcs.w	8004bcc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a9a:	f000 8088 	beq.w	8004bae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004aca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ace:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1d9      	bne.n	8004a9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3314      	adds	r3, #20
 8004af0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004afa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3314      	adds	r3, #20
 8004b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e1      	bne.n	8004aea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3314      	adds	r3, #20
 8004b46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e3      	bne.n	8004b26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b7e:	f023 0310 	bic.w	r3, r3, #16
 8004b82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e3      	bne.n	8004b6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fd fa44 	bl	8002036 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f8cf 	bl	8004d68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004bca:	e0b3      	b.n	8004d34 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	f040 80ad 	bne.w	8004d34 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be4:	f040 80a6 	bne.w	8004d34 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8b7 	bl	8004d68 <HAL_UARTEx_RxEventCallback>
      return;
 8004bfa:	e09b      	b.n	8004d34 <HAL_UART_IRQHandler+0x548>
 8004bfc:	08004f6d 	.word	0x08004f6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 808e 	beq.w	8004d38 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8089 	beq.w	8004d38 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e3      	bne.n	8004c26 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c82:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e3      	bne.n	8004c5e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cc8:	61fa      	str	r2, [r7, #28]
 8004cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e3      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ce2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f83d 	bl	8004d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cee:	e023      	b.n	8004d38 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <HAL_UART_IRQHandler+0x524>
 8004cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f940 	bl	8004f8e <UART_Transmit_IT>
    return;
 8004d0e:	e014      	b.n	8004d3a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00e      	beq.n	8004d3a <HAL_UART_IRQHandler+0x54e>
 8004d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f980 	bl	800502e <UART_EndTransmit_IT>
    return;
 8004d2e:	e004      	b.n	8004d3a <HAL_UART_IRQHandler+0x54e>
    return;
 8004d30:	bf00      	nop
 8004d32:	e002      	b.n	8004d3a <HAL_UART_IRQHandler+0x54e>
      return;
 8004d34:	bf00      	nop
 8004d36:	e000      	b.n	8004d3a <HAL_UART_IRQHandler+0x54e>
      return;
 8004d38:	bf00      	nop
  }
}
 8004d3a:	37e8      	adds	r7, #232	@ 0xe8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d90:	e03b      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d037      	beq.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9a:	f7fd f80b 	bl	8001db4 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e03a      	b.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d023      	beq.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b80      	cmp	r3, #128	@ 0x80
 8004dc6:	d020      	beq.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b40      	cmp	r3, #64	@ 0x40
 8004dcc:	d01d      	beq.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d116      	bne.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f857 	bl	8004ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2208      	movs	r2, #8
 8004dfc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e00f      	b.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4013      	ands	r3, r2
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d0b4      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	88fa      	ldrh	r2, [r7, #6]
 8004e4a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	88fa      	ldrh	r2, [r7, #6]
 8004e50:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2222      	movs	r2, #34	@ 0x22
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e76:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0220 	orr.w	r2, r2, #32
 8004e96:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b095      	sub	sp, #84	@ 0x54
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ece:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ed4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e5      	bne.n	8004eae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3314      	adds	r3, #20
 8004f00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e5      	bne.n	8004ee2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d119      	bne.n	8004f52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f023 0310 	bic.w	r3, r3, #16
 8004f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f3e:	61ba      	str	r2, [r7, #24]
 8004f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6979      	ldr	r1, [r7, #20]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e5      	bne.n	8004f1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f60:	bf00      	nop
 8004f62:	3754      	adds	r7, #84	@ 0x54
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff fee7 	bl	8004d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b21      	cmp	r3, #33	@ 0x21
 8004fa0:	d13e      	bne.n	8005020 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004faa:	d114      	bne.n	8004fd6 <UART_Transmit_IT+0x48>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d110      	bne.n	8004fd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	1c9a      	adds	r2, r3, #2
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	621a      	str	r2, [r3, #32]
 8004fd4:	e008      	b.n	8004fe8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6211      	str	r1, [r2, #32]
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10f      	bne.n	800501c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800500a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800501a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005044:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff fe76 	bl	8004d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b08c      	sub	sp, #48	@ 0x30
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b22      	cmp	r3, #34	@ 0x22
 8005078:	f040 80aa 	bne.w	80051d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005084:	d115      	bne.n	80050b2 <UART_Receive_IT+0x54>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d111      	bne.n	80050b2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	b29b      	uxth	r3, r3
 800509c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	1c9a      	adds	r2, r3, #2
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80050b0:	e024      	b.n	80050fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c0:	d007      	beq.n	80050d2 <UART_Receive_IT+0x74>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <UART_Receive_IT+0x82>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e008      	b.n	80050f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29b      	uxth	r3, r3
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	4619      	mov	r1, r3
 800510a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800510c:	2b00      	cmp	r3, #0
 800510e:	d15d      	bne.n	80051cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0220 	bic.w	r2, r2, #32
 800511e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800512e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	2b01      	cmp	r3, #1
 8005154:	d135      	bne.n	80051c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	330c      	adds	r3, #12
 8005162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	613b      	str	r3, [r7, #16]
   return(result);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f023 0310 	bic.w	r3, r3, #16
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800517c:	623a      	str	r2, [r7, #32]
 800517e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	69f9      	ldr	r1, [r7, #28]
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	61bb      	str	r3, [r7, #24]
   return(result);
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e5      	bne.n	800515c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b10      	cmp	r3, #16
 800519c:	d10a      	bne.n	80051b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fdd4 	bl	8004d68 <HAL_UARTEx_RxEventCallback>
 80051c0:	e002      	b.n	80051c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fc f888 	bl	80012d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e002      	b.n	80051d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3730      	adds	r7, #48	@ 0x30
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e0:	b0c0      	sub	sp, #256	@ 0x100
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f8:	68d9      	ldr	r1, [r3, #12]
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	ea40 0301 	orr.w	r3, r0, r1
 8005204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	431a      	orrs	r2, r3
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	431a      	orrs	r2, r3
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005234:	f021 010c 	bic.w	r1, r1, #12
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005242:	430b      	orrs	r3, r1
 8005244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005256:	6999      	ldr	r1, [r3, #24]
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	ea40 0301 	orr.w	r3, r0, r1
 8005262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b8f      	ldr	r3, [pc, #572]	@ (80054a8 <UART_SetConfig+0x2cc>)
 800526c:	429a      	cmp	r2, r3
 800526e:	d005      	beq.n	800527c <UART_SetConfig+0xa0>
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b8d      	ldr	r3, [pc, #564]	@ (80054ac <UART_SetConfig+0x2d0>)
 8005278:	429a      	cmp	r2, r3
 800527a:	d104      	bne.n	8005286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800527c:	f7fe fffa 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8005280:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005284:	e003      	b.n	800528e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005286:	f7fe ffe1 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 800528a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005298:	f040 810c 	bne.w	80054b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800529c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052ae:	4622      	mov	r2, r4
 80052b0:	462b      	mov	r3, r5
 80052b2:	1891      	adds	r1, r2, r2
 80052b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052b6:	415b      	adcs	r3, r3
 80052b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052be:	4621      	mov	r1, r4
 80052c0:	eb12 0801 	adds.w	r8, r2, r1
 80052c4:	4629      	mov	r1, r5
 80052c6:	eb43 0901 	adc.w	r9, r3, r1
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052de:	4690      	mov	r8, r2
 80052e0:	4699      	mov	r9, r3
 80052e2:	4623      	mov	r3, r4
 80052e4:	eb18 0303 	adds.w	r3, r8, r3
 80052e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052ec:	462b      	mov	r3, r5
 80052ee:	eb49 0303 	adc.w	r3, r9, r3
 80052f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005302:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800530a:	460b      	mov	r3, r1
 800530c:	18db      	adds	r3, r3, r3
 800530e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005310:	4613      	mov	r3, r2
 8005312:	eb42 0303 	adc.w	r3, r2, r3
 8005316:	657b      	str	r3, [r7, #84]	@ 0x54
 8005318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800531c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005320:	f7fb fcb2 	bl	8000c88 <__aeabi_uldivmod>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4b61      	ldr	r3, [pc, #388]	@ (80054b0 <UART_SetConfig+0x2d4>)
 800532a:	fba3 2302 	umull	r2, r3, r3, r2
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	011c      	lsls	r4, r3, #4
 8005332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005336:	2200      	movs	r2, #0
 8005338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800533c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005344:	4642      	mov	r2, r8
 8005346:	464b      	mov	r3, r9
 8005348:	1891      	adds	r1, r2, r2
 800534a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800534c:	415b      	adcs	r3, r3
 800534e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005354:	4641      	mov	r1, r8
 8005356:	eb12 0a01 	adds.w	sl, r2, r1
 800535a:	4649      	mov	r1, r9
 800535c:	eb43 0b01 	adc.w	fp, r3, r1
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800536c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005374:	4692      	mov	sl, r2
 8005376:	469b      	mov	fp, r3
 8005378:	4643      	mov	r3, r8
 800537a:	eb1a 0303 	adds.w	r3, sl, r3
 800537e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005382:	464b      	mov	r3, r9
 8005384:	eb4b 0303 	adc.w	r3, fp, r3
 8005388:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005398:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800539c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053a0:	460b      	mov	r3, r1
 80053a2:	18db      	adds	r3, r3, r3
 80053a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80053a6:	4613      	mov	r3, r2
 80053a8:	eb42 0303 	adc.w	r3, r2, r3
 80053ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053b6:	f7fb fc67 	bl	8000c88 <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	4b3b      	ldr	r3, [pc, #236]	@ (80054b0 <UART_SetConfig+0x2d4>)
 80053c2:	fba3 2301 	umull	r2, r3, r3, r1
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	2264      	movs	r2, #100	@ 0x64
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
 80053ce:	1acb      	subs	r3, r1, r3
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053d6:	4b36      	ldr	r3, [pc, #216]	@ (80054b0 <UART_SetConfig+0x2d4>)
 80053d8:	fba3 2302 	umull	r2, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053e4:	441c      	add	r4, r3
 80053e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	1891      	adds	r1, r2, r2
 80053fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005400:	415b      	adcs	r3, r3
 8005402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005408:	4641      	mov	r1, r8
 800540a:	1851      	adds	r1, r2, r1
 800540c:	6339      	str	r1, [r7, #48]	@ 0x30
 800540e:	4649      	mov	r1, r9
 8005410:	414b      	adcs	r3, r1
 8005412:	637b      	str	r3, [r7, #52]	@ 0x34
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005420:	4659      	mov	r1, fp
 8005422:	00cb      	lsls	r3, r1, #3
 8005424:	4651      	mov	r1, sl
 8005426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800542a:	4651      	mov	r1, sl
 800542c:	00ca      	lsls	r2, r1, #3
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	4603      	mov	r3, r0
 8005434:	4642      	mov	r2, r8
 8005436:	189b      	adds	r3, r3, r2
 8005438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800543c:	464b      	mov	r3, r9
 800543e:	460a      	mov	r2, r1
 8005440:	eb42 0303 	adc.w	r3, r2, r3
 8005444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005454:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800545c:	460b      	mov	r3, r1
 800545e:	18db      	adds	r3, r3, r3
 8005460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005462:	4613      	mov	r3, r2
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800546a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800546e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005472:	f7fb fc09 	bl	8000c88 <__aeabi_uldivmod>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4b0d      	ldr	r3, [pc, #52]	@ (80054b0 <UART_SetConfig+0x2d4>)
 800547c:	fba3 1302 	umull	r1, r3, r3, r2
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	2164      	movs	r1, #100	@ 0x64
 8005484:	fb01 f303 	mul.w	r3, r1, r3
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	3332      	adds	r3, #50	@ 0x32
 800548e:	4a08      	ldr	r2, [pc, #32]	@ (80054b0 <UART_SetConfig+0x2d4>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	f003 0207 	and.w	r2, r3, #7
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4422      	add	r2, r4
 80054a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054a4:	e106      	b.n	80056b4 <UART_SetConfig+0x4d8>
 80054a6:	bf00      	nop
 80054a8:	40011000 	.word	0x40011000
 80054ac:	40011400 	.word	0x40011400
 80054b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054c6:	4642      	mov	r2, r8
 80054c8:	464b      	mov	r3, r9
 80054ca:	1891      	adds	r1, r2, r2
 80054cc:	6239      	str	r1, [r7, #32]
 80054ce:	415b      	adcs	r3, r3
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054d6:	4641      	mov	r1, r8
 80054d8:	1854      	adds	r4, r2, r1
 80054da:	4649      	mov	r1, r9
 80054dc:	eb43 0501 	adc.w	r5, r3, r1
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	00eb      	lsls	r3, r5, #3
 80054ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ee:	00e2      	lsls	r2, r4, #3
 80054f0:	4614      	mov	r4, r2
 80054f2:	461d      	mov	r5, r3
 80054f4:	4643      	mov	r3, r8
 80054f6:	18e3      	adds	r3, r4, r3
 80054f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054fc:	464b      	mov	r3, r9
 80054fe:	eb45 0303 	adc.w	r3, r5, r3
 8005502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005512:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005522:	4629      	mov	r1, r5
 8005524:	008b      	lsls	r3, r1, #2
 8005526:	4621      	mov	r1, r4
 8005528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800552c:	4621      	mov	r1, r4
 800552e:	008a      	lsls	r2, r1, #2
 8005530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005534:	f7fb fba8 	bl	8000c88 <__aeabi_uldivmod>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4b60      	ldr	r3, [pc, #384]	@ (80056c0 <UART_SetConfig+0x4e4>)
 800553e:	fba3 2302 	umull	r2, r3, r3, r2
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	011c      	lsls	r4, r3, #4
 8005546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005550:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	1891      	adds	r1, r2, r2
 800555e:	61b9      	str	r1, [r7, #24]
 8005560:	415b      	adcs	r3, r3
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005568:	4641      	mov	r1, r8
 800556a:	1851      	adds	r1, r2, r1
 800556c:	6139      	str	r1, [r7, #16]
 800556e:	4649      	mov	r1, r9
 8005570:	414b      	adcs	r3, r1
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005580:	4659      	mov	r1, fp
 8005582:	00cb      	lsls	r3, r1, #3
 8005584:	4651      	mov	r1, sl
 8005586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800558a:	4651      	mov	r1, sl
 800558c:	00ca      	lsls	r2, r1, #3
 800558e:	4610      	mov	r0, r2
 8005590:	4619      	mov	r1, r3
 8005592:	4603      	mov	r3, r0
 8005594:	4642      	mov	r2, r8
 8005596:	189b      	adds	r3, r3, r2
 8005598:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800559c:	464b      	mov	r3, r9
 800559e:	460a      	mov	r2, r1
 80055a0:	eb42 0303 	adc.w	r3, r2, r3
 80055a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055c0:	4649      	mov	r1, r9
 80055c2:	008b      	lsls	r3, r1, #2
 80055c4:	4641      	mov	r1, r8
 80055c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ca:	4641      	mov	r1, r8
 80055cc:	008a      	lsls	r2, r1, #2
 80055ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055d2:	f7fb fb59 	bl	8000c88 <__aeabi_uldivmod>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	4b38      	ldr	r3, [pc, #224]	@ (80056c0 <UART_SetConfig+0x4e4>)
 80055de:	fba3 2301 	umull	r2, r3, r3, r1
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	2264      	movs	r2, #100	@ 0x64
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	1acb      	subs	r3, r1, r3
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	3332      	adds	r3, #50	@ 0x32
 80055f0:	4a33      	ldr	r2, [pc, #204]	@ (80056c0 <UART_SetConfig+0x4e4>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055fc:	441c      	add	r4, r3
 80055fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005602:	2200      	movs	r2, #0
 8005604:	673b      	str	r3, [r7, #112]	@ 0x70
 8005606:	677a      	str	r2, [r7, #116]	@ 0x74
 8005608:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800560c:	4642      	mov	r2, r8
 800560e:	464b      	mov	r3, r9
 8005610:	1891      	adds	r1, r2, r2
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	415b      	adcs	r3, r3
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800561c:	4641      	mov	r1, r8
 800561e:	1851      	adds	r1, r2, r1
 8005620:	6039      	str	r1, [r7, #0]
 8005622:	4649      	mov	r1, r9
 8005624:	414b      	adcs	r3, r1
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005634:	4659      	mov	r1, fp
 8005636:	00cb      	lsls	r3, r1, #3
 8005638:	4651      	mov	r1, sl
 800563a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800563e:	4651      	mov	r1, sl
 8005640:	00ca      	lsls	r2, r1, #3
 8005642:	4610      	mov	r0, r2
 8005644:	4619      	mov	r1, r3
 8005646:	4603      	mov	r3, r0
 8005648:	4642      	mov	r2, r8
 800564a:	189b      	adds	r3, r3, r2
 800564c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800564e:	464b      	mov	r3, r9
 8005650:	460a      	mov	r2, r1
 8005652:	eb42 0303 	adc.w	r3, r2, r3
 8005656:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	663b      	str	r3, [r7, #96]	@ 0x60
 8005662:	667a      	str	r2, [r7, #100]	@ 0x64
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005670:	4649      	mov	r1, r9
 8005672:	008b      	lsls	r3, r1, #2
 8005674:	4641      	mov	r1, r8
 8005676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800567a:	4641      	mov	r1, r8
 800567c:	008a      	lsls	r2, r1, #2
 800567e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005682:	f7fb fb01 	bl	8000c88 <__aeabi_uldivmod>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <UART_SetConfig+0x4e4>)
 800568c:	fba3 1302 	umull	r1, r3, r3, r2
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	2164      	movs	r1, #100	@ 0x64
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	3332      	adds	r3, #50	@ 0x32
 800569e:	4a08      	ldr	r2, [pc, #32]	@ (80056c0 <UART_SetConfig+0x4e4>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	f003 020f 	and.w	r2, r3, #15
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4422      	add	r2, r4
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	bf00      	nop
 80056b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056ba:	46bd      	mov	sp, r7
 80056bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c0:	51eb851f 	.word	0x51eb851f

080056c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c4:	b084      	sub	sp, #16
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	f107 001c 	add.w	r0, r7, #28
 80056d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d123      	bne.n	8005726 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80056f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005706:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800570a:	2b01      	cmp	r3, #1
 800570c:	d105      	bne.n	800571a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f001 fae8 	bl	8006cf0 <USB_CoreReset>
 8005720:	4603      	mov	r3, r0
 8005722:	73fb      	strb	r3, [r7, #15]
 8005724:	e01b      	b.n	800575e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 fadc 	bl	8006cf0 <USB_CoreReset>
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800573c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005748:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005750:	e005      	b.n	800575e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800575e:	7fbb      	ldrb	r3, [r7, #30]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10b      	bne.n	800577c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f043 0206 	orr.w	r2, r3, #6
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005788:	b004      	add	sp, #16
 800578a:	4770      	bx	lr

0800578c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	4613      	mov	r3, r2
 8005798:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d165      	bne.n	800586c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4a41      	ldr	r2, [pc, #260]	@ (80058a8 <USB_SetTurnaroundTime+0x11c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d906      	bls.n	80057b6 <USB_SetTurnaroundTime+0x2a>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4a40      	ldr	r2, [pc, #256]	@ (80058ac <USB_SetTurnaroundTime+0x120>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d202      	bcs.n	80057b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057b0:	230f      	movs	r3, #15
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e062      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4a3c      	ldr	r2, [pc, #240]	@ (80058ac <USB_SetTurnaroundTime+0x120>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d306      	bcc.n	80057cc <USB_SetTurnaroundTime+0x40>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4a3b      	ldr	r2, [pc, #236]	@ (80058b0 <USB_SetTurnaroundTime+0x124>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d202      	bcs.n	80057cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057c6:	230e      	movs	r3, #14
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	e057      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4a38      	ldr	r2, [pc, #224]	@ (80058b0 <USB_SetTurnaroundTime+0x124>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d306      	bcc.n	80057e2 <USB_SetTurnaroundTime+0x56>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4a37      	ldr	r2, [pc, #220]	@ (80058b4 <USB_SetTurnaroundTime+0x128>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d202      	bcs.n	80057e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057dc:	230d      	movs	r3, #13
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e04c      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4a33      	ldr	r2, [pc, #204]	@ (80058b4 <USB_SetTurnaroundTime+0x128>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d306      	bcc.n	80057f8 <USB_SetTurnaroundTime+0x6c>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4a32      	ldr	r2, [pc, #200]	@ (80058b8 <USB_SetTurnaroundTime+0x12c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d802      	bhi.n	80057f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057f2:	230c      	movs	r3, #12
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e041      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4a2f      	ldr	r2, [pc, #188]	@ (80058b8 <USB_SetTurnaroundTime+0x12c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d906      	bls.n	800580e <USB_SetTurnaroundTime+0x82>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4a2e      	ldr	r2, [pc, #184]	@ (80058bc <USB_SetTurnaroundTime+0x130>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d802      	bhi.n	800580e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005808:	230b      	movs	r3, #11
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	e036      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4a2a      	ldr	r2, [pc, #168]	@ (80058bc <USB_SetTurnaroundTime+0x130>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d906      	bls.n	8005824 <USB_SetTurnaroundTime+0x98>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4a29      	ldr	r2, [pc, #164]	@ (80058c0 <USB_SetTurnaroundTime+0x134>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d802      	bhi.n	8005824 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800581e:	230a      	movs	r3, #10
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	e02b      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4a26      	ldr	r2, [pc, #152]	@ (80058c0 <USB_SetTurnaroundTime+0x134>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d906      	bls.n	800583a <USB_SetTurnaroundTime+0xae>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4a25      	ldr	r2, [pc, #148]	@ (80058c4 <USB_SetTurnaroundTime+0x138>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d202      	bcs.n	800583a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005834:	2309      	movs	r3, #9
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	e020      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4a21      	ldr	r2, [pc, #132]	@ (80058c4 <USB_SetTurnaroundTime+0x138>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d306      	bcc.n	8005850 <USB_SetTurnaroundTime+0xc4>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4a20      	ldr	r2, [pc, #128]	@ (80058c8 <USB_SetTurnaroundTime+0x13c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d802      	bhi.n	8005850 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800584a:	2308      	movs	r3, #8
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	e015      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4a1d      	ldr	r2, [pc, #116]	@ (80058c8 <USB_SetTurnaroundTime+0x13c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d906      	bls.n	8005866 <USB_SetTurnaroundTime+0xda>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4a1c      	ldr	r2, [pc, #112]	@ (80058cc <USB_SetTurnaroundTime+0x140>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d202      	bcs.n	8005866 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005860:	2307      	movs	r3, #7
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e00a      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005866:	2306      	movs	r3, #6
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e007      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005872:	2309      	movs	r3, #9
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	e001      	b.n	800587c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005878:	2309      	movs	r3, #9
 800587a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	029b      	lsls	r3, r3, #10
 8005890:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005894:	431a      	orrs	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	00d8acbf 	.word	0x00d8acbf
 80058ac:	00e4e1c0 	.word	0x00e4e1c0
 80058b0:	00f42400 	.word	0x00f42400
 80058b4:	01067380 	.word	0x01067380
 80058b8:	011a499f 	.word	0x011a499f
 80058bc:	01312cff 	.word	0x01312cff
 80058c0:	014ca43f 	.word	0x014ca43f
 80058c4:	016e3600 	.word	0x016e3600
 80058c8:	01a6ab1f 	.word	0x01a6ab1f
 80058cc:	01e84800 	.word	0x01e84800

080058d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f043 0201 	orr.w	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f023 0201 	bic.w	r2, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d115      	bne.n	8005962 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005942:	200a      	movs	r0, #10
 8005944:	f7fc fa42 	bl	8001dcc <HAL_Delay>
      ms += 10U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	330a      	adds	r3, #10
 800594c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 f93f 	bl	8006bd2 <USB_GetMode>
 8005954:	4603      	mov	r3, r0
 8005956:	2b01      	cmp	r3, #1
 8005958:	d01e      	beq.n	8005998 <USB_SetCurrentMode+0x84>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2bc7      	cmp	r3, #199	@ 0xc7
 800595e:	d9f0      	bls.n	8005942 <USB_SetCurrentMode+0x2e>
 8005960:	e01a      	b.n	8005998 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d115      	bne.n	8005994 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005974:	200a      	movs	r0, #10
 8005976:	f7fc fa29 	bl	8001dcc <HAL_Delay>
      ms += 10U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	330a      	adds	r3, #10
 800597e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 f926 	bl	8006bd2 <USB_GetMode>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <USB_SetCurrentMode+0x84>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005990:	d9f0      	bls.n	8005974 <USB_SetCurrentMode+0x60>
 8005992:	e001      	b.n	8005998 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e005      	b.n	80059a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2bc8      	cmp	r3, #200	@ 0xc8
 800599c:	d101      	bne.n	80059a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059ac:	b084      	sub	sp, #16
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	e009      	b.n	80059e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	3340      	adds	r3, #64	@ 0x40
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	2200      	movs	r2, #0
 80059d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	3301      	adds	r3, #1
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2b0e      	cmp	r3, #14
 80059e4:	d9f2      	bls.n	80059cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d11c      	bne.n	8005a28 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059fc:	f043 0302 	orr.w	r3, r3, #2
 8005a00:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a12:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a26:	e00b      	b.n	8005a40 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a38:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a46:	461a      	mov	r2, r3
 8005a48:	2300      	movs	r3, #0
 8005a4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d10d      	bne.n	8005a70 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f968 	bl	8005d34 <USB_SetDevSpeed>
 8005a64:	e008      	b.n	8005a78 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a66:	2101      	movs	r1, #1
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f963 	bl	8005d34 <USB_SetDevSpeed>
 8005a6e:	e003      	b.n	8005a78 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a70:	2103      	movs	r1, #3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f95e 	bl	8005d34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a78:	2110      	movs	r1, #16
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8fa 	bl	8005c74 <USB_FlushTxFifo>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f924 	bl	8005cd8 <USB_FlushRxFifo>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e043      	b.n	8005b4c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ada:	d118      	bne.n	8005b0e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aee:	461a      	mov	r2, r3
 8005af0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	e013      	b.n	8005b20 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b04:	461a      	mov	r2, r3
 8005b06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	e008      	b.n	8005b20 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	2300      	movs	r3, #0
 8005b30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b50:	461a      	mov	r2, r3
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d3b5      	bcc.n	8005ac4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	e043      	b.n	8005be6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b74:	d118      	bne.n	8005ba8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	e013      	b.n	8005bba <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e008      	b.n	8005bba <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	3301      	adds	r3, #1
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bea:	461a      	mov	r2, r3
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d3b5      	bcc.n	8005b5e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d105      	bne.n	8005c28 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f043 0210 	orr.w	r2, r3, #16
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	4b10      	ldr	r3, [pc, #64]	@ (8005c70 <USB_DevInit+0x2c4>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f043 0208 	orr.w	r2, r3, #8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d107      	bne.n	8005c60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c58:	f043 0304 	orr.w	r3, r3, #4
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c6c:	b004      	add	sp, #16
 8005c6e:	4770      	bx	lr
 8005c70:	803c3800 	.word	0x803c3800

08005c74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c8e:	d901      	bls.n	8005c94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e01b      	b.n	8005ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	daf2      	bge.n	8005c82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	019b      	lsls	r3, r3, #6
 8005ca4:	f043 0220 	orr.w	r2, r3, #32
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cb8:	d901      	bls.n	8005cbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e006      	b.n	8005ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d0f0      	beq.n	8005cac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cf0:	d901      	bls.n	8005cf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e018      	b.n	8005d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	daf2      	bge.n	8005ce4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2210      	movs	r2, #16
 8005d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d14:	d901      	bls.n	8005d1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e006      	b.n	8005d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d0f0      	beq.n	8005d08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d54:	4313      	orrs	r3, r2
 8005d56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b087      	sub	sp, #28
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0306 	and.w	r3, r3, #6
 8005d7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d86:	2300      	movs	r3, #0
 8005d88:	75fb      	strb	r3, [r7, #23]
 8005d8a:	e00a      	b.n	8005da2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d002      	beq.n	8005d98 <USB_GetDevSpeed+0x32>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b06      	cmp	r3, #6
 8005d96:	d102      	bne.n	8005d9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	75fb      	strb	r3, [r7, #23]
 8005d9c:	e001      	b.n	8005da2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d9e:	230f      	movs	r3, #15
 8005da0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d13a      	bne.n	8005e42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	2101      	movs	r1, #1
 8005dde:	fa01 f303 	lsl.w	r3, r1, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	68f9      	ldr	r1, [r7, #12]
 8005de6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d155      	bne.n	8005eb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	791b      	ldrb	r3, [r3, #4]
 8005e1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	059b      	lsls	r3, r3, #22
 8005e26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	e036      	b.n	8005eb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	2101      	movs	r1, #1
 8005e54:	fa01 f303 	lsl.w	r3, r1, r3
 8005e58:	041b      	lsls	r3, r3, #16
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e60:	4313      	orrs	r3, r2
 8005e62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d11a      	bne.n	8005eb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	791b      	ldrb	r3, [r3, #4]
 8005e94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e96:	430b      	orrs	r3, r1
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d161      	bne.n	8005fa0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ef2:	d11f      	bne.n	8005f34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f0e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	68f9      	ldr	r1, [r7, #12]
 8005f50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f54:	4013      	ands	r3, r2
 8005f56:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	2101      	movs	r1, #1
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	0159      	lsls	r1, r3, #5
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	440b      	add	r3, r1
 8005f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f96:	4619      	mov	r1, r3
 8005f98:	4b35      	ldr	r3, [pc, #212]	@ (8006070 <USB_DeactivateEndpoint+0x1b0>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]
 8005f9e:	e060      	b.n	8006062 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fb6:	d11f      	bne.n	8005ff8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	041b      	lsls	r3, r3, #16
 8006010:	43db      	mvns	r3, r3
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006018:	4013      	ands	r3, r2
 800601a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	2101      	movs	r1, #1
 800602e:	fa01 f303 	lsl.w	r3, r1, r3
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	43db      	mvns	r3, r3
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800603c:	4013      	ands	r3, r2
 800603e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	0159      	lsls	r1, r3, #5
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	440b      	add	r3, r1
 8006056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800605a:	4619      	mov	r1, r3
 800605c:	4b05      	ldr	r3, [pc, #20]	@ (8006074 <USB_DeactivateEndpoint+0x1b4>)
 800605e:	4013      	ands	r3, r2
 8006060:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	ec337800 	.word	0xec337800
 8006074:	eff37800 	.word	0xeff37800

08006078 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	@ 0x28
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b01      	cmp	r3, #1
 8006096:	f040 817f 	bne.w	8006398 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d132      	bne.n	8006108 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060bc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060c0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006100:	0cdb      	lsrs	r3, r3, #19
 8006102:	04db      	lsls	r3, r3, #19
 8006104:	6113      	str	r3, [r2, #16]
 8006106:	e097      	b.n	8006238 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	440a      	add	r2, r1
 800611e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006122:	0cdb      	lsrs	r3, r3, #19
 8006124:	04db      	lsls	r3, r3, #19
 8006126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006142:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006146:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800614a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d11a      	bne.n	8006188 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	d903      	bls.n	8006166 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006180:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006184:	6113      	str	r3, [r2, #16]
 8006186:	e044      	b.n	8006212 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4413      	add	r3, r2
 8006192:	1e5a      	subs	r2, r3, #1
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	fbb2 f3f3 	udiv	r3, r2, r3
 800619c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	8afb      	ldrh	r3, [r7, #22]
 80061ae:	04d9      	lsls	r1, r3, #19
 80061b0:	4ba4      	ldr	r3, [pc, #656]	@ (8006444 <USB_EPStartXfer+0x3cc>)
 80061b2:	400b      	ands	r3, r1
 80061b4:	69b9      	ldr	r1, [r7, #24]
 80061b6:	0148      	lsls	r0, r1, #5
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	4401      	add	r1, r0
 80061bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061c0:	4313      	orrs	r3, r2
 80061c2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	791b      	ldrb	r3, [r3, #4]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d122      	bne.n	8006212 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80061ea:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	8afb      	ldrh	r3, [r7, #22]
 80061fc:	075b      	lsls	r3, r3, #29
 80061fe:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006202:	69b9      	ldr	r1, [r7, #24]
 8006204:	0148      	lsls	r0, r1, #5
 8006206:	69f9      	ldr	r1, [r7, #28]
 8006208:	4401      	add	r1, r0
 800620a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800620e:	4313      	orrs	r3, r2
 8006210:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006228:	69b9      	ldr	r1, [r7, #24]
 800622a:	0148      	lsls	r0, r1, #5
 800622c:	69f9      	ldr	r1, [r7, #28]
 800622e:	4401      	add	r1, r0
 8006230:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006234:	4313      	orrs	r3, r2
 8006236:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d14b      	bne.n	80062d6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d009      	beq.n	800625a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006252:	461a      	mov	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	791b      	ldrb	r3, [r3, #4]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d128      	bne.n	80062b4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d110      	bne.n	8006294 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800628c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	e00f      	b.n	80062b4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062b2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	e166      	b.n	80065a4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062f4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	791b      	ldrb	r3, [r3, #4]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d015      	beq.n	800632a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 814e 	beq.w	80065a4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f003 030f 	and.w	r3, r3, #15
 8006318:	2101      	movs	r1, #1
 800631a:	fa01 f303 	lsl.w	r3, r1, r3
 800631e:	69f9      	ldr	r1, [r7, #28]
 8006320:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006324:	4313      	orrs	r3, r2
 8006326:	634b      	str	r3, [r1, #52]	@ 0x34
 8006328:	e13c      	b.n	80065a4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006336:	2b00      	cmp	r3, #0
 8006338:	d110      	bne.n	800635c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006354:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	e00f      	b.n	800637c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	440a      	add	r2, r1
 8006372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800637a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	68d9      	ldr	r1, [r3, #12]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	b298      	uxth	r0, r3
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4603      	mov	r3, r0
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f9b9 	bl	8006708 <USB_WritePacket>
 8006396:	e105      	b.n	80065a4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063b2:	0cdb      	lsrs	r3, r3, #19
 80063b4:	04db      	lsls	r3, r3, #19
 80063b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80063d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80063da:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d132      	bne.n	8006448 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006410:	69b9      	ldr	r1, [r7, #24]
 8006412:	0148      	lsls	r0, r1, #5
 8006414:	69f9      	ldr	r1, [r7, #28]
 8006416:	4401      	add	r1, r0
 8006418:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800641c:	4313      	orrs	r3, r2
 800641e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800643a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800643e:	6113      	str	r3, [r2, #16]
 8006440:	e062      	b.n	8006508 <USB_EPStartXfer+0x490>
 8006442:	bf00      	nop
 8006444:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d123      	bne.n	8006498 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006466:	69b9      	ldr	r1, [r7, #24]
 8006468:	0148      	lsls	r0, r1, #5
 800646a:	69f9      	ldr	r1, [r7, #28]
 800646c:	4401      	add	r1, r0
 800646e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006472:	4313      	orrs	r3, r2
 8006474:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	440a      	add	r2, r1
 800648c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006490:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006494:	6113      	str	r3, [r2, #16]
 8006496:	e037      	b.n	8006508 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	1e5a      	subs	r2, r3, #1
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	8afa      	ldrh	r2, [r7, #22]
 80064b4:	fb03 f202 	mul.w	r2, r3, r2
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	8afb      	ldrh	r3, [r7, #22]
 80064cc:	04d9      	lsls	r1, r3, #19
 80064ce:	4b38      	ldr	r3, [pc, #224]	@ (80065b0 <USB_EPStartXfer+0x538>)
 80064d0:	400b      	ands	r3, r1
 80064d2:	69b9      	ldr	r1, [r7, #24]
 80064d4:	0148      	lsls	r0, r1, #5
 80064d6:	69f9      	ldr	r1, [r7, #28]
 80064d8:	4401      	add	r1, r0
 80064da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064de:	4313      	orrs	r3, r2
 80064e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f8:	69b9      	ldr	r1, [r7, #24]
 80064fa:	0148      	lsls	r0, r1, #5
 80064fc:	69f9      	ldr	r1, [r7, #28]
 80064fe:	4401      	add	r1, r0
 8006500:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006504:	4313      	orrs	r3, r2
 8006506:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d10d      	bne.n	800652a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	68d9      	ldr	r1, [r3, #12]
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006526:	460a      	mov	r2, r1
 8006528:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	791b      	ldrb	r3, [r3, #4]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d128      	bne.n	8006584 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653e:	2b00      	cmp	r3, #0
 8006540:	d110      	bne.n	8006564 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	0151      	lsls	r1, r2, #5
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	440a      	add	r2, r1
 8006558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800655c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e00f      	b.n	8006584 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	440a      	add	r2, r1
 800657a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800657e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006582:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800659e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	1ff80000 	.word	0x1ff80000

080065b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d14a      	bne.n	8006668 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065ea:	f040 8086 	bne.w	80066fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	7812      	ldrb	r2, [r2, #0]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	440a      	add	r2, r1
 8006608:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800660c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006610:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	7812      	ldrb	r2, [r2, #0]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	440a      	add	r2, r1
 800662c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006630:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006634:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006642:	4293      	cmp	r3, r2
 8006644:	d902      	bls.n	800664c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	75fb      	strb	r3, [r7, #23]
          break;
 800664a:	e056      	b.n	80066fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006660:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006664:	d0e7      	beq.n	8006636 <USB_EPStopXfer+0x82>
 8006666:	e048      	b.n	80066fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800667c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006680:	d13b      	bne.n	80066fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	7812      	ldrb	r2, [r2, #0]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	7812      	ldrb	r2, [r2, #0]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d902      	bls.n	80066e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	75fb      	strb	r3, [r7, #23]
          break;
 80066de:	e00c      	b.n	80066fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066f8:	d0e7      	beq.n	80066ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006708:	b480      	push	{r7}
 800670a:	b089      	sub	sp, #36	@ 0x24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4611      	mov	r1, r2
 8006714:	461a      	mov	r2, r3
 8006716:	460b      	mov	r3, r1
 8006718:	71fb      	strb	r3, [r7, #7]
 800671a:	4613      	mov	r3, r2
 800671c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006726:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800672a:	2b00      	cmp	r3, #0
 800672c:	d123      	bne.n	8006776 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800672e:	88bb      	ldrh	r3, [r7, #4]
 8006730:	3303      	adds	r3, #3
 8006732:	089b      	lsrs	r3, r3, #2
 8006734:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006736:	2300      	movs	r3, #0
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	e018      	b.n	800676e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	031a      	lsls	r2, r3, #12
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	4413      	add	r3, r2
 8006744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006748:	461a      	mov	r2, r3
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	3301      	adds	r3, #1
 8006754:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	3301      	adds	r3, #1
 800675a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	3301      	adds	r3, #1
 8006760:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	3301      	adds	r3, #1
 8006766:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	3301      	adds	r3, #1
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	429a      	cmp	r2, r3
 8006774:	d3e2      	bcc.n	800673c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3724      	adds	r7, #36	@ 0x24
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006784:	b480      	push	{r7}
 8006786:	b08b      	sub	sp, #44	@ 0x2c
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	4613      	mov	r3, r2
 8006790:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	089b      	lsrs	r3, r3, #2
 800679e:	b29b      	uxth	r3, r3
 80067a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067aa:	2300      	movs	r3, #0
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	e014      	b.n	80067da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	3301      	adds	r3, #1
 80067c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	3301      	adds	r3, #1
 80067c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	3301      	adds	r3, #1
 80067cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	3301      	adds	r3, #1
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	3301      	adds	r3, #1
 80067d8:	623b      	str	r3, [r7, #32]
 80067da:	6a3a      	ldr	r2, [r7, #32]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d3e6      	bcc.n	80067b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067e2:	8bfb      	ldrh	r3, [r7, #30]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01e      	beq.n	8006826 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f2:	461a      	mov	r2, r3
 80067f4:	f107 0310 	add.w	r3, r7, #16
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	fa22 f303 	lsr.w	r3, r2, r3
 8006808:	b2da      	uxtb	r2, r3
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	701a      	strb	r2, [r3, #0]
      i++;
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	3301      	adds	r3, #1
 8006812:	623b      	str	r3, [r7, #32]
      pDest++;
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	3301      	adds	r3, #1
 8006818:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800681a:	8bfb      	ldrh	r3, [r7, #30]
 800681c:	3b01      	subs	r3, #1
 800681e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006820:	8bfb      	ldrh	r3, [r7, #30]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1ea      	bne.n	80067fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006828:	4618      	mov	r0, r3
 800682a:	372c      	adds	r7, #44	@ 0x2c
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d12c      	bne.n	80068aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	db12      	blt.n	8006888 <USB_EPSetStall+0x54>
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00f      	beq.n	8006888 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	440a      	add	r2, r1
 800687e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006882:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006886:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	440a      	add	r2, r1
 800689e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	e02b      	b.n	8006902 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	db12      	blt.n	80068e2 <USB_EPSetStall+0xae>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00f      	beq.n	80068e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	0151      	lsls	r1, r2, #5
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	440a      	add	r2, r1
 80068d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	0151      	lsls	r1, r2, #5
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	440a      	add	r2, r1
 80068f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006900:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d128      	bne.n	800697e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	440a      	add	r2, r1
 8006942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006946:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800694a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	791b      	ldrb	r3, [r3, #4]
 8006950:	2b03      	cmp	r3, #3
 8006952:	d003      	beq.n	800695c <USB_EPClearStall+0x4c>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	791b      	ldrb	r3, [r3, #4]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d138      	bne.n	80069ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	e027      	b.n	80069ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006998:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800699c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	791b      	ldrb	r3, [r3, #4]
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d003      	beq.n	80069ae <USB_EPClearStall+0x9e>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	791b      	ldrb	r3, [r3, #4]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d10f      	bne.n	80069ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80069fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006a10:	68f9      	ldr	r1, [r7, #12]
 8006a12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a16:	4313      	orrs	r3, r2
 8006a18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a42:	f023 0303 	bic.w	r3, r3, #3
 8006a46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a56:	f023 0302 	bic.w	r3, r3, #2
 8006a5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a98:	f043 0302 	orr.w	r3, r3, #2
 8006a9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	4013      	ands	r3, r2
 8006af4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	0c1b      	lsrs	r3, r3, #16
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	4013      	ands	r3, r2
 8006b28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	b29b      	uxth	r3, r3
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	4013      	ands	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b68:	68bb      	ldr	r3, [r7, #8]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b087      	sub	sp, #28
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba6:	01db      	lsls	r3, r3, #7
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f003 0301 	and.w	r3, r3, #1
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c08:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c0c:	f023 0307 	bic.w	r3, r3, #7
 8006c10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	333c      	adds	r3, #60	@ 0x3c
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4a26      	ldr	r2, [pc, #152]	@ (8006cec <USB_EP0_OutStart+0xb8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d90a      	bls.n	8006c6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c68:	d101      	bne.n	8006c6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e037      	b.n	8006cde <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c74:	461a      	mov	r2, r3
 8006c76:	2300      	movs	r3, #0
 8006c78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c9c:	f043 0318 	orr.w	r3, r3, #24
 8006ca0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cb0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006cb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10f      	bne.n	8006cdc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cd6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006cda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	4f54300a 	.word	0x4f54300a

08006cf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d08:	d901      	bls.n	8006d0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e022      	b.n	8006d54 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	daf2      	bge.n	8006cfc <USB_CoreReset+0xc>

  count = 10U;
 8006d16:	230a      	movs	r3, #10
 8006d18:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006d1a:	e002      	b.n	8006d22 <USB_CoreReset+0x32>
  {
    count--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1f9      	bne.n	8006d1c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f043 0201 	orr.w	r2, r3, #1
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3301      	adds	r3, #1
 8006d38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d40:	d901      	bls.n	8006d46 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e006      	b.n	8006d54 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d0f0      	beq.n	8006d34 <USB_CoreReset+0x44>

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d6c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006d70:	f002 fcde 	bl	8009730 <USBD_static_malloc>
 8006d74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d109      	bne.n	8006d90 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	32b0      	adds	r2, #176	@ 0xb0
 8006d86:	2100      	movs	r1, #0
 8006d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e0d4      	b.n	8006f3a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d90:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006d94:	2100      	movs	r1, #0
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f003 fe8c 	bl	800aab4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	32b0      	adds	r2, #176	@ 0xb0
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	32b0      	adds	r2, #176	@ 0xb0
 8006db6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	7c1b      	ldrb	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d138      	bne.n	8006e3a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8006f44 <USBD_CDC_Init+0x1e4>)
 8006dca:	7819      	ldrb	r1, [r3, #0]
 8006dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f002 fb89 	bl	80094ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f44 <USBD_CDC_Init+0x1e4>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f003 020f 	and.w	r2, r3, #15
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3323      	adds	r3, #35	@ 0x23
 8006dee:	2201      	movs	r2, #1
 8006df0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006df2:	4b55      	ldr	r3, [pc, #340]	@ (8006f48 <USBD_CDC_Init+0x1e8>)
 8006df4:	7819      	ldrb	r1, [r3, #0]
 8006df6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f002 fb74 	bl	80094ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e02:	4b51      	ldr	r3, [pc, #324]	@ (8006f48 <USBD_CDC_Init+0x1e8>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	f003 020f 	and.w	r2, r3, #15
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e1e:	4b4b      	ldr	r3, [pc, #300]	@ (8006f4c <USBD_CDC_Init+0x1ec>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	f003 020f 	and.w	r2, r3, #15
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	331c      	adds	r3, #28
 8006e34:	2210      	movs	r2, #16
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e035      	b.n	8006ea6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e3a:	4b42      	ldr	r3, [pc, #264]	@ (8006f44 <USBD_CDC_Init+0x1e4>)
 8006e3c:	7819      	ldrb	r1, [r3, #0]
 8006e3e:	2340      	movs	r3, #64	@ 0x40
 8006e40:	2202      	movs	r2, #2
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f002 fb51 	bl	80094ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e48:	4b3e      	ldr	r3, [pc, #248]	@ (8006f44 <USBD_CDC_Init+0x1e4>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	f003 020f 	and.w	r2, r3, #15
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	3323      	adds	r3, #35	@ 0x23
 8006e5e:	2201      	movs	r2, #1
 8006e60:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e62:	4b39      	ldr	r3, [pc, #228]	@ (8006f48 <USBD_CDC_Init+0x1e8>)
 8006e64:	7819      	ldrb	r1, [r3, #0]
 8006e66:	2340      	movs	r3, #64	@ 0x40
 8006e68:	2202      	movs	r2, #2
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f002 fb3d 	bl	80094ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e70:	4b35      	ldr	r3, [pc, #212]	@ (8006f48 <USBD_CDC_Init+0x1e8>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f003 020f 	and.w	r2, r3, #15
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006e88:	2201      	movs	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8006f4c <USBD_CDC_Init+0x1ec>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	f003 020f 	and.w	r2, r3, #15
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	440b      	add	r3, r1
 8006ea0:	331c      	adds	r3, #28
 8006ea2:	2210      	movs	r2, #16
 8006ea4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ea6:	4b29      	ldr	r3, [pc, #164]	@ (8006f4c <USBD_CDC_Init+0x1ec>)
 8006ea8:	7819      	ldrb	r1, [r3, #0]
 8006eaa:	2308      	movs	r3, #8
 8006eac:	2203      	movs	r2, #3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f002 fb1b 	bl	80094ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006eb4:	4b25      	ldr	r3, [pc, #148]	@ (8006f4c <USBD_CDC_Init+0x1ec>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3323      	adds	r3, #35	@ 0x23
 8006eca:	2201      	movs	r2, #1
 8006ecc:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	33b0      	adds	r3, #176	@ 0xb0
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f04:	2302      	movs	r3, #2
 8006f06:	e018      	b.n	8006f3a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	7c1b      	ldrb	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f10:	4b0d      	ldr	r3, [pc, #52]	@ (8006f48 <USBD_CDC_Init+0x1e8>)
 8006f12:	7819      	ldrb	r1, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f002 fbd2 	bl	80096c8 <USBD_LL_PrepareReceive>
 8006f24:	e008      	b.n	8006f38 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f26:	4b08      	ldr	r3, [pc, #32]	@ (8006f48 <USBD_CDC_Init+0x1e8>)
 8006f28:	7819      	ldrb	r1, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f30:	2340      	movs	r3, #64	@ 0x40
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f002 fbc8 	bl	80096c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000093 	.word	0x20000093
 8006f48:	20000094 	.word	0x20000094
 8006f4c:	20000095 	.word	0x20000095

08006f50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8007048 <USBD_CDC_DeInit+0xf8>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f002 fae7 	bl	8009536 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f68:	4b37      	ldr	r3, [pc, #220]	@ (8007048 <USBD_CDC_DeInit+0xf8>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 020f 	and.w	r2, r3, #15
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	3323      	adds	r3, #35	@ 0x23
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f82:	4b32      	ldr	r3, [pc, #200]	@ (800704c <USBD_CDC_DeInit+0xfc>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f002 fad4 	bl	8009536 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800704c <USBD_CDC_DeInit+0xfc>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	f003 020f 	and.w	r2, r3, #15
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006faa:	4b29      	ldr	r3, [pc, #164]	@ (8007050 <USBD_CDC_DeInit+0x100>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f002 fac0 	bl	8009536 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006fb6:	4b26      	ldr	r3, [pc, #152]	@ (8007050 <USBD_CDC_DeInit+0x100>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f003 020f 	and.w	r2, r3, #15
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	3323      	adds	r3, #35	@ 0x23
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8007050 <USBD_CDC_DeInit+0x100>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	f003 020f 	and.w	r2, r3, #15
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	331c      	adds	r3, #28
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	32b0      	adds	r2, #176	@ 0xb0
 8006ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01f      	beq.n	800703c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	33b0      	adds	r3, #176	@ 0xb0
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	32b0      	adds	r2, #176	@ 0xb0
 800701a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701e:	4618      	mov	r0, r3
 8007020:	f002 fb94 	bl	800974c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	32b0      	adds	r2, #176	@ 0xb0
 800702e:	2100      	movs	r1, #0
 8007030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000093 	.word	0x20000093
 800704c:	20000094 	.word	0x20000094
 8007050:	20000095 	.word	0x20000095

08007054 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	32b0      	adds	r2, #176	@ 0xb0
 8007068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	e0bf      	b.n	8007204 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800708c:	2b00      	cmp	r3, #0
 800708e:	d050      	beq.n	8007132 <USBD_CDC_Setup+0xde>
 8007090:	2b20      	cmp	r3, #32
 8007092:	f040 80af 	bne.w	80071f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	88db      	ldrh	r3, [r3, #6]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d03a      	beq.n	8007114 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	b25b      	sxtb	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	da1b      	bge.n	80070e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	33b0      	adds	r3, #176	@ 0xb0
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80070be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	88d2      	ldrh	r2, [r2, #6]
 80070c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	88db      	ldrh	r3, [r3, #6]
 80070ca:	2b07      	cmp	r3, #7
 80070cc:	bf28      	it	cs
 80070ce:	2307      	movcs	r3, #7
 80070d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	89fa      	ldrh	r2, [r7, #14]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 fda9 	bl	8008c30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80070de:	e090      	b.n	8007202 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	785a      	ldrb	r2, [r3, #1]
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	88db      	ldrh	r3, [r3, #6]
 80070ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80070f0:	d803      	bhi.n	80070fa <USBD_CDC_Setup+0xa6>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	88db      	ldrh	r3, [r3, #6]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	e000      	b.n	80070fc <USBD_CDC_Setup+0xa8>
 80070fa:	2240      	movs	r2, #64	@ 0x40
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007102:	6939      	ldr	r1, [r7, #16]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800710a:	461a      	mov	r2, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 fdbe 	bl	8008c8e <USBD_CtlPrepareRx>
      break;
 8007112:	e076      	b.n	8007202 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	33b0      	adds	r3, #176	@ 0xb0
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	7850      	ldrb	r0, [r2, #1]
 800712a:	2200      	movs	r2, #0
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	4798      	blx	r3
      break;
 8007130:	e067      	b.n	8007202 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	785b      	ldrb	r3, [r3, #1]
 8007136:	2b0b      	cmp	r3, #11
 8007138:	d851      	bhi.n	80071de <USBD_CDC_Setup+0x18a>
 800713a:	a201      	add	r2, pc, #4	@ (adr r2, 8007140 <USBD_CDC_Setup+0xec>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007171 	.word	0x08007171
 8007144:	080071ed 	.word	0x080071ed
 8007148:	080071df 	.word	0x080071df
 800714c:	080071df 	.word	0x080071df
 8007150:	080071df 	.word	0x080071df
 8007154:	080071df 	.word	0x080071df
 8007158:	080071df 	.word	0x080071df
 800715c:	080071df 	.word	0x080071df
 8007160:	080071df 	.word	0x080071df
 8007164:	080071df 	.word	0x080071df
 8007168:	0800719b 	.word	0x0800719b
 800716c:	080071c5 	.word	0x080071c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b03      	cmp	r3, #3
 800717a:	d107      	bne.n	800718c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800717c:	f107 030a 	add.w	r3, r7, #10
 8007180:	2202      	movs	r2, #2
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 fd53 	bl	8008c30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800718a:	e032      	b.n	80071f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 fcd1 	bl	8008b36 <USBD_CtlError>
            ret = USBD_FAIL;
 8007194:	2303      	movs	r3, #3
 8007196:	75fb      	strb	r3, [r7, #23]
          break;
 8007198:	e02b      	b.n	80071f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d107      	bne.n	80071b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071a6:	f107 030d 	add.w	r3, r7, #13
 80071aa:	2201      	movs	r2, #1
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 fd3e 	bl	8008c30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071b4:	e01d      	b.n	80071f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 fcbc 	bl	8008b36 <USBD_CtlError>
            ret = USBD_FAIL;
 80071be:	2303      	movs	r3, #3
 80071c0:	75fb      	strb	r3, [r7, #23]
          break;
 80071c2:	e016      	b.n	80071f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d00f      	beq.n	80071f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fcaf 	bl	8008b36 <USBD_CtlError>
            ret = USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071dc:	e008      	b.n	80071f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fca8 	bl	8008b36 <USBD_CtlError>
          ret = USBD_FAIL;
 80071e6:	2303      	movs	r3, #3
 80071e8:	75fb      	strb	r3, [r7, #23]
          break;
 80071ea:	e002      	b.n	80071f2 <USBD_CDC_Setup+0x19e>
          break;
 80071ec:	bf00      	nop
 80071ee:	e008      	b.n	8007202 <USBD_CDC_Setup+0x1ae>
          break;
 80071f0:	bf00      	nop
      }
      break;
 80071f2:	e006      	b.n	8007202 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 fc9d 	bl	8008b36 <USBD_CtlError>
      ret = USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007200:	bf00      	nop
  }

  return (uint8_t)ret;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800721e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	32b0      	adds	r2, #176	@ 0xb0
 800722a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007232:	2303      	movs	r3, #3
 8007234:	e065      	b.n	8007302 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	32b0      	adds	r2, #176	@ 0xb0
 8007240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007244:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	f003 020f 	and.w	r2, r3, #15
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	3314      	adds	r3, #20
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d02f      	beq.n	80072c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	f003 020f 	and.w	r2, r3, #15
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	440b      	add	r3, r1
 8007272:	3314      	adds	r3, #20
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	f003 010f 	and.w	r1, r3, #15
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	460b      	mov	r3, r1
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	440b      	add	r3, r1
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4403      	add	r3, r0
 8007288:	331c      	adds	r3, #28
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007296:	2b00      	cmp	r3, #0
 8007298:	d112      	bne.n	80072c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	f003 020f 	and.w	r2, r3, #15
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	3314      	adds	r3, #20
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072b2:	78f9      	ldrb	r1, [r7, #3]
 80072b4:	2300      	movs	r3, #0
 80072b6:	2200      	movs	r2, #0
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f002 f9e4 	bl	8009686 <USBD_LL_Transmit>
 80072be:	e01f      	b.n	8007300 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	33b0      	adds	r3, #176	@ 0xb0
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d010      	beq.n	8007300 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	33b0      	adds	r3, #176	@ 0xb0
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	460b      	mov	r3, r1
 8007314:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	32b0      	adds	r2, #176	@ 0xb0
 8007320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007324:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	32b0      	adds	r2, #176	@ 0xb0
 8007330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007338:	2303      	movs	r3, #3
 800733a:	e01a      	b.n	8007372 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f002 f9e2 	bl	800970a <USBD_LL_GetRxDataSize>
 8007346:	4602      	mov	r2, r0
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	33b0      	adds	r3, #176	@ 0xb0
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800736c:	4611      	mov	r1, r2
 800736e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	32b0      	adds	r2, #176	@ 0xb0
 800738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007390:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007398:	2303      	movs	r3, #3
 800739a:	e024      	b.n	80073e6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	33b0      	adds	r3, #176	@ 0xb0
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d019      	beq.n	80073e4 <USBD_CDC_EP0_RxReady+0x6a>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80073b6:	2bff      	cmp	r3, #255	@ 0xff
 80073b8:	d014      	beq.n	80073e4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	33b0      	adds	r3, #176	@ 0xb0
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80073d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	22ff      	movs	r2, #255	@ 0xff
 80073e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073f8:	2182      	movs	r1, #130	@ 0x82
 80073fa:	4818      	ldr	r0, [pc, #96]	@ (800745c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073fc:	f000 fd62 	bl	8007ec4 <USBD_GetEpDesc>
 8007400:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007402:	2101      	movs	r1, #1
 8007404:	4815      	ldr	r0, [pc, #84]	@ (800745c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007406:	f000 fd5d 	bl	8007ec4 <USBD_GetEpDesc>
 800740a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800740c:	2181      	movs	r1, #129	@ 0x81
 800740e:	4813      	ldr	r0, [pc, #76]	@ (800745c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007410:	f000 fd58 	bl	8007ec4 <USBD_GetEpDesc>
 8007414:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2210      	movs	r2, #16
 8007420:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2200      	movs	r2, #0
 800742c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007430:	711a      	strb	r2, [r3, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d006      	beq.n	800744a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007444:	711a      	strb	r2, [r3, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2243      	movs	r2, #67	@ 0x43
 800744e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007450:	4b02      	ldr	r3, [pc, #8]	@ (800745c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20000050 	.word	0x20000050

08007460 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007468:	2182      	movs	r1, #130	@ 0x82
 800746a:	4818      	ldr	r0, [pc, #96]	@ (80074cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800746c:	f000 fd2a 	bl	8007ec4 <USBD_GetEpDesc>
 8007470:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007472:	2101      	movs	r1, #1
 8007474:	4815      	ldr	r0, [pc, #84]	@ (80074cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007476:	f000 fd25 	bl	8007ec4 <USBD_GetEpDesc>
 800747a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800747c:	2181      	movs	r1, #129	@ 0x81
 800747e:	4813      	ldr	r0, [pc, #76]	@ (80074cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007480:	f000 fd20 	bl	8007ec4 <USBD_GetEpDesc>
 8007484:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2210      	movs	r2, #16
 8007490:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d006      	beq.n	80074a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2200      	movs	r2, #0
 800749c:	711a      	strb	r2, [r3, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f042 0202 	orr.w	r2, r2, #2
 80074a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d006      	beq.n	80074ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	711a      	strb	r2, [r3, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f042 0202 	orr.w	r2, r2, #2
 80074b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2243      	movs	r2, #67	@ 0x43
 80074be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074c0:	4b02      	ldr	r3, [pc, #8]	@ (80074cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000050 	.word	0x20000050

080074d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074d8:	2182      	movs	r1, #130	@ 0x82
 80074da:	4818      	ldr	r0, [pc, #96]	@ (800753c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074dc:	f000 fcf2 	bl	8007ec4 <USBD_GetEpDesc>
 80074e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074e2:	2101      	movs	r1, #1
 80074e4:	4815      	ldr	r0, [pc, #84]	@ (800753c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074e6:	f000 fced 	bl	8007ec4 <USBD_GetEpDesc>
 80074ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074ec:	2181      	movs	r1, #129	@ 0x81
 80074ee:	4813      	ldr	r0, [pc, #76]	@ (800753c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074f0:	f000 fce8 	bl	8007ec4 <USBD_GetEpDesc>
 80074f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2210      	movs	r2, #16
 8007500:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d006      	beq.n	8007516 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	2200      	movs	r2, #0
 800750c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007510:	711a      	strb	r2, [r3, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d006      	beq.n	800752a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007524:	711a      	strb	r2, [r3, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2243      	movs	r2, #67	@ 0x43
 800752e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007530:	4b02      	ldr	r3, [pc, #8]	@ (800753c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20000050 	.word	0x20000050

08007540 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	220a      	movs	r2, #10
 800754c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800754e:	4b03      	ldr	r3, [pc, #12]	@ (800755c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	2000000c 	.word	0x2000000c

08007560 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	e009      	b.n	8007588 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	33b0      	adds	r3, #176	@ 0xb0
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	32b0      	adds	r2, #176	@ 0xb0
 80075aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e008      	b.n	80075cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	32b0      	adds	r2, #176	@ 0xb0
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e004      	b.n	8007606 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
	...

08007614 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	32b0      	adds	r2, #176	@ 0xb0
 8007626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800762c:	2301      	movs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007636:	2303      	movs	r3, #3
 8007638:	e025      	b.n	8007686 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007640:	2b00      	cmp	r3, #0
 8007642:	d11f      	bne.n	8007684 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2201      	movs	r2, #1
 8007648:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800764c:	4b10      	ldr	r3, [pc, #64]	@ (8007690 <USBD_CDC_TransmitPacket+0x7c>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	f003 020f 	and.w	r2, r3, #15
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4403      	add	r3, r0
 8007666:	3314      	adds	r3, #20
 8007668:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800766a:	4b09      	ldr	r3, [pc, #36]	@ (8007690 <USBD_CDC_TransmitPacket+0x7c>)
 800766c:	7819      	ldrb	r1, [r3, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f002 f803 	bl	8009686 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000093 	.word	0x20000093

08007694 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	32b0      	adds	r2, #176	@ 0xb0
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	32b0      	adds	r2, #176	@ 0xb0
 80076b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076be:	2303      	movs	r3, #3
 80076c0:	e018      	b.n	80076f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	7c1b      	ldrb	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076ca:	4b0c      	ldr	r3, [pc, #48]	@ (80076fc <USBD_CDC_ReceivePacket+0x68>)
 80076cc:	7819      	ldrb	r1, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 fff5 	bl	80096c8 <USBD_LL_PrepareReceive>
 80076de:	e008      	b.n	80076f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076e0:	4b06      	ldr	r3, [pc, #24]	@ (80076fc <USBD_CDC_ReceivePacket+0x68>)
 80076e2:	7819      	ldrb	r1, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076ea:	2340      	movs	r3, #64	@ 0x40
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 ffeb 	bl	80096c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000094 	.word	0x20000094

08007700 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	4613      	mov	r3, r2
 800770c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007714:	2303      	movs	r3, #3
 8007716:	e01f      	b.n	8007758 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	79fa      	ldrb	r2, [r7, #7]
 800774a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f001 fe65 	bl	800941c <USBD_LL_Init>
 8007752:	4603      	mov	r3, r0
 8007754:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007756:	7dfb      	ldrb	r3, [r7, #23]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007774:	2303      	movs	r3, #3
 8007776:	e025      	b.n	80077c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	32ae      	adds	r2, #174	@ 0xae
 800778a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00f      	beq.n	80077b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	32ae      	adds	r2, #174	@ 0xae
 800779e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a4:	f107 020e 	add.w	r2, r7, #14
 80077a8:	4610      	mov	r0, r2
 80077aa:	4798      	blx	r3
 80077ac:	4602      	mov	r2, r0
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 fe6d 	bl	80094b4 <USBD_LL_Start>
 80077da:	4603      	mov	r3, r0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	78fa      	ldrb	r2, [r7, #3]
 800781e:	4611      	mov	r1, r2
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	460b      	mov	r3, r1
 800783c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	78fa      	ldrb	r2, [r7, #3]
 800784c:	4611      	mov	r1, r2
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	4798      	blx	r3
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007858:	2303      	movs	r3, #3
 800785a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	4618      	mov	r0, r3
 800787a:	f001 f922 	bl	8008ac2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800788c:	461a      	mov	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d01a      	beq.n	80078d8 <USBD_LL_SetupStage+0x72>
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d822      	bhi.n	80078ec <USBD_LL_SetupStage+0x86>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <USBD_LL_SetupStage+0x4a>
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d00a      	beq.n	80078c4 <USBD_LL_SetupStage+0x5e>
 80078ae:	e01d      	b.n	80078ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fb77 	bl	8007fac <USBD_StdDevReq>
 80078be:	4603      	mov	r3, r0
 80078c0:	73fb      	strb	r3, [r7, #15]
      break;
 80078c2:	e020      	b.n	8007906 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fbdf 	bl	8008090 <USBD_StdItfReq>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
      break;
 80078d6:	e016      	b.n	8007906 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc41 	bl	8008168 <USBD_StdEPReq>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73fb      	strb	r3, [r7, #15]
      break;
 80078ea:	e00c      	b.n	8007906 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 fe3a 	bl	8009574 <USBD_LL_StallEP>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
      break;
 8007904:	bf00      	nop
  }

  return ret;
 8007906:	7bfb      	ldrb	r3, [r7, #15]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	460b      	mov	r3, r1
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007922:	7afb      	ldrb	r3, [r7, #11]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d177      	bne.n	8007a18 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800792e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007936:	2b03      	cmp	r3, #3
 8007938:	f040 80a1 	bne.w	8007a7e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	8992      	ldrh	r2, [r2, #12]
 8007944:	4293      	cmp	r3, r2
 8007946:	d91c      	bls.n	8007982 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	8992      	ldrh	r2, [r2, #12]
 8007950:	1a9a      	subs	r2, r3, r2
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	8992      	ldrh	r2, [r2, #12]
 800795e:	441a      	add	r2, r3
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	6919      	ldr	r1, [r3, #16]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	899b      	ldrh	r3, [r3, #12]
 800796c:	461a      	mov	r2, r3
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	4293      	cmp	r3, r2
 8007974:	bf38      	it	cc
 8007976:	4613      	movcc	r3, r2
 8007978:	461a      	mov	r2, r3
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f001 f9a8 	bl	8008cd0 <USBD_CtlContinueRx>
 8007980:	e07d      	b.n	8007a7e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007988:	f003 031f 	and.w	r3, r3, #31
 800798c:	2b02      	cmp	r3, #2
 800798e:	d014      	beq.n	80079ba <USBD_LL_DataOutStage+0xaa>
 8007990:	2b02      	cmp	r3, #2
 8007992:	d81d      	bhi.n	80079d0 <USBD_LL_DataOutStage+0xc0>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <USBD_LL_DataOutStage+0x8e>
 8007998:	2b01      	cmp	r3, #1
 800799a:	d003      	beq.n	80079a4 <USBD_LL_DataOutStage+0x94>
 800799c:	e018      	b.n	80079d0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	75bb      	strb	r3, [r7, #22]
            break;
 80079a2:	e018      	b.n	80079d6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	4619      	mov	r1, r3
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 fa6e 	bl	8007e90 <USBD_CoreFindIF>
 80079b4:	4603      	mov	r3, r0
 80079b6:	75bb      	strb	r3, [r7, #22]
            break;
 80079b8:	e00d      	b.n	80079d6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	4619      	mov	r1, r3
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 fa70 	bl	8007eaa <USBD_CoreFindEP>
 80079ca:	4603      	mov	r3, r0
 80079cc:	75bb      	strb	r3, [r7, #22]
            break;
 80079ce:	e002      	b.n	80079d6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	75bb      	strb	r3, [r7, #22]
            break;
 80079d4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80079d6:	7dbb      	ldrb	r3, [r7, #22]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d119      	bne.n	8007a10 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d113      	bne.n	8007a10 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80079e8:	7dba      	ldrb	r2, [r7, #22]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	32ae      	adds	r2, #174	@ 0xae
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80079f8:	7dba      	ldrb	r2, [r7, #22]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a00:	7dba      	ldrb	r2, [r7, #22]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	32ae      	adds	r2, #174	@ 0xae
 8007a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f001 f96e 	bl	8008cf2 <USBD_CtlSendStatus>
 8007a16:	e032      	b.n	8007a7e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	4619      	mov	r1, r3
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fa41 	bl	8007eaa <USBD_CoreFindEP>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a2c:	7dbb      	ldrb	r3, [r7, #22]
 8007a2e:	2bff      	cmp	r3, #255	@ 0xff
 8007a30:	d025      	beq.n	8007a7e <USBD_LL_DataOutStage+0x16e>
 8007a32:	7dbb      	ldrb	r3, [r7, #22]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d122      	bne.n	8007a7e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d117      	bne.n	8007a74 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a44:	7dba      	ldrb	r2, [r7, #22]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	32ae      	adds	r2, #174	@ 0xae
 8007a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00f      	beq.n	8007a74 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007a54:	7dba      	ldrb	r2, [r7, #22]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a5c:	7dba      	ldrb	r2, [r7, #22]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	32ae      	adds	r2, #174	@ 0xae
 8007a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	7afa      	ldrb	r2, [r7, #11]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	4798      	blx	r3
 8007a70:	4603      	mov	r3, r0
 8007a72:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	e000      	b.n	8007a80 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	460b      	mov	r3, r1
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007a96:	7afb      	ldrb	r3, [r7, #11]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d178      	bne.n	8007b8e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3314      	adds	r3, #20
 8007aa0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d163      	bne.n	8007b74 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	8992      	ldrh	r2, [r2, #12]
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d91c      	bls.n	8007af2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	8992      	ldrh	r2, [r2, #12]
 8007ac0:	1a9a      	subs	r2, r3, r2
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	8992      	ldrh	r2, [r2, #12]
 8007ace:	441a      	add	r2, r3
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6919      	ldr	r1, [r3, #16]
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	461a      	mov	r2, r3
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f001 f8c4 	bl	8008c6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2100      	movs	r1, #0
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f001 fdec 	bl	80096c8 <USBD_LL_PrepareReceive>
 8007af0:	e040      	b.n	8007b74 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	899b      	ldrh	r3, [r3, #12]
 8007af6:	461a      	mov	r2, r3
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d11c      	bne.n	8007b3a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d316      	bcc.n	8007b3a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d20f      	bcs.n	8007b3a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f001 f8a4 	bl	8008c6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2100      	movs	r1, #0
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f001 fdc8 	bl	80096c8 <USBD_LL_PrepareReceive>
 8007b38:	e01c      	b.n	8007b74 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d10f      	bne.n	8007b66 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b66:	2180      	movs	r1, #128	@ 0x80
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f001 fd03 	bl	8009574 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f001 f8d2 	bl	8008d18 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d03a      	beq.n	8007bf4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff fe30 	bl	80077e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007b8c:	e032      	b.n	8007bf4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	4619      	mov	r1, r3
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f986 	bl	8007eaa <USBD_CoreFindEP>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	2bff      	cmp	r3, #255	@ 0xff
 8007ba6:	d025      	beq.n	8007bf4 <USBD_LL_DataInStage+0x16c>
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d122      	bne.n	8007bf4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d11c      	bne.n	8007bf4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bba:	7dfa      	ldrb	r2, [r7, #23]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	32ae      	adds	r2, #174	@ 0xae
 8007bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d014      	beq.n	8007bf4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007bca:	7dfa      	ldrb	r2, [r7, #23]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007bd2:	7dfa      	ldrb	r2, [r7, #23]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	32ae      	adds	r2, #174	@ 0xae
 8007bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	7afa      	ldrb	r2, [r7, #11]
 8007be0:	4611      	mov	r1, r2
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	4798      	blx	r3
 8007be6:	4603      	mov	r3, r0
 8007be8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007bea:	7dbb      	ldrb	r3, [r7, #22]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007bf0:	7dbb      	ldrb	r3, [r7, #22]
 8007bf2:	e000      	b.n	8007bf6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d014      	beq.n	8007c64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6852      	ldr	r2, [r2, #4]
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	4611      	mov	r1, r2
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c60:	2303      	movs	r3, #3
 8007c62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c64:	2340      	movs	r3, #64	@ 0x40
 8007c66:	2200      	movs	r2, #0
 8007c68:	2100      	movs	r1, #0
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fc3d 	bl	80094ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2240      	movs	r2, #64	@ 0x40
 8007c7c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c80:	2340      	movs	r3, #64	@ 0x40
 8007c82:	2200      	movs	r2, #0
 8007c84:	2180      	movs	r1, #128	@ 0x80
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fc2f 	bl	80094ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2240      	movs	r2, #64	@ 0x40
 8007c98:	841a      	strh	r2, [r3, #32]

  return ret;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	78fa      	ldrb	r2, [r7, #3]
 8007cb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	d006      	beq.n	8007ce6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2204      	movs	r2, #4
 8007cea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d106      	bne.n	8007d1e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d110      	bne.n	8007d62 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00b      	beq.n	8007d62 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	32ae      	adds	r2, #174	@ 0xae
 8007d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e01c      	b.n	8007dc8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d115      	bne.n	8007dc6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	32ae      	adds	r2, #174	@ 0xae
 8007da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00b      	beq.n	8007dc6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	32ae      	adds	r2, #174	@ 0xae
 8007db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	78fa      	ldrb	r2, [r7, #3]
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	32ae      	adds	r2, #174	@ 0xae
 8007de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e01c      	b.n	8007e2c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d115      	bne.n	8007e2a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	32ae      	adds	r2, #174	@ 0xae
 8007e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00b      	beq.n	8007e2a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	32ae      	adds	r2, #174	@ 0xae
 8007e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	78fa      	ldrb	r2, [r7, #3]
 8007e24:	4611      	mov	r1, r2
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00e      	beq.n	8007e86 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6852      	ldr	r2, [r2, #4]
 8007e74:	b2d2      	uxtb	r2, r2
 8007e76:	4611      	mov	r1, r2
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e82:	2303      	movs	r3, #3
 8007e84:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eb6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	885b      	ldrh	r3, [r3, #2]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	7812      	ldrb	r2, [r2, #0]
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d91f      	bls.n	8007f2a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007ef0:	e013      	b.n	8007f1a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ef2:	f107 030a 	add.w	r3, r7, #10
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6978      	ldr	r0, [r7, #20]
 8007efa:	f000 f81b 	bl	8007f34 <USBD_GetNextDesc>
 8007efe:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	2b05      	cmp	r3, #5
 8007f06:	d108      	bne.n	8007f1a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	789b      	ldrb	r3, [r3, #2]
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d008      	beq.n	8007f28 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	885b      	ldrh	r3, [r3, #2]
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	897b      	ldrh	r3, [r7, #10]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d8e5      	bhi.n	8007ef2 <USBD_GetEpDesc+0x2e>
 8007f26:	e000      	b.n	8007f2a <USBD_GetEpDesc+0x66>
          break;
 8007f28:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f2a:	693b      	ldr	r3, [r7, #16]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	7812      	ldrb	r2, [r2, #0]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	3301      	adds	r3, #1
 8007f82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	b21a      	sxth	r2, r3
 8007f92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	b21b      	sxth	r3, r3
 8007f9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f9c:	89fb      	ldrh	r3, [r7, #14]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	371c      	adds	r7, #28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
	...

08007fac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fc2:	2b40      	cmp	r3, #64	@ 0x40
 8007fc4:	d005      	beq.n	8007fd2 <USBD_StdDevReq+0x26>
 8007fc6:	2b40      	cmp	r3, #64	@ 0x40
 8007fc8:	d857      	bhi.n	800807a <USBD_StdDevReq+0xce>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00f      	beq.n	8007fee <USBD_StdDevReq+0x42>
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	d153      	bne.n	800807a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	32ae      	adds	r2, #174	@ 0xae
 8007fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
      break;
 8007fec:	e04a      	b.n	8008084 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	2b09      	cmp	r3, #9
 8007ff4:	d83b      	bhi.n	800806e <USBD_StdDevReq+0xc2>
 8007ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ffc <USBD_StdDevReq+0x50>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	08008051 	.word	0x08008051
 8008000:	08008065 	.word	0x08008065
 8008004:	0800806f 	.word	0x0800806f
 8008008:	0800805b 	.word	0x0800805b
 800800c:	0800806f 	.word	0x0800806f
 8008010:	0800802f 	.word	0x0800802f
 8008014:	08008025 	.word	0x08008025
 8008018:	0800806f 	.word	0x0800806f
 800801c:	08008047 	.word	0x08008047
 8008020:	08008039 	.word	0x08008039
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa3e 	bl	80084a8 <USBD_GetDescriptor>
          break;
 800802c:	e024      	b.n	8008078 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fba3 	bl	800877c <USBD_SetAddress>
          break;
 8008036:	e01f      	b.n	8008078 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fbe2 	bl	8008804 <USBD_SetConfig>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]
          break;
 8008044:	e018      	b.n	8008078 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fc85 	bl	8008958 <USBD_GetConfig>
          break;
 800804e:	e013      	b.n	8008078 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fcb6 	bl	80089c4 <USBD_GetStatus>
          break;
 8008058:	e00e      	b.n	8008078 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fce5 	bl	8008a2c <USBD_SetFeature>
          break;
 8008062:	e009      	b.n	8008078 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fd09 	bl	8008a7e <USBD_ClrFeature>
          break;
 800806c:	e004      	b.n	8008078 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fd60 	bl	8008b36 <USBD_CtlError>
          break;
 8008076:	bf00      	nop
      }
      break;
 8008078:	e004      	b.n	8008084 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fd5a 	bl	8008b36 <USBD_CtlError>
      break;
 8008082:	bf00      	nop
  }

  return ret;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop

08008090 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080a6:	2b40      	cmp	r3, #64	@ 0x40
 80080a8:	d005      	beq.n	80080b6 <USBD_StdItfReq+0x26>
 80080aa:	2b40      	cmp	r3, #64	@ 0x40
 80080ac:	d852      	bhi.n	8008154 <USBD_StdItfReq+0xc4>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <USBD_StdItfReq+0x26>
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d14e      	bne.n	8008154 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d840      	bhi.n	8008146 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	889b      	ldrh	r3, [r3, #4]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d836      	bhi.n	800813c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	889b      	ldrh	r3, [r3, #4]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff feda 	bl	8007e90 <USBD_CoreFindIF>
 80080dc:	4603      	mov	r3, r0
 80080de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	2bff      	cmp	r3, #255	@ 0xff
 80080e4:	d01d      	beq.n	8008122 <USBD_StdItfReq+0x92>
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d11a      	bne.n	8008122 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080ec:	7bba      	ldrb	r2, [r7, #14]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	32ae      	adds	r2, #174	@ 0xae
 80080f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00f      	beq.n	800811c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80080fc:	7bba      	ldrb	r2, [r7, #14]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008104:	7bba      	ldrb	r2, [r7, #14]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	32ae      	adds	r2, #174	@ 0xae
 800810a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
 8008116:	4603      	mov	r3, r0
 8008118:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800811a:	e004      	b.n	8008126 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800811c:	2303      	movs	r3, #3
 800811e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008120:	e001      	b.n	8008126 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008122:	2303      	movs	r3, #3
 8008124:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	88db      	ldrh	r3, [r3, #6]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d110      	bne.n	8008150 <USBD_StdItfReq+0xc0>
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10d      	bne.n	8008150 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fddc 	bl	8008cf2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800813a:	e009      	b.n	8008150 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fcf9 	bl	8008b36 <USBD_CtlError>
          break;
 8008144:	e004      	b.n	8008150 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fcf4 	bl	8008b36 <USBD_CtlError>
          break;
 800814e:	e000      	b.n	8008152 <USBD_StdItfReq+0xc2>
          break;
 8008150:	bf00      	nop
      }
      break;
 8008152:	e004      	b.n	800815e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fced 	bl	8008b36 <USBD_CtlError>
      break;
 800815c:	bf00      	nop
  }

  return ret;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	889b      	ldrh	r3, [r3, #4]
 800817a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008184:	2b40      	cmp	r3, #64	@ 0x40
 8008186:	d007      	beq.n	8008198 <USBD_StdEPReq+0x30>
 8008188:	2b40      	cmp	r3, #64	@ 0x40
 800818a:	f200 8181 	bhi.w	8008490 <USBD_StdEPReq+0x328>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d02a      	beq.n	80081e8 <USBD_StdEPReq+0x80>
 8008192:	2b20      	cmp	r3, #32
 8008194:	f040 817c 	bne.w	8008490 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff fe84 	bl	8007eaa <USBD_CoreFindEP>
 80081a2:	4603      	mov	r3, r0
 80081a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081a6:	7b7b      	ldrb	r3, [r7, #13]
 80081a8:	2bff      	cmp	r3, #255	@ 0xff
 80081aa:	f000 8176 	beq.w	800849a <USBD_StdEPReq+0x332>
 80081ae:	7b7b      	ldrb	r3, [r7, #13]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f040 8172 	bne.w	800849a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80081b6:	7b7a      	ldrb	r2, [r7, #13]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081be:	7b7a      	ldrb	r2, [r7, #13]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	32ae      	adds	r2, #174	@ 0xae
 80081c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 8165 	beq.w	800849a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081d0:	7b7a      	ldrb	r2, [r7, #13]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	32ae      	adds	r2, #174	@ 0xae
 80081d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	4798      	blx	r3
 80081e2:	4603      	mov	r3, r0
 80081e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081e6:	e158      	b.n	800849a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	785b      	ldrb	r3, [r3, #1]
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d008      	beq.n	8008202 <USBD_StdEPReq+0x9a>
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	f300 8147 	bgt.w	8008484 <USBD_StdEPReq+0x31c>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 809b 	beq.w	8008332 <USBD_StdEPReq+0x1ca>
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d03c      	beq.n	800827a <USBD_StdEPReq+0x112>
 8008200:	e140      	b.n	8008484 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d002      	beq.n	8008214 <USBD_StdEPReq+0xac>
 800820e:	2b03      	cmp	r3, #3
 8008210:	d016      	beq.n	8008240 <USBD_StdEPReq+0xd8>
 8008212:	e02c      	b.n	800826e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00d      	beq.n	8008236 <USBD_StdEPReq+0xce>
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b80      	cmp	r3, #128	@ 0x80
 800821e:	d00a      	beq.n	8008236 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 f9a5 	bl	8009574 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800822a:	2180      	movs	r1, #128	@ 0x80
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 f9a1 	bl	8009574 <USBD_LL_StallEP>
 8008232:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008234:	e020      	b.n	8008278 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fc7c 	bl	8008b36 <USBD_CtlError>
              break;
 800823e:	e01b      	b.n	8008278 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	885b      	ldrh	r3, [r3, #2]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10e      	bne.n	8008266 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00b      	beq.n	8008266 <USBD_StdEPReq+0xfe>
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b80      	cmp	r3, #128	@ 0x80
 8008252:	d008      	beq.n	8008266 <USBD_StdEPReq+0xfe>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	88db      	ldrh	r3, [r3, #6]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 f987 	bl	8009574 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fd43 	bl	8008cf2 <USBD_CtlSendStatus>

              break;
 800826c:	e004      	b.n	8008278 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fc60 	bl	8008b36 <USBD_CtlError>
              break;
 8008276:	bf00      	nop
          }
          break;
 8008278:	e109      	b.n	800848e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b02      	cmp	r3, #2
 8008284:	d002      	beq.n	800828c <USBD_StdEPReq+0x124>
 8008286:	2b03      	cmp	r3, #3
 8008288:	d016      	beq.n	80082b8 <USBD_StdEPReq+0x150>
 800828a:	e04b      	b.n	8008324 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00d      	beq.n	80082ae <USBD_StdEPReq+0x146>
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	2b80      	cmp	r3, #128	@ 0x80
 8008296:	d00a      	beq.n	80082ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 f969 	bl	8009574 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082a2:	2180      	movs	r1, #128	@ 0x80
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 f965 	bl	8009574 <USBD_LL_StallEP>
 80082aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082ac:	e040      	b.n	8008330 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fc40 	bl	8008b36 <USBD_CtlError>
              break;
 80082b6:	e03b      	b.n	8008330 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	885b      	ldrh	r3, [r3, #2]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d136      	bne.n	800832e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d004      	beq.n	80082d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 f96f 	bl	80095b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fd0c 	bl	8008cf2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7ff fde3 	bl	8007eaa <USBD_CoreFindEP>
 80082e4:	4603      	mov	r3, r0
 80082e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082e8:	7b7b      	ldrb	r3, [r7, #13]
 80082ea:	2bff      	cmp	r3, #255	@ 0xff
 80082ec:	d01f      	beq.n	800832e <USBD_StdEPReq+0x1c6>
 80082ee:	7b7b      	ldrb	r3, [r7, #13]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11c      	bne.n	800832e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082f4:	7b7a      	ldrb	r2, [r7, #13]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80082fc:	7b7a      	ldrb	r2, [r7, #13]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32ae      	adds	r2, #174	@ 0xae
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d010      	beq.n	800832e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800830c:	7b7a      	ldrb	r2, [r7, #13]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	32ae      	adds	r2, #174	@ 0xae
 8008312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
 800831e:	4603      	mov	r3, r0
 8008320:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008322:	e004      	b.n	800832e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fc05 	bl	8008b36 <USBD_CtlError>
              break;
 800832c:	e000      	b.n	8008330 <USBD_StdEPReq+0x1c8>
              break;
 800832e:	bf00      	nop
          }
          break;
 8008330:	e0ad      	b.n	800848e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b02      	cmp	r3, #2
 800833c:	d002      	beq.n	8008344 <USBD_StdEPReq+0x1dc>
 800833e:	2b03      	cmp	r3, #3
 8008340:	d033      	beq.n	80083aa <USBD_StdEPReq+0x242>
 8008342:	e099      	b.n	8008478 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d007      	beq.n	800835a <USBD_StdEPReq+0x1f2>
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	2b80      	cmp	r3, #128	@ 0x80
 800834e:	d004      	beq.n	800835a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fbef 	bl	8008b36 <USBD_CtlError>
                break;
 8008358:	e093      	b.n	8008482 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800835a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800835e:	2b00      	cmp	r3, #0
 8008360:	da0b      	bge.n	800837a <USBD_StdEPReq+0x212>
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	3310      	adds	r3, #16
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	4413      	add	r3, r2
 8008376:	3304      	adds	r3, #4
 8008378:	e00b      	b.n	8008392 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	4413      	add	r3, r2
 8008390:	3304      	adds	r3, #4
 8008392:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	2200      	movs	r2, #0
 8008398:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	330e      	adds	r3, #14
 800839e:	2202      	movs	r2, #2
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fc44 	bl	8008c30 <USBD_CtlSendData>
              break;
 80083a8:	e06b      	b.n	8008482 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	da11      	bge.n	80083d6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	f003 020f 	and.w	r2, r3, #15
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	440b      	add	r3, r1
 80083c4:	3323      	adds	r3, #35	@ 0x23
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d117      	bne.n	80083fc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fbb1 	bl	8008b36 <USBD_CtlError>
                  break;
 80083d4:	e055      	b.n	8008482 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	f003 020f 	and.w	r2, r3, #15
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	440b      	add	r3, r1
 80083e8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d104      	bne.n	80083fc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fb9e 	bl	8008b36 <USBD_CtlError>
                  break;
 80083fa:	e042      	b.n	8008482 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008400:	2b00      	cmp	r3, #0
 8008402:	da0b      	bge.n	800841c <USBD_StdEPReq+0x2b4>
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	3310      	adds	r3, #16
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	4413      	add	r3, r2
 8008418:	3304      	adds	r3, #4
 800841a:	e00b      	b.n	8008434 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4413      	add	r3, r2
 8008432:	3304      	adds	r3, #4
 8008434:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <USBD_StdEPReq+0x2da>
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b80      	cmp	r3, #128	@ 0x80
 8008440:	d103      	bne.n	800844a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2200      	movs	r2, #0
 8008446:	739a      	strb	r2, [r3, #14]
 8008448:	e00e      	b.n	8008468 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 f8ce 	bl	80095f0 <USBD_LL_IsStallEP>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2201      	movs	r2, #1
 800845e:	739a      	strb	r2, [r3, #14]
 8008460:	e002      	b.n	8008468 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2200      	movs	r2, #0
 8008466:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	330e      	adds	r3, #14
 800846c:	2202      	movs	r2, #2
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fbdd 	bl	8008c30 <USBD_CtlSendData>
              break;
 8008476:	e004      	b.n	8008482 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fb5b 	bl	8008b36 <USBD_CtlError>
              break;
 8008480:	bf00      	nop
          }
          break;
 8008482:	e004      	b.n	800848e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fb55 	bl	8008b36 <USBD_CtlError>
          break;
 800848c:	bf00      	nop
      }
      break;
 800848e:	e005      	b.n	800849c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fb4f 	bl	8008b36 <USBD_CtlError>
      break;
 8008498:	e000      	b.n	800849c <USBD_StdEPReq+0x334>
      break;
 800849a:	bf00      	nop
  }

  return ret;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	885b      	ldrh	r3, [r3, #2]
 80084c2:	0a1b      	lsrs	r3, r3, #8
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	3b01      	subs	r3, #1
 80084c8:	2b06      	cmp	r3, #6
 80084ca:	f200 8128 	bhi.w	800871e <USBD_GetDescriptor+0x276>
 80084ce:	a201      	add	r2, pc, #4	@ (adr r2, 80084d4 <USBD_GetDescriptor+0x2c>)
 80084d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d4:	080084f1 	.word	0x080084f1
 80084d8:	08008509 	.word	0x08008509
 80084dc:	08008549 	.word	0x08008549
 80084e0:	0800871f 	.word	0x0800871f
 80084e4:	0800871f 	.word	0x0800871f
 80084e8:	080086bf 	.word	0x080086bf
 80084ec:	080086eb 	.word	0x080086eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	7c12      	ldrb	r2, [r2, #16]
 80084fc:	f107 0108 	add.w	r1, r7, #8
 8008500:	4610      	mov	r0, r2
 8008502:	4798      	blx	r3
 8008504:	60f8      	str	r0, [r7, #12]
      break;
 8008506:	e112      	b.n	800872e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	7c1b      	ldrb	r3, [r3, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10d      	bne.n	800852c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008518:	f107 0208 	add.w	r2, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3301      	adds	r3, #1
 8008526:	2202      	movs	r2, #2
 8008528:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800852a:	e100      	b.n	800872e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008534:	f107 0208 	add.w	r2, r7, #8
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3301      	adds	r3, #1
 8008542:	2202      	movs	r2, #2
 8008544:	701a      	strb	r2, [r3, #0]
      break;
 8008546:	e0f2      	b.n	800872e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	885b      	ldrh	r3, [r3, #2]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b05      	cmp	r3, #5
 8008550:	f200 80ac 	bhi.w	80086ac <USBD_GetDescriptor+0x204>
 8008554:	a201      	add	r2, pc, #4	@ (adr r2, 800855c <USBD_GetDescriptor+0xb4>)
 8008556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855a:	bf00      	nop
 800855c:	08008575 	.word	0x08008575
 8008560:	080085a9 	.word	0x080085a9
 8008564:	080085dd 	.word	0x080085dd
 8008568:	08008611 	.word	0x08008611
 800856c:	08008645 	.word	0x08008645
 8008570:	08008679 	.word	0x08008679
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00b      	beq.n	8008598 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	7c12      	ldrb	r2, [r2, #16]
 800858c:	f107 0108 	add.w	r1, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008596:	e091      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 facb 	bl	8008b36 <USBD_CtlError>
            err++;
 80085a0:	7afb      	ldrb	r3, [r7, #11]
 80085a2:	3301      	adds	r3, #1
 80085a4:	72fb      	strb	r3, [r7, #11]
          break;
 80085a6:	e089      	b.n	80086bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	7c12      	ldrb	r2, [r2, #16]
 80085c0:	f107 0108 	add.w	r1, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ca:	e077      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fab1 	bl	8008b36 <USBD_CtlError>
            err++;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	3301      	adds	r3, #1
 80085d8:	72fb      	strb	r3, [r7, #11]
          break;
 80085da:	e06f      	b.n	80086bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	7c12      	ldrb	r2, [r2, #16]
 80085f4:	f107 0108 	add.w	r1, r7, #8
 80085f8:	4610      	mov	r0, r2
 80085fa:	4798      	blx	r3
 80085fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fe:	e05d      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa97 	bl	8008b36 <USBD_CtlError>
            err++;
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	3301      	adds	r3, #1
 800860c:	72fb      	strb	r3, [r7, #11]
          break;
 800860e:	e055      	b.n	80086bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	7c12      	ldrb	r2, [r2, #16]
 8008628:	f107 0108 	add.w	r1, r7, #8
 800862c:	4610      	mov	r0, r2
 800862e:	4798      	blx	r3
 8008630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008632:	e043      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fa7d 	bl	8008b36 <USBD_CtlError>
            err++;
 800863c:	7afb      	ldrb	r3, [r7, #11]
 800863e:	3301      	adds	r3, #1
 8008640:	72fb      	strb	r3, [r7, #11]
          break;
 8008642:	e03b      	b.n	80086bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	7c12      	ldrb	r2, [r2, #16]
 800865c:	f107 0108 	add.w	r1, r7, #8
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
 8008664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008666:	e029      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa63 	bl	8008b36 <USBD_CtlError>
            err++;
 8008670:	7afb      	ldrb	r3, [r7, #11]
 8008672:	3301      	adds	r3, #1
 8008674:	72fb      	strb	r3, [r7, #11]
          break;
 8008676:	e021      	b.n	80086bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00b      	beq.n	800869c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	7c12      	ldrb	r2, [r2, #16]
 8008690:	f107 0108 	add.w	r1, r7, #8
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
 8008698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800869a:	e00f      	b.n	80086bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fa49 	bl	8008b36 <USBD_CtlError>
            err++;
 80086a4:	7afb      	ldrb	r3, [r7, #11]
 80086a6:	3301      	adds	r3, #1
 80086a8:	72fb      	strb	r3, [r7, #11]
          break;
 80086aa:	e007      	b.n	80086bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa41 	bl	8008b36 <USBD_CtlError>
          err++;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	3301      	adds	r3, #1
 80086b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086ba:	bf00      	nop
      }
      break;
 80086bc:	e037      	b.n	800872e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	7c1b      	ldrb	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ce:	f107 0208 	add.w	r2, r7, #8
 80086d2:	4610      	mov	r0, r2
 80086d4:	4798      	blx	r3
 80086d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086d8:	e029      	b.n	800872e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fa2a 	bl	8008b36 <USBD_CtlError>
        err++;
 80086e2:	7afb      	ldrb	r3, [r7, #11]
 80086e4:	3301      	adds	r3, #1
 80086e6:	72fb      	strb	r3, [r7, #11]
      break;
 80086e8:	e021      	b.n	800872e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	7c1b      	ldrb	r3, [r3, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10d      	bne.n	800870e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fa:	f107 0208 	add.w	r2, r7, #8
 80086fe:	4610      	mov	r0, r2
 8008700:	4798      	blx	r3
 8008702:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3301      	adds	r3, #1
 8008708:	2207      	movs	r2, #7
 800870a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800870c:	e00f      	b.n	800872e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fa10 	bl	8008b36 <USBD_CtlError>
        err++;
 8008716:	7afb      	ldrb	r3, [r7, #11]
 8008718:	3301      	adds	r3, #1
 800871a:	72fb      	strb	r3, [r7, #11]
      break;
 800871c:	e007      	b.n	800872e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa08 	bl	8008b36 <USBD_CtlError>
      err++;
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	3301      	adds	r3, #1
 800872a:	72fb      	strb	r3, [r7, #11]
      break;
 800872c:	bf00      	nop
  }

  if (err != 0U)
 800872e:	7afb      	ldrb	r3, [r7, #11]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d11e      	bne.n	8008772 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	88db      	ldrh	r3, [r3, #6]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d016      	beq.n	800876a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800873c:	893b      	ldrh	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00e      	beq.n	8008760 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	88da      	ldrh	r2, [r3, #6]
 8008746:	893b      	ldrh	r3, [r7, #8]
 8008748:	4293      	cmp	r3, r2
 800874a:	bf28      	it	cs
 800874c:	4613      	movcs	r3, r2
 800874e:	b29b      	uxth	r3, r3
 8008750:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008752:	893b      	ldrh	r3, [r7, #8]
 8008754:	461a      	mov	r2, r3
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fa69 	bl	8008c30 <USBD_CtlSendData>
 800875e:	e009      	b.n	8008774 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f9e7 	bl	8008b36 <USBD_CtlError>
 8008768:	e004      	b.n	8008774 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fac1 	bl	8008cf2 <USBD_CtlSendStatus>
 8008770:	e000      	b.n	8008774 <USBD_GetDescriptor+0x2cc>
    return;
 8008772:	bf00      	nop
  }
}
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop

0800877c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	889b      	ldrh	r3, [r3, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d131      	bne.n	80087f2 <USBD_SetAddress+0x76>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	88db      	ldrh	r3, [r3, #6]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d12d      	bne.n	80087f2 <USBD_SetAddress+0x76>
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	885b      	ldrh	r3, [r3, #2]
 800879a:	2b7f      	cmp	r3, #127	@ 0x7f
 800879c:	d829      	bhi.n	80087f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	885b      	ldrh	r3, [r3, #2]
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d104      	bne.n	80087c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f9bc 	bl	8008b36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087be:	e01d      	b.n	80087fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	7bfa      	ldrb	r2, [r7, #15]
 80087c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 ff3b 	bl	8009648 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa8d 	bl	8008cf2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d004      	beq.n	80087e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e6:	e009      	b.n	80087fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f0:	e004      	b.n	80087fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f99e 	bl	8008b36 <USBD_CtlError>
  }
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	885b      	ldrh	r3, [r3, #2]
 8008816:	b2da      	uxtb	r2, r3
 8008818:	4b4e      	ldr	r3, [pc, #312]	@ (8008954 <USBD_SetConfig+0x150>)
 800881a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800881c:	4b4d      	ldr	r3, [pc, #308]	@ (8008954 <USBD_SetConfig+0x150>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d905      	bls.n	8008830 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f985 	bl	8008b36 <USBD_CtlError>
    return USBD_FAIL;
 800882c:	2303      	movs	r3, #3
 800882e:	e08c      	b.n	800894a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d002      	beq.n	8008842 <USBD_SetConfig+0x3e>
 800883c:	2b03      	cmp	r3, #3
 800883e:	d029      	beq.n	8008894 <USBD_SetConfig+0x90>
 8008840:	e075      	b.n	800892e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008842:	4b44      	ldr	r3, [pc, #272]	@ (8008954 <USBD_SetConfig+0x150>)
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d020      	beq.n	800888c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800884a:	4b42      	ldr	r3, [pc, #264]	@ (8008954 <USBD_SetConfig+0x150>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008854:	4b3f      	ldr	r3, [pc, #252]	@ (8008954 <USBD_SetConfig+0x150>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7fe ffcd 	bl	80077fa <USBD_SetClassConfig>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d008      	beq.n	800887c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f962 	bl	8008b36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800887a:	e065      	b.n	8008948 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fa38 	bl	8008cf2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2203      	movs	r2, #3
 8008886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800888a:	e05d      	b.n	8008948 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fa30 	bl	8008cf2 <USBD_CtlSendStatus>
      break;
 8008892:	e059      	b.n	8008948 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008894:	4b2f      	ldr	r3, [pc, #188]	@ (8008954 <USBD_SetConfig+0x150>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d112      	bne.n	80088c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2202      	movs	r2, #2
 80088a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80088a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008954 <USBD_SetConfig+0x150>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ae:	4b29      	ldr	r3, [pc, #164]	@ (8008954 <USBD_SetConfig+0x150>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fe ffbc 	bl	8007832 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fa19 	bl	8008cf2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088c0:	e042      	b.n	8008948 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088c2:	4b24      	ldr	r3, [pc, #144]	@ (8008954 <USBD_SetConfig+0x150>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d02a      	beq.n	8008926 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7fe ffaa 	bl	8007832 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088de:	4b1d      	ldr	r3, [pc, #116]	@ (8008954 <USBD_SetConfig+0x150>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008954 <USBD_SetConfig+0x150>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7fe ff83 	bl	80077fa <USBD_SetClassConfig>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00f      	beq.n	800891e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f918 	bl	8008b36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7fe ff8f 	bl	8007832 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800891c:	e014      	b.n	8008948 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f9e7 	bl	8008cf2 <USBD_CtlSendStatus>
      break;
 8008924:	e010      	b.n	8008948 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9e3 	bl	8008cf2 <USBD_CtlSendStatus>
      break;
 800892c:	e00c      	b.n	8008948 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f900 	bl	8008b36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008936:	4b07      	ldr	r3, [pc, #28]	@ (8008954 <USBD_SetConfig+0x150>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fe ff78 	bl	8007832 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008942:	2303      	movs	r3, #3
 8008944:	73fb      	strb	r3, [r7, #15]
      break;
 8008946:	bf00      	nop
  }

  return ret;
 8008948:	7bfb      	ldrb	r3, [r7, #15]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20000428 	.word	0x20000428

08008958 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	88db      	ldrh	r3, [r3, #6]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d004      	beq.n	8008974 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f8e2 	bl	8008b36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008972:	e023      	b.n	80089bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b02      	cmp	r3, #2
 800897e:	dc02      	bgt.n	8008986 <USBD_GetConfig+0x2e>
 8008980:	2b00      	cmp	r3, #0
 8008982:	dc03      	bgt.n	800898c <USBD_GetConfig+0x34>
 8008984:	e015      	b.n	80089b2 <USBD_GetConfig+0x5a>
 8008986:	2b03      	cmp	r3, #3
 8008988:	d00b      	beq.n	80089a2 <USBD_GetConfig+0x4a>
 800898a:	e012      	b.n	80089b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3308      	adds	r3, #8
 8008996:	2201      	movs	r2, #1
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f948 	bl	8008c30 <USBD_CtlSendData>
        break;
 80089a0:	e00c      	b.n	80089bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3304      	adds	r3, #4
 80089a6:	2201      	movs	r2, #1
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f940 	bl	8008c30 <USBD_CtlSendData>
        break;
 80089b0:	e004      	b.n	80089bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f8be 	bl	8008b36 <USBD_CtlError>
        break;
 80089ba:	bf00      	nop
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d81e      	bhi.n	8008a1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	88db      	ldrh	r3, [r3, #6]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d004      	beq.n	80089ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f8a5 	bl	8008b36 <USBD_CtlError>
        break;
 80089ec:	e01a      	b.n	8008a24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d005      	beq.n	8008a0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f043 0202 	orr.w	r2, r3, #2
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	2202      	movs	r2, #2
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f90c 	bl	8008c30 <USBD_CtlSendData>
      break;
 8008a18:	e004      	b.n	8008a24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f88a 	bl	8008b36 <USBD_CtlError>
      break;
 8008a22:	bf00      	nop
  }
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	885b      	ldrh	r3, [r3, #2]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d107      	bne.n	8008a4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f953 	bl	8008cf2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a4c:	e013      	b.n	8008a76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	885b      	ldrh	r3, [r3, #2]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d10b      	bne.n	8008a6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	889b      	ldrh	r3, [r3, #4]
 8008a5a:	0a1b      	lsrs	r3, r3, #8
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f943 	bl	8008cf2 <USBD_CtlSendStatus>
}
 8008a6c:	e003      	b.n	8008a76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f860 	bl	8008b36 <USBD_CtlError>
}
 8008a76:	bf00      	nop
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d80b      	bhi.n	8008aae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	885b      	ldrh	r3, [r3, #2]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d10c      	bne.n	8008ab8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f923 	bl	8008cf2 <USBD_CtlSendStatus>
      }
      break;
 8008aac:	e004      	b.n	8008ab8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f840 	bl	8008b36 <USBD_CtlError>
      break;
 8008ab6:	e000      	b.n	8008aba <USBD_ClrFeature+0x3c>
      break;
 8008ab8:	bf00      	nop
  }
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	3301      	adds	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f7ff fa3d 	bl	8007f6c <SWAPBYTE>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3301      	adds	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff fa30 	bl	8007f6c <SWAPBYTE>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3301      	adds	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff fa23 	bl	8007f6c <SWAPBYTE>
 8008b26:	4603      	mov	r3, r0
 8008b28:	461a      	mov	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	80da      	strh	r2, [r3, #6]
}
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b40:	2180      	movs	r1, #128	@ 0x80
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fd16 	bl	8009574 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b48:	2100      	movs	r1, #0
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fd12 	bl	8009574 <USBD_LL_StallEP>
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d042      	beq.n	8008bf4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008b72:	6938      	ldr	r0, [r7, #16]
 8008b74:	f000 f842 	bl	8008bfc <USBD_GetLen>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b82:	d808      	bhi.n	8008b96 <USBD_GetString+0x3e>
 8008b84:	6938      	ldr	r0, [r7, #16]
 8008b86:	f000 f839 	bl	8008bfc <USBD_GetLen>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	e001      	b.n	8008b9a <USBD_GetString+0x42>
 8008b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	7812      	ldrb	r2, [r2, #0]
 8008ba8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	3301      	adds	r3, #1
 8008bae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bc0:	e013      	b.n	8008bea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	7812      	ldrb	r2, [r2, #0]
 8008bcc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	613b      	str	r3, [r7, #16]
    idx++;
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bda:	7dfb      	ldrb	r3, [r7, #23]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	4413      	add	r3, r2
 8008be0:	2200      	movs	r2, #0
 8008be2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	3301      	adds	r3, #1
 8008be8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e7      	bne.n	8008bc2 <USBD_GetString+0x6a>
 8008bf2:	e000      	b.n	8008bf6 <USBD_GetString+0x9e>
    return;
 8008bf4:	bf00      	nop
  }
}
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c0c:	e005      	b.n	8008c1a <USBD_GetLen+0x1e>
  {
    len++;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	3301      	adds	r3, #1
 8008c12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	3301      	adds	r3, #1
 8008c18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1f5      	bne.n	8008c0e <USBD_GetLen+0x12>
  }

  return len;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 fd12 	bl	8009686 <USBD_LL_Transmit>

  return USBD_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 fd01 	bl	8009686 <USBD_LL_Transmit>

  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2203      	movs	r2, #3
 8008c9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fd01 	bl	80096c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 fcf0 	bl	80096c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d02:	2300      	movs	r3, #0
 8008d04:	2200      	movs	r2, #0
 8008d06:	2100      	movs	r1, #0
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fcbc 	bl	8009686 <USBD_LL_Transmit>

  return USBD_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2205      	movs	r2, #5
 8008d24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d28:	2300      	movs	r3, #0
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fcca 	bl	80096c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d44:	2200      	movs	r2, #0
 8008d46:	4912      	ldr	r1, [pc, #72]	@ (8008d90 <MX_USB_DEVICE_Init+0x50>)
 8008d48:	4812      	ldr	r0, [pc, #72]	@ (8008d94 <MX_USB_DEVICE_Init+0x54>)
 8008d4a:	f7fe fcd9 	bl	8007700 <USBD_Init>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d54:	f7f8 fdaa 	bl	80018ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d58:	490f      	ldr	r1, [pc, #60]	@ (8008d98 <MX_USB_DEVICE_Init+0x58>)
 8008d5a:	480e      	ldr	r0, [pc, #56]	@ (8008d94 <MX_USB_DEVICE_Init+0x54>)
 8008d5c:	f7fe fd00 	bl	8007760 <USBD_RegisterClass>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d66:	f7f8 fda1 	bl	80018ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d6a:	490c      	ldr	r1, [pc, #48]	@ (8008d9c <MX_USB_DEVICE_Init+0x5c>)
 8008d6c:	4809      	ldr	r0, [pc, #36]	@ (8008d94 <MX_USB_DEVICE_Init+0x54>)
 8008d6e:	f7fe fbf7 	bl	8007560 <USBD_CDC_RegisterInterface>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d78:	f7f8 fd98 	bl	80018ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d7c:	4805      	ldr	r0, [pc, #20]	@ (8008d94 <MX_USB_DEVICE_Init+0x54>)
 8008d7e:	f7fe fd25 	bl	80077cc <USBD_Start>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d88:	f7f8 fd90 	bl	80018ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d8c:	bf00      	nop
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	200000ac 	.word	0x200000ac
 8008d94:	2000042c 	.word	0x2000042c
 8008d98:	20000018 	.word	0x20000018
 8008d9c:	20000098 	.word	0x20000098

08008da0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008da4:	2200      	movs	r2, #0
 8008da6:	4905      	ldr	r1, [pc, #20]	@ (8008dbc <CDC_Init_FS+0x1c>)
 8008da8:	4805      	ldr	r0, [pc, #20]	@ (8008dc0 <CDC_Init_FS+0x20>)
 8008daa:	f7fe fbf3 	bl	8007594 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dae:	4905      	ldr	r1, [pc, #20]	@ (8008dc4 <CDC_Init_FS+0x24>)
 8008db0:	4803      	ldr	r0, [pc, #12]	@ (8008dc0 <CDC_Init_FS+0x20>)
 8008db2:	f7fe fc11 	bl	80075d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008db6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20000f4c 	.word	0x20000f4c
 8008dc0:	2000042c 	.word	0x2000042c
 8008dc4:	2000074c 	.word	0x2000074c

08008dc8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dcc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
 8008de4:	4613      	mov	r3, r2
 8008de6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b23      	cmp	r3, #35	@ 0x23
 8008dec:	d84a      	bhi.n	8008e84 <CDC_Control_FS+0xac>
 8008dee:	a201      	add	r2, pc, #4	@ (adr r2, 8008df4 <CDC_Control_FS+0x1c>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008e85 	.word	0x08008e85
 8008df8:	08008e85 	.word	0x08008e85
 8008dfc:	08008e85 	.word	0x08008e85
 8008e00:	08008e85 	.word	0x08008e85
 8008e04:	08008e85 	.word	0x08008e85
 8008e08:	08008e85 	.word	0x08008e85
 8008e0c:	08008e85 	.word	0x08008e85
 8008e10:	08008e85 	.word	0x08008e85
 8008e14:	08008e85 	.word	0x08008e85
 8008e18:	08008e85 	.word	0x08008e85
 8008e1c:	08008e85 	.word	0x08008e85
 8008e20:	08008e85 	.word	0x08008e85
 8008e24:	08008e85 	.word	0x08008e85
 8008e28:	08008e85 	.word	0x08008e85
 8008e2c:	08008e85 	.word	0x08008e85
 8008e30:	08008e85 	.word	0x08008e85
 8008e34:	08008e85 	.word	0x08008e85
 8008e38:	08008e85 	.word	0x08008e85
 8008e3c:	08008e85 	.word	0x08008e85
 8008e40:	08008e85 	.word	0x08008e85
 8008e44:	08008e85 	.word	0x08008e85
 8008e48:	08008e85 	.word	0x08008e85
 8008e4c:	08008e85 	.word	0x08008e85
 8008e50:	08008e85 	.word	0x08008e85
 8008e54:	08008e85 	.word	0x08008e85
 8008e58:	08008e85 	.word	0x08008e85
 8008e5c:	08008e85 	.word	0x08008e85
 8008e60:	08008e85 	.word	0x08008e85
 8008e64:	08008e85 	.word	0x08008e85
 8008e68:	08008e85 	.word	0x08008e85
 8008e6c:	08008e85 	.word	0x08008e85
 8008e70:	08008e85 	.word	0x08008e85
 8008e74:	08008e85 	.word	0x08008e85
 8008e78:	08008e85 	.word	0x08008e85
 8008e7c:	08008e85 	.word	0x08008e85
 8008e80:	08008e85 	.word	0x08008e85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e84:	bf00      	nop
  }

  return (USBD_OK);
 8008e86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
// Замените обработчик приема:
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf); // Должно быть ДО копирования!
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	4811      	ldr	r0, [pc, #68]	@ (8008ee8 <CDC_Receive_FS+0x54>)
 8008ea2:	f7fe fb99 	bl	80075d8 <USBD_CDC_SetRxBuffer>

  if (*Len > 0 && *Len < APP_RX_DATA_SIZE) {
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d013      	beq.n	8008ed6 <CDC_Receive_FS+0x42>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eb6:	d20e      	bcs.n	8008ed6 <CDC_Receive_FS+0x42>
      memcpy((void*)usb_rx_buffer, Buf, *Len);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	480a      	ldr	r0, [pc, #40]	@ (8008eec <CDC_Receive_FS+0x58>)
 8008ec2:	f001 febe 	bl	800ac42 <memcpy>
      usb_rx_buffer[*Len] = 0;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a08      	ldr	r2, [pc, #32]	@ (8008eec <CDC_Receive_FS+0x58>)
 8008ecc:	2100      	movs	r1, #0
 8008ece:	54d1      	strb	r1, [r2, r3]
      new_data_received = 1;
 8008ed0:	4b07      	ldr	r3, [pc, #28]	@ (8008ef0 <CDC_Receive_FS+0x5c>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	701a      	strb	r2, [r3, #0]
  }

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ed6:	4804      	ldr	r0, [pc, #16]	@ (8008ee8 <CDC_Receive_FS+0x54>)
 8008ed8:	f7fe fbdc 	bl	8007694 <USBD_CDC_ReceivePacket>
  return USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	2000042c 	.word	0x2000042c
 8008eec:	20000708 	.word	0x20000708
 8008ef0:	20000748 	.word	0x20000748

08008ef4 <CDC_Transmit_FS>:
  *
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len) {
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f04:	4b10      	ldr	r3, [pc, #64]	@ (8008f48 <CDC_Transmit_FS+0x54>)
 8008f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f0a:	60bb      	str	r3, [r7, #8]

    if (hcdc->TxState != 0) {
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e011      	b.n	8008f3e <CDC_Transmit_FS+0x4a>
    }

    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f1a:	887b      	ldrh	r3, [r7, #2]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	4809      	ldr	r0, [pc, #36]	@ (8008f48 <CDC_Transmit_FS+0x54>)
 8008f22:	f7fe fb37 	bl	8007594 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f26:	4808      	ldr	r0, [pc, #32]	@ (8008f48 <CDC_Transmit_FS+0x54>)
 8008f28:	f7fe fb74 	bl	8007614 <USBD_CDC_TransmitPacket>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]

    // Добавьте небольшую задержку, если нужно
    if (result == USBD_OK) {
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <CDC_Transmit_FS+0x48>
        HAL_Delay(1);
 8008f36:	2001      	movs	r0, #1
 8008f38:	f7f8 ff48 	bl	8001dcc <HAL_Delay>
    }

    return result;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	2000042c 	.word	0x2000042c

08008f4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	4613      	mov	r3, r2
 8008f58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
	...

08008f70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	6039      	str	r1, [r7, #0]
 8008f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2212      	movs	r2, #18
 8008f80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f82:	4b03      	ldr	r3, [pc, #12]	@ (8008f90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	200000c8 	.word	0x200000c8

08008f94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2204      	movs	r2, #4
 8008fa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fa6:	4b03      	ldr	r3, [pc, #12]	@ (8008fb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	200000dc 	.word	0x200000dc

08008fb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	6039      	str	r1, [r7, #0]
 8008fc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	4907      	ldr	r1, [pc, #28]	@ (8008fec <USBD_FS_ProductStrDescriptor+0x34>)
 8008fce:	4808      	ldr	r0, [pc, #32]	@ (8008ff0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fd0:	f7ff fdc2 	bl	8008b58 <USBD_GetString>
 8008fd4:	e004      	b.n	8008fe0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4904      	ldr	r1, [pc, #16]	@ (8008fec <USBD_FS_ProductStrDescriptor+0x34>)
 8008fda:	4805      	ldr	r0, [pc, #20]	@ (8008ff0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fdc:	f7ff fdbc 	bl	8008b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe0:	4b02      	ldr	r3, [pc, #8]	@ (8008fec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	2000174c 	.word	0x2000174c
 8008ff0:	0800ea88 	.word	0x0800ea88

08008ff4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	4904      	ldr	r1, [pc, #16]	@ (8009014 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009004:	4804      	ldr	r0, [pc, #16]	@ (8009018 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009006:	f7ff fda7 	bl	8008b58 <USBD_GetString>
  return USBD_StrDesc;
 800900a:	4b02      	ldr	r3, [pc, #8]	@ (8009014 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	2000174c 	.word	0x2000174c
 8009018:	0800eaa0 	.word	0x0800eaa0

0800901c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	6039      	str	r1, [r7, #0]
 8009026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	221a      	movs	r2, #26
 800902c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800902e:	f000 f843 	bl	80090b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009032:	4b02      	ldr	r3, [pc, #8]	@ (800903c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	200000e0 	.word	0x200000e0

08009040 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	4603      	mov	r3, r0
 8009048:	6039      	str	r1, [r7, #0]
 800904a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d105      	bne.n	800905e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	4907      	ldr	r1, [pc, #28]	@ (8009074 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009056:	4808      	ldr	r0, [pc, #32]	@ (8009078 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009058:	f7ff fd7e 	bl	8008b58 <USBD_GetString>
 800905c:	e004      	b.n	8009068 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	4904      	ldr	r1, [pc, #16]	@ (8009074 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009062:	4805      	ldr	r0, [pc, #20]	@ (8009078 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009064:	f7ff fd78 	bl	8008b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009068:	4b02      	ldr	r3, [pc, #8]	@ (8009074 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	2000174c 	.word	0x2000174c
 8009078:	0800eab4 	.word	0x0800eab4

0800907c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d105      	bne.n	800909a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4907      	ldr	r1, [pc, #28]	@ (80090b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009092:	4808      	ldr	r0, [pc, #32]	@ (80090b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009094:	f7ff fd60 	bl	8008b58 <USBD_GetString>
 8009098:	e004      	b.n	80090a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4904      	ldr	r1, [pc, #16]	@ (80090b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800909e:	4805      	ldr	r0, [pc, #20]	@ (80090b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090a0:	f7ff fd5a 	bl	8008b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090a4:	4b02      	ldr	r3, [pc, #8]	@ (80090b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	2000174c 	.word	0x2000174c
 80090b4:	0800eac0 	.word	0x0800eac0

080090b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090be:	4b0f      	ldr	r3, [pc, #60]	@ (80090fc <Get_SerialNum+0x44>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009100 <Get_SerialNum+0x48>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009104 <Get_SerialNum+0x4c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4413      	add	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d009      	beq.n	80090f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090de:	2208      	movs	r2, #8
 80090e0:	4909      	ldr	r1, [pc, #36]	@ (8009108 <Get_SerialNum+0x50>)
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 f814 	bl	8009110 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090e8:	2204      	movs	r2, #4
 80090ea:	4908      	ldr	r1, [pc, #32]	@ (800910c <Get_SerialNum+0x54>)
 80090ec:	68b8      	ldr	r0, [r7, #8]
 80090ee:	f000 f80f 	bl	8009110 <IntToUnicode>
  }
}
 80090f2:	bf00      	nop
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	1fff7a10 	.word	0x1fff7a10
 8009100:	1fff7a14 	.word	0x1fff7a14
 8009104:	1fff7a18 	.word	0x1fff7a18
 8009108:	200000e2 	.word	0x200000e2
 800910c:	200000f2 	.word	0x200000f2

08009110 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	4613      	mov	r3, r2
 800911c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009122:	2300      	movs	r3, #0
 8009124:	75fb      	strb	r3, [r7, #23]
 8009126:	e027      	b.n	8009178 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	0f1b      	lsrs	r3, r3, #28
 800912c:	2b09      	cmp	r3, #9
 800912e:	d80b      	bhi.n	8009148 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	0f1b      	lsrs	r3, r3, #28
 8009134:	b2da      	uxtb	r2, r3
 8009136:	7dfb      	ldrb	r3, [r7, #23]
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4619      	mov	r1, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	440b      	add	r3, r1
 8009140:	3230      	adds	r2, #48	@ 0x30
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	e00a      	b.n	800915e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	0f1b      	lsrs	r3, r3, #28
 800914c:	b2da      	uxtb	r2, r3
 800914e:	7dfb      	ldrb	r3, [r7, #23]
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	4619      	mov	r1, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	440b      	add	r3, r1
 8009158:	3237      	adds	r2, #55	@ 0x37
 800915a:	b2d2      	uxtb	r2, r2
 800915c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	3301      	adds	r3, #1
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	4413      	add	r3, r2
 800916e:	2200      	movs	r2, #0
 8009170:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	3301      	adds	r3, #1
 8009176:	75fb      	strb	r3, [r7, #23]
 8009178:	7dfa      	ldrb	r2, [r7, #23]
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	429a      	cmp	r2, r3
 800917e:	d3d3      	bcc.n	8009128 <IntToUnicode+0x18>
  }
}
 8009180:	bf00      	nop
 8009182:	bf00      	nop
 8009184:	371c      	adds	r7, #28
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
	...

08009190 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08a      	sub	sp, #40	@ 0x28
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009198:	f107 0314 	add.w	r3, r7, #20
 800919c:	2200      	movs	r2, #0
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	605a      	str	r2, [r3, #4]
 80091a2:	609a      	str	r2, [r3, #8]
 80091a4:	60da      	str	r2, [r3, #12]
 80091a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091b0:	d13a      	bne.n	8009228 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091b2:	2300      	movs	r3, #0
 80091b4:	613b      	str	r3, [r7, #16]
 80091b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009230 <HAL_PCD_MspInit+0xa0>)
 80091b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ba:	4a1d      	ldr	r2, [pc, #116]	@ (8009230 <HAL_PCD_MspInit+0xa0>)
 80091bc:	f043 0301 	orr.w	r3, r3, #1
 80091c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80091c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009230 <HAL_PCD_MspInit+0xa0>)
 80091c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	613b      	str	r3, [r7, #16]
 80091cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80091ce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80091d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091d4:	2302      	movs	r3, #2
 80091d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091dc:	2303      	movs	r3, #3
 80091de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091e0:	230a      	movs	r3, #10
 80091e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091e4:	f107 0314 	add.w	r3, r7, #20
 80091e8:	4619      	mov	r1, r3
 80091ea:	4812      	ldr	r0, [pc, #72]	@ (8009234 <HAL_PCD_MspInit+0xa4>)
 80091ec:	f7f8 ffb6 	bl	800215c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009230 <HAL_PCD_MspInit+0xa0>)
 80091f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091f4:	4a0e      	ldr	r2, [pc, #56]	@ (8009230 <HAL_PCD_MspInit+0xa0>)
 80091f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091fa:	6353      	str	r3, [r2, #52]	@ 0x34
 80091fc:	2300      	movs	r3, #0
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	4b0b      	ldr	r3, [pc, #44]	@ (8009230 <HAL_PCD_MspInit+0xa0>)
 8009202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009204:	4a0a      	ldr	r2, [pc, #40]	@ (8009230 <HAL_PCD_MspInit+0xa0>)
 8009206:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800920a:	6453      	str	r3, [r2, #68]	@ 0x44
 800920c:	4b08      	ldr	r3, [pc, #32]	@ (8009230 <HAL_PCD_MspInit+0xa0>)
 800920e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009218:	2200      	movs	r2, #0
 800921a:	2100      	movs	r1, #0
 800921c:	2043      	movs	r0, #67	@ 0x43
 800921e:	f7f8 fed4 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009222:	2043      	movs	r0, #67	@ 0x43
 8009224:	f7f8 feed 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009228:	bf00      	nop
 800922a:	3728      	adds	r7, #40	@ 0x28
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	40023800 	.word	0x40023800
 8009234:	40020000 	.word	0x40020000

08009238 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800924c:	4619      	mov	r1, r3
 800924e:	4610      	mov	r0, r2
 8009250:	f7fe fb09 	bl	8007866 <USBD_LL_SetupStage>
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800926e:	78fa      	ldrb	r2, [r7, #3]
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	4613      	mov	r3, r2
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	440b      	add	r3, r1
 800927c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	78fb      	ldrb	r3, [r7, #3]
 8009284:	4619      	mov	r1, r3
 8009286:	f7fe fb43 	bl	8007910 <USBD_LL_DataOutStage>
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b082      	sub	sp, #8
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	460b      	mov	r3, r1
 800929c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80092a4:	78fa      	ldrb	r2, [r7, #3]
 80092a6:	6879      	ldr	r1, [r7, #4]
 80092a8:	4613      	mov	r3, r2
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	4413      	add	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	440b      	add	r3, r1
 80092b2:	3320      	adds	r3, #32
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	78fb      	ldrb	r3, [r7, #3]
 80092b8:	4619      	mov	r1, r3
 80092ba:	f7fe fbe5 	bl	8007a88 <USBD_LL_DataInStage>
}
 80092be:	bf00      	nop
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fe fd29 	bl	8007d2c <USBD_LL_SOF>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092ea:	2301      	movs	r3, #1
 80092ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	79db      	ldrb	r3, [r3, #7]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d102      	bne.n	80092fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
 80092fa:	e008      	b.n	800930e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	79db      	ldrb	r3, [r3, #7]
 8009300:	2b02      	cmp	r3, #2
 8009302:	d102      	bne.n	800930a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
 8009308:	e001      	b.n	800930e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800930a:	f7f8 facf 	bl	80018ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009314:	7bfa      	ldrb	r2, [r7, #15]
 8009316:	4611      	mov	r1, r2
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe fcc3 	bl	8007ca4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009324:	4618      	mov	r0, r3
 8009326:	f7fe fc6a 	bl	8007bfe <USBD_LL_Reset>
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009342:	4618      	mov	r0, r3
 8009344:	f7fe fcbe 	bl	8007cc4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	6812      	ldr	r2, [r2, #0]
 8009356:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800935a:	f043 0301 	orr.w	r3, r3, #1
 800935e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	7adb      	ldrb	r3, [r3, #11]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009368:	4b04      	ldr	r3, [pc, #16]	@ (800937c <HAL_PCD_SuspendCallback+0x48>)
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	4a03      	ldr	r2, [pc, #12]	@ (800937c <HAL_PCD_SuspendCallback+0x48>)
 800936e:	f043 0306 	orr.w	r3, r3, #6
 8009372:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	e000ed00 	.word	0xe000ed00

08009380 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fcb4 	bl	8007cfc <USBD_LL_Resume>
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093ae:	78fa      	ldrb	r2, [r7, #3]
 80093b0:	4611      	mov	r1, r2
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe fd0c 	bl	8007dd0 <USBD_LL_IsoOUTIncomplete>
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093d2:	78fa      	ldrb	r2, [r7, #3]
 80093d4:	4611      	mov	r1, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe fcc8 	bl	8007d6c <USBD_LL_IsoINIncomplete>
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fd1e 	bl	8007e34 <USBD_LL_DevConnected>
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe fd1b 	bl	8007e4a <USBD_LL_DevDisconnected>
}
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d13c      	bne.n	80094a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800942c:	4a20      	ldr	r2, [pc, #128]	@ (80094b0 <USBD_LL_Init+0x94>)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a1e      	ldr	r2, [pc, #120]	@ (80094b0 <USBD_LL_Init+0x94>)
 8009438:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800943c:	4b1c      	ldr	r3, [pc, #112]	@ (80094b0 <USBD_LL_Init+0x94>)
 800943e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009442:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009444:	4b1a      	ldr	r3, [pc, #104]	@ (80094b0 <USBD_LL_Init+0x94>)
 8009446:	2204      	movs	r2, #4
 8009448:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800944a:	4b19      	ldr	r3, [pc, #100]	@ (80094b0 <USBD_LL_Init+0x94>)
 800944c:	2202      	movs	r2, #2
 800944e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009450:	4b17      	ldr	r3, [pc, #92]	@ (80094b0 <USBD_LL_Init+0x94>)
 8009452:	2200      	movs	r2, #0
 8009454:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009456:	4b16      	ldr	r3, [pc, #88]	@ (80094b0 <USBD_LL_Init+0x94>)
 8009458:	2202      	movs	r2, #2
 800945a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800945c:	4b14      	ldr	r3, [pc, #80]	@ (80094b0 <USBD_LL_Init+0x94>)
 800945e:	2200      	movs	r2, #0
 8009460:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009462:	4b13      	ldr	r3, [pc, #76]	@ (80094b0 <USBD_LL_Init+0x94>)
 8009464:	2200      	movs	r2, #0
 8009466:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009468:	4b11      	ldr	r3, [pc, #68]	@ (80094b0 <USBD_LL_Init+0x94>)
 800946a:	2200      	movs	r2, #0
 800946c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800946e:	4b10      	ldr	r3, [pc, #64]	@ (80094b0 <USBD_LL_Init+0x94>)
 8009470:	2200      	movs	r2, #0
 8009472:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009474:	4b0e      	ldr	r3, [pc, #56]	@ (80094b0 <USBD_LL_Init+0x94>)
 8009476:	2200      	movs	r2, #0
 8009478:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800947a:	480d      	ldr	r0, [pc, #52]	@ (80094b0 <USBD_LL_Init+0x94>)
 800947c:	f7f9 f823 	bl	80024c6 <HAL_PCD_Init>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009486:	f7f8 fa11 	bl	80018ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800948a:	2180      	movs	r1, #128	@ 0x80
 800948c:	4808      	ldr	r0, [pc, #32]	@ (80094b0 <USBD_LL_Init+0x94>)
 800948e:	f7fa fa50 	bl	8003932 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009492:	2240      	movs	r2, #64	@ 0x40
 8009494:	2100      	movs	r1, #0
 8009496:	4806      	ldr	r0, [pc, #24]	@ (80094b0 <USBD_LL_Init+0x94>)
 8009498:	f7fa fa04 	bl	80038a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800949c:	2280      	movs	r2, #128	@ 0x80
 800949e:	2101      	movs	r1, #1
 80094a0:	4803      	ldr	r0, [pc, #12]	@ (80094b0 <USBD_LL_Init+0x94>)
 80094a2:	f7fa f9ff 	bl	80038a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	2000194c 	.word	0x2000194c

080094b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7f9 f90a 	bl	80026e4 <HAL_PCD_Start>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 f942 	bl	8009760 <USBD_Get_USB_Status>
 80094dc:	4603      	mov	r3, r0
 80094de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	4608      	mov	r0, r1
 80094f4:	4611      	mov	r1, r2
 80094f6:	461a      	mov	r2, r3
 80094f8:	4603      	mov	r3, r0
 80094fa:	70fb      	strb	r3, [r7, #3]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70bb      	strb	r3, [r7, #2]
 8009500:	4613      	mov	r3, r2
 8009502:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009512:	78bb      	ldrb	r3, [r7, #2]
 8009514:	883a      	ldrh	r2, [r7, #0]
 8009516:	78f9      	ldrb	r1, [r7, #3]
 8009518:	f7f9 fdde 	bl	80030d8 <HAL_PCD_EP_Open>
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	4618      	mov	r0, r3
 8009524:	f000 f91c 	bl	8009760 <USBD_Get_USB_Status>
 8009528:	4603      	mov	r3, r0
 800952a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952c:	7bbb      	ldrb	r3, [r7, #14]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009550:	78fa      	ldrb	r2, [r7, #3]
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f7f9 fe29 	bl	80031ac <HAL_PCD_EP_Close>
 800955a:	4603      	mov	r3, r0
 800955c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	4618      	mov	r0, r3
 8009562:	f000 f8fd 	bl	8009760 <USBD_Get_USB_Status>
 8009566:	4603      	mov	r3, r0
 8009568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956a:	7bbb      	ldrb	r3, [r7, #14]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800958e:	78fa      	ldrb	r2, [r7, #3]
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7f9 fee1 	bl	800335a <HAL_PCD_EP_SetStall>
 8009598:	4603      	mov	r3, r0
 800959a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 f8de 	bl	8009760 <USBD_Get_USB_Status>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095cc:	78fa      	ldrb	r2, [r7, #3]
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7f9 ff25 	bl	8003420 <HAL_PCD_EP_ClrStall>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 f8bf 	bl	8009760 <USBD_Get_USB_Status>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009602:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009608:	2b00      	cmp	r3, #0
 800960a:	da0b      	bge.n	8009624 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009612:	68f9      	ldr	r1, [r7, #12]
 8009614:	4613      	mov	r3, r2
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	440b      	add	r3, r1
 800961e:	3316      	adds	r3, #22
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	e00b      	b.n	800963c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800962a:	68f9      	ldr	r1, [r7, #12]
 800962c:	4613      	mov	r3, r2
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800963a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009662:	78fa      	ldrb	r2, [r7, #3]
 8009664:	4611      	mov	r1, r2
 8009666:	4618      	mov	r0, r3
 8009668:	f7f9 fd12 	bl	8003090 <HAL_PCD_SetAddress>
 800966c:	4603      	mov	r3, r0
 800966e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 f874 	bl	8009760 <USBD_Get_USB_Status>
 8009678:	4603      	mov	r3, r0
 800967a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800967c:	7bbb      	ldrb	r3, [r7, #14]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b086      	sub	sp, #24
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	603b      	str	r3, [r7, #0]
 8009692:	460b      	mov	r3, r1
 8009694:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096a4:	7af9      	ldrb	r1, [r7, #11]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	f7f9 fe1c 	bl	80032e6 <HAL_PCD_EP_Transmit>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 f853 	bl	8009760 <USBD_Get_USB_Status>
 80096ba:	4603      	mov	r3, r0
 80096bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096be:	7dbb      	ldrb	r3, [r7, #22]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	607a      	str	r2, [r7, #4]
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	460b      	mov	r3, r1
 80096d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096e6:	7af9      	ldrb	r1, [r7, #11]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	f7f9 fda8 	bl	8003240 <HAL_PCD_EP_Receive>
 80096f0:	4603      	mov	r3, r0
 80096f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 f832 	bl	8009760 <USBD_Get_USB_Status>
 80096fc:	4603      	mov	r3, r0
 80096fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009700:	7dbb      	ldrb	r3, [r7, #22]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3718      	adds	r7, #24
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b082      	sub	sp, #8
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	460b      	mov	r3, r1
 8009714:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800971c:	78fa      	ldrb	r2, [r7, #3]
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f7f9 fdc8 	bl	80032b6 <HAL_PCD_EP_GetRxCount>
 8009726:	4603      	mov	r3, r0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009738:	4b03      	ldr	r3, [pc, #12]	@ (8009748 <USBD_static_malloc+0x18>)
}
 800973a:	4618      	mov	r0, r3
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20001e30 	.word	0x20001e30

0800974c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]

}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	2b03      	cmp	r3, #3
 8009772:	d817      	bhi.n	80097a4 <USBD_Get_USB_Status+0x44>
 8009774:	a201      	add	r2, pc, #4	@ (adr r2, 800977c <USBD_Get_USB_Status+0x1c>)
 8009776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977a:	bf00      	nop
 800977c:	0800978d 	.word	0x0800978d
 8009780:	08009793 	.word	0x08009793
 8009784:	08009799 	.word	0x08009799
 8009788:	0800979f 	.word	0x0800979f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
    break;
 8009790:	e00b      	b.n	80097aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009792:	2303      	movs	r3, #3
 8009794:	73fb      	strb	r3, [r7, #15]
    break;
 8009796:	e008      	b.n	80097aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009798:	2301      	movs	r3, #1
 800979a:	73fb      	strb	r3, [r7, #15]
    break;
 800979c:	e005      	b.n	80097aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800979e:	2303      	movs	r3, #3
 80097a0:	73fb      	strb	r3, [r7, #15]
    break;
 80097a2:	e002      	b.n	80097aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097a4:	2303      	movs	r3, #3
 80097a6:	73fb      	strb	r3, [r7, #15]
    break;
 80097a8:	bf00      	nop
  }
  return usb_status;
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <atoi>:
 80097b8:	220a      	movs	r2, #10
 80097ba:	2100      	movs	r1, #0
 80097bc:	f000 b87c 	b.w	80098b8 <strtol>

080097c0 <_strtol_l.isra.0>:
 80097c0:	2b24      	cmp	r3, #36	@ 0x24
 80097c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c6:	4686      	mov	lr, r0
 80097c8:	4690      	mov	r8, r2
 80097ca:	d801      	bhi.n	80097d0 <_strtol_l.isra.0+0x10>
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d106      	bne.n	80097de <_strtol_l.isra.0+0x1e>
 80097d0:	f001 fa0a 	bl	800abe8 <__errno>
 80097d4:	2316      	movs	r3, #22
 80097d6:	6003      	str	r3, [r0, #0]
 80097d8:	2000      	movs	r0, #0
 80097da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097de:	4834      	ldr	r0, [pc, #208]	@ (80098b0 <_strtol_l.isra.0+0xf0>)
 80097e0:	460d      	mov	r5, r1
 80097e2:	462a      	mov	r2, r5
 80097e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097e8:	5d06      	ldrb	r6, [r0, r4]
 80097ea:	f016 0608 	ands.w	r6, r6, #8
 80097ee:	d1f8      	bne.n	80097e2 <_strtol_l.isra.0+0x22>
 80097f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80097f2:	d110      	bne.n	8009816 <_strtol_l.isra.0+0x56>
 80097f4:	782c      	ldrb	r4, [r5, #0]
 80097f6:	2601      	movs	r6, #1
 80097f8:	1c95      	adds	r5, r2, #2
 80097fa:	f033 0210 	bics.w	r2, r3, #16
 80097fe:	d115      	bne.n	800982c <_strtol_l.isra.0+0x6c>
 8009800:	2c30      	cmp	r4, #48	@ 0x30
 8009802:	d10d      	bne.n	8009820 <_strtol_l.isra.0+0x60>
 8009804:	782a      	ldrb	r2, [r5, #0]
 8009806:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800980a:	2a58      	cmp	r2, #88	@ 0x58
 800980c:	d108      	bne.n	8009820 <_strtol_l.isra.0+0x60>
 800980e:	786c      	ldrb	r4, [r5, #1]
 8009810:	3502      	adds	r5, #2
 8009812:	2310      	movs	r3, #16
 8009814:	e00a      	b.n	800982c <_strtol_l.isra.0+0x6c>
 8009816:	2c2b      	cmp	r4, #43	@ 0x2b
 8009818:	bf04      	itt	eq
 800981a:	782c      	ldrbeq	r4, [r5, #0]
 800981c:	1c95      	addeq	r5, r2, #2
 800981e:	e7ec      	b.n	80097fa <_strtol_l.isra.0+0x3a>
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1f6      	bne.n	8009812 <_strtol_l.isra.0+0x52>
 8009824:	2c30      	cmp	r4, #48	@ 0x30
 8009826:	bf14      	ite	ne
 8009828:	230a      	movne	r3, #10
 800982a:	2308      	moveq	r3, #8
 800982c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009830:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009834:	2200      	movs	r2, #0
 8009836:	fbbc f9f3 	udiv	r9, ip, r3
 800983a:	4610      	mov	r0, r2
 800983c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009840:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009844:	2f09      	cmp	r7, #9
 8009846:	d80f      	bhi.n	8009868 <_strtol_l.isra.0+0xa8>
 8009848:	463c      	mov	r4, r7
 800984a:	42a3      	cmp	r3, r4
 800984c:	dd1b      	ble.n	8009886 <_strtol_l.isra.0+0xc6>
 800984e:	1c57      	adds	r7, r2, #1
 8009850:	d007      	beq.n	8009862 <_strtol_l.isra.0+0xa2>
 8009852:	4581      	cmp	r9, r0
 8009854:	d314      	bcc.n	8009880 <_strtol_l.isra.0+0xc0>
 8009856:	d101      	bne.n	800985c <_strtol_l.isra.0+0x9c>
 8009858:	45a2      	cmp	sl, r4
 800985a:	db11      	blt.n	8009880 <_strtol_l.isra.0+0xc0>
 800985c:	fb00 4003 	mla	r0, r0, r3, r4
 8009860:	2201      	movs	r2, #1
 8009862:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009866:	e7eb      	b.n	8009840 <_strtol_l.isra.0+0x80>
 8009868:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800986c:	2f19      	cmp	r7, #25
 800986e:	d801      	bhi.n	8009874 <_strtol_l.isra.0+0xb4>
 8009870:	3c37      	subs	r4, #55	@ 0x37
 8009872:	e7ea      	b.n	800984a <_strtol_l.isra.0+0x8a>
 8009874:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009878:	2f19      	cmp	r7, #25
 800987a:	d804      	bhi.n	8009886 <_strtol_l.isra.0+0xc6>
 800987c:	3c57      	subs	r4, #87	@ 0x57
 800987e:	e7e4      	b.n	800984a <_strtol_l.isra.0+0x8a>
 8009880:	f04f 32ff 	mov.w	r2, #4294967295
 8009884:	e7ed      	b.n	8009862 <_strtol_l.isra.0+0xa2>
 8009886:	1c53      	adds	r3, r2, #1
 8009888:	d108      	bne.n	800989c <_strtol_l.isra.0+0xdc>
 800988a:	2322      	movs	r3, #34	@ 0x22
 800988c:	f8ce 3000 	str.w	r3, [lr]
 8009890:	4660      	mov	r0, ip
 8009892:	f1b8 0f00 	cmp.w	r8, #0
 8009896:	d0a0      	beq.n	80097da <_strtol_l.isra.0+0x1a>
 8009898:	1e69      	subs	r1, r5, #1
 800989a:	e006      	b.n	80098aa <_strtol_l.isra.0+0xea>
 800989c:	b106      	cbz	r6, 80098a0 <_strtol_l.isra.0+0xe0>
 800989e:	4240      	negs	r0, r0
 80098a0:	f1b8 0f00 	cmp.w	r8, #0
 80098a4:	d099      	beq.n	80097da <_strtol_l.isra.0+0x1a>
 80098a6:	2a00      	cmp	r2, #0
 80098a8:	d1f6      	bne.n	8009898 <_strtol_l.isra.0+0xd8>
 80098aa:	f8c8 1000 	str.w	r1, [r8]
 80098ae:	e794      	b.n	80097da <_strtol_l.isra.0+0x1a>
 80098b0:	0800eaf5 	.word	0x0800eaf5

080098b4 <_strtol_r>:
 80098b4:	f7ff bf84 	b.w	80097c0 <_strtol_l.isra.0>

080098b8 <strtol>:
 80098b8:	4613      	mov	r3, r2
 80098ba:	460a      	mov	r2, r1
 80098bc:	4601      	mov	r1, r0
 80098be:	4802      	ldr	r0, [pc, #8]	@ (80098c8 <strtol+0x10>)
 80098c0:	6800      	ldr	r0, [r0, #0]
 80098c2:	f7ff bf7d 	b.w	80097c0 <_strtol_l.isra.0>
 80098c6:	bf00      	nop
 80098c8:	20000108 	.word	0x20000108

080098cc <__cvt>:
 80098cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098d0:	ec57 6b10 	vmov	r6, r7, d0
 80098d4:	2f00      	cmp	r7, #0
 80098d6:	460c      	mov	r4, r1
 80098d8:	4619      	mov	r1, r3
 80098da:	463b      	mov	r3, r7
 80098dc:	bfbb      	ittet	lt
 80098de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80098e2:	461f      	movlt	r7, r3
 80098e4:	2300      	movge	r3, #0
 80098e6:	232d      	movlt	r3, #45	@ 0x2d
 80098e8:	700b      	strb	r3, [r1, #0]
 80098ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80098f0:	4691      	mov	r9, r2
 80098f2:	f023 0820 	bic.w	r8, r3, #32
 80098f6:	bfbc      	itt	lt
 80098f8:	4632      	movlt	r2, r6
 80098fa:	4616      	movlt	r6, r2
 80098fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009900:	d005      	beq.n	800990e <__cvt+0x42>
 8009902:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009906:	d100      	bne.n	800990a <__cvt+0x3e>
 8009908:	3401      	adds	r4, #1
 800990a:	2102      	movs	r1, #2
 800990c:	e000      	b.n	8009910 <__cvt+0x44>
 800990e:	2103      	movs	r1, #3
 8009910:	ab03      	add	r3, sp, #12
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	ab02      	add	r3, sp, #8
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	ec47 6b10 	vmov	d0, r6, r7
 800991c:	4653      	mov	r3, sl
 800991e:	4622      	mov	r2, r4
 8009920:	f001 fa2e 	bl	800ad80 <_dtoa_r>
 8009924:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009928:	4605      	mov	r5, r0
 800992a:	d119      	bne.n	8009960 <__cvt+0x94>
 800992c:	f019 0f01 	tst.w	r9, #1
 8009930:	d00e      	beq.n	8009950 <__cvt+0x84>
 8009932:	eb00 0904 	add.w	r9, r0, r4
 8009936:	2200      	movs	r2, #0
 8009938:	2300      	movs	r3, #0
 800993a:	4630      	mov	r0, r6
 800993c:	4639      	mov	r1, r7
 800993e:	f7f7 f8c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009942:	b108      	cbz	r0, 8009948 <__cvt+0x7c>
 8009944:	f8cd 900c 	str.w	r9, [sp, #12]
 8009948:	2230      	movs	r2, #48	@ 0x30
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	454b      	cmp	r3, r9
 800994e:	d31e      	bcc.n	800998e <__cvt+0xc2>
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009954:	1b5b      	subs	r3, r3, r5
 8009956:	4628      	mov	r0, r5
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	b004      	add	sp, #16
 800995c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009960:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009964:	eb00 0904 	add.w	r9, r0, r4
 8009968:	d1e5      	bne.n	8009936 <__cvt+0x6a>
 800996a:	7803      	ldrb	r3, [r0, #0]
 800996c:	2b30      	cmp	r3, #48	@ 0x30
 800996e:	d10a      	bne.n	8009986 <__cvt+0xba>
 8009970:	2200      	movs	r2, #0
 8009972:	2300      	movs	r3, #0
 8009974:	4630      	mov	r0, r6
 8009976:	4639      	mov	r1, r7
 8009978:	f7f7 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800997c:	b918      	cbnz	r0, 8009986 <__cvt+0xba>
 800997e:	f1c4 0401 	rsb	r4, r4, #1
 8009982:	f8ca 4000 	str.w	r4, [sl]
 8009986:	f8da 3000 	ldr.w	r3, [sl]
 800998a:	4499      	add	r9, r3
 800998c:	e7d3      	b.n	8009936 <__cvt+0x6a>
 800998e:	1c59      	adds	r1, r3, #1
 8009990:	9103      	str	r1, [sp, #12]
 8009992:	701a      	strb	r2, [r3, #0]
 8009994:	e7d9      	b.n	800994a <__cvt+0x7e>

08009996 <__exponent>:
 8009996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009998:	2900      	cmp	r1, #0
 800999a:	bfba      	itte	lt
 800999c:	4249      	neglt	r1, r1
 800999e:	232d      	movlt	r3, #45	@ 0x2d
 80099a0:	232b      	movge	r3, #43	@ 0x2b
 80099a2:	2909      	cmp	r1, #9
 80099a4:	7002      	strb	r2, [r0, #0]
 80099a6:	7043      	strb	r3, [r0, #1]
 80099a8:	dd29      	ble.n	80099fe <__exponent+0x68>
 80099aa:	f10d 0307 	add.w	r3, sp, #7
 80099ae:	461d      	mov	r5, r3
 80099b0:	270a      	movs	r7, #10
 80099b2:	461a      	mov	r2, r3
 80099b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80099b8:	fb07 1416 	mls	r4, r7, r6, r1
 80099bc:	3430      	adds	r4, #48	@ 0x30
 80099be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80099c2:	460c      	mov	r4, r1
 80099c4:	2c63      	cmp	r4, #99	@ 0x63
 80099c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80099ca:	4631      	mov	r1, r6
 80099cc:	dcf1      	bgt.n	80099b2 <__exponent+0x1c>
 80099ce:	3130      	adds	r1, #48	@ 0x30
 80099d0:	1e94      	subs	r4, r2, #2
 80099d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80099d6:	1c41      	adds	r1, r0, #1
 80099d8:	4623      	mov	r3, r4
 80099da:	42ab      	cmp	r3, r5
 80099dc:	d30a      	bcc.n	80099f4 <__exponent+0x5e>
 80099de:	f10d 0309 	add.w	r3, sp, #9
 80099e2:	1a9b      	subs	r3, r3, r2
 80099e4:	42ac      	cmp	r4, r5
 80099e6:	bf88      	it	hi
 80099e8:	2300      	movhi	r3, #0
 80099ea:	3302      	adds	r3, #2
 80099ec:	4403      	add	r3, r0
 80099ee:	1a18      	subs	r0, r3, r0
 80099f0:	b003      	add	sp, #12
 80099f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80099f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80099fc:	e7ed      	b.n	80099da <__exponent+0x44>
 80099fe:	2330      	movs	r3, #48	@ 0x30
 8009a00:	3130      	adds	r1, #48	@ 0x30
 8009a02:	7083      	strb	r3, [r0, #2]
 8009a04:	70c1      	strb	r1, [r0, #3]
 8009a06:	1d03      	adds	r3, r0, #4
 8009a08:	e7f1      	b.n	80099ee <__exponent+0x58>
	...

08009a0c <_printf_float>:
 8009a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	b08d      	sub	sp, #52	@ 0x34
 8009a12:	460c      	mov	r4, r1
 8009a14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a18:	4616      	mov	r6, r2
 8009a1a:	461f      	mov	r7, r3
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	f001 f899 	bl	800ab54 <_localeconv_r>
 8009a22:	6803      	ldr	r3, [r0, #0]
 8009a24:	9304      	str	r3, [sp, #16]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7f6 fc22 	bl	8000270 <strlen>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a30:	f8d8 3000 	ldr.w	r3, [r8]
 8009a34:	9005      	str	r0, [sp, #20]
 8009a36:	3307      	adds	r3, #7
 8009a38:	f023 0307 	bic.w	r3, r3, #7
 8009a3c:	f103 0208 	add.w	r2, r3, #8
 8009a40:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a44:	f8d4 b000 	ldr.w	fp, [r4]
 8009a48:	f8c8 2000 	str.w	r2, [r8]
 8009a4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009a54:	9307      	str	r3, [sp, #28]
 8009a56:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a62:	4b9c      	ldr	r3, [pc, #624]	@ (8009cd4 <_printf_float+0x2c8>)
 8009a64:	f04f 32ff 	mov.w	r2, #4294967295
 8009a68:	f7f7 f860 	bl	8000b2c <__aeabi_dcmpun>
 8009a6c:	bb70      	cbnz	r0, 8009acc <_printf_float+0xc0>
 8009a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a72:	4b98      	ldr	r3, [pc, #608]	@ (8009cd4 <_printf_float+0x2c8>)
 8009a74:	f04f 32ff 	mov.w	r2, #4294967295
 8009a78:	f7f7 f83a 	bl	8000af0 <__aeabi_dcmple>
 8009a7c:	bb30      	cbnz	r0, 8009acc <_printf_float+0xc0>
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2300      	movs	r3, #0
 8009a82:	4640      	mov	r0, r8
 8009a84:	4649      	mov	r1, r9
 8009a86:	f7f7 f829 	bl	8000adc <__aeabi_dcmplt>
 8009a8a:	b110      	cbz	r0, 8009a92 <_printf_float+0x86>
 8009a8c:	232d      	movs	r3, #45	@ 0x2d
 8009a8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a92:	4a91      	ldr	r2, [pc, #580]	@ (8009cd8 <_printf_float+0x2cc>)
 8009a94:	4b91      	ldr	r3, [pc, #580]	@ (8009cdc <_printf_float+0x2d0>)
 8009a96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a9a:	bf8c      	ite	hi
 8009a9c:	4690      	movhi	r8, r2
 8009a9e:	4698      	movls	r8, r3
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	f02b 0304 	bic.w	r3, fp, #4
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	f04f 0900 	mov.w	r9, #0
 8009aae:	9700      	str	r7, [sp, #0]
 8009ab0:	4633      	mov	r3, r6
 8009ab2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f000 f9d2 	bl	8009e60 <_printf_common>
 8009abc:	3001      	adds	r0, #1
 8009abe:	f040 808d 	bne.w	8009bdc <_printf_float+0x1d0>
 8009ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac6:	b00d      	add	sp, #52	@ 0x34
 8009ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009acc:	4642      	mov	r2, r8
 8009ace:	464b      	mov	r3, r9
 8009ad0:	4640      	mov	r0, r8
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	f7f7 f82a 	bl	8000b2c <__aeabi_dcmpun>
 8009ad8:	b140      	cbz	r0, 8009aec <_printf_float+0xe0>
 8009ada:	464b      	mov	r3, r9
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	bfbc      	itt	lt
 8009ae0:	232d      	movlt	r3, #45	@ 0x2d
 8009ae2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8009ce0 <_printf_float+0x2d4>)
 8009ae8:	4b7e      	ldr	r3, [pc, #504]	@ (8009ce4 <_printf_float+0x2d8>)
 8009aea:	e7d4      	b.n	8009a96 <_printf_float+0x8a>
 8009aec:	6863      	ldr	r3, [r4, #4]
 8009aee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009af2:	9206      	str	r2, [sp, #24]
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	d13b      	bne.n	8009b70 <_printf_float+0x164>
 8009af8:	2306      	movs	r3, #6
 8009afa:	6063      	str	r3, [r4, #4]
 8009afc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b00:	2300      	movs	r3, #0
 8009b02:	6022      	str	r2, [r4, #0]
 8009b04:	9303      	str	r3, [sp, #12]
 8009b06:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b08:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b0c:	ab09      	add	r3, sp, #36	@ 0x24
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	6861      	ldr	r1, [r4, #4]
 8009b12:	ec49 8b10 	vmov	d0, r8, r9
 8009b16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f7ff fed6 	bl	80098cc <__cvt>
 8009b20:	9b06      	ldr	r3, [sp, #24]
 8009b22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b24:	2b47      	cmp	r3, #71	@ 0x47
 8009b26:	4680      	mov	r8, r0
 8009b28:	d129      	bne.n	8009b7e <_printf_float+0x172>
 8009b2a:	1cc8      	adds	r0, r1, #3
 8009b2c:	db02      	blt.n	8009b34 <_printf_float+0x128>
 8009b2e:	6863      	ldr	r3, [r4, #4]
 8009b30:	4299      	cmp	r1, r3
 8009b32:	dd41      	ble.n	8009bb8 <_printf_float+0x1ac>
 8009b34:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b38:	fa5f fa8a 	uxtb.w	sl, sl
 8009b3c:	3901      	subs	r1, #1
 8009b3e:	4652      	mov	r2, sl
 8009b40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b44:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b46:	f7ff ff26 	bl	8009996 <__exponent>
 8009b4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b4c:	1813      	adds	r3, r2, r0
 8009b4e:	2a01      	cmp	r2, #1
 8009b50:	4681      	mov	r9, r0
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	dc02      	bgt.n	8009b5c <_printf_float+0x150>
 8009b56:	6822      	ldr	r2, [r4, #0]
 8009b58:	07d2      	lsls	r2, r2, #31
 8009b5a:	d501      	bpl.n	8009b60 <_printf_float+0x154>
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	6123      	str	r3, [r4, #16]
 8009b60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0a2      	beq.n	8009aae <_printf_float+0xa2>
 8009b68:	232d      	movs	r3, #45	@ 0x2d
 8009b6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b6e:	e79e      	b.n	8009aae <_printf_float+0xa2>
 8009b70:	9a06      	ldr	r2, [sp, #24]
 8009b72:	2a47      	cmp	r2, #71	@ 0x47
 8009b74:	d1c2      	bne.n	8009afc <_printf_float+0xf0>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1c0      	bne.n	8009afc <_printf_float+0xf0>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e7bd      	b.n	8009afa <_printf_float+0xee>
 8009b7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b82:	d9db      	bls.n	8009b3c <_printf_float+0x130>
 8009b84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009b88:	d118      	bne.n	8009bbc <_printf_float+0x1b0>
 8009b8a:	2900      	cmp	r1, #0
 8009b8c:	6863      	ldr	r3, [r4, #4]
 8009b8e:	dd0b      	ble.n	8009ba8 <_printf_float+0x19c>
 8009b90:	6121      	str	r1, [r4, #16]
 8009b92:	b913      	cbnz	r3, 8009b9a <_printf_float+0x18e>
 8009b94:	6822      	ldr	r2, [r4, #0]
 8009b96:	07d0      	lsls	r0, r2, #31
 8009b98:	d502      	bpl.n	8009ba0 <_printf_float+0x194>
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	440b      	add	r3, r1
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009ba2:	f04f 0900 	mov.w	r9, #0
 8009ba6:	e7db      	b.n	8009b60 <_printf_float+0x154>
 8009ba8:	b913      	cbnz	r3, 8009bb0 <_printf_float+0x1a4>
 8009baa:	6822      	ldr	r2, [r4, #0]
 8009bac:	07d2      	lsls	r2, r2, #31
 8009bae:	d501      	bpl.n	8009bb4 <_printf_float+0x1a8>
 8009bb0:	3302      	adds	r3, #2
 8009bb2:	e7f4      	b.n	8009b9e <_printf_float+0x192>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e7f2      	b.n	8009b9e <_printf_float+0x192>
 8009bb8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bbe:	4299      	cmp	r1, r3
 8009bc0:	db05      	blt.n	8009bce <_printf_float+0x1c2>
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	6121      	str	r1, [r4, #16]
 8009bc6:	07d8      	lsls	r0, r3, #31
 8009bc8:	d5ea      	bpl.n	8009ba0 <_printf_float+0x194>
 8009bca:	1c4b      	adds	r3, r1, #1
 8009bcc:	e7e7      	b.n	8009b9e <_printf_float+0x192>
 8009bce:	2900      	cmp	r1, #0
 8009bd0:	bfd4      	ite	le
 8009bd2:	f1c1 0202 	rsble	r2, r1, #2
 8009bd6:	2201      	movgt	r2, #1
 8009bd8:	4413      	add	r3, r2
 8009bda:	e7e0      	b.n	8009b9e <_printf_float+0x192>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	055a      	lsls	r2, r3, #21
 8009be0:	d407      	bmi.n	8009bf2 <_printf_float+0x1e6>
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	4642      	mov	r2, r8
 8009be6:	4631      	mov	r1, r6
 8009be8:	4628      	mov	r0, r5
 8009bea:	47b8      	blx	r7
 8009bec:	3001      	adds	r0, #1
 8009bee:	d12b      	bne.n	8009c48 <_printf_float+0x23c>
 8009bf0:	e767      	b.n	8009ac2 <_printf_float+0xb6>
 8009bf2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bf6:	f240 80dd 	bls.w	8009db4 <_printf_float+0x3a8>
 8009bfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2300      	movs	r3, #0
 8009c02:	f7f6 ff61 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d033      	beq.n	8009c72 <_printf_float+0x266>
 8009c0a:	4a37      	ldr	r2, [pc, #220]	@ (8009ce8 <_printf_float+0x2dc>)
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4628      	mov	r0, r5
 8009c12:	47b8      	blx	r7
 8009c14:	3001      	adds	r0, #1
 8009c16:	f43f af54 	beq.w	8009ac2 <_printf_float+0xb6>
 8009c1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c1e:	4543      	cmp	r3, r8
 8009c20:	db02      	blt.n	8009c28 <_printf_float+0x21c>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	07d8      	lsls	r0, r3, #31
 8009c26:	d50f      	bpl.n	8009c48 <_printf_float+0x23c>
 8009c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4628      	mov	r0, r5
 8009c30:	47b8      	blx	r7
 8009c32:	3001      	adds	r0, #1
 8009c34:	f43f af45 	beq.w	8009ac2 <_printf_float+0xb6>
 8009c38:	f04f 0900 	mov.w	r9, #0
 8009c3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c40:	f104 0a1a 	add.w	sl, r4, #26
 8009c44:	45c8      	cmp	r8, r9
 8009c46:	dc09      	bgt.n	8009c5c <_printf_float+0x250>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	079b      	lsls	r3, r3, #30
 8009c4c:	f100 8103 	bmi.w	8009e56 <_printf_float+0x44a>
 8009c50:	68e0      	ldr	r0, [r4, #12]
 8009c52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c54:	4298      	cmp	r0, r3
 8009c56:	bfb8      	it	lt
 8009c58:	4618      	movlt	r0, r3
 8009c5a:	e734      	b.n	8009ac6 <_printf_float+0xba>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	4652      	mov	r2, sl
 8009c60:	4631      	mov	r1, r6
 8009c62:	4628      	mov	r0, r5
 8009c64:	47b8      	blx	r7
 8009c66:	3001      	adds	r0, #1
 8009c68:	f43f af2b 	beq.w	8009ac2 <_printf_float+0xb6>
 8009c6c:	f109 0901 	add.w	r9, r9, #1
 8009c70:	e7e8      	b.n	8009c44 <_printf_float+0x238>
 8009c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dc39      	bgt.n	8009cec <_printf_float+0x2e0>
 8009c78:	4a1b      	ldr	r2, [pc, #108]	@ (8009ce8 <_printf_float+0x2dc>)
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4628      	mov	r0, r5
 8009c80:	47b8      	blx	r7
 8009c82:	3001      	adds	r0, #1
 8009c84:	f43f af1d 	beq.w	8009ac2 <_printf_float+0xb6>
 8009c88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009c8c:	ea59 0303 	orrs.w	r3, r9, r3
 8009c90:	d102      	bne.n	8009c98 <_printf_float+0x28c>
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	07d9      	lsls	r1, r3, #31
 8009c96:	d5d7      	bpl.n	8009c48 <_printf_float+0x23c>
 8009c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	f43f af0d 	beq.w	8009ac2 <_printf_float+0xb6>
 8009ca8:	f04f 0a00 	mov.w	sl, #0
 8009cac:	f104 0b1a 	add.w	fp, r4, #26
 8009cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb2:	425b      	negs	r3, r3
 8009cb4:	4553      	cmp	r3, sl
 8009cb6:	dc01      	bgt.n	8009cbc <_printf_float+0x2b0>
 8009cb8:	464b      	mov	r3, r9
 8009cba:	e793      	b.n	8009be4 <_printf_float+0x1d8>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	465a      	mov	r2, fp
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	47b8      	blx	r7
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	f43f aefb 	beq.w	8009ac2 <_printf_float+0xb6>
 8009ccc:	f10a 0a01 	add.w	sl, sl, #1
 8009cd0:	e7ee      	b.n	8009cb0 <_printf_float+0x2a4>
 8009cd2:	bf00      	nop
 8009cd4:	7fefffff 	.word	0x7fefffff
 8009cd8:	0800ebf9 	.word	0x0800ebf9
 8009cdc:	0800ebf5 	.word	0x0800ebf5
 8009ce0:	0800ec01 	.word	0x0800ec01
 8009ce4:	0800ebfd 	.word	0x0800ebfd
 8009ce8:	0800ed3b 	.word	0x0800ed3b
 8009cec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009cee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009cf2:	4553      	cmp	r3, sl
 8009cf4:	bfa8      	it	ge
 8009cf6:	4653      	movge	r3, sl
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	4699      	mov	r9, r3
 8009cfc:	dc36      	bgt.n	8009d6c <_printf_float+0x360>
 8009cfe:	f04f 0b00 	mov.w	fp, #0
 8009d02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d06:	f104 021a 	add.w	r2, r4, #26
 8009d0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d0c:	9306      	str	r3, [sp, #24]
 8009d0e:	eba3 0309 	sub.w	r3, r3, r9
 8009d12:	455b      	cmp	r3, fp
 8009d14:	dc31      	bgt.n	8009d7a <_printf_float+0x36e>
 8009d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d18:	459a      	cmp	sl, r3
 8009d1a:	dc3a      	bgt.n	8009d92 <_printf_float+0x386>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	07da      	lsls	r2, r3, #31
 8009d20:	d437      	bmi.n	8009d92 <_printf_float+0x386>
 8009d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d24:	ebaa 0903 	sub.w	r9, sl, r3
 8009d28:	9b06      	ldr	r3, [sp, #24]
 8009d2a:	ebaa 0303 	sub.w	r3, sl, r3
 8009d2e:	4599      	cmp	r9, r3
 8009d30:	bfa8      	it	ge
 8009d32:	4699      	movge	r9, r3
 8009d34:	f1b9 0f00 	cmp.w	r9, #0
 8009d38:	dc33      	bgt.n	8009da2 <_printf_float+0x396>
 8009d3a:	f04f 0800 	mov.w	r8, #0
 8009d3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d42:	f104 0b1a 	add.w	fp, r4, #26
 8009d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d48:	ebaa 0303 	sub.w	r3, sl, r3
 8009d4c:	eba3 0309 	sub.w	r3, r3, r9
 8009d50:	4543      	cmp	r3, r8
 8009d52:	f77f af79 	ble.w	8009c48 <_printf_float+0x23c>
 8009d56:	2301      	movs	r3, #1
 8009d58:	465a      	mov	r2, fp
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	47b8      	blx	r7
 8009d60:	3001      	adds	r0, #1
 8009d62:	f43f aeae 	beq.w	8009ac2 <_printf_float+0xb6>
 8009d66:	f108 0801 	add.w	r8, r8, #1
 8009d6a:	e7ec      	b.n	8009d46 <_printf_float+0x33a>
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b8      	blx	r7
 8009d74:	3001      	adds	r0, #1
 8009d76:	d1c2      	bne.n	8009cfe <_printf_float+0x2f2>
 8009d78:	e6a3      	b.n	8009ac2 <_printf_float+0xb6>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4628      	mov	r0, r5
 8009d80:	9206      	str	r2, [sp, #24]
 8009d82:	47b8      	blx	r7
 8009d84:	3001      	adds	r0, #1
 8009d86:	f43f ae9c 	beq.w	8009ac2 <_printf_float+0xb6>
 8009d8a:	9a06      	ldr	r2, [sp, #24]
 8009d8c:	f10b 0b01 	add.w	fp, fp, #1
 8009d90:	e7bb      	b.n	8009d0a <_printf_float+0x2fe>
 8009d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d1c0      	bne.n	8009d22 <_printf_float+0x316>
 8009da0:	e68f      	b.n	8009ac2 <_printf_float+0xb6>
 8009da2:	9a06      	ldr	r2, [sp, #24]
 8009da4:	464b      	mov	r3, r9
 8009da6:	4442      	add	r2, r8
 8009da8:	4631      	mov	r1, r6
 8009daa:	4628      	mov	r0, r5
 8009dac:	47b8      	blx	r7
 8009dae:	3001      	adds	r0, #1
 8009db0:	d1c3      	bne.n	8009d3a <_printf_float+0x32e>
 8009db2:	e686      	b.n	8009ac2 <_printf_float+0xb6>
 8009db4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009db8:	f1ba 0f01 	cmp.w	sl, #1
 8009dbc:	dc01      	bgt.n	8009dc2 <_printf_float+0x3b6>
 8009dbe:	07db      	lsls	r3, r3, #31
 8009dc0:	d536      	bpl.n	8009e30 <_printf_float+0x424>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	4642      	mov	r2, r8
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	4628      	mov	r0, r5
 8009dca:	47b8      	blx	r7
 8009dcc:	3001      	adds	r0, #1
 8009dce:	f43f ae78 	beq.w	8009ac2 <_printf_float+0xb6>
 8009dd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4628      	mov	r0, r5
 8009dda:	47b8      	blx	r7
 8009ddc:	3001      	adds	r0, #1
 8009dde:	f43f ae70 	beq.w	8009ac2 <_printf_float+0xb6>
 8009de2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009de6:	2200      	movs	r2, #0
 8009de8:	2300      	movs	r3, #0
 8009dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dee:	f7f6 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009df2:	b9c0      	cbnz	r0, 8009e26 <_printf_float+0x41a>
 8009df4:	4653      	mov	r3, sl
 8009df6:	f108 0201 	add.w	r2, r8, #1
 8009dfa:	4631      	mov	r1, r6
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	47b8      	blx	r7
 8009e00:	3001      	adds	r0, #1
 8009e02:	d10c      	bne.n	8009e1e <_printf_float+0x412>
 8009e04:	e65d      	b.n	8009ac2 <_printf_float+0xb6>
 8009e06:	2301      	movs	r3, #1
 8009e08:	465a      	mov	r2, fp
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b8      	blx	r7
 8009e10:	3001      	adds	r0, #1
 8009e12:	f43f ae56 	beq.w	8009ac2 <_printf_float+0xb6>
 8009e16:	f108 0801 	add.w	r8, r8, #1
 8009e1a:	45d0      	cmp	r8, sl
 8009e1c:	dbf3      	blt.n	8009e06 <_printf_float+0x3fa>
 8009e1e:	464b      	mov	r3, r9
 8009e20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e24:	e6df      	b.n	8009be6 <_printf_float+0x1da>
 8009e26:	f04f 0800 	mov.w	r8, #0
 8009e2a:	f104 0b1a 	add.w	fp, r4, #26
 8009e2e:	e7f4      	b.n	8009e1a <_printf_float+0x40e>
 8009e30:	2301      	movs	r3, #1
 8009e32:	4642      	mov	r2, r8
 8009e34:	e7e1      	b.n	8009dfa <_printf_float+0x3ee>
 8009e36:	2301      	movs	r3, #1
 8009e38:	464a      	mov	r2, r9
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	f43f ae3e 	beq.w	8009ac2 <_printf_float+0xb6>
 8009e46:	f108 0801 	add.w	r8, r8, #1
 8009e4a:	68e3      	ldr	r3, [r4, #12]
 8009e4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e4e:	1a5b      	subs	r3, r3, r1
 8009e50:	4543      	cmp	r3, r8
 8009e52:	dcf0      	bgt.n	8009e36 <_printf_float+0x42a>
 8009e54:	e6fc      	b.n	8009c50 <_printf_float+0x244>
 8009e56:	f04f 0800 	mov.w	r8, #0
 8009e5a:	f104 0919 	add.w	r9, r4, #25
 8009e5e:	e7f4      	b.n	8009e4a <_printf_float+0x43e>

08009e60 <_printf_common>:
 8009e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e64:	4616      	mov	r6, r2
 8009e66:	4698      	mov	r8, r3
 8009e68:	688a      	ldr	r2, [r1, #8]
 8009e6a:	690b      	ldr	r3, [r1, #16]
 8009e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e70:	4293      	cmp	r3, r2
 8009e72:	bfb8      	it	lt
 8009e74:	4613      	movlt	r3, r2
 8009e76:	6033      	str	r3, [r6, #0]
 8009e78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	b10a      	cbz	r2, 8009e86 <_printf_common+0x26>
 8009e82:	3301      	adds	r3, #1
 8009e84:	6033      	str	r3, [r6, #0]
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	0699      	lsls	r1, r3, #26
 8009e8a:	bf42      	ittt	mi
 8009e8c:	6833      	ldrmi	r3, [r6, #0]
 8009e8e:	3302      	addmi	r3, #2
 8009e90:	6033      	strmi	r3, [r6, #0]
 8009e92:	6825      	ldr	r5, [r4, #0]
 8009e94:	f015 0506 	ands.w	r5, r5, #6
 8009e98:	d106      	bne.n	8009ea8 <_printf_common+0x48>
 8009e9a:	f104 0a19 	add.w	sl, r4, #25
 8009e9e:	68e3      	ldr	r3, [r4, #12]
 8009ea0:	6832      	ldr	r2, [r6, #0]
 8009ea2:	1a9b      	subs	r3, r3, r2
 8009ea4:	42ab      	cmp	r3, r5
 8009ea6:	dc26      	bgt.n	8009ef6 <_printf_common+0x96>
 8009ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009eac:	6822      	ldr	r2, [r4, #0]
 8009eae:	3b00      	subs	r3, #0
 8009eb0:	bf18      	it	ne
 8009eb2:	2301      	movne	r3, #1
 8009eb4:	0692      	lsls	r2, r2, #26
 8009eb6:	d42b      	bmi.n	8009f10 <_printf_common+0xb0>
 8009eb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ebc:	4641      	mov	r1, r8
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	47c8      	blx	r9
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	d01e      	beq.n	8009f04 <_printf_common+0xa4>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	6922      	ldr	r2, [r4, #16]
 8009eca:	f003 0306 	and.w	r3, r3, #6
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	bf02      	ittt	eq
 8009ed2:	68e5      	ldreq	r5, [r4, #12]
 8009ed4:	6833      	ldreq	r3, [r6, #0]
 8009ed6:	1aed      	subeq	r5, r5, r3
 8009ed8:	68a3      	ldr	r3, [r4, #8]
 8009eda:	bf0c      	ite	eq
 8009edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ee0:	2500      	movne	r5, #0
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	bfc4      	itt	gt
 8009ee6:	1a9b      	subgt	r3, r3, r2
 8009ee8:	18ed      	addgt	r5, r5, r3
 8009eea:	2600      	movs	r6, #0
 8009eec:	341a      	adds	r4, #26
 8009eee:	42b5      	cmp	r5, r6
 8009ef0:	d11a      	bne.n	8009f28 <_printf_common+0xc8>
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	e008      	b.n	8009f08 <_printf_common+0xa8>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	4652      	mov	r2, sl
 8009efa:	4641      	mov	r1, r8
 8009efc:	4638      	mov	r0, r7
 8009efe:	47c8      	blx	r9
 8009f00:	3001      	adds	r0, #1
 8009f02:	d103      	bne.n	8009f0c <_printf_common+0xac>
 8009f04:	f04f 30ff 	mov.w	r0, #4294967295
 8009f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0c:	3501      	adds	r5, #1
 8009f0e:	e7c6      	b.n	8009e9e <_printf_common+0x3e>
 8009f10:	18e1      	adds	r1, r4, r3
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	2030      	movs	r0, #48	@ 0x30
 8009f16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f1a:	4422      	add	r2, r4
 8009f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f24:	3302      	adds	r3, #2
 8009f26:	e7c7      	b.n	8009eb8 <_printf_common+0x58>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	4638      	mov	r0, r7
 8009f30:	47c8      	blx	r9
 8009f32:	3001      	adds	r0, #1
 8009f34:	d0e6      	beq.n	8009f04 <_printf_common+0xa4>
 8009f36:	3601      	adds	r6, #1
 8009f38:	e7d9      	b.n	8009eee <_printf_common+0x8e>
	...

08009f3c <_printf_i>:
 8009f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f40:	7e0f      	ldrb	r7, [r1, #24]
 8009f42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f44:	2f78      	cmp	r7, #120	@ 0x78
 8009f46:	4691      	mov	r9, r2
 8009f48:	4680      	mov	r8, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	469a      	mov	sl, r3
 8009f4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f52:	d807      	bhi.n	8009f64 <_printf_i+0x28>
 8009f54:	2f62      	cmp	r7, #98	@ 0x62
 8009f56:	d80a      	bhi.n	8009f6e <_printf_i+0x32>
 8009f58:	2f00      	cmp	r7, #0
 8009f5a:	f000 80d1 	beq.w	800a100 <_printf_i+0x1c4>
 8009f5e:	2f58      	cmp	r7, #88	@ 0x58
 8009f60:	f000 80b8 	beq.w	800a0d4 <_printf_i+0x198>
 8009f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f6c:	e03a      	b.n	8009fe4 <_printf_i+0xa8>
 8009f6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f72:	2b15      	cmp	r3, #21
 8009f74:	d8f6      	bhi.n	8009f64 <_printf_i+0x28>
 8009f76:	a101      	add	r1, pc, #4	@ (adr r1, 8009f7c <_printf_i+0x40>)
 8009f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f7c:	08009fd5 	.word	0x08009fd5
 8009f80:	08009fe9 	.word	0x08009fe9
 8009f84:	08009f65 	.word	0x08009f65
 8009f88:	08009f65 	.word	0x08009f65
 8009f8c:	08009f65 	.word	0x08009f65
 8009f90:	08009f65 	.word	0x08009f65
 8009f94:	08009fe9 	.word	0x08009fe9
 8009f98:	08009f65 	.word	0x08009f65
 8009f9c:	08009f65 	.word	0x08009f65
 8009fa0:	08009f65 	.word	0x08009f65
 8009fa4:	08009f65 	.word	0x08009f65
 8009fa8:	0800a0e7 	.word	0x0800a0e7
 8009fac:	0800a013 	.word	0x0800a013
 8009fb0:	0800a0a1 	.word	0x0800a0a1
 8009fb4:	08009f65 	.word	0x08009f65
 8009fb8:	08009f65 	.word	0x08009f65
 8009fbc:	0800a109 	.word	0x0800a109
 8009fc0:	08009f65 	.word	0x08009f65
 8009fc4:	0800a013 	.word	0x0800a013
 8009fc8:	08009f65 	.word	0x08009f65
 8009fcc:	08009f65 	.word	0x08009f65
 8009fd0:	0800a0a9 	.word	0x0800a0a9
 8009fd4:	6833      	ldr	r3, [r6, #0]
 8009fd6:	1d1a      	adds	r2, r3, #4
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6032      	str	r2, [r6, #0]
 8009fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e09c      	b.n	800a122 <_printf_i+0x1e6>
 8009fe8:	6833      	ldr	r3, [r6, #0]
 8009fea:	6820      	ldr	r0, [r4, #0]
 8009fec:	1d19      	adds	r1, r3, #4
 8009fee:	6031      	str	r1, [r6, #0]
 8009ff0:	0606      	lsls	r6, r0, #24
 8009ff2:	d501      	bpl.n	8009ff8 <_printf_i+0xbc>
 8009ff4:	681d      	ldr	r5, [r3, #0]
 8009ff6:	e003      	b.n	800a000 <_printf_i+0xc4>
 8009ff8:	0645      	lsls	r5, r0, #25
 8009ffa:	d5fb      	bpl.n	8009ff4 <_printf_i+0xb8>
 8009ffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a000:	2d00      	cmp	r5, #0
 800a002:	da03      	bge.n	800a00c <_printf_i+0xd0>
 800a004:	232d      	movs	r3, #45	@ 0x2d
 800a006:	426d      	negs	r5, r5
 800a008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a00c:	4858      	ldr	r0, [pc, #352]	@ (800a170 <_printf_i+0x234>)
 800a00e:	230a      	movs	r3, #10
 800a010:	e011      	b.n	800a036 <_printf_i+0xfa>
 800a012:	6821      	ldr	r1, [r4, #0]
 800a014:	6833      	ldr	r3, [r6, #0]
 800a016:	0608      	lsls	r0, r1, #24
 800a018:	f853 5b04 	ldr.w	r5, [r3], #4
 800a01c:	d402      	bmi.n	800a024 <_printf_i+0xe8>
 800a01e:	0649      	lsls	r1, r1, #25
 800a020:	bf48      	it	mi
 800a022:	b2ad      	uxthmi	r5, r5
 800a024:	2f6f      	cmp	r7, #111	@ 0x6f
 800a026:	4852      	ldr	r0, [pc, #328]	@ (800a170 <_printf_i+0x234>)
 800a028:	6033      	str	r3, [r6, #0]
 800a02a:	bf14      	ite	ne
 800a02c:	230a      	movne	r3, #10
 800a02e:	2308      	moveq	r3, #8
 800a030:	2100      	movs	r1, #0
 800a032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a036:	6866      	ldr	r6, [r4, #4]
 800a038:	60a6      	str	r6, [r4, #8]
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	db05      	blt.n	800a04a <_printf_i+0x10e>
 800a03e:	6821      	ldr	r1, [r4, #0]
 800a040:	432e      	orrs	r6, r5
 800a042:	f021 0104 	bic.w	r1, r1, #4
 800a046:	6021      	str	r1, [r4, #0]
 800a048:	d04b      	beq.n	800a0e2 <_printf_i+0x1a6>
 800a04a:	4616      	mov	r6, r2
 800a04c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a050:	fb03 5711 	mls	r7, r3, r1, r5
 800a054:	5dc7      	ldrb	r7, [r0, r7]
 800a056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a05a:	462f      	mov	r7, r5
 800a05c:	42bb      	cmp	r3, r7
 800a05e:	460d      	mov	r5, r1
 800a060:	d9f4      	bls.n	800a04c <_printf_i+0x110>
 800a062:	2b08      	cmp	r3, #8
 800a064:	d10b      	bne.n	800a07e <_printf_i+0x142>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	07df      	lsls	r7, r3, #31
 800a06a:	d508      	bpl.n	800a07e <_printf_i+0x142>
 800a06c:	6923      	ldr	r3, [r4, #16]
 800a06e:	6861      	ldr	r1, [r4, #4]
 800a070:	4299      	cmp	r1, r3
 800a072:	bfde      	ittt	le
 800a074:	2330      	movle	r3, #48	@ 0x30
 800a076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a07a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a07e:	1b92      	subs	r2, r2, r6
 800a080:	6122      	str	r2, [r4, #16]
 800a082:	f8cd a000 	str.w	sl, [sp]
 800a086:	464b      	mov	r3, r9
 800a088:	aa03      	add	r2, sp, #12
 800a08a:	4621      	mov	r1, r4
 800a08c:	4640      	mov	r0, r8
 800a08e:	f7ff fee7 	bl	8009e60 <_printf_common>
 800a092:	3001      	adds	r0, #1
 800a094:	d14a      	bne.n	800a12c <_printf_i+0x1f0>
 800a096:	f04f 30ff 	mov.w	r0, #4294967295
 800a09a:	b004      	add	sp, #16
 800a09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	f043 0320 	orr.w	r3, r3, #32
 800a0a6:	6023      	str	r3, [r4, #0]
 800a0a8:	4832      	ldr	r0, [pc, #200]	@ (800a174 <_printf_i+0x238>)
 800a0aa:	2778      	movs	r7, #120	@ 0x78
 800a0ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	6831      	ldr	r1, [r6, #0]
 800a0b4:	061f      	lsls	r7, r3, #24
 800a0b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0ba:	d402      	bmi.n	800a0c2 <_printf_i+0x186>
 800a0bc:	065f      	lsls	r7, r3, #25
 800a0be:	bf48      	it	mi
 800a0c0:	b2ad      	uxthmi	r5, r5
 800a0c2:	6031      	str	r1, [r6, #0]
 800a0c4:	07d9      	lsls	r1, r3, #31
 800a0c6:	bf44      	itt	mi
 800a0c8:	f043 0320 	orrmi.w	r3, r3, #32
 800a0cc:	6023      	strmi	r3, [r4, #0]
 800a0ce:	b11d      	cbz	r5, 800a0d8 <_printf_i+0x19c>
 800a0d0:	2310      	movs	r3, #16
 800a0d2:	e7ad      	b.n	800a030 <_printf_i+0xf4>
 800a0d4:	4826      	ldr	r0, [pc, #152]	@ (800a170 <_printf_i+0x234>)
 800a0d6:	e7e9      	b.n	800a0ac <_printf_i+0x170>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	f023 0320 	bic.w	r3, r3, #32
 800a0de:	6023      	str	r3, [r4, #0]
 800a0e0:	e7f6      	b.n	800a0d0 <_printf_i+0x194>
 800a0e2:	4616      	mov	r6, r2
 800a0e4:	e7bd      	b.n	800a062 <_printf_i+0x126>
 800a0e6:	6833      	ldr	r3, [r6, #0]
 800a0e8:	6825      	ldr	r5, [r4, #0]
 800a0ea:	6961      	ldr	r1, [r4, #20]
 800a0ec:	1d18      	adds	r0, r3, #4
 800a0ee:	6030      	str	r0, [r6, #0]
 800a0f0:	062e      	lsls	r6, r5, #24
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	d501      	bpl.n	800a0fa <_printf_i+0x1be>
 800a0f6:	6019      	str	r1, [r3, #0]
 800a0f8:	e002      	b.n	800a100 <_printf_i+0x1c4>
 800a0fa:	0668      	lsls	r0, r5, #25
 800a0fc:	d5fb      	bpl.n	800a0f6 <_printf_i+0x1ba>
 800a0fe:	8019      	strh	r1, [r3, #0]
 800a100:	2300      	movs	r3, #0
 800a102:	6123      	str	r3, [r4, #16]
 800a104:	4616      	mov	r6, r2
 800a106:	e7bc      	b.n	800a082 <_printf_i+0x146>
 800a108:	6833      	ldr	r3, [r6, #0]
 800a10a:	1d1a      	adds	r2, r3, #4
 800a10c:	6032      	str	r2, [r6, #0]
 800a10e:	681e      	ldr	r6, [r3, #0]
 800a110:	6862      	ldr	r2, [r4, #4]
 800a112:	2100      	movs	r1, #0
 800a114:	4630      	mov	r0, r6
 800a116:	f7f6 f85b 	bl	80001d0 <memchr>
 800a11a:	b108      	cbz	r0, 800a120 <_printf_i+0x1e4>
 800a11c:	1b80      	subs	r0, r0, r6
 800a11e:	6060      	str	r0, [r4, #4]
 800a120:	6863      	ldr	r3, [r4, #4]
 800a122:	6123      	str	r3, [r4, #16]
 800a124:	2300      	movs	r3, #0
 800a126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a12a:	e7aa      	b.n	800a082 <_printf_i+0x146>
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	4632      	mov	r2, r6
 800a130:	4649      	mov	r1, r9
 800a132:	4640      	mov	r0, r8
 800a134:	47d0      	blx	sl
 800a136:	3001      	adds	r0, #1
 800a138:	d0ad      	beq.n	800a096 <_printf_i+0x15a>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	079b      	lsls	r3, r3, #30
 800a13e:	d413      	bmi.n	800a168 <_printf_i+0x22c>
 800a140:	68e0      	ldr	r0, [r4, #12]
 800a142:	9b03      	ldr	r3, [sp, #12]
 800a144:	4298      	cmp	r0, r3
 800a146:	bfb8      	it	lt
 800a148:	4618      	movlt	r0, r3
 800a14a:	e7a6      	b.n	800a09a <_printf_i+0x15e>
 800a14c:	2301      	movs	r3, #1
 800a14e:	4632      	mov	r2, r6
 800a150:	4649      	mov	r1, r9
 800a152:	4640      	mov	r0, r8
 800a154:	47d0      	blx	sl
 800a156:	3001      	adds	r0, #1
 800a158:	d09d      	beq.n	800a096 <_printf_i+0x15a>
 800a15a:	3501      	adds	r5, #1
 800a15c:	68e3      	ldr	r3, [r4, #12]
 800a15e:	9903      	ldr	r1, [sp, #12]
 800a160:	1a5b      	subs	r3, r3, r1
 800a162:	42ab      	cmp	r3, r5
 800a164:	dcf2      	bgt.n	800a14c <_printf_i+0x210>
 800a166:	e7eb      	b.n	800a140 <_printf_i+0x204>
 800a168:	2500      	movs	r5, #0
 800a16a:	f104 0619 	add.w	r6, r4, #25
 800a16e:	e7f5      	b.n	800a15c <_printf_i+0x220>
 800a170:	0800ec05 	.word	0x0800ec05
 800a174:	0800ec16 	.word	0x0800ec16

0800a178 <_scanf_float>:
 800a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17c:	b087      	sub	sp, #28
 800a17e:	4691      	mov	r9, r2
 800a180:	9303      	str	r3, [sp, #12]
 800a182:	688b      	ldr	r3, [r1, #8]
 800a184:	1e5a      	subs	r2, r3, #1
 800a186:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a18a:	bf81      	itttt	hi
 800a18c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a190:	eb03 0b05 	addhi.w	fp, r3, r5
 800a194:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a198:	608b      	strhi	r3, [r1, #8]
 800a19a:	680b      	ldr	r3, [r1, #0]
 800a19c:	460a      	mov	r2, r1
 800a19e:	f04f 0500 	mov.w	r5, #0
 800a1a2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a1a6:	f842 3b1c 	str.w	r3, [r2], #28
 800a1aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a1ae:	4680      	mov	r8, r0
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	bf98      	it	ls
 800a1b4:	f04f 0b00 	movls.w	fp, #0
 800a1b8:	9201      	str	r2, [sp, #4]
 800a1ba:	4616      	mov	r6, r2
 800a1bc:	46aa      	mov	sl, r5
 800a1be:	462f      	mov	r7, r5
 800a1c0:	9502      	str	r5, [sp, #8]
 800a1c2:	68a2      	ldr	r2, [r4, #8]
 800a1c4:	b15a      	cbz	r2, 800a1de <_scanf_float+0x66>
 800a1c6:	f8d9 3000 	ldr.w	r3, [r9]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b4e      	cmp	r3, #78	@ 0x4e
 800a1ce:	d863      	bhi.n	800a298 <_scanf_float+0x120>
 800a1d0:	2b40      	cmp	r3, #64	@ 0x40
 800a1d2:	d83b      	bhi.n	800a24c <_scanf_float+0xd4>
 800a1d4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a1d8:	b2c8      	uxtb	r0, r1
 800a1da:	280e      	cmp	r0, #14
 800a1dc:	d939      	bls.n	800a252 <_scanf_float+0xda>
 800a1de:	b11f      	cbz	r7, 800a1e8 <_scanf_float+0x70>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1e6:	6023      	str	r3, [r4, #0]
 800a1e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ec:	f1ba 0f01 	cmp.w	sl, #1
 800a1f0:	f200 8114 	bhi.w	800a41c <_scanf_float+0x2a4>
 800a1f4:	9b01      	ldr	r3, [sp, #4]
 800a1f6:	429e      	cmp	r6, r3
 800a1f8:	f200 8105 	bhi.w	800a406 <_scanf_float+0x28e>
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	b007      	add	sp, #28
 800a200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a204:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a208:	2a0d      	cmp	r2, #13
 800a20a:	d8e8      	bhi.n	800a1de <_scanf_float+0x66>
 800a20c:	a101      	add	r1, pc, #4	@ (adr r1, 800a214 <_scanf_float+0x9c>)
 800a20e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a212:	bf00      	nop
 800a214:	0800a35d 	.word	0x0800a35d
 800a218:	0800a1df 	.word	0x0800a1df
 800a21c:	0800a1df 	.word	0x0800a1df
 800a220:	0800a1df 	.word	0x0800a1df
 800a224:	0800a3b9 	.word	0x0800a3b9
 800a228:	0800a393 	.word	0x0800a393
 800a22c:	0800a1df 	.word	0x0800a1df
 800a230:	0800a1df 	.word	0x0800a1df
 800a234:	0800a36b 	.word	0x0800a36b
 800a238:	0800a1df 	.word	0x0800a1df
 800a23c:	0800a1df 	.word	0x0800a1df
 800a240:	0800a1df 	.word	0x0800a1df
 800a244:	0800a1df 	.word	0x0800a1df
 800a248:	0800a327 	.word	0x0800a327
 800a24c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a250:	e7da      	b.n	800a208 <_scanf_float+0x90>
 800a252:	290e      	cmp	r1, #14
 800a254:	d8c3      	bhi.n	800a1de <_scanf_float+0x66>
 800a256:	a001      	add	r0, pc, #4	@ (adr r0, 800a25c <_scanf_float+0xe4>)
 800a258:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a25c:	0800a317 	.word	0x0800a317
 800a260:	0800a1df 	.word	0x0800a1df
 800a264:	0800a317 	.word	0x0800a317
 800a268:	0800a3a7 	.word	0x0800a3a7
 800a26c:	0800a1df 	.word	0x0800a1df
 800a270:	0800a2b9 	.word	0x0800a2b9
 800a274:	0800a2fd 	.word	0x0800a2fd
 800a278:	0800a2fd 	.word	0x0800a2fd
 800a27c:	0800a2fd 	.word	0x0800a2fd
 800a280:	0800a2fd 	.word	0x0800a2fd
 800a284:	0800a2fd 	.word	0x0800a2fd
 800a288:	0800a2fd 	.word	0x0800a2fd
 800a28c:	0800a2fd 	.word	0x0800a2fd
 800a290:	0800a2fd 	.word	0x0800a2fd
 800a294:	0800a2fd 	.word	0x0800a2fd
 800a298:	2b6e      	cmp	r3, #110	@ 0x6e
 800a29a:	d809      	bhi.n	800a2b0 <_scanf_float+0x138>
 800a29c:	2b60      	cmp	r3, #96	@ 0x60
 800a29e:	d8b1      	bhi.n	800a204 <_scanf_float+0x8c>
 800a2a0:	2b54      	cmp	r3, #84	@ 0x54
 800a2a2:	d07b      	beq.n	800a39c <_scanf_float+0x224>
 800a2a4:	2b59      	cmp	r3, #89	@ 0x59
 800a2a6:	d19a      	bne.n	800a1de <_scanf_float+0x66>
 800a2a8:	2d07      	cmp	r5, #7
 800a2aa:	d198      	bne.n	800a1de <_scanf_float+0x66>
 800a2ac:	2508      	movs	r5, #8
 800a2ae:	e02f      	b.n	800a310 <_scanf_float+0x198>
 800a2b0:	2b74      	cmp	r3, #116	@ 0x74
 800a2b2:	d073      	beq.n	800a39c <_scanf_float+0x224>
 800a2b4:	2b79      	cmp	r3, #121	@ 0x79
 800a2b6:	e7f6      	b.n	800a2a6 <_scanf_float+0x12e>
 800a2b8:	6821      	ldr	r1, [r4, #0]
 800a2ba:	05c8      	lsls	r0, r1, #23
 800a2bc:	d51e      	bpl.n	800a2fc <_scanf_float+0x184>
 800a2be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a2c2:	6021      	str	r1, [r4, #0]
 800a2c4:	3701      	adds	r7, #1
 800a2c6:	f1bb 0f00 	cmp.w	fp, #0
 800a2ca:	d003      	beq.n	800a2d4 <_scanf_float+0x15c>
 800a2cc:	3201      	adds	r2, #1
 800a2ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a2d2:	60a2      	str	r2, [r4, #8]
 800a2d4:	68a3      	ldr	r3, [r4, #8]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	60a3      	str	r3, [r4, #8]
 800a2da:	6923      	ldr	r3, [r4, #16]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	6123      	str	r3, [r4, #16]
 800a2e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f8c9 3004 	str.w	r3, [r9, #4]
 800a2ec:	f340 8082 	ble.w	800a3f4 <_scanf_float+0x27c>
 800a2f0:	f8d9 3000 	ldr.w	r3, [r9]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	f8c9 3000 	str.w	r3, [r9]
 800a2fa:	e762      	b.n	800a1c2 <_scanf_float+0x4a>
 800a2fc:	eb1a 0105 	adds.w	r1, sl, r5
 800a300:	f47f af6d 	bne.w	800a1de <_scanf_float+0x66>
 800a304:	6822      	ldr	r2, [r4, #0]
 800a306:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a30a:	6022      	str	r2, [r4, #0]
 800a30c:	460d      	mov	r5, r1
 800a30e:	468a      	mov	sl, r1
 800a310:	f806 3b01 	strb.w	r3, [r6], #1
 800a314:	e7de      	b.n	800a2d4 <_scanf_float+0x15c>
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	0610      	lsls	r0, r2, #24
 800a31a:	f57f af60 	bpl.w	800a1de <_scanf_float+0x66>
 800a31e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a322:	6022      	str	r2, [r4, #0]
 800a324:	e7f4      	b.n	800a310 <_scanf_float+0x198>
 800a326:	f1ba 0f00 	cmp.w	sl, #0
 800a32a:	d10c      	bne.n	800a346 <_scanf_float+0x1ce>
 800a32c:	b977      	cbnz	r7, 800a34c <_scanf_float+0x1d4>
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a334:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a338:	d108      	bne.n	800a34c <_scanf_float+0x1d4>
 800a33a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a33e:	6022      	str	r2, [r4, #0]
 800a340:	f04f 0a01 	mov.w	sl, #1
 800a344:	e7e4      	b.n	800a310 <_scanf_float+0x198>
 800a346:	f1ba 0f02 	cmp.w	sl, #2
 800a34a:	d050      	beq.n	800a3ee <_scanf_float+0x276>
 800a34c:	2d01      	cmp	r5, #1
 800a34e:	d002      	beq.n	800a356 <_scanf_float+0x1de>
 800a350:	2d04      	cmp	r5, #4
 800a352:	f47f af44 	bne.w	800a1de <_scanf_float+0x66>
 800a356:	3501      	adds	r5, #1
 800a358:	b2ed      	uxtb	r5, r5
 800a35a:	e7d9      	b.n	800a310 <_scanf_float+0x198>
 800a35c:	f1ba 0f01 	cmp.w	sl, #1
 800a360:	f47f af3d 	bne.w	800a1de <_scanf_float+0x66>
 800a364:	f04f 0a02 	mov.w	sl, #2
 800a368:	e7d2      	b.n	800a310 <_scanf_float+0x198>
 800a36a:	b975      	cbnz	r5, 800a38a <_scanf_float+0x212>
 800a36c:	2f00      	cmp	r7, #0
 800a36e:	f47f af37 	bne.w	800a1e0 <_scanf_float+0x68>
 800a372:	6822      	ldr	r2, [r4, #0]
 800a374:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a378:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a37c:	f040 8103 	bne.w	800a586 <_scanf_float+0x40e>
 800a380:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a384:	6022      	str	r2, [r4, #0]
 800a386:	2501      	movs	r5, #1
 800a388:	e7c2      	b.n	800a310 <_scanf_float+0x198>
 800a38a:	2d03      	cmp	r5, #3
 800a38c:	d0e3      	beq.n	800a356 <_scanf_float+0x1de>
 800a38e:	2d05      	cmp	r5, #5
 800a390:	e7df      	b.n	800a352 <_scanf_float+0x1da>
 800a392:	2d02      	cmp	r5, #2
 800a394:	f47f af23 	bne.w	800a1de <_scanf_float+0x66>
 800a398:	2503      	movs	r5, #3
 800a39a:	e7b9      	b.n	800a310 <_scanf_float+0x198>
 800a39c:	2d06      	cmp	r5, #6
 800a39e:	f47f af1e 	bne.w	800a1de <_scanf_float+0x66>
 800a3a2:	2507      	movs	r5, #7
 800a3a4:	e7b4      	b.n	800a310 <_scanf_float+0x198>
 800a3a6:	6822      	ldr	r2, [r4, #0]
 800a3a8:	0591      	lsls	r1, r2, #22
 800a3aa:	f57f af18 	bpl.w	800a1de <_scanf_float+0x66>
 800a3ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a3b2:	6022      	str	r2, [r4, #0]
 800a3b4:	9702      	str	r7, [sp, #8]
 800a3b6:	e7ab      	b.n	800a310 <_scanf_float+0x198>
 800a3b8:	6822      	ldr	r2, [r4, #0]
 800a3ba:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a3be:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a3c2:	d005      	beq.n	800a3d0 <_scanf_float+0x258>
 800a3c4:	0550      	lsls	r0, r2, #21
 800a3c6:	f57f af0a 	bpl.w	800a1de <_scanf_float+0x66>
 800a3ca:	2f00      	cmp	r7, #0
 800a3cc:	f000 80db 	beq.w	800a586 <_scanf_float+0x40e>
 800a3d0:	0591      	lsls	r1, r2, #22
 800a3d2:	bf58      	it	pl
 800a3d4:	9902      	ldrpl	r1, [sp, #8]
 800a3d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a3da:	bf58      	it	pl
 800a3dc:	1a79      	subpl	r1, r7, r1
 800a3de:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a3e2:	bf58      	it	pl
 800a3e4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a3e8:	6022      	str	r2, [r4, #0]
 800a3ea:	2700      	movs	r7, #0
 800a3ec:	e790      	b.n	800a310 <_scanf_float+0x198>
 800a3ee:	f04f 0a03 	mov.w	sl, #3
 800a3f2:	e78d      	b.n	800a310 <_scanf_float+0x198>
 800a3f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	4798      	blx	r3
 800a3fe:	2800      	cmp	r0, #0
 800a400:	f43f aedf 	beq.w	800a1c2 <_scanf_float+0x4a>
 800a404:	e6eb      	b.n	800a1de <_scanf_float+0x66>
 800a406:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a40a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a40e:	464a      	mov	r2, r9
 800a410:	4640      	mov	r0, r8
 800a412:	4798      	blx	r3
 800a414:	6923      	ldr	r3, [r4, #16]
 800a416:	3b01      	subs	r3, #1
 800a418:	6123      	str	r3, [r4, #16]
 800a41a:	e6eb      	b.n	800a1f4 <_scanf_float+0x7c>
 800a41c:	1e6b      	subs	r3, r5, #1
 800a41e:	2b06      	cmp	r3, #6
 800a420:	d824      	bhi.n	800a46c <_scanf_float+0x2f4>
 800a422:	2d02      	cmp	r5, #2
 800a424:	d836      	bhi.n	800a494 <_scanf_float+0x31c>
 800a426:	9b01      	ldr	r3, [sp, #4]
 800a428:	429e      	cmp	r6, r3
 800a42a:	f67f aee7 	bls.w	800a1fc <_scanf_float+0x84>
 800a42e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a432:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a436:	464a      	mov	r2, r9
 800a438:	4640      	mov	r0, r8
 800a43a:	4798      	blx	r3
 800a43c:	6923      	ldr	r3, [r4, #16]
 800a43e:	3b01      	subs	r3, #1
 800a440:	6123      	str	r3, [r4, #16]
 800a442:	e7f0      	b.n	800a426 <_scanf_float+0x2ae>
 800a444:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a448:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a44c:	464a      	mov	r2, r9
 800a44e:	4640      	mov	r0, r8
 800a450:	4798      	blx	r3
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	3b01      	subs	r3, #1
 800a456:	6123      	str	r3, [r4, #16]
 800a458:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a45c:	fa5f fa8a 	uxtb.w	sl, sl
 800a460:	f1ba 0f02 	cmp.w	sl, #2
 800a464:	d1ee      	bne.n	800a444 <_scanf_float+0x2cc>
 800a466:	3d03      	subs	r5, #3
 800a468:	b2ed      	uxtb	r5, r5
 800a46a:	1b76      	subs	r6, r6, r5
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	05da      	lsls	r2, r3, #23
 800a470:	d530      	bpl.n	800a4d4 <_scanf_float+0x35c>
 800a472:	055b      	lsls	r3, r3, #21
 800a474:	d511      	bpl.n	800a49a <_scanf_float+0x322>
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	429e      	cmp	r6, r3
 800a47a:	f67f aebf 	bls.w	800a1fc <_scanf_float+0x84>
 800a47e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a482:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a486:	464a      	mov	r2, r9
 800a488:	4640      	mov	r0, r8
 800a48a:	4798      	blx	r3
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	3b01      	subs	r3, #1
 800a490:	6123      	str	r3, [r4, #16]
 800a492:	e7f0      	b.n	800a476 <_scanf_float+0x2fe>
 800a494:	46aa      	mov	sl, r5
 800a496:	46b3      	mov	fp, r6
 800a498:	e7de      	b.n	800a458 <_scanf_float+0x2e0>
 800a49a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a49e:	6923      	ldr	r3, [r4, #16]
 800a4a0:	2965      	cmp	r1, #101	@ 0x65
 800a4a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a4aa:	6123      	str	r3, [r4, #16]
 800a4ac:	d00c      	beq.n	800a4c8 <_scanf_float+0x350>
 800a4ae:	2945      	cmp	r1, #69	@ 0x45
 800a4b0:	d00a      	beq.n	800a4c8 <_scanf_float+0x350>
 800a4b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4b6:	464a      	mov	r2, r9
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4798      	blx	r3
 800a4bc:	6923      	ldr	r3, [r4, #16]
 800a4be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	1eb5      	subs	r5, r6, #2
 800a4c6:	6123      	str	r3, [r4, #16]
 800a4c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4cc:	464a      	mov	r2, r9
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	4798      	blx	r3
 800a4d2:	462e      	mov	r6, r5
 800a4d4:	6822      	ldr	r2, [r4, #0]
 800a4d6:	f012 0210 	ands.w	r2, r2, #16
 800a4da:	d001      	beq.n	800a4e0 <_scanf_float+0x368>
 800a4dc:	2000      	movs	r0, #0
 800a4de:	e68e      	b.n	800a1fe <_scanf_float+0x86>
 800a4e0:	7032      	strb	r2, [r6, #0]
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a4e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4ec:	d125      	bne.n	800a53a <_scanf_float+0x3c2>
 800a4ee:	9b02      	ldr	r3, [sp, #8]
 800a4f0:	429f      	cmp	r7, r3
 800a4f2:	d00a      	beq.n	800a50a <_scanf_float+0x392>
 800a4f4:	1bda      	subs	r2, r3, r7
 800a4f6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a4fa:	429e      	cmp	r6, r3
 800a4fc:	bf28      	it	cs
 800a4fe:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a502:	4922      	ldr	r1, [pc, #136]	@ (800a58c <_scanf_float+0x414>)
 800a504:	4630      	mov	r0, r6
 800a506:	f000 f9ad 	bl	800a864 <siprintf>
 800a50a:	9901      	ldr	r1, [sp, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	4640      	mov	r0, r8
 800a510:	f002 fdb2 	bl	800d078 <_strtod_r>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	6821      	ldr	r1, [r4, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f011 0f02 	tst.w	r1, #2
 800a51e:	ec57 6b10 	vmov	r6, r7, d0
 800a522:	f103 0204 	add.w	r2, r3, #4
 800a526:	d015      	beq.n	800a554 <_scanf_float+0x3dc>
 800a528:	9903      	ldr	r1, [sp, #12]
 800a52a:	600a      	str	r2, [r1, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	e9c3 6700 	strd	r6, r7, [r3]
 800a532:	68e3      	ldr	r3, [r4, #12]
 800a534:	3301      	adds	r3, #1
 800a536:	60e3      	str	r3, [r4, #12]
 800a538:	e7d0      	b.n	800a4dc <_scanf_float+0x364>
 800a53a:	9b04      	ldr	r3, [sp, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0e4      	beq.n	800a50a <_scanf_float+0x392>
 800a540:	9905      	ldr	r1, [sp, #20]
 800a542:	230a      	movs	r3, #10
 800a544:	3101      	adds	r1, #1
 800a546:	4640      	mov	r0, r8
 800a548:	f7ff f9b4 	bl	80098b4 <_strtol_r>
 800a54c:	9b04      	ldr	r3, [sp, #16]
 800a54e:	9e05      	ldr	r6, [sp, #20]
 800a550:	1ac2      	subs	r2, r0, r3
 800a552:	e7d0      	b.n	800a4f6 <_scanf_float+0x37e>
 800a554:	f011 0f04 	tst.w	r1, #4
 800a558:	9903      	ldr	r1, [sp, #12]
 800a55a:	600a      	str	r2, [r1, #0]
 800a55c:	d1e6      	bne.n	800a52c <_scanf_float+0x3b4>
 800a55e:	681d      	ldr	r5, [r3, #0]
 800a560:	4632      	mov	r2, r6
 800a562:	463b      	mov	r3, r7
 800a564:	4630      	mov	r0, r6
 800a566:	4639      	mov	r1, r7
 800a568:	f7f6 fae0 	bl	8000b2c <__aeabi_dcmpun>
 800a56c:	b128      	cbz	r0, 800a57a <_scanf_float+0x402>
 800a56e:	4808      	ldr	r0, [pc, #32]	@ (800a590 <_scanf_float+0x418>)
 800a570:	f000 fb76 	bl	800ac60 <nanf>
 800a574:	ed85 0a00 	vstr	s0, [r5]
 800a578:	e7db      	b.n	800a532 <_scanf_float+0x3ba>
 800a57a:	4630      	mov	r0, r6
 800a57c:	4639      	mov	r1, r7
 800a57e:	f7f6 fb33 	bl	8000be8 <__aeabi_d2f>
 800a582:	6028      	str	r0, [r5, #0]
 800a584:	e7d5      	b.n	800a532 <_scanf_float+0x3ba>
 800a586:	2700      	movs	r7, #0
 800a588:	e62e      	b.n	800a1e8 <_scanf_float+0x70>
 800a58a:	bf00      	nop
 800a58c:	0800ec27 	.word	0x0800ec27
 800a590:	0800ed83 	.word	0x0800ed83

0800a594 <std>:
 800a594:	2300      	movs	r3, #0
 800a596:	b510      	push	{r4, lr}
 800a598:	4604      	mov	r4, r0
 800a59a:	e9c0 3300 	strd	r3, r3, [r0]
 800a59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5a2:	6083      	str	r3, [r0, #8]
 800a5a4:	8181      	strh	r1, [r0, #12]
 800a5a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5a8:	81c2      	strh	r2, [r0, #14]
 800a5aa:	6183      	str	r3, [r0, #24]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	2208      	movs	r2, #8
 800a5b0:	305c      	adds	r0, #92	@ 0x5c
 800a5b2:	f000 fa7f 	bl	800aab4 <memset>
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <std+0x58>)
 800a5b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f0 <std+0x5c>)
 800a5bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5be:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f4 <std+0x60>)
 800a5c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f8 <std+0x64>)
 800a5c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5fc <std+0x68>)
 800a5c8:	6224      	str	r4, [r4, #32]
 800a5ca:	429c      	cmp	r4, r3
 800a5cc:	d006      	beq.n	800a5dc <std+0x48>
 800a5ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5d2:	4294      	cmp	r4, r2
 800a5d4:	d002      	beq.n	800a5dc <std+0x48>
 800a5d6:	33d0      	adds	r3, #208	@ 0xd0
 800a5d8:	429c      	cmp	r4, r3
 800a5da:	d105      	bne.n	800a5e8 <std+0x54>
 800a5dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e4:	f000 bb2a 	b.w	800ac3c <__retarget_lock_init_recursive>
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	bf00      	nop
 800a5ec:	0800a901 	.word	0x0800a901
 800a5f0:	0800a927 	.word	0x0800a927
 800a5f4:	0800a95f 	.word	0x0800a95f
 800a5f8:	0800a983 	.word	0x0800a983
 800a5fc:	20002050 	.word	0x20002050

0800a600 <stdio_exit_handler>:
 800a600:	4a02      	ldr	r2, [pc, #8]	@ (800a60c <stdio_exit_handler+0xc>)
 800a602:	4903      	ldr	r1, [pc, #12]	@ (800a610 <stdio_exit_handler+0x10>)
 800a604:	4803      	ldr	r0, [pc, #12]	@ (800a614 <stdio_exit_handler+0x14>)
 800a606:	f000 b869 	b.w	800a6dc <_fwalk_sglue>
 800a60a:	bf00      	nop
 800a60c:	200000fc 	.word	0x200000fc
 800a610:	0800dcfd 	.word	0x0800dcfd
 800a614:	2000010c 	.word	0x2000010c

0800a618 <cleanup_stdio>:
 800a618:	6841      	ldr	r1, [r0, #4]
 800a61a:	4b0c      	ldr	r3, [pc, #48]	@ (800a64c <cleanup_stdio+0x34>)
 800a61c:	4299      	cmp	r1, r3
 800a61e:	b510      	push	{r4, lr}
 800a620:	4604      	mov	r4, r0
 800a622:	d001      	beq.n	800a628 <cleanup_stdio+0x10>
 800a624:	f003 fb6a 	bl	800dcfc <_fflush_r>
 800a628:	68a1      	ldr	r1, [r4, #8]
 800a62a:	4b09      	ldr	r3, [pc, #36]	@ (800a650 <cleanup_stdio+0x38>)
 800a62c:	4299      	cmp	r1, r3
 800a62e:	d002      	beq.n	800a636 <cleanup_stdio+0x1e>
 800a630:	4620      	mov	r0, r4
 800a632:	f003 fb63 	bl	800dcfc <_fflush_r>
 800a636:	68e1      	ldr	r1, [r4, #12]
 800a638:	4b06      	ldr	r3, [pc, #24]	@ (800a654 <cleanup_stdio+0x3c>)
 800a63a:	4299      	cmp	r1, r3
 800a63c:	d004      	beq.n	800a648 <cleanup_stdio+0x30>
 800a63e:	4620      	mov	r0, r4
 800a640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a644:	f003 bb5a 	b.w	800dcfc <_fflush_r>
 800a648:	bd10      	pop	{r4, pc}
 800a64a:	bf00      	nop
 800a64c:	20002050 	.word	0x20002050
 800a650:	200020b8 	.word	0x200020b8
 800a654:	20002120 	.word	0x20002120

0800a658 <global_stdio_init.part.0>:
 800a658:	b510      	push	{r4, lr}
 800a65a:	4b0b      	ldr	r3, [pc, #44]	@ (800a688 <global_stdio_init.part.0+0x30>)
 800a65c:	4c0b      	ldr	r4, [pc, #44]	@ (800a68c <global_stdio_init.part.0+0x34>)
 800a65e:	4a0c      	ldr	r2, [pc, #48]	@ (800a690 <global_stdio_init.part.0+0x38>)
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	4620      	mov	r0, r4
 800a664:	2200      	movs	r2, #0
 800a666:	2104      	movs	r1, #4
 800a668:	f7ff ff94 	bl	800a594 <std>
 800a66c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a670:	2201      	movs	r2, #1
 800a672:	2109      	movs	r1, #9
 800a674:	f7ff ff8e 	bl	800a594 <std>
 800a678:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a67c:	2202      	movs	r2, #2
 800a67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a682:	2112      	movs	r1, #18
 800a684:	f7ff bf86 	b.w	800a594 <std>
 800a688:	20002188 	.word	0x20002188
 800a68c:	20002050 	.word	0x20002050
 800a690:	0800a601 	.word	0x0800a601

0800a694 <__sfp_lock_acquire>:
 800a694:	4801      	ldr	r0, [pc, #4]	@ (800a69c <__sfp_lock_acquire+0x8>)
 800a696:	f000 bad2 	b.w	800ac3e <__retarget_lock_acquire_recursive>
 800a69a:	bf00      	nop
 800a69c:	20002191 	.word	0x20002191

0800a6a0 <__sfp_lock_release>:
 800a6a0:	4801      	ldr	r0, [pc, #4]	@ (800a6a8 <__sfp_lock_release+0x8>)
 800a6a2:	f000 bacd 	b.w	800ac40 <__retarget_lock_release_recursive>
 800a6a6:	bf00      	nop
 800a6a8:	20002191 	.word	0x20002191

0800a6ac <__sinit>:
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	f7ff fff0 	bl	800a694 <__sfp_lock_acquire>
 800a6b4:	6a23      	ldr	r3, [r4, #32]
 800a6b6:	b11b      	cbz	r3, 800a6c0 <__sinit+0x14>
 800a6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6bc:	f7ff bff0 	b.w	800a6a0 <__sfp_lock_release>
 800a6c0:	4b04      	ldr	r3, [pc, #16]	@ (800a6d4 <__sinit+0x28>)
 800a6c2:	6223      	str	r3, [r4, #32]
 800a6c4:	4b04      	ldr	r3, [pc, #16]	@ (800a6d8 <__sinit+0x2c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1f5      	bne.n	800a6b8 <__sinit+0xc>
 800a6cc:	f7ff ffc4 	bl	800a658 <global_stdio_init.part.0>
 800a6d0:	e7f2      	b.n	800a6b8 <__sinit+0xc>
 800a6d2:	bf00      	nop
 800a6d4:	0800a619 	.word	0x0800a619
 800a6d8:	20002188 	.word	0x20002188

0800a6dc <_fwalk_sglue>:
 800a6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e0:	4607      	mov	r7, r0
 800a6e2:	4688      	mov	r8, r1
 800a6e4:	4614      	mov	r4, r2
 800a6e6:	2600      	movs	r6, #0
 800a6e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6ec:	f1b9 0901 	subs.w	r9, r9, #1
 800a6f0:	d505      	bpl.n	800a6fe <_fwalk_sglue+0x22>
 800a6f2:	6824      	ldr	r4, [r4, #0]
 800a6f4:	2c00      	cmp	r4, #0
 800a6f6:	d1f7      	bne.n	800a6e8 <_fwalk_sglue+0xc>
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d907      	bls.n	800a714 <_fwalk_sglue+0x38>
 800a704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a708:	3301      	adds	r3, #1
 800a70a:	d003      	beq.n	800a714 <_fwalk_sglue+0x38>
 800a70c:	4629      	mov	r1, r5
 800a70e:	4638      	mov	r0, r7
 800a710:	47c0      	blx	r8
 800a712:	4306      	orrs	r6, r0
 800a714:	3568      	adds	r5, #104	@ 0x68
 800a716:	e7e9      	b.n	800a6ec <_fwalk_sglue+0x10>

0800a718 <iprintf>:
 800a718:	b40f      	push	{r0, r1, r2, r3}
 800a71a:	b507      	push	{r0, r1, r2, lr}
 800a71c:	4906      	ldr	r1, [pc, #24]	@ (800a738 <iprintf+0x20>)
 800a71e:	ab04      	add	r3, sp, #16
 800a720:	6808      	ldr	r0, [r1, #0]
 800a722:	f853 2b04 	ldr.w	r2, [r3], #4
 800a726:	6881      	ldr	r1, [r0, #8]
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	f002 fffd 	bl	800d728 <_vfiprintf_r>
 800a72e:	b003      	add	sp, #12
 800a730:	f85d eb04 	ldr.w	lr, [sp], #4
 800a734:	b004      	add	sp, #16
 800a736:	4770      	bx	lr
 800a738:	20000108 	.word	0x20000108

0800a73c <_puts_r>:
 800a73c:	6a03      	ldr	r3, [r0, #32]
 800a73e:	b570      	push	{r4, r5, r6, lr}
 800a740:	6884      	ldr	r4, [r0, #8]
 800a742:	4605      	mov	r5, r0
 800a744:	460e      	mov	r6, r1
 800a746:	b90b      	cbnz	r3, 800a74c <_puts_r+0x10>
 800a748:	f7ff ffb0 	bl	800a6ac <__sinit>
 800a74c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a74e:	07db      	lsls	r3, r3, #31
 800a750:	d405      	bmi.n	800a75e <_puts_r+0x22>
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	0598      	lsls	r0, r3, #22
 800a756:	d402      	bmi.n	800a75e <_puts_r+0x22>
 800a758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a75a:	f000 fa70 	bl	800ac3e <__retarget_lock_acquire_recursive>
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	0719      	lsls	r1, r3, #28
 800a762:	d502      	bpl.n	800a76a <_puts_r+0x2e>
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d135      	bne.n	800a7d6 <_puts_r+0x9a>
 800a76a:	4621      	mov	r1, r4
 800a76c:	4628      	mov	r0, r5
 800a76e:	f000 f94b 	bl	800aa08 <__swsetup_r>
 800a772:	b380      	cbz	r0, 800a7d6 <_puts_r+0x9a>
 800a774:	f04f 35ff 	mov.w	r5, #4294967295
 800a778:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a77a:	07da      	lsls	r2, r3, #31
 800a77c:	d405      	bmi.n	800a78a <_puts_r+0x4e>
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	059b      	lsls	r3, r3, #22
 800a782:	d402      	bmi.n	800a78a <_puts_r+0x4e>
 800a784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a786:	f000 fa5b 	bl	800ac40 <__retarget_lock_release_recursive>
 800a78a:	4628      	mov	r0, r5
 800a78c:	bd70      	pop	{r4, r5, r6, pc}
 800a78e:	2b00      	cmp	r3, #0
 800a790:	da04      	bge.n	800a79c <_puts_r+0x60>
 800a792:	69a2      	ldr	r2, [r4, #24]
 800a794:	429a      	cmp	r2, r3
 800a796:	dc17      	bgt.n	800a7c8 <_puts_r+0x8c>
 800a798:	290a      	cmp	r1, #10
 800a79a:	d015      	beq.n	800a7c8 <_puts_r+0x8c>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	6022      	str	r2, [r4, #0]
 800a7a2:	7019      	strb	r1, [r3, #0]
 800a7a4:	68a3      	ldr	r3, [r4, #8]
 800a7a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	60a3      	str	r3, [r4, #8]
 800a7ae:	2900      	cmp	r1, #0
 800a7b0:	d1ed      	bne.n	800a78e <_puts_r+0x52>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	da11      	bge.n	800a7da <_puts_r+0x9e>
 800a7b6:	4622      	mov	r2, r4
 800a7b8:	210a      	movs	r1, #10
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f000 f8e5 	bl	800a98a <__swbuf_r>
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	d0d7      	beq.n	800a774 <_puts_r+0x38>
 800a7c4:	250a      	movs	r5, #10
 800a7c6:	e7d7      	b.n	800a778 <_puts_r+0x3c>
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f000 f8dd 	bl	800a98a <__swbuf_r>
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	d1e7      	bne.n	800a7a4 <_puts_r+0x68>
 800a7d4:	e7ce      	b.n	800a774 <_puts_r+0x38>
 800a7d6:	3e01      	subs	r6, #1
 800a7d8:	e7e4      	b.n	800a7a4 <_puts_r+0x68>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	1c5a      	adds	r2, r3, #1
 800a7de:	6022      	str	r2, [r4, #0]
 800a7e0:	220a      	movs	r2, #10
 800a7e2:	701a      	strb	r2, [r3, #0]
 800a7e4:	e7ee      	b.n	800a7c4 <_puts_r+0x88>
	...

0800a7e8 <puts>:
 800a7e8:	4b02      	ldr	r3, [pc, #8]	@ (800a7f4 <puts+0xc>)
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	f7ff bfa5 	b.w	800a73c <_puts_r>
 800a7f2:	bf00      	nop
 800a7f4:	20000108 	.word	0x20000108

0800a7f8 <sniprintf>:
 800a7f8:	b40c      	push	{r2, r3}
 800a7fa:	b530      	push	{r4, r5, lr}
 800a7fc:	4b18      	ldr	r3, [pc, #96]	@ (800a860 <sniprintf+0x68>)
 800a7fe:	1e0c      	subs	r4, r1, #0
 800a800:	681d      	ldr	r5, [r3, #0]
 800a802:	b09d      	sub	sp, #116	@ 0x74
 800a804:	da08      	bge.n	800a818 <sniprintf+0x20>
 800a806:	238b      	movs	r3, #139	@ 0x8b
 800a808:	602b      	str	r3, [r5, #0]
 800a80a:	f04f 30ff 	mov.w	r0, #4294967295
 800a80e:	b01d      	add	sp, #116	@ 0x74
 800a810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a814:	b002      	add	sp, #8
 800a816:	4770      	bx	lr
 800a818:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a81c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a820:	f04f 0300 	mov.w	r3, #0
 800a824:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a826:	bf14      	ite	ne
 800a828:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a82c:	4623      	moveq	r3, r4
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	9307      	str	r3, [sp, #28]
 800a832:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a836:	9002      	str	r0, [sp, #8]
 800a838:	9006      	str	r0, [sp, #24]
 800a83a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a83e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a840:	ab21      	add	r3, sp, #132	@ 0x84
 800a842:	a902      	add	r1, sp, #8
 800a844:	4628      	mov	r0, r5
 800a846:	9301      	str	r3, [sp, #4]
 800a848:	f002 fc78 	bl	800d13c <_svfiprintf_r>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	bfbc      	itt	lt
 800a850:	238b      	movlt	r3, #139	@ 0x8b
 800a852:	602b      	strlt	r3, [r5, #0]
 800a854:	2c00      	cmp	r4, #0
 800a856:	d0da      	beq.n	800a80e <sniprintf+0x16>
 800a858:	9b02      	ldr	r3, [sp, #8]
 800a85a:	2200      	movs	r2, #0
 800a85c:	701a      	strb	r2, [r3, #0]
 800a85e:	e7d6      	b.n	800a80e <sniprintf+0x16>
 800a860:	20000108 	.word	0x20000108

0800a864 <siprintf>:
 800a864:	b40e      	push	{r1, r2, r3}
 800a866:	b510      	push	{r4, lr}
 800a868:	b09d      	sub	sp, #116	@ 0x74
 800a86a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a86c:	9002      	str	r0, [sp, #8]
 800a86e:	9006      	str	r0, [sp, #24]
 800a870:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a874:	480a      	ldr	r0, [pc, #40]	@ (800a8a0 <siprintf+0x3c>)
 800a876:	9107      	str	r1, [sp, #28]
 800a878:	9104      	str	r1, [sp, #16]
 800a87a:	490a      	ldr	r1, [pc, #40]	@ (800a8a4 <siprintf+0x40>)
 800a87c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a880:	9105      	str	r1, [sp, #20]
 800a882:	2400      	movs	r4, #0
 800a884:	a902      	add	r1, sp, #8
 800a886:	6800      	ldr	r0, [r0, #0]
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a88c:	f002 fc56 	bl	800d13c <_svfiprintf_r>
 800a890:	9b02      	ldr	r3, [sp, #8]
 800a892:	701c      	strb	r4, [r3, #0]
 800a894:	b01d      	add	sp, #116	@ 0x74
 800a896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a89a:	b003      	add	sp, #12
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	20000108 	.word	0x20000108
 800a8a4:	ffff0208 	.word	0xffff0208

0800a8a8 <siscanf>:
 800a8a8:	b40e      	push	{r1, r2, r3}
 800a8aa:	b570      	push	{r4, r5, r6, lr}
 800a8ac:	b09d      	sub	sp, #116	@ 0x74
 800a8ae:	ac21      	add	r4, sp, #132	@ 0x84
 800a8b0:	2500      	movs	r5, #0
 800a8b2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a8b6:	f854 6b04 	ldr.w	r6, [r4], #4
 800a8ba:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a8be:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a8c0:	9002      	str	r0, [sp, #8]
 800a8c2:	9006      	str	r0, [sp, #24]
 800a8c4:	f7f5 fcd4 	bl	8000270 <strlen>
 800a8c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f8 <siscanf+0x50>)
 800a8ca:	9003      	str	r0, [sp, #12]
 800a8cc:	9007      	str	r0, [sp, #28]
 800a8ce:	480b      	ldr	r0, [pc, #44]	@ (800a8fc <siscanf+0x54>)
 800a8d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a8d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8da:	4632      	mov	r2, r6
 800a8dc:	4623      	mov	r3, r4
 800a8de:	a902      	add	r1, sp, #8
 800a8e0:	6800      	ldr	r0, [r0, #0]
 800a8e2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a8e4:	9514      	str	r5, [sp, #80]	@ 0x50
 800a8e6:	9401      	str	r4, [sp, #4]
 800a8e8:	f002 fd7e 	bl	800d3e8 <__ssvfiscanf_r>
 800a8ec:	b01d      	add	sp, #116	@ 0x74
 800a8ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8f2:	b003      	add	sp, #12
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	0800a923 	.word	0x0800a923
 800a8fc:	20000108 	.word	0x20000108

0800a900 <__sread>:
 800a900:	b510      	push	{r4, lr}
 800a902:	460c      	mov	r4, r1
 800a904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a908:	f000 f94a 	bl	800aba0 <_read_r>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	bfab      	itete	ge
 800a910:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a912:	89a3      	ldrhlt	r3, [r4, #12]
 800a914:	181b      	addge	r3, r3, r0
 800a916:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a91a:	bfac      	ite	ge
 800a91c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a91e:	81a3      	strhlt	r3, [r4, #12]
 800a920:	bd10      	pop	{r4, pc}

0800a922 <__seofread>:
 800a922:	2000      	movs	r0, #0
 800a924:	4770      	bx	lr

0800a926 <__swrite>:
 800a926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92a:	461f      	mov	r7, r3
 800a92c:	898b      	ldrh	r3, [r1, #12]
 800a92e:	05db      	lsls	r3, r3, #23
 800a930:	4605      	mov	r5, r0
 800a932:	460c      	mov	r4, r1
 800a934:	4616      	mov	r6, r2
 800a936:	d505      	bpl.n	800a944 <__swrite+0x1e>
 800a938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93c:	2302      	movs	r3, #2
 800a93e:	2200      	movs	r2, #0
 800a940:	f000 f91c 	bl	800ab7c <_lseek_r>
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a94a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a94e:	81a3      	strh	r3, [r4, #12]
 800a950:	4632      	mov	r2, r6
 800a952:	463b      	mov	r3, r7
 800a954:	4628      	mov	r0, r5
 800a956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a95a:	f000 b933 	b.w	800abc4 <_write_r>

0800a95e <__sseek>:
 800a95e:	b510      	push	{r4, lr}
 800a960:	460c      	mov	r4, r1
 800a962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a966:	f000 f909 	bl	800ab7c <_lseek_r>
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	bf15      	itete	ne
 800a970:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a97a:	81a3      	strheq	r3, [r4, #12]
 800a97c:	bf18      	it	ne
 800a97e:	81a3      	strhne	r3, [r4, #12]
 800a980:	bd10      	pop	{r4, pc}

0800a982 <__sclose>:
 800a982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a986:	f000 b8e9 	b.w	800ab5c <_close_r>

0800a98a <__swbuf_r>:
 800a98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98c:	460e      	mov	r6, r1
 800a98e:	4614      	mov	r4, r2
 800a990:	4605      	mov	r5, r0
 800a992:	b118      	cbz	r0, 800a99c <__swbuf_r+0x12>
 800a994:	6a03      	ldr	r3, [r0, #32]
 800a996:	b90b      	cbnz	r3, 800a99c <__swbuf_r+0x12>
 800a998:	f7ff fe88 	bl	800a6ac <__sinit>
 800a99c:	69a3      	ldr	r3, [r4, #24]
 800a99e:	60a3      	str	r3, [r4, #8]
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	071a      	lsls	r2, r3, #28
 800a9a4:	d501      	bpl.n	800a9aa <__swbuf_r+0x20>
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	b943      	cbnz	r3, 800a9bc <__swbuf_r+0x32>
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 f82b 	bl	800aa08 <__swsetup_r>
 800a9b2:	b118      	cbz	r0, 800a9bc <__swbuf_r+0x32>
 800a9b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	6922      	ldr	r2, [r4, #16]
 800a9c0:	1a98      	subs	r0, r3, r2
 800a9c2:	6963      	ldr	r3, [r4, #20]
 800a9c4:	b2f6      	uxtb	r6, r6
 800a9c6:	4283      	cmp	r3, r0
 800a9c8:	4637      	mov	r7, r6
 800a9ca:	dc05      	bgt.n	800a9d8 <__swbuf_r+0x4e>
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f003 f994 	bl	800dcfc <_fflush_r>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d1ed      	bne.n	800a9b4 <__swbuf_r+0x2a>
 800a9d8:	68a3      	ldr	r3, [r4, #8]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	60a3      	str	r3, [r4, #8]
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	6022      	str	r2, [r4, #0]
 800a9e4:	701e      	strb	r6, [r3, #0]
 800a9e6:	6962      	ldr	r2, [r4, #20]
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d004      	beq.n	800a9f8 <__swbuf_r+0x6e>
 800a9ee:	89a3      	ldrh	r3, [r4, #12]
 800a9f0:	07db      	lsls	r3, r3, #31
 800a9f2:	d5e1      	bpl.n	800a9b8 <__swbuf_r+0x2e>
 800a9f4:	2e0a      	cmp	r6, #10
 800a9f6:	d1df      	bne.n	800a9b8 <__swbuf_r+0x2e>
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f003 f97e 	bl	800dcfc <_fflush_r>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d0d9      	beq.n	800a9b8 <__swbuf_r+0x2e>
 800aa04:	e7d6      	b.n	800a9b4 <__swbuf_r+0x2a>
	...

0800aa08 <__swsetup_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4b29      	ldr	r3, [pc, #164]	@ (800aab0 <__swsetup_r+0xa8>)
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	6818      	ldr	r0, [r3, #0]
 800aa10:	460c      	mov	r4, r1
 800aa12:	b118      	cbz	r0, 800aa1c <__swsetup_r+0x14>
 800aa14:	6a03      	ldr	r3, [r0, #32]
 800aa16:	b90b      	cbnz	r3, 800aa1c <__swsetup_r+0x14>
 800aa18:	f7ff fe48 	bl	800a6ac <__sinit>
 800aa1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa20:	0719      	lsls	r1, r3, #28
 800aa22:	d422      	bmi.n	800aa6a <__swsetup_r+0x62>
 800aa24:	06da      	lsls	r2, r3, #27
 800aa26:	d407      	bmi.n	800aa38 <__swsetup_r+0x30>
 800aa28:	2209      	movs	r2, #9
 800aa2a:	602a      	str	r2, [r5, #0]
 800aa2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa30:	81a3      	strh	r3, [r4, #12]
 800aa32:	f04f 30ff 	mov.w	r0, #4294967295
 800aa36:	e033      	b.n	800aaa0 <__swsetup_r+0x98>
 800aa38:	0758      	lsls	r0, r3, #29
 800aa3a:	d512      	bpl.n	800aa62 <__swsetup_r+0x5a>
 800aa3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa3e:	b141      	cbz	r1, 800aa52 <__swsetup_r+0x4a>
 800aa40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa44:	4299      	cmp	r1, r3
 800aa46:	d002      	beq.n	800aa4e <__swsetup_r+0x46>
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f000 ff69 	bl	800b920 <_free_r>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	6063      	str	r3, [r4, #4]
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	f043 0308 	orr.w	r3, r3, #8
 800aa68:	81a3      	strh	r3, [r4, #12]
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	b94b      	cbnz	r3, 800aa82 <__swsetup_r+0x7a>
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa78:	d003      	beq.n	800aa82 <__swsetup_r+0x7a>
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	f003 f98b 	bl	800dd98 <__smakebuf_r>
 800aa82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa86:	f013 0201 	ands.w	r2, r3, #1
 800aa8a:	d00a      	beq.n	800aaa2 <__swsetup_r+0x9a>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	60a2      	str	r2, [r4, #8]
 800aa90:	6962      	ldr	r2, [r4, #20]
 800aa92:	4252      	negs	r2, r2
 800aa94:	61a2      	str	r2, [r4, #24]
 800aa96:	6922      	ldr	r2, [r4, #16]
 800aa98:	b942      	cbnz	r2, 800aaac <__swsetup_r+0xa4>
 800aa9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa9e:	d1c5      	bne.n	800aa2c <__swsetup_r+0x24>
 800aaa0:	bd38      	pop	{r3, r4, r5, pc}
 800aaa2:	0799      	lsls	r1, r3, #30
 800aaa4:	bf58      	it	pl
 800aaa6:	6962      	ldrpl	r2, [r4, #20]
 800aaa8:	60a2      	str	r2, [r4, #8]
 800aaaa:	e7f4      	b.n	800aa96 <__swsetup_r+0x8e>
 800aaac:	2000      	movs	r0, #0
 800aaae:	e7f7      	b.n	800aaa0 <__swsetup_r+0x98>
 800aab0:	20000108 	.word	0x20000108

0800aab4 <memset>:
 800aab4:	4402      	add	r2, r0
 800aab6:	4603      	mov	r3, r0
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d100      	bne.n	800aabe <memset+0xa>
 800aabc:	4770      	bx	lr
 800aabe:	f803 1b01 	strb.w	r1, [r3], #1
 800aac2:	e7f9      	b.n	800aab8 <memset+0x4>

0800aac4 <strchr>:
 800aac4:	b2c9      	uxtb	r1, r1
 800aac6:	4603      	mov	r3, r0
 800aac8:	4618      	mov	r0, r3
 800aaca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aace:	b112      	cbz	r2, 800aad6 <strchr+0x12>
 800aad0:	428a      	cmp	r2, r1
 800aad2:	d1f9      	bne.n	800aac8 <strchr+0x4>
 800aad4:	4770      	bx	lr
 800aad6:	2900      	cmp	r1, #0
 800aad8:	bf18      	it	ne
 800aada:	2000      	movne	r0, #0
 800aadc:	4770      	bx	lr

0800aade <strncmp>:
 800aade:	b510      	push	{r4, lr}
 800aae0:	b16a      	cbz	r2, 800aafe <strncmp+0x20>
 800aae2:	3901      	subs	r1, #1
 800aae4:	1884      	adds	r4, r0, r2
 800aae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d103      	bne.n	800aafa <strncmp+0x1c>
 800aaf2:	42a0      	cmp	r0, r4
 800aaf4:	d001      	beq.n	800aafa <strncmp+0x1c>
 800aaf6:	2a00      	cmp	r2, #0
 800aaf8:	d1f5      	bne.n	800aae6 <strncmp+0x8>
 800aafa:	1ad0      	subs	r0, r2, r3
 800aafc:	bd10      	pop	{r4, pc}
 800aafe:	4610      	mov	r0, r2
 800ab00:	e7fc      	b.n	800aafc <strncmp+0x1e>

0800ab02 <strncpy>:
 800ab02:	b510      	push	{r4, lr}
 800ab04:	3901      	subs	r1, #1
 800ab06:	4603      	mov	r3, r0
 800ab08:	b132      	cbz	r2, 800ab18 <strncpy+0x16>
 800ab0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab0e:	f803 4b01 	strb.w	r4, [r3], #1
 800ab12:	3a01      	subs	r2, #1
 800ab14:	2c00      	cmp	r4, #0
 800ab16:	d1f7      	bne.n	800ab08 <strncpy+0x6>
 800ab18:	441a      	add	r2, r3
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d100      	bne.n	800ab22 <strncpy+0x20>
 800ab20:	bd10      	pop	{r4, pc}
 800ab22:	f803 1b01 	strb.w	r1, [r3], #1
 800ab26:	e7f9      	b.n	800ab1c <strncpy+0x1a>

0800ab28 <strstr>:
 800ab28:	780a      	ldrb	r2, [r1, #0]
 800ab2a:	b570      	push	{r4, r5, r6, lr}
 800ab2c:	b96a      	cbnz	r2, 800ab4a <strstr+0x22>
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d109      	bne.n	800ab48 <strstr+0x20>
 800ab34:	460c      	mov	r4, r1
 800ab36:	4605      	mov	r5, r0
 800ab38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0f6      	beq.n	800ab2e <strstr+0x6>
 800ab40:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ab44:	429e      	cmp	r6, r3
 800ab46:	d0f7      	beq.n	800ab38 <strstr+0x10>
 800ab48:	3001      	adds	r0, #1
 800ab4a:	7803      	ldrb	r3, [r0, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1ef      	bne.n	800ab30 <strstr+0x8>
 800ab50:	4618      	mov	r0, r3
 800ab52:	e7ec      	b.n	800ab2e <strstr+0x6>

0800ab54 <_localeconv_r>:
 800ab54:	4800      	ldr	r0, [pc, #0]	@ (800ab58 <_localeconv_r+0x4>)
 800ab56:	4770      	bx	lr
 800ab58:	20000248 	.word	0x20000248

0800ab5c <_close_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d06      	ldr	r5, [pc, #24]	@ (800ab78 <_close_r+0x1c>)
 800ab60:	2300      	movs	r3, #0
 800ab62:	4604      	mov	r4, r0
 800ab64:	4608      	mov	r0, r1
 800ab66:	602b      	str	r3, [r5, #0]
 800ab68:	f7f7 f818 	bl	8001b9c <_close>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_close_r+0x1a>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_close_r+0x1a>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	2000218c 	.word	0x2000218c

0800ab7c <_lseek_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4d07      	ldr	r5, [pc, #28]	@ (800ab9c <_lseek_r+0x20>)
 800ab80:	4604      	mov	r4, r0
 800ab82:	4608      	mov	r0, r1
 800ab84:	4611      	mov	r1, r2
 800ab86:	2200      	movs	r2, #0
 800ab88:	602a      	str	r2, [r5, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	f7f7 f82d 	bl	8001bea <_lseek>
 800ab90:	1c43      	adds	r3, r0, #1
 800ab92:	d102      	bne.n	800ab9a <_lseek_r+0x1e>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	b103      	cbz	r3, 800ab9a <_lseek_r+0x1e>
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	2000218c 	.word	0x2000218c

0800aba0 <_read_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4d07      	ldr	r5, [pc, #28]	@ (800abc0 <_read_r+0x20>)
 800aba4:	4604      	mov	r4, r0
 800aba6:	4608      	mov	r0, r1
 800aba8:	4611      	mov	r1, r2
 800abaa:	2200      	movs	r2, #0
 800abac:	602a      	str	r2, [r5, #0]
 800abae:	461a      	mov	r2, r3
 800abb0:	f7f6 ffbb 	bl	8001b2a <_read>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d102      	bne.n	800abbe <_read_r+0x1e>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	b103      	cbz	r3, 800abbe <_read_r+0x1e>
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	2000218c 	.word	0x2000218c

0800abc4 <_write_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4d07      	ldr	r5, [pc, #28]	@ (800abe4 <_write_r+0x20>)
 800abc8:	4604      	mov	r4, r0
 800abca:	4608      	mov	r0, r1
 800abcc:	4611      	mov	r1, r2
 800abce:	2200      	movs	r2, #0
 800abd0:	602a      	str	r2, [r5, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	f7f6 ffc6 	bl	8001b64 <_write>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_write_r+0x1e>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_write_r+0x1e>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	2000218c 	.word	0x2000218c

0800abe8 <__errno>:
 800abe8:	4b01      	ldr	r3, [pc, #4]	@ (800abf0 <__errno+0x8>)
 800abea:	6818      	ldr	r0, [r3, #0]
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	20000108 	.word	0x20000108

0800abf4 <__libc_init_array>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	4d0d      	ldr	r5, [pc, #52]	@ (800ac2c <__libc_init_array+0x38>)
 800abf8:	4c0d      	ldr	r4, [pc, #52]	@ (800ac30 <__libc_init_array+0x3c>)
 800abfa:	1b64      	subs	r4, r4, r5
 800abfc:	10a4      	asrs	r4, r4, #2
 800abfe:	2600      	movs	r6, #0
 800ac00:	42a6      	cmp	r6, r4
 800ac02:	d109      	bne.n	800ac18 <__libc_init_array+0x24>
 800ac04:	4d0b      	ldr	r5, [pc, #44]	@ (800ac34 <__libc_init_array+0x40>)
 800ac06:	4c0c      	ldr	r4, [pc, #48]	@ (800ac38 <__libc_init_array+0x44>)
 800ac08:	f003 fe5a 	bl	800e8c0 <_init>
 800ac0c:	1b64      	subs	r4, r4, r5
 800ac0e:	10a4      	asrs	r4, r4, #2
 800ac10:	2600      	movs	r6, #0
 800ac12:	42a6      	cmp	r6, r4
 800ac14:	d105      	bne.n	800ac22 <__libc_init_array+0x2e>
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac1c:	4798      	blx	r3
 800ac1e:	3601      	adds	r6, #1
 800ac20:	e7ee      	b.n	800ac00 <__libc_init_array+0xc>
 800ac22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac26:	4798      	blx	r3
 800ac28:	3601      	adds	r6, #1
 800ac2a:	e7f2      	b.n	800ac12 <__libc_init_array+0x1e>
 800ac2c:	0800ef38 	.word	0x0800ef38
 800ac30:	0800ef38 	.word	0x0800ef38
 800ac34:	0800ef38 	.word	0x0800ef38
 800ac38:	0800ef3c 	.word	0x0800ef3c

0800ac3c <__retarget_lock_init_recursive>:
 800ac3c:	4770      	bx	lr

0800ac3e <__retarget_lock_acquire_recursive>:
 800ac3e:	4770      	bx	lr

0800ac40 <__retarget_lock_release_recursive>:
 800ac40:	4770      	bx	lr

0800ac42 <memcpy>:
 800ac42:	440a      	add	r2, r1
 800ac44:	4291      	cmp	r1, r2
 800ac46:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac4a:	d100      	bne.n	800ac4e <memcpy+0xc>
 800ac4c:	4770      	bx	lr
 800ac4e:	b510      	push	{r4, lr}
 800ac50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac58:	4291      	cmp	r1, r2
 800ac5a:	d1f9      	bne.n	800ac50 <memcpy+0xe>
 800ac5c:	bd10      	pop	{r4, pc}
	...

0800ac60 <nanf>:
 800ac60:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ac68 <nanf+0x8>
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	7fc00000 	.word	0x7fc00000

0800ac6c <quorem>:
 800ac6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac70:	6903      	ldr	r3, [r0, #16]
 800ac72:	690c      	ldr	r4, [r1, #16]
 800ac74:	42a3      	cmp	r3, r4
 800ac76:	4607      	mov	r7, r0
 800ac78:	db7e      	blt.n	800ad78 <quorem+0x10c>
 800ac7a:	3c01      	subs	r4, #1
 800ac7c:	f101 0814 	add.w	r8, r1, #20
 800ac80:	00a3      	lsls	r3, r4, #2
 800ac82:	f100 0514 	add.w	r5, r0, #20
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac96:	3301      	adds	r3, #1
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800aca2:	d32e      	bcc.n	800ad02 <quorem+0x96>
 800aca4:	f04f 0a00 	mov.w	sl, #0
 800aca8:	46c4      	mov	ip, r8
 800acaa:	46ae      	mov	lr, r5
 800acac:	46d3      	mov	fp, sl
 800acae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800acb2:	b298      	uxth	r0, r3
 800acb4:	fb06 a000 	mla	r0, r6, r0, sl
 800acb8:	0c02      	lsrs	r2, r0, #16
 800acba:	0c1b      	lsrs	r3, r3, #16
 800acbc:	fb06 2303 	mla	r3, r6, r3, r2
 800acc0:	f8de 2000 	ldr.w	r2, [lr]
 800acc4:	b280      	uxth	r0, r0
 800acc6:	b292      	uxth	r2, r2
 800acc8:	1a12      	subs	r2, r2, r0
 800acca:	445a      	add	r2, fp
 800accc:	f8de 0000 	ldr.w	r0, [lr]
 800acd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800acda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800acde:	b292      	uxth	r2, r2
 800ace0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ace4:	45e1      	cmp	r9, ip
 800ace6:	f84e 2b04 	str.w	r2, [lr], #4
 800acea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800acee:	d2de      	bcs.n	800acae <quorem+0x42>
 800acf0:	9b00      	ldr	r3, [sp, #0]
 800acf2:	58eb      	ldr	r3, [r5, r3]
 800acf4:	b92b      	cbnz	r3, 800ad02 <quorem+0x96>
 800acf6:	9b01      	ldr	r3, [sp, #4]
 800acf8:	3b04      	subs	r3, #4
 800acfa:	429d      	cmp	r5, r3
 800acfc:	461a      	mov	r2, r3
 800acfe:	d32f      	bcc.n	800ad60 <quorem+0xf4>
 800ad00:	613c      	str	r4, [r7, #16]
 800ad02:	4638      	mov	r0, r7
 800ad04:	f001 f9c8 	bl	800c098 <__mcmp>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	db25      	blt.n	800ad58 <quorem+0xec>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	2000      	movs	r0, #0
 800ad10:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad14:	f8d1 c000 	ldr.w	ip, [r1]
 800ad18:	fa1f fe82 	uxth.w	lr, r2
 800ad1c:	fa1f f38c 	uxth.w	r3, ip
 800ad20:	eba3 030e 	sub.w	r3, r3, lr
 800ad24:	4403      	add	r3, r0
 800ad26:	0c12      	lsrs	r2, r2, #16
 800ad28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ad2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad36:	45c1      	cmp	r9, r8
 800ad38:	f841 3b04 	str.w	r3, [r1], #4
 800ad3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad40:	d2e6      	bcs.n	800ad10 <quorem+0xa4>
 800ad42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad4a:	b922      	cbnz	r2, 800ad56 <quorem+0xea>
 800ad4c:	3b04      	subs	r3, #4
 800ad4e:	429d      	cmp	r5, r3
 800ad50:	461a      	mov	r2, r3
 800ad52:	d30b      	bcc.n	800ad6c <quorem+0x100>
 800ad54:	613c      	str	r4, [r7, #16]
 800ad56:	3601      	adds	r6, #1
 800ad58:	4630      	mov	r0, r6
 800ad5a:	b003      	add	sp, #12
 800ad5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad60:	6812      	ldr	r2, [r2, #0]
 800ad62:	3b04      	subs	r3, #4
 800ad64:	2a00      	cmp	r2, #0
 800ad66:	d1cb      	bne.n	800ad00 <quorem+0x94>
 800ad68:	3c01      	subs	r4, #1
 800ad6a:	e7c6      	b.n	800acfa <quorem+0x8e>
 800ad6c:	6812      	ldr	r2, [r2, #0]
 800ad6e:	3b04      	subs	r3, #4
 800ad70:	2a00      	cmp	r2, #0
 800ad72:	d1ef      	bne.n	800ad54 <quorem+0xe8>
 800ad74:	3c01      	subs	r4, #1
 800ad76:	e7ea      	b.n	800ad4e <quorem+0xe2>
 800ad78:	2000      	movs	r0, #0
 800ad7a:	e7ee      	b.n	800ad5a <quorem+0xee>
 800ad7c:	0000      	movs	r0, r0
	...

0800ad80 <_dtoa_r>:
 800ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad84:	69c7      	ldr	r7, [r0, #28]
 800ad86:	b097      	sub	sp, #92	@ 0x5c
 800ad88:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ad8c:	ec55 4b10 	vmov	r4, r5, d0
 800ad90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ad92:	9107      	str	r1, [sp, #28]
 800ad94:	4681      	mov	r9, r0
 800ad96:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad98:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad9a:	b97f      	cbnz	r7, 800adbc <_dtoa_r+0x3c>
 800ad9c:	2010      	movs	r0, #16
 800ad9e:	f000 fe09 	bl	800b9b4 <malloc>
 800ada2:	4602      	mov	r2, r0
 800ada4:	f8c9 001c 	str.w	r0, [r9, #28]
 800ada8:	b920      	cbnz	r0, 800adb4 <_dtoa_r+0x34>
 800adaa:	4ba9      	ldr	r3, [pc, #676]	@ (800b050 <_dtoa_r+0x2d0>)
 800adac:	21ef      	movs	r1, #239	@ 0xef
 800adae:	48a9      	ldr	r0, [pc, #676]	@ (800b054 <_dtoa_r+0x2d4>)
 800adb0:	f003 f8f6 	bl	800dfa0 <__assert_func>
 800adb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800adb8:	6007      	str	r7, [r0, #0]
 800adba:	60c7      	str	r7, [r0, #12]
 800adbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800adc0:	6819      	ldr	r1, [r3, #0]
 800adc2:	b159      	cbz	r1, 800addc <_dtoa_r+0x5c>
 800adc4:	685a      	ldr	r2, [r3, #4]
 800adc6:	604a      	str	r2, [r1, #4]
 800adc8:	2301      	movs	r3, #1
 800adca:	4093      	lsls	r3, r2
 800adcc:	608b      	str	r3, [r1, #8]
 800adce:	4648      	mov	r0, r9
 800add0:	f000 fee6 	bl	800bba0 <_Bfree>
 800add4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	1e2b      	subs	r3, r5, #0
 800adde:	bfb9      	ittee	lt
 800ade0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ade4:	9305      	strlt	r3, [sp, #20]
 800ade6:	2300      	movge	r3, #0
 800ade8:	6033      	strge	r3, [r6, #0]
 800adea:	9f05      	ldr	r7, [sp, #20]
 800adec:	4b9a      	ldr	r3, [pc, #616]	@ (800b058 <_dtoa_r+0x2d8>)
 800adee:	bfbc      	itt	lt
 800adf0:	2201      	movlt	r2, #1
 800adf2:	6032      	strlt	r2, [r6, #0]
 800adf4:	43bb      	bics	r3, r7
 800adf6:	d112      	bne.n	800ae1e <_dtoa_r+0x9e>
 800adf8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800adfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae04:	4323      	orrs	r3, r4
 800ae06:	f000 855a 	beq.w	800b8be <_dtoa_r+0xb3e>
 800ae0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae0c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b06c <_dtoa_r+0x2ec>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 855c 	beq.w	800b8ce <_dtoa_r+0xb4e>
 800ae16:	f10a 0303 	add.w	r3, sl, #3
 800ae1a:	f000 bd56 	b.w	800b8ca <_dtoa_r+0xb4a>
 800ae1e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ae22:	2200      	movs	r2, #0
 800ae24:	ec51 0b17 	vmov	r0, r1, d7
 800ae28:	2300      	movs	r3, #0
 800ae2a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ae2e:	f7f5 fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae32:	4680      	mov	r8, r0
 800ae34:	b158      	cbz	r0, 800ae4e <_dtoa_r+0xce>
 800ae36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ae38:	2301      	movs	r3, #1
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae3e:	b113      	cbz	r3, 800ae46 <_dtoa_r+0xc6>
 800ae40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ae42:	4b86      	ldr	r3, [pc, #536]	@ (800b05c <_dtoa_r+0x2dc>)
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b070 <_dtoa_r+0x2f0>
 800ae4a:	f000 bd40 	b.w	800b8ce <_dtoa_r+0xb4e>
 800ae4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ae52:	aa14      	add	r2, sp, #80	@ 0x50
 800ae54:	a915      	add	r1, sp, #84	@ 0x54
 800ae56:	4648      	mov	r0, r9
 800ae58:	f001 fa3e 	bl	800c2d8 <__d2b>
 800ae5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ae60:	9002      	str	r0, [sp, #8]
 800ae62:	2e00      	cmp	r6, #0
 800ae64:	d078      	beq.n	800af58 <_dtoa_r+0x1d8>
 800ae66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae68:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ae6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ae78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ae7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ae80:	4619      	mov	r1, r3
 800ae82:	2200      	movs	r2, #0
 800ae84:	4b76      	ldr	r3, [pc, #472]	@ (800b060 <_dtoa_r+0x2e0>)
 800ae86:	f7f5 f9ff 	bl	8000288 <__aeabi_dsub>
 800ae8a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b038 <_dtoa_r+0x2b8>)
 800ae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae90:	f7f5 fbb2 	bl	80005f8 <__aeabi_dmul>
 800ae94:	a36a      	add	r3, pc, #424	@ (adr r3, 800b040 <_dtoa_r+0x2c0>)
 800ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9a:	f7f5 f9f7 	bl	800028c <__adddf3>
 800ae9e:	4604      	mov	r4, r0
 800aea0:	4630      	mov	r0, r6
 800aea2:	460d      	mov	r5, r1
 800aea4:	f7f5 fb3e 	bl	8000524 <__aeabi_i2d>
 800aea8:	a367      	add	r3, pc, #412	@ (adr r3, 800b048 <_dtoa_r+0x2c8>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	f7f5 fba3 	bl	80005f8 <__aeabi_dmul>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7f5 f9e7 	bl	800028c <__adddf3>
 800aebe:	4604      	mov	r4, r0
 800aec0:	460d      	mov	r5, r1
 800aec2:	f7f5 fe49 	bl	8000b58 <__aeabi_d2iz>
 800aec6:	2200      	movs	r2, #0
 800aec8:	4607      	mov	r7, r0
 800aeca:	2300      	movs	r3, #0
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 fe04 	bl	8000adc <__aeabi_dcmplt>
 800aed4:	b140      	cbz	r0, 800aee8 <_dtoa_r+0x168>
 800aed6:	4638      	mov	r0, r7
 800aed8:	f7f5 fb24 	bl	8000524 <__aeabi_i2d>
 800aedc:	4622      	mov	r2, r4
 800aede:	462b      	mov	r3, r5
 800aee0:	f7f5 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800aee4:	b900      	cbnz	r0, 800aee8 <_dtoa_r+0x168>
 800aee6:	3f01      	subs	r7, #1
 800aee8:	2f16      	cmp	r7, #22
 800aeea:	d852      	bhi.n	800af92 <_dtoa_r+0x212>
 800aeec:	4b5d      	ldr	r3, [pc, #372]	@ (800b064 <_dtoa_r+0x2e4>)
 800aeee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aefa:	f7f5 fdef 	bl	8000adc <__aeabi_dcmplt>
 800aefe:	2800      	cmp	r0, #0
 800af00:	d049      	beq.n	800af96 <_dtoa_r+0x216>
 800af02:	3f01      	subs	r7, #1
 800af04:	2300      	movs	r3, #0
 800af06:	9310      	str	r3, [sp, #64]	@ 0x40
 800af08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af0a:	1b9b      	subs	r3, r3, r6
 800af0c:	1e5a      	subs	r2, r3, #1
 800af0e:	bf45      	ittet	mi
 800af10:	f1c3 0301 	rsbmi	r3, r3, #1
 800af14:	9300      	strmi	r3, [sp, #0]
 800af16:	2300      	movpl	r3, #0
 800af18:	2300      	movmi	r3, #0
 800af1a:	9206      	str	r2, [sp, #24]
 800af1c:	bf54      	ite	pl
 800af1e:	9300      	strpl	r3, [sp, #0]
 800af20:	9306      	strmi	r3, [sp, #24]
 800af22:	2f00      	cmp	r7, #0
 800af24:	db39      	blt.n	800af9a <_dtoa_r+0x21a>
 800af26:	9b06      	ldr	r3, [sp, #24]
 800af28:	970d      	str	r7, [sp, #52]	@ 0x34
 800af2a:	443b      	add	r3, r7
 800af2c:	9306      	str	r3, [sp, #24]
 800af2e:	2300      	movs	r3, #0
 800af30:	9308      	str	r3, [sp, #32]
 800af32:	9b07      	ldr	r3, [sp, #28]
 800af34:	2b09      	cmp	r3, #9
 800af36:	d863      	bhi.n	800b000 <_dtoa_r+0x280>
 800af38:	2b05      	cmp	r3, #5
 800af3a:	bfc4      	itt	gt
 800af3c:	3b04      	subgt	r3, #4
 800af3e:	9307      	strgt	r3, [sp, #28]
 800af40:	9b07      	ldr	r3, [sp, #28]
 800af42:	f1a3 0302 	sub.w	r3, r3, #2
 800af46:	bfcc      	ite	gt
 800af48:	2400      	movgt	r4, #0
 800af4a:	2401      	movle	r4, #1
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d863      	bhi.n	800b018 <_dtoa_r+0x298>
 800af50:	e8df f003 	tbb	[pc, r3]
 800af54:	2b375452 	.word	0x2b375452
 800af58:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800af5c:	441e      	add	r6, r3
 800af5e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800af62:	2b20      	cmp	r3, #32
 800af64:	bfc1      	itttt	gt
 800af66:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800af6a:	409f      	lslgt	r7, r3
 800af6c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800af70:	fa24 f303 	lsrgt.w	r3, r4, r3
 800af74:	bfd6      	itet	le
 800af76:	f1c3 0320 	rsble	r3, r3, #32
 800af7a:	ea47 0003 	orrgt.w	r0, r7, r3
 800af7e:	fa04 f003 	lslle.w	r0, r4, r3
 800af82:	f7f5 fabf 	bl	8000504 <__aeabi_ui2d>
 800af86:	2201      	movs	r2, #1
 800af88:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800af8c:	3e01      	subs	r6, #1
 800af8e:	9212      	str	r2, [sp, #72]	@ 0x48
 800af90:	e776      	b.n	800ae80 <_dtoa_r+0x100>
 800af92:	2301      	movs	r3, #1
 800af94:	e7b7      	b.n	800af06 <_dtoa_r+0x186>
 800af96:	9010      	str	r0, [sp, #64]	@ 0x40
 800af98:	e7b6      	b.n	800af08 <_dtoa_r+0x188>
 800af9a:	9b00      	ldr	r3, [sp, #0]
 800af9c:	1bdb      	subs	r3, r3, r7
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	427b      	negs	r3, r7
 800afa2:	9308      	str	r3, [sp, #32]
 800afa4:	2300      	movs	r3, #0
 800afa6:	930d      	str	r3, [sp, #52]	@ 0x34
 800afa8:	e7c3      	b.n	800af32 <_dtoa_r+0x1b2>
 800afaa:	2301      	movs	r3, #1
 800afac:	9309      	str	r3, [sp, #36]	@ 0x24
 800afae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afb0:	eb07 0b03 	add.w	fp, r7, r3
 800afb4:	f10b 0301 	add.w	r3, fp, #1
 800afb8:	2b01      	cmp	r3, #1
 800afba:	9303      	str	r3, [sp, #12]
 800afbc:	bfb8      	it	lt
 800afbe:	2301      	movlt	r3, #1
 800afc0:	e006      	b.n	800afd0 <_dtoa_r+0x250>
 800afc2:	2301      	movs	r3, #1
 800afc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dd28      	ble.n	800b01e <_dtoa_r+0x29e>
 800afcc:	469b      	mov	fp, r3
 800afce:	9303      	str	r3, [sp, #12]
 800afd0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800afd4:	2100      	movs	r1, #0
 800afd6:	2204      	movs	r2, #4
 800afd8:	f102 0514 	add.w	r5, r2, #20
 800afdc:	429d      	cmp	r5, r3
 800afde:	d926      	bls.n	800b02e <_dtoa_r+0x2ae>
 800afe0:	6041      	str	r1, [r0, #4]
 800afe2:	4648      	mov	r0, r9
 800afe4:	f000 fd9c 	bl	800bb20 <_Balloc>
 800afe8:	4682      	mov	sl, r0
 800afea:	2800      	cmp	r0, #0
 800afec:	d142      	bne.n	800b074 <_dtoa_r+0x2f4>
 800afee:	4b1e      	ldr	r3, [pc, #120]	@ (800b068 <_dtoa_r+0x2e8>)
 800aff0:	4602      	mov	r2, r0
 800aff2:	f240 11af 	movw	r1, #431	@ 0x1af
 800aff6:	e6da      	b.n	800adae <_dtoa_r+0x2e>
 800aff8:	2300      	movs	r3, #0
 800affa:	e7e3      	b.n	800afc4 <_dtoa_r+0x244>
 800affc:	2300      	movs	r3, #0
 800affe:	e7d5      	b.n	800afac <_dtoa_r+0x22c>
 800b000:	2401      	movs	r4, #1
 800b002:	2300      	movs	r3, #0
 800b004:	9307      	str	r3, [sp, #28]
 800b006:	9409      	str	r4, [sp, #36]	@ 0x24
 800b008:	f04f 3bff 	mov.w	fp, #4294967295
 800b00c:	2200      	movs	r2, #0
 800b00e:	f8cd b00c 	str.w	fp, [sp, #12]
 800b012:	2312      	movs	r3, #18
 800b014:	920c      	str	r2, [sp, #48]	@ 0x30
 800b016:	e7db      	b.n	800afd0 <_dtoa_r+0x250>
 800b018:	2301      	movs	r3, #1
 800b01a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b01c:	e7f4      	b.n	800b008 <_dtoa_r+0x288>
 800b01e:	f04f 0b01 	mov.w	fp, #1
 800b022:	f8cd b00c 	str.w	fp, [sp, #12]
 800b026:	465b      	mov	r3, fp
 800b028:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b02c:	e7d0      	b.n	800afd0 <_dtoa_r+0x250>
 800b02e:	3101      	adds	r1, #1
 800b030:	0052      	lsls	r2, r2, #1
 800b032:	e7d1      	b.n	800afd8 <_dtoa_r+0x258>
 800b034:	f3af 8000 	nop.w
 800b038:	636f4361 	.word	0x636f4361
 800b03c:	3fd287a7 	.word	0x3fd287a7
 800b040:	8b60c8b3 	.word	0x8b60c8b3
 800b044:	3fc68a28 	.word	0x3fc68a28
 800b048:	509f79fb 	.word	0x509f79fb
 800b04c:	3fd34413 	.word	0x3fd34413
 800b050:	0800ec39 	.word	0x0800ec39
 800b054:	0800ec50 	.word	0x0800ec50
 800b058:	7ff00000 	.word	0x7ff00000
 800b05c:	0800ed3c 	.word	0x0800ed3c
 800b060:	3ff80000 	.word	0x3ff80000
 800b064:	0800ee18 	.word	0x0800ee18
 800b068:	0800eca8 	.word	0x0800eca8
 800b06c:	0800ec35 	.word	0x0800ec35
 800b070:	0800ed3b 	.word	0x0800ed3b
 800b074:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b078:	6018      	str	r0, [r3, #0]
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	2b0e      	cmp	r3, #14
 800b07e:	f200 80a1 	bhi.w	800b1c4 <_dtoa_r+0x444>
 800b082:	2c00      	cmp	r4, #0
 800b084:	f000 809e 	beq.w	800b1c4 <_dtoa_r+0x444>
 800b088:	2f00      	cmp	r7, #0
 800b08a:	dd33      	ble.n	800b0f4 <_dtoa_r+0x374>
 800b08c:	4b9c      	ldr	r3, [pc, #624]	@ (800b300 <_dtoa_r+0x580>)
 800b08e:	f007 020f 	and.w	r2, r7, #15
 800b092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b096:	ed93 7b00 	vldr	d7, [r3]
 800b09a:	05f8      	lsls	r0, r7, #23
 800b09c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b0a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b0a4:	d516      	bpl.n	800b0d4 <_dtoa_r+0x354>
 800b0a6:	4b97      	ldr	r3, [pc, #604]	@ (800b304 <_dtoa_r+0x584>)
 800b0a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b0ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0b0:	f7f5 fbcc 	bl	800084c <__aeabi_ddiv>
 800b0b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0b8:	f004 040f 	and.w	r4, r4, #15
 800b0bc:	2603      	movs	r6, #3
 800b0be:	4d91      	ldr	r5, [pc, #580]	@ (800b304 <_dtoa_r+0x584>)
 800b0c0:	b954      	cbnz	r4, 800b0d8 <_dtoa_r+0x358>
 800b0c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0ca:	f7f5 fbbf 	bl	800084c <__aeabi_ddiv>
 800b0ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0d2:	e028      	b.n	800b126 <_dtoa_r+0x3a6>
 800b0d4:	2602      	movs	r6, #2
 800b0d6:	e7f2      	b.n	800b0be <_dtoa_r+0x33e>
 800b0d8:	07e1      	lsls	r1, r4, #31
 800b0da:	d508      	bpl.n	800b0ee <_dtoa_r+0x36e>
 800b0dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b0e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0e4:	f7f5 fa88 	bl	80005f8 <__aeabi_dmul>
 800b0e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b0ec:	3601      	adds	r6, #1
 800b0ee:	1064      	asrs	r4, r4, #1
 800b0f0:	3508      	adds	r5, #8
 800b0f2:	e7e5      	b.n	800b0c0 <_dtoa_r+0x340>
 800b0f4:	f000 80af 	beq.w	800b256 <_dtoa_r+0x4d6>
 800b0f8:	427c      	negs	r4, r7
 800b0fa:	4b81      	ldr	r3, [pc, #516]	@ (800b300 <_dtoa_r+0x580>)
 800b0fc:	4d81      	ldr	r5, [pc, #516]	@ (800b304 <_dtoa_r+0x584>)
 800b0fe:	f004 020f 	and.w	r2, r4, #15
 800b102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b10e:	f7f5 fa73 	bl	80005f8 <__aeabi_dmul>
 800b112:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b116:	1124      	asrs	r4, r4, #4
 800b118:	2300      	movs	r3, #0
 800b11a:	2602      	movs	r6, #2
 800b11c:	2c00      	cmp	r4, #0
 800b11e:	f040 808f 	bne.w	800b240 <_dtoa_r+0x4c0>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1d3      	bne.n	800b0ce <_dtoa_r+0x34e>
 800b126:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b128:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 8094 	beq.w	800b25a <_dtoa_r+0x4da>
 800b132:	4b75      	ldr	r3, [pc, #468]	@ (800b308 <_dtoa_r+0x588>)
 800b134:	2200      	movs	r2, #0
 800b136:	4620      	mov	r0, r4
 800b138:	4629      	mov	r1, r5
 800b13a:	f7f5 fccf 	bl	8000adc <__aeabi_dcmplt>
 800b13e:	2800      	cmp	r0, #0
 800b140:	f000 808b 	beq.w	800b25a <_dtoa_r+0x4da>
 800b144:	9b03      	ldr	r3, [sp, #12]
 800b146:	2b00      	cmp	r3, #0
 800b148:	f000 8087 	beq.w	800b25a <_dtoa_r+0x4da>
 800b14c:	f1bb 0f00 	cmp.w	fp, #0
 800b150:	dd34      	ble.n	800b1bc <_dtoa_r+0x43c>
 800b152:	4620      	mov	r0, r4
 800b154:	4b6d      	ldr	r3, [pc, #436]	@ (800b30c <_dtoa_r+0x58c>)
 800b156:	2200      	movs	r2, #0
 800b158:	4629      	mov	r1, r5
 800b15a:	f7f5 fa4d 	bl	80005f8 <__aeabi_dmul>
 800b15e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b162:	f107 38ff 	add.w	r8, r7, #4294967295
 800b166:	3601      	adds	r6, #1
 800b168:	465c      	mov	r4, fp
 800b16a:	4630      	mov	r0, r6
 800b16c:	f7f5 f9da 	bl	8000524 <__aeabi_i2d>
 800b170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b174:	f7f5 fa40 	bl	80005f8 <__aeabi_dmul>
 800b178:	4b65      	ldr	r3, [pc, #404]	@ (800b310 <_dtoa_r+0x590>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	f7f5 f886 	bl	800028c <__adddf3>
 800b180:	4605      	mov	r5, r0
 800b182:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b186:	2c00      	cmp	r4, #0
 800b188:	d16a      	bne.n	800b260 <_dtoa_r+0x4e0>
 800b18a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b18e:	4b61      	ldr	r3, [pc, #388]	@ (800b314 <_dtoa_r+0x594>)
 800b190:	2200      	movs	r2, #0
 800b192:	f7f5 f879 	bl	8000288 <__aeabi_dsub>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b19e:	462a      	mov	r2, r5
 800b1a0:	4633      	mov	r3, r6
 800b1a2:	f7f5 fcb9 	bl	8000b18 <__aeabi_dcmpgt>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f040 8298 	bne.w	800b6dc <_dtoa_r+0x95c>
 800b1ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1b0:	462a      	mov	r2, r5
 800b1b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b1b6:	f7f5 fc91 	bl	8000adc <__aeabi_dcmplt>
 800b1ba:	bb38      	cbnz	r0, 800b20c <_dtoa_r+0x48c>
 800b1bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b1c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b1c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f2c0 8157 	blt.w	800b47a <_dtoa_r+0x6fa>
 800b1cc:	2f0e      	cmp	r7, #14
 800b1ce:	f300 8154 	bgt.w	800b47a <_dtoa_r+0x6fa>
 800b1d2:	4b4b      	ldr	r3, [pc, #300]	@ (800b300 <_dtoa_r+0x580>)
 800b1d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1d8:	ed93 7b00 	vldr	d7, [r3]
 800b1dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	ed8d 7b00 	vstr	d7, [sp]
 800b1e4:	f280 80e5 	bge.w	800b3b2 <_dtoa_r+0x632>
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f300 80e1 	bgt.w	800b3b2 <_dtoa_r+0x632>
 800b1f0:	d10c      	bne.n	800b20c <_dtoa_r+0x48c>
 800b1f2:	4b48      	ldr	r3, [pc, #288]	@ (800b314 <_dtoa_r+0x594>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	ec51 0b17 	vmov	r0, r1, d7
 800b1fa:	f7f5 f9fd 	bl	80005f8 <__aeabi_dmul>
 800b1fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b202:	f7f5 fc7f 	bl	8000b04 <__aeabi_dcmpge>
 800b206:	2800      	cmp	r0, #0
 800b208:	f000 8266 	beq.w	800b6d8 <_dtoa_r+0x958>
 800b20c:	2400      	movs	r4, #0
 800b20e:	4625      	mov	r5, r4
 800b210:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b212:	4656      	mov	r6, sl
 800b214:	ea6f 0803 	mvn.w	r8, r3
 800b218:	2700      	movs	r7, #0
 800b21a:	4621      	mov	r1, r4
 800b21c:	4648      	mov	r0, r9
 800b21e:	f000 fcbf 	bl	800bba0 <_Bfree>
 800b222:	2d00      	cmp	r5, #0
 800b224:	f000 80bd 	beq.w	800b3a2 <_dtoa_r+0x622>
 800b228:	b12f      	cbz	r7, 800b236 <_dtoa_r+0x4b6>
 800b22a:	42af      	cmp	r7, r5
 800b22c:	d003      	beq.n	800b236 <_dtoa_r+0x4b6>
 800b22e:	4639      	mov	r1, r7
 800b230:	4648      	mov	r0, r9
 800b232:	f000 fcb5 	bl	800bba0 <_Bfree>
 800b236:	4629      	mov	r1, r5
 800b238:	4648      	mov	r0, r9
 800b23a:	f000 fcb1 	bl	800bba0 <_Bfree>
 800b23e:	e0b0      	b.n	800b3a2 <_dtoa_r+0x622>
 800b240:	07e2      	lsls	r2, r4, #31
 800b242:	d505      	bpl.n	800b250 <_dtoa_r+0x4d0>
 800b244:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b248:	f7f5 f9d6 	bl	80005f8 <__aeabi_dmul>
 800b24c:	3601      	adds	r6, #1
 800b24e:	2301      	movs	r3, #1
 800b250:	1064      	asrs	r4, r4, #1
 800b252:	3508      	adds	r5, #8
 800b254:	e762      	b.n	800b11c <_dtoa_r+0x39c>
 800b256:	2602      	movs	r6, #2
 800b258:	e765      	b.n	800b126 <_dtoa_r+0x3a6>
 800b25a:	9c03      	ldr	r4, [sp, #12]
 800b25c:	46b8      	mov	r8, r7
 800b25e:	e784      	b.n	800b16a <_dtoa_r+0x3ea>
 800b260:	4b27      	ldr	r3, [pc, #156]	@ (800b300 <_dtoa_r+0x580>)
 800b262:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b264:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b268:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b26c:	4454      	add	r4, sl
 800b26e:	2900      	cmp	r1, #0
 800b270:	d054      	beq.n	800b31c <_dtoa_r+0x59c>
 800b272:	4929      	ldr	r1, [pc, #164]	@ (800b318 <_dtoa_r+0x598>)
 800b274:	2000      	movs	r0, #0
 800b276:	f7f5 fae9 	bl	800084c <__aeabi_ddiv>
 800b27a:	4633      	mov	r3, r6
 800b27c:	462a      	mov	r2, r5
 800b27e:	f7f5 f803 	bl	8000288 <__aeabi_dsub>
 800b282:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b286:	4656      	mov	r6, sl
 800b288:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b28c:	f7f5 fc64 	bl	8000b58 <__aeabi_d2iz>
 800b290:	4605      	mov	r5, r0
 800b292:	f7f5 f947 	bl	8000524 <__aeabi_i2d>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b29e:	f7f4 fff3 	bl	8000288 <__aeabi_dsub>
 800b2a2:	3530      	adds	r5, #48	@ 0x30
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b2ac:	f806 5b01 	strb.w	r5, [r6], #1
 800b2b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b2b4:	f7f5 fc12 	bl	8000adc <__aeabi_dcmplt>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d172      	bne.n	800b3a2 <_dtoa_r+0x622>
 800b2bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2c0:	4911      	ldr	r1, [pc, #68]	@ (800b308 <_dtoa_r+0x588>)
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	f7f4 ffe0 	bl	8000288 <__aeabi_dsub>
 800b2c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b2cc:	f7f5 fc06 	bl	8000adc <__aeabi_dcmplt>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	f040 80b4 	bne.w	800b43e <_dtoa_r+0x6be>
 800b2d6:	42a6      	cmp	r6, r4
 800b2d8:	f43f af70 	beq.w	800b1bc <_dtoa_r+0x43c>
 800b2dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b2e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b30c <_dtoa_r+0x58c>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f7f5 f988 	bl	80005f8 <__aeabi_dmul>
 800b2e8:	4b08      	ldr	r3, [pc, #32]	@ (800b30c <_dtoa_r+0x58c>)
 800b2ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2f4:	f7f5 f980 	bl	80005f8 <__aeabi_dmul>
 800b2f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2fc:	e7c4      	b.n	800b288 <_dtoa_r+0x508>
 800b2fe:	bf00      	nop
 800b300:	0800ee18 	.word	0x0800ee18
 800b304:	0800edf0 	.word	0x0800edf0
 800b308:	3ff00000 	.word	0x3ff00000
 800b30c:	40240000 	.word	0x40240000
 800b310:	401c0000 	.word	0x401c0000
 800b314:	40140000 	.word	0x40140000
 800b318:	3fe00000 	.word	0x3fe00000
 800b31c:	4631      	mov	r1, r6
 800b31e:	4628      	mov	r0, r5
 800b320:	f7f5 f96a 	bl	80005f8 <__aeabi_dmul>
 800b324:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b328:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b32a:	4656      	mov	r6, sl
 800b32c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b330:	f7f5 fc12 	bl	8000b58 <__aeabi_d2iz>
 800b334:	4605      	mov	r5, r0
 800b336:	f7f5 f8f5 	bl	8000524 <__aeabi_i2d>
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b342:	f7f4 ffa1 	bl	8000288 <__aeabi_dsub>
 800b346:	3530      	adds	r5, #48	@ 0x30
 800b348:	f806 5b01 	strb.w	r5, [r6], #1
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	42a6      	cmp	r6, r4
 800b352:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b356:	f04f 0200 	mov.w	r2, #0
 800b35a:	d124      	bne.n	800b3a6 <_dtoa_r+0x626>
 800b35c:	4baf      	ldr	r3, [pc, #700]	@ (800b61c <_dtoa_r+0x89c>)
 800b35e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b362:	f7f4 ff93 	bl	800028c <__adddf3>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b36e:	f7f5 fbd3 	bl	8000b18 <__aeabi_dcmpgt>
 800b372:	2800      	cmp	r0, #0
 800b374:	d163      	bne.n	800b43e <_dtoa_r+0x6be>
 800b376:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b37a:	49a8      	ldr	r1, [pc, #672]	@ (800b61c <_dtoa_r+0x89c>)
 800b37c:	2000      	movs	r0, #0
 800b37e:	f7f4 ff83 	bl	8000288 <__aeabi_dsub>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b38a:	f7f5 fba7 	bl	8000adc <__aeabi_dcmplt>
 800b38e:	2800      	cmp	r0, #0
 800b390:	f43f af14 	beq.w	800b1bc <_dtoa_r+0x43c>
 800b394:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b396:	1e73      	subs	r3, r6, #1
 800b398:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b39a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b39e:	2b30      	cmp	r3, #48	@ 0x30
 800b3a0:	d0f8      	beq.n	800b394 <_dtoa_r+0x614>
 800b3a2:	4647      	mov	r7, r8
 800b3a4:	e03b      	b.n	800b41e <_dtoa_r+0x69e>
 800b3a6:	4b9e      	ldr	r3, [pc, #632]	@ (800b620 <_dtoa_r+0x8a0>)
 800b3a8:	f7f5 f926 	bl	80005f8 <__aeabi_dmul>
 800b3ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3b0:	e7bc      	b.n	800b32c <_dtoa_r+0x5ac>
 800b3b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b3b6:	4656      	mov	r6, sl
 800b3b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3bc:	4620      	mov	r0, r4
 800b3be:	4629      	mov	r1, r5
 800b3c0:	f7f5 fa44 	bl	800084c <__aeabi_ddiv>
 800b3c4:	f7f5 fbc8 	bl	8000b58 <__aeabi_d2iz>
 800b3c8:	4680      	mov	r8, r0
 800b3ca:	f7f5 f8ab 	bl	8000524 <__aeabi_i2d>
 800b3ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3d2:	f7f5 f911 	bl	80005f8 <__aeabi_dmul>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4620      	mov	r0, r4
 800b3dc:	4629      	mov	r1, r5
 800b3de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b3e2:	f7f4 ff51 	bl	8000288 <__aeabi_dsub>
 800b3e6:	f806 4b01 	strb.w	r4, [r6], #1
 800b3ea:	9d03      	ldr	r5, [sp, #12]
 800b3ec:	eba6 040a 	sub.w	r4, r6, sl
 800b3f0:	42a5      	cmp	r5, r4
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	d133      	bne.n	800b460 <_dtoa_r+0x6e0>
 800b3f8:	f7f4 ff48 	bl	800028c <__adddf3>
 800b3fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b400:	4604      	mov	r4, r0
 800b402:	460d      	mov	r5, r1
 800b404:	f7f5 fb88 	bl	8000b18 <__aeabi_dcmpgt>
 800b408:	b9c0      	cbnz	r0, 800b43c <_dtoa_r+0x6bc>
 800b40a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b40e:	4620      	mov	r0, r4
 800b410:	4629      	mov	r1, r5
 800b412:	f7f5 fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 800b416:	b110      	cbz	r0, 800b41e <_dtoa_r+0x69e>
 800b418:	f018 0f01 	tst.w	r8, #1
 800b41c:	d10e      	bne.n	800b43c <_dtoa_r+0x6bc>
 800b41e:	9902      	ldr	r1, [sp, #8]
 800b420:	4648      	mov	r0, r9
 800b422:	f000 fbbd 	bl	800bba0 <_Bfree>
 800b426:	2300      	movs	r3, #0
 800b428:	7033      	strb	r3, [r6, #0]
 800b42a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b42c:	3701      	adds	r7, #1
 800b42e:	601f      	str	r7, [r3, #0]
 800b430:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 824b 	beq.w	800b8ce <_dtoa_r+0xb4e>
 800b438:	601e      	str	r6, [r3, #0]
 800b43a:	e248      	b.n	800b8ce <_dtoa_r+0xb4e>
 800b43c:	46b8      	mov	r8, r7
 800b43e:	4633      	mov	r3, r6
 800b440:	461e      	mov	r6, r3
 800b442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b446:	2a39      	cmp	r2, #57	@ 0x39
 800b448:	d106      	bne.n	800b458 <_dtoa_r+0x6d8>
 800b44a:	459a      	cmp	sl, r3
 800b44c:	d1f8      	bne.n	800b440 <_dtoa_r+0x6c0>
 800b44e:	2230      	movs	r2, #48	@ 0x30
 800b450:	f108 0801 	add.w	r8, r8, #1
 800b454:	f88a 2000 	strb.w	r2, [sl]
 800b458:	781a      	ldrb	r2, [r3, #0]
 800b45a:	3201      	adds	r2, #1
 800b45c:	701a      	strb	r2, [r3, #0]
 800b45e:	e7a0      	b.n	800b3a2 <_dtoa_r+0x622>
 800b460:	4b6f      	ldr	r3, [pc, #444]	@ (800b620 <_dtoa_r+0x8a0>)
 800b462:	2200      	movs	r2, #0
 800b464:	f7f5 f8c8 	bl	80005f8 <__aeabi_dmul>
 800b468:	2200      	movs	r2, #0
 800b46a:	2300      	movs	r3, #0
 800b46c:	4604      	mov	r4, r0
 800b46e:	460d      	mov	r5, r1
 800b470:	f7f5 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b474:	2800      	cmp	r0, #0
 800b476:	d09f      	beq.n	800b3b8 <_dtoa_r+0x638>
 800b478:	e7d1      	b.n	800b41e <_dtoa_r+0x69e>
 800b47a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b47c:	2a00      	cmp	r2, #0
 800b47e:	f000 80ea 	beq.w	800b656 <_dtoa_r+0x8d6>
 800b482:	9a07      	ldr	r2, [sp, #28]
 800b484:	2a01      	cmp	r2, #1
 800b486:	f300 80cd 	bgt.w	800b624 <_dtoa_r+0x8a4>
 800b48a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b48c:	2a00      	cmp	r2, #0
 800b48e:	f000 80c1 	beq.w	800b614 <_dtoa_r+0x894>
 800b492:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b496:	9c08      	ldr	r4, [sp, #32]
 800b498:	9e00      	ldr	r6, [sp, #0]
 800b49a:	9a00      	ldr	r2, [sp, #0]
 800b49c:	441a      	add	r2, r3
 800b49e:	9200      	str	r2, [sp, #0]
 800b4a0:	9a06      	ldr	r2, [sp, #24]
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	441a      	add	r2, r3
 800b4a6:	4648      	mov	r0, r9
 800b4a8:	9206      	str	r2, [sp, #24]
 800b4aa:	f000 fc77 	bl	800bd9c <__i2b>
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	b166      	cbz	r6, 800b4cc <_dtoa_r+0x74c>
 800b4b2:	9b06      	ldr	r3, [sp, #24]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dd09      	ble.n	800b4cc <_dtoa_r+0x74c>
 800b4b8:	42b3      	cmp	r3, r6
 800b4ba:	9a00      	ldr	r2, [sp, #0]
 800b4bc:	bfa8      	it	ge
 800b4be:	4633      	movge	r3, r6
 800b4c0:	1ad2      	subs	r2, r2, r3
 800b4c2:	9200      	str	r2, [sp, #0]
 800b4c4:	9a06      	ldr	r2, [sp, #24]
 800b4c6:	1af6      	subs	r6, r6, r3
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	9306      	str	r3, [sp, #24]
 800b4cc:	9b08      	ldr	r3, [sp, #32]
 800b4ce:	b30b      	cbz	r3, 800b514 <_dtoa_r+0x794>
 800b4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 80c6 	beq.w	800b664 <_dtoa_r+0x8e4>
 800b4d8:	2c00      	cmp	r4, #0
 800b4da:	f000 80c0 	beq.w	800b65e <_dtoa_r+0x8de>
 800b4de:	4629      	mov	r1, r5
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	4648      	mov	r0, r9
 800b4e4:	f000 fd12 	bl	800bf0c <__pow5mult>
 800b4e8:	9a02      	ldr	r2, [sp, #8]
 800b4ea:	4601      	mov	r1, r0
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	4648      	mov	r0, r9
 800b4f0:	f000 fc6a 	bl	800bdc8 <__multiply>
 800b4f4:	9902      	ldr	r1, [sp, #8]
 800b4f6:	4680      	mov	r8, r0
 800b4f8:	4648      	mov	r0, r9
 800b4fa:	f000 fb51 	bl	800bba0 <_Bfree>
 800b4fe:	9b08      	ldr	r3, [sp, #32]
 800b500:	1b1b      	subs	r3, r3, r4
 800b502:	9308      	str	r3, [sp, #32]
 800b504:	f000 80b1 	beq.w	800b66a <_dtoa_r+0x8ea>
 800b508:	9a08      	ldr	r2, [sp, #32]
 800b50a:	4641      	mov	r1, r8
 800b50c:	4648      	mov	r0, r9
 800b50e:	f000 fcfd 	bl	800bf0c <__pow5mult>
 800b512:	9002      	str	r0, [sp, #8]
 800b514:	2101      	movs	r1, #1
 800b516:	4648      	mov	r0, r9
 800b518:	f000 fc40 	bl	800bd9c <__i2b>
 800b51c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b51e:	4604      	mov	r4, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 81d8 	beq.w	800b8d6 <_dtoa_r+0xb56>
 800b526:	461a      	mov	r2, r3
 800b528:	4601      	mov	r1, r0
 800b52a:	4648      	mov	r0, r9
 800b52c:	f000 fcee 	bl	800bf0c <__pow5mult>
 800b530:	9b07      	ldr	r3, [sp, #28]
 800b532:	2b01      	cmp	r3, #1
 800b534:	4604      	mov	r4, r0
 800b536:	f300 809f 	bgt.w	800b678 <_dtoa_r+0x8f8>
 800b53a:	9b04      	ldr	r3, [sp, #16]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f040 8097 	bne.w	800b670 <_dtoa_r+0x8f0>
 800b542:	9b05      	ldr	r3, [sp, #20]
 800b544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f040 8093 	bne.w	800b674 <_dtoa_r+0x8f4>
 800b54e:	9b05      	ldr	r3, [sp, #20]
 800b550:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b554:	0d1b      	lsrs	r3, r3, #20
 800b556:	051b      	lsls	r3, r3, #20
 800b558:	b133      	cbz	r3, 800b568 <_dtoa_r+0x7e8>
 800b55a:	9b00      	ldr	r3, [sp, #0]
 800b55c:	3301      	adds	r3, #1
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	9b06      	ldr	r3, [sp, #24]
 800b562:	3301      	adds	r3, #1
 800b564:	9306      	str	r3, [sp, #24]
 800b566:	2301      	movs	r3, #1
 800b568:	9308      	str	r3, [sp, #32]
 800b56a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 81b8 	beq.w	800b8e2 <_dtoa_r+0xb62>
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b578:	6918      	ldr	r0, [r3, #16]
 800b57a:	f000 fbc3 	bl	800bd04 <__hi0bits>
 800b57e:	f1c0 0020 	rsb	r0, r0, #32
 800b582:	9b06      	ldr	r3, [sp, #24]
 800b584:	4418      	add	r0, r3
 800b586:	f010 001f 	ands.w	r0, r0, #31
 800b58a:	f000 8082 	beq.w	800b692 <_dtoa_r+0x912>
 800b58e:	f1c0 0320 	rsb	r3, r0, #32
 800b592:	2b04      	cmp	r3, #4
 800b594:	dd73      	ble.n	800b67e <_dtoa_r+0x8fe>
 800b596:	9b00      	ldr	r3, [sp, #0]
 800b598:	f1c0 001c 	rsb	r0, r0, #28
 800b59c:	4403      	add	r3, r0
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	9b06      	ldr	r3, [sp, #24]
 800b5a2:	4403      	add	r3, r0
 800b5a4:	4406      	add	r6, r0
 800b5a6:	9306      	str	r3, [sp, #24]
 800b5a8:	9b00      	ldr	r3, [sp, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dd05      	ble.n	800b5ba <_dtoa_r+0x83a>
 800b5ae:	9902      	ldr	r1, [sp, #8]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	4648      	mov	r0, r9
 800b5b4:	f000 fd04 	bl	800bfc0 <__lshift>
 800b5b8:	9002      	str	r0, [sp, #8]
 800b5ba:	9b06      	ldr	r3, [sp, #24]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	dd05      	ble.n	800b5cc <_dtoa_r+0x84c>
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	4648      	mov	r0, r9
 800b5c6:	f000 fcfb 	bl	800bfc0 <__lshift>
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d061      	beq.n	800b696 <_dtoa_r+0x916>
 800b5d2:	9802      	ldr	r0, [sp, #8]
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	f000 fd5f 	bl	800c098 <__mcmp>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	da5b      	bge.n	800b696 <_dtoa_r+0x916>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	9902      	ldr	r1, [sp, #8]
 800b5e2:	220a      	movs	r2, #10
 800b5e4:	4648      	mov	r0, r9
 800b5e6:	f000 fafd 	bl	800bbe4 <__multadd>
 800b5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ec:	9002      	str	r0, [sp, #8]
 800b5ee:	f107 38ff 	add.w	r8, r7, #4294967295
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 8177 	beq.w	800b8e6 <_dtoa_r+0xb66>
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	220a      	movs	r2, #10
 800b5fe:	4648      	mov	r0, r9
 800b600:	f000 faf0 	bl	800bbe4 <__multadd>
 800b604:	f1bb 0f00 	cmp.w	fp, #0
 800b608:	4605      	mov	r5, r0
 800b60a:	dc6f      	bgt.n	800b6ec <_dtoa_r+0x96c>
 800b60c:	9b07      	ldr	r3, [sp, #28]
 800b60e:	2b02      	cmp	r3, #2
 800b610:	dc49      	bgt.n	800b6a6 <_dtoa_r+0x926>
 800b612:	e06b      	b.n	800b6ec <_dtoa_r+0x96c>
 800b614:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b616:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b61a:	e73c      	b.n	800b496 <_dtoa_r+0x716>
 800b61c:	3fe00000 	.word	0x3fe00000
 800b620:	40240000 	.word	0x40240000
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	1e5c      	subs	r4, r3, #1
 800b628:	9b08      	ldr	r3, [sp, #32]
 800b62a:	42a3      	cmp	r3, r4
 800b62c:	db09      	blt.n	800b642 <_dtoa_r+0x8c2>
 800b62e:	1b1c      	subs	r4, r3, r4
 800b630:	9b03      	ldr	r3, [sp, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	f6bf af30 	bge.w	800b498 <_dtoa_r+0x718>
 800b638:	9b00      	ldr	r3, [sp, #0]
 800b63a:	9a03      	ldr	r2, [sp, #12]
 800b63c:	1a9e      	subs	r6, r3, r2
 800b63e:	2300      	movs	r3, #0
 800b640:	e72b      	b.n	800b49a <_dtoa_r+0x71a>
 800b642:	9b08      	ldr	r3, [sp, #32]
 800b644:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b646:	9408      	str	r4, [sp, #32]
 800b648:	1ae3      	subs	r3, r4, r3
 800b64a:	441a      	add	r2, r3
 800b64c:	9e00      	ldr	r6, [sp, #0]
 800b64e:	9b03      	ldr	r3, [sp, #12]
 800b650:	920d      	str	r2, [sp, #52]	@ 0x34
 800b652:	2400      	movs	r4, #0
 800b654:	e721      	b.n	800b49a <_dtoa_r+0x71a>
 800b656:	9c08      	ldr	r4, [sp, #32]
 800b658:	9e00      	ldr	r6, [sp, #0]
 800b65a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b65c:	e728      	b.n	800b4b0 <_dtoa_r+0x730>
 800b65e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b662:	e751      	b.n	800b508 <_dtoa_r+0x788>
 800b664:	9a08      	ldr	r2, [sp, #32]
 800b666:	9902      	ldr	r1, [sp, #8]
 800b668:	e750      	b.n	800b50c <_dtoa_r+0x78c>
 800b66a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b66e:	e751      	b.n	800b514 <_dtoa_r+0x794>
 800b670:	2300      	movs	r3, #0
 800b672:	e779      	b.n	800b568 <_dtoa_r+0x7e8>
 800b674:	9b04      	ldr	r3, [sp, #16]
 800b676:	e777      	b.n	800b568 <_dtoa_r+0x7e8>
 800b678:	2300      	movs	r3, #0
 800b67a:	9308      	str	r3, [sp, #32]
 800b67c:	e779      	b.n	800b572 <_dtoa_r+0x7f2>
 800b67e:	d093      	beq.n	800b5a8 <_dtoa_r+0x828>
 800b680:	9a00      	ldr	r2, [sp, #0]
 800b682:	331c      	adds	r3, #28
 800b684:	441a      	add	r2, r3
 800b686:	9200      	str	r2, [sp, #0]
 800b688:	9a06      	ldr	r2, [sp, #24]
 800b68a:	441a      	add	r2, r3
 800b68c:	441e      	add	r6, r3
 800b68e:	9206      	str	r2, [sp, #24]
 800b690:	e78a      	b.n	800b5a8 <_dtoa_r+0x828>
 800b692:	4603      	mov	r3, r0
 800b694:	e7f4      	b.n	800b680 <_dtoa_r+0x900>
 800b696:	9b03      	ldr	r3, [sp, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	46b8      	mov	r8, r7
 800b69c:	dc20      	bgt.n	800b6e0 <_dtoa_r+0x960>
 800b69e:	469b      	mov	fp, r3
 800b6a0:	9b07      	ldr	r3, [sp, #28]
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	dd1e      	ble.n	800b6e4 <_dtoa_r+0x964>
 800b6a6:	f1bb 0f00 	cmp.w	fp, #0
 800b6aa:	f47f adb1 	bne.w	800b210 <_dtoa_r+0x490>
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	465b      	mov	r3, fp
 800b6b2:	2205      	movs	r2, #5
 800b6b4:	4648      	mov	r0, r9
 800b6b6:	f000 fa95 	bl	800bbe4 <__multadd>
 800b6ba:	4601      	mov	r1, r0
 800b6bc:	4604      	mov	r4, r0
 800b6be:	9802      	ldr	r0, [sp, #8]
 800b6c0:	f000 fcea 	bl	800c098 <__mcmp>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	f77f ada3 	ble.w	800b210 <_dtoa_r+0x490>
 800b6ca:	4656      	mov	r6, sl
 800b6cc:	2331      	movs	r3, #49	@ 0x31
 800b6ce:	f806 3b01 	strb.w	r3, [r6], #1
 800b6d2:	f108 0801 	add.w	r8, r8, #1
 800b6d6:	e59f      	b.n	800b218 <_dtoa_r+0x498>
 800b6d8:	9c03      	ldr	r4, [sp, #12]
 800b6da:	46b8      	mov	r8, r7
 800b6dc:	4625      	mov	r5, r4
 800b6de:	e7f4      	b.n	800b6ca <_dtoa_r+0x94a>
 800b6e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f000 8101 	beq.w	800b8ee <_dtoa_r+0xb6e>
 800b6ec:	2e00      	cmp	r6, #0
 800b6ee:	dd05      	ble.n	800b6fc <_dtoa_r+0x97c>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4632      	mov	r2, r6
 800b6f4:	4648      	mov	r0, r9
 800b6f6:	f000 fc63 	bl	800bfc0 <__lshift>
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	9b08      	ldr	r3, [sp, #32]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d05c      	beq.n	800b7bc <_dtoa_r+0xa3c>
 800b702:	6869      	ldr	r1, [r5, #4]
 800b704:	4648      	mov	r0, r9
 800b706:	f000 fa0b 	bl	800bb20 <_Balloc>
 800b70a:	4606      	mov	r6, r0
 800b70c:	b928      	cbnz	r0, 800b71a <_dtoa_r+0x99a>
 800b70e:	4b82      	ldr	r3, [pc, #520]	@ (800b918 <_dtoa_r+0xb98>)
 800b710:	4602      	mov	r2, r0
 800b712:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b716:	f7ff bb4a 	b.w	800adae <_dtoa_r+0x2e>
 800b71a:	692a      	ldr	r2, [r5, #16]
 800b71c:	3202      	adds	r2, #2
 800b71e:	0092      	lsls	r2, r2, #2
 800b720:	f105 010c 	add.w	r1, r5, #12
 800b724:	300c      	adds	r0, #12
 800b726:	f7ff fa8c 	bl	800ac42 <memcpy>
 800b72a:	2201      	movs	r2, #1
 800b72c:	4631      	mov	r1, r6
 800b72e:	4648      	mov	r0, r9
 800b730:	f000 fc46 	bl	800bfc0 <__lshift>
 800b734:	f10a 0301 	add.w	r3, sl, #1
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	eb0a 030b 	add.w	r3, sl, fp
 800b73e:	9308      	str	r3, [sp, #32]
 800b740:	9b04      	ldr	r3, [sp, #16]
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	462f      	mov	r7, r5
 800b748:	9306      	str	r3, [sp, #24]
 800b74a:	4605      	mov	r5, r0
 800b74c:	9b00      	ldr	r3, [sp, #0]
 800b74e:	9802      	ldr	r0, [sp, #8]
 800b750:	4621      	mov	r1, r4
 800b752:	f103 3bff 	add.w	fp, r3, #4294967295
 800b756:	f7ff fa89 	bl	800ac6c <quorem>
 800b75a:	4603      	mov	r3, r0
 800b75c:	3330      	adds	r3, #48	@ 0x30
 800b75e:	9003      	str	r0, [sp, #12]
 800b760:	4639      	mov	r1, r7
 800b762:	9802      	ldr	r0, [sp, #8]
 800b764:	9309      	str	r3, [sp, #36]	@ 0x24
 800b766:	f000 fc97 	bl	800c098 <__mcmp>
 800b76a:	462a      	mov	r2, r5
 800b76c:	9004      	str	r0, [sp, #16]
 800b76e:	4621      	mov	r1, r4
 800b770:	4648      	mov	r0, r9
 800b772:	f000 fcad 	bl	800c0d0 <__mdiff>
 800b776:	68c2      	ldr	r2, [r0, #12]
 800b778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b77a:	4606      	mov	r6, r0
 800b77c:	bb02      	cbnz	r2, 800b7c0 <_dtoa_r+0xa40>
 800b77e:	4601      	mov	r1, r0
 800b780:	9802      	ldr	r0, [sp, #8]
 800b782:	f000 fc89 	bl	800c098 <__mcmp>
 800b786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b788:	4602      	mov	r2, r0
 800b78a:	4631      	mov	r1, r6
 800b78c:	4648      	mov	r0, r9
 800b78e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b790:	9309      	str	r3, [sp, #36]	@ 0x24
 800b792:	f000 fa05 	bl	800bba0 <_Bfree>
 800b796:	9b07      	ldr	r3, [sp, #28]
 800b798:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b79a:	9e00      	ldr	r6, [sp, #0]
 800b79c:	ea42 0103 	orr.w	r1, r2, r3
 800b7a0:	9b06      	ldr	r3, [sp, #24]
 800b7a2:	4319      	orrs	r1, r3
 800b7a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a6:	d10d      	bne.n	800b7c4 <_dtoa_r+0xa44>
 800b7a8:	2b39      	cmp	r3, #57	@ 0x39
 800b7aa:	d027      	beq.n	800b7fc <_dtoa_r+0xa7c>
 800b7ac:	9a04      	ldr	r2, [sp, #16]
 800b7ae:	2a00      	cmp	r2, #0
 800b7b0:	dd01      	ble.n	800b7b6 <_dtoa_r+0xa36>
 800b7b2:	9b03      	ldr	r3, [sp, #12]
 800b7b4:	3331      	adds	r3, #49	@ 0x31
 800b7b6:	f88b 3000 	strb.w	r3, [fp]
 800b7ba:	e52e      	b.n	800b21a <_dtoa_r+0x49a>
 800b7bc:	4628      	mov	r0, r5
 800b7be:	e7b9      	b.n	800b734 <_dtoa_r+0x9b4>
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	e7e2      	b.n	800b78a <_dtoa_r+0xa0a>
 800b7c4:	9904      	ldr	r1, [sp, #16]
 800b7c6:	2900      	cmp	r1, #0
 800b7c8:	db04      	blt.n	800b7d4 <_dtoa_r+0xa54>
 800b7ca:	9807      	ldr	r0, [sp, #28]
 800b7cc:	4301      	orrs	r1, r0
 800b7ce:	9806      	ldr	r0, [sp, #24]
 800b7d0:	4301      	orrs	r1, r0
 800b7d2:	d120      	bne.n	800b816 <_dtoa_r+0xa96>
 800b7d4:	2a00      	cmp	r2, #0
 800b7d6:	ddee      	ble.n	800b7b6 <_dtoa_r+0xa36>
 800b7d8:	9902      	ldr	r1, [sp, #8]
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	4648      	mov	r0, r9
 800b7e0:	f000 fbee 	bl	800bfc0 <__lshift>
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	9002      	str	r0, [sp, #8]
 800b7e8:	f000 fc56 	bl	800c098 <__mcmp>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	dc02      	bgt.n	800b7f8 <_dtoa_r+0xa78>
 800b7f2:	d1e0      	bne.n	800b7b6 <_dtoa_r+0xa36>
 800b7f4:	07da      	lsls	r2, r3, #31
 800b7f6:	d5de      	bpl.n	800b7b6 <_dtoa_r+0xa36>
 800b7f8:	2b39      	cmp	r3, #57	@ 0x39
 800b7fa:	d1da      	bne.n	800b7b2 <_dtoa_r+0xa32>
 800b7fc:	2339      	movs	r3, #57	@ 0x39
 800b7fe:	f88b 3000 	strb.w	r3, [fp]
 800b802:	4633      	mov	r3, r6
 800b804:	461e      	mov	r6, r3
 800b806:	3b01      	subs	r3, #1
 800b808:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b80c:	2a39      	cmp	r2, #57	@ 0x39
 800b80e:	d04e      	beq.n	800b8ae <_dtoa_r+0xb2e>
 800b810:	3201      	adds	r2, #1
 800b812:	701a      	strb	r2, [r3, #0]
 800b814:	e501      	b.n	800b21a <_dtoa_r+0x49a>
 800b816:	2a00      	cmp	r2, #0
 800b818:	dd03      	ble.n	800b822 <_dtoa_r+0xaa2>
 800b81a:	2b39      	cmp	r3, #57	@ 0x39
 800b81c:	d0ee      	beq.n	800b7fc <_dtoa_r+0xa7c>
 800b81e:	3301      	adds	r3, #1
 800b820:	e7c9      	b.n	800b7b6 <_dtoa_r+0xa36>
 800b822:	9a00      	ldr	r2, [sp, #0]
 800b824:	9908      	ldr	r1, [sp, #32]
 800b826:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b82a:	428a      	cmp	r2, r1
 800b82c:	d028      	beq.n	800b880 <_dtoa_r+0xb00>
 800b82e:	9902      	ldr	r1, [sp, #8]
 800b830:	2300      	movs	r3, #0
 800b832:	220a      	movs	r2, #10
 800b834:	4648      	mov	r0, r9
 800b836:	f000 f9d5 	bl	800bbe4 <__multadd>
 800b83a:	42af      	cmp	r7, r5
 800b83c:	9002      	str	r0, [sp, #8]
 800b83e:	f04f 0300 	mov.w	r3, #0
 800b842:	f04f 020a 	mov.w	r2, #10
 800b846:	4639      	mov	r1, r7
 800b848:	4648      	mov	r0, r9
 800b84a:	d107      	bne.n	800b85c <_dtoa_r+0xadc>
 800b84c:	f000 f9ca 	bl	800bbe4 <__multadd>
 800b850:	4607      	mov	r7, r0
 800b852:	4605      	mov	r5, r0
 800b854:	9b00      	ldr	r3, [sp, #0]
 800b856:	3301      	adds	r3, #1
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	e777      	b.n	800b74c <_dtoa_r+0x9cc>
 800b85c:	f000 f9c2 	bl	800bbe4 <__multadd>
 800b860:	4629      	mov	r1, r5
 800b862:	4607      	mov	r7, r0
 800b864:	2300      	movs	r3, #0
 800b866:	220a      	movs	r2, #10
 800b868:	4648      	mov	r0, r9
 800b86a:	f000 f9bb 	bl	800bbe4 <__multadd>
 800b86e:	4605      	mov	r5, r0
 800b870:	e7f0      	b.n	800b854 <_dtoa_r+0xad4>
 800b872:	f1bb 0f00 	cmp.w	fp, #0
 800b876:	bfcc      	ite	gt
 800b878:	465e      	movgt	r6, fp
 800b87a:	2601      	movle	r6, #1
 800b87c:	4456      	add	r6, sl
 800b87e:	2700      	movs	r7, #0
 800b880:	9902      	ldr	r1, [sp, #8]
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	2201      	movs	r2, #1
 800b886:	4648      	mov	r0, r9
 800b888:	f000 fb9a 	bl	800bfc0 <__lshift>
 800b88c:	4621      	mov	r1, r4
 800b88e:	9002      	str	r0, [sp, #8]
 800b890:	f000 fc02 	bl	800c098 <__mcmp>
 800b894:	2800      	cmp	r0, #0
 800b896:	dcb4      	bgt.n	800b802 <_dtoa_r+0xa82>
 800b898:	d102      	bne.n	800b8a0 <_dtoa_r+0xb20>
 800b89a:	9b00      	ldr	r3, [sp, #0]
 800b89c:	07db      	lsls	r3, r3, #31
 800b89e:	d4b0      	bmi.n	800b802 <_dtoa_r+0xa82>
 800b8a0:	4633      	mov	r3, r6
 800b8a2:	461e      	mov	r6, r3
 800b8a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8a8:	2a30      	cmp	r2, #48	@ 0x30
 800b8aa:	d0fa      	beq.n	800b8a2 <_dtoa_r+0xb22>
 800b8ac:	e4b5      	b.n	800b21a <_dtoa_r+0x49a>
 800b8ae:	459a      	cmp	sl, r3
 800b8b0:	d1a8      	bne.n	800b804 <_dtoa_r+0xa84>
 800b8b2:	2331      	movs	r3, #49	@ 0x31
 800b8b4:	f108 0801 	add.w	r8, r8, #1
 800b8b8:	f88a 3000 	strb.w	r3, [sl]
 800b8bc:	e4ad      	b.n	800b21a <_dtoa_r+0x49a>
 800b8be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b91c <_dtoa_r+0xb9c>
 800b8c4:	b11b      	cbz	r3, 800b8ce <_dtoa_r+0xb4e>
 800b8c6:	f10a 0308 	add.w	r3, sl, #8
 800b8ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b8cc:	6013      	str	r3, [r2, #0]
 800b8ce:	4650      	mov	r0, sl
 800b8d0:	b017      	add	sp, #92	@ 0x5c
 800b8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d6:	9b07      	ldr	r3, [sp, #28]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	f77f ae2e 	ble.w	800b53a <_dtoa_r+0x7ba>
 800b8de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8e0:	9308      	str	r3, [sp, #32]
 800b8e2:	2001      	movs	r0, #1
 800b8e4:	e64d      	b.n	800b582 <_dtoa_r+0x802>
 800b8e6:	f1bb 0f00 	cmp.w	fp, #0
 800b8ea:	f77f aed9 	ble.w	800b6a0 <_dtoa_r+0x920>
 800b8ee:	4656      	mov	r6, sl
 800b8f0:	9802      	ldr	r0, [sp, #8]
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	f7ff f9ba 	bl	800ac6c <quorem>
 800b8f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b8fc:	f806 3b01 	strb.w	r3, [r6], #1
 800b900:	eba6 020a 	sub.w	r2, r6, sl
 800b904:	4593      	cmp	fp, r2
 800b906:	ddb4      	ble.n	800b872 <_dtoa_r+0xaf2>
 800b908:	9902      	ldr	r1, [sp, #8]
 800b90a:	2300      	movs	r3, #0
 800b90c:	220a      	movs	r2, #10
 800b90e:	4648      	mov	r0, r9
 800b910:	f000 f968 	bl	800bbe4 <__multadd>
 800b914:	9002      	str	r0, [sp, #8]
 800b916:	e7eb      	b.n	800b8f0 <_dtoa_r+0xb70>
 800b918:	0800eca8 	.word	0x0800eca8
 800b91c:	0800ec2c 	.word	0x0800ec2c

0800b920 <_free_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4605      	mov	r5, r0
 800b924:	2900      	cmp	r1, #0
 800b926:	d041      	beq.n	800b9ac <_free_r+0x8c>
 800b928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b92c:	1f0c      	subs	r4, r1, #4
 800b92e:	2b00      	cmp	r3, #0
 800b930:	bfb8      	it	lt
 800b932:	18e4      	addlt	r4, r4, r3
 800b934:	f000 f8e8 	bl	800bb08 <__malloc_lock>
 800b938:	4a1d      	ldr	r2, [pc, #116]	@ (800b9b0 <_free_r+0x90>)
 800b93a:	6813      	ldr	r3, [r2, #0]
 800b93c:	b933      	cbnz	r3, 800b94c <_free_r+0x2c>
 800b93e:	6063      	str	r3, [r4, #4]
 800b940:	6014      	str	r4, [r2, #0]
 800b942:	4628      	mov	r0, r5
 800b944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b948:	f000 b8e4 	b.w	800bb14 <__malloc_unlock>
 800b94c:	42a3      	cmp	r3, r4
 800b94e:	d908      	bls.n	800b962 <_free_r+0x42>
 800b950:	6820      	ldr	r0, [r4, #0]
 800b952:	1821      	adds	r1, r4, r0
 800b954:	428b      	cmp	r3, r1
 800b956:	bf01      	itttt	eq
 800b958:	6819      	ldreq	r1, [r3, #0]
 800b95a:	685b      	ldreq	r3, [r3, #4]
 800b95c:	1809      	addeq	r1, r1, r0
 800b95e:	6021      	streq	r1, [r4, #0]
 800b960:	e7ed      	b.n	800b93e <_free_r+0x1e>
 800b962:	461a      	mov	r2, r3
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	b10b      	cbz	r3, 800b96c <_free_r+0x4c>
 800b968:	42a3      	cmp	r3, r4
 800b96a:	d9fa      	bls.n	800b962 <_free_r+0x42>
 800b96c:	6811      	ldr	r1, [r2, #0]
 800b96e:	1850      	adds	r0, r2, r1
 800b970:	42a0      	cmp	r0, r4
 800b972:	d10b      	bne.n	800b98c <_free_r+0x6c>
 800b974:	6820      	ldr	r0, [r4, #0]
 800b976:	4401      	add	r1, r0
 800b978:	1850      	adds	r0, r2, r1
 800b97a:	4283      	cmp	r3, r0
 800b97c:	6011      	str	r1, [r2, #0]
 800b97e:	d1e0      	bne.n	800b942 <_free_r+0x22>
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	6053      	str	r3, [r2, #4]
 800b986:	4408      	add	r0, r1
 800b988:	6010      	str	r0, [r2, #0]
 800b98a:	e7da      	b.n	800b942 <_free_r+0x22>
 800b98c:	d902      	bls.n	800b994 <_free_r+0x74>
 800b98e:	230c      	movs	r3, #12
 800b990:	602b      	str	r3, [r5, #0]
 800b992:	e7d6      	b.n	800b942 <_free_r+0x22>
 800b994:	6820      	ldr	r0, [r4, #0]
 800b996:	1821      	adds	r1, r4, r0
 800b998:	428b      	cmp	r3, r1
 800b99a:	bf04      	itt	eq
 800b99c:	6819      	ldreq	r1, [r3, #0]
 800b99e:	685b      	ldreq	r3, [r3, #4]
 800b9a0:	6063      	str	r3, [r4, #4]
 800b9a2:	bf04      	itt	eq
 800b9a4:	1809      	addeq	r1, r1, r0
 800b9a6:	6021      	streq	r1, [r4, #0]
 800b9a8:	6054      	str	r4, [r2, #4]
 800b9aa:	e7ca      	b.n	800b942 <_free_r+0x22>
 800b9ac:	bd38      	pop	{r3, r4, r5, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20002198 	.word	0x20002198

0800b9b4 <malloc>:
 800b9b4:	4b02      	ldr	r3, [pc, #8]	@ (800b9c0 <malloc+0xc>)
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	f000 b825 	b.w	800ba08 <_malloc_r>
 800b9be:	bf00      	nop
 800b9c0:	20000108 	.word	0x20000108

0800b9c4 <sbrk_aligned>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	4e0f      	ldr	r6, [pc, #60]	@ (800ba04 <sbrk_aligned+0x40>)
 800b9c8:	460c      	mov	r4, r1
 800b9ca:	6831      	ldr	r1, [r6, #0]
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	b911      	cbnz	r1, 800b9d6 <sbrk_aligned+0x12>
 800b9d0:	f002 face 	bl	800df70 <_sbrk_r>
 800b9d4:	6030      	str	r0, [r6, #0]
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f002 fac9 	bl	800df70 <_sbrk_r>
 800b9de:	1c43      	adds	r3, r0, #1
 800b9e0:	d103      	bne.n	800b9ea <sbrk_aligned+0x26>
 800b9e2:	f04f 34ff 	mov.w	r4, #4294967295
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ea:	1cc4      	adds	r4, r0, #3
 800b9ec:	f024 0403 	bic.w	r4, r4, #3
 800b9f0:	42a0      	cmp	r0, r4
 800b9f2:	d0f8      	beq.n	800b9e6 <sbrk_aligned+0x22>
 800b9f4:	1a21      	subs	r1, r4, r0
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f002 faba 	bl	800df70 <_sbrk_r>
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d1f2      	bne.n	800b9e6 <sbrk_aligned+0x22>
 800ba00:	e7ef      	b.n	800b9e2 <sbrk_aligned+0x1e>
 800ba02:	bf00      	nop
 800ba04:	20002194 	.word	0x20002194

0800ba08 <_malloc_r>:
 800ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	1ccd      	adds	r5, r1, #3
 800ba0e:	f025 0503 	bic.w	r5, r5, #3
 800ba12:	3508      	adds	r5, #8
 800ba14:	2d0c      	cmp	r5, #12
 800ba16:	bf38      	it	cc
 800ba18:	250c      	movcc	r5, #12
 800ba1a:	2d00      	cmp	r5, #0
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	db01      	blt.n	800ba24 <_malloc_r+0x1c>
 800ba20:	42a9      	cmp	r1, r5
 800ba22:	d904      	bls.n	800ba2e <_malloc_r+0x26>
 800ba24:	230c      	movs	r3, #12
 800ba26:	6033      	str	r3, [r6, #0]
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb04 <_malloc_r+0xfc>
 800ba32:	f000 f869 	bl	800bb08 <__malloc_lock>
 800ba36:	f8d8 3000 	ldr.w	r3, [r8]
 800ba3a:	461c      	mov	r4, r3
 800ba3c:	bb44      	cbnz	r4, 800ba90 <_malloc_r+0x88>
 800ba3e:	4629      	mov	r1, r5
 800ba40:	4630      	mov	r0, r6
 800ba42:	f7ff ffbf 	bl	800b9c4 <sbrk_aligned>
 800ba46:	1c43      	adds	r3, r0, #1
 800ba48:	4604      	mov	r4, r0
 800ba4a:	d158      	bne.n	800bafe <_malloc_r+0xf6>
 800ba4c:	f8d8 4000 	ldr.w	r4, [r8]
 800ba50:	4627      	mov	r7, r4
 800ba52:	2f00      	cmp	r7, #0
 800ba54:	d143      	bne.n	800bade <_malloc_r+0xd6>
 800ba56:	2c00      	cmp	r4, #0
 800ba58:	d04b      	beq.n	800baf2 <_malloc_r+0xea>
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	4630      	mov	r0, r6
 800ba60:	eb04 0903 	add.w	r9, r4, r3
 800ba64:	f002 fa84 	bl	800df70 <_sbrk_r>
 800ba68:	4581      	cmp	r9, r0
 800ba6a:	d142      	bne.n	800baf2 <_malloc_r+0xea>
 800ba6c:	6821      	ldr	r1, [r4, #0]
 800ba6e:	1a6d      	subs	r5, r5, r1
 800ba70:	4629      	mov	r1, r5
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7ff ffa6 	bl	800b9c4 <sbrk_aligned>
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d03a      	beq.n	800baf2 <_malloc_r+0xea>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	442b      	add	r3, r5
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	f8d8 3000 	ldr.w	r3, [r8]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	bb62      	cbnz	r2, 800bae4 <_malloc_r+0xdc>
 800ba8a:	f8c8 7000 	str.w	r7, [r8]
 800ba8e:	e00f      	b.n	800bab0 <_malloc_r+0xa8>
 800ba90:	6822      	ldr	r2, [r4, #0]
 800ba92:	1b52      	subs	r2, r2, r5
 800ba94:	d420      	bmi.n	800bad8 <_malloc_r+0xd0>
 800ba96:	2a0b      	cmp	r2, #11
 800ba98:	d917      	bls.n	800baca <_malloc_r+0xc2>
 800ba9a:	1961      	adds	r1, r4, r5
 800ba9c:	42a3      	cmp	r3, r4
 800ba9e:	6025      	str	r5, [r4, #0]
 800baa0:	bf18      	it	ne
 800baa2:	6059      	strne	r1, [r3, #4]
 800baa4:	6863      	ldr	r3, [r4, #4]
 800baa6:	bf08      	it	eq
 800baa8:	f8c8 1000 	streq.w	r1, [r8]
 800baac:	5162      	str	r2, [r4, r5]
 800baae:	604b      	str	r3, [r1, #4]
 800bab0:	4630      	mov	r0, r6
 800bab2:	f000 f82f 	bl	800bb14 <__malloc_unlock>
 800bab6:	f104 000b 	add.w	r0, r4, #11
 800baba:	1d23      	adds	r3, r4, #4
 800babc:	f020 0007 	bic.w	r0, r0, #7
 800bac0:	1ac2      	subs	r2, r0, r3
 800bac2:	bf1c      	itt	ne
 800bac4:	1a1b      	subne	r3, r3, r0
 800bac6:	50a3      	strne	r3, [r4, r2]
 800bac8:	e7af      	b.n	800ba2a <_malloc_r+0x22>
 800baca:	6862      	ldr	r2, [r4, #4]
 800bacc:	42a3      	cmp	r3, r4
 800bace:	bf0c      	ite	eq
 800bad0:	f8c8 2000 	streq.w	r2, [r8]
 800bad4:	605a      	strne	r2, [r3, #4]
 800bad6:	e7eb      	b.n	800bab0 <_malloc_r+0xa8>
 800bad8:	4623      	mov	r3, r4
 800bada:	6864      	ldr	r4, [r4, #4]
 800badc:	e7ae      	b.n	800ba3c <_malloc_r+0x34>
 800bade:	463c      	mov	r4, r7
 800bae0:	687f      	ldr	r7, [r7, #4]
 800bae2:	e7b6      	b.n	800ba52 <_malloc_r+0x4a>
 800bae4:	461a      	mov	r2, r3
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	42a3      	cmp	r3, r4
 800baea:	d1fb      	bne.n	800bae4 <_malloc_r+0xdc>
 800baec:	2300      	movs	r3, #0
 800baee:	6053      	str	r3, [r2, #4]
 800baf0:	e7de      	b.n	800bab0 <_malloc_r+0xa8>
 800baf2:	230c      	movs	r3, #12
 800baf4:	6033      	str	r3, [r6, #0]
 800baf6:	4630      	mov	r0, r6
 800baf8:	f000 f80c 	bl	800bb14 <__malloc_unlock>
 800bafc:	e794      	b.n	800ba28 <_malloc_r+0x20>
 800bafe:	6005      	str	r5, [r0, #0]
 800bb00:	e7d6      	b.n	800bab0 <_malloc_r+0xa8>
 800bb02:	bf00      	nop
 800bb04:	20002198 	.word	0x20002198

0800bb08 <__malloc_lock>:
 800bb08:	4801      	ldr	r0, [pc, #4]	@ (800bb10 <__malloc_lock+0x8>)
 800bb0a:	f7ff b898 	b.w	800ac3e <__retarget_lock_acquire_recursive>
 800bb0e:	bf00      	nop
 800bb10:	20002190 	.word	0x20002190

0800bb14 <__malloc_unlock>:
 800bb14:	4801      	ldr	r0, [pc, #4]	@ (800bb1c <__malloc_unlock+0x8>)
 800bb16:	f7ff b893 	b.w	800ac40 <__retarget_lock_release_recursive>
 800bb1a:	bf00      	nop
 800bb1c:	20002190 	.word	0x20002190

0800bb20 <_Balloc>:
 800bb20:	b570      	push	{r4, r5, r6, lr}
 800bb22:	69c6      	ldr	r6, [r0, #28]
 800bb24:	4604      	mov	r4, r0
 800bb26:	460d      	mov	r5, r1
 800bb28:	b976      	cbnz	r6, 800bb48 <_Balloc+0x28>
 800bb2a:	2010      	movs	r0, #16
 800bb2c:	f7ff ff42 	bl	800b9b4 <malloc>
 800bb30:	4602      	mov	r2, r0
 800bb32:	61e0      	str	r0, [r4, #28]
 800bb34:	b920      	cbnz	r0, 800bb40 <_Balloc+0x20>
 800bb36:	4b18      	ldr	r3, [pc, #96]	@ (800bb98 <_Balloc+0x78>)
 800bb38:	4818      	ldr	r0, [pc, #96]	@ (800bb9c <_Balloc+0x7c>)
 800bb3a:	216b      	movs	r1, #107	@ 0x6b
 800bb3c:	f002 fa30 	bl	800dfa0 <__assert_func>
 800bb40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb44:	6006      	str	r6, [r0, #0]
 800bb46:	60c6      	str	r6, [r0, #12]
 800bb48:	69e6      	ldr	r6, [r4, #28]
 800bb4a:	68f3      	ldr	r3, [r6, #12]
 800bb4c:	b183      	cbz	r3, 800bb70 <_Balloc+0x50>
 800bb4e:	69e3      	ldr	r3, [r4, #28]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb56:	b9b8      	cbnz	r0, 800bb88 <_Balloc+0x68>
 800bb58:	2101      	movs	r1, #1
 800bb5a:	fa01 f605 	lsl.w	r6, r1, r5
 800bb5e:	1d72      	adds	r2, r6, #5
 800bb60:	0092      	lsls	r2, r2, #2
 800bb62:	4620      	mov	r0, r4
 800bb64:	f002 fa3a 	bl	800dfdc <_calloc_r>
 800bb68:	b160      	cbz	r0, 800bb84 <_Balloc+0x64>
 800bb6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb6e:	e00e      	b.n	800bb8e <_Balloc+0x6e>
 800bb70:	2221      	movs	r2, #33	@ 0x21
 800bb72:	2104      	movs	r1, #4
 800bb74:	4620      	mov	r0, r4
 800bb76:	f002 fa31 	bl	800dfdc <_calloc_r>
 800bb7a:	69e3      	ldr	r3, [r4, #28]
 800bb7c:	60f0      	str	r0, [r6, #12]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d1e4      	bne.n	800bb4e <_Balloc+0x2e>
 800bb84:	2000      	movs	r0, #0
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
 800bb88:	6802      	ldr	r2, [r0, #0]
 800bb8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb94:	e7f7      	b.n	800bb86 <_Balloc+0x66>
 800bb96:	bf00      	nop
 800bb98:	0800ec39 	.word	0x0800ec39
 800bb9c:	0800ecb9 	.word	0x0800ecb9

0800bba0 <_Bfree>:
 800bba0:	b570      	push	{r4, r5, r6, lr}
 800bba2:	69c6      	ldr	r6, [r0, #28]
 800bba4:	4605      	mov	r5, r0
 800bba6:	460c      	mov	r4, r1
 800bba8:	b976      	cbnz	r6, 800bbc8 <_Bfree+0x28>
 800bbaa:	2010      	movs	r0, #16
 800bbac:	f7ff ff02 	bl	800b9b4 <malloc>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	61e8      	str	r0, [r5, #28]
 800bbb4:	b920      	cbnz	r0, 800bbc0 <_Bfree+0x20>
 800bbb6:	4b09      	ldr	r3, [pc, #36]	@ (800bbdc <_Bfree+0x3c>)
 800bbb8:	4809      	ldr	r0, [pc, #36]	@ (800bbe0 <_Bfree+0x40>)
 800bbba:	218f      	movs	r1, #143	@ 0x8f
 800bbbc:	f002 f9f0 	bl	800dfa0 <__assert_func>
 800bbc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbc4:	6006      	str	r6, [r0, #0]
 800bbc6:	60c6      	str	r6, [r0, #12]
 800bbc8:	b13c      	cbz	r4, 800bbda <_Bfree+0x3a>
 800bbca:	69eb      	ldr	r3, [r5, #28]
 800bbcc:	6862      	ldr	r2, [r4, #4]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbd4:	6021      	str	r1, [r4, #0]
 800bbd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbda:	bd70      	pop	{r4, r5, r6, pc}
 800bbdc:	0800ec39 	.word	0x0800ec39
 800bbe0:	0800ecb9 	.word	0x0800ecb9

0800bbe4 <__multadd>:
 800bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe8:	690d      	ldr	r5, [r1, #16]
 800bbea:	4607      	mov	r7, r0
 800bbec:	460c      	mov	r4, r1
 800bbee:	461e      	mov	r6, r3
 800bbf0:	f101 0c14 	add.w	ip, r1, #20
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	f8dc 3000 	ldr.w	r3, [ip]
 800bbfa:	b299      	uxth	r1, r3
 800bbfc:	fb02 6101 	mla	r1, r2, r1, r6
 800bc00:	0c1e      	lsrs	r6, r3, #16
 800bc02:	0c0b      	lsrs	r3, r1, #16
 800bc04:	fb02 3306 	mla	r3, r2, r6, r3
 800bc08:	b289      	uxth	r1, r1
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc10:	4285      	cmp	r5, r0
 800bc12:	f84c 1b04 	str.w	r1, [ip], #4
 800bc16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc1a:	dcec      	bgt.n	800bbf6 <__multadd+0x12>
 800bc1c:	b30e      	cbz	r6, 800bc62 <__multadd+0x7e>
 800bc1e:	68a3      	ldr	r3, [r4, #8]
 800bc20:	42ab      	cmp	r3, r5
 800bc22:	dc19      	bgt.n	800bc58 <__multadd+0x74>
 800bc24:	6861      	ldr	r1, [r4, #4]
 800bc26:	4638      	mov	r0, r7
 800bc28:	3101      	adds	r1, #1
 800bc2a:	f7ff ff79 	bl	800bb20 <_Balloc>
 800bc2e:	4680      	mov	r8, r0
 800bc30:	b928      	cbnz	r0, 800bc3e <__multadd+0x5a>
 800bc32:	4602      	mov	r2, r0
 800bc34:	4b0c      	ldr	r3, [pc, #48]	@ (800bc68 <__multadd+0x84>)
 800bc36:	480d      	ldr	r0, [pc, #52]	@ (800bc6c <__multadd+0x88>)
 800bc38:	21ba      	movs	r1, #186	@ 0xba
 800bc3a:	f002 f9b1 	bl	800dfa0 <__assert_func>
 800bc3e:	6922      	ldr	r2, [r4, #16]
 800bc40:	3202      	adds	r2, #2
 800bc42:	f104 010c 	add.w	r1, r4, #12
 800bc46:	0092      	lsls	r2, r2, #2
 800bc48:	300c      	adds	r0, #12
 800bc4a:	f7fe fffa 	bl	800ac42 <memcpy>
 800bc4e:	4621      	mov	r1, r4
 800bc50:	4638      	mov	r0, r7
 800bc52:	f7ff ffa5 	bl	800bba0 <_Bfree>
 800bc56:	4644      	mov	r4, r8
 800bc58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc5c:	3501      	adds	r5, #1
 800bc5e:	615e      	str	r6, [r3, #20]
 800bc60:	6125      	str	r5, [r4, #16]
 800bc62:	4620      	mov	r0, r4
 800bc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc68:	0800eca8 	.word	0x0800eca8
 800bc6c:	0800ecb9 	.word	0x0800ecb9

0800bc70 <__s2b>:
 800bc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc74:	460c      	mov	r4, r1
 800bc76:	4615      	mov	r5, r2
 800bc78:	461f      	mov	r7, r3
 800bc7a:	2209      	movs	r2, #9
 800bc7c:	3308      	adds	r3, #8
 800bc7e:	4606      	mov	r6, r0
 800bc80:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc84:	2100      	movs	r1, #0
 800bc86:	2201      	movs	r2, #1
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	db09      	blt.n	800bca0 <__s2b+0x30>
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f7ff ff47 	bl	800bb20 <_Balloc>
 800bc92:	b940      	cbnz	r0, 800bca6 <__s2b+0x36>
 800bc94:	4602      	mov	r2, r0
 800bc96:	4b19      	ldr	r3, [pc, #100]	@ (800bcfc <__s2b+0x8c>)
 800bc98:	4819      	ldr	r0, [pc, #100]	@ (800bd00 <__s2b+0x90>)
 800bc9a:	21d3      	movs	r1, #211	@ 0xd3
 800bc9c:	f002 f980 	bl	800dfa0 <__assert_func>
 800bca0:	0052      	lsls	r2, r2, #1
 800bca2:	3101      	adds	r1, #1
 800bca4:	e7f0      	b.n	800bc88 <__s2b+0x18>
 800bca6:	9b08      	ldr	r3, [sp, #32]
 800bca8:	6143      	str	r3, [r0, #20]
 800bcaa:	2d09      	cmp	r5, #9
 800bcac:	f04f 0301 	mov.w	r3, #1
 800bcb0:	6103      	str	r3, [r0, #16]
 800bcb2:	dd16      	ble.n	800bce2 <__s2b+0x72>
 800bcb4:	f104 0909 	add.w	r9, r4, #9
 800bcb8:	46c8      	mov	r8, r9
 800bcba:	442c      	add	r4, r5
 800bcbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bcc0:	4601      	mov	r1, r0
 800bcc2:	3b30      	subs	r3, #48	@ 0x30
 800bcc4:	220a      	movs	r2, #10
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	f7ff ff8c 	bl	800bbe4 <__multadd>
 800bccc:	45a0      	cmp	r8, r4
 800bcce:	d1f5      	bne.n	800bcbc <__s2b+0x4c>
 800bcd0:	f1a5 0408 	sub.w	r4, r5, #8
 800bcd4:	444c      	add	r4, r9
 800bcd6:	1b2d      	subs	r5, r5, r4
 800bcd8:	1963      	adds	r3, r4, r5
 800bcda:	42bb      	cmp	r3, r7
 800bcdc:	db04      	blt.n	800bce8 <__s2b+0x78>
 800bcde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bce2:	340a      	adds	r4, #10
 800bce4:	2509      	movs	r5, #9
 800bce6:	e7f6      	b.n	800bcd6 <__s2b+0x66>
 800bce8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bcec:	4601      	mov	r1, r0
 800bcee:	3b30      	subs	r3, #48	@ 0x30
 800bcf0:	220a      	movs	r2, #10
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f7ff ff76 	bl	800bbe4 <__multadd>
 800bcf8:	e7ee      	b.n	800bcd8 <__s2b+0x68>
 800bcfa:	bf00      	nop
 800bcfc:	0800eca8 	.word	0x0800eca8
 800bd00:	0800ecb9 	.word	0x0800ecb9

0800bd04 <__hi0bits>:
 800bd04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd08:	4603      	mov	r3, r0
 800bd0a:	bf36      	itet	cc
 800bd0c:	0403      	lslcc	r3, r0, #16
 800bd0e:	2000      	movcs	r0, #0
 800bd10:	2010      	movcc	r0, #16
 800bd12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd16:	bf3c      	itt	cc
 800bd18:	021b      	lslcc	r3, r3, #8
 800bd1a:	3008      	addcc	r0, #8
 800bd1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd20:	bf3c      	itt	cc
 800bd22:	011b      	lslcc	r3, r3, #4
 800bd24:	3004      	addcc	r0, #4
 800bd26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd2a:	bf3c      	itt	cc
 800bd2c:	009b      	lslcc	r3, r3, #2
 800bd2e:	3002      	addcc	r0, #2
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	db05      	blt.n	800bd40 <__hi0bits+0x3c>
 800bd34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd38:	f100 0001 	add.w	r0, r0, #1
 800bd3c:	bf08      	it	eq
 800bd3e:	2020      	moveq	r0, #32
 800bd40:	4770      	bx	lr

0800bd42 <__lo0bits>:
 800bd42:	6803      	ldr	r3, [r0, #0]
 800bd44:	4602      	mov	r2, r0
 800bd46:	f013 0007 	ands.w	r0, r3, #7
 800bd4a:	d00b      	beq.n	800bd64 <__lo0bits+0x22>
 800bd4c:	07d9      	lsls	r1, r3, #31
 800bd4e:	d421      	bmi.n	800bd94 <__lo0bits+0x52>
 800bd50:	0798      	lsls	r0, r3, #30
 800bd52:	bf49      	itett	mi
 800bd54:	085b      	lsrmi	r3, r3, #1
 800bd56:	089b      	lsrpl	r3, r3, #2
 800bd58:	2001      	movmi	r0, #1
 800bd5a:	6013      	strmi	r3, [r2, #0]
 800bd5c:	bf5c      	itt	pl
 800bd5e:	6013      	strpl	r3, [r2, #0]
 800bd60:	2002      	movpl	r0, #2
 800bd62:	4770      	bx	lr
 800bd64:	b299      	uxth	r1, r3
 800bd66:	b909      	cbnz	r1, 800bd6c <__lo0bits+0x2a>
 800bd68:	0c1b      	lsrs	r3, r3, #16
 800bd6a:	2010      	movs	r0, #16
 800bd6c:	b2d9      	uxtb	r1, r3
 800bd6e:	b909      	cbnz	r1, 800bd74 <__lo0bits+0x32>
 800bd70:	3008      	adds	r0, #8
 800bd72:	0a1b      	lsrs	r3, r3, #8
 800bd74:	0719      	lsls	r1, r3, #28
 800bd76:	bf04      	itt	eq
 800bd78:	091b      	lsreq	r3, r3, #4
 800bd7a:	3004      	addeq	r0, #4
 800bd7c:	0799      	lsls	r1, r3, #30
 800bd7e:	bf04      	itt	eq
 800bd80:	089b      	lsreq	r3, r3, #2
 800bd82:	3002      	addeq	r0, #2
 800bd84:	07d9      	lsls	r1, r3, #31
 800bd86:	d403      	bmi.n	800bd90 <__lo0bits+0x4e>
 800bd88:	085b      	lsrs	r3, r3, #1
 800bd8a:	f100 0001 	add.w	r0, r0, #1
 800bd8e:	d003      	beq.n	800bd98 <__lo0bits+0x56>
 800bd90:	6013      	str	r3, [r2, #0]
 800bd92:	4770      	bx	lr
 800bd94:	2000      	movs	r0, #0
 800bd96:	4770      	bx	lr
 800bd98:	2020      	movs	r0, #32
 800bd9a:	4770      	bx	lr

0800bd9c <__i2b>:
 800bd9c:	b510      	push	{r4, lr}
 800bd9e:	460c      	mov	r4, r1
 800bda0:	2101      	movs	r1, #1
 800bda2:	f7ff febd 	bl	800bb20 <_Balloc>
 800bda6:	4602      	mov	r2, r0
 800bda8:	b928      	cbnz	r0, 800bdb6 <__i2b+0x1a>
 800bdaa:	4b05      	ldr	r3, [pc, #20]	@ (800bdc0 <__i2b+0x24>)
 800bdac:	4805      	ldr	r0, [pc, #20]	@ (800bdc4 <__i2b+0x28>)
 800bdae:	f240 1145 	movw	r1, #325	@ 0x145
 800bdb2:	f002 f8f5 	bl	800dfa0 <__assert_func>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	6144      	str	r4, [r0, #20]
 800bdba:	6103      	str	r3, [r0, #16]
 800bdbc:	bd10      	pop	{r4, pc}
 800bdbe:	bf00      	nop
 800bdc0:	0800eca8 	.word	0x0800eca8
 800bdc4:	0800ecb9 	.word	0x0800ecb9

0800bdc8 <__multiply>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	4617      	mov	r7, r2
 800bdce:	690a      	ldr	r2, [r1, #16]
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	bfa8      	it	ge
 800bdd6:	463b      	movge	r3, r7
 800bdd8:	4689      	mov	r9, r1
 800bdda:	bfa4      	itt	ge
 800bddc:	460f      	movge	r7, r1
 800bdde:	4699      	movge	r9, r3
 800bde0:	693d      	ldr	r5, [r7, #16]
 800bde2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	eb05 060a 	add.w	r6, r5, sl
 800bdee:	42b3      	cmp	r3, r6
 800bdf0:	b085      	sub	sp, #20
 800bdf2:	bfb8      	it	lt
 800bdf4:	3101      	addlt	r1, #1
 800bdf6:	f7ff fe93 	bl	800bb20 <_Balloc>
 800bdfa:	b930      	cbnz	r0, 800be0a <__multiply+0x42>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	4b41      	ldr	r3, [pc, #260]	@ (800bf04 <__multiply+0x13c>)
 800be00:	4841      	ldr	r0, [pc, #260]	@ (800bf08 <__multiply+0x140>)
 800be02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be06:	f002 f8cb 	bl	800dfa0 <__assert_func>
 800be0a:	f100 0414 	add.w	r4, r0, #20
 800be0e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800be12:	4623      	mov	r3, r4
 800be14:	2200      	movs	r2, #0
 800be16:	4573      	cmp	r3, lr
 800be18:	d320      	bcc.n	800be5c <__multiply+0x94>
 800be1a:	f107 0814 	add.w	r8, r7, #20
 800be1e:	f109 0114 	add.w	r1, r9, #20
 800be22:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800be26:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	1beb      	subs	r3, r5, r7
 800be2e:	3b15      	subs	r3, #21
 800be30:	f023 0303 	bic.w	r3, r3, #3
 800be34:	3304      	adds	r3, #4
 800be36:	3715      	adds	r7, #21
 800be38:	42bd      	cmp	r5, r7
 800be3a:	bf38      	it	cc
 800be3c:	2304      	movcc	r3, #4
 800be3e:	9301      	str	r3, [sp, #4]
 800be40:	9b02      	ldr	r3, [sp, #8]
 800be42:	9103      	str	r1, [sp, #12]
 800be44:	428b      	cmp	r3, r1
 800be46:	d80c      	bhi.n	800be62 <__multiply+0x9a>
 800be48:	2e00      	cmp	r6, #0
 800be4a:	dd03      	ble.n	800be54 <__multiply+0x8c>
 800be4c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800be50:	2b00      	cmp	r3, #0
 800be52:	d055      	beq.n	800bf00 <__multiply+0x138>
 800be54:	6106      	str	r6, [r0, #16]
 800be56:	b005      	add	sp, #20
 800be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5c:	f843 2b04 	str.w	r2, [r3], #4
 800be60:	e7d9      	b.n	800be16 <__multiply+0x4e>
 800be62:	f8b1 a000 	ldrh.w	sl, [r1]
 800be66:	f1ba 0f00 	cmp.w	sl, #0
 800be6a:	d01f      	beq.n	800beac <__multiply+0xe4>
 800be6c:	46c4      	mov	ip, r8
 800be6e:	46a1      	mov	r9, r4
 800be70:	2700      	movs	r7, #0
 800be72:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be76:	f8d9 3000 	ldr.w	r3, [r9]
 800be7a:	fa1f fb82 	uxth.w	fp, r2
 800be7e:	b29b      	uxth	r3, r3
 800be80:	fb0a 330b 	mla	r3, sl, fp, r3
 800be84:	443b      	add	r3, r7
 800be86:	f8d9 7000 	ldr.w	r7, [r9]
 800be8a:	0c12      	lsrs	r2, r2, #16
 800be8c:	0c3f      	lsrs	r7, r7, #16
 800be8e:	fb0a 7202 	mla	r2, sl, r2, r7
 800be92:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800be96:	b29b      	uxth	r3, r3
 800be98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be9c:	4565      	cmp	r5, ip
 800be9e:	f849 3b04 	str.w	r3, [r9], #4
 800bea2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bea6:	d8e4      	bhi.n	800be72 <__multiply+0xaa>
 800bea8:	9b01      	ldr	r3, [sp, #4]
 800beaa:	50e7      	str	r7, [r4, r3]
 800beac:	9b03      	ldr	r3, [sp, #12]
 800beae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800beb2:	3104      	adds	r1, #4
 800beb4:	f1b9 0f00 	cmp.w	r9, #0
 800beb8:	d020      	beq.n	800befc <__multiply+0x134>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	4647      	mov	r7, r8
 800bebe:	46a4      	mov	ip, r4
 800bec0:	f04f 0a00 	mov.w	sl, #0
 800bec4:	f8b7 b000 	ldrh.w	fp, [r7]
 800bec8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800becc:	fb09 220b 	mla	r2, r9, fp, r2
 800bed0:	4452      	add	r2, sl
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bed8:	f84c 3b04 	str.w	r3, [ip], #4
 800bedc:	f857 3b04 	ldr.w	r3, [r7], #4
 800bee0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bee4:	f8bc 3000 	ldrh.w	r3, [ip]
 800bee8:	fb09 330a 	mla	r3, r9, sl, r3
 800beec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bef0:	42bd      	cmp	r5, r7
 800bef2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bef6:	d8e5      	bhi.n	800bec4 <__multiply+0xfc>
 800bef8:	9a01      	ldr	r2, [sp, #4]
 800befa:	50a3      	str	r3, [r4, r2]
 800befc:	3404      	adds	r4, #4
 800befe:	e79f      	b.n	800be40 <__multiply+0x78>
 800bf00:	3e01      	subs	r6, #1
 800bf02:	e7a1      	b.n	800be48 <__multiply+0x80>
 800bf04:	0800eca8 	.word	0x0800eca8
 800bf08:	0800ecb9 	.word	0x0800ecb9

0800bf0c <__pow5mult>:
 800bf0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf10:	4615      	mov	r5, r2
 800bf12:	f012 0203 	ands.w	r2, r2, #3
 800bf16:	4607      	mov	r7, r0
 800bf18:	460e      	mov	r6, r1
 800bf1a:	d007      	beq.n	800bf2c <__pow5mult+0x20>
 800bf1c:	4c25      	ldr	r4, [pc, #148]	@ (800bfb4 <__pow5mult+0xa8>)
 800bf1e:	3a01      	subs	r2, #1
 800bf20:	2300      	movs	r3, #0
 800bf22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf26:	f7ff fe5d 	bl	800bbe4 <__multadd>
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	10ad      	asrs	r5, r5, #2
 800bf2e:	d03d      	beq.n	800bfac <__pow5mult+0xa0>
 800bf30:	69fc      	ldr	r4, [r7, #28]
 800bf32:	b97c      	cbnz	r4, 800bf54 <__pow5mult+0x48>
 800bf34:	2010      	movs	r0, #16
 800bf36:	f7ff fd3d 	bl	800b9b4 <malloc>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	61f8      	str	r0, [r7, #28]
 800bf3e:	b928      	cbnz	r0, 800bf4c <__pow5mult+0x40>
 800bf40:	4b1d      	ldr	r3, [pc, #116]	@ (800bfb8 <__pow5mult+0xac>)
 800bf42:	481e      	ldr	r0, [pc, #120]	@ (800bfbc <__pow5mult+0xb0>)
 800bf44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf48:	f002 f82a 	bl	800dfa0 <__assert_func>
 800bf4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf50:	6004      	str	r4, [r0, #0]
 800bf52:	60c4      	str	r4, [r0, #12]
 800bf54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf5c:	b94c      	cbnz	r4, 800bf72 <__pow5mult+0x66>
 800bf5e:	f240 2171 	movw	r1, #625	@ 0x271
 800bf62:	4638      	mov	r0, r7
 800bf64:	f7ff ff1a 	bl	800bd9c <__i2b>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf6e:	4604      	mov	r4, r0
 800bf70:	6003      	str	r3, [r0, #0]
 800bf72:	f04f 0900 	mov.w	r9, #0
 800bf76:	07eb      	lsls	r3, r5, #31
 800bf78:	d50a      	bpl.n	800bf90 <__pow5mult+0x84>
 800bf7a:	4631      	mov	r1, r6
 800bf7c:	4622      	mov	r2, r4
 800bf7e:	4638      	mov	r0, r7
 800bf80:	f7ff ff22 	bl	800bdc8 <__multiply>
 800bf84:	4631      	mov	r1, r6
 800bf86:	4680      	mov	r8, r0
 800bf88:	4638      	mov	r0, r7
 800bf8a:	f7ff fe09 	bl	800bba0 <_Bfree>
 800bf8e:	4646      	mov	r6, r8
 800bf90:	106d      	asrs	r5, r5, #1
 800bf92:	d00b      	beq.n	800bfac <__pow5mult+0xa0>
 800bf94:	6820      	ldr	r0, [r4, #0]
 800bf96:	b938      	cbnz	r0, 800bfa8 <__pow5mult+0x9c>
 800bf98:	4622      	mov	r2, r4
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4638      	mov	r0, r7
 800bf9e:	f7ff ff13 	bl	800bdc8 <__multiply>
 800bfa2:	6020      	str	r0, [r4, #0]
 800bfa4:	f8c0 9000 	str.w	r9, [r0]
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	e7e4      	b.n	800bf76 <__pow5mult+0x6a>
 800bfac:	4630      	mov	r0, r6
 800bfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfb2:	bf00      	nop
 800bfb4:	0800ede4 	.word	0x0800ede4
 800bfb8:	0800ec39 	.word	0x0800ec39
 800bfbc:	0800ecb9 	.word	0x0800ecb9

0800bfc0 <__lshift>:
 800bfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	6849      	ldr	r1, [r1, #4]
 800bfc8:	6923      	ldr	r3, [r4, #16]
 800bfca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfce:	68a3      	ldr	r3, [r4, #8]
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	4691      	mov	r9, r2
 800bfd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfd8:	f108 0601 	add.w	r6, r8, #1
 800bfdc:	42b3      	cmp	r3, r6
 800bfde:	db0b      	blt.n	800bff8 <__lshift+0x38>
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	f7ff fd9d 	bl	800bb20 <_Balloc>
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	b948      	cbnz	r0, 800bffe <__lshift+0x3e>
 800bfea:	4602      	mov	r2, r0
 800bfec:	4b28      	ldr	r3, [pc, #160]	@ (800c090 <__lshift+0xd0>)
 800bfee:	4829      	ldr	r0, [pc, #164]	@ (800c094 <__lshift+0xd4>)
 800bff0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bff4:	f001 ffd4 	bl	800dfa0 <__assert_func>
 800bff8:	3101      	adds	r1, #1
 800bffa:	005b      	lsls	r3, r3, #1
 800bffc:	e7ee      	b.n	800bfdc <__lshift+0x1c>
 800bffe:	2300      	movs	r3, #0
 800c000:	f100 0114 	add.w	r1, r0, #20
 800c004:	f100 0210 	add.w	r2, r0, #16
 800c008:	4618      	mov	r0, r3
 800c00a:	4553      	cmp	r3, sl
 800c00c:	db33      	blt.n	800c076 <__lshift+0xb6>
 800c00e:	6920      	ldr	r0, [r4, #16]
 800c010:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c014:	f104 0314 	add.w	r3, r4, #20
 800c018:	f019 091f 	ands.w	r9, r9, #31
 800c01c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c020:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c024:	d02b      	beq.n	800c07e <__lshift+0xbe>
 800c026:	f1c9 0e20 	rsb	lr, r9, #32
 800c02a:	468a      	mov	sl, r1
 800c02c:	2200      	movs	r2, #0
 800c02e:	6818      	ldr	r0, [r3, #0]
 800c030:	fa00 f009 	lsl.w	r0, r0, r9
 800c034:	4310      	orrs	r0, r2
 800c036:	f84a 0b04 	str.w	r0, [sl], #4
 800c03a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c03e:	459c      	cmp	ip, r3
 800c040:	fa22 f20e 	lsr.w	r2, r2, lr
 800c044:	d8f3      	bhi.n	800c02e <__lshift+0x6e>
 800c046:	ebac 0304 	sub.w	r3, ip, r4
 800c04a:	3b15      	subs	r3, #21
 800c04c:	f023 0303 	bic.w	r3, r3, #3
 800c050:	3304      	adds	r3, #4
 800c052:	f104 0015 	add.w	r0, r4, #21
 800c056:	4560      	cmp	r0, ip
 800c058:	bf88      	it	hi
 800c05a:	2304      	movhi	r3, #4
 800c05c:	50ca      	str	r2, [r1, r3]
 800c05e:	b10a      	cbz	r2, 800c064 <__lshift+0xa4>
 800c060:	f108 0602 	add.w	r6, r8, #2
 800c064:	3e01      	subs	r6, #1
 800c066:	4638      	mov	r0, r7
 800c068:	612e      	str	r6, [r5, #16]
 800c06a:	4621      	mov	r1, r4
 800c06c:	f7ff fd98 	bl	800bba0 <_Bfree>
 800c070:	4628      	mov	r0, r5
 800c072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c076:	f842 0f04 	str.w	r0, [r2, #4]!
 800c07a:	3301      	adds	r3, #1
 800c07c:	e7c5      	b.n	800c00a <__lshift+0x4a>
 800c07e:	3904      	subs	r1, #4
 800c080:	f853 2b04 	ldr.w	r2, [r3], #4
 800c084:	f841 2f04 	str.w	r2, [r1, #4]!
 800c088:	459c      	cmp	ip, r3
 800c08a:	d8f9      	bhi.n	800c080 <__lshift+0xc0>
 800c08c:	e7ea      	b.n	800c064 <__lshift+0xa4>
 800c08e:	bf00      	nop
 800c090:	0800eca8 	.word	0x0800eca8
 800c094:	0800ecb9 	.word	0x0800ecb9

0800c098 <__mcmp>:
 800c098:	690a      	ldr	r2, [r1, #16]
 800c09a:	4603      	mov	r3, r0
 800c09c:	6900      	ldr	r0, [r0, #16]
 800c09e:	1a80      	subs	r0, r0, r2
 800c0a0:	b530      	push	{r4, r5, lr}
 800c0a2:	d10e      	bne.n	800c0c2 <__mcmp+0x2a>
 800c0a4:	3314      	adds	r3, #20
 800c0a6:	3114      	adds	r1, #20
 800c0a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0b8:	4295      	cmp	r5, r2
 800c0ba:	d003      	beq.n	800c0c4 <__mcmp+0x2c>
 800c0bc:	d205      	bcs.n	800c0ca <__mcmp+0x32>
 800c0be:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c2:	bd30      	pop	{r4, r5, pc}
 800c0c4:	42a3      	cmp	r3, r4
 800c0c6:	d3f3      	bcc.n	800c0b0 <__mcmp+0x18>
 800c0c8:	e7fb      	b.n	800c0c2 <__mcmp+0x2a>
 800c0ca:	2001      	movs	r0, #1
 800c0cc:	e7f9      	b.n	800c0c2 <__mcmp+0x2a>
	...

0800c0d0 <__mdiff>:
 800c0d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	4689      	mov	r9, r1
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	4611      	mov	r1, r2
 800c0da:	4648      	mov	r0, r9
 800c0dc:	4614      	mov	r4, r2
 800c0de:	f7ff ffdb 	bl	800c098 <__mcmp>
 800c0e2:	1e05      	subs	r5, r0, #0
 800c0e4:	d112      	bne.n	800c10c <__mdiff+0x3c>
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	f7ff fd19 	bl	800bb20 <_Balloc>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	b928      	cbnz	r0, 800c0fe <__mdiff+0x2e>
 800c0f2:	4b3f      	ldr	r3, [pc, #252]	@ (800c1f0 <__mdiff+0x120>)
 800c0f4:	f240 2137 	movw	r1, #567	@ 0x237
 800c0f8:	483e      	ldr	r0, [pc, #248]	@ (800c1f4 <__mdiff+0x124>)
 800c0fa:	f001 ff51 	bl	800dfa0 <__assert_func>
 800c0fe:	2301      	movs	r3, #1
 800c100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c104:	4610      	mov	r0, r2
 800c106:	b003      	add	sp, #12
 800c108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10c:	bfbc      	itt	lt
 800c10e:	464b      	movlt	r3, r9
 800c110:	46a1      	movlt	r9, r4
 800c112:	4630      	mov	r0, r6
 800c114:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c118:	bfba      	itte	lt
 800c11a:	461c      	movlt	r4, r3
 800c11c:	2501      	movlt	r5, #1
 800c11e:	2500      	movge	r5, #0
 800c120:	f7ff fcfe 	bl	800bb20 <_Balloc>
 800c124:	4602      	mov	r2, r0
 800c126:	b918      	cbnz	r0, 800c130 <__mdiff+0x60>
 800c128:	4b31      	ldr	r3, [pc, #196]	@ (800c1f0 <__mdiff+0x120>)
 800c12a:	f240 2145 	movw	r1, #581	@ 0x245
 800c12e:	e7e3      	b.n	800c0f8 <__mdiff+0x28>
 800c130:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c134:	6926      	ldr	r6, [r4, #16]
 800c136:	60c5      	str	r5, [r0, #12]
 800c138:	f109 0310 	add.w	r3, r9, #16
 800c13c:	f109 0514 	add.w	r5, r9, #20
 800c140:	f104 0e14 	add.w	lr, r4, #20
 800c144:	f100 0b14 	add.w	fp, r0, #20
 800c148:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c14c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c150:	9301      	str	r3, [sp, #4]
 800c152:	46d9      	mov	r9, fp
 800c154:	f04f 0c00 	mov.w	ip, #0
 800c158:	9b01      	ldr	r3, [sp, #4]
 800c15a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c15e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c162:	9301      	str	r3, [sp, #4]
 800c164:	fa1f f38a 	uxth.w	r3, sl
 800c168:	4619      	mov	r1, r3
 800c16a:	b283      	uxth	r3, r0
 800c16c:	1acb      	subs	r3, r1, r3
 800c16e:	0c00      	lsrs	r0, r0, #16
 800c170:	4463      	add	r3, ip
 800c172:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c176:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c180:	4576      	cmp	r6, lr
 800c182:	f849 3b04 	str.w	r3, [r9], #4
 800c186:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c18a:	d8e5      	bhi.n	800c158 <__mdiff+0x88>
 800c18c:	1b33      	subs	r3, r6, r4
 800c18e:	3b15      	subs	r3, #21
 800c190:	f023 0303 	bic.w	r3, r3, #3
 800c194:	3415      	adds	r4, #21
 800c196:	3304      	adds	r3, #4
 800c198:	42a6      	cmp	r6, r4
 800c19a:	bf38      	it	cc
 800c19c:	2304      	movcc	r3, #4
 800c19e:	441d      	add	r5, r3
 800c1a0:	445b      	add	r3, fp
 800c1a2:	461e      	mov	r6, r3
 800c1a4:	462c      	mov	r4, r5
 800c1a6:	4544      	cmp	r4, r8
 800c1a8:	d30e      	bcc.n	800c1c8 <__mdiff+0xf8>
 800c1aa:	f108 0103 	add.w	r1, r8, #3
 800c1ae:	1b49      	subs	r1, r1, r5
 800c1b0:	f021 0103 	bic.w	r1, r1, #3
 800c1b4:	3d03      	subs	r5, #3
 800c1b6:	45a8      	cmp	r8, r5
 800c1b8:	bf38      	it	cc
 800c1ba:	2100      	movcc	r1, #0
 800c1bc:	440b      	add	r3, r1
 800c1be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1c2:	b191      	cbz	r1, 800c1ea <__mdiff+0x11a>
 800c1c4:	6117      	str	r7, [r2, #16]
 800c1c6:	e79d      	b.n	800c104 <__mdiff+0x34>
 800c1c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c1cc:	46e6      	mov	lr, ip
 800c1ce:	0c08      	lsrs	r0, r1, #16
 800c1d0:	fa1c fc81 	uxtah	ip, ip, r1
 800c1d4:	4471      	add	r1, lr
 800c1d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c1da:	b289      	uxth	r1, r1
 800c1dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c1e0:	f846 1b04 	str.w	r1, [r6], #4
 800c1e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1e8:	e7dd      	b.n	800c1a6 <__mdiff+0xd6>
 800c1ea:	3f01      	subs	r7, #1
 800c1ec:	e7e7      	b.n	800c1be <__mdiff+0xee>
 800c1ee:	bf00      	nop
 800c1f0:	0800eca8 	.word	0x0800eca8
 800c1f4:	0800ecb9 	.word	0x0800ecb9

0800c1f8 <__ulp>:
 800c1f8:	b082      	sub	sp, #8
 800c1fa:	ed8d 0b00 	vstr	d0, [sp]
 800c1fe:	9a01      	ldr	r2, [sp, #4]
 800c200:	4b0f      	ldr	r3, [pc, #60]	@ (800c240 <__ulp+0x48>)
 800c202:	4013      	ands	r3, r2
 800c204:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c208:	2b00      	cmp	r3, #0
 800c20a:	dc08      	bgt.n	800c21e <__ulp+0x26>
 800c20c:	425b      	negs	r3, r3
 800c20e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c212:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c216:	da04      	bge.n	800c222 <__ulp+0x2a>
 800c218:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c21c:	4113      	asrs	r3, r2
 800c21e:	2200      	movs	r2, #0
 800c220:	e008      	b.n	800c234 <__ulp+0x3c>
 800c222:	f1a2 0314 	sub.w	r3, r2, #20
 800c226:	2b1e      	cmp	r3, #30
 800c228:	bfda      	itte	le
 800c22a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c22e:	40da      	lsrle	r2, r3
 800c230:	2201      	movgt	r2, #1
 800c232:	2300      	movs	r3, #0
 800c234:	4619      	mov	r1, r3
 800c236:	4610      	mov	r0, r2
 800c238:	ec41 0b10 	vmov	d0, r0, r1
 800c23c:	b002      	add	sp, #8
 800c23e:	4770      	bx	lr
 800c240:	7ff00000 	.word	0x7ff00000

0800c244 <__b2d>:
 800c244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c248:	6906      	ldr	r6, [r0, #16]
 800c24a:	f100 0814 	add.w	r8, r0, #20
 800c24e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c252:	1f37      	subs	r7, r6, #4
 800c254:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c258:	4610      	mov	r0, r2
 800c25a:	f7ff fd53 	bl	800bd04 <__hi0bits>
 800c25e:	f1c0 0320 	rsb	r3, r0, #32
 800c262:	280a      	cmp	r0, #10
 800c264:	600b      	str	r3, [r1, #0]
 800c266:	491b      	ldr	r1, [pc, #108]	@ (800c2d4 <__b2d+0x90>)
 800c268:	dc15      	bgt.n	800c296 <__b2d+0x52>
 800c26a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c26e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c272:	45b8      	cmp	r8, r7
 800c274:	ea43 0501 	orr.w	r5, r3, r1
 800c278:	bf34      	ite	cc
 800c27a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c27e:	2300      	movcs	r3, #0
 800c280:	3015      	adds	r0, #21
 800c282:	fa02 f000 	lsl.w	r0, r2, r0
 800c286:	fa23 f30c 	lsr.w	r3, r3, ip
 800c28a:	4303      	orrs	r3, r0
 800c28c:	461c      	mov	r4, r3
 800c28e:	ec45 4b10 	vmov	d0, r4, r5
 800c292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c296:	45b8      	cmp	r8, r7
 800c298:	bf3a      	itte	cc
 800c29a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c29e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c2a2:	2300      	movcs	r3, #0
 800c2a4:	380b      	subs	r0, #11
 800c2a6:	d012      	beq.n	800c2ce <__b2d+0x8a>
 800c2a8:	f1c0 0120 	rsb	r1, r0, #32
 800c2ac:	fa23 f401 	lsr.w	r4, r3, r1
 800c2b0:	4082      	lsls	r2, r0
 800c2b2:	4322      	orrs	r2, r4
 800c2b4:	4547      	cmp	r7, r8
 800c2b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c2ba:	bf8c      	ite	hi
 800c2bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c2c0:	2200      	movls	r2, #0
 800c2c2:	4083      	lsls	r3, r0
 800c2c4:	40ca      	lsrs	r2, r1
 800c2c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	e7de      	b.n	800c28c <__b2d+0x48>
 800c2ce:	ea42 0501 	orr.w	r5, r2, r1
 800c2d2:	e7db      	b.n	800c28c <__b2d+0x48>
 800c2d4:	3ff00000 	.word	0x3ff00000

0800c2d8 <__d2b>:
 800c2d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2dc:	460f      	mov	r7, r1
 800c2de:	2101      	movs	r1, #1
 800c2e0:	ec59 8b10 	vmov	r8, r9, d0
 800c2e4:	4616      	mov	r6, r2
 800c2e6:	f7ff fc1b 	bl	800bb20 <_Balloc>
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	b930      	cbnz	r0, 800c2fc <__d2b+0x24>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	4b23      	ldr	r3, [pc, #140]	@ (800c380 <__d2b+0xa8>)
 800c2f2:	4824      	ldr	r0, [pc, #144]	@ (800c384 <__d2b+0xac>)
 800c2f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c2f8:	f001 fe52 	bl	800dfa0 <__assert_func>
 800c2fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c304:	b10d      	cbz	r5, 800c30a <__d2b+0x32>
 800c306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c30a:	9301      	str	r3, [sp, #4]
 800c30c:	f1b8 0300 	subs.w	r3, r8, #0
 800c310:	d023      	beq.n	800c35a <__d2b+0x82>
 800c312:	4668      	mov	r0, sp
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	f7ff fd14 	bl	800bd42 <__lo0bits>
 800c31a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c31e:	b1d0      	cbz	r0, 800c356 <__d2b+0x7e>
 800c320:	f1c0 0320 	rsb	r3, r0, #32
 800c324:	fa02 f303 	lsl.w	r3, r2, r3
 800c328:	430b      	orrs	r3, r1
 800c32a:	40c2      	lsrs	r2, r0
 800c32c:	6163      	str	r3, [r4, #20]
 800c32e:	9201      	str	r2, [sp, #4]
 800c330:	9b01      	ldr	r3, [sp, #4]
 800c332:	61a3      	str	r3, [r4, #24]
 800c334:	2b00      	cmp	r3, #0
 800c336:	bf0c      	ite	eq
 800c338:	2201      	moveq	r2, #1
 800c33a:	2202      	movne	r2, #2
 800c33c:	6122      	str	r2, [r4, #16]
 800c33e:	b1a5      	cbz	r5, 800c36a <__d2b+0x92>
 800c340:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c344:	4405      	add	r5, r0
 800c346:	603d      	str	r5, [r7, #0]
 800c348:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c34c:	6030      	str	r0, [r6, #0]
 800c34e:	4620      	mov	r0, r4
 800c350:	b003      	add	sp, #12
 800c352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c356:	6161      	str	r1, [r4, #20]
 800c358:	e7ea      	b.n	800c330 <__d2b+0x58>
 800c35a:	a801      	add	r0, sp, #4
 800c35c:	f7ff fcf1 	bl	800bd42 <__lo0bits>
 800c360:	9b01      	ldr	r3, [sp, #4]
 800c362:	6163      	str	r3, [r4, #20]
 800c364:	3020      	adds	r0, #32
 800c366:	2201      	movs	r2, #1
 800c368:	e7e8      	b.n	800c33c <__d2b+0x64>
 800c36a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c36e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c372:	6038      	str	r0, [r7, #0]
 800c374:	6918      	ldr	r0, [r3, #16]
 800c376:	f7ff fcc5 	bl	800bd04 <__hi0bits>
 800c37a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c37e:	e7e5      	b.n	800c34c <__d2b+0x74>
 800c380:	0800eca8 	.word	0x0800eca8
 800c384:	0800ecb9 	.word	0x0800ecb9

0800c388 <__ratio>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	b085      	sub	sp, #20
 800c38e:	e9cd 1000 	strd	r1, r0, [sp]
 800c392:	a902      	add	r1, sp, #8
 800c394:	f7ff ff56 	bl	800c244 <__b2d>
 800c398:	9800      	ldr	r0, [sp, #0]
 800c39a:	a903      	add	r1, sp, #12
 800c39c:	ec55 4b10 	vmov	r4, r5, d0
 800c3a0:	f7ff ff50 	bl	800c244 <__b2d>
 800c3a4:	9b01      	ldr	r3, [sp, #4]
 800c3a6:	6919      	ldr	r1, [r3, #16]
 800c3a8:	9b00      	ldr	r3, [sp, #0]
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	1ac9      	subs	r1, r1, r3
 800c3ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c3b2:	1a9b      	subs	r3, r3, r2
 800c3b4:	ec5b ab10 	vmov	sl, fp, d0
 800c3b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bfce      	itee	gt
 800c3c0:	462a      	movgt	r2, r5
 800c3c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c3c6:	465a      	movle	r2, fp
 800c3c8:	462f      	mov	r7, r5
 800c3ca:	46d9      	mov	r9, fp
 800c3cc:	bfcc      	ite	gt
 800c3ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c3d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c3d6:	464b      	mov	r3, r9
 800c3d8:	4652      	mov	r2, sl
 800c3da:	4620      	mov	r0, r4
 800c3dc:	4639      	mov	r1, r7
 800c3de:	f7f4 fa35 	bl	800084c <__aeabi_ddiv>
 800c3e2:	ec41 0b10 	vmov	d0, r0, r1
 800c3e6:	b005      	add	sp, #20
 800c3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3ec <__copybits>:
 800c3ec:	3901      	subs	r1, #1
 800c3ee:	b570      	push	{r4, r5, r6, lr}
 800c3f0:	1149      	asrs	r1, r1, #5
 800c3f2:	6914      	ldr	r4, [r2, #16]
 800c3f4:	3101      	adds	r1, #1
 800c3f6:	f102 0314 	add.w	r3, r2, #20
 800c3fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c3fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c402:	1f05      	subs	r5, r0, #4
 800c404:	42a3      	cmp	r3, r4
 800c406:	d30c      	bcc.n	800c422 <__copybits+0x36>
 800c408:	1aa3      	subs	r3, r4, r2
 800c40a:	3b11      	subs	r3, #17
 800c40c:	f023 0303 	bic.w	r3, r3, #3
 800c410:	3211      	adds	r2, #17
 800c412:	42a2      	cmp	r2, r4
 800c414:	bf88      	it	hi
 800c416:	2300      	movhi	r3, #0
 800c418:	4418      	add	r0, r3
 800c41a:	2300      	movs	r3, #0
 800c41c:	4288      	cmp	r0, r1
 800c41e:	d305      	bcc.n	800c42c <__copybits+0x40>
 800c420:	bd70      	pop	{r4, r5, r6, pc}
 800c422:	f853 6b04 	ldr.w	r6, [r3], #4
 800c426:	f845 6f04 	str.w	r6, [r5, #4]!
 800c42a:	e7eb      	b.n	800c404 <__copybits+0x18>
 800c42c:	f840 3b04 	str.w	r3, [r0], #4
 800c430:	e7f4      	b.n	800c41c <__copybits+0x30>

0800c432 <__any_on>:
 800c432:	f100 0214 	add.w	r2, r0, #20
 800c436:	6900      	ldr	r0, [r0, #16]
 800c438:	114b      	asrs	r3, r1, #5
 800c43a:	4298      	cmp	r0, r3
 800c43c:	b510      	push	{r4, lr}
 800c43e:	db11      	blt.n	800c464 <__any_on+0x32>
 800c440:	dd0a      	ble.n	800c458 <__any_on+0x26>
 800c442:	f011 011f 	ands.w	r1, r1, #31
 800c446:	d007      	beq.n	800c458 <__any_on+0x26>
 800c448:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c44c:	fa24 f001 	lsr.w	r0, r4, r1
 800c450:	fa00 f101 	lsl.w	r1, r0, r1
 800c454:	428c      	cmp	r4, r1
 800c456:	d10b      	bne.n	800c470 <__any_on+0x3e>
 800c458:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d803      	bhi.n	800c468 <__any_on+0x36>
 800c460:	2000      	movs	r0, #0
 800c462:	bd10      	pop	{r4, pc}
 800c464:	4603      	mov	r3, r0
 800c466:	e7f7      	b.n	800c458 <__any_on+0x26>
 800c468:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c46c:	2900      	cmp	r1, #0
 800c46e:	d0f5      	beq.n	800c45c <__any_on+0x2a>
 800c470:	2001      	movs	r0, #1
 800c472:	e7f6      	b.n	800c462 <__any_on+0x30>

0800c474 <sulp>:
 800c474:	b570      	push	{r4, r5, r6, lr}
 800c476:	4604      	mov	r4, r0
 800c478:	460d      	mov	r5, r1
 800c47a:	ec45 4b10 	vmov	d0, r4, r5
 800c47e:	4616      	mov	r6, r2
 800c480:	f7ff feba 	bl	800c1f8 <__ulp>
 800c484:	ec51 0b10 	vmov	r0, r1, d0
 800c488:	b17e      	cbz	r6, 800c4aa <sulp+0x36>
 800c48a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c48e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c492:	2b00      	cmp	r3, #0
 800c494:	dd09      	ble.n	800c4aa <sulp+0x36>
 800c496:	051b      	lsls	r3, r3, #20
 800c498:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c49c:	2400      	movs	r4, #0
 800c49e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c4a2:	4622      	mov	r2, r4
 800c4a4:	462b      	mov	r3, r5
 800c4a6:	f7f4 f8a7 	bl	80005f8 <__aeabi_dmul>
 800c4aa:	ec41 0b10 	vmov	d0, r0, r1
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}

0800c4b0 <_strtod_l>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	b09f      	sub	sp, #124	@ 0x7c
 800c4b6:	460c      	mov	r4, r1
 800c4b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c4be:	9005      	str	r0, [sp, #20]
 800c4c0:	f04f 0a00 	mov.w	sl, #0
 800c4c4:	f04f 0b00 	mov.w	fp, #0
 800c4c8:	460a      	mov	r2, r1
 800c4ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4cc:	7811      	ldrb	r1, [r2, #0]
 800c4ce:	292b      	cmp	r1, #43	@ 0x2b
 800c4d0:	d04a      	beq.n	800c568 <_strtod_l+0xb8>
 800c4d2:	d838      	bhi.n	800c546 <_strtod_l+0x96>
 800c4d4:	290d      	cmp	r1, #13
 800c4d6:	d832      	bhi.n	800c53e <_strtod_l+0x8e>
 800c4d8:	2908      	cmp	r1, #8
 800c4da:	d832      	bhi.n	800c542 <_strtod_l+0x92>
 800c4dc:	2900      	cmp	r1, #0
 800c4de:	d03b      	beq.n	800c558 <_strtod_l+0xa8>
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c4e6:	782a      	ldrb	r2, [r5, #0]
 800c4e8:	2a30      	cmp	r2, #48	@ 0x30
 800c4ea:	f040 80b2 	bne.w	800c652 <_strtod_l+0x1a2>
 800c4ee:	786a      	ldrb	r2, [r5, #1]
 800c4f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c4f4:	2a58      	cmp	r2, #88	@ 0x58
 800c4f6:	d16e      	bne.n	800c5d6 <_strtod_l+0x126>
 800c4f8:	9302      	str	r3, [sp, #8]
 800c4fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	ab1a      	add	r3, sp, #104	@ 0x68
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	4a8f      	ldr	r2, [pc, #572]	@ (800c740 <_strtod_l+0x290>)
 800c504:	9805      	ldr	r0, [sp, #20]
 800c506:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c508:	a919      	add	r1, sp, #100	@ 0x64
 800c50a:	f001 fde3 	bl	800e0d4 <__gethex>
 800c50e:	f010 060f 	ands.w	r6, r0, #15
 800c512:	4604      	mov	r4, r0
 800c514:	d005      	beq.n	800c522 <_strtod_l+0x72>
 800c516:	2e06      	cmp	r6, #6
 800c518:	d128      	bne.n	800c56c <_strtod_l+0xbc>
 800c51a:	3501      	adds	r5, #1
 800c51c:	2300      	movs	r3, #0
 800c51e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c520:	930e      	str	r3, [sp, #56]	@ 0x38
 800c522:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c524:	2b00      	cmp	r3, #0
 800c526:	f040 858e 	bne.w	800d046 <_strtod_l+0xb96>
 800c52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c52c:	b1cb      	cbz	r3, 800c562 <_strtod_l+0xb2>
 800c52e:	4652      	mov	r2, sl
 800c530:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c534:	ec43 2b10 	vmov	d0, r2, r3
 800c538:	b01f      	add	sp, #124	@ 0x7c
 800c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53e:	2920      	cmp	r1, #32
 800c540:	d1ce      	bne.n	800c4e0 <_strtod_l+0x30>
 800c542:	3201      	adds	r2, #1
 800c544:	e7c1      	b.n	800c4ca <_strtod_l+0x1a>
 800c546:	292d      	cmp	r1, #45	@ 0x2d
 800c548:	d1ca      	bne.n	800c4e0 <_strtod_l+0x30>
 800c54a:	2101      	movs	r1, #1
 800c54c:	910e      	str	r1, [sp, #56]	@ 0x38
 800c54e:	1c51      	adds	r1, r2, #1
 800c550:	9119      	str	r1, [sp, #100]	@ 0x64
 800c552:	7852      	ldrb	r2, [r2, #1]
 800c554:	2a00      	cmp	r2, #0
 800c556:	d1c5      	bne.n	800c4e4 <_strtod_l+0x34>
 800c558:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c55a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f040 8570 	bne.w	800d042 <_strtod_l+0xb92>
 800c562:	4652      	mov	r2, sl
 800c564:	465b      	mov	r3, fp
 800c566:	e7e5      	b.n	800c534 <_strtod_l+0x84>
 800c568:	2100      	movs	r1, #0
 800c56a:	e7ef      	b.n	800c54c <_strtod_l+0x9c>
 800c56c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c56e:	b13a      	cbz	r2, 800c580 <_strtod_l+0xd0>
 800c570:	2135      	movs	r1, #53	@ 0x35
 800c572:	a81c      	add	r0, sp, #112	@ 0x70
 800c574:	f7ff ff3a 	bl	800c3ec <__copybits>
 800c578:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c57a:	9805      	ldr	r0, [sp, #20]
 800c57c:	f7ff fb10 	bl	800bba0 <_Bfree>
 800c580:	3e01      	subs	r6, #1
 800c582:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c584:	2e04      	cmp	r6, #4
 800c586:	d806      	bhi.n	800c596 <_strtod_l+0xe6>
 800c588:	e8df f006 	tbb	[pc, r6]
 800c58c:	201d0314 	.word	0x201d0314
 800c590:	14          	.byte	0x14
 800c591:	00          	.byte	0x00
 800c592:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c596:	05e1      	lsls	r1, r4, #23
 800c598:	bf48      	it	mi
 800c59a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c59e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c5a2:	0d1b      	lsrs	r3, r3, #20
 800c5a4:	051b      	lsls	r3, r3, #20
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1bb      	bne.n	800c522 <_strtod_l+0x72>
 800c5aa:	f7fe fb1d 	bl	800abe8 <__errno>
 800c5ae:	2322      	movs	r3, #34	@ 0x22
 800c5b0:	6003      	str	r3, [r0, #0]
 800c5b2:	e7b6      	b.n	800c522 <_strtod_l+0x72>
 800c5b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c5b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c5bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c5c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c5c4:	e7e7      	b.n	800c596 <_strtod_l+0xe6>
 800c5c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c748 <_strtod_l+0x298>
 800c5ca:	e7e4      	b.n	800c596 <_strtod_l+0xe6>
 800c5cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c5d0:	f04f 3aff 	mov.w	sl, #4294967295
 800c5d4:	e7df      	b.n	800c596 <_strtod_l+0xe6>
 800c5d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5d8:	1c5a      	adds	r2, r3, #1
 800c5da:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5dc:	785b      	ldrb	r3, [r3, #1]
 800c5de:	2b30      	cmp	r3, #48	@ 0x30
 800c5e0:	d0f9      	beq.n	800c5d6 <_strtod_l+0x126>
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d09d      	beq.n	800c522 <_strtod_l+0x72>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	2700      	movs	r7, #0
 800c5ea:	9308      	str	r3, [sp, #32]
 800c5ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800c5f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c5f2:	46b9      	mov	r9, r7
 800c5f4:	220a      	movs	r2, #10
 800c5f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c5f8:	7805      	ldrb	r5, [r0, #0]
 800c5fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c5fe:	b2d9      	uxtb	r1, r3
 800c600:	2909      	cmp	r1, #9
 800c602:	d928      	bls.n	800c656 <_strtod_l+0x1a6>
 800c604:	494f      	ldr	r1, [pc, #316]	@ (800c744 <_strtod_l+0x294>)
 800c606:	2201      	movs	r2, #1
 800c608:	f7fe fa69 	bl	800aade <strncmp>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d032      	beq.n	800c676 <_strtod_l+0x1c6>
 800c610:	2000      	movs	r0, #0
 800c612:	462a      	mov	r2, r5
 800c614:	900a      	str	r0, [sp, #40]	@ 0x28
 800c616:	464d      	mov	r5, r9
 800c618:	4603      	mov	r3, r0
 800c61a:	2a65      	cmp	r2, #101	@ 0x65
 800c61c:	d001      	beq.n	800c622 <_strtod_l+0x172>
 800c61e:	2a45      	cmp	r2, #69	@ 0x45
 800c620:	d114      	bne.n	800c64c <_strtod_l+0x19c>
 800c622:	b91d      	cbnz	r5, 800c62c <_strtod_l+0x17c>
 800c624:	9a08      	ldr	r2, [sp, #32]
 800c626:	4302      	orrs	r2, r0
 800c628:	d096      	beq.n	800c558 <_strtod_l+0xa8>
 800c62a:	2500      	movs	r5, #0
 800c62c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c62e:	1c62      	adds	r2, r4, #1
 800c630:	9219      	str	r2, [sp, #100]	@ 0x64
 800c632:	7862      	ldrb	r2, [r4, #1]
 800c634:	2a2b      	cmp	r2, #43	@ 0x2b
 800c636:	d07a      	beq.n	800c72e <_strtod_l+0x27e>
 800c638:	2a2d      	cmp	r2, #45	@ 0x2d
 800c63a:	d07e      	beq.n	800c73a <_strtod_l+0x28a>
 800c63c:	f04f 0c00 	mov.w	ip, #0
 800c640:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c644:	2909      	cmp	r1, #9
 800c646:	f240 8085 	bls.w	800c754 <_strtod_l+0x2a4>
 800c64a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c64c:	f04f 0800 	mov.w	r8, #0
 800c650:	e0a5      	b.n	800c79e <_strtod_l+0x2ee>
 800c652:	2300      	movs	r3, #0
 800c654:	e7c8      	b.n	800c5e8 <_strtod_l+0x138>
 800c656:	f1b9 0f08 	cmp.w	r9, #8
 800c65a:	bfd8      	it	le
 800c65c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c65e:	f100 0001 	add.w	r0, r0, #1
 800c662:	bfda      	itte	le
 800c664:	fb02 3301 	mlale	r3, r2, r1, r3
 800c668:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c66a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c66e:	f109 0901 	add.w	r9, r9, #1
 800c672:	9019      	str	r0, [sp, #100]	@ 0x64
 800c674:	e7bf      	b.n	800c5f6 <_strtod_l+0x146>
 800c676:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c67c:	785a      	ldrb	r2, [r3, #1]
 800c67e:	f1b9 0f00 	cmp.w	r9, #0
 800c682:	d03b      	beq.n	800c6fc <_strtod_l+0x24c>
 800c684:	900a      	str	r0, [sp, #40]	@ 0x28
 800c686:	464d      	mov	r5, r9
 800c688:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c68c:	2b09      	cmp	r3, #9
 800c68e:	d912      	bls.n	800c6b6 <_strtod_l+0x206>
 800c690:	2301      	movs	r3, #1
 800c692:	e7c2      	b.n	800c61a <_strtod_l+0x16a>
 800c694:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	9219      	str	r2, [sp, #100]	@ 0x64
 800c69a:	785a      	ldrb	r2, [r3, #1]
 800c69c:	3001      	adds	r0, #1
 800c69e:	2a30      	cmp	r2, #48	@ 0x30
 800c6a0:	d0f8      	beq.n	800c694 <_strtod_l+0x1e4>
 800c6a2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c6a6:	2b08      	cmp	r3, #8
 800c6a8:	f200 84d2 	bhi.w	800d050 <_strtod_l+0xba0>
 800c6ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6ae:	900a      	str	r0, [sp, #40]	@ 0x28
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	3a30      	subs	r2, #48	@ 0x30
 800c6b8:	f100 0301 	add.w	r3, r0, #1
 800c6bc:	d018      	beq.n	800c6f0 <_strtod_l+0x240>
 800c6be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6c0:	4419      	add	r1, r3
 800c6c2:	910a      	str	r1, [sp, #40]	@ 0x28
 800c6c4:	462e      	mov	r6, r5
 800c6c6:	f04f 0e0a 	mov.w	lr, #10
 800c6ca:	1c71      	adds	r1, r6, #1
 800c6cc:	eba1 0c05 	sub.w	ip, r1, r5
 800c6d0:	4563      	cmp	r3, ip
 800c6d2:	dc15      	bgt.n	800c700 <_strtod_l+0x250>
 800c6d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c6d8:	182b      	adds	r3, r5, r0
 800c6da:	2b08      	cmp	r3, #8
 800c6dc:	f105 0501 	add.w	r5, r5, #1
 800c6e0:	4405      	add	r5, r0
 800c6e2:	dc1a      	bgt.n	800c71a <_strtod_l+0x26a>
 800c6e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6e6:	230a      	movs	r3, #10
 800c6e8:	fb03 2301 	mla	r3, r3, r1, r2
 800c6ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6f2:	1c51      	adds	r1, r2, #1
 800c6f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c6f6:	7852      	ldrb	r2, [r2, #1]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	e7c5      	b.n	800c688 <_strtod_l+0x1d8>
 800c6fc:	4648      	mov	r0, r9
 800c6fe:	e7ce      	b.n	800c69e <_strtod_l+0x1ee>
 800c700:	2e08      	cmp	r6, #8
 800c702:	dc05      	bgt.n	800c710 <_strtod_l+0x260>
 800c704:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c706:	fb0e f606 	mul.w	r6, lr, r6
 800c70a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c70c:	460e      	mov	r6, r1
 800c70e:	e7dc      	b.n	800c6ca <_strtod_l+0x21a>
 800c710:	2910      	cmp	r1, #16
 800c712:	bfd8      	it	le
 800c714:	fb0e f707 	mulle.w	r7, lr, r7
 800c718:	e7f8      	b.n	800c70c <_strtod_l+0x25c>
 800c71a:	2b0f      	cmp	r3, #15
 800c71c:	bfdc      	itt	le
 800c71e:	230a      	movle	r3, #10
 800c720:	fb03 2707 	mlale	r7, r3, r7, r2
 800c724:	e7e3      	b.n	800c6ee <_strtod_l+0x23e>
 800c726:	2300      	movs	r3, #0
 800c728:	930a      	str	r3, [sp, #40]	@ 0x28
 800c72a:	2301      	movs	r3, #1
 800c72c:	e77a      	b.n	800c624 <_strtod_l+0x174>
 800c72e:	f04f 0c00 	mov.w	ip, #0
 800c732:	1ca2      	adds	r2, r4, #2
 800c734:	9219      	str	r2, [sp, #100]	@ 0x64
 800c736:	78a2      	ldrb	r2, [r4, #2]
 800c738:	e782      	b.n	800c640 <_strtod_l+0x190>
 800c73a:	f04f 0c01 	mov.w	ip, #1
 800c73e:	e7f8      	b.n	800c732 <_strtod_l+0x282>
 800c740:	0800eef4 	.word	0x0800eef4
 800c744:	0800ed12 	.word	0x0800ed12
 800c748:	7ff00000 	.word	0x7ff00000
 800c74c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c74e:	1c51      	adds	r1, r2, #1
 800c750:	9119      	str	r1, [sp, #100]	@ 0x64
 800c752:	7852      	ldrb	r2, [r2, #1]
 800c754:	2a30      	cmp	r2, #48	@ 0x30
 800c756:	d0f9      	beq.n	800c74c <_strtod_l+0x29c>
 800c758:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c75c:	2908      	cmp	r1, #8
 800c75e:	f63f af75 	bhi.w	800c64c <_strtod_l+0x19c>
 800c762:	3a30      	subs	r2, #48	@ 0x30
 800c764:	9209      	str	r2, [sp, #36]	@ 0x24
 800c766:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c768:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c76a:	f04f 080a 	mov.w	r8, #10
 800c76e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c770:	1c56      	adds	r6, r2, #1
 800c772:	9619      	str	r6, [sp, #100]	@ 0x64
 800c774:	7852      	ldrb	r2, [r2, #1]
 800c776:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c77a:	f1be 0f09 	cmp.w	lr, #9
 800c77e:	d939      	bls.n	800c7f4 <_strtod_l+0x344>
 800c780:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c782:	1a76      	subs	r6, r6, r1
 800c784:	2e08      	cmp	r6, #8
 800c786:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c78a:	dc03      	bgt.n	800c794 <_strtod_l+0x2e4>
 800c78c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c78e:	4588      	cmp	r8, r1
 800c790:	bfa8      	it	ge
 800c792:	4688      	movge	r8, r1
 800c794:	f1bc 0f00 	cmp.w	ip, #0
 800c798:	d001      	beq.n	800c79e <_strtod_l+0x2ee>
 800c79a:	f1c8 0800 	rsb	r8, r8, #0
 800c79e:	2d00      	cmp	r5, #0
 800c7a0:	d14e      	bne.n	800c840 <_strtod_l+0x390>
 800c7a2:	9908      	ldr	r1, [sp, #32]
 800c7a4:	4308      	orrs	r0, r1
 800c7a6:	f47f aebc 	bne.w	800c522 <_strtod_l+0x72>
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f47f aed4 	bne.w	800c558 <_strtod_l+0xa8>
 800c7b0:	2a69      	cmp	r2, #105	@ 0x69
 800c7b2:	d028      	beq.n	800c806 <_strtod_l+0x356>
 800c7b4:	dc25      	bgt.n	800c802 <_strtod_l+0x352>
 800c7b6:	2a49      	cmp	r2, #73	@ 0x49
 800c7b8:	d025      	beq.n	800c806 <_strtod_l+0x356>
 800c7ba:	2a4e      	cmp	r2, #78	@ 0x4e
 800c7bc:	f47f aecc 	bne.w	800c558 <_strtod_l+0xa8>
 800c7c0:	499a      	ldr	r1, [pc, #616]	@ (800ca2c <_strtod_l+0x57c>)
 800c7c2:	a819      	add	r0, sp, #100	@ 0x64
 800c7c4:	f001 fea8 	bl	800e518 <__match>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	f43f aec5 	beq.w	800c558 <_strtod_l+0xa8>
 800c7ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	2b28      	cmp	r3, #40	@ 0x28
 800c7d4:	d12e      	bne.n	800c834 <_strtod_l+0x384>
 800c7d6:	4996      	ldr	r1, [pc, #600]	@ (800ca30 <_strtod_l+0x580>)
 800c7d8:	aa1c      	add	r2, sp, #112	@ 0x70
 800c7da:	a819      	add	r0, sp, #100	@ 0x64
 800c7dc:	f001 feb0 	bl	800e540 <__hexnan>
 800c7e0:	2805      	cmp	r0, #5
 800c7e2:	d127      	bne.n	800c834 <_strtod_l+0x384>
 800c7e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c7e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c7ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c7ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c7f2:	e696      	b.n	800c522 <_strtod_l+0x72>
 800c7f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7f6:	fb08 2101 	mla	r1, r8, r1, r2
 800c7fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c7fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800c800:	e7b5      	b.n	800c76e <_strtod_l+0x2be>
 800c802:	2a6e      	cmp	r2, #110	@ 0x6e
 800c804:	e7da      	b.n	800c7bc <_strtod_l+0x30c>
 800c806:	498b      	ldr	r1, [pc, #556]	@ (800ca34 <_strtod_l+0x584>)
 800c808:	a819      	add	r0, sp, #100	@ 0x64
 800c80a:	f001 fe85 	bl	800e518 <__match>
 800c80e:	2800      	cmp	r0, #0
 800c810:	f43f aea2 	beq.w	800c558 <_strtod_l+0xa8>
 800c814:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c816:	4988      	ldr	r1, [pc, #544]	@ (800ca38 <_strtod_l+0x588>)
 800c818:	3b01      	subs	r3, #1
 800c81a:	a819      	add	r0, sp, #100	@ 0x64
 800c81c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c81e:	f001 fe7b 	bl	800e518 <__match>
 800c822:	b910      	cbnz	r0, 800c82a <_strtod_l+0x37a>
 800c824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c826:	3301      	adds	r3, #1
 800c828:	9319      	str	r3, [sp, #100]	@ 0x64
 800c82a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ca48 <_strtod_l+0x598>
 800c82e:	f04f 0a00 	mov.w	sl, #0
 800c832:	e676      	b.n	800c522 <_strtod_l+0x72>
 800c834:	4881      	ldr	r0, [pc, #516]	@ (800ca3c <_strtod_l+0x58c>)
 800c836:	f001 fbab 	bl	800df90 <nan>
 800c83a:	ec5b ab10 	vmov	sl, fp, d0
 800c83e:	e670      	b.n	800c522 <_strtod_l+0x72>
 800c840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c842:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c844:	eba8 0303 	sub.w	r3, r8, r3
 800c848:	f1b9 0f00 	cmp.w	r9, #0
 800c84c:	bf08      	it	eq
 800c84e:	46a9      	moveq	r9, r5
 800c850:	2d10      	cmp	r5, #16
 800c852:	9309      	str	r3, [sp, #36]	@ 0x24
 800c854:	462c      	mov	r4, r5
 800c856:	bfa8      	it	ge
 800c858:	2410      	movge	r4, #16
 800c85a:	f7f3 fe53 	bl	8000504 <__aeabi_ui2d>
 800c85e:	2d09      	cmp	r5, #9
 800c860:	4682      	mov	sl, r0
 800c862:	468b      	mov	fp, r1
 800c864:	dc13      	bgt.n	800c88e <_strtod_l+0x3de>
 800c866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f43f ae5a 	beq.w	800c522 <_strtod_l+0x72>
 800c86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c870:	dd78      	ble.n	800c964 <_strtod_l+0x4b4>
 800c872:	2b16      	cmp	r3, #22
 800c874:	dc5f      	bgt.n	800c936 <_strtod_l+0x486>
 800c876:	4972      	ldr	r1, [pc, #456]	@ (800ca40 <_strtod_l+0x590>)
 800c878:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c87c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c880:	4652      	mov	r2, sl
 800c882:	465b      	mov	r3, fp
 800c884:	f7f3 feb8 	bl	80005f8 <__aeabi_dmul>
 800c888:	4682      	mov	sl, r0
 800c88a:	468b      	mov	fp, r1
 800c88c:	e649      	b.n	800c522 <_strtod_l+0x72>
 800c88e:	4b6c      	ldr	r3, [pc, #432]	@ (800ca40 <_strtod_l+0x590>)
 800c890:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c894:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c898:	f7f3 feae 	bl	80005f8 <__aeabi_dmul>
 800c89c:	4682      	mov	sl, r0
 800c89e:	4638      	mov	r0, r7
 800c8a0:	468b      	mov	fp, r1
 800c8a2:	f7f3 fe2f 	bl	8000504 <__aeabi_ui2d>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4650      	mov	r0, sl
 800c8ac:	4659      	mov	r1, fp
 800c8ae:	f7f3 fced 	bl	800028c <__adddf3>
 800c8b2:	2d0f      	cmp	r5, #15
 800c8b4:	4682      	mov	sl, r0
 800c8b6:	468b      	mov	fp, r1
 800c8b8:	ddd5      	ble.n	800c866 <_strtod_l+0x3b6>
 800c8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8bc:	1b2c      	subs	r4, r5, r4
 800c8be:	441c      	add	r4, r3
 800c8c0:	2c00      	cmp	r4, #0
 800c8c2:	f340 8093 	ble.w	800c9ec <_strtod_l+0x53c>
 800c8c6:	f014 030f 	ands.w	r3, r4, #15
 800c8ca:	d00a      	beq.n	800c8e2 <_strtod_l+0x432>
 800c8cc:	495c      	ldr	r1, [pc, #368]	@ (800ca40 <_strtod_l+0x590>)
 800c8ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c8d2:	4652      	mov	r2, sl
 800c8d4:	465b      	mov	r3, fp
 800c8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8da:	f7f3 fe8d 	bl	80005f8 <__aeabi_dmul>
 800c8de:	4682      	mov	sl, r0
 800c8e0:	468b      	mov	fp, r1
 800c8e2:	f034 040f 	bics.w	r4, r4, #15
 800c8e6:	d073      	beq.n	800c9d0 <_strtod_l+0x520>
 800c8e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c8ec:	dd49      	ble.n	800c982 <_strtod_l+0x4d2>
 800c8ee:	2400      	movs	r4, #0
 800c8f0:	46a0      	mov	r8, r4
 800c8f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c8f4:	46a1      	mov	r9, r4
 800c8f6:	9a05      	ldr	r2, [sp, #20]
 800c8f8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ca48 <_strtod_l+0x598>
 800c8fc:	2322      	movs	r3, #34	@ 0x22
 800c8fe:	6013      	str	r3, [r2, #0]
 800c900:	f04f 0a00 	mov.w	sl, #0
 800c904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c906:	2b00      	cmp	r3, #0
 800c908:	f43f ae0b 	beq.w	800c522 <_strtod_l+0x72>
 800c90c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c90e:	9805      	ldr	r0, [sp, #20]
 800c910:	f7ff f946 	bl	800bba0 <_Bfree>
 800c914:	9805      	ldr	r0, [sp, #20]
 800c916:	4649      	mov	r1, r9
 800c918:	f7ff f942 	bl	800bba0 <_Bfree>
 800c91c:	9805      	ldr	r0, [sp, #20]
 800c91e:	4641      	mov	r1, r8
 800c920:	f7ff f93e 	bl	800bba0 <_Bfree>
 800c924:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c926:	9805      	ldr	r0, [sp, #20]
 800c928:	f7ff f93a 	bl	800bba0 <_Bfree>
 800c92c:	9805      	ldr	r0, [sp, #20]
 800c92e:	4621      	mov	r1, r4
 800c930:	f7ff f936 	bl	800bba0 <_Bfree>
 800c934:	e5f5      	b.n	800c522 <_strtod_l+0x72>
 800c936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c938:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c93c:	4293      	cmp	r3, r2
 800c93e:	dbbc      	blt.n	800c8ba <_strtod_l+0x40a>
 800c940:	4c3f      	ldr	r4, [pc, #252]	@ (800ca40 <_strtod_l+0x590>)
 800c942:	f1c5 050f 	rsb	r5, r5, #15
 800c946:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c94a:	4652      	mov	r2, sl
 800c94c:	465b      	mov	r3, fp
 800c94e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c952:	f7f3 fe51 	bl	80005f8 <__aeabi_dmul>
 800c956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c958:	1b5d      	subs	r5, r3, r5
 800c95a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c95e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c962:	e78f      	b.n	800c884 <_strtod_l+0x3d4>
 800c964:	3316      	adds	r3, #22
 800c966:	dba8      	blt.n	800c8ba <_strtod_l+0x40a>
 800c968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c96a:	eba3 0808 	sub.w	r8, r3, r8
 800c96e:	4b34      	ldr	r3, [pc, #208]	@ (800ca40 <_strtod_l+0x590>)
 800c970:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c974:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c978:	4650      	mov	r0, sl
 800c97a:	4659      	mov	r1, fp
 800c97c:	f7f3 ff66 	bl	800084c <__aeabi_ddiv>
 800c980:	e782      	b.n	800c888 <_strtod_l+0x3d8>
 800c982:	2300      	movs	r3, #0
 800c984:	4f2f      	ldr	r7, [pc, #188]	@ (800ca44 <_strtod_l+0x594>)
 800c986:	1124      	asrs	r4, r4, #4
 800c988:	4650      	mov	r0, sl
 800c98a:	4659      	mov	r1, fp
 800c98c:	461e      	mov	r6, r3
 800c98e:	2c01      	cmp	r4, #1
 800c990:	dc21      	bgt.n	800c9d6 <_strtod_l+0x526>
 800c992:	b10b      	cbz	r3, 800c998 <_strtod_l+0x4e8>
 800c994:	4682      	mov	sl, r0
 800c996:	468b      	mov	fp, r1
 800c998:	492a      	ldr	r1, [pc, #168]	@ (800ca44 <_strtod_l+0x594>)
 800c99a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c99e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c9a2:	4652      	mov	r2, sl
 800c9a4:	465b      	mov	r3, fp
 800c9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9aa:	f7f3 fe25 	bl	80005f8 <__aeabi_dmul>
 800c9ae:	4b26      	ldr	r3, [pc, #152]	@ (800ca48 <_strtod_l+0x598>)
 800c9b0:	460a      	mov	r2, r1
 800c9b2:	400b      	ands	r3, r1
 800c9b4:	4925      	ldr	r1, [pc, #148]	@ (800ca4c <_strtod_l+0x59c>)
 800c9b6:	428b      	cmp	r3, r1
 800c9b8:	4682      	mov	sl, r0
 800c9ba:	d898      	bhi.n	800c8ee <_strtod_l+0x43e>
 800c9bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c9c0:	428b      	cmp	r3, r1
 800c9c2:	bf86      	itte	hi
 800c9c4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ca50 <_strtod_l+0x5a0>
 800c9c8:	f04f 3aff 	movhi.w	sl, #4294967295
 800c9cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9308      	str	r3, [sp, #32]
 800c9d4:	e076      	b.n	800cac4 <_strtod_l+0x614>
 800c9d6:	07e2      	lsls	r2, r4, #31
 800c9d8:	d504      	bpl.n	800c9e4 <_strtod_l+0x534>
 800c9da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9de:	f7f3 fe0b 	bl	80005f8 <__aeabi_dmul>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	3601      	adds	r6, #1
 800c9e6:	1064      	asrs	r4, r4, #1
 800c9e8:	3708      	adds	r7, #8
 800c9ea:	e7d0      	b.n	800c98e <_strtod_l+0x4de>
 800c9ec:	d0f0      	beq.n	800c9d0 <_strtod_l+0x520>
 800c9ee:	4264      	negs	r4, r4
 800c9f0:	f014 020f 	ands.w	r2, r4, #15
 800c9f4:	d00a      	beq.n	800ca0c <_strtod_l+0x55c>
 800c9f6:	4b12      	ldr	r3, [pc, #72]	@ (800ca40 <_strtod_l+0x590>)
 800c9f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9fc:	4650      	mov	r0, sl
 800c9fe:	4659      	mov	r1, fp
 800ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca04:	f7f3 ff22 	bl	800084c <__aeabi_ddiv>
 800ca08:	4682      	mov	sl, r0
 800ca0a:	468b      	mov	fp, r1
 800ca0c:	1124      	asrs	r4, r4, #4
 800ca0e:	d0df      	beq.n	800c9d0 <_strtod_l+0x520>
 800ca10:	2c1f      	cmp	r4, #31
 800ca12:	dd1f      	ble.n	800ca54 <_strtod_l+0x5a4>
 800ca14:	2400      	movs	r4, #0
 800ca16:	46a0      	mov	r8, r4
 800ca18:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ca1a:	46a1      	mov	r9, r4
 800ca1c:	9a05      	ldr	r2, [sp, #20]
 800ca1e:	2322      	movs	r3, #34	@ 0x22
 800ca20:	f04f 0a00 	mov.w	sl, #0
 800ca24:	f04f 0b00 	mov.w	fp, #0
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	e76b      	b.n	800c904 <_strtod_l+0x454>
 800ca2c:	0800ec02 	.word	0x0800ec02
 800ca30:	0800eee0 	.word	0x0800eee0
 800ca34:	0800ebfa 	.word	0x0800ebfa
 800ca38:	0800ec2f 	.word	0x0800ec2f
 800ca3c:	0800ed83 	.word	0x0800ed83
 800ca40:	0800ee18 	.word	0x0800ee18
 800ca44:	0800edf0 	.word	0x0800edf0
 800ca48:	7ff00000 	.word	0x7ff00000
 800ca4c:	7ca00000 	.word	0x7ca00000
 800ca50:	7fefffff 	.word	0x7fefffff
 800ca54:	f014 0310 	ands.w	r3, r4, #16
 800ca58:	bf18      	it	ne
 800ca5a:	236a      	movne	r3, #106	@ 0x6a
 800ca5c:	4ea9      	ldr	r6, [pc, #676]	@ (800cd04 <_strtod_l+0x854>)
 800ca5e:	9308      	str	r3, [sp, #32]
 800ca60:	4650      	mov	r0, sl
 800ca62:	4659      	mov	r1, fp
 800ca64:	2300      	movs	r3, #0
 800ca66:	07e7      	lsls	r7, r4, #31
 800ca68:	d504      	bpl.n	800ca74 <_strtod_l+0x5c4>
 800ca6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca6e:	f7f3 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ca72:	2301      	movs	r3, #1
 800ca74:	1064      	asrs	r4, r4, #1
 800ca76:	f106 0608 	add.w	r6, r6, #8
 800ca7a:	d1f4      	bne.n	800ca66 <_strtod_l+0x5b6>
 800ca7c:	b10b      	cbz	r3, 800ca82 <_strtod_l+0x5d2>
 800ca7e:	4682      	mov	sl, r0
 800ca80:	468b      	mov	fp, r1
 800ca82:	9b08      	ldr	r3, [sp, #32]
 800ca84:	b1b3      	cbz	r3, 800cab4 <_strtod_l+0x604>
 800ca86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ca8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	4659      	mov	r1, fp
 800ca92:	dd0f      	ble.n	800cab4 <_strtod_l+0x604>
 800ca94:	2b1f      	cmp	r3, #31
 800ca96:	dd56      	ble.n	800cb46 <_strtod_l+0x696>
 800ca98:	2b34      	cmp	r3, #52	@ 0x34
 800ca9a:	bfde      	ittt	le
 800ca9c:	f04f 33ff 	movle.w	r3, #4294967295
 800caa0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800caa4:	4093      	lslle	r3, r2
 800caa6:	f04f 0a00 	mov.w	sl, #0
 800caaa:	bfcc      	ite	gt
 800caac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cab0:	ea03 0b01 	andle.w	fp, r3, r1
 800cab4:	2200      	movs	r2, #0
 800cab6:	2300      	movs	r3, #0
 800cab8:	4650      	mov	r0, sl
 800caba:	4659      	mov	r1, fp
 800cabc:	f7f4 f804 	bl	8000ac8 <__aeabi_dcmpeq>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d1a7      	bne.n	800ca14 <_strtod_l+0x564>
 800cac4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800caca:	9805      	ldr	r0, [sp, #20]
 800cacc:	462b      	mov	r3, r5
 800cace:	464a      	mov	r2, r9
 800cad0:	f7ff f8ce 	bl	800bc70 <__s2b>
 800cad4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cad6:	2800      	cmp	r0, #0
 800cad8:	f43f af09 	beq.w	800c8ee <_strtod_l+0x43e>
 800cadc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cae0:	2a00      	cmp	r2, #0
 800cae2:	eba3 0308 	sub.w	r3, r3, r8
 800cae6:	bfa8      	it	ge
 800cae8:	2300      	movge	r3, #0
 800caea:	9312      	str	r3, [sp, #72]	@ 0x48
 800caec:	2400      	movs	r4, #0
 800caee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800caf2:	9316      	str	r3, [sp, #88]	@ 0x58
 800caf4:	46a0      	mov	r8, r4
 800caf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caf8:	9805      	ldr	r0, [sp, #20]
 800cafa:	6859      	ldr	r1, [r3, #4]
 800cafc:	f7ff f810 	bl	800bb20 <_Balloc>
 800cb00:	4681      	mov	r9, r0
 800cb02:	2800      	cmp	r0, #0
 800cb04:	f43f aef7 	beq.w	800c8f6 <_strtod_l+0x446>
 800cb08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb0a:	691a      	ldr	r2, [r3, #16]
 800cb0c:	3202      	adds	r2, #2
 800cb0e:	f103 010c 	add.w	r1, r3, #12
 800cb12:	0092      	lsls	r2, r2, #2
 800cb14:	300c      	adds	r0, #12
 800cb16:	f7fe f894 	bl	800ac42 <memcpy>
 800cb1a:	ec4b ab10 	vmov	d0, sl, fp
 800cb1e:	9805      	ldr	r0, [sp, #20]
 800cb20:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb22:	a91b      	add	r1, sp, #108	@ 0x6c
 800cb24:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cb28:	f7ff fbd6 	bl	800c2d8 <__d2b>
 800cb2c:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	f43f aee1 	beq.w	800c8f6 <_strtod_l+0x446>
 800cb34:	9805      	ldr	r0, [sp, #20]
 800cb36:	2101      	movs	r1, #1
 800cb38:	f7ff f930 	bl	800bd9c <__i2b>
 800cb3c:	4680      	mov	r8, r0
 800cb3e:	b948      	cbnz	r0, 800cb54 <_strtod_l+0x6a4>
 800cb40:	f04f 0800 	mov.w	r8, #0
 800cb44:	e6d7      	b.n	800c8f6 <_strtod_l+0x446>
 800cb46:	f04f 32ff 	mov.w	r2, #4294967295
 800cb4a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb4e:	ea03 0a0a 	and.w	sl, r3, sl
 800cb52:	e7af      	b.n	800cab4 <_strtod_l+0x604>
 800cb54:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cb56:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cb58:	2d00      	cmp	r5, #0
 800cb5a:	bfab      	itete	ge
 800cb5c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cb5e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cb60:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cb62:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cb64:	bfac      	ite	ge
 800cb66:	18ef      	addge	r7, r5, r3
 800cb68:	1b5e      	sublt	r6, r3, r5
 800cb6a:	9b08      	ldr	r3, [sp, #32]
 800cb6c:	1aed      	subs	r5, r5, r3
 800cb6e:	4415      	add	r5, r2
 800cb70:	4b65      	ldr	r3, [pc, #404]	@ (800cd08 <_strtod_l+0x858>)
 800cb72:	3d01      	subs	r5, #1
 800cb74:	429d      	cmp	r5, r3
 800cb76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cb7a:	da50      	bge.n	800cc1e <_strtod_l+0x76e>
 800cb7c:	1b5b      	subs	r3, r3, r5
 800cb7e:	2b1f      	cmp	r3, #31
 800cb80:	eba2 0203 	sub.w	r2, r2, r3
 800cb84:	f04f 0101 	mov.w	r1, #1
 800cb88:	dc3d      	bgt.n	800cc06 <_strtod_l+0x756>
 800cb8a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb90:	2300      	movs	r3, #0
 800cb92:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb94:	18bd      	adds	r5, r7, r2
 800cb96:	9b08      	ldr	r3, [sp, #32]
 800cb98:	42af      	cmp	r7, r5
 800cb9a:	4416      	add	r6, r2
 800cb9c:	441e      	add	r6, r3
 800cb9e:	463b      	mov	r3, r7
 800cba0:	bfa8      	it	ge
 800cba2:	462b      	movge	r3, r5
 800cba4:	42b3      	cmp	r3, r6
 800cba6:	bfa8      	it	ge
 800cba8:	4633      	movge	r3, r6
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	bfc2      	ittt	gt
 800cbae:	1aed      	subgt	r5, r5, r3
 800cbb0:	1af6      	subgt	r6, r6, r3
 800cbb2:	1aff      	subgt	r7, r7, r3
 800cbb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	dd16      	ble.n	800cbe8 <_strtod_l+0x738>
 800cbba:	4641      	mov	r1, r8
 800cbbc:	9805      	ldr	r0, [sp, #20]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	f7ff f9a4 	bl	800bf0c <__pow5mult>
 800cbc4:	4680      	mov	r8, r0
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0ba      	beq.n	800cb40 <_strtod_l+0x690>
 800cbca:	4601      	mov	r1, r0
 800cbcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbce:	9805      	ldr	r0, [sp, #20]
 800cbd0:	f7ff f8fa 	bl	800bdc8 <__multiply>
 800cbd4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	f43f ae8d 	beq.w	800c8f6 <_strtod_l+0x446>
 800cbdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbde:	9805      	ldr	r0, [sp, #20]
 800cbe0:	f7fe ffde 	bl	800bba0 <_Bfree>
 800cbe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbe6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbe8:	2d00      	cmp	r5, #0
 800cbea:	dc1d      	bgt.n	800cc28 <_strtod_l+0x778>
 800cbec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	dd23      	ble.n	800cc3a <_strtod_l+0x78a>
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cbf6:	9805      	ldr	r0, [sp, #20]
 800cbf8:	f7ff f988 	bl	800bf0c <__pow5mult>
 800cbfc:	4681      	mov	r9, r0
 800cbfe:	b9e0      	cbnz	r0, 800cc3a <_strtod_l+0x78a>
 800cc00:	f04f 0900 	mov.w	r9, #0
 800cc04:	e677      	b.n	800c8f6 <_strtod_l+0x446>
 800cc06:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cc0a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cc0e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cc12:	35e2      	adds	r5, #226	@ 0xe2
 800cc14:	fa01 f305 	lsl.w	r3, r1, r5
 800cc18:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cc1c:	e7ba      	b.n	800cb94 <_strtod_l+0x6e4>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc22:	2301      	movs	r3, #1
 800cc24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc26:	e7b5      	b.n	800cb94 <_strtod_l+0x6e4>
 800cc28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc2a:	9805      	ldr	r0, [sp, #20]
 800cc2c:	462a      	mov	r2, r5
 800cc2e:	f7ff f9c7 	bl	800bfc0 <__lshift>
 800cc32:	901a      	str	r0, [sp, #104]	@ 0x68
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d1d9      	bne.n	800cbec <_strtod_l+0x73c>
 800cc38:	e65d      	b.n	800c8f6 <_strtod_l+0x446>
 800cc3a:	2e00      	cmp	r6, #0
 800cc3c:	dd07      	ble.n	800cc4e <_strtod_l+0x79e>
 800cc3e:	4649      	mov	r1, r9
 800cc40:	9805      	ldr	r0, [sp, #20]
 800cc42:	4632      	mov	r2, r6
 800cc44:	f7ff f9bc 	bl	800bfc0 <__lshift>
 800cc48:	4681      	mov	r9, r0
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d0d8      	beq.n	800cc00 <_strtod_l+0x750>
 800cc4e:	2f00      	cmp	r7, #0
 800cc50:	dd08      	ble.n	800cc64 <_strtod_l+0x7b4>
 800cc52:	4641      	mov	r1, r8
 800cc54:	9805      	ldr	r0, [sp, #20]
 800cc56:	463a      	mov	r2, r7
 800cc58:	f7ff f9b2 	bl	800bfc0 <__lshift>
 800cc5c:	4680      	mov	r8, r0
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	f43f ae49 	beq.w	800c8f6 <_strtod_l+0x446>
 800cc64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc66:	9805      	ldr	r0, [sp, #20]
 800cc68:	464a      	mov	r2, r9
 800cc6a:	f7ff fa31 	bl	800c0d0 <__mdiff>
 800cc6e:	4604      	mov	r4, r0
 800cc70:	2800      	cmp	r0, #0
 800cc72:	f43f ae40 	beq.w	800c8f6 <_strtod_l+0x446>
 800cc76:	68c3      	ldr	r3, [r0, #12]
 800cc78:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	60c3      	str	r3, [r0, #12]
 800cc7e:	4641      	mov	r1, r8
 800cc80:	f7ff fa0a 	bl	800c098 <__mcmp>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	da45      	bge.n	800cd14 <_strtod_l+0x864>
 800cc88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc8a:	ea53 030a 	orrs.w	r3, r3, sl
 800cc8e:	d16b      	bne.n	800cd68 <_strtod_l+0x8b8>
 800cc90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d167      	bne.n	800cd68 <_strtod_l+0x8b8>
 800cc98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc9c:	0d1b      	lsrs	r3, r3, #20
 800cc9e:	051b      	lsls	r3, r3, #20
 800cca0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cca4:	d960      	bls.n	800cd68 <_strtod_l+0x8b8>
 800cca6:	6963      	ldr	r3, [r4, #20]
 800cca8:	b913      	cbnz	r3, 800ccb0 <_strtod_l+0x800>
 800ccaa:	6923      	ldr	r3, [r4, #16]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	dd5b      	ble.n	800cd68 <_strtod_l+0x8b8>
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	9805      	ldr	r0, [sp, #20]
 800ccb6:	f7ff f983 	bl	800bfc0 <__lshift>
 800ccba:	4641      	mov	r1, r8
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	f7ff f9eb 	bl	800c098 <__mcmp>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	dd50      	ble.n	800cd68 <_strtod_l+0x8b8>
 800ccc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccca:	9a08      	ldr	r2, [sp, #32]
 800cccc:	0d1b      	lsrs	r3, r3, #20
 800ccce:	051b      	lsls	r3, r3, #20
 800ccd0:	2a00      	cmp	r2, #0
 800ccd2:	d06a      	beq.n	800cdaa <_strtod_l+0x8fa>
 800ccd4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ccd8:	d867      	bhi.n	800cdaa <_strtod_l+0x8fa>
 800ccda:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ccde:	f67f ae9d 	bls.w	800ca1c <_strtod_l+0x56c>
 800cce2:	4b0a      	ldr	r3, [pc, #40]	@ (800cd0c <_strtod_l+0x85c>)
 800cce4:	4650      	mov	r0, sl
 800cce6:	4659      	mov	r1, fp
 800cce8:	2200      	movs	r2, #0
 800ccea:	f7f3 fc85 	bl	80005f8 <__aeabi_dmul>
 800ccee:	4b08      	ldr	r3, [pc, #32]	@ (800cd10 <_strtod_l+0x860>)
 800ccf0:	400b      	ands	r3, r1
 800ccf2:	4682      	mov	sl, r0
 800ccf4:	468b      	mov	fp, r1
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f47f ae08 	bne.w	800c90c <_strtod_l+0x45c>
 800ccfc:	9a05      	ldr	r2, [sp, #20]
 800ccfe:	2322      	movs	r3, #34	@ 0x22
 800cd00:	6013      	str	r3, [r2, #0]
 800cd02:	e603      	b.n	800c90c <_strtod_l+0x45c>
 800cd04:	0800ef08 	.word	0x0800ef08
 800cd08:	fffffc02 	.word	0xfffffc02
 800cd0c:	39500000 	.word	0x39500000
 800cd10:	7ff00000 	.word	0x7ff00000
 800cd14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cd18:	d165      	bne.n	800cde6 <_strtod_l+0x936>
 800cd1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd20:	b35a      	cbz	r2, 800cd7a <_strtod_l+0x8ca>
 800cd22:	4a9f      	ldr	r2, [pc, #636]	@ (800cfa0 <_strtod_l+0xaf0>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d12b      	bne.n	800cd80 <_strtod_l+0x8d0>
 800cd28:	9b08      	ldr	r3, [sp, #32]
 800cd2a:	4651      	mov	r1, sl
 800cd2c:	b303      	cbz	r3, 800cd70 <_strtod_l+0x8c0>
 800cd2e:	4b9d      	ldr	r3, [pc, #628]	@ (800cfa4 <_strtod_l+0xaf4>)
 800cd30:	465a      	mov	r2, fp
 800cd32:	4013      	ands	r3, r2
 800cd34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cd38:	f04f 32ff 	mov.w	r2, #4294967295
 800cd3c:	d81b      	bhi.n	800cd76 <_strtod_l+0x8c6>
 800cd3e:	0d1b      	lsrs	r3, r3, #20
 800cd40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd44:	fa02 f303 	lsl.w	r3, r2, r3
 800cd48:	4299      	cmp	r1, r3
 800cd4a:	d119      	bne.n	800cd80 <_strtod_l+0x8d0>
 800cd4c:	4b96      	ldr	r3, [pc, #600]	@ (800cfa8 <_strtod_l+0xaf8>)
 800cd4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d102      	bne.n	800cd5a <_strtod_l+0x8aa>
 800cd54:	3101      	adds	r1, #1
 800cd56:	f43f adce 	beq.w	800c8f6 <_strtod_l+0x446>
 800cd5a:	4b92      	ldr	r3, [pc, #584]	@ (800cfa4 <_strtod_l+0xaf4>)
 800cd5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd5e:	401a      	ands	r2, r3
 800cd60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cd64:	f04f 0a00 	mov.w	sl, #0
 800cd68:	9b08      	ldr	r3, [sp, #32]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1b9      	bne.n	800cce2 <_strtod_l+0x832>
 800cd6e:	e5cd      	b.n	800c90c <_strtod_l+0x45c>
 800cd70:	f04f 33ff 	mov.w	r3, #4294967295
 800cd74:	e7e8      	b.n	800cd48 <_strtod_l+0x898>
 800cd76:	4613      	mov	r3, r2
 800cd78:	e7e6      	b.n	800cd48 <_strtod_l+0x898>
 800cd7a:	ea53 030a 	orrs.w	r3, r3, sl
 800cd7e:	d0a2      	beq.n	800ccc6 <_strtod_l+0x816>
 800cd80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd82:	b1db      	cbz	r3, 800cdbc <_strtod_l+0x90c>
 800cd84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd86:	4213      	tst	r3, r2
 800cd88:	d0ee      	beq.n	800cd68 <_strtod_l+0x8b8>
 800cd8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd8c:	9a08      	ldr	r2, [sp, #32]
 800cd8e:	4650      	mov	r0, sl
 800cd90:	4659      	mov	r1, fp
 800cd92:	b1bb      	cbz	r3, 800cdc4 <_strtod_l+0x914>
 800cd94:	f7ff fb6e 	bl	800c474 <sulp>
 800cd98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd9c:	ec53 2b10 	vmov	r2, r3, d0
 800cda0:	f7f3 fa74 	bl	800028c <__adddf3>
 800cda4:	4682      	mov	sl, r0
 800cda6:	468b      	mov	fp, r1
 800cda8:	e7de      	b.n	800cd68 <_strtod_l+0x8b8>
 800cdaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cdae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cdb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cdb6:	f04f 3aff 	mov.w	sl, #4294967295
 800cdba:	e7d5      	b.n	800cd68 <_strtod_l+0x8b8>
 800cdbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cdbe:	ea13 0f0a 	tst.w	r3, sl
 800cdc2:	e7e1      	b.n	800cd88 <_strtod_l+0x8d8>
 800cdc4:	f7ff fb56 	bl	800c474 <sulp>
 800cdc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdcc:	ec53 2b10 	vmov	r2, r3, d0
 800cdd0:	f7f3 fa5a 	bl	8000288 <__aeabi_dsub>
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	4682      	mov	sl, r0
 800cdda:	468b      	mov	fp, r1
 800cddc:	f7f3 fe74 	bl	8000ac8 <__aeabi_dcmpeq>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d0c1      	beq.n	800cd68 <_strtod_l+0x8b8>
 800cde4:	e61a      	b.n	800ca1c <_strtod_l+0x56c>
 800cde6:	4641      	mov	r1, r8
 800cde8:	4620      	mov	r0, r4
 800cdea:	f7ff facd 	bl	800c388 <__ratio>
 800cdee:	ec57 6b10 	vmov	r6, r7, d0
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	4639      	mov	r1, r7
 800cdfc:	f7f3 fe78 	bl	8000af0 <__aeabi_dcmple>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d06f      	beq.n	800cee4 <_strtod_l+0xa34>
 800ce04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d17a      	bne.n	800cf00 <_strtod_l+0xa50>
 800ce0a:	f1ba 0f00 	cmp.w	sl, #0
 800ce0e:	d158      	bne.n	800cec2 <_strtod_l+0xa12>
 800ce10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d15a      	bne.n	800ced0 <_strtod_l+0xa20>
 800ce1a:	4b64      	ldr	r3, [pc, #400]	@ (800cfac <_strtod_l+0xafc>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4630      	mov	r0, r6
 800ce20:	4639      	mov	r1, r7
 800ce22:	f7f3 fe5b 	bl	8000adc <__aeabi_dcmplt>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d159      	bne.n	800cede <_strtod_l+0xa2e>
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	4639      	mov	r1, r7
 800ce2e:	4b60      	ldr	r3, [pc, #384]	@ (800cfb0 <_strtod_l+0xb00>)
 800ce30:	2200      	movs	r2, #0
 800ce32:	f7f3 fbe1 	bl	80005f8 <__aeabi_dmul>
 800ce36:	4606      	mov	r6, r0
 800ce38:	460f      	mov	r7, r1
 800ce3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ce3e:	9606      	str	r6, [sp, #24]
 800ce40:	9307      	str	r3, [sp, #28]
 800ce42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce46:	4d57      	ldr	r5, [pc, #348]	@ (800cfa4 <_strtod_l+0xaf4>)
 800ce48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ce4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce4e:	401d      	ands	r5, r3
 800ce50:	4b58      	ldr	r3, [pc, #352]	@ (800cfb4 <_strtod_l+0xb04>)
 800ce52:	429d      	cmp	r5, r3
 800ce54:	f040 80b2 	bne.w	800cfbc <_strtod_l+0xb0c>
 800ce58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ce5e:	ec4b ab10 	vmov	d0, sl, fp
 800ce62:	f7ff f9c9 	bl	800c1f8 <__ulp>
 800ce66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce6a:	ec51 0b10 	vmov	r0, r1, d0
 800ce6e:	f7f3 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ce72:	4652      	mov	r2, sl
 800ce74:	465b      	mov	r3, fp
 800ce76:	f7f3 fa09 	bl	800028c <__adddf3>
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4949      	ldr	r1, [pc, #292]	@ (800cfa4 <_strtod_l+0xaf4>)
 800ce7e:	4a4e      	ldr	r2, [pc, #312]	@ (800cfb8 <_strtod_l+0xb08>)
 800ce80:	4019      	ands	r1, r3
 800ce82:	4291      	cmp	r1, r2
 800ce84:	4682      	mov	sl, r0
 800ce86:	d942      	bls.n	800cf0e <_strtod_l+0xa5e>
 800ce88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce8a:	4b47      	ldr	r3, [pc, #284]	@ (800cfa8 <_strtod_l+0xaf8>)
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d103      	bne.n	800ce98 <_strtod_l+0x9e8>
 800ce90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce92:	3301      	adds	r3, #1
 800ce94:	f43f ad2f 	beq.w	800c8f6 <_strtod_l+0x446>
 800ce98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cfa8 <_strtod_l+0xaf8>
 800ce9c:	f04f 3aff 	mov.w	sl, #4294967295
 800cea0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cea2:	9805      	ldr	r0, [sp, #20]
 800cea4:	f7fe fe7c 	bl	800bba0 <_Bfree>
 800cea8:	9805      	ldr	r0, [sp, #20]
 800ceaa:	4649      	mov	r1, r9
 800ceac:	f7fe fe78 	bl	800bba0 <_Bfree>
 800ceb0:	9805      	ldr	r0, [sp, #20]
 800ceb2:	4641      	mov	r1, r8
 800ceb4:	f7fe fe74 	bl	800bba0 <_Bfree>
 800ceb8:	9805      	ldr	r0, [sp, #20]
 800ceba:	4621      	mov	r1, r4
 800cebc:	f7fe fe70 	bl	800bba0 <_Bfree>
 800cec0:	e619      	b.n	800caf6 <_strtod_l+0x646>
 800cec2:	f1ba 0f01 	cmp.w	sl, #1
 800cec6:	d103      	bne.n	800ced0 <_strtod_l+0xa20>
 800cec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f43f ada6 	beq.w	800ca1c <_strtod_l+0x56c>
 800ced0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cf80 <_strtod_l+0xad0>
 800ced4:	4f35      	ldr	r7, [pc, #212]	@ (800cfac <_strtod_l+0xafc>)
 800ced6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ceda:	2600      	movs	r6, #0
 800cedc:	e7b1      	b.n	800ce42 <_strtod_l+0x992>
 800cede:	4f34      	ldr	r7, [pc, #208]	@ (800cfb0 <_strtod_l+0xb00>)
 800cee0:	2600      	movs	r6, #0
 800cee2:	e7aa      	b.n	800ce3a <_strtod_l+0x98a>
 800cee4:	4b32      	ldr	r3, [pc, #200]	@ (800cfb0 <_strtod_l+0xb00>)
 800cee6:	4630      	mov	r0, r6
 800cee8:	4639      	mov	r1, r7
 800ceea:	2200      	movs	r2, #0
 800ceec:	f7f3 fb84 	bl	80005f8 <__aeabi_dmul>
 800cef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cef2:	4606      	mov	r6, r0
 800cef4:	460f      	mov	r7, r1
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d09f      	beq.n	800ce3a <_strtod_l+0x98a>
 800cefa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cefe:	e7a0      	b.n	800ce42 <_strtod_l+0x992>
 800cf00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cf88 <_strtod_l+0xad8>
 800cf04:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf08:	ec57 6b17 	vmov	r6, r7, d7
 800cf0c:	e799      	b.n	800ce42 <_strtod_l+0x992>
 800cf0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cf12:	9b08      	ldr	r3, [sp, #32]
 800cf14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1c1      	bne.n	800cea0 <_strtod_l+0x9f0>
 800cf1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf20:	0d1b      	lsrs	r3, r3, #20
 800cf22:	051b      	lsls	r3, r3, #20
 800cf24:	429d      	cmp	r5, r3
 800cf26:	d1bb      	bne.n	800cea0 <_strtod_l+0x9f0>
 800cf28:	4630      	mov	r0, r6
 800cf2a:	4639      	mov	r1, r7
 800cf2c:	f7f3 fec4 	bl	8000cb8 <__aeabi_d2lz>
 800cf30:	f7f3 fb34 	bl	800059c <__aeabi_l2d>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4630      	mov	r0, r6
 800cf3a:	4639      	mov	r1, r7
 800cf3c:	f7f3 f9a4 	bl	8000288 <__aeabi_dsub>
 800cf40:	460b      	mov	r3, r1
 800cf42:	4602      	mov	r2, r0
 800cf44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cf48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cf4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf4e:	ea46 060a 	orr.w	r6, r6, sl
 800cf52:	431e      	orrs	r6, r3
 800cf54:	d06f      	beq.n	800d036 <_strtod_l+0xb86>
 800cf56:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf90 <_strtod_l+0xae0>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	f7f3 fdbe 	bl	8000adc <__aeabi_dcmplt>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	f47f acd3 	bne.w	800c90c <_strtod_l+0x45c>
 800cf66:	a30c      	add	r3, pc, #48	@ (adr r3, 800cf98 <_strtod_l+0xae8>)
 800cf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf70:	f7f3 fdd2 	bl	8000b18 <__aeabi_dcmpgt>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d093      	beq.n	800cea0 <_strtod_l+0x9f0>
 800cf78:	e4c8      	b.n	800c90c <_strtod_l+0x45c>
 800cf7a:	bf00      	nop
 800cf7c:	f3af 8000 	nop.w
 800cf80:	00000000 	.word	0x00000000
 800cf84:	bff00000 	.word	0xbff00000
 800cf88:	00000000 	.word	0x00000000
 800cf8c:	3ff00000 	.word	0x3ff00000
 800cf90:	94a03595 	.word	0x94a03595
 800cf94:	3fdfffff 	.word	0x3fdfffff
 800cf98:	35afe535 	.word	0x35afe535
 800cf9c:	3fe00000 	.word	0x3fe00000
 800cfa0:	000fffff 	.word	0x000fffff
 800cfa4:	7ff00000 	.word	0x7ff00000
 800cfa8:	7fefffff 	.word	0x7fefffff
 800cfac:	3ff00000 	.word	0x3ff00000
 800cfb0:	3fe00000 	.word	0x3fe00000
 800cfb4:	7fe00000 	.word	0x7fe00000
 800cfb8:	7c9fffff 	.word	0x7c9fffff
 800cfbc:	9b08      	ldr	r3, [sp, #32]
 800cfbe:	b323      	cbz	r3, 800d00a <_strtod_l+0xb5a>
 800cfc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cfc4:	d821      	bhi.n	800d00a <_strtod_l+0xb5a>
 800cfc6:	a328      	add	r3, pc, #160	@ (adr r3, 800d068 <_strtod_l+0xbb8>)
 800cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfcc:	4630      	mov	r0, r6
 800cfce:	4639      	mov	r1, r7
 800cfd0:	f7f3 fd8e 	bl	8000af0 <__aeabi_dcmple>
 800cfd4:	b1a0      	cbz	r0, 800d000 <_strtod_l+0xb50>
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f7f3 fde5 	bl	8000ba8 <__aeabi_d2uiz>
 800cfde:	2801      	cmp	r0, #1
 800cfe0:	bf38      	it	cc
 800cfe2:	2001      	movcc	r0, #1
 800cfe4:	f7f3 fa8e 	bl	8000504 <__aeabi_ui2d>
 800cfe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfea:	4606      	mov	r6, r0
 800cfec:	460f      	mov	r7, r1
 800cfee:	b9fb      	cbnz	r3, 800d030 <_strtod_l+0xb80>
 800cff0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cff4:	9014      	str	r0, [sp, #80]	@ 0x50
 800cff6:	9315      	str	r3, [sp, #84]	@ 0x54
 800cff8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cffc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d000:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d002:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d006:	1b5b      	subs	r3, r3, r5
 800d008:	9311      	str	r3, [sp, #68]	@ 0x44
 800d00a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d00e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d012:	f7ff f8f1 	bl	800c1f8 <__ulp>
 800d016:	4650      	mov	r0, sl
 800d018:	ec53 2b10 	vmov	r2, r3, d0
 800d01c:	4659      	mov	r1, fp
 800d01e:	f7f3 faeb 	bl	80005f8 <__aeabi_dmul>
 800d022:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d026:	f7f3 f931 	bl	800028c <__adddf3>
 800d02a:	4682      	mov	sl, r0
 800d02c:	468b      	mov	fp, r1
 800d02e:	e770      	b.n	800cf12 <_strtod_l+0xa62>
 800d030:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d034:	e7e0      	b.n	800cff8 <_strtod_l+0xb48>
 800d036:	a30e      	add	r3, pc, #56	@ (adr r3, 800d070 <_strtod_l+0xbc0>)
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	f7f3 fd4e 	bl	8000adc <__aeabi_dcmplt>
 800d040:	e798      	b.n	800cf74 <_strtod_l+0xac4>
 800d042:	2300      	movs	r3, #0
 800d044:	930e      	str	r3, [sp, #56]	@ 0x38
 800d046:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d04a:	6013      	str	r3, [r2, #0]
 800d04c:	f7ff ba6d 	b.w	800c52a <_strtod_l+0x7a>
 800d050:	2a65      	cmp	r2, #101	@ 0x65
 800d052:	f43f ab68 	beq.w	800c726 <_strtod_l+0x276>
 800d056:	2a45      	cmp	r2, #69	@ 0x45
 800d058:	f43f ab65 	beq.w	800c726 <_strtod_l+0x276>
 800d05c:	2301      	movs	r3, #1
 800d05e:	f7ff bba0 	b.w	800c7a2 <_strtod_l+0x2f2>
 800d062:	bf00      	nop
 800d064:	f3af 8000 	nop.w
 800d068:	ffc00000 	.word	0xffc00000
 800d06c:	41dfffff 	.word	0x41dfffff
 800d070:	94a03595 	.word	0x94a03595
 800d074:	3fcfffff 	.word	0x3fcfffff

0800d078 <_strtod_r>:
 800d078:	4b01      	ldr	r3, [pc, #4]	@ (800d080 <_strtod_r+0x8>)
 800d07a:	f7ff ba19 	b.w	800c4b0 <_strtod_l>
 800d07e:	bf00      	nop
 800d080:	20000158 	.word	0x20000158

0800d084 <__ssputs_r>:
 800d084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d088:	688e      	ldr	r6, [r1, #8]
 800d08a:	461f      	mov	r7, r3
 800d08c:	42be      	cmp	r6, r7
 800d08e:	680b      	ldr	r3, [r1, #0]
 800d090:	4682      	mov	sl, r0
 800d092:	460c      	mov	r4, r1
 800d094:	4690      	mov	r8, r2
 800d096:	d82d      	bhi.n	800d0f4 <__ssputs_r+0x70>
 800d098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d09c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d0a0:	d026      	beq.n	800d0f0 <__ssputs_r+0x6c>
 800d0a2:	6965      	ldr	r5, [r4, #20]
 800d0a4:	6909      	ldr	r1, [r1, #16]
 800d0a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0aa:	eba3 0901 	sub.w	r9, r3, r1
 800d0ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0b2:	1c7b      	adds	r3, r7, #1
 800d0b4:	444b      	add	r3, r9
 800d0b6:	106d      	asrs	r5, r5, #1
 800d0b8:	429d      	cmp	r5, r3
 800d0ba:	bf38      	it	cc
 800d0bc:	461d      	movcc	r5, r3
 800d0be:	0553      	lsls	r3, r2, #21
 800d0c0:	d527      	bpl.n	800d112 <__ssputs_r+0x8e>
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	f7fe fca0 	bl	800ba08 <_malloc_r>
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	b360      	cbz	r0, 800d126 <__ssputs_r+0xa2>
 800d0cc:	6921      	ldr	r1, [r4, #16]
 800d0ce:	464a      	mov	r2, r9
 800d0d0:	f7fd fdb7 	bl	800ac42 <memcpy>
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0de:	81a3      	strh	r3, [r4, #12]
 800d0e0:	6126      	str	r6, [r4, #16]
 800d0e2:	6165      	str	r5, [r4, #20]
 800d0e4:	444e      	add	r6, r9
 800d0e6:	eba5 0509 	sub.w	r5, r5, r9
 800d0ea:	6026      	str	r6, [r4, #0]
 800d0ec:	60a5      	str	r5, [r4, #8]
 800d0ee:	463e      	mov	r6, r7
 800d0f0:	42be      	cmp	r6, r7
 800d0f2:	d900      	bls.n	800d0f6 <__ssputs_r+0x72>
 800d0f4:	463e      	mov	r6, r7
 800d0f6:	6820      	ldr	r0, [r4, #0]
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	4641      	mov	r1, r8
 800d0fc:	f000 fefb 	bl	800def6 <memmove>
 800d100:	68a3      	ldr	r3, [r4, #8]
 800d102:	1b9b      	subs	r3, r3, r6
 800d104:	60a3      	str	r3, [r4, #8]
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	4433      	add	r3, r6
 800d10a:	6023      	str	r3, [r4, #0]
 800d10c:	2000      	movs	r0, #0
 800d10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d112:	462a      	mov	r2, r5
 800d114:	f001 fac1 	bl	800e69a <_realloc_r>
 800d118:	4606      	mov	r6, r0
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d1e0      	bne.n	800d0e0 <__ssputs_r+0x5c>
 800d11e:	6921      	ldr	r1, [r4, #16]
 800d120:	4650      	mov	r0, sl
 800d122:	f7fe fbfd 	bl	800b920 <_free_r>
 800d126:	230c      	movs	r3, #12
 800d128:	f8ca 3000 	str.w	r3, [sl]
 800d12c:	89a3      	ldrh	r3, [r4, #12]
 800d12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d132:	81a3      	strh	r3, [r4, #12]
 800d134:	f04f 30ff 	mov.w	r0, #4294967295
 800d138:	e7e9      	b.n	800d10e <__ssputs_r+0x8a>
	...

0800d13c <_svfiprintf_r>:
 800d13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d140:	4698      	mov	r8, r3
 800d142:	898b      	ldrh	r3, [r1, #12]
 800d144:	061b      	lsls	r3, r3, #24
 800d146:	b09d      	sub	sp, #116	@ 0x74
 800d148:	4607      	mov	r7, r0
 800d14a:	460d      	mov	r5, r1
 800d14c:	4614      	mov	r4, r2
 800d14e:	d510      	bpl.n	800d172 <_svfiprintf_r+0x36>
 800d150:	690b      	ldr	r3, [r1, #16]
 800d152:	b973      	cbnz	r3, 800d172 <_svfiprintf_r+0x36>
 800d154:	2140      	movs	r1, #64	@ 0x40
 800d156:	f7fe fc57 	bl	800ba08 <_malloc_r>
 800d15a:	6028      	str	r0, [r5, #0]
 800d15c:	6128      	str	r0, [r5, #16]
 800d15e:	b930      	cbnz	r0, 800d16e <_svfiprintf_r+0x32>
 800d160:	230c      	movs	r3, #12
 800d162:	603b      	str	r3, [r7, #0]
 800d164:	f04f 30ff 	mov.w	r0, #4294967295
 800d168:	b01d      	add	sp, #116	@ 0x74
 800d16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16e:	2340      	movs	r3, #64	@ 0x40
 800d170:	616b      	str	r3, [r5, #20]
 800d172:	2300      	movs	r3, #0
 800d174:	9309      	str	r3, [sp, #36]	@ 0x24
 800d176:	2320      	movs	r3, #32
 800d178:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d17c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d180:	2330      	movs	r3, #48	@ 0x30
 800d182:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d320 <_svfiprintf_r+0x1e4>
 800d186:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d18a:	f04f 0901 	mov.w	r9, #1
 800d18e:	4623      	mov	r3, r4
 800d190:	469a      	mov	sl, r3
 800d192:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d196:	b10a      	cbz	r2, 800d19c <_svfiprintf_r+0x60>
 800d198:	2a25      	cmp	r2, #37	@ 0x25
 800d19a:	d1f9      	bne.n	800d190 <_svfiprintf_r+0x54>
 800d19c:	ebba 0b04 	subs.w	fp, sl, r4
 800d1a0:	d00b      	beq.n	800d1ba <_svfiprintf_r+0x7e>
 800d1a2:	465b      	mov	r3, fp
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	f7ff ff6b 	bl	800d084 <__ssputs_r>
 800d1ae:	3001      	adds	r0, #1
 800d1b0:	f000 80a7 	beq.w	800d302 <_svfiprintf_r+0x1c6>
 800d1b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1b6:	445a      	add	r2, fp
 800d1b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f000 809f 	beq.w	800d302 <_svfiprintf_r+0x1c6>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1ce:	f10a 0a01 	add.w	sl, sl, #1
 800d1d2:	9304      	str	r3, [sp, #16]
 800d1d4:	9307      	str	r3, [sp, #28]
 800d1d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1da:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1dc:	4654      	mov	r4, sl
 800d1de:	2205      	movs	r2, #5
 800d1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e4:	484e      	ldr	r0, [pc, #312]	@ (800d320 <_svfiprintf_r+0x1e4>)
 800d1e6:	f7f2 fff3 	bl	80001d0 <memchr>
 800d1ea:	9a04      	ldr	r2, [sp, #16]
 800d1ec:	b9d8      	cbnz	r0, 800d226 <_svfiprintf_r+0xea>
 800d1ee:	06d0      	lsls	r0, r2, #27
 800d1f0:	bf44      	itt	mi
 800d1f2:	2320      	movmi	r3, #32
 800d1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1f8:	0711      	lsls	r1, r2, #28
 800d1fa:	bf44      	itt	mi
 800d1fc:	232b      	movmi	r3, #43	@ 0x2b
 800d1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d202:	f89a 3000 	ldrb.w	r3, [sl]
 800d206:	2b2a      	cmp	r3, #42	@ 0x2a
 800d208:	d015      	beq.n	800d236 <_svfiprintf_r+0xfa>
 800d20a:	9a07      	ldr	r2, [sp, #28]
 800d20c:	4654      	mov	r4, sl
 800d20e:	2000      	movs	r0, #0
 800d210:	f04f 0c0a 	mov.w	ip, #10
 800d214:	4621      	mov	r1, r4
 800d216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d21a:	3b30      	subs	r3, #48	@ 0x30
 800d21c:	2b09      	cmp	r3, #9
 800d21e:	d94b      	bls.n	800d2b8 <_svfiprintf_r+0x17c>
 800d220:	b1b0      	cbz	r0, 800d250 <_svfiprintf_r+0x114>
 800d222:	9207      	str	r2, [sp, #28]
 800d224:	e014      	b.n	800d250 <_svfiprintf_r+0x114>
 800d226:	eba0 0308 	sub.w	r3, r0, r8
 800d22a:	fa09 f303 	lsl.w	r3, r9, r3
 800d22e:	4313      	orrs	r3, r2
 800d230:	9304      	str	r3, [sp, #16]
 800d232:	46a2      	mov	sl, r4
 800d234:	e7d2      	b.n	800d1dc <_svfiprintf_r+0xa0>
 800d236:	9b03      	ldr	r3, [sp, #12]
 800d238:	1d19      	adds	r1, r3, #4
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	9103      	str	r1, [sp, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	bfbb      	ittet	lt
 800d242:	425b      	neglt	r3, r3
 800d244:	f042 0202 	orrlt.w	r2, r2, #2
 800d248:	9307      	strge	r3, [sp, #28]
 800d24a:	9307      	strlt	r3, [sp, #28]
 800d24c:	bfb8      	it	lt
 800d24e:	9204      	strlt	r2, [sp, #16]
 800d250:	7823      	ldrb	r3, [r4, #0]
 800d252:	2b2e      	cmp	r3, #46	@ 0x2e
 800d254:	d10a      	bne.n	800d26c <_svfiprintf_r+0x130>
 800d256:	7863      	ldrb	r3, [r4, #1]
 800d258:	2b2a      	cmp	r3, #42	@ 0x2a
 800d25a:	d132      	bne.n	800d2c2 <_svfiprintf_r+0x186>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	1d1a      	adds	r2, r3, #4
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	9203      	str	r2, [sp, #12]
 800d264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d268:	3402      	adds	r4, #2
 800d26a:	9305      	str	r3, [sp, #20]
 800d26c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d330 <_svfiprintf_r+0x1f4>
 800d270:	7821      	ldrb	r1, [r4, #0]
 800d272:	2203      	movs	r2, #3
 800d274:	4650      	mov	r0, sl
 800d276:	f7f2 ffab 	bl	80001d0 <memchr>
 800d27a:	b138      	cbz	r0, 800d28c <_svfiprintf_r+0x150>
 800d27c:	9b04      	ldr	r3, [sp, #16]
 800d27e:	eba0 000a 	sub.w	r0, r0, sl
 800d282:	2240      	movs	r2, #64	@ 0x40
 800d284:	4082      	lsls	r2, r0
 800d286:	4313      	orrs	r3, r2
 800d288:	3401      	adds	r4, #1
 800d28a:	9304      	str	r3, [sp, #16]
 800d28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d290:	4824      	ldr	r0, [pc, #144]	@ (800d324 <_svfiprintf_r+0x1e8>)
 800d292:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d296:	2206      	movs	r2, #6
 800d298:	f7f2 ff9a 	bl	80001d0 <memchr>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	d036      	beq.n	800d30e <_svfiprintf_r+0x1d2>
 800d2a0:	4b21      	ldr	r3, [pc, #132]	@ (800d328 <_svfiprintf_r+0x1ec>)
 800d2a2:	bb1b      	cbnz	r3, 800d2ec <_svfiprintf_r+0x1b0>
 800d2a4:	9b03      	ldr	r3, [sp, #12]
 800d2a6:	3307      	adds	r3, #7
 800d2a8:	f023 0307 	bic.w	r3, r3, #7
 800d2ac:	3308      	adds	r3, #8
 800d2ae:	9303      	str	r3, [sp, #12]
 800d2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2b2:	4433      	add	r3, r6
 800d2b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2b6:	e76a      	b.n	800d18e <_svfiprintf_r+0x52>
 800d2b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2bc:	460c      	mov	r4, r1
 800d2be:	2001      	movs	r0, #1
 800d2c0:	e7a8      	b.n	800d214 <_svfiprintf_r+0xd8>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	3401      	adds	r4, #1
 800d2c6:	9305      	str	r3, [sp, #20]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	f04f 0c0a 	mov.w	ip, #10
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2d4:	3a30      	subs	r2, #48	@ 0x30
 800d2d6:	2a09      	cmp	r2, #9
 800d2d8:	d903      	bls.n	800d2e2 <_svfiprintf_r+0x1a6>
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d0c6      	beq.n	800d26c <_svfiprintf_r+0x130>
 800d2de:	9105      	str	r1, [sp, #20]
 800d2e0:	e7c4      	b.n	800d26c <_svfiprintf_r+0x130>
 800d2e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e7f0      	b.n	800d2ce <_svfiprintf_r+0x192>
 800d2ec:	ab03      	add	r3, sp, #12
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	462a      	mov	r2, r5
 800d2f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d32c <_svfiprintf_r+0x1f0>)
 800d2f4:	a904      	add	r1, sp, #16
 800d2f6:	4638      	mov	r0, r7
 800d2f8:	f7fc fb88 	bl	8009a0c <_printf_float>
 800d2fc:	1c42      	adds	r2, r0, #1
 800d2fe:	4606      	mov	r6, r0
 800d300:	d1d6      	bne.n	800d2b0 <_svfiprintf_r+0x174>
 800d302:	89ab      	ldrh	r3, [r5, #12]
 800d304:	065b      	lsls	r3, r3, #25
 800d306:	f53f af2d 	bmi.w	800d164 <_svfiprintf_r+0x28>
 800d30a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d30c:	e72c      	b.n	800d168 <_svfiprintf_r+0x2c>
 800d30e:	ab03      	add	r3, sp, #12
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	462a      	mov	r2, r5
 800d314:	4b05      	ldr	r3, [pc, #20]	@ (800d32c <_svfiprintf_r+0x1f0>)
 800d316:	a904      	add	r1, sp, #16
 800d318:	4638      	mov	r0, r7
 800d31a:	f7fc fe0f 	bl	8009f3c <_printf_i>
 800d31e:	e7ed      	b.n	800d2fc <_svfiprintf_r+0x1c0>
 800d320:	0800ed14 	.word	0x0800ed14
 800d324:	0800ed1e 	.word	0x0800ed1e
 800d328:	08009a0d 	.word	0x08009a0d
 800d32c:	0800d085 	.word	0x0800d085
 800d330:	0800ed1a 	.word	0x0800ed1a

0800d334 <_sungetc_r>:
 800d334:	b538      	push	{r3, r4, r5, lr}
 800d336:	1c4b      	adds	r3, r1, #1
 800d338:	4614      	mov	r4, r2
 800d33a:	d103      	bne.n	800d344 <_sungetc_r+0x10>
 800d33c:	f04f 35ff 	mov.w	r5, #4294967295
 800d340:	4628      	mov	r0, r5
 800d342:	bd38      	pop	{r3, r4, r5, pc}
 800d344:	8993      	ldrh	r3, [r2, #12]
 800d346:	f023 0320 	bic.w	r3, r3, #32
 800d34a:	8193      	strh	r3, [r2, #12]
 800d34c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d34e:	6852      	ldr	r2, [r2, #4]
 800d350:	b2cd      	uxtb	r5, r1
 800d352:	b18b      	cbz	r3, 800d378 <_sungetc_r+0x44>
 800d354:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d356:	4293      	cmp	r3, r2
 800d358:	dd08      	ble.n	800d36c <_sungetc_r+0x38>
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	1e5a      	subs	r2, r3, #1
 800d35e:	6022      	str	r2, [r4, #0]
 800d360:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d364:	6863      	ldr	r3, [r4, #4]
 800d366:	3301      	adds	r3, #1
 800d368:	6063      	str	r3, [r4, #4]
 800d36a:	e7e9      	b.n	800d340 <_sungetc_r+0xc>
 800d36c:	4621      	mov	r1, r4
 800d36e:	f000 fd88 	bl	800de82 <__submore>
 800d372:	2800      	cmp	r0, #0
 800d374:	d0f1      	beq.n	800d35a <_sungetc_r+0x26>
 800d376:	e7e1      	b.n	800d33c <_sungetc_r+0x8>
 800d378:	6921      	ldr	r1, [r4, #16]
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	b151      	cbz	r1, 800d394 <_sungetc_r+0x60>
 800d37e:	4299      	cmp	r1, r3
 800d380:	d208      	bcs.n	800d394 <_sungetc_r+0x60>
 800d382:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d386:	42a9      	cmp	r1, r5
 800d388:	d104      	bne.n	800d394 <_sungetc_r+0x60>
 800d38a:	3b01      	subs	r3, #1
 800d38c:	3201      	adds	r2, #1
 800d38e:	6023      	str	r3, [r4, #0]
 800d390:	6062      	str	r2, [r4, #4]
 800d392:	e7d5      	b.n	800d340 <_sungetc_r+0xc>
 800d394:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800d398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d39c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d39e:	2303      	movs	r3, #3
 800d3a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d3a2:	4623      	mov	r3, r4
 800d3a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e7dc      	b.n	800d368 <_sungetc_r+0x34>

0800d3ae <__ssrefill_r>:
 800d3ae:	b510      	push	{r4, lr}
 800d3b0:	460c      	mov	r4, r1
 800d3b2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d3b4:	b169      	cbz	r1, 800d3d2 <__ssrefill_r+0x24>
 800d3b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3ba:	4299      	cmp	r1, r3
 800d3bc:	d001      	beq.n	800d3c2 <__ssrefill_r+0x14>
 800d3be:	f7fe faaf 	bl	800b920 <_free_r>
 800d3c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d3c4:	6063      	str	r3, [r4, #4]
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	6360      	str	r0, [r4, #52]	@ 0x34
 800d3ca:	b113      	cbz	r3, 800d3d2 <__ssrefill_r+0x24>
 800d3cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d3ce:	6023      	str	r3, [r4, #0]
 800d3d0:	bd10      	pop	{r4, pc}
 800d3d2:	6923      	ldr	r3, [r4, #16]
 800d3d4:	6023      	str	r3, [r4, #0]
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	6063      	str	r3, [r4, #4]
 800d3da:	89a3      	ldrh	r3, [r4, #12]
 800d3dc:	f043 0320 	orr.w	r3, r3, #32
 800d3e0:	81a3      	strh	r3, [r4, #12]
 800d3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e6:	e7f3      	b.n	800d3d0 <__ssrefill_r+0x22>

0800d3e8 <__ssvfiscanf_r>:
 800d3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d3f8:	49a6      	ldr	r1, [pc, #664]	@ (800d694 <__ssvfiscanf_r+0x2ac>)
 800d3fa:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d3fc:	f10d 0804 	add.w	r8, sp, #4
 800d400:	49a5      	ldr	r1, [pc, #660]	@ (800d698 <__ssvfiscanf_r+0x2b0>)
 800d402:	4fa6      	ldr	r7, [pc, #664]	@ (800d69c <__ssvfiscanf_r+0x2b4>)
 800d404:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d408:	4606      	mov	r6, r0
 800d40a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	f892 9000 	ldrb.w	r9, [r2]
 800d412:	f1b9 0f00 	cmp.w	r9, #0
 800d416:	f000 8158 	beq.w	800d6ca <__ssvfiscanf_r+0x2e2>
 800d41a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800d41e:	f013 0308 	ands.w	r3, r3, #8
 800d422:	f102 0501 	add.w	r5, r2, #1
 800d426:	d019      	beq.n	800d45c <__ssvfiscanf_r+0x74>
 800d428:	6863      	ldr	r3, [r4, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	dd0f      	ble.n	800d44e <__ssvfiscanf_r+0x66>
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	781a      	ldrb	r2, [r3, #0]
 800d432:	5cba      	ldrb	r2, [r7, r2]
 800d434:	0712      	lsls	r2, r2, #28
 800d436:	d401      	bmi.n	800d43c <__ssvfiscanf_r+0x54>
 800d438:	462a      	mov	r2, r5
 800d43a:	e7e8      	b.n	800d40e <__ssvfiscanf_r+0x26>
 800d43c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d43e:	3201      	adds	r2, #1
 800d440:	9245      	str	r2, [sp, #276]	@ 0x114
 800d442:	6862      	ldr	r2, [r4, #4]
 800d444:	3301      	adds	r3, #1
 800d446:	3a01      	subs	r2, #1
 800d448:	6062      	str	r2, [r4, #4]
 800d44a:	6023      	str	r3, [r4, #0]
 800d44c:	e7ec      	b.n	800d428 <__ssvfiscanf_r+0x40>
 800d44e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d450:	4621      	mov	r1, r4
 800d452:	4630      	mov	r0, r6
 800d454:	4798      	blx	r3
 800d456:	2800      	cmp	r0, #0
 800d458:	d0e9      	beq.n	800d42e <__ssvfiscanf_r+0x46>
 800d45a:	e7ed      	b.n	800d438 <__ssvfiscanf_r+0x50>
 800d45c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800d460:	f040 8085 	bne.w	800d56e <__ssvfiscanf_r+0x186>
 800d464:	9341      	str	r3, [sp, #260]	@ 0x104
 800d466:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d468:	7853      	ldrb	r3, [r2, #1]
 800d46a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d46c:	bf02      	ittt	eq
 800d46e:	2310      	moveq	r3, #16
 800d470:	1c95      	addeq	r5, r2, #2
 800d472:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d474:	220a      	movs	r2, #10
 800d476:	46aa      	mov	sl, r5
 800d478:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d47c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d480:	2b09      	cmp	r3, #9
 800d482:	d91e      	bls.n	800d4c2 <__ssvfiscanf_r+0xda>
 800d484:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800d6a0 <__ssvfiscanf_r+0x2b8>
 800d488:	2203      	movs	r2, #3
 800d48a:	4658      	mov	r0, fp
 800d48c:	f7f2 fea0 	bl	80001d0 <memchr>
 800d490:	b138      	cbz	r0, 800d4a2 <__ssvfiscanf_r+0xba>
 800d492:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d494:	eba0 000b 	sub.w	r0, r0, fp
 800d498:	2301      	movs	r3, #1
 800d49a:	4083      	lsls	r3, r0
 800d49c:	4313      	orrs	r3, r2
 800d49e:	9341      	str	r3, [sp, #260]	@ 0x104
 800d4a0:	4655      	mov	r5, sl
 800d4a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d4a6:	2b78      	cmp	r3, #120	@ 0x78
 800d4a8:	d806      	bhi.n	800d4b8 <__ssvfiscanf_r+0xd0>
 800d4aa:	2b57      	cmp	r3, #87	@ 0x57
 800d4ac:	d810      	bhi.n	800d4d0 <__ssvfiscanf_r+0xe8>
 800d4ae:	2b25      	cmp	r3, #37	@ 0x25
 800d4b0:	d05d      	beq.n	800d56e <__ssvfiscanf_r+0x186>
 800d4b2:	d857      	bhi.n	800d564 <__ssvfiscanf_r+0x17c>
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d075      	beq.n	800d5a4 <__ssvfiscanf_r+0x1bc>
 800d4b8:	2303      	movs	r3, #3
 800d4ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d4bc:	230a      	movs	r3, #10
 800d4be:	9342      	str	r3, [sp, #264]	@ 0x108
 800d4c0:	e088      	b.n	800d5d4 <__ssvfiscanf_r+0x1ec>
 800d4c2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d4c4:	fb02 1103 	mla	r1, r2, r3, r1
 800d4c8:	3930      	subs	r1, #48	@ 0x30
 800d4ca:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d4cc:	4655      	mov	r5, sl
 800d4ce:	e7d2      	b.n	800d476 <__ssvfiscanf_r+0x8e>
 800d4d0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d4d4:	2a20      	cmp	r2, #32
 800d4d6:	d8ef      	bhi.n	800d4b8 <__ssvfiscanf_r+0xd0>
 800d4d8:	a101      	add	r1, pc, #4	@ (adr r1, 800d4e0 <__ssvfiscanf_r+0xf8>)
 800d4da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d4de:	bf00      	nop
 800d4e0:	0800d5b3 	.word	0x0800d5b3
 800d4e4:	0800d4b9 	.word	0x0800d4b9
 800d4e8:	0800d4b9 	.word	0x0800d4b9
 800d4ec:	0800d60d 	.word	0x0800d60d
 800d4f0:	0800d4b9 	.word	0x0800d4b9
 800d4f4:	0800d4b9 	.word	0x0800d4b9
 800d4f8:	0800d4b9 	.word	0x0800d4b9
 800d4fc:	0800d4b9 	.word	0x0800d4b9
 800d500:	0800d4b9 	.word	0x0800d4b9
 800d504:	0800d4b9 	.word	0x0800d4b9
 800d508:	0800d4b9 	.word	0x0800d4b9
 800d50c:	0800d623 	.word	0x0800d623
 800d510:	0800d609 	.word	0x0800d609
 800d514:	0800d56b 	.word	0x0800d56b
 800d518:	0800d56b 	.word	0x0800d56b
 800d51c:	0800d56b 	.word	0x0800d56b
 800d520:	0800d4b9 	.word	0x0800d4b9
 800d524:	0800d5c5 	.word	0x0800d5c5
 800d528:	0800d4b9 	.word	0x0800d4b9
 800d52c:	0800d4b9 	.word	0x0800d4b9
 800d530:	0800d4b9 	.word	0x0800d4b9
 800d534:	0800d4b9 	.word	0x0800d4b9
 800d538:	0800d633 	.word	0x0800d633
 800d53c:	0800d5cd 	.word	0x0800d5cd
 800d540:	0800d5ab 	.word	0x0800d5ab
 800d544:	0800d4b9 	.word	0x0800d4b9
 800d548:	0800d4b9 	.word	0x0800d4b9
 800d54c:	0800d62f 	.word	0x0800d62f
 800d550:	0800d4b9 	.word	0x0800d4b9
 800d554:	0800d609 	.word	0x0800d609
 800d558:	0800d4b9 	.word	0x0800d4b9
 800d55c:	0800d4b9 	.word	0x0800d4b9
 800d560:	0800d5b3 	.word	0x0800d5b3
 800d564:	3b45      	subs	r3, #69	@ 0x45
 800d566:	2b02      	cmp	r3, #2
 800d568:	d8a6      	bhi.n	800d4b8 <__ssvfiscanf_r+0xd0>
 800d56a:	2305      	movs	r3, #5
 800d56c:	e031      	b.n	800d5d2 <__ssvfiscanf_r+0x1ea>
 800d56e:	6863      	ldr	r3, [r4, #4]
 800d570:	2b00      	cmp	r3, #0
 800d572:	dd0d      	ble.n	800d590 <__ssvfiscanf_r+0x1a8>
 800d574:	6823      	ldr	r3, [r4, #0]
 800d576:	781a      	ldrb	r2, [r3, #0]
 800d578:	454a      	cmp	r2, r9
 800d57a:	f040 80a6 	bne.w	800d6ca <__ssvfiscanf_r+0x2e2>
 800d57e:	3301      	adds	r3, #1
 800d580:	6862      	ldr	r2, [r4, #4]
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d586:	3a01      	subs	r2, #1
 800d588:	3301      	adds	r3, #1
 800d58a:	6062      	str	r2, [r4, #4]
 800d58c:	9345      	str	r3, [sp, #276]	@ 0x114
 800d58e:	e753      	b.n	800d438 <__ssvfiscanf_r+0x50>
 800d590:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d592:	4621      	mov	r1, r4
 800d594:	4630      	mov	r0, r6
 800d596:	4798      	blx	r3
 800d598:	2800      	cmp	r0, #0
 800d59a:	d0eb      	beq.n	800d574 <__ssvfiscanf_r+0x18c>
 800d59c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	f040 808b 	bne.w	800d6ba <__ssvfiscanf_r+0x2d2>
 800d5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a8:	e08b      	b.n	800d6c2 <__ssvfiscanf_r+0x2da>
 800d5aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d5ac:	f042 0220 	orr.w	r2, r2, #32
 800d5b0:	9241      	str	r2, [sp, #260]	@ 0x104
 800d5b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d5b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5b8:	9241      	str	r2, [sp, #260]	@ 0x104
 800d5ba:	2210      	movs	r2, #16
 800d5bc:	2b6e      	cmp	r3, #110	@ 0x6e
 800d5be:	9242      	str	r2, [sp, #264]	@ 0x108
 800d5c0:	d902      	bls.n	800d5c8 <__ssvfiscanf_r+0x1e0>
 800d5c2:	e005      	b.n	800d5d0 <__ssvfiscanf_r+0x1e8>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	9342      	str	r3, [sp, #264]	@ 0x108
 800d5c8:	2303      	movs	r3, #3
 800d5ca:	e002      	b.n	800d5d2 <__ssvfiscanf_r+0x1ea>
 800d5cc:	2308      	movs	r3, #8
 800d5ce:	9342      	str	r3, [sp, #264]	@ 0x108
 800d5d0:	2304      	movs	r3, #4
 800d5d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d5d4:	6863      	ldr	r3, [r4, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	dd39      	ble.n	800d64e <__ssvfiscanf_r+0x266>
 800d5da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d5dc:	0659      	lsls	r1, r3, #25
 800d5de:	d404      	bmi.n	800d5ea <__ssvfiscanf_r+0x202>
 800d5e0:	6823      	ldr	r3, [r4, #0]
 800d5e2:	781a      	ldrb	r2, [r3, #0]
 800d5e4:	5cba      	ldrb	r2, [r7, r2]
 800d5e6:	0712      	lsls	r2, r2, #28
 800d5e8:	d438      	bmi.n	800d65c <__ssvfiscanf_r+0x274>
 800d5ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	dc47      	bgt.n	800d680 <__ssvfiscanf_r+0x298>
 800d5f0:	466b      	mov	r3, sp
 800d5f2:	4622      	mov	r2, r4
 800d5f4:	a941      	add	r1, sp, #260	@ 0x104
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f000 f9ae 	bl	800d958 <_scanf_chars>
 800d5fc:	2801      	cmp	r0, #1
 800d5fe:	d064      	beq.n	800d6ca <__ssvfiscanf_r+0x2e2>
 800d600:	2802      	cmp	r0, #2
 800d602:	f47f af19 	bne.w	800d438 <__ssvfiscanf_r+0x50>
 800d606:	e7c9      	b.n	800d59c <__ssvfiscanf_r+0x1b4>
 800d608:	220a      	movs	r2, #10
 800d60a:	e7d7      	b.n	800d5bc <__ssvfiscanf_r+0x1d4>
 800d60c:	4629      	mov	r1, r5
 800d60e:	4640      	mov	r0, r8
 800d610:	f000 fbfe 	bl	800de10 <__sccl>
 800d614:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d61a:	9341      	str	r3, [sp, #260]	@ 0x104
 800d61c:	4605      	mov	r5, r0
 800d61e:	2301      	movs	r3, #1
 800d620:	e7d7      	b.n	800d5d2 <__ssvfiscanf_r+0x1ea>
 800d622:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d628:	9341      	str	r3, [sp, #260]	@ 0x104
 800d62a:	2300      	movs	r3, #0
 800d62c:	e7d1      	b.n	800d5d2 <__ssvfiscanf_r+0x1ea>
 800d62e:	2302      	movs	r3, #2
 800d630:	e7cf      	b.n	800d5d2 <__ssvfiscanf_r+0x1ea>
 800d632:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d634:	06c3      	lsls	r3, r0, #27
 800d636:	f53f aeff 	bmi.w	800d438 <__ssvfiscanf_r+0x50>
 800d63a:	9b00      	ldr	r3, [sp, #0]
 800d63c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d63e:	1d19      	adds	r1, r3, #4
 800d640:	9100      	str	r1, [sp, #0]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	07c0      	lsls	r0, r0, #31
 800d646:	bf4c      	ite	mi
 800d648:	801a      	strhmi	r2, [r3, #0]
 800d64a:	601a      	strpl	r2, [r3, #0]
 800d64c:	e6f4      	b.n	800d438 <__ssvfiscanf_r+0x50>
 800d64e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d650:	4621      	mov	r1, r4
 800d652:	4630      	mov	r0, r6
 800d654:	4798      	blx	r3
 800d656:	2800      	cmp	r0, #0
 800d658:	d0bf      	beq.n	800d5da <__ssvfiscanf_r+0x1f2>
 800d65a:	e79f      	b.n	800d59c <__ssvfiscanf_r+0x1b4>
 800d65c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d65e:	3201      	adds	r2, #1
 800d660:	9245      	str	r2, [sp, #276]	@ 0x114
 800d662:	6862      	ldr	r2, [r4, #4]
 800d664:	3a01      	subs	r2, #1
 800d666:	2a00      	cmp	r2, #0
 800d668:	6062      	str	r2, [r4, #4]
 800d66a:	dd02      	ble.n	800d672 <__ssvfiscanf_r+0x28a>
 800d66c:	3301      	adds	r3, #1
 800d66e:	6023      	str	r3, [r4, #0]
 800d670:	e7b6      	b.n	800d5e0 <__ssvfiscanf_r+0x1f8>
 800d672:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d674:	4621      	mov	r1, r4
 800d676:	4630      	mov	r0, r6
 800d678:	4798      	blx	r3
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d0b0      	beq.n	800d5e0 <__ssvfiscanf_r+0x1f8>
 800d67e:	e78d      	b.n	800d59c <__ssvfiscanf_r+0x1b4>
 800d680:	2b04      	cmp	r3, #4
 800d682:	dc0f      	bgt.n	800d6a4 <__ssvfiscanf_r+0x2bc>
 800d684:	466b      	mov	r3, sp
 800d686:	4622      	mov	r2, r4
 800d688:	a941      	add	r1, sp, #260	@ 0x104
 800d68a:	4630      	mov	r0, r6
 800d68c:	f000 f9be 	bl	800da0c <_scanf_i>
 800d690:	e7b4      	b.n	800d5fc <__ssvfiscanf_r+0x214>
 800d692:	bf00      	nop
 800d694:	0800d335 	.word	0x0800d335
 800d698:	0800d3af 	.word	0x0800d3af
 800d69c:	0800eaf5 	.word	0x0800eaf5
 800d6a0:	0800ed1a 	.word	0x0800ed1a
 800d6a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d0 <__ssvfiscanf_r+0x2e8>)
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	f43f aec6 	beq.w	800d438 <__ssvfiscanf_r+0x50>
 800d6ac:	466b      	mov	r3, sp
 800d6ae:	4622      	mov	r2, r4
 800d6b0:	a941      	add	r1, sp, #260	@ 0x104
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f7fc fd60 	bl	800a178 <_scanf_float>
 800d6b8:	e7a0      	b.n	800d5fc <__ssvfiscanf_r+0x214>
 800d6ba:	89a3      	ldrh	r3, [r4, #12]
 800d6bc:	065b      	lsls	r3, r3, #25
 800d6be:	f53f af71 	bmi.w	800d5a4 <__ssvfiscanf_r+0x1bc>
 800d6c2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800d6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ca:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d6cc:	e7f9      	b.n	800d6c2 <__ssvfiscanf_r+0x2da>
 800d6ce:	bf00      	nop
 800d6d0:	0800a179 	.word	0x0800a179

0800d6d4 <__sfputc_r>:
 800d6d4:	6893      	ldr	r3, [r2, #8]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	b410      	push	{r4}
 800d6dc:	6093      	str	r3, [r2, #8]
 800d6de:	da08      	bge.n	800d6f2 <__sfputc_r+0x1e>
 800d6e0:	6994      	ldr	r4, [r2, #24]
 800d6e2:	42a3      	cmp	r3, r4
 800d6e4:	db01      	blt.n	800d6ea <__sfputc_r+0x16>
 800d6e6:	290a      	cmp	r1, #10
 800d6e8:	d103      	bne.n	800d6f2 <__sfputc_r+0x1e>
 800d6ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6ee:	f7fd b94c 	b.w	800a98a <__swbuf_r>
 800d6f2:	6813      	ldr	r3, [r2, #0]
 800d6f4:	1c58      	adds	r0, r3, #1
 800d6f6:	6010      	str	r0, [r2, #0]
 800d6f8:	7019      	strb	r1, [r3, #0]
 800d6fa:	4608      	mov	r0, r1
 800d6fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <__sfputs_r>:
 800d702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d704:	4606      	mov	r6, r0
 800d706:	460f      	mov	r7, r1
 800d708:	4614      	mov	r4, r2
 800d70a:	18d5      	adds	r5, r2, r3
 800d70c:	42ac      	cmp	r4, r5
 800d70e:	d101      	bne.n	800d714 <__sfputs_r+0x12>
 800d710:	2000      	movs	r0, #0
 800d712:	e007      	b.n	800d724 <__sfputs_r+0x22>
 800d714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d718:	463a      	mov	r2, r7
 800d71a:	4630      	mov	r0, r6
 800d71c:	f7ff ffda 	bl	800d6d4 <__sfputc_r>
 800d720:	1c43      	adds	r3, r0, #1
 800d722:	d1f3      	bne.n	800d70c <__sfputs_r+0xa>
 800d724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d728 <_vfiprintf_r>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	460d      	mov	r5, r1
 800d72e:	b09d      	sub	sp, #116	@ 0x74
 800d730:	4614      	mov	r4, r2
 800d732:	4698      	mov	r8, r3
 800d734:	4606      	mov	r6, r0
 800d736:	b118      	cbz	r0, 800d740 <_vfiprintf_r+0x18>
 800d738:	6a03      	ldr	r3, [r0, #32]
 800d73a:	b90b      	cbnz	r3, 800d740 <_vfiprintf_r+0x18>
 800d73c:	f7fc ffb6 	bl	800a6ac <__sinit>
 800d740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d742:	07d9      	lsls	r1, r3, #31
 800d744:	d405      	bmi.n	800d752 <_vfiprintf_r+0x2a>
 800d746:	89ab      	ldrh	r3, [r5, #12]
 800d748:	059a      	lsls	r2, r3, #22
 800d74a:	d402      	bmi.n	800d752 <_vfiprintf_r+0x2a>
 800d74c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d74e:	f7fd fa76 	bl	800ac3e <__retarget_lock_acquire_recursive>
 800d752:	89ab      	ldrh	r3, [r5, #12]
 800d754:	071b      	lsls	r3, r3, #28
 800d756:	d501      	bpl.n	800d75c <_vfiprintf_r+0x34>
 800d758:	692b      	ldr	r3, [r5, #16]
 800d75a:	b99b      	cbnz	r3, 800d784 <_vfiprintf_r+0x5c>
 800d75c:	4629      	mov	r1, r5
 800d75e:	4630      	mov	r0, r6
 800d760:	f7fd f952 	bl	800aa08 <__swsetup_r>
 800d764:	b170      	cbz	r0, 800d784 <_vfiprintf_r+0x5c>
 800d766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d768:	07dc      	lsls	r4, r3, #31
 800d76a:	d504      	bpl.n	800d776 <_vfiprintf_r+0x4e>
 800d76c:	f04f 30ff 	mov.w	r0, #4294967295
 800d770:	b01d      	add	sp, #116	@ 0x74
 800d772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d776:	89ab      	ldrh	r3, [r5, #12]
 800d778:	0598      	lsls	r0, r3, #22
 800d77a:	d4f7      	bmi.n	800d76c <_vfiprintf_r+0x44>
 800d77c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d77e:	f7fd fa5f 	bl	800ac40 <__retarget_lock_release_recursive>
 800d782:	e7f3      	b.n	800d76c <_vfiprintf_r+0x44>
 800d784:	2300      	movs	r3, #0
 800d786:	9309      	str	r3, [sp, #36]	@ 0x24
 800d788:	2320      	movs	r3, #32
 800d78a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d78e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d792:	2330      	movs	r3, #48	@ 0x30
 800d794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d944 <_vfiprintf_r+0x21c>
 800d798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d79c:	f04f 0901 	mov.w	r9, #1
 800d7a0:	4623      	mov	r3, r4
 800d7a2:	469a      	mov	sl, r3
 800d7a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7a8:	b10a      	cbz	r2, 800d7ae <_vfiprintf_r+0x86>
 800d7aa:	2a25      	cmp	r2, #37	@ 0x25
 800d7ac:	d1f9      	bne.n	800d7a2 <_vfiprintf_r+0x7a>
 800d7ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d7b2:	d00b      	beq.n	800d7cc <_vfiprintf_r+0xa4>
 800d7b4:	465b      	mov	r3, fp
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7ff ffa1 	bl	800d702 <__sfputs_r>
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	f000 80a7 	beq.w	800d914 <_vfiprintf_r+0x1ec>
 800d7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7c8:	445a      	add	r2, fp
 800d7ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 809f 	beq.w	800d914 <_vfiprintf_r+0x1ec>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7e0:	f10a 0a01 	add.w	sl, sl, #1
 800d7e4:	9304      	str	r3, [sp, #16]
 800d7e6:	9307      	str	r3, [sp, #28]
 800d7e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7ee:	4654      	mov	r4, sl
 800d7f0:	2205      	movs	r2, #5
 800d7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f6:	4853      	ldr	r0, [pc, #332]	@ (800d944 <_vfiprintf_r+0x21c>)
 800d7f8:	f7f2 fcea 	bl	80001d0 <memchr>
 800d7fc:	9a04      	ldr	r2, [sp, #16]
 800d7fe:	b9d8      	cbnz	r0, 800d838 <_vfiprintf_r+0x110>
 800d800:	06d1      	lsls	r1, r2, #27
 800d802:	bf44      	itt	mi
 800d804:	2320      	movmi	r3, #32
 800d806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d80a:	0713      	lsls	r3, r2, #28
 800d80c:	bf44      	itt	mi
 800d80e:	232b      	movmi	r3, #43	@ 0x2b
 800d810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d814:	f89a 3000 	ldrb.w	r3, [sl]
 800d818:	2b2a      	cmp	r3, #42	@ 0x2a
 800d81a:	d015      	beq.n	800d848 <_vfiprintf_r+0x120>
 800d81c:	9a07      	ldr	r2, [sp, #28]
 800d81e:	4654      	mov	r4, sl
 800d820:	2000      	movs	r0, #0
 800d822:	f04f 0c0a 	mov.w	ip, #10
 800d826:	4621      	mov	r1, r4
 800d828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d82c:	3b30      	subs	r3, #48	@ 0x30
 800d82e:	2b09      	cmp	r3, #9
 800d830:	d94b      	bls.n	800d8ca <_vfiprintf_r+0x1a2>
 800d832:	b1b0      	cbz	r0, 800d862 <_vfiprintf_r+0x13a>
 800d834:	9207      	str	r2, [sp, #28]
 800d836:	e014      	b.n	800d862 <_vfiprintf_r+0x13a>
 800d838:	eba0 0308 	sub.w	r3, r0, r8
 800d83c:	fa09 f303 	lsl.w	r3, r9, r3
 800d840:	4313      	orrs	r3, r2
 800d842:	9304      	str	r3, [sp, #16]
 800d844:	46a2      	mov	sl, r4
 800d846:	e7d2      	b.n	800d7ee <_vfiprintf_r+0xc6>
 800d848:	9b03      	ldr	r3, [sp, #12]
 800d84a:	1d19      	adds	r1, r3, #4
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	9103      	str	r1, [sp, #12]
 800d850:	2b00      	cmp	r3, #0
 800d852:	bfbb      	ittet	lt
 800d854:	425b      	neglt	r3, r3
 800d856:	f042 0202 	orrlt.w	r2, r2, #2
 800d85a:	9307      	strge	r3, [sp, #28]
 800d85c:	9307      	strlt	r3, [sp, #28]
 800d85e:	bfb8      	it	lt
 800d860:	9204      	strlt	r2, [sp, #16]
 800d862:	7823      	ldrb	r3, [r4, #0]
 800d864:	2b2e      	cmp	r3, #46	@ 0x2e
 800d866:	d10a      	bne.n	800d87e <_vfiprintf_r+0x156>
 800d868:	7863      	ldrb	r3, [r4, #1]
 800d86a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d86c:	d132      	bne.n	800d8d4 <_vfiprintf_r+0x1ac>
 800d86e:	9b03      	ldr	r3, [sp, #12]
 800d870:	1d1a      	adds	r2, r3, #4
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	9203      	str	r2, [sp, #12]
 800d876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d87a:	3402      	adds	r4, #2
 800d87c:	9305      	str	r3, [sp, #20]
 800d87e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d954 <_vfiprintf_r+0x22c>
 800d882:	7821      	ldrb	r1, [r4, #0]
 800d884:	2203      	movs	r2, #3
 800d886:	4650      	mov	r0, sl
 800d888:	f7f2 fca2 	bl	80001d0 <memchr>
 800d88c:	b138      	cbz	r0, 800d89e <_vfiprintf_r+0x176>
 800d88e:	9b04      	ldr	r3, [sp, #16]
 800d890:	eba0 000a 	sub.w	r0, r0, sl
 800d894:	2240      	movs	r2, #64	@ 0x40
 800d896:	4082      	lsls	r2, r0
 800d898:	4313      	orrs	r3, r2
 800d89a:	3401      	adds	r4, #1
 800d89c:	9304      	str	r3, [sp, #16]
 800d89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a2:	4829      	ldr	r0, [pc, #164]	@ (800d948 <_vfiprintf_r+0x220>)
 800d8a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8a8:	2206      	movs	r2, #6
 800d8aa:	f7f2 fc91 	bl	80001d0 <memchr>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d03f      	beq.n	800d932 <_vfiprintf_r+0x20a>
 800d8b2:	4b26      	ldr	r3, [pc, #152]	@ (800d94c <_vfiprintf_r+0x224>)
 800d8b4:	bb1b      	cbnz	r3, 800d8fe <_vfiprintf_r+0x1d6>
 800d8b6:	9b03      	ldr	r3, [sp, #12]
 800d8b8:	3307      	adds	r3, #7
 800d8ba:	f023 0307 	bic.w	r3, r3, #7
 800d8be:	3308      	adds	r3, #8
 800d8c0:	9303      	str	r3, [sp, #12]
 800d8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8c4:	443b      	add	r3, r7
 800d8c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8c8:	e76a      	b.n	800d7a0 <_vfiprintf_r+0x78>
 800d8ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8ce:	460c      	mov	r4, r1
 800d8d0:	2001      	movs	r0, #1
 800d8d2:	e7a8      	b.n	800d826 <_vfiprintf_r+0xfe>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	3401      	adds	r4, #1
 800d8d8:	9305      	str	r3, [sp, #20]
 800d8da:	4619      	mov	r1, r3
 800d8dc:	f04f 0c0a 	mov.w	ip, #10
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8e6:	3a30      	subs	r2, #48	@ 0x30
 800d8e8:	2a09      	cmp	r2, #9
 800d8ea:	d903      	bls.n	800d8f4 <_vfiprintf_r+0x1cc>
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d0c6      	beq.n	800d87e <_vfiprintf_r+0x156>
 800d8f0:	9105      	str	r1, [sp, #20]
 800d8f2:	e7c4      	b.n	800d87e <_vfiprintf_r+0x156>
 800d8f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e7f0      	b.n	800d8e0 <_vfiprintf_r+0x1b8>
 800d8fe:	ab03      	add	r3, sp, #12
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	462a      	mov	r2, r5
 800d904:	4b12      	ldr	r3, [pc, #72]	@ (800d950 <_vfiprintf_r+0x228>)
 800d906:	a904      	add	r1, sp, #16
 800d908:	4630      	mov	r0, r6
 800d90a:	f7fc f87f 	bl	8009a0c <_printf_float>
 800d90e:	4607      	mov	r7, r0
 800d910:	1c78      	adds	r0, r7, #1
 800d912:	d1d6      	bne.n	800d8c2 <_vfiprintf_r+0x19a>
 800d914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d916:	07d9      	lsls	r1, r3, #31
 800d918:	d405      	bmi.n	800d926 <_vfiprintf_r+0x1fe>
 800d91a:	89ab      	ldrh	r3, [r5, #12]
 800d91c:	059a      	lsls	r2, r3, #22
 800d91e:	d402      	bmi.n	800d926 <_vfiprintf_r+0x1fe>
 800d920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d922:	f7fd f98d 	bl	800ac40 <__retarget_lock_release_recursive>
 800d926:	89ab      	ldrh	r3, [r5, #12]
 800d928:	065b      	lsls	r3, r3, #25
 800d92a:	f53f af1f 	bmi.w	800d76c <_vfiprintf_r+0x44>
 800d92e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d930:	e71e      	b.n	800d770 <_vfiprintf_r+0x48>
 800d932:	ab03      	add	r3, sp, #12
 800d934:	9300      	str	r3, [sp, #0]
 800d936:	462a      	mov	r2, r5
 800d938:	4b05      	ldr	r3, [pc, #20]	@ (800d950 <_vfiprintf_r+0x228>)
 800d93a:	a904      	add	r1, sp, #16
 800d93c:	4630      	mov	r0, r6
 800d93e:	f7fc fafd 	bl	8009f3c <_printf_i>
 800d942:	e7e4      	b.n	800d90e <_vfiprintf_r+0x1e6>
 800d944:	0800ed14 	.word	0x0800ed14
 800d948:	0800ed1e 	.word	0x0800ed1e
 800d94c:	08009a0d 	.word	0x08009a0d
 800d950:	0800d703 	.word	0x0800d703
 800d954:	0800ed1a 	.word	0x0800ed1a

0800d958 <_scanf_chars>:
 800d958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d95c:	4615      	mov	r5, r2
 800d95e:	688a      	ldr	r2, [r1, #8]
 800d960:	4680      	mov	r8, r0
 800d962:	460c      	mov	r4, r1
 800d964:	b932      	cbnz	r2, 800d974 <_scanf_chars+0x1c>
 800d966:	698a      	ldr	r2, [r1, #24]
 800d968:	2a00      	cmp	r2, #0
 800d96a:	bf14      	ite	ne
 800d96c:	f04f 32ff 	movne.w	r2, #4294967295
 800d970:	2201      	moveq	r2, #1
 800d972:	608a      	str	r2, [r1, #8]
 800d974:	6822      	ldr	r2, [r4, #0]
 800d976:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800da08 <_scanf_chars+0xb0>
 800d97a:	06d1      	lsls	r1, r2, #27
 800d97c:	bf5f      	itttt	pl
 800d97e:	681a      	ldrpl	r2, [r3, #0]
 800d980:	1d11      	addpl	r1, r2, #4
 800d982:	6019      	strpl	r1, [r3, #0]
 800d984:	6816      	ldrpl	r6, [r2, #0]
 800d986:	2700      	movs	r7, #0
 800d988:	69a0      	ldr	r0, [r4, #24]
 800d98a:	b188      	cbz	r0, 800d9b0 <_scanf_chars+0x58>
 800d98c:	2801      	cmp	r0, #1
 800d98e:	d107      	bne.n	800d9a0 <_scanf_chars+0x48>
 800d990:	682b      	ldr	r3, [r5, #0]
 800d992:	781a      	ldrb	r2, [r3, #0]
 800d994:	6963      	ldr	r3, [r4, #20]
 800d996:	5c9b      	ldrb	r3, [r3, r2]
 800d998:	b953      	cbnz	r3, 800d9b0 <_scanf_chars+0x58>
 800d99a:	2f00      	cmp	r7, #0
 800d99c:	d031      	beq.n	800da02 <_scanf_chars+0xaa>
 800d99e:	e022      	b.n	800d9e6 <_scanf_chars+0x8e>
 800d9a0:	2802      	cmp	r0, #2
 800d9a2:	d120      	bne.n	800d9e6 <_scanf_chars+0x8e>
 800d9a4:	682b      	ldr	r3, [r5, #0]
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d9ac:	071b      	lsls	r3, r3, #28
 800d9ae:	d41a      	bmi.n	800d9e6 <_scanf_chars+0x8e>
 800d9b0:	6823      	ldr	r3, [r4, #0]
 800d9b2:	06da      	lsls	r2, r3, #27
 800d9b4:	bf5e      	ittt	pl
 800d9b6:	682b      	ldrpl	r3, [r5, #0]
 800d9b8:	781b      	ldrbpl	r3, [r3, #0]
 800d9ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d9be:	682a      	ldr	r2, [r5, #0]
 800d9c0:	686b      	ldr	r3, [r5, #4]
 800d9c2:	3201      	adds	r2, #1
 800d9c4:	602a      	str	r2, [r5, #0]
 800d9c6:	68a2      	ldr	r2, [r4, #8]
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	3a01      	subs	r2, #1
 800d9cc:	606b      	str	r3, [r5, #4]
 800d9ce:	3701      	adds	r7, #1
 800d9d0:	60a2      	str	r2, [r4, #8]
 800d9d2:	b142      	cbz	r2, 800d9e6 <_scanf_chars+0x8e>
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	dcd7      	bgt.n	800d988 <_scanf_chars+0x30>
 800d9d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d9dc:	4629      	mov	r1, r5
 800d9de:	4640      	mov	r0, r8
 800d9e0:	4798      	blx	r3
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d0d0      	beq.n	800d988 <_scanf_chars+0x30>
 800d9e6:	6823      	ldr	r3, [r4, #0]
 800d9e8:	f013 0310 	ands.w	r3, r3, #16
 800d9ec:	d105      	bne.n	800d9fa <_scanf_chars+0xa2>
 800d9ee:	68e2      	ldr	r2, [r4, #12]
 800d9f0:	3201      	adds	r2, #1
 800d9f2:	60e2      	str	r2, [r4, #12]
 800d9f4:	69a2      	ldr	r2, [r4, #24]
 800d9f6:	b102      	cbz	r2, 800d9fa <_scanf_chars+0xa2>
 800d9f8:	7033      	strb	r3, [r6, #0]
 800d9fa:	6923      	ldr	r3, [r4, #16]
 800d9fc:	443b      	add	r3, r7
 800d9fe:	6123      	str	r3, [r4, #16]
 800da00:	2000      	movs	r0, #0
 800da02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da06:	bf00      	nop
 800da08:	0800eaf5 	.word	0x0800eaf5

0800da0c <_scanf_i>:
 800da0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da10:	4698      	mov	r8, r3
 800da12:	4b74      	ldr	r3, [pc, #464]	@ (800dbe4 <_scanf_i+0x1d8>)
 800da14:	460c      	mov	r4, r1
 800da16:	4682      	mov	sl, r0
 800da18:	4616      	mov	r6, r2
 800da1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800da1e:	b087      	sub	sp, #28
 800da20:	ab03      	add	r3, sp, #12
 800da22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800da26:	4b70      	ldr	r3, [pc, #448]	@ (800dbe8 <_scanf_i+0x1dc>)
 800da28:	69a1      	ldr	r1, [r4, #24]
 800da2a:	4a70      	ldr	r2, [pc, #448]	@ (800dbec <_scanf_i+0x1e0>)
 800da2c:	2903      	cmp	r1, #3
 800da2e:	bf08      	it	eq
 800da30:	461a      	moveq	r2, r3
 800da32:	68a3      	ldr	r3, [r4, #8]
 800da34:	9201      	str	r2, [sp, #4]
 800da36:	1e5a      	subs	r2, r3, #1
 800da38:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800da3c:	bf88      	it	hi
 800da3e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800da42:	4627      	mov	r7, r4
 800da44:	bf82      	ittt	hi
 800da46:	eb03 0905 	addhi.w	r9, r3, r5
 800da4a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800da4e:	60a3      	strhi	r3, [r4, #8]
 800da50:	f857 3b1c 	ldr.w	r3, [r7], #28
 800da54:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800da58:	bf98      	it	ls
 800da5a:	f04f 0900 	movls.w	r9, #0
 800da5e:	6023      	str	r3, [r4, #0]
 800da60:	463d      	mov	r5, r7
 800da62:	f04f 0b00 	mov.w	fp, #0
 800da66:	6831      	ldr	r1, [r6, #0]
 800da68:	ab03      	add	r3, sp, #12
 800da6a:	7809      	ldrb	r1, [r1, #0]
 800da6c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800da70:	2202      	movs	r2, #2
 800da72:	f7f2 fbad 	bl	80001d0 <memchr>
 800da76:	b328      	cbz	r0, 800dac4 <_scanf_i+0xb8>
 800da78:	f1bb 0f01 	cmp.w	fp, #1
 800da7c:	d159      	bne.n	800db32 <_scanf_i+0x126>
 800da7e:	6862      	ldr	r2, [r4, #4]
 800da80:	b92a      	cbnz	r2, 800da8e <_scanf_i+0x82>
 800da82:	6822      	ldr	r2, [r4, #0]
 800da84:	2108      	movs	r1, #8
 800da86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da8a:	6061      	str	r1, [r4, #4]
 800da8c:	6022      	str	r2, [r4, #0]
 800da8e:	6822      	ldr	r2, [r4, #0]
 800da90:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800da94:	6022      	str	r2, [r4, #0]
 800da96:	68a2      	ldr	r2, [r4, #8]
 800da98:	1e51      	subs	r1, r2, #1
 800da9a:	60a1      	str	r1, [r4, #8]
 800da9c:	b192      	cbz	r2, 800dac4 <_scanf_i+0xb8>
 800da9e:	6832      	ldr	r2, [r6, #0]
 800daa0:	1c51      	adds	r1, r2, #1
 800daa2:	6031      	str	r1, [r6, #0]
 800daa4:	7812      	ldrb	r2, [r2, #0]
 800daa6:	f805 2b01 	strb.w	r2, [r5], #1
 800daaa:	6872      	ldr	r2, [r6, #4]
 800daac:	3a01      	subs	r2, #1
 800daae:	2a00      	cmp	r2, #0
 800dab0:	6072      	str	r2, [r6, #4]
 800dab2:	dc07      	bgt.n	800dac4 <_scanf_i+0xb8>
 800dab4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800dab8:	4631      	mov	r1, r6
 800daba:	4650      	mov	r0, sl
 800dabc:	4790      	blx	r2
 800dabe:	2800      	cmp	r0, #0
 800dac0:	f040 8085 	bne.w	800dbce <_scanf_i+0x1c2>
 800dac4:	f10b 0b01 	add.w	fp, fp, #1
 800dac8:	f1bb 0f03 	cmp.w	fp, #3
 800dacc:	d1cb      	bne.n	800da66 <_scanf_i+0x5a>
 800dace:	6863      	ldr	r3, [r4, #4]
 800dad0:	b90b      	cbnz	r3, 800dad6 <_scanf_i+0xca>
 800dad2:	230a      	movs	r3, #10
 800dad4:	6063      	str	r3, [r4, #4]
 800dad6:	6863      	ldr	r3, [r4, #4]
 800dad8:	4945      	ldr	r1, [pc, #276]	@ (800dbf0 <_scanf_i+0x1e4>)
 800dada:	6960      	ldr	r0, [r4, #20]
 800dadc:	1ac9      	subs	r1, r1, r3
 800dade:	f000 f997 	bl	800de10 <__sccl>
 800dae2:	f04f 0b00 	mov.w	fp, #0
 800dae6:	68a3      	ldr	r3, [r4, #8]
 800dae8:	6822      	ldr	r2, [r4, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d03d      	beq.n	800db6a <_scanf_i+0x15e>
 800daee:	6831      	ldr	r1, [r6, #0]
 800daf0:	6960      	ldr	r0, [r4, #20]
 800daf2:	f891 c000 	ldrb.w	ip, [r1]
 800daf6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d035      	beq.n	800db6a <_scanf_i+0x15e>
 800dafe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800db02:	d124      	bne.n	800db4e <_scanf_i+0x142>
 800db04:	0510      	lsls	r0, r2, #20
 800db06:	d522      	bpl.n	800db4e <_scanf_i+0x142>
 800db08:	f10b 0b01 	add.w	fp, fp, #1
 800db0c:	f1b9 0f00 	cmp.w	r9, #0
 800db10:	d003      	beq.n	800db1a <_scanf_i+0x10e>
 800db12:	3301      	adds	r3, #1
 800db14:	f109 39ff 	add.w	r9, r9, #4294967295
 800db18:	60a3      	str	r3, [r4, #8]
 800db1a:	6873      	ldr	r3, [r6, #4]
 800db1c:	3b01      	subs	r3, #1
 800db1e:	2b00      	cmp	r3, #0
 800db20:	6073      	str	r3, [r6, #4]
 800db22:	dd1b      	ble.n	800db5c <_scanf_i+0x150>
 800db24:	6833      	ldr	r3, [r6, #0]
 800db26:	3301      	adds	r3, #1
 800db28:	6033      	str	r3, [r6, #0]
 800db2a:	68a3      	ldr	r3, [r4, #8]
 800db2c:	3b01      	subs	r3, #1
 800db2e:	60a3      	str	r3, [r4, #8]
 800db30:	e7d9      	b.n	800dae6 <_scanf_i+0xda>
 800db32:	f1bb 0f02 	cmp.w	fp, #2
 800db36:	d1ae      	bne.n	800da96 <_scanf_i+0x8a>
 800db38:	6822      	ldr	r2, [r4, #0]
 800db3a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800db3e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800db42:	d1c4      	bne.n	800dace <_scanf_i+0xc2>
 800db44:	2110      	movs	r1, #16
 800db46:	6061      	str	r1, [r4, #4]
 800db48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800db4c:	e7a2      	b.n	800da94 <_scanf_i+0x88>
 800db4e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800db52:	6022      	str	r2, [r4, #0]
 800db54:	780b      	ldrb	r3, [r1, #0]
 800db56:	f805 3b01 	strb.w	r3, [r5], #1
 800db5a:	e7de      	b.n	800db1a <_scanf_i+0x10e>
 800db5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800db60:	4631      	mov	r1, r6
 800db62:	4650      	mov	r0, sl
 800db64:	4798      	blx	r3
 800db66:	2800      	cmp	r0, #0
 800db68:	d0df      	beq.n	800db2a <_scanf_i+0x11e>
 800db6a:	6823      	ldr	r3, [r4, #0]
 800db6c:	05d9      	lsls	r1, r3, #23
 800db6e:	d50d      	bpl.n	800db8c <_scanf_i+0x180>
 800db70:	42bd      	cmp	r5, r7
 800db72:	d909      	bls.n	800db88 <_scanf_i+0x17c>
 800db74:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800db78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800db7c:	4632      	mov	r2, r6
 800db7e:	4650      	mov	r0, sl
 800db80:	4798      	blx	r3
 800db82:	f105 39ff 	add.w	r9, r5, #4294967295
 800db86:	464d      	mov	r5, r9
 800db88:	42bd      	cmp	r5, r7
 800db8a:	d028      	beq.n	800dbde <_scanf_i+0x1d2>
 800db8c:	6822      	ldr	r2, [r4, #0]
 800db8e:	f012 0210 	ands.w	r2, r2, #16
 800db92:	d113      	bne.n	800dbbc <_scanf_i+0x1b0>
 800db94:	702a      	strb	r2, [r5, #0]
 800db96:	6863      	ldr	r3, [r4, #4]
 800db98:	9e01      	ldr	r6, [sp, #4]
 800db9a:	4639      	mov	r1, r7
 800db9c:	4650      	mov	r0, sl
 800db9e:	47b0      	blx	r6
 800dba0:	f8d8 3000 	ldr.w	r3, [r8]
 800dba4:	6821      	ldr	r1, [r4, #0]
 800dba6:	1d1a      	adds	r2, r3, #4
 800dba8:	f8c8 2000 	str.w	r2, [r8]
 800dbac:	f011 0f20 	tst.w	r1, #32
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	d00f      	beq.n	800dbd4 <_scanf_i+0x1c8>
 800dbb4:	6018      	str	r0, [r3, #0]
 800dbb6:	68e3      	ldr	r3, [r4, #12]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	60e3      	str	r3, [r4, #12]
 800dbbc:	6923      	ldr	r3, [r4, #16]
 800dbbe:	1bed      	subs	r5, r5, r7
 800dbc0:	445d      	add	r5, fp
 800dbc2:	442b      	add	r3, r5
 800dbc4:	6123      	str	r3, [r4, #16]
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	b007      	add	sp, #28
 800dbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbce:	f04f 0b00 	mov.w	fp, #0
 800dbd2:	e7ca      	b.n	800db6a <_scanf_i+0x15e>
 800dbd4:	07ca      	lsls	r2, r1, #31
 800dbd6:	bf4c      	ite	mi
 800dbd8:	8018      	strhmi	r0, [r3, #0]
 800dbda:	6018      	strpl	r0, [r3, #0]
 800dbdc:	e7eb      	b.n	800dbb6 <_scanf_i+0x1aa>
 800dbde:	2001      	movs	r0, #1
 800dbe0:	e7f2      	b.n	800dbc8 <_scanf_i+0x1bc>
 800dbe2:	bf00      	nop
 800dbe4:	0800ead0 	.word	0x0800ead0
 800dbe8:	080098b5 	.word	0x080098b5
 800dbec:	0800e7d5 	.word	0x0800e7d5
 800dbf0:	0800ed35 	.word	0x0800ed35

0800dbf4 <__sflush_r>:
 800dbf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbfc:	0716      	lsls	r6, r2, #28
 800dbfe:	4605      	mov	r5, r0
 800dc00:	460c      	mov	r4, r1
 800dc02:	d454      	bmi.n	800dcae <__sflush_r+0xba>
 800dc04:	684b      	ldr	r3, [r1, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	dc02      	bgt.n	800dc10 <__sflush_r+0x1c>
 800dc0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dd48      	ble.n	800dca2 <__sflush_r+0xae>
 800dc10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc12:	2e00      	cmp	r6, #0
 800dc14:	d045      	beq.n	800dca2 <__sflush_r+0xae>
 800dc16:	2300      	movs	r3, #0
 800dc18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc1c:	682f      	ldr	r7, [r5, #0]
 800dc1e:	6a21      	ldr	r1, [r4, #32]
 800dc20:	602b      	str	r3, [r5, #0]
 800dc22:	d030      	beq.n	800dc86 <__sflush_r+0x92>
 800dc24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc26:	89a3      	ldrh	r3, [r4, #12]
 800dc28:	0759      	lsls	r1, r3, #29
 800dc2a:	d505      	bpl.n	800dc38 <__sflush_r+0x44>
 800dc2c:	6863      	ldr	r3, [r4, #4]
 800dc2e:	1ad2      	subs	r2, r2, r3
 800dc30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc32:	b10b      	cbz	r3, 800dc38 <__sflush_r+0x44>
 800dc34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc36:	1ad2      	subs	r2, r2, r3
 800dc38:	2300      	movs	r3, #0
 800dc3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc3c:	6a21      	ldr	r1, [r4, #32]
 800dc3e:	4628      	mov	r0, r5
 800dc40:	47b0      	blx	r6
 800dc42:	1c43      	adds	r3, r0, #1
 800dc44:	89a3      	ldrh	r3, [r4, #12]
 800dc46:	d106      	bne.n	800dc56 <__sflush_r+0x62>
 800dc48:	6829      	ldr	r1, [r5, #0]
 800dc4a:	291d      	cmp	r1, #29
 800dc4c:	d82b      	bhi.n	800dca6 <__sflush_r+0xb2>
 800dc4e:	4a2a      	ldr	r2, [pc, #168]	@ (800dcf8 <__sflush_r+0x104>)
 800dc50:	40ca      	lsrs	r2, r1
 800dc52:	07d6      	lsls	r6, r2, #31
 800dc54:	d527      	bpl.n	800dca6 <__sflush_r+0xb2>
 800dc56:	2200      	movs	r2, #0
 800dc58:	6062      	str	r2, [r4, #4]
 800dc5a:	04d9      	lsls	r1, r3, #19
 800dc5c:	6922      	ldr	r2, [r4, #16]
 800dc5e:	6022      	str	r2, [r4, #0]
 800dc60:	d504      	bpl.n	800dc6c <__sflush_r+0x78>
 800dc62:	1c42      	adds	r2, r0, #1
 800dc64:	d101      	bne.n	800dc6a <__sflush_r+0x76>
 800dc66:	682b      	ldr	r3, [r5, #0]
 800dc68:	b903      	cbnz	r3, 800dc6c <__sflush_r+0x78>
 800dc6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc6e:	602f      	str	r7, [r5, #0]
 800dc70:	b1b9      	cbz	r1, 800dca2 <__sflush_r+0xae>
 800dc72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc76:	4299      	cmp	r1, r3
 800dc78:	d002      	beq.n	800dc80 <__sflush_r+0x8c>
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	f7fd fe50 	bl	800b920 <_free_r>
 800dc80:	2300      	movs	r3, #0
 800dc82:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc84:	e00d      	b.n	800dca2 <__sflush_r+0xae>
 800dc86:	2301      	movs	r3, #1
 800dc88:	4628      	mov	r0, r5
 800dc8a:	47b0      	blx	r6
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	1c50      	adds	r0, r2, #1
 800dc90:	d1c9      	bne.n	800dc26 <__sflush_r+0x32>
 800dc92:	682b      	ldr	r3, [r5, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d0c6      	beq.n	800dc26 <__sflush_r+0x32>
 800dc98:	2b1d      	cmp	r3, #29
 800dc9a:	d001      	beq.n	800dca0 <__sflush_r+0xac>
 800dc9c:	2b16      	cmp	r3, #22
 800dc9e:	d11e      	bne.n	800dcde <__sflush_r+0xea>
 800dca0:	602f      	str	r7, [r5, #0]
 800dca2:	2000      	movs	r0, #0
 800dca4:	e022      	b.n	800dcec <__sflush_r+0xf8>
 800dca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcaa:	b21b      	sxth	r3, r3
 800dcac:	e01b      	b.n	800dce6 <__sflush_r+0xf2>
 800dcae:	690f      	ldr	r7, [r1, #16]
 800dcb0:	2f00      	cmp	r7, #0
 800dcb2:	d0f6      	beq.n	800dca2 <__sflush_r+0xae>
 800dcb4:	0793      	lsls	r3, r2, #30
 800dcb6:	680e      	ldr	r6, [r1, #0]
 800dcb8:	bf08      	it	eq
 800dcba:	694b      	ldreq	r3, [r1, #20]
 800dcbc:	600f      	str	r7, [r1, #0]
 800dcbe:	bf18      	it	ne
 800dcc0:	2300      	movne	r3, #0
 800dcc2:	eba6 0807 	sub.w	r8, r6, r7
 800dcc6:	608b      	str	r3, [r1, #8]
 800dcc8:	f1b8 0f00 	cmp.w	r8, #0
 800dccc:	dde9      	ble.n	800dca2 <__sflush_r+0xae>
 800dcce:	6a21      	ldr	r1, [r4, #32]
 800dcd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dcd2:	4643      	mov	r3, r8
 800dcd4:	463a      	mov	r2, r7
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	47b0      	blx	r6
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	dc08      	bgt.n	800dcf0 <__sflush_r+0xfc>
 800dcde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dce6:	81a3      	strh	r3, [r4, #12]
 800dce8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf0:	4407      	add	r7, r0
 800dcf2:	eba8 0800 	sub.w	r8, r8, r0
 800dcf6:	e7e7      	b.n	800dcc8 <__sflush_r+0xd4>
 800dcf8:	20400001 	.word	0x20400001

0800dcfc <_fflush_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	690b      	ldr	r3, [r1, #16]
 800dd00:	4605      	mov	r5, r0
 800dd02:	460c      	mov	r4, r1
 800dd04:	b913      	cbnz	r3, 800dd0c <_fflush_r+0x10>
 800dd06:	2500      	movs	r5, #0
 800dd08:	4628      	mov	r0, r5
 800dd0a:	bd38      	pop	{r3, r4, r5, pc}
 800dd0c:	b118      	cbz	r0, 800dd16 <_fflush_r+0x1a>
 800dd0e:	6a03      	ldr	r3, [r0, #32]
 800dd10:	b90b      	cbnz	r3, 800dd16 <_fflush_r+0x1a>
 800dd12:	f7fc fccb 	bl	800a6ac <__sinit>
 800dd16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0f3      	beq.n	800dd06 <_fflush_r+0xa>
 800dd1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd20:	07d0      	lsls	r0, r2, #31
 800dd22:	d404      	bmi.n	800dd2e <_fflush_r+0x32>
 800dd24:	0599      	lsls	r1, r3, #22
 800dd26:	d402      	bmi.n	800dd2e <_fflush_r+0x32>
 800dd28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd2a:	f7fc ff88 	bl	800ac3e <__retarget_lock_acquire_recursive>
 800dd2e:	4628      	mov	r0, r5
 800dd30:	4621      	mov	r1, r4
 800dd32:	f7ff ff5f 	bl	800dbf4 <__sflush_r>
 800dd36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd38:	07da      	lsls	r2, r3, #31
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	d4e4      	bmi.n	800dd08 <_fflush_r+0xc>
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	059b      	lsls	r3, r3, #22
 800dd42:	d4e1      	bmi.n	800dd08 <_fflush_r+0xc>
 800dd44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd46:	f7fc ff7b 	bl	800ac40 <__retarget_lock_release_recursive>
 800dd4a:	e7dd      	b.n	800dd08 <_fflush_r+0xc>

0800dd4c <__swhatbuf_r>:
 800dd4c:	b570      	push	{r4, r5, r6, lr}
 800dd4e:	460c      	mov	r4, r1
 800dd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd54:	2900      	cmp	r1, #0
 800dd56:	b096      	sub	sp, #88	@ 0x58
 800dd58:	4615      	mov	r5, r2
 800dd5a:	461e      	mov	r6, r3
 800dd5c:	da0d      	bge.n	800dd7a <__swhatbuf_r+0x2e>
 800dd5e:	89a3      	ldrh	r3, [r4, #12]
 800dd60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd64:	f04f 0100 	mov.w	r1, #0
 800dd68:	bf14      	ite	ne
 800dd6a:	2340      	movne	r3, #64	@ 0x40
 800dd6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd70:	2000      	movs	r0, #0
 800dd72:	6031      	str	r1, [r6, #0]
 800dd74:	602b      	str	r3, [r5, #0]
 800dd76:	b016      	add	sp, #88	@ 0x58
 800dd78:	bd70      	pop	{r4, r5, r6, pc}
 800dd7a:	466a      	mov	r2, sp
 800dd7c:	f000 f8d6 	bl	800df2c <_fstat_r>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	dbec      	blt.n	800dd5e <__swhatbuf_r+0x12>
 800dd84:	9901      	ldr	r1, [sp, #4]
 800dd86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd8e:	4259      	negs	r1, r3
 800dd90:	4159      	adcs	r1, r3
 800dd92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd96:	e7eb      	b.n	800dd70 <__swhatbuf_r+0x24>

0800dd98 <__smakebuf_r>:
 800dd98:	898b      	ldrh	r3, [r1, #12]
 800dd9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd9c:	079d      	lsls	r5, r3, #30
 800dd9e:	4606      	mov	r6, r0
 800dda0:	460c      	mov	r4, r1
 800dda2:	d507      	bpl.n	800ddb4 <__smakebuf_r+0x1c>
 800dda4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	6123      	str	r3, [r4, #16]
 800ddac:	2301      	movs	r3, #1
 800ddae:	6163      	str	r3, [r4, #20]
 800ddb0:	b003      	add	sp, #12
 800ddb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddb4:	ab01      	add	r3, sp, #4
 800ddb6:	466a      	mov	r2, sp
 800ddb8:	f7ff ffc8 	bl	800dd4c <__swhatbuf_r>
 800ddbc:	9f00      	ldr	r7, [sp, #0]
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	4639      	mov	r1, r7
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	f7fd fe20 	bl	800ba08 <_malloc_r>
 800ddc8:	b948      	cbnz	r0, 800ddde <__smakebuf_r+0x46>
 800ddca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddce:	059a      	lsls	r2, r3, #22
 800ddd0:	d4ee      	bmi.n	800ddb0 <__smakebuf_r+0x18>
 800ddd2:	f023 0303 	bic.w	r3, r3, #3
 800ddd6:	f043 0302 	orr.w	r3, r3, #2
 800ddda:	81a3      	strh	r3, [r4, #12]
 800dddc:	e7e2      	b.n	800dda4 <__smakebuf_r+0xc>
 800ddde:	89a3      	ldrh	r3, [r4, #12]
 800dde0:	6020      	str	r0, [r4, #0]
 800dde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dde6:	81a3      	strh	r3, [r4, #12]
 800dde8:	9b01      	ldr	r3, [sp, #4]
 800ddea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddee:	b15b      	cbz	r3, 800de08 <__smakebuf_r+0x70>
 800ddf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f000 f8ab 	bl	800df50 <_isatty_r>
 800ddfa:	b128      	cbz	r0, 800de08 <__smakebuf_r+0x70>
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	f023 0303 	bic.w	r3, r3, #3
 800de02:	f043 0301 	orr.w	r3, r3, #1
 800de06:	81a3      	strh	r3, [r4, #12]
 800de08:	89a3      	ldrh	r3, [r4, #12]
 800de0a:	431d      	orrs	r5, r3
 800de0c:	81a5      	strh	r5, [r4, #12]
 800de0e:	e7cf      	b.n	800ddb0 <__smakebuf_r+0x18>

0800de10 <__sccl>:
 800de10:	b570      	push	{r4, r5, r6, lr}
 800de12:	780b      	ldrb	r3, [r1, #0]
 800de14:	4604      	mov	r4, r0
 800de16:	2b5e      	cmp	r3, #94	@ 0x5e
 800de18:	bf0b      	itete	eq
 800de1a:	784b      	ldrbeq	r3, [r1, #1]
 800de1c:	1c4a      	addne	r2, r1, #1
 800de1e:	1c8a      	addeq	r2, r1, #2
 800de20:	2100      	movne	r1, #0
 800de22:	bf08      	it	eq
 800de24:	2101      	moveq	r1, #1
 800de26:	3801      	subs	r0, #1
 800de28:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800de2c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800de30:	42a8      	cmp	r0, r5
 800de32:	d1fb      	bne.n	800de2c <__sccl+0x1c>
 800de34:	b90b      	cbnz	r3, 800de3a <__sccl+0x2a>
 800de36:	1e50      	subs	r0, r2, #1
 800de38:	bd70      	pop	{r4, r5, r6, pc}
 800de3a:	f081 0101 	eor.w	r1, r1, #1
 800de3e:	54e1      	strb	r1, [r4, r3]
 800de40:	4610      	mov	r0, r2
 800de42:	4602      	mov	r2, r0
 800de44:	f812 5b01 	ldrb.w	r5, [r2], #1
 800de48:	2d2d      	cmp	r5, #45	@ 0x2d
 800de4a:	d005      	beq.n	800de58 <__sccl+0x48>
 800de4c:	2d5d      	cmp	r5, #93	@ 0x5d
 800de4e:	d016      	beq.n	800de7e <__sccl+0x6e>
 800de50:	2d00      	cmp	r5, #0
 800de52:	d0f1      	beq.n	800de38 <__sccl+0x28>
 800de54:	462b      	mov	r3, r5
 800de56:	e7f2      	b.n	800de3e <__sccl+0x2e>
 800de58:	7846      	ldrb	r6, [r0, #1]
 800de5a:	2e5d      	cmp	r6, #93	@ 0x5d
 800de5c:	d0fa      	beq.n	800de54 <__sccl+0x44>
 800de5e:	42b3      	cmp	r3, r6
 800de60:	dcf8      	bgt.n	800de54 <__sccl+0x44>
 800de62:	3002      	adds	r0, #2
 800de64:	461a      	mov	r2, r3
 800de66:	3201      	adds	r2, #1
 800de68:	4296      	cmp	r6, r2
 800de6a:	54a1      	strb	r1, [r4, r2]
 800de6c:	dcfb      	bgt.n	800de66 <__sccl+0x56>
 800de6e:	1af2      	subs	r2, r6, r3
 800de70:	3a01      	subs	r2, #1
 800de72:	1c5d      	adds	r5, r3, #1
 800de74:	42b3      	cmp	r3, r6
 800de76:	bfa8      	it	ge
 800de78:	2200      	movge	r2, #0
 800de7a:	18ab      	adds	r3, r5, r2
 800de7c:	e7e1      	b.n	800de42 <__sccl+0x32>
 800de7e:	4610      	mov	r0, r2
 800de80:	e7da      	b.n	800de38 <__sccl+0x28>

0800de82 <__submore>:
 800de82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de86:	460c      	mov	r4, r1
 800de88:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800de8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de8e:	4299      	cmp	r1, r3
 800de90:	d11d      	bne.n	800dece <__submore+0x4c>
 800de92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800de96:	f7fd fdb7 	bl	800ba08 <_malloc_r>
 800de9a:	b918      	cbnz	r0, 800dea4 <__submore+0x22>
 800de9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dea8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800deaa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800deae:	6360      	str	r0, [r4, #52]	@ 0x34
 800deb0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800deb4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800deb8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800debc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dec0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800dec4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800dec8:	6020      	str	r0, [r4, #0]
 800deca:	2000      	movs	r0, #0
 800decc:	e7e8      	b.n	800dea0 <__submore+0x1e>
 800dece:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ded0:	0077      	lsls	r7, r6, #1
 800ded2:	463a      	mov	r2, r7
 800ded4:	f000 fbe1 	bl	800e69a <_realloc_r>
 800ded8:	4605      	mov	r5, r0
 800deda:	2800      	cmp	r0, #0
 800dedc:	d0de      	beq.n	800de9c <__submore+0x1a>
 800dede:	eb00 0806 	add.w	r8, r0, r6
 800dee2:	4601      	mov	r1, r0
 800dee4:	4632      	mov	r2, r6
 800dee6:	4640      	mov	r0, r8
 800dee8:	f7fc feab 	bl	800ac42 <memcpy>
 800deec:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800def0:	f8c4 8000 	str.w	r8, [r4]
 800def4:	e7e9      	b.n	800deca <__submore+0x48>

0800def6 <memmove>:
 800def6:	4288      	cmp	r0, r1
 800def8:	b510      	push	{r4, lr}
 800defa:	eb01 0402 	add.w	r4, r1, r2
 800defe:	d902      	bls.n	800df06 <memmove+0x10>
 800df00:	4284      	cmp	r4, r0
 800df02:	4623      	mov	r3, r4
 800df04:	d807      	bhi.n	800df16 <memmove+0x20>
 800df06:	1e43      	subs	r3, r0, #1
 800df08:	42a1      	cmp	r1, r4
 800df0a:	d008      	beq.n	800df1e <memmove+0x28>
 800df0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df10:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df14:	e7f8      	b.n	800df08 <memmove+0x12>
 800df16:	4402      	add	r2, r0
 800df18:	4601      	mov	r1, r0
 800df1a:	428a      	cmp	r2, r1
 800df1c:	d100      	bne.n	800df20 <memmove+0x2a>
 800df1e:	bd10      	pop	{r4, pc}
 800df20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df28:	e7f7      	b.n	800df1a <memmove+0x24>
	...

0800df2c <_fstat_r>:
 800df2c:	b538      	push	{r3, r4, r5, lr}
 800df2e:	4d07      	ldr	r5, [pc, #28]	@ (800df4c <_fstat_r+0x20>)
 800df30:	2300      	movs	r3, #0
 800df32:	4604      	mov	r4, r0
 800df34:	4608      	mov	r0, r1
 800df36:	4611      	mov	r1, r2
 800df38:	602b      	str	r3, [r5, #0]
 800df3a:	f7f3 fe3b 	bl	8001bb4 <_fstat>
 800df3e:	1c43      	adds	r3, r0, #1
 800df40:	d102      	bne.n	800df48 <_fstat_r+0x1c>
 800df42:	682b      	ldr	r3, [r5, #0]
 800df44:	b103      	cbz	r3, 800df48 <_fstat_r+0x1c>
 800df46:	6023      	str	r3, [r4, #0]
 800df48:	bd38      	pop	{r3, r4, r5, pc}
 800df4a:	bf00      	nop
 800df4c:	2000218c 	.word	0x2000218c

0800df50 <_isatty_r>:
 800df50:	b538      	push	{r3, r4, r5, lr}
 800df52:	4d06      	ldr	r5, [pc, #24]	@ (800df6c <_isatty_r+0x1c>)
 800df54:	2300      	movs	r3, #0
 800df56:	4604      	mov	r4, r0
 800df58:	4608      	mov	r0, r1
 800df5a:	602b      	str	r3, [r5, #0]
 800df5c:	f7f3 fe3a 	bl	8001bd4 <_isatty>
 800df60:	1c43      	adds	r3, r0, #1
 800df62:	d102      	bne.n	800df6a <_isatty_r+0x1a>
 800df64:	682b      	ldr	r3, [r5, #0]
 800df66:	b103      	cbz	r3, 800df6a <_isatty_r+0x1a>
 800df68:	6023      	str	r3, [r4, #0]
 800df6a:	bd38      	pop	{r3, r4, r5, pc}
 800df6c:	2000218c 	.word	0x2000218c

0800df70 <_sbrk_r>:
 800df70:	b538      	push	{r3, r4, r5, lr}
 800df72:	4d06      	ldr	r5, [pc, #24]	@ (800df8c <_sbrk_r+0x1c>)
 800df74:	2300      	movs	r3, #0
 800df76:	4604      	mov	r4, r0
 800df78:	4608      	mov	r0, r1
 800df7a:	602b      	str	r3, [r5, #0]
 800df7c:	f7f3 fe42 	bl	8001c04 <_sbrk>
 800df80:	1c43      	adds	r3, r0, #1
 800df82:	d102      	bne.n	800df8a <_sbrk_r+0x1a>
 800df84:	682b      	ldr	r3, [r5, #0]
 800df86:	b103      	cbz	r3, 800df8a <_sbrk_r+0x1a>
 800df88:	6023      	str	r3, [r4, #0]
 800df8a:	bd38      	pop	{r3, r4, r5, pc}
 800df8c:	2000218c 	.word	0x2000218c

0800df90 <nan>:
 800df90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800df98 <nan+0x8>
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	00000000 	.word	0x00000000
 800df9c:	7ff80000 	.word	0x7ff80000

0800dfa0 <__assert_func>:
 800dfa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfa2:	4614      	mov	r4, r2
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	4b09      	ldr	r3, [pc, #36]	@ (800dfcc <__assert_func+0x2c>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4605      	mov	r5, r0
 800dfac:	68d8      	ldr	r0, [r3, #12]
 800dfae:	b14c      	cbz	r4, 800dfc4 <__assert_func+0x24>
 800dfb0:	4b07      	ldr	r3, [pc, #28]	@ (800dfd0 <__assert_func+0x30>)
 800dfb2:	9100      	str	r1, [sp, #0]
 800dfb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfb8:	4906      	ldr	r1, [pc, #24]	@ (800dfd4 <__assert_func+0x34>)
 800dfba:	462b      	mov	r3, r5
 800dfbc:	f000 fc1a 	bl	800e7f4 <fiprintf>
 800dfc0:	f000 fc2a 	bl	800e818 <abort>
 800dfc4:	4b04      	ldr	r3, [pc, #16]	@ (800dfd8 <__assert_func+0x38>)
 800dfc6:	461c      	mov	r4, r3
 800dfc8:	e7f3      	b.n	800dfb2 <__assert_func+0x12>
 800dfca:	bf00      	nop
 800dfcc:	20000108 	.word	0x20000108
 800dfd0:	0800ed48 	.word	0x0800ed48
 800dfd4:	0800ed55 	.word	0x0800ed55
 800dfd8:	0800ed83 	.word	0x0800ed83

0800dfdc <_calloc_r>:
 800dfdc:	b570      	push	{r4, r5, r6, lr}
 800dfde:	fba1 5402 	umull	r5, r4, r1, r2
 800dfe2:	b934      	cbnz	r4, 800dff2 <_calloc_r+0x16>
 800dfe4:	4629      	mov	r1, r5
 800dfe6:	f7fd fd0f 	bl	800ba08 <_malloc_r>
 800dfea:	4606      	mov	r6, r0
 800dfec:	b928      	cbnz	r0, 800dffa <_calloc_r+0x1e>
 800dfee:	4630      	mov	r0, r6
 800dff0:	bd70      	pop	{r4, r5, r6, pc}
 800dff2:	220c      	movs	r2, #12
 800dff4:	6002      	str	r2, [r0, #0]
 800dff6:	2600      	movs	r6, #0
 800dff8:	e7f9      	b.n	800dfee <_calloc_r+0x12>
 800dffa:	462a      	mov	r2, r5
 800dffc:	4621      	mov	r1, r4
 800dffe:	f7fc fd59 	bl	800aab4 <memset>
 800e002:	e7f4      	b.n	800dfee <_calloc_r+0x12>

0800e004 <rshift>:
 800e004:	6903      	ldr	r3, [r0, #16]
 800e006:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e00a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e00e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e012:	f100 0414 	add.w	r4, r0, #20
 800e016:	dd45      	ble.n	800e0a4 <rshift+0xa0>
 800e018:	f011 011f 	ands.w	r1, r1, #31
 800e01c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e020:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e024:	d10c      	bne.n	800e040 <rshift+0x3c>
 800e026:	f100 0710 	add.w	r7, r0, #16
 800e02a:	4629      	mov	r1, r5
 800e02c:	42b1      	cmp	r1, r6
 800e02e:	d334      	bcc.n	800e09a <rshift+0x96>
 800e030:	1a9b      	subs	r3, r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	1eea      	subs	r2, r5, #3
 800e036:	4296      	cmp	r6, r2
 800e038:	bf38      	it	cc
 800e03a:	2300      	movcc	r3, #0
 800e03c:	4423      	add	r3, r4
 800e03e:	e015      	b.n	800e06c <rshift+0x68>
 800e040:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e044:	f1c1 0820 	rsb	r8, r1, #32
 800e048:	40cf      	lsrs	r7, r1
 800e04a:	f105 0e04 	add.w	lr, r5, #4
 800e04e:	46a1      	mov	r9, r4
 800e050:	4576      	cmp	r6, lr
 800e052:	46f4      	mov	ip, lr
 800e054:	d815      	bhi.n	800e082 <rshift+0x7e>
 800e056:	1a9a      	subs	r2, r3, r2
 800e058:	0092      	lsls	r2, r2, #2
 800e05a:	3a04      	subs	r2, #4
 800e05c:	3501      	adds	r5, #1
 800e05e:	42ae      	cmp	r6, r5
 800e060:	bf38      	it	cc
 800e062:	2200      	movcc	r2, #0
 800e064:	18a3      	adds	r3, r4, r2
 800e066:	50a7      	str	r7, [r4, r2]
 800e068:	b107      	cbz	r7, 800e06c <rshift+0x68>
 800e06a:	3304      	adds	r3, #4
 800e06c:	1b1a      	subs	r2, r3, r4
 800e06e:	42a3      	cmp	r3, r4
 800e070:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e074:	bf08      	it	eq
 800e076:	2300      	moveq	r3, #0
 800e078:	6102      	str	r2, [r0, #16]
 800e07a:	bf08      	it	eq
 800e07c:	6143      	streq	r3, [r0, #20]
 800e07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e082:	f8dc c000 	ldr.w	ip, [ip]
 800e086:	fa0c fc08 	lsl.w	ip, ip, r8
 800e08a:	ea4c 0707 	orr.w	r7, ip, r7
 800e08e:	f849 7b04 	str.w	r7, [r9], #4
 800e092:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e096:	40cf      	lsrs	r7, r1
 800e098:	e7da      	b.n	800e050 <rshift+0x4c>
 800e09a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e09e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e0a2:	e7c3      	b.n	800e02c <rshift+0x28>
 800e0a4:	4623      	mov	r3, r4
 800e0a6:	e7e1      	b.n	800e06c <rshift+0x68>

0800e0a8 <__hexdig_fun>:
 800e0a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e0ac:	2b09      	cmp	r3, #9
 800e0ae:	d802      	bhi.n	800e0b6 <__hexdig_fun+0xe>
 800e0b0:	3820      	subs	r0, #32
 800e0b2:	b2c0      	uxtb	r0, r0
 800e0b4:	4770      	bx	lr
 800e0b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e0ba:	2b05      	cmp	r3, #5
 800e0bc:	d801      	bhi.n	800e0c2 <__hexdig_fun+0x1a>
 800e0be:	3847      	subs	r0, #71	@ 0x47
 800e0c0:	e7f7      	b.n	800e0b2 <__hexdig_fun+0xa>
 800e0c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e0c6:	2b05      	cmp	r3, #5
 800e0c8:	d801      	bhi.n	800e0ce <__hexdig_fun+0x26>
 800e0ca:	3827      	subs	r0, #39	@ 0x27
 800e0cc:	e7f1      	b.n	800e0b2 <__hexdig_fun+0xa>
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	4770      	bx	lr
	...

0800e0d4 <__gethex>:
 800e0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d8:	b085      	sub	sp, #20
 800e0da:	468a      	mov	sl, r1
 800e0dc:	9302      	str	r3, [sp, #8]
 800e0de:	680b      	ldr	r3, [r1, #0]
 800e0e0:	9001      	str	r0, [sp, #4]
 800e0e2:	4690      	mov	r8, r2
 800e0e4:	1c9c      	adds	r4, r3, #2
 800e0e6:	46a1      	mov	r9, r4
 800e0e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e0ec:	2830      	cmp	r0, #48	@ 0x30
 800e0ee:	d0fa      	beq.n	800e0e6 <__gethex+0x12>
 800e0f0:	eba9 0303 	sub.w	r3, r9, r3
 800e0f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e0f8:	f7ff ffd6 	bl	800e0a8 <__hexdig_fun>
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d168      	bne.n	800e1d4 <__gethex+0x100>
 800e102:	49a0      	ldr	r1, [pc, #640]	@ (800e384 <__gethex+0x2b0>)
 800e104:	2201      	movs	r2, #1
 800e106:	4648      	mov	r0, r9
 800e108:	f7fc fce9 	bl	800aade <strncmp>
 800e10c:	4607      	mov	r7, r0
 800e10e:	2800      	cmp	r0, #0
 800e110:	d167      	bne.n	800e1e2 <__gethex+0x10e>
 800e112:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e116:	4626      	mov	r6, r4
 800e118:	f7ff ffc6 	bl	800e0a8 <__hexdig_fun>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	d062      	beq.n	800e1e6 <__gethex+0x112>
 800e120:	4623      	mov	r3, r4
 800e122:	7818      	ldrb	r0, [r3, #0]
 800e124:	2830      	cmp	r0, #48	@ 0x30
 800e126:	4699      	mov	r9, r3
 800e128:	f103 0301 	add.w	r3, r3, #1
 800e12c:	d0f9      	beq.n	800e122 <__gethex+0x4e>
 800e12e:	f7ff ffbb 	bl	800e0a8 <__hexdig_fun>
 800e132:	fab0 f580 	clz	r5, r0
 800e136:	096d      	lsrs	r5, r5, #5
 800e138:	f04f 0b01 	mov.w	fp, #1
 800e13c:	464a      	mov	r2, r9
 800e13e:	4616      	mov	r6, r2
 800e140:	3201      	adds	r2, #1
 800e142:	7830      	ldrb	r0, [r6, #0]
 800e144:	f7ff ffb0 	bl	800e0a8 <__hexdig_fun>
 800e148:	2800      	cmp	r0, #0
 800e14a:	d1f8      	bne.n	800e13e <__gethex+0x6a>
 800e14c:	498d      	ldr	r1, [pc, #564]	@ (800e384 <__gethex+0x2b0>)
 800e14e:	2201      	movs	r2, #1
 800e150:	4630      	mov	r0, r6
 800e152:	f7fc fcc4 	bl	800aade <strncmp>
 800e156:	2800      	cmp	r0, #0
 800e158:	d13f      	bne.n	800e1da <__gethex+0x106>
 800e15a:	b944      	cbnz	r4, 800e16e <__gethex+0x9a>
 800e15c:	1c74      	adds	r4, r6, #1
 800e15e:	4622      	mov	r2, r4
 800e160:	4616      	mov	r6, r2
 800e162:	3201      	adds	r2, #1
 800e164:	7830      	ldrb	r0, [r6, #0]
 800e166:	f7ff ff9f 	bl	800e0a8 <__hexdig_fun>
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d1f8      	bne.n	800e160 <__gethex+0x8c>
 800e16e:	1ba4      	subs	r4, r4, r6
 800e170:	00a7      	lsls	r7, r4, #2
 800e172:	7833      	ldrb	r3, [r6, #0]
 800e174:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e178:	2b50      	cmp	r3, #80	@ 0x50
 800e17a:	d13e      	bne.n	800e1fa <__gethex+0x126>
 800e17c:	7873      	ldrb	r3, [r6, #1]
 800e17e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e180:	d033      	beq.n	800e1ea <__gethex+0x116>
 800e182:	2b2d      	cmp	r3, #45	@ 0x2d
 800e184:	d034      	beq.n	800e1f0 <__gethex+0x11c>
 800e186:	1c71      	adds	r1, r6, #1
 800e188:	2400      	movs	r4, #0
 800e18a:	7808      	ldrb	r0, [r1, #0]
 800e18c:	f7ff ff8c 	bl	800e0a8 <__hexdig_fun>
 800e190:	1e43      	subs	r3, r0, #1
 800e192:	b2db      	uxtb	r3, r3
 800e194:	2b18      	cmp	r3, #24
 800e196:	d830      	bhi.n	800e1fa <__gethex+0x126>
 800e198:	f1a0 0210 	sub.w	r2, r0, #16
 800e19c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e1a0:	f7ff ff82 	bl	800e0a8 <__hexdig_fun>
 800e1a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800e1a8:	fa5f fc8c 	uxtb.w	ip, ip
 800e1ac:	f1bc 0f18 	cmp.w	ip, #24
 800e1b0:	f04f 030a 	mov.w	r3, #10
 800e1b4:	d91e      	bls.n	800e1f4 <__gethex+0x120>
 800e1b6:	b104      	cbz	r4, 800e1ba <__gethex+0xe6>
 800e1b8:	4252      	negs	r2, r2
 800e1ba:	4417      	add	r7, r2
 800e1bc:	f8ca 1000 	str.w	r1, [sl]
 800e1c0:	b1ed      	cbz	r5, 800e1fe <__gethex+0x12a>
 800e1c2:	f1bb 0f00 	cmp.w	fp, #0
 800e1c6:	bf0c      	ite	eq
 800e1c8:	2506      	moveq	r5, #6
 800e1ca:	2500      	movne	r5, #0
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	b005      	add	sp, #20
 800e1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d4:	2500      	movs	r5, #0
 800e1d6:	462c      	mov	r4, r5
 800e1d8:	e7b0      	b.n	800e13c <__gethex+0x68>
 800e1da:	2c00      	cmp	r4, #0
 800e1dc:	d1c7      	bne.n	800e16e <__gethex+0x9a>
 800e1de:	4627      	mov	r7, r4
 800e1e0:	e7c7      	b.n	800e172 <__gethex+0x9e>
 800e1e2:	464e      	mov	r6, r9
 800e1e4:	462f      	mov	r7, r5
 800e1e6:	2501      	movs	r5, #1
 800e1e8:	e7c3      	b.n	800e172 <__gethex+0x9e>
 800e1ea:	2400      	movs	r4, #0
 800e1ec:	1cb1      	adds	r1, r6, #2
 800e1ee:	e7cc      	b.n	800e18a <__gethex+0xb6>
 800e1f0:	2401      	movs	r4, #1
 800e1f2:	e7fb      	b.n	800e1ec <__gethex+0x118>
 800e1f4:	fb03 0002 	mla	r0, r3, r2, r0
 800e1f8:	e7ce      	b.n	800e198 <__gethex+0xc4>
 800e1fa:	4631      	mov	r1, r6
 800e1fc:	e7de      	b.n	800e1bc <__gethex+0xe8>
 800e1fe:	eba6 0309 	sub.w	r3, r6, r9
 800e202:	3b01      	subs	r3, #1
 800e204:	4629      	mov	r1, r5
 800e206:	2b07      	cmp	r3, #7
 800e208:	dc0a      	bgt.n	800e220 <__gethex+0x14c>
 800e20a:	9801      	ldr	r0, [sp, #4]
 800e20c:	f7fd fc88 	bl	800bb20 <_Balloc>
 800e210:	4604      	mov	r4, r0
 800e212:	b940      	cbnz	r0, 800e226 <__gethex+0x152>
 800e214:	4b5c      	ldr	r3, [pc, #368]	@ (800e388 <__gethex+0x2b4>)
 800e216:	4602      	mov	r2, r0
 800e218:	21e4      	movs	r1, #228	@ 0xe4
 800e21a:	485c      	ldr	r0, [pc, #368]	@ (800e38c <__gethex+0x2b8>)
 800e21c:	f7ff fec0 	bl	800dfa0 <__assert_func>
 800e220:	3101      	adds	r1, #1
 800e222:	105b      	asrs	r3, r3, #1
 800e224:	e7ef      	b.n	800e206 <__gethex+0x132>
 800e226:	f100 0a14 	add.w	sl, r0, #20
 800e22a:	2300      	movs	r3, #0
 800e22c:	4655      	mov	r5, sl
 800e22e:	469b      	mov	fp, r3
 800e230:	45b1      	cmp	r9, r6
 800e232:	d337      	bcc.n	800e2a4 <__gethex+0x1d0>
 800e234:	f845 bb04 	str.w	fp, [r5], #4
 800e238:	eba5 050a 	sub.w	r5, r5, sl
 800e23c:	10ad      	asrs	r5, r5, #2
 800e23e:	6125      	str	r5, [r4, #16]
 800e240:	4658      	mov	r0, fp
 800e242:	f7fd fd5f 	bl	800bd04 <__hi0bits>
 800e246:	016d      	lsls	r5, r5, #5
 800e248:	f8d8 6000 	ldr.w	r6, [r8]
 800e24c:	1a2d      	subs	r5, r5, r0
 800e24e:	42b5      	cmp	r5, r6
 800e250:	dd54      	ble.n	800e2fc <__gethex+0x228>
 800e252:	1bad      	subs	r5, r5, r6
 800e254:	4629      	mov	r1, r5
 800e256:	4620      	mov	r0, r4
 800e258:	f7fe f8eb 	bl	800c432 <__any_on>
 800e25c:	4681      	mov	r9, r0
 800e25e:	b178      	cbz	r0, 800e280 <__gethex+0x1ac>
 800e260:	1e6b      	subs	r3, r5, #1
 800e262:	1159      	asrs	r1, r3, #5
 800e264:	f003 021f 	and.w	r2, r3, #31
 800e268:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e26c:	f04f 0901 	mov.w	r9, #1
 800e270:	fa09 f202 	lsl.w	r2, r9, r2
 800e274:	420a      	tst	r2, r1
 800e276:	d003      	beq.n	800e280 <__gethex+0x1ac>
 800e278:	454b      	cmp	r3, r9
 800e27a:	dc36      	bgt.n	800e2ea <__gethex+0x216>
 800e27c:	f04f 0902 	mov.w	r9, #2
 800e280:	4629      	mov	r1, r5
 800e282:	4620      	mov	r0, r4
 800e284:	f7ff febe 	bl	800e004 <rshift>
 800e288:	442f      	add	r7, r5
 800e28a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e28e:	42bb      	cmp	r3, r7
 800e290:	da42      	bge.n	800e318 <__gethex+0x244>
 800e292:	9801      	ldr	r0, [sp, #4]
 800e294:	4621      	mov	r1, r4
 800e296:	f7fd fc83 	bl	800bba0 <_Bfree>
 800e29a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e29c:	2300      	movs	r3, #0
 800e29e:	6013      	str	r3, [r2, #0]
 800e2a0:	25a3      	movs	r5, #163	@ 0xa3
 800e2a2:	e793      	b.n	800e1cc <__gethex+0xf8>
 800e2a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e2a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800e2aa:	d012      	beq.n	800e2d2 <__gethex+0x1fe>
 800e2ac:	2b20      	cmp	r3, #32
 800e2ae:	d104      	bne.n	800e2ba <__gethex+0x1e6>
 800e2b0:	f845 bb04 	str.w	fp, [r5], #4
 800e2b4:	f04f 0b00 	mov.w	fp, #0
 800e2b8:	465b      	mov	r3, fp
 800e2ba:	7830      	ldrb	r0, [r6, #0]
 800e2bc:	9303      	str	r3, [sp, #12]
 800e2be:	f7ff fef3 	bl	800e0a8 <__hexdig_fun>
 800e2c2:	9b03      	ldr	r3, [sp, #12]
 800e2c4:	f000 000f 	and.w	r0, r0, #15
 800e2c8:	4098      	lsls	r0, r3
 800e2ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	e7ae      	b.n	800e230 <__gethex+0x15c>
 800e2d2:	45b1      	cmp	r9, r6
 800e2d4:	d8ea      	bhi.n	800e2ac <__gethex+0x1d8>
 800e2d6:	492b      	ldr	r1, [pc, #172]	@ (800e384 <__gethex+0x2b0>)
 800e2d8:	9303      	str	r3, [sp, #12]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	4630      	mov	r0, r6
 800e2de:	f7fc fbfe 	bl	800aade <strncmp>
 800e2e2:	9b03      	ldr	r3, [sp, #12]
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d1e1      	bne.n	800e2ac <__gethex+0x1d8>
 800e2e8:	e7a2      	b.n	800e230 <__gethex+0x15c>
 800e2ea:	1ea9      	subs	r1, r5, #2
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f7fe f8a0 	bl	800c432 <__any_on>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	d0c2      	beq.n	800e27c <__gethex+0x1a8>
 800e2f6:	f04f 0903 	mov.w	r9, #3
 800e2fa:	e7c1      	b.n	800e280 <__gethex+0x1ac>
 800e2fc:	da09      	bge.n	800e312 <__gethex+0x23e>
 800e2fe:	1b75      	subs	r5, r6, r5
 800e300:	4621      	mov	r1, r4
 800e302:	9801      	ldr	r0, [sp, #4]
 800e304:	462a      	mov	r2, r5
 800e306:	f7fd fe5b 	bl	800bfc0 <__lshift>
 800e30a:	1b7f      	subs	r7, r7, r5
 800e30c:	4604      	mov	r4, r0
 800e30e:	f100 0a14 	add.w	sl, r0, #20
 800e312:	f04f 0900 	mov.w	r9, #0
 800e316:	e7b8      	b.n	800e28a <__gethex+0x1b6>
 800e318:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e31c:	42bd      	cmp	r5, r7
 800e31e:	dd6f      	ble.n	800e400 <__gethex+0x32c>
 800e320:	1bed      	subs	r5, r5, r7
 800e322:	42ae      	cmp	r6, r5
 800e324:	dc34      	bgt.n	800e390 <__gethex+0x2bc>
 800e326:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e32a:	2b02      	cmp	r3, #2
 800e32c:	d022      	beq.n	800e374 <__gethex+0x2a0>
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d024      	beq.n	800e37c <__gethex+0x2a8>
 800e332:	2b01      	cmp	r3, #1
 800e334:	d115      	bne.n	800e362 <__gethex+0x28e>
 800e336:	42ae      	cmp	r6, r5
 800e338:	d113      	bne.n	800e362 <__gethex+0x28e>
 800e33a:	2e01      	cmp	r6, #1
 800e33c:	d10b      	bne.n	800e356 <__gethex+0x282>
 800e33e:	9a02      	ldr	r2, [sp, #8]
 800e340:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e344:	6013      	str	r3, [r2, #0]
 800e346:	2301      	movs	r3, #1
 800e348:	6123      	str	r3, [r4, #16]
 800e34a:	f8ca 3000 	str.w	r3, [sl]
 800e34e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e350:	2562      	movs	r5, #98	@ 0x62
 800e352:	601c      	str	r4, [r3, #0]
 800e354:	e73a      	b.n	800e1cc <__gethex+0xf8>
 800e356:	1e71      	subs	r1, r6, #1
 800e358:	4620      	mov	r0, r4
 800e35a:	f7fe f86a 	bl	800c432 <__any_on>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d1ed      	bne.n	800e33e <__gethex+0x26a>
 800e362:	9801      	ldr	r0, [sp, #4]
 800e364:	4621      	mov	r1, r4
 800e366:	f7fd fc1b 	bl	800bba0 <_Bfree>
 800e36a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e36c:	2300      	movs	r3, #0
 800e36e:	6013      	str	r3, [r2, #0]
 800e370:	2550      	movs	r5, #80	@ 0x50
 800e372:	e72b      	b.n	800e1cc <__gethex+0xf8>
 800e374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1f3      	bne.n	800e362 <__gethex+0x28e>
 800e37a:	e7e0      	b.n	800e33e <__gethex+0x26a>
 800e37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1dd      	bne.n	800e33e <__gethex+0x26a>
 800e382:	e7ee      	b.n	800e362 <__gethex+0x28e>
 800e384:	0800ed12 	.word	0x0800ed12
 800e388:	0800eca8 	.word	0x0800eca8
 800e38c:	0800ed84 	.word	0x0800ed84
 800e390:	1e6f      	subs	r7, r5, #1
 800e392:	f1b9 0f00 	cmp.w	r9, #0
 800e396:	d130      	bne.n	800e3fa <__gethex+0x326>
 800e398:	b127      	cbz	r7, 800e3a4 <__gethex+0x2d0>
 800e39a:	4639      	mov	r1, r7
 800e39c:	4620      	mov	r0, r4
 800e39e:	f7fe f848 	bl	800c432 <__any_on>
 800e3a2:	4681      	mov	r9, r0
 800e3a4:	117a      	asrs	r2, r7, #5
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e3ac:	f007 071f 	and.w	r7, r7, #31
 800e3b0:	40bb      	lsls	r3, r7
 800e3b2:	4213      	tst	r3, r2
 800e3b4:	4629      	mov	r1, r5
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	bf18      	it	ne
 800e3ba:	f049 0902 	orrne.w	r9, r9, #2
 800e3be:	f7ff fe21 	bl	800e004 <rshift>
 800e3c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e3c6:	1b76      	subs	r6, r6, r5
 800e3c8:	2502      	movs	r5, #2
 800e3ca:	f1b9 0f00 	cmp.w	r9, #0
 800e3ce:	d047      	beq.n	800e460 <__gethex+0x38c>
 800e3d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d015      	beq.n	800e404 <__gethex+0x330>
 800e3d8:	2b03      	cmp	r3, #3
 800e3da:	d017      	beq.n	800e40c <__gethex+0x338>
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d109      	bne.n	800e3f4 <__gethex+0x320>
 800e3e0:	f019 0f02 	tst.w	r9, #2
 800e3e4:	d006      	beq.n	800e3f4 <__gethex+0x320>
 800e3e6:	f8da 3000 	ldr.w	r3, [sl]
 800e3ea:	ea49 0903 	orr.w	r9, r9, r3
 800e3ee:	f019 0f01 	tst.w	r9, #1
 800e3f2:	d10e      	bne.n	800e412 <__gethex+0x33e>
 800e3f4:	f045 0510 	orr.w	r5, r5, #16
 800e3f8:	e032      	b.n	800e460 <__gethex+0x38c>
 800e3fa:	f04f 0901 	mov.w	r9, #1
 800e3fe:	e7d1      	b.n	800e3a4 <__gethex+0x2d0>
 800e400:	2501      	movs	r5, #1
 800e402:	e7e2      	b.n	800e3ca <__gethex+0x2f6>
 800e404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e406:	f1c3 0301 	rsb	r3, r3, #1
 800e40a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0f0      	beq.n	800e3f4 <__gethex+0x320>
 800e412:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e416:	f104 0314 	add.w	r3, r4, #20
 800e41a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e41e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e422:	f04f 0c00 	mov.w	ip, #0
 800e426:	4618      	mov	r0, r3
 800e428:	f853 2b04 	ldr.w	r2, [r3], #4
 800e42c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e430:	d01b      	beq.n	800e46a <__gethex+0x396>
 800e432:	3201      	adds	r2, #1
 800e434:	6002      	str	r2, [r0, #0]
 800e436:	2d02      	cmp	r5, #2
 800e438:	f104 0314 	add.w	r3, r4, #20
 800e43c:	d13c      	bne.n	800e4b8 <__gethex+0x3e4>
 800e43e:	f8d8 2000 	ldr.w	r2, [r8]
 800e442:	3a01      	subs	r2, #1
 800e444:	42b2      	cmp	r2, r6
 800e446:	d109      	bne.n	800e45c <__gethex+0x388>
 800e448:	1171      	asrs	r1, r6, #5
 800e44a:	2201      	movs	r2, #1
 800e44c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e450:	f006 061f 	and.w	r6, r6, #31
 800e454:	fa02 f606 	lsl.w	r6, r2, r6
 800e458:	421e      	tst	r6, r3
 800e45a:	d13a      	bne.n	800e4d2 <__gethex+0x3fe>
 800e45c:	f045 0520 	orr.w	r5, r5, #32
 800e460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e462:	601c      	str	r4, [r3, #0]
 800e464:	9b02      	ldr	r3, [sp, #8]
 800e466:	601f      	str	r7, [r3, #0]
 800e468:	e6b0      	b.n	800e1cc <__gethex+0xf8>
 800e46a:	4299      	cmp	r1, r3
 800e46c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e470:	d8d9      	bhi.n	800e426 <__gethex+0x352>
 800e472:	68a3      	ldr	r3, [r4, #8]
 800e474:	459b      	cmp	fp, r3
 800e476:	db17      	blt.n	800e4a8 <__gethex+0x3d4>
 800e478:	6861      	ldr	r1, [r4, #4]
 800e47a:	9801      	ldr	r0, [sp, #4]
 800e47c:	3101      	adds	r1, #1
 800e47e:	f7fd fb4f 	bl	800bb20 <_Balloc>
 800e482:	4681      	mov	r9, r0
 800e484:	b918      	cbnz	r0, 800e48e <__gethex+0x3ba>
 800e486:	4b1a      	ldr	r3, [pc, #104]	@ (800e4f0 <__gethex+0x41c>)
 800e488:	4602      	mov	r2, r0
 800e48a:	2184      	movs	r1, #132	@ 0x84
 800e48c:	e6c5      	b.n	800e21a <__gethex+0x146>
 800e48e:	6922      	ldr	r2, [r4, #16]
 800e490:	3202      	adds	r2, #2
 800e492:	f104 010c 	add.w	r1, r4, #12
 800e496:	0092      	lsls	r2, r2, #2
 800e498:	300c      	adds	r0, #12
 800e49a:	f7fc fbd2 	bl	800ac42 <memcpy>
 800e49e:	4621      	mov	r1, r4
 800e4a0:	9801      	ldr	r0, [sp, #4]
 800e4a2:	f7fd fb7d 	bl	800bba0 <_Bfree>
 800e4a6:	464c      	mov	r4, r9
 800e4a8:	6923      	ldr	r3, [r4, #16]
 800e4aa:	1c5a      	adds	r2, r3, #1
 800e4ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4b0:	6122      	str	r2, [r4, #16]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	615a      	str	r2, [r3, #20]
 800e4b6:	e7be      	b.n	800e436 <__gethex+0x362>
 800e4b8:	6922      	ldr	r2, [r4, #16]
 800e4ba:	455a      	cmp	r2, fp
 800e4bc:	dd0b      	ble.n	800e4d6 <__gethex+0x402>
 800e4be:	2101      	movs	r1, #1
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	f7ff fd9f 	bl	800e004 <rshift>
 800e4c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4ca:	3701      	adds	r7, #1
 800e4cc:	42bb      	cmp	r3, r7
 800e4ce:	f6ff aee0 	blt.w	800e292 <__gethex+0x1be>
 800e4d2:	2501      	movs	r5, #1
 800e4d4:	e7c2      	b.n	800e45c <__gethex+0x388>
 800e4d6:	f016 061f 	ands.w	r6, r6, #31
 800e4da:	d0fa      	beq.n	800e4d2 <__gethex+0x3fe>
 800e4dc:	4453      	add	r3, sl
 800e4de:	f1c6 0620 	rsb	r6, r6, #32
 800e4e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e4e6:	f7fd fc0d 	bl	800bd04 <__hi0bits>
 800e4ea:	42b0      	cmp	r0, r6
 800e4ec:	dbe7      	blt.n	800e4be <__gethex+0x3ea>
 800e4ee:	e7f0      	b.n	800e4d2 <__gethex+0x3fe>
 800e4f0:	0800eca8 	.word	0x0800eca8

0800e4f4 <L_shift>:
 800e4f4:	f1c2 0208 	rsb	r2, r2, #8
 800e4f8:	0092      	lsls	r2, r2, #2
 800e4fa:	b570      	push	{r4, r5, r6, lr}
 800e4fc:	f1c2 0620 	rsb	r6, r2, #32
 800e500:	6843      	ldr	r3, [r0, #4]
 800e502:	6804      	ldr	r4, [r0, #0]
 800e504:	fa03 f506 	lsl.w	r5, r3, r6
 800e508:	432c      	orrs	r4, r5
 800e50a:	40d3      	lsrs	r3, r2
 800e50c:	6004      	str	r4, [r0, #0]
 800e50e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e512:	4288      	cmp	r0, r1
 800e514:	d3f4      	bcc.n	800e500 <L_shift+0xc>
 800e516:	bd70      	pop	{r4, r5, r6, pc}

0800e518 <__match>:
 800e518:	b530      	push	{r4, r5, lr}
 800e51a:	6803      	ldr	r3, [r0, #0]
 800e51c:	3301      	adds	r3, #1
 800e51e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e522:	b914      	cbnz	r4, 800e52a <__match+0x12>
 800e524:	6003      	str	r3, [r0, #0]
 800e526:	2001      	movs	r0, #1
 800e528:	bd30      	pop	{r4, r5, pc}
 800e52a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e52e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e532:	2d19      	cmp	r5, #25
 800e534:	bf98      	it	ls
 800e536:	3220      	addls	r2, #32
 800e538:	42a2      	cmp	r2, r4
 800e53a:	d0f0      	beq.n	800e51e <__match+0x6>
 800e53c:	2000      	movs	r0, #0
 800e53e:	e7f3      	b.n	800e528 <__match+0x10>

0800e540 <__hexnan>:
 800e540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e544:	680b      	ldr	r3, [r1, #0]
 800e546:	6801      	ldr	r1, [r0, #0]
 800e548:	115e      	asrs	r6, r3, #5
 800e54a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e54e:	f013 031f 	ands.w	r3, r3, #31
 800e552:	b087      	sub	sp, #28
 800e554:	bf18      	it	ne
 800e556:	3604      	addne	r6, #4
 800e558:	2500      	movs	r5, #0
 800e55a:	1f37      	subs	r7, r6, #4
 800e55c:	4682      	mov	sl, r0
 800e55e:	4690      	mov	r8, r2
 800e560:	9301      	str	r3, [sp, #4]
 800e562:	f846 5c04 	str.w	r5, [r6, #-4]
 800e566:	46b9      	mov	r9, r7
 800e568:	463c      	mov	r4, r7
 800e56a:	9502      	str	r5, [sp, #8]
 800e56c:	46ab      	mov	fp, r5
 800e56e:	784a      	ldrb	r2, [r1, #1]
 800e570:	1c4b      	adds	r3, r1, #1
 800e572:	9303      	str	r3, [sp, #12]
 800e574:	b342      	cbz	r2, 800e5c8 <__hexnan+0x88>
 800e576:	4610      	mov	r0, r2
 800e578:	9105      	str	r1, [sp, #20]
 800e57a:	9204      	str	r2, [sp, #16]
 800e57c:	f7ff fd94 	bl	800e0a8 <__hexdig_fun>
 800e580:	2800      	cmp	r0, #0
 800e582:	d151      	bne.n	800e628 <__hexnan+0xe8>
 800e584:	9a04      	ldr	r2, [sp, #16]
 800e586:	9905      	ldr	r1, [sp, #20]
 800e588:	2a20      	cmp	r2, #32
 800e58a:	d818      	bhi.n	800e5be <__hexnan+0x7e>
 800e58c:	9b02      	ldr	r3, [sp, #8]
 800e58e:	459b      	cmp	fp, r3
 800e590:	dd13      	ble.n	800e5ba <__hexnan+0x7a>
 800e592:	454c      	cmp	r4, r9
 800e594:	d206      	bcs.n	800e5a4 <__hexnan+0x64>
 800e596:	2d07      	cmp	r5, #7
 800e598:	dc04      	bgt.n	800e5a4 <__hexnan+0x64>
 800e59a:	462a      	mov	r2, r5
 800e59c:	4649      	mov	r1, r9
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f7ff ffa8 	bl	800e4f4 <L_shift>
 800e5a4:	4544      	cmp	r4, r8
 800e5a6:	d952      	bls.n	800e64e <__hexnan+0x10e>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	f1a4 0904 	sub.w	r9, r4, #4
 800e5ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5b2:	f8cd b008 	str.w	fp, [sp, #8]
 800e5b6:	464c      	mov	r4, r9
 800e5b8:	461d      	mov	r5, r3
 800e5ba:	9903      	ldr	r1, [sp, #12]
 800e5bc:	e7d7      	b.n	800e56e <__hexnan+0x2e>
 800e5be:	2a29      	cmp	r2, #41	@ 0x29
 800e5c0:	d157      	bne.n	800e672 <__hexnan+0x132>
 800e5c2:	3102      	adds	r1, #2
 800e5c4:	f8ca 1000 	str.w	r1, [sl]
 800e5c8:	f1bb 0f00 	cmp.w	fp, #0
 800e5cc:	d051      	beq.n	800e672 <__hexnan+0x132>
 800e5ce:	454c      	cmp	r4, r9
 800e5d0:	d206      	bcs.n	800e5e0 <__hexnan+0xa0>
 800e5d2:	2d07      	cmp	r5, #7
 800e5d4:	dc04      	bgt.n	800e5e0 <__hexnan+0xa0>
 800e5d6:	462a      	mov	r2, r5
 800e5d8:	4649      	mov	r1, r9
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f7ff ff8a 	bl	800e4f4 <L_shift>
 800e5e0:	4544      	cmp	r4, r8
 800e5e2:	d936      	bls.n	800e652 <__hexnan+0x112>
 800e5e4:	f1a8 0204 	sub.w	r2, r8, #4
 800e5e8:	4623      	mov	r3, r4
 800e5ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800e5ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800e5f2:	429f      	cmp	r7, r3
 800e5f4:	d2f9      	bcs.n	800e5ea <__hexnan+0xaa>
 800e5f6:	1b3b      	subs	r3, r7, r4
 800e5f8:	f023 0303 	bic.w	r3, r3, #3
 800e5fc:	3304      	adds	r3, #4
 800e5fe:	3401      	adds	r4, #1
 800e600:	3e03      	subs	r6, #3
 800e602:	42b4      	cmp	r4, r6
 800e604:	bf88      	it	hi
 800e606:	2304      	movhi	r3, #4
 800e608:	4443      	add	r3, r8
 800e60a:	2200      	movs	r2, #0
 800e60c:	f843 2b04 	str.w	r2, [r3], #4
 800e610:	429f      	cmp	r7, r3
 800e612:	d2fb      	bcs.n	800e60c <__hexnan+0xcc>
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	b91b      	cbnz	r3, 800e620 <__hexnan+0xe0>
 800e618:	4547      	cmp	r7, r8
 800e61a:	d128      	bne.n	800e66e <__hexnan+0x12e>
 800e61c:	2301      	movs	r3, #1
 800e61e:	603b      	str	r3, [r7, #0]
 800e620:	2005      	movs	r0, #5
 800e622:	b007      	add	sp, #28
 800e624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e628:	3501      	adds	r5, #1
 800e62a:	2d08      	cmp	r5, #8
 800e62c:	f10b 0b01 	add.w	fp, fp, #1
 800e630:	dd06      	ble.n	800e640 <__hexnan+0x100>
 800e632:	4544      	cmp	r4, r8
 800e634:	d9c1      	bls.n	800e5ba <__hexnan+0x7a>
 800e636:	2300      	movs	r3, #0
 800e638:	f844 3c04 	str.w	r3, [r4, #-4]
 800e63c:	2501      	movs	r5, #1
 800e63e:	3c04      	subs	r4, #4
 800e640:	6822      	ldr	r2, [r4, #0]
 800e642:	f000 000f 	and.w	r0, r0, #15
 800e646:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e64a:	6020      	str	r0, [r4, #0]
 800e64c:	e7b5      	b.n	800e5ba <__hexnan+0x7a>
 800e64e:	2508      	movs	r5, #8
 800e650:	e7b3      	b.n	800e5ba <__hexnan+0x7a>
 800e652:	9b01      	ldr	r3, [sp, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d0dd      	beq.n	800e614 <__hexnan+0xd4>
 800e658:	f1c3 0320 	rsb	r3, r3, #32
 800e65c:	f04f 32ff 	mov.w	r2, #4294967295
 800e660:	40da      	lsrs	r2, r3
 800e662:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e666:	4013      	ands	r3, r2
 800e668:	f846 3c04 	str.w	r3, [r6, #-4]
 800e66c:	e7d2      	b.n	800e614 <__hexnan+0xd4>
 800e66e:	3f04      	subs	r7, #4
 800e670:	e7d0      	b.n	800e614 <__hexnan+0xd4>
 800e672:	2004      	movs	r0, #4
 800e674:	e7d5      	b.n	800e622 <__hexnan+0xe2>

0800e676 <__ascii_mbtowc>:
 800e676:	b082      	sub	sp, #8
 800e678:	b901      	cbnz	r1, 800e67c <__ascii_mbtowc+0x6>
 800e67a:	a901      	add	r1, sp, #4
 800e67c:	b142      	cbz	r2, 800e690 <__ascii_mbtowc+0x1a>
 800e67e:	b14b      	cbz	r3, 800e694 <__ascii_mbtowc+0x1e>
 800e680:	7813      	ldrb	r3, [r2, #0]
 800e682:	600b      	str	r3, [r1, #0]
 800e684:	7812      	ldrb	r2, [r2, #0]
 800e686:	1e10      	subs	r0, r2, #0
 800e688:	bf18      	it	ne
 800e68a:	2001      	movne	r0, #1
 800e68c:	b002      	add	sp, #8
 800e68e:	4770      	bx	lr
 800e690:	4610      	mov	r0, r2
 800e692:	e7fb      	b.n	800e68c <__ascii_mbtowc+0x16>
 800e694:	f06f 0001 	mvn.w	r0, #1
 800e698:	e7f8      	b.n	800e68c <__ascii_mbtowc+0x16>

0800e69a <_realloc_r>:
 800e69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e69e:	4607      	mov	r7, r0
 800e6a0:	4614      	mov	r4, r2
 800e6a2:	460d      	mov	r5, r1
 800e6a4:	b921      	cbnz	r1, 800e6b0 <_realloc_r+0x16>
 800e6a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	f7fd b9ac 	b.w	800ba08 <_malloc_r>
 800e6b0:	b92a      	cbnz	r2, 800e6be <_realloc_r+0x24>
 800e6b2:	f7fd f935 	bl	800b920 <_free_r>
 800e6b6:	4625      	mov	r5, r4
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6be:	f000 f8b2 	bl	800e826 <_malloc_usable_size_r>
 800e6c2:	4284      	cmp	r4, r0
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	d802      	bhi.n	800e6ce <_realloc_r+0x34>
 800e6c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e6cc:	d8f4      	bhi.n	800e6b8 <_realloc_r+0x1e>
 800e6ce:	4621      	mov	r1, r4
 800e6d0:	4638      	mov	r0, r7
 800e6d2:	f7fd f999 	bl	800ba08 <_malloc_r>
 800e6d6:	4680      	mov	r8, r0
 800e6d8:	b908      	cbnz	r0, 800e6de <_realloc_r+0x44>
 800e6da:	4645      	mov	r5, r8
 800e6dc:	e7ec      	b.n	800e6b8 <_realloc_r+0x1e>
 800e6de:	42b4      	cmp	r4, r6
 800e6e0:	4622      	mov	r2, r4
 800e6e2:	4629      	mov	r1, r5
 800e6e4:	bf28      	it	cs
 800e6e6:	4632      	movcs	r2, r6
 800e6e8:	f7fc faab 	bl	800ac42 <memcpy>
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	4638      	mov	r0, r7
 800e6f0:	f7fd f916 	bl	800b920 <_free_r>
 800e6f4:	e7f1      	b.n	800e6da <_realloc_r+0x40>
	...

0800e6f8 <_strtoul_l.isra.0>:
 800e6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6fc:	4e34      	ldr	r6, [pc, #208]	@ (800e7d0 <_strtoul_l.isra.0+0xd8>)
 800e6fe:	4686      	mov	lr, r0
 800e700:	460d      	mov	r5, r1
 800e702:	4628      	mov	r0, r5
 800e704:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e708:	5d37      	ldrb	r7, [r6, r4]
 800e70a:	f017 0708 	ands.w	r7, r7, #8
 800e70e:	d1f8      	bne.n	800e702 <_strtoul_l.isra.0+0xa>
 800e710:	2c2d      	cmp	r4, #45	@ 0x2d
 800e712:	d110      	bne.n	800e736 <_strtoul_l.isra.0+0x3e>
 800e714:	782c      	ldrb	r4, [r5, #0]
 800e716:	2701      	movs	r7, #1
 800e718:	1c85      	adds	r5, r0, #2
 800e71a:	f033 0010 	bics.w	r0, r3, #16
 800e71e:	d115      	bne.n	800e74c <_strtoul_l.isra.0+0x54>
 800e720:	2c30      	cmp	r4, #48	@ 0x30
 800e722:	d10d      	bne.n	800e740 <_strtoul_l.isra.0+0x48>
 800e724:	7828      	ldrb	r0, [r5, #0]
 800e726:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e72a:	2858      	cmp	r0, #88	@ 0x58
 800e72c:	d108      	bne.n	800e740 <_strtoul_l.isra.0+0x48>
 800e72e:	786c      	ldrb	r4, [r5, #1]
 800e730:	3502      	adds	r5, #2
 800e732:	2310      	movs	r3, #16
 800e734:	e00a      	b.n	800e74c <_strtoul_l.isra.0+0x54>
 800e736:	2c2b      	cmp	r4, #43	@ 0x2b
 800e738:	bf04      	itt	eq
 800e73a:	782c      	ldrbeq	r4, [r5, #0]
 800e73c:	1c85      	addeq	r5, r0, #2
 800e73e:	e7ec      	b.n	800e71a <_strtoul_l.isra.0+0x22>
 800e740:	2b00      	cmp	r3, #0
 800e742:	d1f6      	bne.n	800e732 <_strtoul_l.isra.0+0x3a>
 800e744:	2c30      	cmp	r4, #48	@ 0x30
 800e746:	bf14      	ite	ne
 800e748:	230a      	movne	r3, #10
 800e74a:	2308      	moveq	r3, #8
 800e74c:	f04f 38ff 	mov.w	r8, #4294967295
 800e750:	2600      	movs	r6, #0
 800e752:	fbb8 f8f3 	udiv	r8, r8, r3
 800e756:	fb03 f908 	mul.w	r9, r3, r8
 800e75a:	ea6f 0909 	mvn.w	r9, r9
 800e75e:	4630      	mov	r0, r6
 800e760:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e764:	f1bc 0f09 	cmp.w	ip, #9
 800e768:	d810      	bhi.n	800e78c <_strtoul_l.isra.0+0x94>
 800e76a:	4664      	mov	r4, ip
 800e76c:	42a3      	cmp	r3, r4
 800e76e:	dd1e      	ble.n	800e7ae <_strtoul_l.isra.0+0xb6>
 800e770:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e774:	d007      	beq.n	800e786 <_strtoul_l.isra.0+0x8e>
 800e776:	4580      	cmp	r8, r0
 800e778:	d316      	bcc.n	800e7a8 <_strtoul_l.isra.0+0xb0>
 800e77a:	d101      	bne.n	800e780 <_strtoul_l.isra.0+0x88>
 800e77c:	45a1      	cmp	r9, r4
 800e77e:	db13      	blt.n	800e7a8 <_strtoul_l.isra.0+0xb0>
 800e780:	fb00 4003 	mla	r0, r0, r3, r4
 800e784:	2601      	movs	r6, #1
 800e786:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e78a:	e7e9      	b.n	800e760 <_strtoul_l.isra.0+0x68>
 800e78c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e790:	f1bc 0f19 	cmp.w	ip, #25
 800e794:	d801      	bhi.n	800e79a <_strtoul_l.isra.0+0xa2>
 800e796:	3c37      	subs	r4, #55	@ 0x37
 800e798:	e7e8      	b.n	800e76c <_strtoul_l.isra.0+0x74>
 800e79a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e79e:	f1bc 0f19 	cmp.w	ip, #25
 800e7a2:	d804      	bhi.n	800e7ae <_strtoul_l.isra.0+0xb6>
 800e7a4:	3c57      	subs	r4, #87	@ 0x57
 800e7a6:	e7e1      	b.n	800e76c <_strtoul_l.isra.0+0x74>
 800e7a8:	f04f 36ff 	mov.w	r6, #4294967295
 800e7ac:	e7eb      	b.n	800e786 <_strtoul_l.isra.0+0x8e>
 800e7ae:	1c73      	adds	r3, r6, #1
 800e7b0:	d106      	bne.n	800e7c0 <_strtoul_l.isra.0+0xc8>
 800e7b2:	2322      	movs	r3, #34	@ 0x22
 800e7b4:	f8ce 3000 	str.w	r3, [lr]
 800e7b8:	4630      	mov	r0, r6
 800e7ba:	b932      	cbnz	r2, 800e7ca <_strtoul_l.isra.0+0xd2>
 800e7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7c0:	b107      	cbz	r7, 800e7c4 <_strtoul_l.isra.0+0xcc>
 800e7c2:	4240      	negs	r0, r0
 800e7c4:	2a00      	cmp	r2, #0
 800e7c6:	d0f9      	beq.n	800e7bc <_strtoul_l.isra.0+0xc4>
 800e7c8:	b106      	cbz	r6, 800e7cc <_strtoul_l.isra.0+0xd4>
 800e7ca:	1e69      	subs	r1, r5, #1
 800e7cc:	6011      	str	r1, [r2, #0]
 800e7ce:	e7f5      	b.n	800e7bc <_strtoul_l.isra.0+0xc4>
 800e7d0:	0800eaf5 	.word	0x0800eaf5

0800e7d4 <_strtoul_r>:
 800e7d4:	f7ff bf90 	b.w	800e6f8 <_strtoul_l.isra.0>

0800e7d8 <__ascii_wctomb>:
 800e7d8:	4603      	mov	r3, r0
 800e7da:	4608      	mov	r0, r1
 800e7dc:	b141      	cbz	r1, 800e7f0 <__ascii_wctomb+0x18>
 800e7de:	2aff      	cmp	r2, #255	@ 0xff
 800e7e0:	d904      	bls.n	800e7ec <__ascii_wctomb+0x14>
 800e7e2:	228a      	movs	r2, #138	@ 0x8a
 800e7e4:	601a      	str	r2, [r3, #0]
 800e7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ea:	4770      	bx	lr
 800e7ec:	700a      	strb	r2, [r1, #0]
 800e7ee:	2001      	movs	r0, #1
 800e7f0:	4770      	bx	lr
	...

0800e7f4 <fiprintf>:
 800e7f4:	b40e      	push	{r1, r2, r3}
 800e7f6:	b503      	push	{r0, r1, lr}
 800e7f8:	4601      	mov	r1, r0
 800e7fa:	ab03      	add	r3, sp, #12
 800e7fc:	4805      	ldr	r0, [pc, #20]	@ (800e814 <fiprintf+0x20>)
 800e7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800e802:	6800      	ldr	r0, [r0, #0]
 800e804:	9301      	str	r3, [sp, #4]
 800e806:	f7fe ff8f 	bl	800d728 <_vfiprintf_r>
 800e80a:	b002      	add	sp, #8
 800e80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e810:	b003      	add	sp, #12
 800e812:	4770      	bx	lr
 800e814:	20000108 	.word	0x20000108

0800e818 <abort>:
 800e818:	b508      	push	{r3, lr}
 800e81a:	2006      	movs	r0, #6
 800e81c:	f000 f834 	bl	800e888 <raise>
 800e820:	2001      	movs	r0, #1
 800e822:	f7f3 f977 	bl	8001b14 <_exit>

0800e826 <_malloc_usable_size_r>:
 800e826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e82a:	1f18      	subs	r0, r3, #4
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	bfbc      	itt	lt
 800e830:	580b      	ldrlt	r3, [r1, r0]
 800e832:	18c0      	addlt	r0, r0, r3
 800e834:	4770      	bx	lr

0800e836 <_raise_r>:
 800e836:	291f      	cmp	r1, #31
 800e838:	b538      	push	{r3, r4, r5, lr}
 800e83a:	4605      	mov	r5, r0
 800e83c:	460c      	mov	r4, r1
 800e83e:	d904      	bls.n	800e84a <_raise_r+0x14>
 800e840:	2316      	movs	r3, #22
 800e842:	6003      	str	r3, [r0, #0]
 800e844:	f04f 30ff 	mov.w	r0, #4294967295
 800e848:	bd38      	pop	{r3, r4, r5, pc}
 800e84a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e84c:	b112      	cbz	r2, 800e854 <_raise_r+0x1e>
 800e84e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e852:	b94b      	cbnz	r3, 800e868 <_raise_r+0x32>
 800e854:	4628      	mov	r0, r5
 800e856:	f000 f831 	bl	800e8bc <_getpid_r>
 800e85a:	4622      	mov	r2, r4
 800e85c:	4601      	mov	r1, r0
 800e85e:	4628      	mov	r0, r5
 800e860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e864:	f000 b818 	b.w	800e898 <_kill_r>
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d00a      	beq.n	800e882 <_raise_r+0x4c>
 800e86c:	1c59      	adds	r1, r3, #1
 800e86e:	d103      	bne.n	800e878 <_raise_r+0x42>
 800e870:	2316      	movs	r3, #22
 800e872:	6003      	str	r3, [r0, #0]
 800e874:	2001      	movs	r0, #1
 800e876:	e7e7      	b.n	800e848 <_raise_r+0x12>
 800e878:	2100      	movs	r1, #0
 800e87a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e87e:	4620      	mov	r0, r4
 800e880:	4798      	blx	r3
 800e882:	2000      	movs	r0, #0
 800e884:	e7e0      	b.n	800e848 <_raise_r+0x12>
	...

0800e888 <raise>:
 800e888:	4b02      	ldr	r3, [pc, #8]	@ (800e894 <raise+0xc>)
 800e88a:	4601      	mov	r1, r0
 800e88c:	6818      	ldr	r0, [r3, #0]
 800e88e:	f7ff bfd2 	b.w	800e836 <_raise_r>
 800e892:	bf00      	nop
 800e894:	20000108 	.word	0x20000108

0800e898 <_kill_r>:
 800e898:	b538      	push	{r3, r4, r5, lr}
 800e89a:	4d07      	ldr	r5, [pc, #28]	@ (800e8b8 <_kill_r+0x20>)
 800e89c:	2300      	movs	r3, #0
 800e89e:	4604      	mov	r4, r0
 800e8a0:	4608      	mov	r0, r1
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	602b      	str	r3, [r5, #0]
 800e8a6:	f7f3 f925 	bl	8001af4 <_kill>
 800e8aa:	1c43      	adds	r3, r0, #1
 800e8ac:	d102      	bne.n	800e8b4 <_kill_r+0x1c>
 800e8ae:	682b      	ldr	r3, [r5, #0]
 800e8b0:	b103      	cbz	r3, 800e8b4 <_kill_r+0x1c>
 800e8b2:	6023      	str	r3, [r4, #0]
 800e8b4:	bd38      	pop	{r3, r4, r5, pc}
 800e8b6:	bf00      	nop
 800e8b8:	2000218c 	.word	0x2000218c

0800e8bc <_getpid_r>:
 800e8bc:	f7f3 b912 	b.w	8001ae4 <_getpid>

0800e8c0 <_init>:
 800e8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c2:	bf00      	nop
 800e8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8c6:	bc08      	pop	{r3}
 800e8c8:	469e      	mov	lr, r3
 800e8ca:	4770      	bx	lr

0800e8cc <_fini>:
 800e8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ce:	bf00      	nop
 800e8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8d2:	bc08      	pop	{r3}
 800e8d4:	469e      	mov	lr, r3
 800e8d6:	4770      	bx	lr
