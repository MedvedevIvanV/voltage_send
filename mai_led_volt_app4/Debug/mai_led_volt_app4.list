
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004dbc  0800f438  0800f438  00010438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141f4  080141f4  000162d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080141f4  080141f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141fc  080141fc  000162d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141fc  080141fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014200  08014200  00015200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  08014204  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000162d0  2**0
                  CONTENTS
 10 .bss          0000f6e4  200002d0  200002d0  000162d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000f9b4  2000f9b4  000162d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000162d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f3be  00000000  00000000  00016300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050a0  00000000  00000000  000356be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e8  00000000  00000000  0003a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001289  00000000  00000000  0003c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cf6  00000000  00000000  0003d2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eadc  00000000  00000000  00061fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf06  00000000  00000000  00080aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0014e9a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d08  00000000  00000000  0014ea68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00156770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  001567e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  00157621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f420 	.word	0x0800f420

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800f420 	.word	0x0800f420

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af02      	add	r7, sp, #8
 8001026:	6078      	str	r0, [r7, #4]
    snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 8001028:	f001 f90e 	bl	8002248 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	4613      	mov	r3, r2
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <SendUSBDebugMessage+0x40>)
 8001036:	2180      	movs	r1, #128	@ 0x80
 8001038:	480a      	ldr	r0, [pc, #40]	@ (8001064 <SendUSBDebugMessage+0x44>)
 800103a:	f00a fd49 	bl	800bad0 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 800103e:	4809      	ldr	r0, [pc, #36]	@ (8001064 <SendUSBDebugMessage+0x44>)
 8001040:	f7ff f916 	bl	8000270 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	b29b      	uxth	r3, r3
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	@ (8001064 <SendUSBDebugMessage+0x44>)
 800104c:	f008 ff86 	bl	8009f5c <CDC_Transmit_FS>
    HAL_Delay(10); // Задержка для стабильной работы USB
 8001050:	200a      	movs	r0, #10
 8001052:	f001 f905 	bl	8002260 <HAL_Delay>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	0800f438 	.word	0x0800f438
 8001064:	200003e0 	.word	0x200003e0

08001068 <NormalizeData>:
            break;
    }
}

void NormalizeData(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 800106e:	b098      	sub	sp, #96	@ 0x60
 8001070:	af00      	add	r7, sp, #0
    // Используем normalized_data как входной массив вместо measurement_data
    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 8001072:	4a24      	ldr	r2, [pc, #144]	@ (8001104 <NormalizeData+0x9c>)
 8001074:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 8001078:	4823      	ldr	r0, [pc, #140]	@ (8001108 <NormalizeData+0xa0>)
 800107a:	f009 fc1f 	bl	800a8bc <arm_mean_f32>

    float32_t subtracted_mean[DATA_VALUES_COUNT];
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <NormalizeData+0x9c>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	eef1 7a67 	vneg.f32	s15, s15
 8001088:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800108c:	3b60      	subs	r3, #96	@ 0x60
 800108e:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8001092:	4619      	mov	r1, r3
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	481b      	ldr	r0, [pc, #108]	@ (8001108 <NormalizeData+0xa0>)
 800109a:	f009 fc93 	bl	800a9c4 <arm_offset_f32>

    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 800109e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010a2:	3b60      	subs	r3, #96	@ 0x60
 80010a4:	4a19      	ldr	r2, [pc, #100]	@ (800110c <NormalizeData+0xa4>)
 80010a6:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80010aa:	4618      	mov	r0, r3
 80010ac:	f009 fbe4 	bl	800a878 <arm_std_f32>

    if (std_dev != 0.0f) {
 80010b0:	4b16      	ldr	r3, [pc, #88]	@ (800110c <NormalizeData+0xa4>)
 80010b2:	edd3 7a00 	vldr	s15, [r3]
 80010b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	d012      	beq.n	80010e6 <NormalizeData+0x7e>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <NormalizeData+0xa4>)
 80010c2:	edd3 7a00 	vldr	s15, [r3]
 80010c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010d2:	3b60      	subs	r3, #96	@ 0x60
 80010d4:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80010d8:	490b      	ldr	r1, [pc, #44]	@ (8001108 <NormalizeData+0xa0>)
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 fc2a 	bl	800a938 <arm_scale_f32>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
    }
}
 80010e4:	e008      	b.n	80010f8 <NormalizeData+0x90>
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 80010e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010ea:	3b60      	subs	r3, #96	@ 0x60
 80010ec:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80010f0:	4905      	ldr	r1, [pc, #20]	@ (8001108 <NormalizeData+0xa0>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f009 fb8e 	bl	800a814 <arm_copy_f32>
}
 80010f8:	bf00      	nop
 80010fa:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 80010fe:	3760      	adds	r7, #96	@ 0x60
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20009420 	.word	0x20009420
 8001108:	20000460 	.word	0x20000460
 800110c:	20009424 	.word	0x20009424

08001110 <CalculateAutocorrelation>:

void CalculateAutocorrelation(void)
{
 8001110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001114:	b088      	sub	sp, #32
 8001116:	af00      	add	r7, sp, #0
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	e056      	b.n	80011cc <CalculateAutocorrelation+0xbc>
        double sum = 0.0; // Накопление в double для точности
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uint32_t count = DATA_VALUES_COUNT - lag;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 8001130:	3318      	adds	r3, #24
 8001132:	60bb      	str	r3, [r7, #8]

        for (uint32_t i = 0; i < count; i++) {
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	e026      	b.n	8001188 <CalculateAutocorrelation+0x78>
            // Накопление суммы в double для большей точности
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 800113a:	4a2a      	ldr	r2, [pc, #168]	@ (80011e4 <CalculateAutocorrelation+0xd4>)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9ff 	bl	8000548 <__aeabi_f2d>
 800114a:	4680      	mov	r8, r0
 800114c:	4689      	mov	r9, r1
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	4413      	add	r3, r2
 8001154:	4a23      	ldr	r2, [pc, #140]	@ (80011e4 <CalculateAutocorrelation+0xd4>)
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9f3 	bl	8000548 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4640      	mov	r0, r8
 8001168:	4649      	mov	r1, r9
 800116a:	f7ff fa45 	bl	80005f8 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001176:	f7ff f889 	bl	800028c <__adddf3>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        for (uint32_t i = 0; i < count; i++) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3301      	adds	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3d4      	bcc.n	800113a <CalculateAutocorrelation+0x2a>
        }

        // Вычисление среднего значения и взятие модуля
        double result = sum / count;
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f7ff f9b7 	bl	8000504 <__aeabi_ui2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800119e:	f7ff fb55 	bl	800084c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 2300 	strd	r2, r3, [r7]

        // Сохранение результата по модулю в float32_t
        autocorrelation_result[lag] = (float32_t)fabs(result);
 80011aa:	683c      	ldr	r4, [r7, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff fd17 	bl	8000be8 <__aeabi_d2f>
 80011ba:	4602      	mov	r2, r0
 80011bc:	490a      	ldr	r1, [pc, #40]	@ (80011e8 <CalculateAutocorrelation+0xd8>)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d9a3      	bls.n	800111e <CalculateAutocorrelation+0xe>
    }
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011e2:	bf00      	nop
 80011e4:	20000460 	.word	0x20000460
 80011e8:	20004c40 	.word	0x20004c40

080011ec <FindMaxAutocorrelationIndex>:
/**
  * @brief Поиск индекса максимального значения автокорреляционной функции
  * @retval Индекс максимального значения в диапазоне [start_index:N-start_index]
  */
uint32_t FindMaxAutocorrelationIndex(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
    float32_t max_value = 0.0f;
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
    uint32_t max_idx = start_index;
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <FindMaxAutocorrelationIndex+0x68>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60bb      	str	r3, [r7, #8]

    // Поиск максимума в диапазоне [start_index:DATA_VALUES_COUNT-start_index]
    for (uint32_t i = start_index; i < DATA_VALUES_COUNT - start_index; i++) {
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <FindMaxAutocorrelationIndex+0x68>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	e017      	b.n	8001236 <FindMaxAutocorrelationIndex+0x4a>
        if (autocorrelation_result[i] > max_value) {
 8001206:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <FindMaxAutocorrelationIndex+0x6c>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ed97 7a03 	vldr	s14, [r7, #12]
 8001216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	d507      	bpl.n	8001230 <FindMaxAutocorrelationIndex+0x44>
            max_value = autocorrelation_result[i];
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <FindMaxAutocorrelationIndex+0x6c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	60fb      	str	r3, [r7, #12]
            max_idx = i;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = start_index; i < DATA_VALUES_COUNT - start_index; i++) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3301      	adds	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <FindMaxAutocorrelationIndex+0x68>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 800123e:	3318      	adds	r3, #24
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	429a      	cmp	r2, r3
 8001244:	d3df      	bcc.n	8001206 <FindMaxAutocorrelationIndex+0x1a>
        }
    }

    return max_idx;
 8001246:	68bb      	ldr	r3, [r7, #8]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	20000000 	.word	0x20000000
 8001258:	20004c40 	.word	0x20004c40

0800125c <CalculateAndSendThickness>:

/**
  * @brief Расчет толщины и отправка результата по USB
  */
void CalculateAndSendThickness(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af02      	add	r7, sp, #8
    // Расчет разрешения одного отсчета в мм
    one_point_mm = 1.0f / (wave_speed * 1000.0f * frequency);
 8001262:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <CalculateAndSendThickness+0x8c>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80012ec <CalculateAndSendThickness+0x90>
 800126c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <CalculateAndSendThickness+0x94>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800127e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001282:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <CalculateAndSendThickness+0x98>)
 8001284:	edc3 7a00 	vstr	s15, [r3]

    // Поиск индекса максимального значения АКФ
    max_index = FindMaxAutocorrelationIndex();
 8001288:	f7ff ffb0 	bl	80011ec <FindMaxAutocorrelationIndex>
 800128c:	4603      	mov	r3, r0
 800128e:	4a1a      	ldr	r2, [pc, #104]	@ (80012f8 <CalculateAndSendThickness+0x9c>)
 8001290:	6013      	str	r3, [r2, #0]

    // Расчет толщины
    float thickness = max_index / (2.0f * one_point_mm);
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <CalculateAndSendThickness+0x9c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <CalculateAndSendThickness+0x98>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ac:	edc7 7a01 	vstr	s15, [r7, #4]

    // Отправка результата по USB
    snprintf(usb_msg, sizeof(usb_msg), "Thickness: %.3f\r\n", thickness);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff f949 	bl	8000548 <__aeabi_f2d>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	e9cd 2300 	strd	r2, r3, [sp]
 80012be:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <CalculateAndSendThickness+0xa0>)
 80012c0:	2180      	movs	r1, #128	@ 0x80
 80012c2:	480f      	ldr	r0, [pc, #60]	@ (8001300 <CalculateAndSendThickness+0xa4>)
 80012c4:	f00a fc04 	bl	800bad0 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80012c8:	480d      	ldr	r0, [pc, #52]	@ (8001300 <CalculateAndSendThickness+0xa4>)
 80012ca:	f7fe ffd1 	bl	8000270 <strlen>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4619      	mov	r1, r3
 80012d4:	480a      	ldr	r0, [pc, #40]	@ (8001300 <CalculateAndSendThickness+0xa4>)
 80012d6:	f008 fe41 	bl	8009f5c <CDC_Transmit_FS>
    HAL_Delay(10);
 80012da:	200a      	movs	r0, #10
 80012dc:	f000 ffc0 	bl	8002260 <HAL_Delay>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000004 	.word	0x20000004
 80012ec:	447a0000 	.word	0x447a0000
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20009428 	.word	0x20009428
 80012f8:	2000942c 	.word	0x2000942c
 80012fc:	0800f478 	.word	0x0800f478
 8001300:	200003e0 	.word	0x200003e0

08001304 <PrintMeasurementDataToUSB>:

void PrintMeasurementDataToUSB(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0a8      	sub	sp, #160	@ 0xa0
 8001308:	af02      	add	r7, sp, #8
    // Формируем заголовок
    snprintf(usb_msg, sizeof(usb_msg), "Autocorrelation Result [0-%d]:\r\n", DATA_VALUES_COUNT-1);
 800130a:	f241 13f7 	movw	r3, #4599	@ 0x11f7
 800130e:	4a41      	ldr	r2, [pc, #260]	@ (8001414 <PrintMeasurementDataToUSB+0x110>)
 8001310:	2180      	movs	r1, #128	@ 0x80
 8001312:	4841      	ldr	r0, [pc, #260]	@ (8001418 <PrintMeasurementDataToUSB+0x114>)
 8001314:	f00a fbdc 	bl	800bad0 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001318:	483f      	ldr	r0, [pc, #252]	@ (8001418 <PrintMeasurementDataToUSB+0x114>)
 800131a:	f7fe ffa9 	bl	8000270 <strlen>
 800131e:	4603      	mov	r3, r0
 8001320:	b29b      	uxth	r3, r3
 8001322:	4619      	mov	r1, r3
 8001324:	483c      	ldr	r0, [pc, #240]	@ (8001418 <PrintMeasurementDataToUSB+0x114>)
 8001326:	f008 fe19 	bl	8009f5c <CDC_Transmit_FS>
    HAL_Delay(10);
 800132a:	200a      	movs	r0, #10
 800132c:	f000 ff98 	bl	8002260 <HAL_Delay>

    // Формируем строки с данными
    char data_line[128] = "";
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2280      	movs	r2, #128	@ 0x80
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f00a fc64 	bl	800bc06 <memset>

    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001344:	e05a      	b.n	80013fc <PrintMeasurementDataToUSB+0xf8>
        char val_str[16];

        // Форматируем float значение с двумя знаками после запятой
        snprintf(val_str, sizeof(val_str), "%7.2f ", autocorrelation_result[i]);
 8001346:	4a35      	ldr	r2, [pc, #212]	@ (800141c <PrintMeasurementDataToUSB+0x118>)
 8001348:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f8f8 	bl	8000548 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	1d38      	adds	r0, r7, #4
 800135e:	e9cd 2300 	strd	r2, r3, [sp]
 8001362:	4a2f      	ldr	r2, [pc, #188]	@ (8001420 <PrintMeasurementDataToUSB+0x11c>)
 8001364:	2110      	movs	r1, #16
 8001366:	f00a fbb3 	bl	800bad0 <sniprintf>
        strncat(data_line, val_str, sizeof(data_line) - strlen(data_line) - 1);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4618      	mov	r0, r3
 8001370:	f7fe ff7e 	bl	8000270 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 800137a:	1d39      	adds	r1, r7, #4
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4618      	mov	r0, r3
 8001382:	f00a fc48 	bl	800bc16 <strncat>

        // Если строка заполнена или это последнее значение
        if ((i+1) % VALUES_PER_LINE == 0 || i == DATA_VALUES_COUNT-1) {
 8001386:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800138a:	1c59      	adds	r1, r3, #1
 800138c:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <PrintMeasurementDataToUSB+0x120>)
 800138e:	fb83 2301 	smull	r2, r3, r3, r1
 8001392:	109a      	asrs	r2, r3, #2
 8001394:	17cb      	asrs	r3, r1, #31
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	1aca      	subs	r2, r1, r3
 80013a2:	2a00      	cmp	r2, #0
 80013a4:	d005      	beq.n	80013b2 <PrintMeasurementDataToUSB+0xae>
 80013a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013aa:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d11f      	bne.n	80013f2 <PrintMeasurementDataToUSB+0xee>
            strncat(data_line, "\r\n", sizeof(data_line) - strlen(data_line) - 1);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7fe ff5a 	bl	8000270 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4918      	ldr	r1, [pc, #96]	@ (8001428 <PrintMeasurementDataToUSB+0x124>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00a fc24 	bl	800bc16 <strncat>
            CDC_Transmit_FS((uint8_t*)data_line, strlen(data_line));
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe ff4c 	bl	8000270 <strlen>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f008 fdba 	bl	8009f5c <CDC_Transmit_FS>
            HAL_Delay(10);
 80013e8:	200a      	movs	r0, #10
 80013ea:	f000 ff39 	bl	8002260 <HAL_Delay>
            data_line[0] = '\0'; // Очищаем строку
 80013ee:	2300      	movs	r3, #0
 80013f0:	753b      	strb	r3, [r7, #20]
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 80013f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013f6:	3301      	adds	r3, #1
 80013f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001400:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001404:	4293      	cmp	r3, r2
 8001406:	dd9e      	ble.n	8001346 <PrintMeasurementDataToUSB+0x42>
        }
    }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3798      	adds	r7, #152	@ 0x98
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	0800f48c 	.word	0x0800f48c
 8001418:	200003e0 	.word	0x200003e0
 800141c:	20004c40 	.word	0x20004c40
 8001420:	0800f4b0 	.word	0x0800f4b0
 8001424:	66666667 	.word	0x66666667
 8001428:	0800f4b8 	.word	0x0800f4b8

0800142c <CheckThreshold>:
/**
  * @brief Проверка данных на превышение threshold
  * @param data Массив данных для проверки
  * @retval true если все значения в пределах threshold, false если есть превышения
  */
bool CheckThreshold(const float32_t* data) {
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	e013      	b.n	8001462 <CheckThreshold+0x36>
        if (fabsf(data[i]) > THRESHOLD) {
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	eef0 7ae7 	vabs.f32	s15, s15
 800144a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800147c <CheckThreshold+0x50>
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	dd01      	ble.n	800145c <CheckThreshold+0x30>
            return false;
 8001458:	2300      	movs	r3, #0
 800145a:	e008      	b.n	800146e <CheckThreshold+0x42>
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001468:	4293      	cmp	r3, r2
 800146a:	d9e6      	bls.n	800143a <CheckThreshold+0xe>
        }
    }
    return true;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	45020000 	.word	0x45020000

08001480 <SaveToFlash>:

/**
  * @brief Сохранение данных во FLASH память
  * @param data Массив данных для сохранения
  */
void SaveToFlash(const float32_t* data) {
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    // Разблокируем FLASH память
    HAL_FLASH_Unlock();
 8001488:	f001 f97e 	bl	8002788 <HAL_FLASH_Unlock>

    // Очищаем страницу FLASH
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector = FLASH_SECTOR_11;  // Выберите подходящий сектор
 8001494:	230b      	movs	r3, #11
 8001496:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 8001498:	2301      	movs	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800149c:	2302      	movs	r3, #2
 800149e:	623b      	str	r3, [r7, #32]

    HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80014a0:	f107 020c 	add.w	r2, r7, #12
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 face 	bl	8002a4c <HAL_FLASHEx_Erase>

    // Записываем данные во FLASH
    uint32_t* flash_ptr = (uint32_t*)FLASH_DATA_ADDRESS;
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <SaveToFlash+0x84>)
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t* data_ptr = (uint32_t*)data;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80014bc:	e013      	b.n	80014e6 <SaveToFlash+0x66>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)flash_ptr, *data_ptr);
 80014be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	461c      	mov	r4, r3
 80014c8:	4615      	mov	r5, r2
 80014ca:	4622      	mov	r2, r4
 80014cc:	462b      	mov	r3, r5
 80014ce:	2002      	movs	r0, #2
 80014d0:	f001 f908 	bl	80026e4 <HAL_FLASH_Program>
        flash_ptr++;
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d6:	3304      	adds	r3, #4
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        data_ptr++;
 80014da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014dc:	3304      	adds	r3, #4
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 80014e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e2:	3301      	adds	r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d9e6      	bls.n	80014be <SaveToFlash+0x3e>
    }

    // Блокируем FLASH память
    HAL_FLASH_Lock();
 80014f0:	f001 f96c 	bl	80027cc <HAL_FLASH_Lock>

    data_stored_in_flash = true;
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <SaveToFlash+0x88>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	3730      	adds	r7, #48	@ 0x30
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdb0      	pop	{r4, r5, r7, pc}
 8001502:	bf00      	nop
 8001504:	08080000 	.word	0x08080000
 8001508:	2000dc11 	.word	0x2000dc11

0800150c <ReadFromFlash>:

/**
  * @brief Чтение данных из FLASH памяти
  * @param data Буфер для сохранения прочитанных данных
  */
void ReadFromFlash(float32_t* data) {
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    uint32_t* flash_ptr = (uint32_t*)FLASH_DATA_ADDRESS;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <ReadFromFlash+0x48>)
 8001516:	617b      	str	r3, [r7, #20]
    uint32_t* data_ptr = (uint32_t*)data;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	613b      	str	r3, [r7, #16]

    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e00c      	b.n	800153c <ReadFromFlash+0x30>
        *data_ptr = *flash_ptr;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	601a      	str	r2, [r3, #0]
        flash_ptr++;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3304      	adds	r3, #4
 800152e:	617b      	str	r3, [r7, #20]
        data_ptr++;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	3304      	adds	r3, #4
 8001534:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3301      	adds	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001542:	4293      	cmp	r3, r2
 8001544:	d9ed      	bls.n	8001522 <ReadFromFlash+0x16>
    }
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	08080000 	.word	0x08080000

08001558 <AverageWithFlashData>:

/**
  * @brief Усреднение текущих данных с данными из FLASH
  * @param current_data Текущий массив данных
  */
void AverageWithFlashData(float32_t* current_data) {
 8001558:	b580      	push	{r7, lr}
 800155a:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 800155e:	b09c      	sub	sp, #112	@ 0x70
 8001560:	af00      	add	r7, sp, #0
 8001562:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8001566:	f2a3 73ec 	subw	r3, r3, #2028	@ 0x7ec
 800156a:	6018      	str	r0, [r3, #0]
    float32_t flash_data[DATA_VALUES_COUNT];
    ReadFromFlash(flash_data);
 800156c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001570:	3b64      	subs	r3, #100	@ 0x64
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ffca 	bl	800150c <ReadFromFlash>

    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001578:	2300      	movs	r3, #0
 800157a:	f507 428f 	add.w	r2, r7, #18304	@ 0x4780
 800157e:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	e038      	b.n	80015f8 <AverageWithFlashData+0xa0>
        flash_data[i] = (flash_data[i] + current_data[i]) / 2.0f;
 8001586:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800158a:	f2a3 72e4 	subw	r2, r3, #2020	@ 0x7e4
 800158e:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 8001592:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	ed93 7a00 	vldr	s14, [r3]
 80015a0:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80015a4:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	f507 62fe 	add.w	r2, r7, #2032	@ 0x7f0
 80015b0:	f2a2 72ec 	subw	r2, r2, #2028	@ 0x7ec
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80015c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c8:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80015cc:	f2a3 72e4 	subw	r2, r3, #2020	@ 0x7e4
 80015d0:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80015d4:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 80015e2:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80015e6:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	f507 428f 	add.w	r2, r7, #18304	@ 0x4780
 80015f2:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80015fc:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001606:	4293      	cmp	r3, r2
 8001608:	d9bd      	bls.n	8001586 <AverageWithFlashData+0x2e>
    }

    SaveToFlash(flash_data);
 800160a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800160e:	3b64      	subs	r3, #100	@ 0x64
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff35 	bl	8001480 <SaveToFlash>
}
 8001616:	bf00      	nop
 8001618:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 800161c:	3770      	adds	r7, #112	@ 0x70
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <CopyAndAddNoise>:
/**
  * @brief Копирование исходных данных в рабочий массив и добавление шума
  * @param dest Массив назначения
  * @param src Исходный массив
  */
void CopyAndAddNoise(float32_t* dest, const float32_t* src) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    // Копируем исходные данные
    arm_copy_f32((float32_t*)src, dest, DATA_VALUES_COUNT);
 800162e:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f009 f8ed 	bl	800a814 <arm_copy_f32>

    // Добавляем случайный шум ±50% от значения
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e031      	b.n	80016a4 <CopyAndAddNoise+0x80>
        float noise = (rand() % 10000 - 5000) / 10000.0f;  // ±50%
 8001640:	f009 fae2 	bl	800ac08 <rand>
 8001644:	4602      	mov	r2, r0
 8001646:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <CopyAndAddNoise+0x94>)
 8001648:	fb83 1302 	smull	r1, r3, r3, r2
 800164c:	1319      	asrs	r1, r3, #12
 800164e:	17d3      	asrs	r3, r2, #31
 8001650:	1acb      	subs	r3, r1, r3
 8001652:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 8001660:	3b08      	subs	r3, #8
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166a:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80016bc <CopyAndAddNoise+0x98>
 800166e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001672:	edc7 7a02 	vstr	s15, [r7, #8]
        dest[i] = dest[i] * (1.0f + noise);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	ed93 7a00 	vldr	s14, [r3]
 8001682:	edd7 7a02 	vldr	s15, [r7, #8]
 8001686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800168a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169a:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3301      	adds	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d9c8      	bls.n	8001640 <CopyAndAddNoise+0x1c>
    }
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	68db8bad 	.word	0x68db8bad
 80016bc:	461c4000 	.word	0x461c4000

080016c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c4:	f000 fd5a 	bl	800217c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c8:	f000 f89e 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016cc:	f000 f9a8 	bl	8001a20 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80016d0:	f000 f97c 	bl	80019cc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80016d4:	f008 fb74 	bl	8009dc0 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 80016d8:	f000 f900 	bl	80018dc <MX_DAC_Init>
  MX_TIM3_Init();
 80016dc:	f000 f928 	bl	8001930 <MX_TIM3_Init>
  MX_FSMC_Init();
 80016e0:	f000 fa5e 	bl	8001ba0 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80016e4:	483a      	ldr	r0, [pc, #232]	@ (80017d0 <main+0x110>)
 80016e6:	f003 fc09 	bl	8004efc <HAL_TIM_Base_Start>

  // Инициализация добавленных переменных
  one_point_mm = 1.0f / (wave_speed * 1000.0f * frequency);
 80016ea:	4b3a      	ldr	r3, [pc, #232]	@ (80017d4 <main+0x114>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80017d8 <main+0x118>
 80016f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016f8:	4b38      	ldr	r3, [pc, #224]	@ (80017dc <main+0x11c>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170a:	4b35      	ldr	r3, [pc, #212]	@ (80017e0 <main+0x120>)
 800170c:	edc3 7a00 	vstr	s15, [r3]

  // Инициализация генератора случайных чисел
  srand(HAL_GetTick());
 8001710:	f000 fd9a 	bl	8002248 <HAL_GetTick>
 8001714:	4603      	mov	r3, r0
 8001716:	4618      	mov	r0, r3
 8001718:	f009 fa48 	bl	800abac <srand>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
      // Проверяем наличие команды от USB
      if (new_data_received) {
 800171c:	4b31      	ldr	r3, [pc, #196]	@ (80017e4 <main+0x124>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d050      	beq.n	80017c8 <main+0x108>
          cycles_completed = 0;
 8001726:	4b30      	ldr	r3, [pc, #192]	@ (80017e8 <main+0x128>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
          data_stored_in_flash = false;
 800172c:	4b2f      	ldr	r3, [pc, #188]	@ (80017ec <main+0x12c>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]

          // Основной цикл обработки 10 циклов
          while (cycles_completed < CYCLES_NUMBER) {
 8001732:	e033      	b.n	800179c <main+0xdc>
              // Копируем исходные данные и добавляем шум
              CopyAndAddNoise(working_data, measurement_data);
 8001734:	492e      	ldr	r1, [pc, #184]	@ (80017f0 <main+0x130>)
 8001736:	482f      	ldr	r0, [pc, #188]	@ (80017f4 <main+0x134>)
 8001738:	f7ff ff74 	bl	8001624 <CopyAndAddNoise>

              // ПРОВЕРКА НА ПОРОГ: если хотя бы одна точка превысила - переходим к следующему циклу
              if (!CheckThreshold(working_data)) {
 800173c:	482d      	ldr	r0, [pc, #180]	@ (80017f4 <main+0x134>)
 800173e:	f7ff fe75 	bl	800142c <CheckThreshold>
 8001742:	4603      	mov	r3, r0
 8001744:	f083 0301 	eor.w	r3, r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <main+0xa2>
                  SendUSBDebugMessage("Not written to FLASH: array exceeded threshold");
 800174e:	482a      	ldr	r0, [pc, #168]	@ (80017f8 <main+0x138>)
 8001750:	f7ff fc66 	bl	8001020 <SendUSBDebugMessage>
                  cycles_completed++;
 8001754:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <main+0x128>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	b2da      	uxtb	r2, r3
 800175c:	4b22      	ldr	r3, [pc, #136]	@ (80017e8 <main+0x128>)
 800175e:	701a      	strb	r2, [r3, #0]
                  continue; // Немедленно переходим к следующему циклу
 8001760:	e01c      	b.n	800179c <main+0xdc>
              }

              // Если все точки прошли проверку - запись/усреднение во FLASH
              if (!data_stored_in_flash) {
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <main+0x12c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	f083 0301 	eor.w	r3, r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d009      	beq.n	8001784 <main+0xc4>
                  // Первое сохранение во FLASH
                  SaveToFlash(working_data);
 8001770:	4820      	ldr	r0, [pc, #128]	@ (80017f4 <main+0x134>)
 8001772:	f7ff fe85 	bl	8001480 <SaveToFlash>
                  SendUSBDebugMessage("First written to FLASH");
 8001776:	4821      	ldr	r0, [pc, #132]	@ (80017fc <main+0x13c>)
 8001778:	f7ff fc52 	bl	8001020 <SendUSBDebugMessage>
                  data_stored_in_flash = true;
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <main+0x12c>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e005      	b.n	8001790 <main+0xd0>
              } else {
                  // Усреднение с данными из FLASH
                  AverageWithFlashData(working_data);
 8001784:	481b      	ldr	r0, [pc, #108]	@ (80017f4 <main+0x134>)
 8001786:	f7ff fee7 	bl	8001558 <AverageWithFlashData>
                  SendUSBDebugMessage("Successfully written to FLASH with averaging");
 800178a:	481d      	ldr	r0, [pc, #116]	@ (8001800 <main+0x140>)
 800178c:	f7ff fc48 	bl	8001020 <SendUSBDebugMessage>
              }

              cycles_completed++;
 8001790:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <main+0x128>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <main+0x128>)
 800179a:	701a      	strb	r2, [r3, #0]
          while (cycles_completed < CYCLES_NUMBER) {
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <main+0x128>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b09      	cmp	r3, #9
 80017a2:	d9c7      	bls.n	8001734 <main+0x74>
          }

          // После завершения всех 10 циклов - обработка финальных данных
          if (data_stored_in_flash) {
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <main+0x12c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00a      	beq.n	80017c2 <main+0x102>
              ReadFromFlash(normalized_data);
 80017ac:	4815      	ldr	r0, [pc, #84]	@ (8001804 <main+0x144>)
 80017ae:	f7ff fead 	bl	800150c <ReadFromFlash>
              NormalizeData();
 80017b2:	f7ff fc59 	bl	8001068 <NormalizeData>
              CalculateAutocorrelation();
 80017b6:	f7ff fcab 	bl	8001110 <CalculateAutocorrelation>
              CalculateAndSendThickness();
 80017ba:	f7ff fd4f 	bl	800125c <CalculateAndSendThickness>
              PrintMeasurementDataToUSB();
 80017be:	f7ff fda1 	bl	8001304 <PrintMeasurementDataToUSB>
          }

          new_data_received = 0; // Сбрасываем флаг
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <main+0x124>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
      }

      HAL_Delay(100);
 80017c8:	2064      	movs	r0, #100	@ 0x64
 80017ca:	f000 fd49 	bl	8002260 <HAL_Delay>
      if (new_data_received) {
 80017ce:	e7a5      	b.n	800171c <main+0x5c>
 80017d0:	20000300 	.word	0x20000300
 80017d4:	20000004 	.word	0x20000004
 80017d8:	447a0000 	.word	0x447a0000
 80017dc:	20000008 	.word	0x20000008
 80017e0:	20009428 	.word	0x20009428
 80017e4:	2000df60 	.word	0x2000df60
 80017e8:	2000dc10 	.word	0x2000dc10
 80017ec:	2000dc11 	.word	0x2000dc11
 80017f0:	0800f57c 	.word	0x0800f57c
 80017f4:	20009430 	.word	0x20009430
 80017f8:	0800f4bc 	.word	0x0800f4bc
 80017fc:	0800f4ec 	.word	0x0800f4ec
 8001800:	0800f504 	.word	0x0800f504
 8001804:	20000460 	.word	0x20000460

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	@ 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	2230      	movs	r2, #48	@ 0x30
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f00a f9f5 	bl	800bc06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <SystemClock_Config+0xcc>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	4a27      	ldr	r2, [pc, #156]	@ (80018d4 <SystemClock_Config+0xcc>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	@ 0x40
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <SystemClock_Config+0xcc>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <SystemClock_Config+0xd0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a21      	ldr	r2, [pc, #132]	@ (80018d8 <SystemClock_Config+0xd0>)
 8001852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <SystemClock_Config+0xd0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001864:	2301      	movs	r3, #1
 8001866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	2302      	movs	r3, #2
 8001870:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001872:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001878:	2308      	movs	r3, #8
 800187a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800187c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001880:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001882:	2302      	movs	r3, #2
 8001884:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001886:	2307      	movs	r3, #7
 8001888:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188a:	f107 0320 	add.w	r3, r7, #32
 800188e:	4618      	mov	r0, r3
 8001890:	f002 fe04 	bl	800449c <HAL_RCC_OscConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800189a:	f000 f9e1 	bl	8001c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189e:	230f      	movs	r3, #15
 80018a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	2302      	movs	r3, #2
 80018a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	2105      	movs	r1, #5
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 f865 	bl	800498c <HAL_RCC_ClockConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018c8:	f000 f9ca 	bl	8001c60 <Error_Handler>
  }
}
 80018cc:	bf00      	nop
 80018ce:	3750      	adds	r7, #80	@ 0x50
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40007000 	.word	0x40007000

080018dc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80018e2:	463b      	mov	r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <MX_DAC_Init+0x4c>)
 80018ec:	4a0f      	ldr	r2, [pc, #60]	@ (800192c <MX_DAC_Init+0x50>)
 80018ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80018f0:	480d      	ldr	r0, [pc, #52]	@ (8001928 <MX_DAC_Init+0x4c>)
 80018f2:	f000 fdea 	bl	80024ca <HAL_DAC_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80018fc:	f000 f9b0 	bl	8001c60 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001908:	463b      	mov	r3, r7
 800190a:	2200      	movs	r2, #0
 800190c:	4619      	mov	r1, r3
 800190e:	4806      	ldr	r0, [pc, #24]	@ (8001928 <MX_DAC_Init+0x4c>)
 8001910:	f000 fdfd 	bl	800250e <HAL_DAC_ConfigChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800191a:	f000 f9a1 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200002ec 	.word	0x200002ec
 800192c:	40007400 	.word	0x40007400

08001930 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <MX_TIM3_Init+0x94>)
 800194e:	4a1e      	ldr	r2, [pc, #120]	@ (80019c8 <MX_TIM3_Init+0x98>)
 8001950:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8001952:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <MX_TIM3_Init+0x94>)
 8001954:	22a7      	movs	r2, #167	@ 0xa7
 8001956:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_TIM3_Init+0x94>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800195e:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <MX_TIM3_Init+0x94>)
 8001960:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001964:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <MX_TIM3_Init+0x94>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800196c:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <MX_TIM3_Init+0x94>)
 800196e:	2280      	movs	r2, #128	@ 0x80
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001972:	4814      	ldr	r0, [pc, #80]	@ (80019c4 <MX_TIM3_Init+0x94>)
 8001974:	f003 fa72 	bl	8004e5c <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800197e:	f000 f96f 	bl	8001c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001988:	f107 0308 	add.w	r3, r7, #8
 800198c:	4619      	mov	r1, r3
 800198e:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <MX_TIM3_Init+0x94>)
 8001990:	f003 fc0c 	bl	80051ac <HAL_TIM_ConfigClockSource>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800199a:	f000 f961 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a6:	463b      	mov	r3, r7
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	@ (80019c4 <MX_TIM3_Init+0x94>)
 80019ac:	f003 fe38 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019b6:	f000 f953 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000300 	.word	0x20000300
 80019c8:	40000400 	.word	0x40000400

080019cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <MX_USART1_UART_Init+0x4c>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <MX_USART1_UART_Init+0x50>)
 80019d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <MX_USART1_UART_Init+0x4c>)
 80019d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <MX_USART1_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <MX_USART1_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <MX_USART1_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <MX_USART1_UART_Init+0x4c>)
 80019f2:	220c      	movs	r2, #12
 80019f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f6:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <MX_USART1_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <MX_USART1_UART_Init+0x4c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_USART1_UART_Init+0x4c>)
 8001a04:	f003 fe9c 	bl	8005740 <HAL_UART_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a0e:	f000 f927 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000348 	.word	0x20000348
 8001a1c:	40011000 	.word	0x40011000

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	@ 0x30
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	4b54      	ldr	r3, [pc, #336]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a53      	ldr	r2, [pc, #332]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b51      	ldr	r3, [pc, #324]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	4b4d      	ldr	r3, [pc, #308]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b4a      	ldr	r3, [pc, #296]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b46      	ldr	r3, [pc, #280]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a45      	ldr	r2, [pc, #276]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b43      	ldr	r3, [pc, #268]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a3e      	ldr	r2, [pc, #248]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	4a37      	ldr	r2, [pc, #220]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab6:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b31      	ldr	r3, [pc, #196]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a30      	ldr	r2, [pc, #192]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b8c <MX_GPIO_Init+0x16c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001ae4:	482a      	ldr	r0, [pc, #168]	@ (8001b90 <MX_GPIO_Init+0x170>)
 8001ae6:	f001 fa6d 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8001af0:	4828      	ldr	r0, [pc, #160]	@ (8001b94 <MX_GPIO_Init+0x174>)
 8001af2:	f001 fa67 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2140      	movs	r1, #64	@ 0x40
 8001afa:	4827      	ldr	r0, [pc, #156]	@ (8001b98 <MX_GPIO_Init+0x178>)
 8001afc:	f001 fa62 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001b06:	4825      	ldr	r0, [pc, #148]	@ (8001b9c <MX_GPIO_Init+0x17c>)
 8001b08:	f001 fa5c 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8001b0c:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	481a      	ldr	r0, [pc, #104]	@ (8001b90 <MX_GPIO_Init+0x170>)
 8001b26:	f001 f8b1 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001b2a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	4814      	ldr	r0, [pc, #80]	@ (8001b94 <MX_GPIO_Init+0x174>)
 8001b44:	f001 f8a2 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b48:	2340      	movs	r3, #64	@ 0x40
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480e      	ldr	r0, [pc, #56]	@ (8001b98 <MX_GPIO_Init+0x178>)
 8001b60:	f001 f894 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b64:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4807      	ldr	r0, [pc, #28]	@ (8001b9c <MX_GPIO_Init+0x17c>)
 8001b7e:	f001 f885 	bl	8002c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b82:	bf00      	nop
 8001b84:	3730      	adds	r7, #48	@ 0x30
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020000 	.word	0x40020000
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
 8001bb4:	615a      	str	r2, [r3, #20]
 8001bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001bba:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001bbe:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001bc0:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001bc2:	4a26      	ldr	r2, [pc, #152]	@ (8001c5c <MX_FSMC_Init+0xbc>)
 8001bc4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001bc6:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8001bcc:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001bce:	2202      	movs	r2, #2
 8001bd0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001bda:	2210      	movs	r2, #16
 8001bdc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001bde:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001be4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001bea:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001bf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001bfe:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001c20:	230f      	movs	r3, #15
 8001c22:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001c24:	23ff      	movs	r3, #255	@ 0xff
 8001c26:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001c28:	230f      	movs	r3, #15
 8001c2a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001c30:	2311      	movs	r3, #17
 8001c32:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	@ (8001c58 <MX_FSMC_Init+0xb8>)
 8001c40:	f003 f8c4 	bl	8004dcc <HAL_SRAM_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001c4a:	f000 f809 	bl	8001c60 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001c4e:	bf00      	nop
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000390 	.word	0x20000390
 8001c5c:	a0000104 	.word	0xa0000104

08001c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <Error_Handler+0x4>

08001c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	4a08      	ldr	r2, [pc, #32]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	@ 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a17      	ldr	r2, [pc, #92]	@ (8001d34 <HAL_DAC_MspInit+0x7c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d127      	bne.n	8001d2a <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <HAL_DAC_MspInit+0x80>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a15      	ldr	r2, [pc, #84]	@ (8001d38 <HAL_DAC_MspInit+0x80>)
 8001ce4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <HAL_DAC_MspInit+0x80>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <HAL_DAC_MspInit+0x80>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001d38 <HAL_DAC_MspInit+0x80>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <HAL_DAC_MspInit+0x80>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d12:	2310      	movs	r3, #16
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d16:	2303      	movs	r3, #3
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <HAL_DAC_MspInit+0x84>)
 8001d26:	f000 ffb1 	bl	8002c8c <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	@ 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40007400 	.word	0x40007400
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020000 	.word	0x40020000

08001d40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d88 <HAL_TIM_Base_MspInit+0x48>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d115      	bne.n	8001d7e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <HAL_TIM_Base_MspInit+0x4c>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d8c <HAL_TIM_Base_MspInit+0x4c>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <HAL_TIM_Base_MspInit+0x4c>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	201d      	movs	r0, #29
 8001d74:	f000 fb73 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d78:	201d      	movs	r0, #29
 8001d7a:	f000 fb8c 	bl	8002496 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <HAL_UART_MspInit+0x94>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d133      	bne.n	8001e1a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	4a1b      	ldr	r2, [pc, #108]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001dbc:	f043 0310 	orr.w	r3, r3, #16
 8001dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc2:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dde:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_UART_MspInit+0x98>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dea:	23c0      	movs	r3, #192	@ 0xc0
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	4809      	ldr	r0, [pc, #36]	@ (8001e2c <HAL_UART_MspInit+0x9c>)
 8001e06:	f000 ff41 	bl	8002c8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2025      	movs	r0, #37	@ 0x25
 8001e10:	f000 fb25 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e14:	2025      	movs	r0, #37	@ 0x25
 8001e16:	f000 fb3e 	bl	8002496 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	@ 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020400 	.word	0x40020400

08001e30 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e44:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb8 <HAL_FSMC_MspInit+0x88>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d131      	bne.n	8001eb0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb8 <HAL_FSMC_MspInit+0x88>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_FSMC_MspInit+0x8c>)
 8001e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5a:	4a18      	ldr	r2, [pc, #96]	@ (8001ebc <HAL_FSMC_MspInit+0x8c>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e62:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <HAL_FSMC_MspInit+0x8c>)
 8001e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e6e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001e72:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e80:	230c      	movs	r3, #12
 8001e82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	4619      	mov	r1, r3
 8001e88:	480d      	ldr	r0, [pc, #52]	@ (8001ec0 <HAL_FSMC_MspInit+0x90>)
 8001e8a:	f000 feff 	bl	8002c8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e8e:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 8001e92:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ea0:	230c      	movs	r3, #12
 8001ea2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4806      	ldr	r0, [pc, #24]	@ (8001ec4 <HAL_FSMC_MspInit+0x94>)
 8001eaa:	f000 feef 	bl	8002c8c <HAL_GPIO_Init>
 8001eae:	e000      	b.n	8001eb2 <HAL_FSMC_MspInit+0x82>
    return;
 8001eb0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	2000dc14 	.word	0x2000dc14
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40020c00 	.word	0x40020c00

08001ec8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ed0:	f7ff ffae 	bl	8001e30 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <NMI_Handler+0x4>

08001ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <BusFault_Handler+0x4>

08001efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <UsageFault_Handler+0x4>

08001f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f32:	f000 f975 	bl	8002220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f40:	4802      	ldr	r0, [pc, #8]	@ (8001f4c <TIM3_IRQHandler+0x10>)
 8001f42:	f003 f843 	bl	8004fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000300 	.word	0x20000300

08001f50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f54:	4802      	ldr	r0, [pc, #8]	@ (8001f60 <USART1_IRQHandler+0x10>)
 8001f56:	f003 fc43 	bl	80057e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000348 	.word	0x20000348

08001f64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <OTG_FS_IRQHandler+0x10>)
 8001f6a:	f001 f988 	bl	800327e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000f164 	.word	0x2000f164

08001f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_kill>:

int _kill(int pid, int sig)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f92:	f009 fe9d 	bl	800bcd0 <__errno>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2216      	movs	r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_exit>:

void _exit (int status)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ffe7 	bl	8001f88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fba:	bf00      	nop
 8001fbc:	e7fd      	b.n	8001fba <_exit+0x12>

08001fbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e00a      	b.n	8001fe6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fd0:	f3af 8000 	nop.w
 8001fd4:	4601      	mov	r1, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	60ba      	str	r2, [r7, #8]
 8001fdc:	b2ca      	uxtb	r2, r1
 8001fde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	dbf0      	blt.n	8001fd0 <_read+0x12>
  }

  return len;
 8001fee:	687b      	ldr	r3, [r7, #4]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e009      	b.n	800201e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	60ba      	str	r2, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	dbf1      	blt.n	800200a <_write+0x12>
  }
  return len;
 8002026:	687b      	ldr	r3, [r7, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_close>:

int _close(int file)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002058:	605a      	str	r2, [r3, #4]
  return 0;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_isatty>:

int _isatty(int file)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002070:	2301      	movs	r3, #1
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	@ (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f009 fe02 	bl	800bcd0 <__errno>
 80020cc:	4603      	mov	r3, r0
 80020ce:	220c      	movs	r2, #12
 80020d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20020000 	.word	0x20020000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	2000dc18 	.word	0x2000dc18
 8002100:	2000f9b8 	.word	0x2000f9b8

08002104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <SystemInit+0x20>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <SystemInit+0x20>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002160 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800212c:	f7ff ffea 	bl	8002104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002132:	490d      	ldr	r1, [pc, #52]	@ (8002168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002148:	4c0a      	ldr	r4, [pc, #40]	@ (8002174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002156:	f009 fdc1 	bl	800bcdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7ff fab1 	bl	80016c0 <main>
  bx  lr    
 800215e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002160:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 800216c:	08014204 	.word	0x08014204
  ldr r2, =_sbss
 8002170:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002174:	2000f9b4 	.word	0x2000f9b4

08002178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC_IRQHandler>
	...

0800217c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002180:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <HAL_Init+0x40>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800218a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <HAL_Init+0x40>)
 8002192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <HAL_Init+0x40>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 f94f 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021aa:	200f      	movs	r0, #15
 80021ac:	f000 f808 	bl	80021c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b0:	f7ff fd5a 	bl	8001c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_InitTick+0x54>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_InitTick+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f967 	bl	80024b2 <HAL_SYSTICK_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00e      	b.n	800220c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d80a      	bhi.n	800220a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f000 f92f 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002200:	4a06      	ldr	r2, [pc, #24]	@ (800221c <HAL_InitTick+0x5c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000000c 	.word	0x2000000c
 8002218:	20000014 	.word	0x20000014
 800221c:	20000010 	.word	0x20000010

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_IncTick+0x20>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_IncTick+0x24>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <HAL_IncTick+0x24>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000014 	.word	0x20000014
 8002244:	2000dc1c 	.word	0x2000dc1c

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <HAL_GetTick+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2000dc1c 	.word	0x2000dc1c

08002260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff ffee 	bl	8002248 <HAL_GetTick>
 800226c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d005      	beq.n	8002286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227a:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <HAL_Delay+0x44>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002286:	bf00      	nop
 8002288:	f7ff ffde 	bl	8002248 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d8f7      	bhi.n	8002288 <HAL_Delay+0x28>
  {
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000014 	.word	0x20000014

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	@ (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	@ (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	@ (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff8e 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	@ (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff29 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff3e 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff8e 	bl	800239c <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5d 	bl	8002348 <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff31 	bl	800230c <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffa2 	bl	8002404 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e014      	b.n	8002506 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	791b      	ldrb	r3, [r3, #4]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fbe3 	bl	8001cb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800250e:	b480      	push	{r7}
 8002510:	b089      	sub	sp, #36	@ 0x24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_DAC_ConfigChannel+0x1c>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e042      	b.n	80025b4 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	795b      	ldrb	r3, [r3, #5]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_DAC_ConfigChannel+0x2c>
 8002536:	2302      	movs	r3, #2
 8002538:	e03c      	b.n	80025b4 <HAL_DAC_ConfigChannel+0xa6>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2202      	movs	r2, #2
 8002544:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	22c0      	movs	r2, #192	@ 0xc0
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43da      	mvns	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	400a      	ands	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80025b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3724      	adds	r7, #36	@ 0x24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025ce:	f7ff fe3b 	bl	8002248 <HAL_GetTick>
 80025d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d008      	beq.n	80025f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2280      	movs	r2, #128	@ 0x80
 80025e4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e052      	b.n	8002698 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0216 	bic.w	r2, r2, #22
 8002600:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002610:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <HAL_DMA_Abort+0x62>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0208 	bic.w	r2, r2, #8
 8002630:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002642:	e013      	b.n	800266c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002644:	f7ff fe00 	bl	8002248 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b05      	cmp	r3, #5
 8002650:	d90c      	bls.n	800266c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2203      	movs	r2, #3
 800265c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e015      	b.n	8002698 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e4      	bne.n	8002644 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	223f      	movs	r2, #63	@ 0x3f
 8002680:	409a      	lsls	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d004      	beq.n	80026be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2280      	movs	r2, #128	@ 0x80
 80026b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00c      	b.n	80026d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2205      	movs	r2, #5
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026f2:	4b23      	ldr	r3, [pc, #140]	@ (8002780 <HAL_FLASH_Program+0x9c>)
 80026f4:	7e1b      	ldrb	r3, [r3, #24]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_FLASH_Program+0x1a>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e03b      	b.n	8002776 <HAL_FLASH_Program+0x92>
 80026fe:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <HAL_FLASH_Program+0x9c>)
 8002700:	2201      	movs	r2, #1
 8002702:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002704:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002708:	f000 f870 	bl	80027ec <FLASH_WaitForLastOperation>
 800270c:	4603      	mov	r3, r0
 800270e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d12b      	bne.n	800276e <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800271c:	783b      	ldrb	r3, [r7, #0]
 800271e:	4619      	mov	r1, r3
 8002720:	68b8      	ldr	r0, [r7, #8]
 8002722:	f000 f91b 	bl	800295c <FLASH_Program_Byte>
 8002726:	e016      	b.n	8002756 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800272e:	883b      	ldrh	r3, [r7, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	68b8      	ldr	r0, [r7, #8]
 8002734:	f000 f8ee 	bl	8002914 <FLASH_Program_HalfWord>
 8002738:	e00d      	b.n	8002756 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d105      	bne.n	800274c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4619      	mov	r1, r3
 8002744:	68b8      	ldr	r0, [r7, #8]
 8002746:	f000 f8c3 	bl	80028d0 <FLASH_Program_Word>
 800274a:	e004      	b.n	8002756 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800274c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002750:	68b8      	ldr	r0, [r7, #8]
 8002752:	f000 f88b 	bl	800286c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002756:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800275a:	f000 f847 	bl	80027ec <FLASH_WaitForLastOperation>
 800275e:	4603      	mov	r3, r0
 8002760:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <HAL_FLASH_Program+0xa0>)
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <HAL_FLASH_Program+0xa0>)
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800276e:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <HAL_FLASH_Program+0x9c>)
 8002770:	2200      	movs	r2, #0
 8002772:	761a      	strb	r2, [r3, #24]

  return status;
 8002774:	7dfb      	ldrb	r3, [r7, #23]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	2000dc20 	.word	0x2000dc20
 8002784:	40023c00 	.word	0x40023c00

08002788 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002792:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <HAL_FLASH_Unlock+0x38>)
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	da0b      	bge.n	80027b2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_FLASH_Unlock+0x38>)
 800279c:	4a09      	ldr	r2, [pc, #36]	@ (80027c4 <HAL_FLASH_Unlock+0x3c>)
 800279e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027a0:	4b07      	ldr	r3, [pc, #28]	@ (80027c0 <HAL_FLASH_Unlock+0x38>)
 80027a2:	4a09      	ldr	r2, [pc, #36]	@ (80027c8 <HAL_FLASH_Unlock+0x40>)
 80027a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <HAL_FLASH_Unlock+0x38>)
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da01      	bge.n	80027b2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80027b2:	79fb      	ldrb	r3, [r7, #7]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40023c00 	.word	0x40023c00
 80027c4:	45670123 	.word	0x45670123
 80027c8:	cdef89ab 	.word	0xcdef89ab

080027cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80027d0:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <HAL_FLASH_Lock+0x1c>)
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <HAL_FLASH_Lock+0x1c>)
 80027d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027da:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40023c00 	.word	0x40023c00

080027ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <FLASH_WaitForLastOperation+0x78>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80027fe:	f7ff fd23 	bl	8002248 <HAL_GetTick>
 8002802:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002804:	e010      	b.n	8002828 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d00c      	beq.n	8002828 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <FLASH_WaitForLastOperation+0x38>
 8002814:	f7ff fd18 	bl	8002248 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	d201      	bcs.n	8002828 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e019      	b.n	800285c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002828:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <FLASH_WaitForLastOperation+0x7c>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e8      	bne.n	8002806 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <FLASH_WaitForLastOperation+0x7c>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <FLASH_WaitForLastOperation+0x7c>)
 8002842:	2201      	movs	r2, #1
 8002844:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <FLASH_WaitForLastOperation+0x7c>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002852:	f000 f8a5 	bl	80029a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0

}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	2000dc20 	.word	0x2000dc20
 8002868:	40023c00 	.word	0x40023c00

0800286c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002878:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <FLASH_Program_DoubleWord+0x60>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4a13      	ldr	r2, [pc, #76]	@ (80028cc <FLASH_Program_DoubleWord+0x60>)
 800287e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002882:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <FLASH_Program_DoubleWord+0x60>)
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	4a10      	ldr	r2, [pc, #64]	@ (80028cc <FLASH_Program_DoubleWord+0x60>)
 800288a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800288e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002890:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <FLASH_Program_DoubleWord+0x60>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4a0d      	ldr	r2, [pc, #52]	@ (80028cc <FLASH_Program_DoubleWord+0x60>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80028a2:	f3bf 8f6f 	isb	sy
}
 80028a6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80028a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	000a      	movs	r2, r1
 80028b6:	2300      	movs	r3, #0
 80028b8:	68f9      	ldr	r1, [r7, #12]
 80028ba:	3104      	adds	r1, #4
 80028bc:	4613      	mov	r3, r2
 80028be:	600b      	str	r3, [r1, #0]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	40023c00 	.word	0x40023c00

080028d0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028da:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <FLASH_Program_Word+0x40>)
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	4a0c      	ldr	r2, [pc, #48]	@ (8002910 <FLASH_Program_Word+0x40>)
 80028e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80028e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <FLASH_Program_Word+0x40>)
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	4a09      	ldr	r2, [pc, #36]	@ (8002910 <FLASH_Program_Word+0x40>)
 80028ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028f2:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <FLASH_Program_Word+0x40>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	4a06      	ldr	r2, [pc, #24]	@ (8002910 <FLASH_Program_Word+0x40>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	601a      	str	r2, [r3, #0]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40023c00 	.word	0x40023c00

08002914 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002920:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <FLASH_Program_HalfWord+0x44>)
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	4a0c      	ldr	r2, [pc, #48]	@ (8002958 <FLASH_Program_HalfWord+0x44>)
 8002926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800292a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <FLASH_Program_HalfWord+0x44>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a09      	ldr	r2, [pc, #36]	@ (8002958 <FLASH_Program_HalfWord+0x44>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002936:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002938:	4b07      	ldr	r3, [pc, #28]	@ (8002958 <FLASH_Program_HalfWord+0x44>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	4a06      	ldr	r2, [pc, #24]	@ (8002958 <FLASH_Program_HalfWord+0x44>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	801a      	strh	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40023c00 	.word	0x40023c00

0800295c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <FLASH_Program_Byte+0x40>)
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	4a0b      	ldr	r2, [pc, #44]	@ (800299c <FLASH_Program_Byte+0x40>)
 800296e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002972:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002974:	4b09      	ldr	r3, [pc, #36]	@ (800299c <FLASH_Program_Byte+0x40>)
 8002976:	4a09      	ldr	r2, [pc, #36]	@ (800299c <FLASH_Program_Byte+0x40>)
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800297c:	4b07      	ldr	r3, [pc, #28]	@ (800299c <FLASH_Program_Byte+0x40>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	4a06      	ldr	r2, [pc, #24]	@ (800299c <FLASH_Program_Byte+0x40>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	701a      	strb	r2, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00

080029a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80029a4:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <FLASH_SetErrorCode+0xa4>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80029b0:	4b25      	ldr	r3, [pc, #148]	@ (8002a48 <FLASH_SetErrorCode+0xa8>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f043 0310 	orr.w	r3, r3, #16
 80029b8:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <FLASH_SetErrorCode+0xa8>)
 80029ba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80029bc:	4b21      	ldr	r3, [pc, #132]	@ (8002a44 <FLASH_SetErrorCode+0xa4>)
 80029be:	2210      	movs	r2, #16
 80029c0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80029c2:	4b20      	ldr	r3, [pc, #128]	@ (8002a44 <FLASH_SetErrorCode+0xa4>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <FLASH_SetErrorCode+0xa8>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a48 <FLASH_SetErrorCode+0xa8>)
 80029d8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80029da:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <FLASH_SetErrorCode+0xa4>)
 80029dc:	2220      	movs	r2, #32
 80029de:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80029e0:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <FLASH_SetErrorCode+0xa4>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80029ec:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <FLASH_SetErrorCode+0xa8>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <FLASH_SetErrorCode+0xa8>)
 80029f6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80029f8:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <FLASH_SetErrorCode+0xa4>)
 80029fa:	2240      	movs	r2, #64	@ 0x40
 80029fc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80029fe:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <FLASH_SetErrorCode+0xa4>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <FLASH_SetErrorCode+0xa8>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	4a0d      	ldr	r2, [pc, #52]	@ (8002a48 <FLASH_SetErrorCode+0xa8>)
 8002a14:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002a16:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <FLASH_SetErrorCode+0xa4>)
 8002a18:	2280      	movs	r2, #128	@ 0x80
 8002a1a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002a1c:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <FLASH_SetErrorCode+0xa4>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002a28:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <FLASH_SetErrorCode+0xa8>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f043 0320 	orr.w	r3, r3, #32
 8002a30:	4a05      	ldr	r2, [pc, #20]	@ (8002a48 <FLASH_SetErrorCode+0xa8>)
 8002a32:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <FLASH_SetErrorCode+0xa4>)
 8002a36:	2202      	movs	r2, #2
 8002a38:	60da      	str	r2, [r3, #12]
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40023c00 	.word	0x40023c00
 8002a48:	2000dc20 	.word	0x2000dc20

08002a4c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a5a:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_FLASHEx_Erase+0xd4>)
 8002a5c:	7e1b      	ldrb	r3, [r3, #24]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_FLASHEx_Erase+0x1a>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e058      	b.n	8002b18 <HAL_FLASHEx_Erase+0xcc>
 8002a66:	4b2e      	ldr	r3, [pc, #184]	@ (8002b20 <HAL_FLASHEx_Erase+0xd4>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a6c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a70:	f7ff febc 	bl	80027ec <FLASH_WaitForLastOperation>
 8002a74:	4603      	mov	r3, r0
 8002a76:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d148      	bne.n	8002b10 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295
 8002a84:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d115      	bne.n	8002aba <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 f844 	bl	8002b28 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aa0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002aa4:	f7ff fea2 	bl	80027ec <FLASH_WaitForLastOperation>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002aac:	4b1d      	ldr	r3, [pc, #116]	@ (8002b24 <HAL_FLASHEx_Erase+0xd8>)
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b24 <HAL_FLASHEx_Erase+0xd8>)
 8002ab2:	f023 0304 	bic.w	r3, r3, #4
 8002ab6:	6113      	str	r3, [r2, #16]
 8002ab8:	e028      	b.n	8002b0c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	e01c      	b.n	8002afc <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	4619      	mov	r1, r3
 8002aca:	68b8      	ldr	r0, [r7, #8]
 8002acc:	f000 f850 	bl	8002b70 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ad0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ad4:	f7ff fe8a 	bl	80027ec <FLASH_WaitForLastOperation>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_FLASHEx_Erase+0xd8>)
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	4a10      	ldr	r2, [pc, #64]	@ (8002b24 <HAL_FLASHEx_Erase+0xd8>)
 8002ae2:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 8002ae6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	601a      	str	r2, [r3, #0]
          break;
 8002af4:	e00a      	b.n	8002b0c <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3301      	adds	r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4413      	add	r3, r2
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d3da      	bcc.n	8002ac2 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002b0c:	f000 f878 	bl	8002c00 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b10:	4b03      	ldr	r3, [pc, #12]	@ (8002b20 <HAL_FLASHEx_Erase+0xd4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	761a      	strb	r2, [r3, #24]

  return status;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	2000dc20 	.word	0x2000dc20
 8002b24:	40023c00 	.word	0x40023c00

08002b28 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b34:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <FLASH_MassErase+0x44>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	4a0c      	ldr	r2, [pc, #48]	@ (8002b6c <FLASH_MassErase+0x44>)
 8002b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002b40:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <FLASH_MassErase+0x44>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	4a09      	ldr	r2, [pc, #36]	@ (8002b6c <FLASH_MassErase+0x44>)
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002b4c:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <FLASH_MassErase+0x44>)
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	4313      	orrs	r3, r2
 8002b56:	4a05      	ldr	r2, [pc, #20]	@ (8002b6c <FLASH_MassErase+0x44>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5c:	6113      	str	r3, [r2, #16]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023c00 	.word	0x40023c00

08002b70 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e010      	b.n	8002bae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d103      	bne.n	8002b9a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002b92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e009      	b.n	8002bae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d103      	bne.n	8002ba8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e002      	b.n	8002bae <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002ba8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bae:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <FLASH_Erase_Sector+0x8c>)
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <FLASH_Erase_Sector+0x8c>)
 8002bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <FLASH_Erase_Sector+0x8c>)
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	490f      	ldr	r1, [pc, #60]	@ (8002bfc <FLASH_Erase_Sector+0x8c>)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <FLASH_Erase_Sector+0x8c>)
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	4a0c      	ldr	r2, [pc, #48]	@ (8002bfc <FLASH_Erase_Sector+0x8c>)
 8002bcc:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8002bd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <FLASH_Erase_Sector+0x8c>)
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	4a07      	ldr	r2, [pc, #28]	@ (8002bfc <FLASH_Erase_Sector+0x8c>)
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <FLASH_Erase_Sector+0x8c>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <FLASH_Erase_Sector+0x8c>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bee:	6113      	str	r3, [r2, #16]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40023c00 	.word	0x40023c00

08002c00 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002c04:	4b20      	ldr	r3, [pc, #128]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002c10:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1c      	ldr	r2, [pc, #112]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c16:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c1a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a19      	ldr	r2, [pc, #100]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a16      	ldr	r2, [pc, #88]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c32:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c34:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a13      	ldr	r2, [pc, #76]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c3e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002c40:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d017      	beq.n	8002c7c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0d      	ldr	r2, [pc, #52]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c56:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002c58:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a07      	ldr	r2, [pc, #28]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c6e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <FLASH_FlushCaches+0x88>)
 8002c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c7a:	6013      	str	r3, [r2, #0]
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023c00 	.word	0x40023c00

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	@ 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e16b      	b.n	8002f80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	f040 815a 	bne.w	8002f7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d005      	beq.n	8002cde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d130      	bne.n	8002d40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d14:	2201      	movs	r2, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 0201 	and.w	r2, r3, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d017      	beq.n	8002d7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	2203      	movs	r2, #3
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d123      	bne.n	8002dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	08da      	lsrs	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3208      	adds	r2, #8
 8002d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	220f      	movs	r2, #15
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	08da      	lsrs	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3208      	adds	r2, #8
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0203 	and.w	r2, r3, #3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80b4 	beq.w	8002f7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b60      	ldr	r3, [pc, #384]	@ (8002f98 <HAL_GPIO_Init+0x30c>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	4a5f      	ldr	r2, [pc, #380]	@ (8002f98 <HAL_GPIO_Init+0x30c>)
 8002e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e22:	4b5d      	ldr	r3, [pc, #372]	@ (8002f98 <HAL_GPIO_Init+0x30c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8002f9c <HAL_GPIO_Init+0x310>)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	3302      	adds	r3, #2
 8002e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	220f      	movs	r2, #15
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a52      	ldr	r2, [pc, #328]	@ (8002fa0 <HAL_GPIO_Init+0x314>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d02b      	beq.n	8002eb2 <HAL_GPIO_Init+0x226>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a51      	ldr	r2, [pc, #324]	@ (8002fa4 <HAL_GPIO_Init+0x318>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d025      	beq.n	8002eae <HAL_GPIO_Init+0x222>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a50      	ldr	r2, [pc, #320]	@ (8002fa8 <HAL_GPIO_Init+0x31c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01f      	beq.n	8002eaa <HAL_GPIO_Init+0x21e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fac <HAL_GPIO_Init+0x320>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d019      	beq.n	8002ea6 <HAL_GPIO_Init+0x21a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4e      	ldr	r2, [pc, #312]	@ (8002fb0 <HAL_GPIO_Init+0x324>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_GPIO_Init+0x216>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fb4 <HAL_GPIO_Init+0x328>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00d      	beq.n	8002e9e <HAL_GPIO_Init+0x212>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4c      	ldr	r2, [pc, #304]	@ (8002fb8 <HAL_GPIO_Init+0x32c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <HAL_GPIO_Init+0x20e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002fbc <HAL_GPIO_Init+0x330>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_GPIO_Init+0x20a>
 8002e92:	2307      	movs	r3, #7
 8002e94:	e00e      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002e96:	2308      	movs	r3, #8
 8002e98:	e00c      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002e9a:	2306      	movs	r3, #6
 8002e9c:	e00a      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	e008      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	e006      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e004      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e002      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f002 0203 	and.w	r2, r2, #3
 8002eba:	0092      	lsls	r2, r2, #2
 8002ebc:	4093      	lsls	r3, r2
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ec4:	4935      	ldr	r1, [pc, #212]	@ (8002f9c <HAL_GPIO_Init+0x310>)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	089b      	lsrs	r3, r3, #2
 8002eca:	3302      	adds	r3, #2
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <HAL_GPIO_Init+0x334>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef6:	4a32      	ldr	r2, [pc, #200]	@ (8002fc0 <HAL_GPIO_Init+0x334>)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002efc:	4b30      	ldr	r3, [pc, #192]	@ (8002fc0 <HAL_GPIO_Init+0x334>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f20:	4a27      	ldr	r2, [pc, #156]	@ (8002fc0 <HAL_GPIO_Init+0x334>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f26:	4b26      	ldr	r3, [pc, #152]	@ (8002fc0 <HAL_GPIO_Init+0x334>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc0 <HAL_GPIO_Init+0x334>)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <HAL_GPIO_Init+0x334>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f74:	4a12      	ldr	r2, [pc, #72]	@ (8002fc0 <HAL_GPIO_Init+0x334>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b0f      	cmp	r3, #15
 8002f84:	f67f ae90 	bls.w	8002ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3724      	adds	r7, #36	@ 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40020400 	.word	0x40020400
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	40020c00 	.word	0x40020c00
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40021400 	.word	0x40021400
 8002fb8:	40021800 	.word	0x40021800
 8002fbc:	40021c00 	.word	0x40021c00
 8002fc0:	40013c00 	.word	0x40013c00

08002fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd4:	787b      	ldrb	r3, [r7, #1]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe0:	e003      	b.n	8002fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fe2:	887b      	ldrh	r3, [r7, #2]
 8002fe4:	041a      	lsls	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	619a      	str	r2, [r3, #24]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b086      	sub	sp, #24
 8002ffa:	af02      	add	r7, sp, #8
 8002ffc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e101      	b.n	800320c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f007 f8e2 	bl	800a1ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2203      	movs	r2, #3
 800302c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003036:	d102      	bne.n	800303e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fc95 	bl	8006972 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7c1a      	ldrb	r2, [r3, #16]
 8003050:	f88d 2000 	strb.w	r2, [sp]
 8003054:	3304      	adds	r3, #4
 8003056:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003058:	f003 fb74 	bl	8006744 <USB_CoreInit>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0ce      	b.n	800320c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f003 fc8d 	bl	8006994 <USB_SetCurrentMode>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0bf      	b.n	800320c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e04a      	b.n	8003128 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3315      	adds	r3, #21
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3314      	adds	r3, #20
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	b298      	uxth	r0, r3
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	332e      	adds	r3, #46	@ 0x2e
 80030ce:	4602      	mov	r2, r0
 80030d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3318      	adds	r3, #24
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	331c      	adds	r3, #28
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3320      	adds	r3, #32
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3324      	adds	r3, #36	@ 0x24
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	3301      	adds	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	791b      	ldrb	r3, [r3, #4]
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	429a      	cmp	r2, r3
 8003130:	d3af      	bcc.n	8003092 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
 8003136:	e044      	b.n	80031c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003176:	2200      	movs	r2, #0
 8003178:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	3301      	adds	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	791b      	ldrb	r3, [r3, #4]
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d3b5      	bcc.n	8003138 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7c1a      	ldrb	r2, [r3, #16]
 80031d4:	f88d 2000 	strb.w	r2, [sp]
 80031d8:	3304      	adds	r3, #4
 80031da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031dc:	f003 fc26 	bl	8006a2c <USB_DevInit>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e00c      	b.n	800320c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f004 fc70 	bl	8007aea <USB_DevDisconnect>

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_PCD_Start+0x1c>
 800322c:	2302      	movs	r3, #2
 800322e:	e022      	b.n	8003276 <HAL_PCD_Start+0x62>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f003 fb77 	bl	8006950 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f004 fc1e 	bl	8007aa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800327e:	b590      	push	{r4, r7, lr}
 8003280:	b08d      	sub	sp, #52	@ 0x34
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f004 fcdc 	bl	8007c52 <USB_GetMode>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 848c 	bne.w	8003bba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fc40 	bl	8007b2c <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8482 	beq.w	8003bb8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f004 fc2d 	bl	8007b2c <USB_ReadInterrupts>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d107      	bne.n	80032ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f002 0202 	and.w	r2, r2, #2
 80032ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f004 fc1b 	bl	8007b2c <USB_ReadInterrupts>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d161      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0210 	bic.w	r2, r2, #16
 800330e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4413      	add	r3, r2
 800332c:	3304      	adds	r3, #4
 800332e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003336:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800333a:	d124      	bne.n	8003386 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d035      	beq.n	80033b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	6a38      	ldr	r0, [r7, #32]
 800335c:	f004 fa52 	bl	8007804 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800336c:	441a      	add	r2, r3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337e:	441a      	add	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	615a      	str	r2, [r3, #20]
 8003384:	e016      	b.n	80033b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800338c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003390:	d110      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003398:	2208      	movs	r2, #8
 800339a:	4619      	mov	r1, r3
 800339c:	6a38      	ldr	r0, [r7, #32]
 800339e:	f004 fa31 	bl	8007804 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ae:	441a      	add	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0210 	orr.w	r2, r2, #16
 80033c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f004 fbaf 	bl	8007b2c <USB_ReadInterrupts>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033d8:	f040 80a7 	bne.w	800352a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f004 fbb4 	bl	8007b52 <USB_ReadDevAllOutEpInterrupt>
 80033ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80033ec:	e099      	b.n	8003522 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 808e 	beq.w	8003516 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f004 fbd8 	bl	8007bba <USB_ReadDevOutEPInterrupt>
 800340a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	2301      	movs	r3, #1
 8003426:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003428:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fea4 	bl	8004178 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003446:	461a      	mov	r2, r3
 8003448:	2308      	movs	r3, #8
 800344a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800344c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 ff7a 	bl	8004348 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	2310      	movs	r3, #16
 800346e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d030      	beq.n	80034dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003482:	2b80      	cmp	r3, #128	@ 0x80
 8003484:	d109      	bne.n	800349a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003494:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003498:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800349a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	3304      	adds	r3, #4
 80034ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	78db      	ldrb	r3, [r3, #3]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d108      	bne.n	80034ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f006 ff97 	bl	800a3f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d6:	461a      	mov	r2, r3
 80034d8:	2302      	movs	r3, #2
 80034da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f2:	461a      	mov	r2, r3
 80034f4:	2320      	movs	r3, #32
 80034f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800350e:	461a      	mov	r2, r3
 8003510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003514:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	3301      	adds	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	f47f af62 	bne.w	80033ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f004 fafc 	bl	8007b2c <USB_ReadInterrupts>
 8003534:	4603      	mov	r3, r0
 8003536:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800353a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800353e:	f040 80db 	bne.w	80036f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f004 fb1d 	bl	8007b86 <USB_ReadDevAllInEpInterrupt>
 800354c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003552:	e0cd      	b.n	80036f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80c2 	beq.w	80036e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f004 fb43 	bl	8007bf6 <USB_ReadDevInEPInterrupt>
 8003570:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d057      	beq.n	800362c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	2201      	movs	r2, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43db      	mvns	r3, r3
 8003596:	69f9      	ldr	r1, [r7, #28]
 8003598:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800359c:	4013      	ands	r3, r2
 800359e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	2301      	movs	r3, #1
 80035b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	799b      	ldrb	r3, [r3, #6]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d132      	bne.n	8003620 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3320      	adds	r3, #32
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4403      	add	r3, r0
 80035da:	331c      	adds	r3, #28
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4419      	add	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4403      	add	r3, r0
 80035ee:	3320      	adds	r3, #32
 80035f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d113      	bne.n	8003620 <HAL_PCD_IRQHandler+0x3a2>
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3324      	adds	r3, #36	@ 0x24
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d108      	bne.n	8003620 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003618:	461a      	mov	r2, r3
 800361a:	2101      	movs	r1, #1
 800361c:	f004 fb4a 	bl	8007cb4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	b2db      	uxtb	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f006 fe61 	bl	800a2ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003642:	461a      	mov	r2, r3
 8003644:	2308      	movs	r3, #8
 8003646:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800365e:	461a      	mov	r2, r3
 8003660:	2310      	movs	r3, #16
 8003662:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800367a:	461a      	mov	r2, r3
 800367c:	2340      	movs	r3, #64	@ 0x40
 800367e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d023      	beq.n	80036d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800368a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800368c:	6a38      	ldr	r0, [r7, #32]
 800368e:	f003 fb31 	bl	8006cf4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	3310      	adds	r3, #16
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	3304      	adds	r3, #4
 80036a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	78db      	ldrb	r3, [r3, #3]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d108      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2200      	movs	r2, #0
 80036b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f006 feae 	bl	800a41c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036cc:	461a      	mov	r2, r3
 80036ce:	2302      	movs	r3, #2
 80036d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fcbd 	bl	800405e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	3301      	adds	r3, #1
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f47f af2e 	bne.w	8003554 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 fa15 	bl	8007b2c <USB_ReadInterrupts>
 8003702:	4603      	mov	r3, r0
 8003704:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003708:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800370c:	d122      	bne.n	8003754 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003728:	2b01      	cmp	r3, #1
 800372a:	d108      	bne.n	800373e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003734:	2100      	movs	r1, #0
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fea4 	bl	8004484 <HAL_PCDEx_LPM_Callback>
 800373c:	e002      	b.n	8003744 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f006 fe4c 	bl	800a3dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f004 f9e7 	bl	8007b2c <USB_ReadInterrupts>
 800375e:	4603      	mov	r3, r0
 8003760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003768:	d112      	bne.n	8003790 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d102      	bne.n	8003780 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f006 fe08 	bl	800a390 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800378e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f004 f9c9 	bl	8007b2c <USB_ReadInterrupts>
 800379a:	4603      	mov	r3, r0
 800379c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a4:	f040 80b7 	bne.w	8003916 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2110      	movs	r1, #16
 80037c2:	4618      	mov	r0, r3
 80037c4:	f003 fa96 	bl	8006cf4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037cc:	e046      	b.n	800385c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037da:	461a      	mov	r2, r3
 80037dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f2:	0151      	lsls	r1, r2, #5
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	440a      	add	r2, r1
 80037f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003800:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380e:	461a      	mov	r2, r3
 8003810:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003814:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	440a      	add	r2, r1
 800382c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003830:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003834:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003846:	0151      	lsls	r1, r2, #5
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	440a      	add	r2, r1
 800384c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003850:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003854:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003858:	3301      	adds	r3, #1
 800385a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	461a      	mov	r2, r3
 8003862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003864:	4293      	cmp	r3, r2
 8003866:	d3b2      	bcc.n	80037ce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003876:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800387a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7bdb      	ldrb	r3, [r3, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800388a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003894:	f043 030b 	orr.w	r3, r3, #11
 8003898:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038aa:	f043 030b 	orr.w	r3, r3, #11
 80038ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80038b0:	e015      	b.n	80038de <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038c4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80038c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d8:	f043 030b 	orr.w	r3, r3, #11
 80038dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80038f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003900:	461a      	mov	r2, r3
 8003902:	f004 f9d7 	bl	8007cb4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f004 f906 	bl	8007b2c <USB_ReadInterrupts>
 8003920:	4603      	mov	r3, r0
 8003922:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392a:	d123      	bne.n	8003974 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f004 f99c 	bl	8007c6e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f003 fa53 	bl	8006de6 <USB_GetDevSpeed>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681c      	ldr	r4, [r3, #0]
 800394c:	f001 fa0a 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8003950:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003956:	461a      	mov	r2, r3
 8003958:	4620      	mov	r0, r4
 800395a:	f002 ff57 	bl	800680c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f006 fced 	bl	800a33e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003972:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f004 f8d7 	bl	8007b2c <USB_ReadInterrupts>
 800397e:	4603      	mov	r3, r0
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b08      	cmp	r3, #8
 8003986:	d10a      	bne.n	800399e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f006 fcca 	bl	800a322 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f002 0208 	and.w	r2, r2, #8
 800399c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f004 f8c2 	bl	8007b2c <USB_ReadInterrupts>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ae:	2b80      	cmp	r3, #128	@ 0x80
 80039b0:	d123      	bne.n	80039fa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039be:	2301      	movs	r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c2:	e014      	b.n	80039ee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d105      	bne.n	80039e8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fb0a 	bl	8003ffc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	3301      	adds	r3, #1
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	791b      	ldrb	r3, [r3, #4]
 80039f2:	461a      	mov	r2, r3
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d3e4      	bcc.n	80039c4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f004 f894 	bl	8007b2c <USB_ReadInterrupts>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a0e:	d13c      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a10:	2301      	movs	r3, #1
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a14:	e02b      	b.n	8003a6e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3318      	adds	r3, #24
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d115      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	da12      	bge.n	8003a68 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	3317      	adds	r3, #23
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 faca 	bl	8003ffc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	791b      	ldrb	r3, [r3, #4]
 8003a72:	461a      	mov	r2, r3
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d3cd      	bcc.n	8003a16 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 f84c 	bl	8007b2c <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a9e:	d156      	bne.n	8003b4e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa4:	e045      	b.n	8003b32 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d12e      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ace:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da2b      	bge.n	8003b2c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	0c1a      	lsrs	r2, r3, #16
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003ade:	4053      	eors	r3, r2
 8003ae0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d121      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b28:	6053      	str	r3, [r2, #4]
            break;
 8003b2a:	e008      	b.n	8003b3e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	3301      	adds	r3, #1
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	791b      	ldrb	r3, [r3, #4]
 8003b36:	461a      	mov	r2, r3
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d3b3      	bcc.n	8003aa6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695a      	ldr	r2, [r3, #20]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f003 ffea 	bl	8007b2c <USB_ReadInterrupts>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b62:	d10a      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f006 fc6b 	bl	800a440 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f003 ffd4 	bl	8007b2c <USB_ReadInterrupts>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d115      	bne.n	8003bba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f006 fc5b 	bl	800a45c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	e000      	b.n	8003bba <HAL_PCD_IRQHandler+0x93c>
      return;
 8003bb8:	bf00      	nop
    }
  }
}
 8003bba:	3734      	adds	r7, #52	@ 0x34
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd90      	pop	{r4, r7, pc}

08003bc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_PCD_SetAddress+0x1a>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e012      	b.n	8003c00 <HAL_PCD_SetAddress+0x40>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 ff33 	bl	8007a5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	70fb      	strb	r3, [r7, #3]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	803b      	strh	r3, [r7, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	da0f      	bge.n	8003c4e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	3310      	adds	r3, #16
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	3304      	adds	r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	705a      	strb	r2, [r3, #1]
 8003c4c:	e00f      	b.n	8003c6e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	3304      	adds	r3, #4
 8003c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003c7a:	883b      	ldrh	r3, [r7, #0]
 8003c7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	78ba      	ldrb	r2, [r7, #2]
 8003c88:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c9c:	78bb      	ldrb	r3, [r7, #2]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d102      	bne.n	8003ca8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_PCD_EP_Open+0xae>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e00e      	b.n	8003cd4 <HAL_PCD_EP_Open+0xcc>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f003 f8b3 	bl	8006e30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003cd2:	7afb      	ldrb	r3, [r7, #11]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da0f      	bge.n	8003d10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	f003 020f 	and.w	r2, r3, #15
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	3310      	adds	r3, #16
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	705a      	strb	r2, [r3, #1]
 8003d0e:	e00f      	b.n	8003d30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	f003 020f 	and.w	r2, r3, #15
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	3304      	adds	r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_PCD_EP_Close+0x6e>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e00e      	b.n	8003d68 <HAL_PCD_EP_Close+0x8c>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f003 f8f1 	bl	8006f40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d80:	7afb      	ldrb	r3, [r7, #11]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4413      	add	r3, r2
 8003d96:	3304      	adds	r3, #4
 8003d98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2200      	movs	r2, #0
 8003db0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003db2:	7afb      	ldrb	r3, [r7, #11]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	799b      	ldrb	r3, [r3, #6]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d102      	bne.n	8003dcc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	799b      	ldrb	r3, [r3, #6]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6979      	ldr	r1, [r7, #20]
 8003dd8:	f003 f98e 	bl	80070f8 <USB_EPStartXfer>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003e08:	681b      	ldr	r3, [r3, #0]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	460b      	mov	r3, r1
 8003e24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e26:	7afb      	ldrb	r3, [r7, #11]
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	3310      	adds	r3, #16
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2201      	movs	r2, #1
 8003e54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e56:	7afb      	ldrb	r3, [r7, #11]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	799b      	ldrb	r3, [r3, #6]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d102      	bne.n	8003e70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	799b      	ldrb	r3, [r3, #6]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6979      	ldr	r1, [r7, #20]
 8003e7c:	f003 f93c 	bl	80070f8 <USB_EPStartXfer>

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	7912      	ldrb	r2, [r2, #4]
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e04f      	b.n	8003f48 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	da0f      	bge.n	8003ed0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	f003 020f 	and.w	r2, r3, #15
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	3310      	adds	r3, #16
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	705a      	strb	r2, [r3, #1]
 8003ece:	e00d      	b.n	8003eec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_PCD_EP_SetStall+0x82>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e01d      	b.n	8003f48 <HAL_PCD_EP_SetStall+0xbe>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68f9      	ldr	r1, [r7, #12]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f003 fcca 	bl	80078b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7999      	ldrb	r1, [r3, #6]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f003 febb 	bl	8007cb4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	7912      	ldrb	r2, [r2, #4]
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e042      	b.n	8003ff4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	da0f      	bge.n	8003f96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	f003 020f 	and.w	r2, r3, #15
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	3310      	adds	r3, #16
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	705a      	strb	r2, [r3, #1]
 8003f94:	e00f      	b.n	8003fb6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f003 020f 	and.w	r2, r3, #15
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	4413      	add	r3, r2
 8003fac:	3304      	adds	r3, #4
 8003fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_PCD_EP_ClrStall+0x86>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e00e      	b.n	8003ff4 <HAL_PCD_EP_ClrStall+0xa4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68f9      	ldr	r1, [r7, #12]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f003 fcd3 	bl	8007990 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800400c:	2b00      	cmp	r3, #0
 800400e:	da0c      	bge.n	800402a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 020f 	and.w	r2, r3, #15
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	3310      	adds	r3, #16
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	3304      	adds	r3, #4
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	e00c      	b.n	8004044 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	4413      	add	r3, r2
 8004040:	3304      	adds	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	4618      	mov	r0, r3
 800404c:	f003 faf2 	bl	8007634 <USB_EPStopXfer>
 8004050:	4603      	mov	r3, r0
 8004052:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004054:	7afb      	ldrb	r3, [r7, #11]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08a      	sub	sp, #40	@ 0x28
 8004062:	af02      	add	r7, sp, #8
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	3310      	adds	r3, #16
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	3304      	adds	r3, #4
 8004084:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	429a      	cmp	r2, r3
 8004090:	d901      	bls.n	8004096 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e06b      	b.n	800416e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d902      	bls.n	80040b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3303      	adds	r3, #3
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040ba:	e02a      	b.n	8004112 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d902      	bls.n	80040d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	3303      	adds	r3, #3
 80040dc:	089b      	lsrs	r3, r3, #2
 80040de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68d9      	ldr	r1, [r3, #12]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	4603      	mov	r3, r0
 80040f4:	6978      	ldr	r0, [r7, #20]
 80040f6:	f003 fb47 	bl	8007788 <USB_WritePacket>

    ep->xfer_buff  += len;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	441a      	add	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	441a      	add	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	429a      	cmp	r2, r3
 8004126:	d809      	bhi.n	800413c <PCD_WriteEmptyTxFifo+0xde>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004130:	429a      	cmp	r2, r3
 8004132:	d203      	bcs.n	800413c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1bf      	bne.n	80040bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	429a      	cmp	r2, r3
 8004146:	d811      	bhi.n	800416c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	2201      	movs	r2, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	43db      	mvns	r3, r3
 8004162:	6939      	ldr	r1, [r7, #16]
 8004164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004168:	4013      	ands	r3, r2
 800416a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	333c      	adds	r3, #60	@ 0x3c
 8004190:	3304      	adds	r3, #4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	799b      	ldrb	r3, [r3, #6]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d17b      	bne.n	80042a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4a61      	ldr	r2, [pc, #388]	@ (8004340 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	f240 80b9 	bls.w	8004334 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80b3 	beq.w	8004334 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041da:	461a      	mov	r2, r3
 80041dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041e0:	6093      	str	r3, [r2, #8]
 80041e2:	e0a7      	b.n	8004334 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fa:	461a      	mov	r2, r3
 80041fc:	2320      	movs	r3, #32
 80041fe:	6093      	str	r3, [r2, #8]
 8004200:	e098      	b.n	8004334 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 8093 	bne.w	8004334 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	4a4b      	ldr	r2, [pc, #300]	@ (8004340 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d90f      	bls.n	8004236 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004232:	6093      	str	r3, [r2, #8]
 8004234:	e07e      	b.n	8004334 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4413      	add	r3, r2
 8004248:	3304      	adds	r3, #4
 800424a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a1a      	ldr	r2, [r3, #32]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	0159      	lsls	r1, r3, #5
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	440b      	add	r3, r1
 8004258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004262:	1ad2      	subs	r2, r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d114      	bne.n	8004298 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004280:	461a      	mov	r2, r3
 8004282:	2101      	movs	r1, #1
 8004284:	f003 fd16 	bl	8007cb4 <USB_EP0_OutStart>
 8004288:	e006      	b.n	8004298 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	441a      	add	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f006 f80a 	bl	800a2b8 <HAL_PCD_DataOutStageCallback>
 80042a4:	e046      	b.n	8004334 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4a26      	ldr	r2, [pc, #152]	@ (8004344 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d124      	bne.n	80042f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c4:	461a      	mov	r2, r3
 80042c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ca:	6093      	str	r3, [r2, #8]
 80042cc:	e032      	b.n	8004334 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e4:	461a      	mov	r2, r3
 80042e6:	2320      	movs	r3, #32
 80042e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	4619      	mov	r1, r3
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f005 ffe1 	bl	800a2b8 <HAL_PCD_DataOutStageCallback>
 80042f6:	e01d      	b.n	8004334 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d114      	bne.n	8004328 <PCD_EP_OutXfrComplete_int+0x1b0>
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d108      	bne.n	8004328 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004320:	461a      	mov	r2, r3
 8004322:	2100      	movs	r1, #0
 8004324:	f003 fcc6 	bl	8007cb4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f005 ffc2 	bl	800a2b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	4f54300a 	.word	0x4f54300a
 8004344:	4f54310a 	.word	0x4f54310a

08004348 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	333c      	adds	r3, #60	@ 0x3c
 8004360:	3304      	adds	r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4a15      	ldr	r2, [pc, #84]	@ (80043d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d90e      	bls.n	800439c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004394:	461a      	mov	r2, r3
 8004396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800439a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f005 ff79 	bl	800a294 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a0a      	ldr	r2, [pc, #40]	@ (80043d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d90c      	bls.n	80043c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	799b      	ldrb	r3, [r3, #6]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d108      	bne.n	80043c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043bc:	461a      	mov	r2, r3
 80043be:	2101      	movs	r1, #1
 80043c0:	f003 fc78 	bl	8007cb4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	4f54300a 	.word	0x4f54300a

080043d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
 80043e0:	4613      	mov	r3, r2
 80043e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d107      	bne.n	8004402 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043f2:	883b      	ldrh	r3, [r7, #0]
 80043f4:	0419      	lsls	r1, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004400:	e028      	b.n	8004454 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	4413      	add	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004410:	2300      	movs	r3, #0
 8004412:	73fb      	strb	r3, [r7, #15]
 8004414:	e00d      	b.n	8004432 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	3340      	adds	r3, #64	@ 0x40
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	4413      	add	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	3301      	adds	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
 8004432:	7bfa      	ldrb	r2, [r7, #15]
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	3b01      	subs	r3, #1
 8004438:	429a      	cmp	r2, r3
 800443a:	d3ec      	bcc.n	8004416 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800443c:	883b      	ldrh	r3, [r7, #0]
 800443e:	0418      	lsls	r0, r3, #16
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	3b01      	subs	r3, #1
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	4302      	orrs	r2, r0
 800444c:	3340      	adds	r3, #64	@ 0x40
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e267      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d075      	beq.n	80045a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ba:	4b88      	ldr	r3, [pc, #544]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d00c      	beq.n	80044e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c6:	4b85      	ldr	r3, [pc, #532]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d112      	bne.n	80044f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d2:	4b82      	ldr	r3, [pc, #520]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044de:	d10b      	bne.n	80044f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e0:	4b7e      	ldr	r3, [pc, #504]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d05b      	beq.n	80045a4 <HAL_RCC_OscConfig+0x108>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d157      	bne.n	80045a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e242      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004500:	d106      	bne.n	8004510 <HAL_RCC_OscConfig+0x74>
 8004502:	4b76      	ldr	r3, [pc, #472]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a75      	ldr	r2, [pc, #468]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e01d      	b.n	800454c <HAL_RCC_OscConfig+0xb0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004518:	d10c      	bne.n	8004534 <HAL_RCC_OscConfig+0x98>
 800451a:	4b70      	ldr	r3, [pc, #448]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6f      	ldr	r2, [pc, #444]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	4b6d      	ldr	r3, [pc, #436]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6c      	ldr	r2, [pc, #432]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e00b      	b.n	800454c <HAL_RCC_OscConfig+0xb0>
 8004534:	4b69      	ldr	r3, [pc, #420]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a68      	ldr	r2, [pc, #416]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800453a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b66      	ldr	r3, [pc, #408]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a65      	ldr	r2, [pc, #404]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800454a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d013      	beq.n	800457c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fd fe78 	bl	8002248 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455c:	f7fd fe74 	bl	8002248 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	@ 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e207      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	4b5b      	ldr	r3, [pc, #364]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0xc0>
 800457a:	e014      	b.n	80045a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fd fe64 	bl	8002248 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004584:	f7fd fe60 	bl	8002248 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	@ 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e1f3      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	4b51      	ldr	r3, [pc, #324]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0xe8>
 80045a2:	e000      	b.n	80045a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d063      	beq.n	800467a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045b2:	4b4a      	ldr	r3, [pc, #296]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045be:	4b47      	ldr	r3, [pc, #284]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d11c      	bne.n	8004604 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ca:	4b44      	ldr	r3, [pc, #272]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d116      	bne.n	8004604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d6:	4b41      	ldr	r3, [pc, #260]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_RCC_OscConfig+0x152>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e1c7      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ee:	4b3b      	ldr	r3, [pc, #236]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4937      	ldr	r1, [pc, #220]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004602:	e03a      	b.n	800467a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d020      	beq.n	800464e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800460c:	4b34      	ldr	r3, [pc, #208]	@ (80046e0 <HAL_RCC_OscConfig+0x244>)
 800460e:	2201      	movs	r2, #1
 8004610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fd fe19 	bl	8002248 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461a:	f7fd fe15 	bl	8002248 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e1a8      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462c:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f0      	beq.n	800461a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	4b28      	ldr	r3, [pc, #160]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4925      	ldr	r1, [pc, #148]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]
 800464c:	e015      	b.n	800467a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464e:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <HAL_RCC_OscConfig+0x244>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fd fdf8 	bl	8002248 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465c:	f7fd fdf4 	bl	8002248 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e187      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	4b1b      	ldr	r3, [pc, #108]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d036      	beq.n	80046f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468e:	4b15      	ldr	r3, [pc, #84]	@ (80046e4 <HAL_RCC_OscConfig+0x248>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fd fdd8 	bl	8002248 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469c:	f7fd fdd4 	bl	8002248 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e167      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <HAL_RCC_OscConfig+0x240>)
 80046b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x200>
 80046ba:	e01b      	b.n	80046f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046bc:	4b09      	ldr	r3, [pc, #36]	@ (80046e4 <HAL_RCC_OscConfig+0x248>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c2:	f7fd fdc1 	bl	8002248 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c8:	e00e      	b.n	80046e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ca:	f7fd fdbd 	bl	8002248 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d907      	bls.n	80046e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e150      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
 80046dc:	40023800 	.word	0x40023800
 80046e0:	42470000 	.word	0x42470000
 80046e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e8:	4b88      	ldr	r3, [pc, #544]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80046ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ea      	bne.n	80046ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8097 	beq.w	8004830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004702:	2300      	movs	r3, #0
 8004704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004706:	4b81      	ldr	r3, [pc, #516]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10f      	bne.n	8004732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	4b7d      	ldr	r3, [pc, #500]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	4a7c      	ldr	r2, [pc, #496]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004720:	6413      	str	r3, [r2, #64]	@ 0x40
 8004722:	4b7a      	ldr	r3, [pc, #488]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004732:	4b77      	ldr	r3, [pc, #476]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d118      	bne.n	8004770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473e:	4b74      	ldr	r3, [pc, #464]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a73      	ldr	r2, [pc, #460]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474a:	f7fd fd7d 	bl	8002248 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fd fd79 	bl	8002248 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e10c      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	4b6a      	ldr	r3, [pc, #424]	@ (8004910 <HAL_RCC_OscConfig+0x474>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x2ea>
 8004778:	4b64      	ldr	r3, [pc, #400]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	4a63      	ldr	r2, [pc, #396]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	@ 0x70
 8004784:	e01c      	b.n	80047c0 <HAL_RCC_OscConfig+0x324>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b05      	cmp	r3, #5
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x30c>
 800478e:	4b5f      	ldr	r3, [pc, #380]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	4a5e      	ldr	r2, [pc, #376]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 0304 	orr.w	r3, r3, #4
 8004798:	6713      	str	r3, [r2, #112]	@ 0x70
 800479a:	4b5c      	ldr	r3, [pc, #368]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	4a5b      	ldr	r2, [pc, #364]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a6:	e00b      	b.n	80047c0 <HAL_RCC_OscConfig+0x324>
 80047a8:	4b58      	ldr	r3, [pc, #352]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ac:	4a57      	ldr	r2, [pc, #348]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b4:	4b55      	ldr	r3, [pc, #340]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b8:	4a54      	ldr	r2, [pc, #336]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047ba:	f023 0304 	bic.w	r3, r3, #4
 80047be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d015      	beq.n	80047f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fd fd3e 	bl	8002248 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d0:	f7fd fd3a 	bl	8002248 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0cb      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e6:	4b49      	ldr	r3, [pc, #292]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ee      	beq.n	80047d0 <HAL_RCC_OscConfig+0x334>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f4:	f7fd fd28 	bl	8002248 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fd fd24 	bl	8002248 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e0b5      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004812:	4b3e      	ldr	r3, [pc, #248]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1ee      	bne.n	80047fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800481e:	7dfb      	ldrb	r3, [r7, #23]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d105      	bne.n	8004830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004824:	4b39      	ldr	r3, [pc, #228]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	4a38      	ldr	r2, [pc, #224]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800482a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800482e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80a1 	beq.w	800497c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800483a:	4b34      	ldr	r3, [pc, #208]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b08      	cmp	r3, #8
 8004844:	d05c      	beq.n	8004900 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d141      	bne.n	80048d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484e:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <HAL_RCC_OscConfig+0x478>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fd fcf8 	bl	8002248 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fd fcf4 	bl	8002248 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e087      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	4b27      	ldr	r3, [pc, #156]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	3b01      	subs	r3, #1
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	061b      	lsls	r3, r3, #24
 800489e:	491b      	ldr	r1, [pc, #108]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004914 <HAL_RCC_OscConfig+0x478>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048aa:	f7fd fccd 	bl	8002248 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b2:	f7fd fcc9 	bl	8002248 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e05c      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c4:	4b11      	ldr	r3, [pc, #68]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x416>
 80048d0:	e054      	b.n	800497c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d2:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <HAL_RCC_OscConfig+0x478>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fd fcb6 	bl	8002248 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fd fcb2 	bl	8002248 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e045      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f2:	4b06      	ldr	r3, [pc, #24]	@ (800490c <HAL_RCC_OscConfig+0x470>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x444>
 80048fe:	e03d      	b.n	800497c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d107      	bne.n	8004918 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e038      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
 800490c:	40023800 	.word	0x40023800
 8004910:	40007000 	.word	0x40007000
 8004914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004918:	4b1b      	ldr	r3, [pc, #108]	@ (8004988 <HAL_RCC_OscConfig+0x4ec>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d028      	beq.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d121      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d11a      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004948:	4013      	ands	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800494e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004950:	4293      	cmp	r3, r2
 8004952:	d111      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	3b01      	subs	r3, #1
 8004962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d107      	bne.n	8004978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800

0800498c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0cc      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a0:	4b68      	ldr	r3, [pc, #416]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d90c      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b65      	ldr	r3, [pc, #404]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b63      	ldr	r3, [pc, #396]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0b8      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e0:	4b59      	ldr	r3, [pc, #356]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a58      	ldr	r2, [pc, #352]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f8:	4b53      	ldr	r3, [pc, #332]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a52      	ldr	r2, [pc, #328]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a04:	4b50      	ldr	r3, [pc, #320]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	494d      	ldr	r1, [pc, #308]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d044      	beq.n	8004aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2a:	4b47      	ldr	r3, [pc, #284]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d119      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d107      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e067      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6a:	4b37      	ldr	r3, [pc, #220]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f023 0203 	bic.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4934      	ldr	r1, [pc, #208]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a7c:	f7fd fbe4 	bl	8002248 <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a84:	f7fd fbe0 	bl	8002248 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e04f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 020c 	and.w	r2, r3, #12
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1eb      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aac:	4b25      	ldr	r3, [pc, #148]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d20c      	bcs.n	8004ad4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b22      	ldr	r3, [pc, #136]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b20      	ldr	r3, [pc, #128]	@ (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e032      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae0:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4916      	ldr	r1, [pc, #88]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004afe:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	490e      	ldr	r1, [pc, #56]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b12:	f000 f821 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8004b16:	4602      	mov	r2, r0
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	490a      	ldr	r1, [pc, #40]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004b24:	5ccb      	ldrb	r3, [r1, r3]
 8004b26:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2a:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b2e:	4b09      	ldr	r3, [pc, #36]	@ (8004b54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fd fb44 	bl	80021c0 <HAL_InitTick>

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023c00 	.word	0x40023c00
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	08013d5c 	.word	0x08013d5c
 8004b50:	2000000c 	.word	0x2000000c
 8004b54:	20000010 	.word	0x20000010

08004b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b094      	sub	sp, #80	@ 0x50
 8004b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b70:	4b79      	ldr	r3, [pc, #484]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d00d      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x40>
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	f200 80e1 	bhi.w	8004d44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x34>
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b8a:	e0db      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b8c:	4b73      	ldr	r3, [pc, #460]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b90:	e0db      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b92:	4b73      	ldr	r3, [pc, #460]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b96:	e0d8      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b98:	4b6f      	ldr	r3, [pc, #444]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ba0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d063      	beq.n	8004c76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bae:	4b6a      	ldr	r3, [pc, #424]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bca:	4622      	mov	r2, r4
 8004bcc:	462b      	mov	r3, r5
 8004bce:	f04f 0000 	mov.w	r0, #0
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	0159      	lsls	r1, r3, #5
 8004bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bdc:	0150      	lsls	r0, r2, #5
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4621      	mov	r1, r4
 8004be4:	1a51      	subs	r1, r2, r1
 8004be6:	6139      	str	r1, [r7, #16]
 8004be8:	4629      	mov	r1, r5
 8004bea:	eb63 0301 	sbc.w	r3, r3, r1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	018b      	lsls	r3, r1, #6
 8004c00:	4651      	mov	r1, sl
 8004c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c06:	4651      	mov	r1, sl
 8004c08:	018a      	lsls	r2, r1, #6
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c10:	4659      	mov	r1, fp
 8004c12:	eb63 0901 	sbc.w	r9, r3, r1
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2a:	4690      	mov	r8, r2
 8004c2c:	4699      	mov	r9, r3
 8004c2e:	4623      	mov	r3, r4
 8004c30:	eb18 0303 	adds.w	r3, r8, r3
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	462b      	mov	r3, r5
 8004c38:	eb49 0303 	adc.w	r3, r9, r3
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	024b      	lsls	r3, r1, #9
 8004c4e:	4621      	mov	r1, r4
 8004c50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c54:	4621      	mov	r1, r4
 8004c56:	024a      	lsls	r2, r1, #9
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c5e:	2200      	movs	r2, #0
 8004c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c68:	f7fc f80e 	bl	8000c88 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4613      	mov	r3, r2
 8004c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c74:	e058      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c76:	4b38      	ldr	r3, [pc, #224]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	4611      	mov	r1, r2
 8004c82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c90:	4642      	mov	r2, r8
 8004c92:	464b      	mov	r3, r9
 8004c94:	f04f 0000 	mov.w	r0, #0
 8004c98:	f04f 0100 	mov.w	r1, #0
 8004c9c:	0159      	lsls	r1, r3, #5
 8004c9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca2:	0150      	lsls	r0, r2, #5
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4641      	mov	r1, r8
 8004caa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cae:	4649      	mov	r1, r9
 8004cb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cc8:	ebb2 040a 	subs.w	r4, r2, sl
 8004ccc:	eb63 050b 	sbc.w	r5, r3, fp
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	00eb      	lsls	r3, r5, #3
 8004cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cde:	00e2      	lsls	r2, r4, #3
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	461d      	mov	r5, r3
 8004ce4:	4643      	mov	r3, r8
 8004ce6:	18e3      	adds	r3, r4, r3
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	464b      	mov	r3, r9
 8004cec:	eb45 0303 	adc.w	r3, r5, r3
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cfe:	4629      	mov	r1, r5
 8004d00:	028b      	lsls	r3, r1, #10
 8004d02:	4621      	mov	r1, r4
 8004d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d08:	4621      	mov	r1, r4
 8004d0a:	028a      	lsls	r2, r1, #10
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d12:	2200      	movs	r2, #0
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	61fa      	str	r2, [r7, #28]
 8004d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d1c:	f7fb ffb4 	bl	8000c88 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4613      	mov	r3, r2
 8004d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d28:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	0c1b      	lsrs	r3, r3, #16
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	3301      	adds	r3, #1
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d42:	e002      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3750      	adds	r7, #80	@ 0x50
 8004d50:	46bd      	mov	sp, r7
 8004d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	00f42400 	.word	0x00f42400
 8004d60:	007a1200 	.word	0x007a1200

08004d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d68:	4b03      	ldr	r3, [pc, #12]	@ (8004d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	2000000c 	.word	0x2000000c

08004d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d80:	f7ff fff0 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	0a9b      	lsrs	r3, r3, #10
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4903      	ldr	r1, [pc, #12]	@ (8004da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	08013d6c 	.word	0x08013d6c

08004da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004da8:	f7ff ffdc 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0b5b      	lsrs	r3, r3, #13
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	@ (8004dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	08013d6c 	.word	0x08013d6c

08004dcc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e038      	b.n	8004e54 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7fd f866 	bl	8001ec8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3308      	adds	r3, #8
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f001 fbcc 	bl	80065a4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	461a      	mov	r2, r3
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	f001 fc2e 	bl	8006678 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6858      	ldr	r0, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	f001 fc53 	bl	80066d4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	6892      	ldr	r2, [r2, #8]
 8004e36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	6892      	ldr	r2, [r2, #8]
 8004e42:	f041 0101 	orr.w	r1, r1, #1
 8004e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e041      	b.n	8004ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fc ff5c 	bl	8001d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3304      	adds	r3, #4
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	f000 fa80 	bl	80053a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e046      	b.n	8004fa2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a23      	ldr	r2, [pc, #140]	@ (8004fb0 <HAL_TIM_Base_Start+0xb4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d022      	beq.n	8004f6c <HAL_TIM_Base_Start+0x70>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2e:	d01d      	beq.n	8004f6c <HAL_TIM_Base_Start+0x70>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb4 <HAL_TIM_Base_Start+0xb8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d018      	beq.n	8004f6c <HAL_TIM_Base_Start+0x70>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb8 <HAL_TIM_Base_Start+0xbc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <HAL_TIM_Base_Start+0x70>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1c      	ldr	r2, [pc, #112]	@ (8004fbc <HAL_TIM_Base_Start+0xc0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00e      	beq.n	8004f6c <HAL_TIM_Base_Start+0x70>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc0 <HAL_TIM_Base_Start+0xc4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d009      	beq.n	8004f6c <HAL_TIM_Base_Start+0x70>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a19      	ldr	r2, [pc, #100]	@ (8004fc4 <HAL_TIM_Base_Start+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_TIM_Base_Start+0x70>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a18      	ldr	r2, [pc, #96]	@ (8004fc8 <HAL_TIM_Base_Start+0xcc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d111      	bne.n	8004f90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b06      	cmp	r3, #6
 8004f7c:	d010      	beq.n	8004fa0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8e:	e007      	b.n	8004fa0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40010000 	.word	0x40010000
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	40000c00 	.word	0x40000c00
 8004fc0:	40010400 	.word	0x40010400
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40001800 	.word	0x40001800

08004fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d020      	beq.n	8005030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01b      	beq.n	8005030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0202 	mvn.w	r2, #2
 8005000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f9a3 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f995 	bl	800534e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f9a6 	bl	8005376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d020      	beq.n	800507c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01b      	beq.n	800507c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0204 	mvn.w	r2, #4
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f97d 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f96f 	bl	800534e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f980 	bl	8005376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d020      	beq.n	80050c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0208 	mvn.w	r2, #8
 8005098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2204      	movs	r2, #4
 800509e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f957 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f949 	bl	800534e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f95a 	bl	8005376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d020      	beq.n	8005114 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01b      	beq.n	8005114 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2208      	movs	r2, #8
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f931 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f923 	bl	800534e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f934 	bl	8005376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0201 	mvn.w	r2, #1
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f901 	bl	800533a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fae8 	bl	800572c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f905 	bl	800538a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0220 	mvn.w	r2, #32
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 faba 	bl	8005718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_TIM_ConfigClockSource+0x1c>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0b4      	b.n	8005332 <HAL_TIM_ConfigClockSource+0x186>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005200:	d03e      	beq.n	8005280 <HAL_TIM_ConfigClockSource+0xd4>
 8005202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005206:	f200 8087 	bhi.w	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520e:	f000 8086 	beq.w	800531e <HAL_TIM_ConfigClockSource+0x172>
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005216:	d87f      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005218:	2b70      	cmp	r3, #112	@ 0x70
 800521a:	d01a      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0xa6>
 800521c:	2b70      	cmp	r3, #112	@ 0x70
 800521e:	d87b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005220:	2b60      	cmp	r3, #96	@ 0x60
 8005222:	d050      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005224:	2b60      	cmp	r3, #96	@ 0x60
 8005226:	d877      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b50      	cmp	r3, #80	@ 0x50
 800522a:	d03c      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0xfa>
 800522c:	2b50      	cmp	r3, #80	@ 0x50
 800522e:	d873      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b40      	cmp	r3, #64	@ 0x40
 8005232:	d058      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005234:	2b40      	cmp	r3, #64	@ 0x40
 8005236:	d86f      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b30      	cmp	r3, #48	@ 0x30
 800523a:	d064      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	2b30      	cmp	r3, #48	@ 0x30
 800523e:	d86b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b20      	cmp	r3, #32
 8005242:	d060      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 8005244:	2b20      	cmp	r3, #32
 8005246:	d867      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d05c      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 800524c:	2b10      	cmp	r3, #16
 800524e:	d05a      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 8005250:	e062      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005262:	f000 f9bd 	bl	80055e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	609a      	str	r2, [r3, #8]
      break;
 800527e:	e04f      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005290:	f000 f9a6 	bl	80055e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052a2:	609a      	str	r2, [r3, #8]
      break;
 80052a4:	e03c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b2:	461a      	mov	r2, r3
 80052b4:	f000 f91a 	bl	80054ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2150      	movs	r1, #80	@ 0x50
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f973 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 80052c4:	e02c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d2:	461a      	mov	r2, r3
 80052d4:	f000 f939 	bl	800554a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2160      	movs	r1, #96	@ 0x60
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f963 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 80052e4:	e01c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 f8fa 	bl	80054ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2140      	movs	r1, #64	@ 0x40
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f953 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8005304:	e00c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4619      	mov	r1, r3
 8005310:	4610      	mov	r0, r2
 8005312:	f000 f94a 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8005316:	e003      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
      break;
 800531c:	e000      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800531e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a43      	ldr	r2, [pc, #268]	@ (80054c0 <TIM_Base_SetConfig+0x120>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <TIM_Base_SetConfig+0x40>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053be:	d00f      	beq.n	80053e0 <TIM_Base_SetConfig+0x40>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a40      	ldr	r2, [pc, #256]	@ (80054c4 <TIM_Base_SetConfig+0x124>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00b      	beq.n	80053e0 <TIM_Base_SetConfig+0x40>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a3f      	ldr	r2, [pc, #252]	@ (80054c8 <TIM_Base_SetConfig+0x128>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d007      	beq.n	80053e0 <TIM_Base_SetConfig+0x40>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a3e      	ldr	r2, [pc, #248]	@ (80054cc <TIM_Base_SetConfig+0x12c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a3d      	ldr	r2, [pc, #244]	@ (80054d0 <TIM_Base_SetConfig+0x130>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d108      	bne.n	80053f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a32      	ldr	r2, [pc, #200]	@ (80054c0 <TIM_Base_SetConfig+0x120>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d02b      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005400:	d027      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2f      	ldr	r2, [pc, #188]	@ (80054c4 <TIM_Base_SetConfig+0x124>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d023      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a2e      	ldr	r2, [pc, #184]	@ (80054c8 <TIM_Base_SetConfig+0x128>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d01f      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2d      	ldr	r2, [pc, #180]	@ (80054cc <TIM_Base_SetConfig+0x12c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01b      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2c      	ldr	r2, [pc, #176]	@ (80054d0 <TIM_Base_SetConfig+0x130>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d017      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2b      	ldr	r2, [pc, #172]	@ (80054d4 <TIM_Base_SetConfig+0x134>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2a      	ldr	r2, [pc, #168]	@ (80054d8 <TIM_Base_SetConfig+0x138>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00f      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a29      	ldr	r2, [pc, #164]	@ (80054dc <TIM_Base_SetConfig+0x13c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00b      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a28      	ldr	r2, [pc, #160]	@ (80054e0 <TIM_Base_SetConfig+0x140>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d007      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a27      	ldr	r2, [pc, #156]	@ (80054e4 <TIM_Base_SetConfig+0x144>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d003      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a26      	ldr	r2, [pc, #152]	@ (80054e8 <TIM_Base_SetConfig+0x148>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d108      	bne.n	8005464 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a0e      	ldr	r2, [pc, #56]	@ (80054c0 <TIM_Base_SetConfig+0x120>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0xf2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a10      	ldr	r2, [pc, #64]	@ (80054d0 <TIM_Base_SetConfig+0x130>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d103      	bne.n	800549a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f043 0204 	orr.w	r2, r3, #4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	601a      	str	r2, [r3, #0]
}
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40010000 	.word	0x40010000
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	40010400 	.word	0x40010400
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40014400 	.word	0x40014400
 80054dc:	40014800 	.word	0x40014800
 80054e0:	40001800 	.word	0x40001800
 80054e4:	40001c00 	.word	0x40001c00
 80054e8:	40002000 	.word	0x40002000

080054ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f023 030a 	bic.w	r3, r3, #10
 8005528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f023 0210 	bic.w	r2, r3, #16
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	031b      	lsls	r3, r3, #12
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005586:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f043 0307 	orr.w	r3, r3, #7
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005634:	2302      	movs	r3, #2
 8005636:	e05a      	b.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a21      	ldr	r2, [pc, #132]	@ (80056fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d022      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005684:	d01d      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1d      	ldr	r2, [pc, #116]	@ (8005700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d018      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1b      	ldr	r2, [pc, #108]	@ (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1a      	ldr	r2, [pc, #104]	@ (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00e      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a18      	ldr	r2, [pc, #96]	@ (800570c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d009      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a17      	ldr	r2, [pc, #92]	@ (8005710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a15      	ldr	r2, [pc, #84]	@ (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d10c      	bne.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40010400 	.word	0x40010400
 8005710:	40014000 	.word	0x40014000
 8005714:	40001800 	.word	0x40001800

08005718 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e042      	b.n	80057d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fc fb12 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2224      	movs	r2, #36	@ 0x24
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fc99 	bl	80060bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b0ba      	sub	sp, #232	@ 0xe8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005806:	2300      	movs	r3, #0
 8005808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800580c:	2300      	movs	r3, #0
 800580e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800581e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10f      	bne.n	8005846 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_UART_IRQHandler+0x66>
 8005832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fb7e 	bl	8005f40 <UART_Receive_IT>
      return;
 8005844:	e273      	b.n	8005d2e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 80de 	beq.w	8005a0c <HAL_UART_IRQHandler+0x22c>
 8005850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800585c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005860:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80d1 	beq.w	8005a0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <HAL_UART_IRQHandler+0xae>
 8005876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800587a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	f043 0201 	orr.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_UART_IRQHandler+0xd2>
 800589a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00b      	beq.n	80058d6 <HAL_UART_IRQHandler+0xf6>
 80058be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	f043 0204 	orr.w	r2, r3, #4
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d011      	beq.n	8005906 <HAL_UART_IRQHandler+0x126>
 80058e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d105      	bne.n	80058fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fe:	f043 0208 	orr.w	r2, r3, #8
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 820a 	beq.w	8005d24 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_UART_IRQHandler+0x14e>
 800591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fb09 	bl	8005f40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005938:	2b40      	cmp	r3, #64	@ 0x40
 800593a:	bf0c      	ite	eq
 800593c:	2301      	moveq	r3, #1
 800593e:	2300      	movne	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <HAL_UART_IRQHandler+0x17a>
 8005952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d04f      	beq.n	80059fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fa14 	bl	8005d88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596a:	2b40      	cmp	r3, #64	@ 0x40
 800596c:	d141      	bne.n	80059f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3314      	adds	r3, #20
 8005974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005984:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800598c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3314      	adds	r3, #20
 8005996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800599a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800599e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1d9      	bne.n	800596e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d013      	beq.n	80059ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c6:	4a8a      	ldr	r2, [pc, #552]	@ (8005bf0 <HAL_UART_IRQHandler+0x410>)
 80059c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fc fe66 	bl	80026a0 <HAL_DMA_Abort_IT>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d016      	beq.n	8005a08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059e4:	4610      	mov	r0, r2
 80059e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	e00e      	b.n	8005a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9b6 	bl	8005d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f0:	e00a      	b.n	8005a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f9b2 	bl	8005d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f8:	e006      	b.n	8005a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f9ae 	bl	8005d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a06:	e18d      	b.n	8005d24 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a08:	bf00      	nop
    return;
 8005a0a:	e18b      	b.n	8005d24 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	f040 8167 	bne.w	8005ce4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8160 	beq.w	8005ce4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8159 	beq.w	8005ce4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a52:	2b40      	cmp	r3, #64	@ 0x40
 8005a54:	f040 80ce 	bne.w	8005bf4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80a9 	beq.w	8005bc0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a76:	429a      	cmp	r2, r3
 8005a78:	f080 80a2 	bcs.w	8005bc0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a8e:	f000 8088 	beq.w	8005ba2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	330c      	adds	r3, #12
 8005a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005abe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1d9      	bne.n	8005a92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3314      	adds	r3, #20
 8005ae4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3314      	adds	r3, #20
 8005afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e1      	bne.n	8005ade <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3314      	adds	r3, #20
 8005b20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3314      	adds	r3, #20
 8005b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e3      	bne.n	8005b1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b72:	f023 0310 	bic.w	r3, r3, #16
 8005b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e3      	bne.n	8005b60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fc fd0f 	bl	80025c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8d9 	bl	8005d70 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005bbe:	e0b3      	b.n	8005d28 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	f040 80ad 	bne.w	8005d28 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd8:	f040 80a6 	bne.w	8005d28 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f8c1 	bl	8005d70 <HAL_UARTEx_RxEventCallback>
      return;
 8005bee:	e09b      	b.n	8005d28 <HAL_UART_IRQHandler+0x548>
 8005bf0:	08005e4f 	.word	0x08005e4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 808e 	beq.w	8005d2c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 8089 	beq.w	8005d2c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	330c      	adds	r3, #12
 8005c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e3      	bne.n	8005c1a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3314      	adds	r3, #20
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	623b      	str	r3, [r7, #32]
   return(result);
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3314      	adds	r3, #20
 8005c72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c76:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e3      	bne.n	8005c52 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0310 	bic.w	r3, r3, #16
 8005cae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005cbc:	61fa      	str	r2, [r7, #28]
 8005cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	69b9      	ldr	r1, [r7, #24]
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e3      	bne.n	8005c98 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f847 	bl	8005d70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ce2:	e023      	b.n	8005d2c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <HAL_UART_IRQHandler+0x524>
 8005cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f8b7 	bl	8005e70 <UART_Transmit_IT>
    return;
 8005d02:	e014      	b.n	8005d2e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00e      	beq.n	8005d2e <HAL_UART_IRQHandler+0x54e>
 8005d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f8f7 	bl	8005f10 <UART_EndTransmit_IT>
    return;
 8005d22:	e004      	b.n	8005d2e <HAL_UART_IRQHandler+0x54e>
    return;
 8005d24:	bf00      	nop
 8005d26:	e002      	b.n	8005d2e <HAL_UART_IRQHandler+0x54e>
      return;
 8005d28:	bf00      	nop
 8005d2a:	e000      	b.n	8005d2e <HAL_UART_IRQHandler+0x54e>
      return;
 8005d2c:	bf00      	nop
  }
}
 8005d2e:	37e8      	adds	r7, #232	@ 0xe8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b095      	sub	sp, #84	@ 0x54
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005db0:	643a      	str	r2, [r7, #64]	@ 0x40
 8005db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005db6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e5      	bne.n	8005d90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e5      	bne.n	8005dc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d119      	bne.n	8005e34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e20:	61ba      	str	r2, [r7, #24]
 8005e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6979      	ldr	r1, [r7, #20]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e5      	bne.n	8005e00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e42:	bf00      	nop
 8005e44:	3754      	adds	r7, #84	@ 0x54
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff ff7a 	bl	8005d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b21      	cmp	r3, #33	@ 0x21
 8005e82:	d13e      	bne.n	8005f02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e8c:	d114      	bne.n	8005eb8 <UART_Transmit_IT+0x48>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d110      	bne.n	8005eb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eaa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	1c9a      	adds	r2, r3, #2
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	621a      	str	r2, [r3, #32]
 8005eb6:	e008      	b.n	8005eca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	1c59      	adds	r1, r3, #1
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6211      	str	r1, [r2, #32]
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10f      	bne.n	8005efe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005eec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005efc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e000      	b.n	8005f04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f02:	2302      	movs	r3, #2
  }
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff feff 	bl	8005d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08c      	sub	sp, #48	@ 0x30
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b22      	cmp	r3, #34	@ 0x22
 8005f5a:	f040 80aa 	bne.w	80060b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f66:	d115      	bne.n	8005f94 <UART_Receive_IT+0x54>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d111      	bne.n	8005f94 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f92:	e024      	b.n	8005fde <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa2:	d007      	beq.n	8005fb4 <UART_Receive_IT+0x74>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <UART_Receive_IT+0x82>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	e008      	b.n	8005fd4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	4619      	mov	r1, r3
 8005fec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d15d      	bne.n	80060ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0220 	bic.w	r2, r2, #32
 8006000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006010:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695a      	ldr	r2, [r3, #20]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0201 	bic.w	r2, r2, #1
 8006020:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006034:	2b01      	cmp	r3, #1
 8006036:	d135      	bne.n	80060a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	330c      	adds	r3, #12
 8006044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	613b      	str	r3, [r7, #16]
   return(result);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f023 0310 	bic.w	r3, r3, #16
 8006054:	627b      	str	r3, [r7, #36]	@ 0x24
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	330c      	adds	r3, #12
 800605c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605e:	623a      	str	r2, [r7, #32]
 8006060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	69f9      	ldr	r1, [r7, #28]
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	61bb      	str	r3, [r7, #24]
   return(result);
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e5      	bne.n	800603e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b10      	cmp	r3, #16
 800607e:	d10a      	bne.n	8006096 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff fe67 	bl	8005d70 <HAL_UARTEx_RxEventCallback>
 80060a2:	e002      	b.n	80060aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fe4f 	bl	8005d48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e002      	b.n	80060b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e000      	b.n	80060b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
  }
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3730      	adds	r7, #48	@ 0x30
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c0:	b0c0      	sub	sp, #256	@ 0x100
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	68d9      	ldr	r1, [r3, #12]
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	ea40 0301 	orr.w	r3, r0, r1
 80060e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006114:	f021 010c 	bic.w	r1, r1, #12
 8006118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006122:	430b      	orrs	r3, r1
 8006124:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006136:	6999      	ldr	r1, [r3, #24]
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	ea40 0301 	orr.w	r3, r0, r1
 8006142:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b8f      	ldr	r3, [pc, #572]	@ (8006388 <UART_SetConfig+0x2cc>)
 800614c:	429a      	cmp	r2, r3
 800614e:	d005      	beq.n	800615c <UART_SetConfig+0xa0>
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b8d      	ldr	r3, [pc, #564]	@ (800638c <UART_SetConfig+0x2d0>)
 8006158:	429a      	cmp	r2, r3
 800615a:	d104      	bne.n	8006166 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800615c:	f7fe fe22 	bl	8004da4 <HAL_RCC_GetPCLK2Freq>
 8006160:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006164:	e003      	b.n	800616e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006166:	f7fe fe09 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 800616a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006178:	f040 810c 	bne.w	8006394 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800617c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006180:	2200      	movs	r2, #0
 8006182:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006186:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800618a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800618e:	4622      	mov	r2, r4
 8006190:	462b      	mov	r3, r5
 8006192:	1891      	adds	r1, r2, r2
 8006194:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006196:	415b      	adcs	r3, r3
 8006198:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800619a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800619e:	4621      	mov	r1, r4
 80061a0:	eb12 0801 	adds.w	r8, r2, r1
 80061a4:	4629      	mov	r1, r5
 80061a6:	eb43 0901 	adc.w	r9, r3, r1
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061be:	4690      	mov	r8, r2
 80061c0:	4699      	mov	r9, r3
 80061c2:	4623      	mov	r3, r4
 80061c4:	eb18 0303 	adds.w	r3, r8, r3
 80061c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061cc:	462b      	mov	r3, r5
 80061ce:	eb49 0303 	adc.w	r3, r9, r3
 80061d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061ea:	460b      	mov	r3, r1
 80061ec:	18db      	adds	r3, r3, r3
 80061ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80061f0:	4613      	mov	r3, r2
 80061f2:	eb42 0303 	adc.w	r3, r2, r3
 80061f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80061f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006200:	f7fa fd42 	bl	8000c88 <__aeabi_uldivmod>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4b61      	ldr	r3, [pc, #388]	@ (8006390 <UART_SetConfig+0x2d4>)
 800620a:	fba3 2302 	umull	r2, r3, r3, r2
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	011c      	lsls	r4, r3, #4
 8006212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006216:	2200      	movs	r2, #0
 8006218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800621c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006220:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006224:	4642      	mov	r2, r8
 8006226:	464b      	mov	r3, r9
 8006228:	1891      	adds	r1, r2, r2
 800622a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800622c:	415b      	adcs	r3, r3
 800622e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006230:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006234:	4641      	mov	r1, r8
 8006236:	eb12 0a01 	adds.w	sl, r2, r1
 800623a:	4649      	mov	r1, r9
 800623c:	eb43 0b01 	adc.w	fp, r3, r1
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800624c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006254:	4692      	mov	sl, r2
 8006256:	469b      	mov	fp, r3
 8006258:	4643      	mov	r3, r8
 800625a:	eb1a 0303 	adds.w	r3, sl, r3
 800625e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006262:	464b      	mov	r3, r9
 8006264:	eb4b 0303 	adc.w	r3, fp, r3
 8006268:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006278:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800627c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006280:	460b      	mov	r3, r1
 8006282:	18db      	adds	r3, r3, r3
 8006284:	643b      	str	r3, [r7, #64]	@ 0x40
 8006286:	4613      	mov	r3, r2
 8006288:	eb42 0303 	adc.w	r3, r2, r3
 800628c:	647b      	str	r3, [r7, #68]	@ 0x44
 800628e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006292:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006296:	f7fa fcf7 	bl	8000c88 <__aeabi_uldivmod>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4611      	mov	r1, r2
 80062a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006390 <UART_SetConfig+0x2d4>)
 80062a2:	fba3 2301 	umull	r2, r3, r3, r1
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	2264      	movs	r2, #100	@ 0x64
 80062aa:	fb02 f303 	mul.w	r3, r2, r3
 80062ae:	1acb      	subs	r3, r1, r3
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062b6:	4b36      	ldr	r3, [pc, #216]	@ (8006390 <UART_SetConfig+0x2d4>)
 80062b8:	fba3 2302 	umull	r2, r3, r3, r2
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062c4:	441c      	add	r4, r3
 80062c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062d8:	4642      	mov	r2, r8
 80062da:	464b      	mov	r3, r9
 80062dc:	1891      	adds	r1, r2, r2
 80062de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062e0:	415b      	adcs	r3, r3
 80062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062e8:	4641      	mov	r1, r8
 80062ea:	1851      	adds	r1, r2, r1
 80062ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80062ee:	4649      	mov	r1, r9
 80062f0:	414b      	adcs	r3, r1
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006300:	4659      	mov	r1, fp
 8006302:	00cb      	lsls	r3, r1, #3
 8006304:	4651      	mov	r1, sl
 8006306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800630a:	4651      	mov	r1, sl
 800630c:	00ca      	lsls	r2, r1, #3
 800630e:	4610      	mov	r0, r2
 8006310:	4619      	mov	r1, r3
 8006312:	4603      	mov	r3, r0
 8006314:	4642      	mov	r2, r8
 8006316:	189b      	adds	r3, r3, r2
 8006318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800631c:	464b      	mov	r3, r9
 800631e:	460a      	mov	r2, r1
 8006320:	eb42 0303 	adc.w	r3, r2, r3
 8006324:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006334:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006338:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800633c:	460b      	mov	r3, r1
 800633e:	18db      	adds	r3, r3, r3
 8006340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006342:	4613      	mov	r3, r2
 8006344:	eb42 0303 	adc.w	r3, r2, r3
 8006348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800634a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800634e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006352:	f7fa fc99 	bl	8000c88 <__aeabi_uldivmod>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4b0d      	ldr	r3, [pc, #52]	@ (8006390 <UART_SetConfig+0x2d4>)
 800635c:	fba3 1302 	umull	r1, r3, r3, r2
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	2164      	movs	r1, #100	@ 0x64
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	3332      	adds	r3, #50	@ 0x32
 800636e:	4a08      	ldr	r2, [pc, #32]	@ (8006390 <UART_SetConfig+0x2d4>)
 8006370:	fba2 2303 	umull	r2, r3, r2, r3
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	f003 0207 	and.w	r2, r3, #7
 800637a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4422      	add	r2, r4
 8006382:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006384:	e106      	b.n	8006594 <UART_SetConfig+0x4d8>
 8006386:	bf00      	nop
 8006388:	40011000 	.word	0x40011000
 800638c:	40011400 	.word	0x40011400
 8006390:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006398:	2200      	movs	r2, #0
 800639a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800639e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80063a6:	4642      	mov	r2, r8
 80063a8:	464b      	mov	r3, r9
 80063aa:	1891      	adds	r1, r2, r2
 80063ac:	6239      	str	r1, [r7, #32]
 80063ae:	415b      	adcs	r3, r3
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063b6:	4641      	mov	r1, r8
 80063b8:	1854      	adds	r4, r2, r1
 80063ba:	4649      	mov	r1, r9
 80063bc:	eb43 0501 	adc.w	r5, r3, r1
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	00eb      	lsls	r3, r5, #3
 80063ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ce:	00e2      	lsls	r2, r4, #3
 80063d0:	4614      	mov	r4, r2
 80063d2:	461d      	mov	r5, r3
 80063d4:	4643      	mov	r3, r8
 80063d6:	18e3      	adds	r3, r4, r3
 80063d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063dc:	464b      	mov	r3, r9
 80063de:	eb45 0303 	adc.w	r3, r5, r3
 80063e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006402:	4629      	mov	r1, r5
 8006404:	008b      	lsls	r3, r1, #2
 8006406:	4621      	mov	r1, r4
 8006408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800640c:	4621      	mov	r1, r4
 800640e:	008a      	lsls	r2, r1, #2
 8006410:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006414:	f7fa fc38 	bl	8000c88 <__aeabi_uldivmod>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4b60      	ldr	r3, [pc, #384]	@ (80065a0 <UART_SetConfig+0x4e4>)
 800641e:	fba3 2302 	umull	r2, r3, r3, r2
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	011c      	lsls	r4, r3, #4
 8006426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800642a:	2200      	movs	r2, #0
 800642c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006430:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006434:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006438:	4642      	mov	r2, r8
 800643a:	464b      	mov	r3, r9
 800643c:	1891      	adds	r1, r2, r2
 800643e:	61b9      	str	r1, [r7, #24]
 8006440:	415b      	adcs	r3, r3
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006448:	4641      	mov	r1, r8
 800644a:	1851      	adds	r1, r2, r1
 800644c:	6139      	str	r1, [r7, #16]
 800644e:	4649      	mov	r1, r9
 8006450:	414b      	adcs	r3, r1
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006460:	4659      	mov	r1, fp
 8006462:	00cb      	lsls	r3, r1, #3
 8006464:	4651      	mov	r1, sl
 8006466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800646a:	4651      	mov	r1, sl
 800646c:	00ca      	lsls	r2, r1, #3
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	4603      	mov	r3, r0
 8006474:	4642      	mov	r2, r8
 8006476:	189b      	adds	r3, r3, r2
 8006478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800647c:	464b      	mov	r3, r9
 800647e:	460a      	mov	r2, r1
 8006480:	eb42 0303 	adc.w	r3, r2, r3
 8006484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006492:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064a0:	4649      	mov	r1, r9
 80064a2:	008b      	lsls	r3, r1, #2
 80064a4:	4641      	mov	r1, r8
 80064a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064aa:	4641      	mov	r1, r8
 80064ac:	008a      	lsls	r2, r1, #2
 80064ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064b2:	f7fa fbe9 	bl	8000c88 <__aeabi_uldivmod>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	4b38      	ldr	r3, [pc, #224]	@ (80065a0 <UART_SetConfig+0x4e4>)
 80064be:	fba3 2301 	umull	r2, r3, r3, r1
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	2264      	movs	r2, #100	@ 0x64
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
 80064ca:	1acb      	subs	r3, r1, r3
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	3332      	adds	r3, #50	@ 0x32
 80064d0:	4a33      	ldr	r2, [pc, #204]	@ (80065a0 <UART_SetConfig+0x4e4>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064dc:	441c      	add	r4, r3
 80064de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064e2:	2200      	movs	r2, #0
 80064e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80064e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80064e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064ec:	4642      	mov	r2, r8
 80064ee:	464b      	mov	r3, r9
 80064f0:	1891      	adds	r1, r2, r2
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	415b      	adcs	r3, r3
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064fc:	4641      	mov	r1, r8
 80064fe:	1851      	adds	r1, r2, r1
 8006500:	6039      	str	r1, [r7, #0]
 8006502:	4649      	mov	r1, r9
 8006504:	414b      	adcs	r3, r1
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006514:	4659      	mov	r1, fp
 8006516:	00cb      	lsls	r3, r1, #3
 8006518:	4651      	mov	r1, sl
 800651a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800651e:	4651      	mov	r1, sl
 8006520:	00ca      	lsls	r2, r1, #3
 8006522:	4610      	mov	r0, r2
 8006524:	4619      	mov	r1, r3
 8006526:	4603      	mov	r3, r0
 8006528:	4642      	mov	r2, r8
 800652a:	189b      	adds	r3, r3, r2
 800652c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800652e:	464b      	mov	r3, r9
 8006530:	460a      	mov	r2, r1
 8006532:	eb42 0303 	adc.w	r3, r2, r3
 8006536:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	663b      	str	r3, [r7, #96]	@ 0x60
 8006542:	667a      	str	r2, [r7, #100]	@ 0x64
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006550:	4649      	mov	r1, r9
 8006552:	008b      	lsls	r3, r1, #2
 8006554:	4641      	mov	r1, r8
 8006556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800655a:	4641      	mov	r1, r8
 800655c:	008a      	lsls	r2, r1, #2
 800655e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006562:	f7fa fb91 	bl	8000c88 <__aeabi_uldivmod>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4b0d      	ldr	r3, [pc, #52]	@ (80065a0 <UART_SetConfig+0x4e4>)
 800656c:	fba3 1302 	umull	r1, r3, r3, r2
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	2164      	movs	r1, #100	@ 0x64
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	3332      	adds	r3, #50	@ 0x32
 800657e:	4a08      	ldr	r2, [pc, #32]	@ (80065a0 <UART_SetConfig+0x4e4>)
 8006580:	fba2 2303 	umull	r2, r3, r2, r3
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	f003 020f 	and.w	r2, r3, #15
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4422      	add	r2, r4
 8006592:	609a      	str	r2, [r3, #8]
}
 8006594:	bf00      	nop
 8006596:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800659a:	46bd      	mov	sp, r7
 800659c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065a0:	51eb851f 	.word	0x51eb851f

080065a4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	6812      	ldr	r2, [r2, #0]
 80065bc:	f023 0101 	bic.w	r1, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	d102      	bne.n	80065d4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80065ce:	2340      	movs	r3, #64	@ 0x40
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e001      	b.n	80065d8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80065e4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80065ea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80065f0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80065f6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80065fc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006602:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006608:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800660e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006614:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006632:	4b10      	ldr	r3, [pc, #64]	@ (8006674 <FSMC_NORSRAM_Init+0xd0>)
 8006634:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800663c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006644:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	43db      	mvns	r3, r3
 8006654:	ea02 0103 	and.w	r1, r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	4319      	orrs	r1, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	0008fb7f 	.word	0x0008fb7f

08006678 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800668e:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8006696:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 800669e:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 80066a8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	3b02      	subs	r3, #2
 80066b0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80066b2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80066be:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066e8:	d11d      	bne.n	8006726 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066f2:	4b13      	ldr	r3, [pc, #76]	@ (8006740 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	6811      	ldr	r1, [r2, #0]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	6852      	ldr	r2, [r2, #4]
 80066fe:	0112      	lsls	r2, r2, #4
 8006700:	4311      	orrs	r1, r2
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	6892      	ldr	r2, [r2, #8]
 8006706:	0212      	lsls	r2, r2, #8
 8006708:	4311      	orrs	r1, r2
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	6992      	ldr	r2, [r2, #24]
 800670e:	4311      	orrs	r1, r2
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	68d2      	ldr	r2, [r2, #12]
 8006714:	0412      	lsls	r2, r2, #16
 8006716:	430a      	orrs	r2, r1
 8006718:	ea43 0102 	orr.w	r1, r3, r2
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006724:	e005      	b.n	8006732 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800672e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	cff00000 	.word	0xcff00000

08006744 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006744:	b084      	sub	sp, #16
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	f107 001c 	add.w	r0, r7, #28
 8006752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006756:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800675a:	2b01      	cmp	r3, #1
 800675c:	d123      	bne.n	80067a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006762:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006772:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006786:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800678a:	2b01      	cmp	r3, #1
 800678c:	d105      	bne.n	800679a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 fae8 	bl	8007d70 <USB_CoreReset>
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]
 80067a4:	e01b      	b.n	80067de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fadc 	bl	8007d70 <USB_CoreReset>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80067bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80067d0:	e005      	b.n	80067de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067de:	7fbb      	ldrb	r3, [r7, #30]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d10b      	bne.n	80067fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f043 0206 	orr.w	r2, r3, #6
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006808:	b004      	add	sp, #16
 800680a:	4770      	bx	lr

0800680c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d165      	bne.n	80068ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4a41      	ldr	r2, [pc, #260]	@ (8006928 <USB_SetTurnaroundTime+0x11c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d906      	bls.n	8006836 <USB_SetTurnaroundTime+0x2a>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4a40      	ldr	r2, [pc, #256]	@ (800692c <USB_SetTurnaroundTime+0x120>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d202      	bcs.n	8006836 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006830:	230f      	movs	r3, #15
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	e062      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	4a3c      	ldr	r2, [pc, #240]	@ (800692c <USB_SetTurnaroundTime+0x120>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d306      	bcc.n	800684c <USB_SetTurnaroundTime+0x40>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4a3b      	ldr	r2, [pc, #236]	@ (8006930 <USB_SetTurnaroundTime+0x124>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d202      	bcs.n	800684c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006846:	230e      	movs	r3, #14
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	e057      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4a38      	ldr	r2, [pc, #224]	@ (8006930 <USB_SetTurnaroundTime+0x124>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d306      	bcc.n	8006862 <USB_SetTurnaroundTime+0x56>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4a37      	ldr	r2, [pc, #220]	@ (8006934 <USB_SetTurnaroundTime+0x128>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d202      	bcs.n	8006862 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800685c:	230d      	movs	r3, #13
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e04c      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	4a33      	ldr	r2, [pc, #204]	@ (8006934 <USB_SetTurnaroundTime+0x128>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d306      	bcc.n	8006878 <USB_SetTurnaroundTime+0x6c>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	4a32      	ldr	r2, [pc, #200]	@ (8006938 <USB_SetTurnaroundTime+0x12c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d802      	bhi.n	8006878 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006872:	230c      	movs	r3, #12
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	e041      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4a2f      	ldr	r2, [pc, #188]	@ (8006938 <USB_SetTurnaroundTime+0x12c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d906      	bls.n	800688e <USB_SetTurnaroundTime+0x82>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4a2e      	ldr	r2, [pc, #184]	@ (800693c <USB_SetTurnaroundTime+0x130>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d802      	bhi.n	800688e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006888:	230b      	movs	r3, #11
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	e036      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4a2a      	ldr	r2, [pc, #168]	@ (800693c <USB_SetTurnaroundTime+0x130>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d906      	bls.n	80068a4 <USB_SetTurnaroundTime+0x98>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4a29      	ldr	r2, [pc, #164]	@ (8006940 <USB_SetTurnaroundTime+0x134>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d802      	bhi.n	80068a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800689e:	230a      	movs	r3, #10
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	e02b      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4a26      	ldr	r2, [pc, #152]	@ (8006940 <USB_SetTurnaroundTime+0x134>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d906      	bls.n	80068ba <USB_SetTurnaroundTime+0xae>
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4a25      	ldr	r2, [pc, #148]	@ (8006944 <USB_SetTurnaroundTime+0x138>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d202      	bcs.n	80068ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80068b4:	2309      	movs	r3, #9
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e020      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4a21      	ldr	r2, [pc, #132]	@ (8006944 <USB_SetTurnaroundTime+0x138>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d306      	bcc.n	80068d0 <USB_SetTurnaroundTime+0xc4>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4a20      	ldr	r2, [pc, #128]	@ (8006948 <USB_SetTurnaroundTime+0x13c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d802      	bhi.n	80068d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80068ca:	2308      	movs	r3, #8
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	e015      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006948 <USB_SetTurnaroundTime+0x13c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d906      	bls.n	80068e6 <USB_SetTurnaroundTime+0xda>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4a1c      	ldr	r2, [pc, #112]	@ (800694c <USB_SetTurnaroundTime+0x140>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d202      	bcs.n	80068e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80068e0:	2307      	movs	r3, #7
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	e00a      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80068e6:	2306      	movs	r3, #6
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	e007      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80068f2:	2309      	movs	r3, #9
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	e001      	b.n	80068fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80068f8:	2309      	movs	r3, #9
 80068fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	029b      	lsls	r3, r3, #10
 8006910:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006914:	431a      	orrs	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	00d8acbf 	.word	0x00d8acbf
 800692c:	00e4e1c0 	.word	0x00e4e1c0
 8006930:	00f42400 	.word	0x00f42400
 8006934:	01067380 	.word	0x01067380
 8006938:	011a499f 	.word	0x011a499f
 800693c:	01312cff 	.word	0x01312cff
 8006940:	014ca43f 	.word	0x014ca43f
 8006944:	016e3600 	.word	0x016e3600
 8006948:	01a6ab1f 	.word	0x01a6ab1f
 800694c:	01e84800 	.word	0x01e84800

08006950 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f043 0201 	orr.w	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f023 0201 	bic.w	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d115      	bne.n	80069e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069c2:	200a      	movs	r0, #10
 80069c4:	f7fb fc4c 	bl	8002260 <HAL_Delay>
      ms += 10U;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	330a      	adds	r3, #10
 80069cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 f93f 	bl	8007c52 <USB_GetMode>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d01e      	beq.n	8006a18 <USB_SetCurrentMode+0x84>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80069de:	d9f0      	bls.n	80069c2 <USB_SetCurrentMode+0x2e>
 80069e0:	e01a      	b.n	8006a18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d115      	bne.n	8006a14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069f4:	200a      	movs	r0, #10
 80069f6:	f7fb fc33 	bl	8002260 <HAL_Delay>
      ms += 10U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	330a      	adds	r3, #10
 80069fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 f926 	bl	8007c52 <USB_GetMode>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <USB_SetCurrentMode+0x84>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a10:	d9f0      	bls.n	80069f4 <USB_SetCurrentMode+0x60>
 8006a12:	e001      	b.n	8006a18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e005      	b.n	8006a24 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006a1c:	d101      	bne.n	8006a22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b086      	sub	sp, #24
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	e009      	b.n	8006a60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	3340      	adds	r3, #64	@ 0x40
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	2b0e      	cmp	r3, #14
 8006a64:	d9f2      	bls.n	8006a4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d11c      	bne.n	8006aa8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a86:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a92:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006aa6:	e00b      	b.n	8006ac0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	2300      	movs	r3, #0
 8006aca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006acc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d10d      	bne.n	8006af0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006adc:	2100      	movs	r1, #0
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f968 	bl	8006db4 <USB_SetDevSpeed>
 8006ae4:	e008      	b.n	8006af8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f963 	bl	8006db4 <USB_SetDevSpeed>
 8006aee:	e003      	b.n	8006af8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006af0:	2103      	movs	r1, #3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f95e 	bl	8006db4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006af8:	2110      	movs	r1, #16
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f8fa 	bl	8006cf4 <USB_FlushTxFifo>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f924 	bl	8006d58 <USB_FlushRxFifo>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b20:	461a      	mov	r2, r3
 8006b22:	2300      	movs	r3, #0
 8006b24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b38:	461a      	mov	r2, r3
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	e043      	b.n	8006bcc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b5a:	d118      	bne.n	8006b8e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	e013      	b.n	8006ba0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b84:	461a      	mov	r2, r3
 8006b86:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	e008      	b.n	8006ba0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bac:	461a      	mov	r2, r3
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006bc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d3b5      	bcc.n	8006b44 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	613b      	str	r3, [r7, #16]
 8006bdc:	e043      	b.n	8006c66 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bf4:	d118      	bne.n	8006c28 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	e013      	b.n	8006c3a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e008      	b.n	8006c3a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c34:	461a      	mov	r2, r3
 8006c36:	2300      	movs	r3, #0
 8006c38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c46:	461a      	mov	r2, r3
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	3301      	adds	r3, #1
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d3b5      	bcc.n	8006bde <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006c92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d105      	bne.n	8006ca8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	f043 0210 	orr.w	r2, r3, #16
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	4b10      	ldr	r3, [pc, #64]	@ (8006cf0 <USB_DevInit+0x2c4>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cb4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	f043 0208 	orr.w	r2, r3, #8
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cc8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d107      	bne.n	8006ce0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cd8:	f043 0304 	orr.w	r3, r3, #4
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cec:	b004      	add	sp, #16
 8006cee:	4770      	bx	lr
 8006cf0:	803c3800 	.word	0x803c3800

08006cf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d0e:	d901      	bls.n	8006d14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e01b      	b.n	8006d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	daf2      	bge.n	8006d02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	019b      	lsls	r3, r3, #6
 8006d24:	f043 0220 	orr.w	r2, r3, #32
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d38:	d901      	bls.n	8006d3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e006      	b.n	8006d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d0f0      	beq.n	8006d2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d70:	d901      	bls.n	8006d76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e018      	b.n	8006da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	daf2      	bge.n	8006d64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2210      	movs	r2, #16
 8006d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d94:	d901      	bls.n	8006d9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e006      	b.n	8006da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0310 	and.w	r3, r3, #16
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d0f0      	beq.n	8006d88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b087      	sub	sp, #28
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0306 	and.w	r3, r3, #6
 8006dfe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d102      	bne.n	8006e0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]
 8006e0a:	e00a      	b.n	8006e22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d002      	beq.n	8006e18 <USB_GetDevSpeed+0x32>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b06      	cmp	r3, #6
 8006e16:	d102      	bne.n	8006e1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	75fb      	strb	r3, [r7, #23]
 8006e1c:	e001      	b.n	8006e22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e1e:	230f      	movs	r3, #15
 8006e20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d13a      	bne.n	8006ec2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d155      	bne.n	8006f30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	791b      	ldrb	r3, [r3, #4]
 8006e9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ea0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	059b      	lsls	r3, r3, #22
 8006ea6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	0151      	lsls	r1, r2, #5
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	440a      	add	r2, r1
 8006eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	e036      	b.n	8006f30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec8:	69da      	ldr	r2, [r3, #28]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed8:	041b      	lsls	r3, r3, #16
 8006eda:	68f9      	ldr	r1, [r7, #12]
 8006edc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d11a      	bne.n	8006f30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	791b      	ldrb	r3, [r3, #4]
 8006f14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f16:	430b      	orrs	r3, r1
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d161      	bne.n	8007020 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f72:	d11f      	bne.n	8006fb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	0151      	lsls	r1, r2, #5
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	440a      	add	r2, r1
 8006faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	43db      	mvns	r3, r3
 8006fce:	68f9      	ldr	r1, [r7, #12]
 8006fd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fde:	69da      	ldr	r2, [r3, #28]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	2101      	movs	r1, #1
 8006fea:	fa01 f303 	lsl.w	r3, r1, r3
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	43db      	mvns	r3, r3
 8006ff2:	68f9      	ldr	r1, [r7, #12]
 8006ff4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	0159      	lsls	r1, r3, #5
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	440b      	add	r3, r1
 8007012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007016:	4619      	mov	r1, r3
 8007018:	4b35      	ldr	r3, [pc, #212]	@ (80070f0 <USB_DeactivateEndpoint+0x1b0>)
 800701a:	4013      	ands	r3, r2
 800701c:	600b      	str	r3, [r1, #0]
 800701e:	e060      	b.n	80070e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007032:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007036:	d11f      	bne.n	8007078 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007052:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007056:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	440a      	add	r2, r1
 800706e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007072:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007076:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800707e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	2101      	movs	r1, #1
 800708a:	fa01 f303 	lsl.w	r3, r1, r3
 800708e:	041b      	lsls	r3, r3, #16
 8007090:	43db      	mvns	r3, r3
 8007092:	68f9      	ldr	r1, [r7, #12]
 8007094:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007098:	4013      	ands	r3, r2
 800709a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a2:	69da      	ldr	r2, [r3, #28]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	2101      	movs	r1, #1
 80070ae:	fa01 f303 	lsl.w	r3, r1, r3
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	43db      	mvns	r3, r3
 80070b6:	68f9      	ldr	r1, [r7, #12]
 80070b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070bc:	4013      	ands	r3, r2
 80070be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	0159      	lsls	r1, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	440b      	add	r3, r1
 80070d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070da:	4619      	mov	r1, r3
 80070dc:	4b05      	ldr	r3, [pc, #20]	@ (80070f4 <USB_DeactivateEndpoint+0x1b4>)
 80070de:	4013      	ands	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	ec337800 	.word	0xec337800
 80070f4:	eff37800 	.word	0xeff37800

080070f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	@ 0x28
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b01      	cmp	r3, #1
 8007116:	f040 817f 	bne.w	8007418 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d132      	bne.n	8007188 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	440a      	add	r2, r1
 8007138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800713c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007140:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007144:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	440a      	add	r2, r1
 800715c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007160:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	4413      	add	r3, r2
 800716e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	0151      	lsls	r1, r2, #5
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	440a      	add	r2, r1
 800717c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007180:	0cdb      	lsrs	r3, r3, #19
 8007182:	04db      	lsls	r3, r3, #19
 8007184:	6113      	str	r3, [r2, #16]
 8007186:	e097      	b.n	80072b8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	0151      	lsls	r1, r2, #5
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	440a      	add	r2, r1
 800719e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071a2:	0cdb      	lsrs	r3, r3, #19
 80071a4:	04db      	lsls	r3, r3, #19
 80071a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80071c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80071ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d11a      	bne.n	8007208 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d903      	bls.n	80071e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	689a      	ldr	r2, [r3, #8]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	69fa      	ldr	r2, [r7, #28]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007200:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007204:	6113      	str	r3, [r2, #16]
 8007206:	e044      	b.n	8007292 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	4413      	add	r3, r2
 8007212:	1e5a      	subs	r2, r3, #1
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	8afb      	ldrh	r3, [r7, #22]
 800722e:	04d9      	lsls	r1, r3, #19
 8007230:	4ba4      	ldr	r3, [pc, #656]	@ (80074c4 <USB_EPStartXfer+0x3cc>)
 8007232:	400b      	ands	r3, r1
 8007234:	69b9      	ldr	r1, [r7, #24]
 8007236:	0148      	lsls	r0, r1, #5
 8007238:	69f9      	ldr	r1, [r7, #28]
 800723a:	4401      	add	r1, r0
 800723c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007240:	4313      	orrs	r3, r2
 8007242:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	791b      	ldrb	r3, [r3, #4]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d122      	bne.n	8007292 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	0151      	lsls	r1, r2, #5
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	440a      	add	r2, r1
 8007262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007266:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800726a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	8afb      	ldrh	r3, [r7, #22]
 800727c:	075b      	lsls	r3, r3, #29
 800727e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007282:	69b9      	ldr	r1, [r7, #24]
 8007284:	0148      	lsls	r0, r1, #5
 8007286:	69f9      	ldr	r1, [r7, #28]
 8007288:	4401      	add	r1, r0
 800728a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800728e:	4313      	orrs	r3, r2
 8007290:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072a8:	69b9      	ldr	r1, [r7, #24]
 80072aa:	0148      	lsls	r0, r1, #5
 80072ac:	69f9      	ldr	r1, [r7, #28]
 80072ae:	4401      	add	r1, r0
 80072b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80072b4:	4313      	orrs	r3, r2
 80072b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d14b      	bne.n	8007356 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d2:	461a      	mov	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	791b      	ldrb	r3, [r3, #4]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d128      	bne.n	8007334 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d110      	bne.n	8007314 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	440a      	add	r2, r1
 8007308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800730c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	e00f      	b.n	8007334 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800732e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007332:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	0151      	lsls	r1, r2, #5
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	440a      	add	r2, r1
 800734a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800734e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	e166      	b.n	8007624 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	440a      	add	r2, r1
 800736c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007370:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007374:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	791b      	ldrb	r3, [r3, #4]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d015      	beq.n	80073aa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 814e 	beq.w	8007624 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800738e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	2101      	movs	r1, #1
 800739a:	fa01 f303 	lsl.w	r3, r1, r3
 800739e:	69f9      	ldr	r1, [r7, #28]
 80073a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073a4:	4313      	orrs	r3, r2
 80073a6:	634b      	str	r3, [r1, #52]	@ 0x34
 80073a8:	e13c      	b.n	8007624 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d110      	bne.n	80073dc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	0151      	lsls	r1, r2, #5
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	440a      	add	r2, r1
 80073d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	e00f      	b.n	80073fc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	68d9      	ldr	r1, [r3, #12]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	b298      	uxth	r0, r3
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4603      	mov	r3, r0
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f9b9 	bl	8007788 <USB_WritePacket>
 8007416:	e105      	b.n	8007624 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	440a      	add	r2, r1
 800742e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007432:	0cdb      	lsrs	r3, r3, #19
 8007434:	04db      	lsls	r3, r3, #19
 8007436:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007452:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007456:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800745a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d132      	bne.n	80074c8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007490:	69b9      	ldr	r1, [r7, #24]
 8007492:	0148      	lsls	r0, r1, #5
 8007494:	69f9      	ldr	r1, [r7, #28]
 8007496:	4401      	add	r1, r0
 8007498:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800749c:	4313      	orrs	r3, r2
 800749e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074be:	6113      	str	r3, [r2, #16]
 80074c0:	e062      	b.n	8007588 <USB_EPStartXfer+0x490>
 80074c2:	bf00      	nop
 80074c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d123      	bne.n	8007518 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e6:	69b9      	ldr	r1, [r7, #24]
 80074e8:	0148      	lsls	r0, r1, #5
 80074ea:	69f9      	ldr	r1, [r7, #28]
 80074ec:	4401      	add	r1, r0
 80074ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80074f2:	4313      	orrs	r3, r2
 80074f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	440a      	add	r2, r1
 800750c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007510:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007514:	6113      	str	r3, [r2, #16]
 8007516:	e037      	b.n	8007588 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4413      	add	r3, r2
 8007522:	1e5a      	subs	r2, r3, #1
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	fbb2 f3f3 	udiv	r3, r2, r3
 800752c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	8afa      	ldrh	r2, [r7, #22]
 8007534:	fb03 f202 	mul.w	r2, r3, r2
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007548:	691a      	ldr	r2, [r3, #16]
 800754a:	8afb      	ldrh	r3, [r7, #22]
 800754c:	04d9      	lsls	r1, r3, #19
 800754e:	4b38      	ldr	r3, [pc, #224]	@ (8007630 <USB_EPStartXfer+0x538>)
 8007550:	400b      	ands	r3, r1
 8007552:	69b9      	ldr	r1, [r7, #24]
 8007554:	0148      	lsls	r0, r1, #5
 8007556:	69f9      	ldr	r1, [r7, #28]
 8007558:	4401      	add	r1, r0
 800755a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800755e:	4313      	orrs	r3, r2
 8007560:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007578:	69b9      	ldr	r1, [r7, #24]
 800757a:	0148      	lsls	r0, r1, #5
 800757c:	69f9      	ldr	r1, [r7, #28]
 800757e:	4401      	add	r1, r0
 8007580:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007584:	4313      	orrs	r3, r2
 8007586:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d10d      	bne.n	80075aa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d009      	beq.n	80075aa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	68d9      	ldr	r1, [r3, #12]
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a6:	460a      	mov	r2, r1
 80075a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	791b      	ldrb	r3, [r3, #4]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d128      	bne.n	8007604 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d110      	bne.n	80075e4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e00f      	b.n	8007604 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	0151      	lsls	r1, r2, #5
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	440a      	add	r2, r1
 80075fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007602:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	0151      	lsls	r1, r2, #5
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	440a      	add	r2, r1
 800761a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800761e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3720      	adds	r7, #32
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	1ff80000 	.word	0x1ff80000

08007634 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	785b      	ldrb	r3, [r3, #1]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d14a      	bne.n	80076e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800766a:	f040 8086 	bne.w	800777a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800768c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007690:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	7812      	ldrb	r2, [r2, #0]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3301      	adds	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d902      	bls.n	80076cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	75fb      	strb	r3, [r7, #23]
          break;
 80076ca:	e056      	b.n	800777a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076e4:	d0e7      	beq.n	80076b6 <USB_EPStopXfer+0x82>
 80076e6:	e048      	b.n	800777a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007700:	d13b      	bne.n	800777a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	7812      	ldrb	r2, [r2, #0]
 8007716:	0151      	lsls	r1, r2, #5
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	440a      	add	r2, r1
 800771c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007720:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007724:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	0151      	lsls	r1, r2, #5
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	440a      	add	r2, r1
 8007740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007744:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007748:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3301      	adds	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007756:	4293      	cmp	r3, r2
 8007758:	d902      	bls.n	8007760 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	75fb      	strb	r3, [r7, #23]
          break;
 800775e:	e00c      	b.n	800777a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007778:	d0e7      	beq.n	800774a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
}
 800777c:	4618      	mov	r0, r3
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007788:	b480      	push	{r7}
 800778a:	b089      	sub	sp, #36	@ 0x24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4611      	mov	r1, r2
 8007794:	461a      	mov	r2, r3
 8007796:	460b      	mov	r3, r1
 8007798:	71fb      	strb	r3, [r7, #7]
 800779a:	4613      	mov	r3, r2
 800779c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80077a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d123      	bne.n	80077f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80077ae:	88bb      	ldrh	r3, [r7, #4]
 80077b0:	3303      	adds	r3, #3
 80077b2:	089b      	lsrs	r3, r3, #2
 80077b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80077b6:	2300      	movs	r3, #0
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	e018      	b.n	80077ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	031a      	lsls	r2, r3, #12
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077c8:	461a      	mov	r2, r3
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	3301      	adds	r3, #1
 80077d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	3301      	adds	r3, #1
 80077da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	3301      	adds	r3, #1
 80077e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	3301      	adds	r3, #1
 80077e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	3301      	adds	r3, #1
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d3e2      	bcc.n	80077bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3724      	adds	r7, #36	@ 0x24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007804:	b480      	push	{r7}
 8007806:	b08b      	sub	sp, #44	@ 0x2c
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800781a:	88fb      	ldrh	r3, [r7, #6]
 800781c:	089b      	lsrs	r3, r3, #2
 800781e:	b29b      	uxth	r3, r3
 8007820:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800782a:	2300      	movs	r3, #0
 800782c:	623b      	str	r3, [r7, #32]
 800782e:	e014      	b.n	800785a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	601a      	str	r2, [r3, #0]
    pDest++;
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	3301      	adds	r3, #1
 8007840:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007844:	3301      	adds	r3, #1
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	3301      	adds	r3, #1
 800784c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	3301      	adds	r3, #1
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	3301      	adds	r3, #1
 8007858:	623b      	str	r3, [r7, #32]
 800785a:	6a3a      	ldr	r2, [r7, #32]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	429a      	cmp	r2, r3
 8007860:	d3e6      	bcc.n	8007830 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007862:	8bfb      	ldrh	r3, [r7, #30]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01e      	beq.n	80078a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007872:	461a      	mov	r2, r3
 8007874:	f107 0310 	add.w	r3, r7, #16
 8007878:	6812      	ldr	r2, [r2, #0]
 800787a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	fa22 f303 	lsr.w	r3, r2, r3
 8007888:	b2da      	uxtb	r2, r3
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	701a      	strb	r2, [r3, #0]
      i++;
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	3301      	adds	r3, #1
 8007892:	623b      	str	r3, [r7, #32]
      pDest++;
 8007894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007896:	3301      	adds	r3, #1
 8007898:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800789a:	8bfb      	ldrh	r3, [r7, #30]
 800789c:	3b01      	subs	r3, #1
 800789e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80078a0:	8bfb      	ldrh	r3, [r7, #30]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1ea      	bne.n	800787c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	372c      	adds	r7, #44	@ 0x2c
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d12c      	bne.n	800792a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	db12      	blt.n	8007908 <USB_EPSetStall+0x54>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00f      	beq.n	8007908 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	0151      	lsls	r1, r2, #5
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	440a      	add	r2, r1
 80078fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007902:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007906:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	440a      	add	r2, r1
 800791e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007922:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	e02b      	b.n	8007982 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	db12      	blt.n	8007962 <USB_EPSetStall+0xae>
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00f      	beq.n	8007962 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800795c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007960:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	0151      	lsls	r1, r2, #5
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	440a      	add	r2, r1
 8007978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800797c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007980:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d128      	bne.n	80079fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	0151      	lsls	r1, r2, #5
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	440a      	add	r2, r1
 80079c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80079ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	791b      	ldrb	r3, [r3, #4]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d003      	beq.n	80079dc <USB_EPClearStall+0x4c>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	791b      	ldrb	r3, [r3, #4]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d138      	bne.n	8007a4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	0151      	lsls	r1, r2, #5
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	440a      	add	r2, r1
 80079f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	e027      	b.n	8007a4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	791b      	ldrb	r3, [r3, #4]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d003      	beq.n	8007a2e <USB_EPClearStall+0x9e>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	791b      	ldrb	r3, [r3, #4]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d10f      	bne.n	8007a4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	0151      	lsls	r1, r2, #5
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	440a      	add	r2, r1
 8007a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007a7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007a90:	68f9      	ldr	r1, [r7, #12]
 8007a92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a96:	4313      	orrs	r3, r2
 8007a98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ac2:	f023 0303 	bic.w	r3, r3, #3
 8007ac6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ad6:	f023 0302 	bic.w	r3, r3, #2
 8007ada:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b04:	f023 0303 	bic.w	r3, r3, #3
 8007b08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b18:	f043 0302 	orr.w	r3, r3, #2
 8007b1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4013      	ands	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b44:	68fb      	ldr	r3, [r7, #12]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	4013      	ands	r3, r2
 8007b74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	0c1b      	lsrs	r3, r3, #16
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	b29b      	uxth	r3, r3
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b085      	sub	sp, #20
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	4013      	ands	r3, r2
 8007be6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007be8:	68bb      	ldr	r3, [r7, #8]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b087      	sub	sp, #28
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c18:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	f003 030f 	and.w	r3, r3, #15
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	fa22 f303 	lsr.w	r3, r2, r3
 8007c26:	01db      	lsls	r3, r3, #7
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	4013      	ands	r3, r2
 8007c42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c44:	68bb      	ldr	r3, [r7, #8]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007c8c:	f023 0307 	bic.w	r3, r3, #7
 8007c90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ca4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	333c      	adds	r3, #60	@ 0x3c
 8007cca:	3304      	adds	r3, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	4a26      	ldr	r2, [pc, #152]	@ (8007d6c <USB_EP0_OutStart+0xb8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d90a      	bls.n	8007cee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ce8:	d101      	bne.n	8007cee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	e037      	b.n	8007d5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d1c:	f043 0318 	orr.w	r3, r3, #24
 8007d20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d30:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007d34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d36:	7afb      	ldrb	r3, [r7, #11]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d10f      	bne.n	8007d5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d56:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007d5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	4f54300a 	.word	0x4f54300a

08007d70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d88:	d901      	bls.n	8007d8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e022      	b.n	8007dd4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	daf2      	bge.n	8007d7c <USB_CoreReset+0xc>

  count = 10U;
 8007d96:	230a      	movs	r3, #10
 8007d98:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007d9a:	e002      	b.n	8007da2 <USB_CoreReset+0x32>
  {
    count--;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1f9      	bne.n	8007d9c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f043 0201 	orr.w	r2, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3301      	adds	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dc0:	d901      	bls.n	8007dc6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e006      	b.n	8007dd4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d0f0      	beq.n	8007db4 <USB_CoreReset+0x44>

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007dec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007df0:	f002 fccc 	bl	800a78c <USBD_static_malloc>
 8007df4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d109      	bne.n	8007e10 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	32b0      	adds	r2, #176	@ 0xb0
 8007e06:	2100      	movs	r1, #0
 8007e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e0d4      	b.n	8007fba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007e10:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007e14:	2100      	movs	r1, #0
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f003 fef5 	bl	800bc06 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	32b0      	adds	r2, #176	@ 0xb0
 8007e26:	68f9      	ldr	r1, [r7, #12]
 8007e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	32b0      	adds	r2, #176	@ 0xb0
 8007e36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	7c1b      	ldrb	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d138      	bne.n	8007eba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e48:	4b5e      	ldr	r3, [pc, #376]	@ (8007fc4 <USBD_CDC_Init+0x1e4>)
 8007e4a:	7819      	ldrb	r1, [r3, #0]
 8007e4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e50:	2202      	movs	r2, #2
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f002 fb77 	bl	800a546 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e58:	4b5a      	ldr	r3, [pc, #360]	@ (8007fc4 <USBD_CDC_Init+0x1e4>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	f003 020f 	and.w	r2, r3, #15
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	3323      	adds	r3, #35	@ 0x23
 8007e6e:	2201      	movs	r2, #1
 8007e70:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e72:	4b55      	ldr	r3, [pc, #340]	@ (8007fc8 <USBD_CDC_Init+0x1e8>)
 8007e74:	7819      	ldrb	r1, [r3, #0]
 8007e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f002 fb62 	bl	800a546 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007e82:	4b51      	ldr	r3, [pc, #324]	@ (8007fc8 <USBD_CDC_Init+0x1e8>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	f003 020f 	and.w	r2, r3, #15
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	440b      	add	r3, r1
 8007e96:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8007fcc <USBD_CDC_Init+0x1ec>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	f003 020f 	and.w	r2, r3, #15
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	331c      	adds	r3, #28
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e035      	b.n	8007f26 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007eba:	4b42      	ldr	r3, [pc, #264]	@ (8007fc4 <USBD_CDC_Init+0x1e4>)
 8007ebc:	7819      	ldrb	r1, [r3, #0]
 8007ebe:	2340      	movs	r3, #64	@ 0x40
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f002 fb3f 	bl	800a546 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8007fc4 <USBD_CDC_Init+0x1e4>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 020f 	and.w	r2, r3, #15
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	440b      	add	r3, r1
 8007edc:	3323      	adds	r3, #35	@ 0x23
 8007ede:	2201      	movs	r2, #1
 8007ee0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ee2:	4b39      	ldr	r3, [pc, #228]	@ (8007fc8 <USBD_CDC_Init+0x1e8>)
 8007ee4:	7819      	ldrb	r1, [r3, #0]
 8007ee6:	2340      	movs	r3, #64	@ 0x40
 8007ee8:	2202      	movs	r2, #2
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f002 fb2b 	bl	800a546 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ef0:	4b35      	ldr	r3, [pc, #212]	@ (8007fc8 <USBD_CDC_Init+0x1e8>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	f003 020f 	and.w	r2, r3, #15
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007f08:	2201      	movs	r2, #1
 8007f0a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8007fcc <USBD_CDC_Init+0x1ec>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f003 020f 	and.w	r2, r3, #15
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	331c      	adds	r3, #28
 8007f22:	2210      	movs	r2, #16
 8007f24:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f26:	4b29      	ldr	r3, [pc, #164]	@ (8007fcc <USBD_CDC_Init+0x1ec>)
 8007f28:	7819      	ldrb	r1, [r3, #0]
 8007f2a:	2308      	movs	r3, #8
 8007f2c:	2203      	movs	r2, #3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f002 fb09 	bl	800a546 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007f34:	4b25      	ldr	r3, [pc, #148]	@ (8007fcc <USBD_CDC_Init+0x1ec>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	f003 020f 	and.w	r2, r3, #15
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	440b      	add	r3, r1
 8007f48:	3323      	adds	r3, #35	@ 0x23
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	33b0      	adds	r3, #176	@ 0xb0
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007f84:	2302      	movs	r3, #2
 8007f86:	e018      	b.n	8007fba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	7c1b      	ldrb	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f90:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc8 <USBD_CDC_Init+0x1e8>)
 8007f92:	7819      	ldrb	r1, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f002 fbc0 	bl	800a724 <USBD_LL_PrepareReceive>
 8007fa4:	e008      	b.n	8007fb8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fa6:	4b08      	ldr	r3, [pc, #32]	@ (8007fc8 <USBD_CDC_Init+0x1e8>)
 8007fa8:	7819      	ldrb	r1, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007fb0:	2340      	movs	r3, #64	@ 0x40
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f002 fbb6 	bl	800a724 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	2000009f 	.word	0x2000009f
 8007fc8:	200000a0 	.word	0x200000a0
 8007fcc:	200000a1 	.word	0x200000a1

08007fd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80080c8 <USBD_CDC_DeInit+0xf8>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f002 fad5 	bl	800a592 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007fe8:	4b37      	ldr	r3, [pc, #220]	@ (80080c8 <USBD_CDC_DeInit+0xf8>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	f003 020f 	and.w	r2, r3, #15
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	3323      	adds	r3, #35	@ 0x23
 8007ffe:	2200      	movs	r2, #0
 8008000:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008002:	4b32      	ldr	r3, [pc, #200]	@ (80080cc <USBD_CDC_DeInit+0xfc>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f002 fac2 	bl	800a592 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800800e:	4b2f      	ldr	r3, [pc, #188]	@ (80080cc <USBD_CDC_DeInit+0xfc>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	f003 020f 	and.w	r2, r3, #15
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800802a:	4b29      	ldr	r3, [pc, #164]	@ (80080d0 <USBD_CDC_DeInit+0x100>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f002 faae 	bl	800a592 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008036:	4b26      	ldr	r3, [pc, #152]	@ (80080d0 <USBD_CDC_DeInit+0x100>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	f003 020f 	and.w	r2, r3, #15
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	3323      	adds	r3, #35	@ 0x23
 800804c:	2200      	movs	r2, #0
 800804e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008050:	4b1f      	ldr	r3, [pc, #124]	@ (80080d0 <USBD_CDC_DeInit+0x100>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	f003 020f 	and.w	r2, r3, #15
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	331c      	adds	r3, #28
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	32b0      	adds	r2, #176	@ 0xb0
 8008074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01f      	beq.n	80080bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	33b0      	adds	r3, #176	@ 0xb0
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	32b0      	adds	r2, #176	@ 0xb0
 800809a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809e:	4618      	mov	r0, r3
 80080a0:	f002 fb82 	bl	800a7a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	32b0      	adds	r2, #176	@ 0xb0
 80080ae:	2100      	movs	r1, #0
 80080b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	2000009f 	.word	0x2000009f
 80080cc:	200000a0 	.word	0x200000a0
 80080d0:	200000a1 	.word	0x200000a1

080080d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	32b0      	adds	r2, #176	@ 0xb0
 80080e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008100:	2303      	movs	r3, #3
 8008102:	e0bf      	b.n	8008284 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800810c:	2b00      	cmp	r3, #0
 800810e:	d050      	beq.n	80081b2 <USBD_CDC_Setup+0xde>
 8008110:	2b20      	cmp	r3, #32
 8008112:	f040 80af 	bne.w	8008274 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	88db      	ldrh	r3, [r3, #6]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d03a      	beq.n	8008194 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	b25b      	sxtb	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	da1b      	bge.n	8008160 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	33b0      	adds	r3, #176	@ 0xb0
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800813e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	88d2      	ldrh	r2, [r2, #6]
 8008144:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	88db      	ldrh	r3, [r3, #6]
 800814a:	2b07      	cmp	r3, #7
 800814c:	bf28      	it	cs
 800814e:	2307      	movcs	r3, #7
 8008150:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	89fa      	ldrh	r2, [r7, #14]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 fda9 	bl	8009cb0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800815e:	e090      	b.n	8008282 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	785a      	ldrb	r2, [r3, #1]
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	88db      	ldrh	r3, [r3, #6]
 800816e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008170:	d803      	bhi.n	800817a <USBD_CDC_Setup+0xa6>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	88db      	ldrh	r3, [r3, #6]
 8008176:	b2da      	uxtb	r2, r3
 8008178:	e000      	b.n	800817c <USBD_CDC_Setup+0xa8>
 800817a:	2240      	movs	r2, #64	@ 0x40
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008182:	6939      	ldr	r1, [r7, #16]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800818a:	461a      	mov	r2, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fdbe 	bl	8009d0e <USBD_CtlPrepareRx>
      break;
 8008192:	e076      	b.n	8008282 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	33b0      	adds	r3, #176	@ 0xb0
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	7850      	ldrb	r0, [r2, #1]
 80081aa:	2200      	movs	r2, #0
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	4798      	blx	r3
      break;
 80081b0:	e067      	b.n	8008282 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	785b      	ldrb	r3, [r3, #1]
 80081b6:	2b0b      	cmp	r3, #11
 80081b8:	d851      	bhi.n	800825e <USBD_CDC_Setup+0x18a>
 80081ba:	a201      	add	r2, pc, #4	@ (adr r2, 80081c0 <USBD_CDC_Setup+0xec>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081f1 	.word	0x080081f1
 80081c4:	0800826d 	.word	0x0800826d
 80081c8:	0800825f 	.word	0x0800825f
 80081cc:	0800825f 	.word	0x0800825f
 80081d0:	0800825f 	.word	0x0800825f
 80081d4:	0800825f 	.word	0x0800825f
 80081d8:	0800825f 	.word	0x0800825f
 80081dc:	0800825f 	.word	0x0800825f
 80081e0:	0800825f 	.word	0x0800825f
 80081e4:	0800825f 	.word	0x0800825f
 80081e8:	0800821b 	.word	0x0800821b
 80081ec:	08008245 	.word	0x08008245
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d107      	bne.n	800820c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80081fc:	f107 030a 	add.w	r3, r7, #10
 8008200:	2202      	movs	r2, #2
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 fd53 	bl	8009cb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800820a:	e032      	b.n	8008272 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f001 fcd1 	bl	8009bb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008214:	2303      	movs	r3, #3
 8008216:	75fb      	strb	r3, [r7, #23]
          break;
 8008218:	e02b      	b.n	8008272 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b03      	cmp	r3, #3
 8008224:	d107      	bne.n	8008236 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008226:	f107 030d 	add.w	r3, r7, #13
 800822a:	2201      	movs	r2, #1
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 fd3e 	bl	8009cb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008234:	e01d      	b.n	8008272 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 fcbc 	bl	8009bb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800823e:	2303      	movs	r3, #3
 8008240:	75fb      	strb	r3, [r7, #23]
          break;
 8008242:	e016      	b.n	8008272 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b03      	cmp	r3, #3
 800824e:	d00f      	beq.n	8008270 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 fcaf 	bl	8009bb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008258:	2303      	movs	r3, #3
 800825a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800825c:	e008      	b.n	8008270 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 fca8 	bl	8009bb6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008266:	2303      	movs	r3, #3
 8008268:	75fb      	strb	r3, [r7, #23]
          break;
 800826a:	e002      	b.n	8008272 <USBD_CDC_Setup+0x19e>
          break;
 800826c:	bf00      	nop
 800826e:	e008      	b.n	8008282 <USBD_CDC_Setup+0x1ae>
          break;
 8008270:	bf00      	nop
      }
      break;
 8008272:	e006      	b.n	8008282 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 fc9d 	bl	8009bb6 <USBD_CtlError>
      ret = USBD_FAIL;
 800827c:	2303      	movs	r3, #3
 800827e:	75fb      	strb	r3, [r7, #23]
      break;
 8008280:	bf00      	nop
  }

  return (uint8_t)ret;
 8008282:	7dfb      	ldrb	r3, [r7, #23]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800829e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	32b0      	adds	r2, #176	@ 0xb0
 80082aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e065      	b.n	8008382 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	32b0      	adds	r2, #176	@ 0xb0
 80082c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	f003 020f 	and.w	r2, r3, #15
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	3314      	adds	r3, #20
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d02f      	beq.n	8008340 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	f003 020f 	and.w	r2, r3, #15
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	3314      	adds	r3, #20
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	78fb      	ldrb	r3, [r7, #3]
 80082f8:	f003 010f 	and.w	r1, r3, #15
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	460b      	mov	r3, r1
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	440b      	add	r3, r1
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4403      	add	r3, r0
 8008308:	331c      	adds	r3, #28
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008310:	fb01 f303 	mul.w	r3, r1, r3
 8008314:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008316:	2b00      	cmp	r3, #0
 8008318:	d112      	bne.n	8008340 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800831a:	78fb      	ldrb	r3, [r7, #3]
 800831c:	f003 020f 	and.w	r2, r3, #15
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	3314      	adds	r3, #20
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008332:	78f9      	ldrb	r1, [r7, #3]
 8008334:	2300      	movs	r3, #0
 8008336:	2200      	movs	r2, #0
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f002 f9d2 	bl	800a6e2 <USBD_LL_Transmit>
 800833e:	e01f      	b.n	8008380 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	33b0      	adds	r3, #176	@ 0xb0
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d010      	beq.n	8008380 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	33b0      	adds	r3, #176	@ 0xb0
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	32b0      	adds	r2, #176	@ 0xb0
 80083a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	32b0      	adds	r2, #176	@ 0xb0
 80083b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e01a      	b.n	80083f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f002 f9d0 	bl	800a766 <USBD_LL_GetRxDataSize>
 80083c6:	4602      	mov	r2, r0
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	33b0      	adds	r3, #176	@ 0xb0
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80083ec:	4611      	mov	r1, r2
 80083ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	32b0      	adds	r2, #176	@ 0xb0
 800840c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008410:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008418:	2303      	movs	r3, #3
 800841a:	e024      	b.n	8008466 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	33b0      	adds	r3, #176	@ 0xb0
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d019      	beq.n	8008464 <USBD_CDC_EP0_RxReady+0x6a>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008436:	2bff      	cmp	r3, #255	@ 0xff
 8008438:	d014      	beq.n	8008464 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	33b0      	adds	r3, #176	@ 0xb0
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008452:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800845a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	22ff      	movs	r2, #255	@ 0xff
 8008460:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008478:	2182      	movs	r1, #130	@ 0x82
 800847a:	4818      	ldr	r0, [pc, #96]	@ (80084dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800847c:	f000 fd62 	bl	8008f44 <USBD_GetEpDesc>
 8008480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008482:	2101      	movs	r1, #1
 8008484:	4815      	ldr	r0, [pc, #84]	@ (80084dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008486:	f000 fd5d 	bl	8008f44 <USBD_GetEpDesc>
 800848a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800848c:	2181      	movs	r1, #129	@ 0x81
 800848e:	4813      	ldr	r0, [pc, #76]	@ (80084dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008490:	f000 fd58 	bl	8008f44 <USBD_GetEpDesc>
 8008494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2210      	movs	r2, #16
 80084a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d006      	beq.n	80084b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084b0:	711a      	strb	r2, [r3, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d006      	beq.n	80084ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084c4:	711a      	strb	r2, [r3, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2243      	movs	r2, #67	@ 0x43
 80084ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80084d0:	4b02      	ldr	r3, [pc, #8]	@ (80084dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	2000005c 	.word	0x2000005c

080084e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084e8:	2182      	movs	r1, #130	@ 0x82
 80084ea:	4818      	ldr	r0, [pc, #96]	@ (800854c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084ec:	f000 fd2a 	bl	8008f44 <USBD_GetEpDesc>
 80084f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084f2:	2101      	movs	r1, #1
 80084f4:	4815      	ldr	r0, [pc, #84]	@ (800854c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084f6:	f000 fd25 	bl	8008f44 <USBD_GetEpDesc>
 80084fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084fc:	2181      	movs	r1, #129	@ 0x81
 80084fe:	4813      	ldr	r0, [pc, #76]	@ (800854c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008500:	f000 fd20 	bl	8008f44 <USBD_GetEpDesc>
 8008504:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2210      	movs	r2, #16
 8008510:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d006      	beq.n	8008526 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2200      	movs	r2, #0
 800851c:	711a      	strb	r2, [r3, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f042 0202 	orr.w	r2, r2, #2
 8008524:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d006      	beq.n	800853a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	711a      	strb	r2, [r3, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f042 0202 	orr.w	r2, r2, #2
 8008538:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2243      	movs	r2, #67	@ 0x43
 800853e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008540:	4b02      	ldr	r3, [pc, #8]	@ (800854c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	2000005c 	.word	0x2000005c

08008550 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008558:	2182      	movs	r1, #130	@ 0x82
 800855a:	4818      	ldr	r0, [pc, #96]	@ (80085bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800855c:	f000 fcf2 	bl	8008f44 <USBD_GetEpDesc>
 8008560:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008562:	2101      	movs	r1, #1
 8008564:	4815      	ldr	r0, [pc, #84]	@ (80085bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008566:	f000 fced 	bl	8008f44 <USBD_GetEpDesc>
 800856a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800856c:	2181      	movs	r1, #129	@ 0x81
 800856e:	4813      	ldr	r0, [pc, #76]	@ (80085bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008570:	f000 fce8 	bl	8008f44 <USBD_GetEpDesc>
 8008574:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2210      	movs	r2, #16
 8008580:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d006      	beq.n	8008596 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	2200      	movs	r2, #0
 800858c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008590:	711a      	strb	r2, [r3, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d006      	beq.n	80085aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085a4:	711a      	strb	r2, [r3, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2243      	movs	r2, #67	@ 0x43
 80085ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80085b0:	4b02      	ldr	r3, [pc, #8]	@ (80085bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	2000005c 	.word	0x2000005c

080085c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	220a      	movs	r2, #10
 80085cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80085ce:	4b03      	ldr	r3, [pc, #12]	@ (80085dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	20000018 	.word	0x20000018

080085e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e009      	b.n	8008608 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	33b0      	adds	r3, #176	@ 0xb0
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	32b0      	adds	r2, #176	@ 0xb0
 800862a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008636:	2303      	movs	r3, #3
 8008638:	e008      	b.n	800864c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	371c      	adds	r7, #28
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	32b0      	adds	r2, #176	@ 0xb0
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008678:	2303      	movs	r3, #3
 800867a:	e004      	b.n	8008686 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
	...

08008694 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	32b0      	adds	r2, #176	@ 0xb0
 80086a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086aa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80086ac:	2301      	movs	r3, #1
 80086ae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e025      	b.n	8008706 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d11f      	bne.n	8008704 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80086cc:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <USBD_CDC_TransmitPacket+0x7c>)
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f003 020f 	and.w	r2, r3, #15
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4403      	add	r3, r0
 80086e6:	3314      	adds	r3, #20
 80086e8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80086ea:	4b09      	ldr	r3, [pc, #36]	@ (8008710 <USBD_CDC_TransmitPacket+0x7c>)
 80086ec:	7819      	ldrb	r1, [r3, #0]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 fff1 	bl	800a6e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	2000009f 	.word	0x2000009f

08008714 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	32b0      	adds	r2, #176	@ 0xb0
 8008726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	32b0      	adds	r2, #176	@ 0xb0
 8008736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	e018      	b.n	8008774 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	7c1b      	ldrb	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10a      	bne.n	8008760 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800874a:	4b0c      	ldr	r3, [pc, #48]	@ (800877c <USBD_CDC_ReceivePacket+0x68>)
 800874c:	7819      	ldrb	r1, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008754:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 ffe3 	bl	800a724 <USBD_LL_PrepareReceive>
 800875e:	e008      	b.n	8008772 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008760:	4b06      	ldr	r3, [pc, #24]	@ (800877c <USBD_CDC_ReceivePacket+0x68>)
 8008762:	7819      	ldrb	r1, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800876a:	2340      	movs	r3, #64	@ 0x40
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 ffd9 	bl	800a724 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	200000a0 	.word	0x200000a0

08008780 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	4613      	mov	r3, r2
 800878c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008794:	2303      	movs	r3, #3
 8008796:	e01f      	b.n	80087d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	79fa      	ldrb	r2, [r7, #7]
 80087ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f001 fe53 	bl	800a478 <USBD_LL_Init>
 80087d2:	4603      	mov	r3, r0
 80087d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e025      	b.n	8008844 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	32ae      	adds	r2, #174	@ 0xae
 800880a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00f      	beq.n	8008834 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	32ae      	adds	r2, #174	@ 0xae
 800881e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008824:	f107 020e 	add.w	r2, r7, #14
 8008828:	4610      	mov	r0, r2
 800882a:	4798      	blx	r3
 800882c:	4602      	mov	r2, r0
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 fe5b 	bl	800a510 <USBD_LL_Start>
 800885a:	4603      	mov	r3, r0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800886c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008890:	2b00      	cmp	r3, #0
 8008892:	d009      	beq.n	80088a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	4611      	mov	r1, r2
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	4798      	blx	r3
 80088a4:	4603      	mov	r3, r0
 80088a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	460b      	mov	r3, r1
 80088bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	78fa      	ldrb	r2, [r7, #3]
 80088cc:	4611      	mov	r1, r2
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	4798      	blx	r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 f922 	bl	8009b42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800890c:	461a      	mov	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800891a:	f003 031f 	and.w	r3, r3, #31
 800891e:	2b02      	cmp	r3, #2
 8008920:	d01a      	beq.n	8008958 <USBD_LL_SetupStage+0x72>
 8008922:	2b02      	cmp	r3, #2
 8008924:	d822      	bhi.n	800896c <USBD_LL_SetupStage+0x86>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <USBD_LL_SetupStage+0x4a>
 800892a:	2b01      	cmp	r3, #1
 800892c:	d00a      	beq.n	8008944 <USBD_LL_SetupStage+0x5e>
 800892e:	e01d      	b.n	800896c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fb77 	bl	800902c <USBD_StdDevReq>
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]
      break;
 8008942:	e020      	b.n	8008986 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fbdf 	bl	8009110 <USBD_StdItfReq>
 8008952:	4603      	mov	r3, r0
 8008954:	73fb      	strb	r3, [r7, #15]
      break;
 8008956:	e016      	b.n	8008986 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fc41 	bl	80091e8 <USBD_StdEPReq>
 8008966:	4603      	mov	r3, r0
 8008968:	73fb      	strb	r3, [r7, #15]
      break;
 800896a:	e00c      	b.n	8008986 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008972:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008976:	b2db      	uxtb	r3, r3
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 fe28 	bl	800a5d0 <USBD_LL_StallEP>
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]
      break;
 8008984:	bf00      	nop
  }

  return ret;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	460b      	mov	r3, r1
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80089a2:	7afb      	ldrb	r3, [r7, #11]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d177      	bne.n	8008a98 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80089ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	f040 80a1 	bne.w	8008afe <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	8992      	ldrh	r2, [r2, #12]
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d91c      	bls.n	8008a02 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	8992      	ldrh	r2, [r2, #12]
 80089d0:	1a9a      	subs	r2, r3, r2
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	8992      	ldrh	r2, [r2, #12]
 80089de:	441a      	add	r2, r3
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	6919      	ldr	r1, [r3, #16]
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	899b      	ldrh	r3, [r3, #12]
 80089ec:	461a      	mov	r2, r3
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	4293      	cmp	r3, r2
 80089f4:	bf38      	it	cc
 80089f6:	4613      	movcc	r3, r2
 80089f8:	461a      	mov	r2, r3
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f001 f9a8 	bl	8009d50 <USBD_CtlContinueRx>
 8008a00:	e07d      	b.n	8008afe <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d014      	beq.n	8008a3a <USBD_LL_DataOutStage+0xaa>
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d81d      	bhi.n	8008a50 <USBD_LL_DataOutStage+0xc0>
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <USBD_LL_DataOutStage+0x8e>
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d003      	beq.n	8008a24 <USBD_LL_DataOutStage+0x94>
 8008a1c:	e018      	b.n	8008a50 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	75bb      	strb	r3, [r7, #22]
            break;
 8008a22:	e018      	b.n	8008a56 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 fa6e 	bl	8008f10 <USBD_CoreFindIF>
 8008a34:	4603      	mov	r3, r0
 8008a36:	75bb      	strb	r3, [r7, #22]
            break;
 8008a38:	e00d      	b.n	8008a56 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	4619      	mov	r1, r3
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 fa70 	bl	8008f2a <USBD_CoreFindEP>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	75bb      	strb	r3, [r7, #22]
            break;
 8008a4e:	e002      	b.n	8008a56 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	75bb      	strb	r3, [r7, #22]
            break;
 8008a54:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a56:	7dbb      	ldrb	r3, [r7, #22]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d119      	bne.n	8008a90 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d113      	bne.n	8008a90 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a68:	7dba      	ldrb	r2, [r7, #22]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	32ae      	adds	r2, #174	@ 0xae
 8008a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008a78:	7dba      	ldrb	r2, [r7, #22]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a80:	7dba      	ldrb	r2, [r7, #22]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	32ae      	adds	r2, #174	@ 0xae
 8008a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f001 f96e 	bl	8009d72 <USBD_CtlSendStatus>
 8008a96:	e032      	b.n	8008afe <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 fa41 	bl	8008f2a <USBD_CoreFindEP>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008aac:	7dbb      	ldrb	r3, [r7, #22]
 8008aae:	2bff      	cmp	r3, #255	@ 0xff
 8008ab0:	d025      	beq.n	8008afe <USBD_LL_DataOutStage+0x16e>
 8008ab2:	7dbb      	ldrb	r3, [r7, #22]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d122      	bne.n	8008afe <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d117      	bne.n	8008af4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ac4:	7dba      	ldrb	r2, [r7, #22]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	32ae      	adds	r2, #174	@ 0xae
 8008aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00f      	beq.n	8008af4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008ad4:	7dba      	ldrb	r2, [r7, #22]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008adc:	7dba      	ldrb	r2, [r7, #22]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	32ae      	adds	r2, #174	@ 0xae
 8008ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	7afa      	ldrb	r2, [r7, #11]
 8008aea:	4611      	mov	r1, r2
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	4798      	blx	r3
 8008af0:	4603      	mov	r3, r0
 8008af2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	e000      	b.n	8008b00 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3718      	adds	r7, #24
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	460b      	mov	r3, r1
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008b16:	7afb      	ldrb	r3, [r7, #11]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d178      	bne.n	8008c0e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3314      	adds	r3, #20
 8008b20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d163      	bne.n	8008bf4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	8992      	ldrh	r2, [r2, #12]
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d91c      	bls.n	8008b72 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	8992      	ldrh	r2, [r2, #12]
 8008b40:	1a9a      	subs	r2, r3, r2
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	8992      	ldrh	r2, [r2, #12]
 8008b4e:	441a      	add	r2, r3
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	6919      	ldr	r1, [r3, #16]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f001 f8c4 	bl	8009cec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b64:	2300      	movs	r3, #0
 8008b66:	2200      	movs	r2, #0
 8008b68:	2100      	movs	r1, #0
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f001 fdda 	bl	800a724 <USBD_LL_PrepareReceive>
 8008b70:	e040      	b.n	8008bf4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	899b      	ldrh	r3, [r3, #12]
 8008b76:	461a      	mov	r2, r3
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d11c      	bne.n	8008bba <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d316      	bcc.n	8008bba <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d20f      	bcs.n	8008bba <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f001 f8a4 	bl	8009cec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bac:	2300      	movs	r3, #0
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f001 fdb6 	bl	800a724 <USBD_LL_PrepareReceive>
 8008bb8:	e01c      	b.n	8008bf4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d10f      	bne.n	8008be6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d009      	beq.n	8008be6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008be6:	2180      	movs	r1, #128	@ 0x80
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f001 fcf1 	bl	800a5d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f001 f8d2 	bl	8009d98 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d03a      	beq.n	8008c74 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff fe30 	bl	8008864 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008c0c:	e032      	b.n	8008c74 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	4619      	mov	r1, r3
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 f986 	bl	8008f2a <USBD_CoreFindEP>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	2bff      	cmp	r3, #255	@ 0xff
 8008c26:	d025      	beq.n	8008c74 <USBD_LL_DataInStage+0x16c>
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d122      	bne.n	8008c74 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d11c      	bne.n	8008c74 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008c3a:	7dfa      	ldrb	r2, [r7, #23]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	32ae      	adds	r2, #174	@ 0xae
 8008c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d014      	beq.n	8008c74 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008c4a:	7dfa      	ldrb	r2, [r7, #23]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c52:	7dfa      	ldrb	r2, [r7, #23]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	32ae      	adds	r2, #174	@ 0xae
 8008c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	7afa      	ldrb	r2, [r7, #11]
 8008c60:	4611      	mov	r1, r2
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	4798      	blx	r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c6a:	7dbb      	ldrb	r3, [r7, #22]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008c70:	7dbb      	ldrb	r3, [r7, #22]
 8008c72:	e000      	b.n	8008c76 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d014      	beq.n	8008ce4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00e      	beq.n	8008ce4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6852      	ldr	r2, [r2, #4]
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	4798      	blx	r3
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ce4:	2340      	movs	r3, #64	@ 0x40
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2100      	movs	r1, #0
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 fc2b 	bl	800a546 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2240      	movs	r2, #64	@ 0x40
 8008cfc:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d00:	2340      	movs	r3, #64	@ 0x40
 8008d02:	2200      	movs	r2, #0
 8008d04:	2180      	movs	r1, #128	@ 0x80
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 fc1d 	bl	800a546 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2240      	movs	r2, #64	@ 0x40
 8008d18:	841a      	strh	r2, [r3, #32]

  return ret;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	78fa      	ldrb	r2, [r7, #3]
 8008d34:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	d006      	beq.n	8008d66 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2204      	movs	r2, #4
 8008d6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b04      	cmp	r3, #4
 8008d8e:	d106      	bne.n	8008d9e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d110      	bne.n	8008de2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00b      	beq.n	8008de2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d005      	beq.n	8008de2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	32ae      	adds	r2, #174	@ 0xae
 8008e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e01c      	b.n	8008e48 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d115      	bne.n	8008e46 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	32ae      	adds	r2, #174	@ 0xae
 8008e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	32ae      	adds	r2, #174	@ 0xae
 8008e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	78fa      	ldrb	r2, [r7, #3]
 8008e40:	4611      	mov	r1, r2
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	32ae      	adds	r2, #174	@ 0xae
 8008e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e01c      	b.n	8008eac <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d115      	bne.n	8008eaa <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	32ae      	adds	r2, #174	@ 0xae
 8008e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	32ae      	adds	r2, #174	@ 0xae
 8008e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00e      	beq.n	8008f06 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	6852      	ldr	r2, [r2, #4]
 8008ef4:	b2d2      	uxtb	r2, r2
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4798      	blx	r3
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008f02:	2303      	movs	r3, #3
 8008f04:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	460b      	mov	r3, r1
 8008f34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	885b      	ldrh	r3, [r3, #2]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d91f      	bls.n	8008faa <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f70:	e013      	b.n	8008f9a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f72:	f107 030a 	add.w	r3, r7, #10
 8008f76:	4619      	mov	r1, r3
 8008f78:	6978      	ldr	r0, [r7, #20]
 8008f7a:	f000 f81b 	bl	8008fb4 <USBD_GetNextDesc>
 8008f7e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	785b      	ldrb	r3, [r3, #1]
 8008f84:	2b05      	cmp	r3, #5
 8008f86:	d108      	bne.n	8008f9a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	789b      	ldrb	r3, [r3, #2]
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d008      	beq.n	8008fa8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f96:	2300      	movs	r3, #0
 8008f98:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	885b      	ldrh	r3, [r3, #2]
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	897b      	ldrh	r3, [r7, #10]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d8e5      	bhi.n	8008f72 <USBD_GetEpDesc+0x2e>
 8008fa6:	e000      	b.n	8008faa <USBD_GetEpDesc+0x66>
          break;
 8008fa8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008faa:	693b      	ldr	r3, [r7, #16]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	7812      	ldrb	r2, [r2, #0]
 8008fca:	4413      	add	r3, r2
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4413      	add	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008fde:	68fb      	ldr	r3, [r7, #12]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	3301      	adds	r3, #1
 8009002:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800900a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	b21a      	sxth	r2, r3
 8009012:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009016:	4313      	orrs	r3, r2
 8009018:	b21b      	sxth	r3, r3
 800901a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800901c:	89fb      	ldrh	r3, [r7, #14]
}
 800901e:	4618      	mov	r0, r3
 8009020:	371c      	adds	r7, #28
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
	...

0800902c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009042:	2b40      	cmp	r3, #64	@ 0x40
 8009044:	d005      	beq.n	8009052 <USBD_StdDevReq+0x26>
 8009046:	2b40      	cmp	r3, #64	@ 0x40
 8009048:	d857      	bhi.n	80090fa <USBD_StdDevReq+0xce>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00f      	beq.n	800906e <USBD_StdDevReq+0x42>
 800904e:	2b20      	cmp	r3, #32
 8009050:	d153      	bne.n	80090fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	32ae      	adds	r2, #174	@ 0xae
 800905c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	4798      	blx	r3
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]
      break;
 800906c:	e04a      	b.n	8009104 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	785b      	ldrb	r3, [r3, #1]
 8009072:	2b09      	cmp	r3, #9
 8009074:	d83b      	bhi.n	80090ee <USBD_StdDevReq+0xc2>
 8009076:	a201      	add	r2, pc, #4	@ (adr r2, 800907c <USBD_StdDevReq+0x50>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	080090d1 	.word	0x080090d1
 8009080:	080090e5 	.word	0x080090e5
 8009084:	080090ef 	.word	0x080090ef
 8009088:	080090db 	.word	0x080090db
 800908c:	080090ef 	.word	0x080090ef
 8009090:	080090af 	.word	0x080090af
 8009094:	080090a5 	.word	0x080090a5
 8009098:	080090ef 	.word	0x080090ef
 800909c:	080090c7 	.word	0x080090c7
 80090a0:	080090b9 	.word	0x080090b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa3e 	bl	8009528 <USBD_GetDescriptor>
          break;
 80090ac:	e024      	b.n	80090f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fba3 	bl	80097fc <USBD_SetAddress>
          break;
 80090b6:	e01f      	b.n	80090f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fbe2 	bl	8009884 <USBD_SetConfig>
 80090c0:	4603      	mov	r3, r0
 80090c2:	73fb      	strb	r3, [r7, #15]
          break;
 80090c4:	e018      	b.n	80090f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fc85 	bl	80099d8 <USBD_GetConfig>
          break;
 80090ce:	e013      	b.n	80090f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fcb6 	bl	8009a44 <USBD_GetStatus>
          break;
 80090d8:	e00e      	b.n	80090f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fce5 	bl	8009aac <USBD_SetFeature>
          break;
 80090e2:	e009      	b.n	80090f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090e4:	6839      	ldr	r1, [r7, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fd09 	bl	8009afe <USBD_ClrFeature>
          break;
 80090ec:	e004      	b.n	80090f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fd60 	bl	8009bb6 <USBD_CtlError>
          break;
 80090f6:	bf00      	nop
      }
      break;
 80090f8:	e004      	b.n	8009104 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fd5a 	bl	8009bb6 <USBD_CtlError>
      break;
 8009102:	bf00      	nop
  }

  return ret;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop

08009110 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009126:	2b40      	cmp	r3, #64	@ 0x40
 8009128:	d005      	beq.n	8009136 <USBD_StdItfReq+0x26>
 800912a:	2b40      	cmp	r3, #64	@ 0x40
 800912c:	d852      	bhi.n	80091d4 <USBD_StdItfReq+0xc4>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <USBD_StdItfReq+0x26>
 8009132:	2b20      	cmp	r3, #32
 8009134:	d14e      	bne.n	80091d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800913c:	b2db      	uxtb	r3, r3
 800913e:	3b01      	subs	r3, #1
 8009140:	2b02      	cmp	r3, #2
 8009142:	d840      	bhi.n	80091c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	889b      	ldrh	r3, [r3, #4]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b01      	cmp	r3, #1
 800914c:	d836      	bhi.n	80091bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	889b      	ldrh	r3, [r3, #4]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff feda 	bl	8008f10 <USBD_CoreFindIF>
 800915c:	4603      	mov	r3, r0
 800915e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	2bff      	cmp	r3, #255	@ 0xff
 8009164:	d01d      	beq.n	80091a2 <USBD_StdItfReq+0x92>
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d11a      	bne.n	80091a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800916c:	7bba      	ldrb	r2, [r7, #14]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	32ae      	adds	r2, #174	@ 0xae
 8009172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00f      	beq.n	800919c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800917c:	7bba      	ldrb	r2, [r7, #14]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009184:	7bba      	ldrb	r2, [r7, #14]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	32ae      	adds	r2, #174	@ 0xae
 800918a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	4798      	blx	r3
 8009196:	4603      	mov	r3, r0
 8009198:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800919a:	e004      	b.n	80091a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800919c:	2303      	movs	r3, #3
 800919e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091a0:	e001      	b.n	80091a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80091a2:	2303      	movs	r3, #3
 80091a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	88db      	ldrh	r3, [r3, #6]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d110      	bne.n	80091d0 <USBD_StdItfReq+0xc0>
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10d      	bne.n	80091d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fddc 	bl	8009d72 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091ba:	e009      	b.n	80091d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fcf9 	bl	8009bb6 <USBD_CtlError>
          break;
 80091c4:	e004      	b.n	80091d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fcf4 	bl	8009bb6 <USBD_CtlError>
          break;
 80091ce:	e000      	b.n	80091d2 <USBD_StdItfReq+0xc2>
          break;
 80091d0:	bf00      	nop
      }
      break;
 80091d2:	e004      	b.n	80091de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fced 	bl	8009bb6 <USBD_CtlError>
      break;
 80091dc:	bf00      	nop
  }

  return ret;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	889b      	ldrh	r3, [r3, #4]
 80091fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009204:	2b40      	cmp	r3, #64	@ 0x40
 8009206:	d007      	beq.n	8009218 <USBD_StdEPReq+0x30>
 8009208:	2b40      	cmp	r3, #64	@ 0x40
 800920a:	f200 8181 	bhi.w	8009510 <USBD_StdEPReq+0x328>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d02a      	beq.n	8009268 <USBD_StdEPReq+0x80>
 8009212:	2b20      	cmp	r3, #32
 8009214:	f040 817c 	bne.w	8009510 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009218:	7bbb      	ldrb	r3, [r7, #14]
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff fe84 	bl	8008f2a <USBD_CoreFindEP>
 8009222:	4603      	mov	r3, r0
 8009224:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009226:	7b7b      	ldrb	r3, [r7, #13]
 8009228:	2bff      	cmp	r3, #255	@ 0xff
 800922a:	f000 8176 	beq.w	800951a <USBD_StdEPReq+0x332>
 800922e:	7b7b      	ldrb	r3, [r7, #13]
 8009230:	2b00      	cmp	r3, #0
 8009232:	f040 8172 	bne.w	800951a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009236:	7b7a      	ldrb	r2, [r7, #13]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800923e:	7b7a      	ldrb	r2, [r7, #13]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	32ae      	adds	r2, #174	@ 0xae
 8009244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 8165 	beq.w	800951a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009250:	7b7a      	ldrb	r2, [r7, #13]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	32ae      	adds	r2, #174	@ 0xae
 8009256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
 8009262:	4603      	mov	r3, r0
 8009264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009266:	e158      	b.n	800951a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	785b      	ldrb	r3, [r3, #1]
 800926c:	2b03      	cmp	r3, #3
 800926e:	d008      	beq.n	8009282 <USBD_StdEPReq+0x9a>
 8009270:	2b03      	cmp	r3, #3
 8009272:	f300 8147 	bgt.w	8009504 <USBD_StdEPReq+0x31c>
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 809b 	beq.w	80093b2 <USBD_StdEPReq+0x1ca>
 800927c:	2b01      	cmp	r3, #1
 800927e:	d03c      	beq.n	80092fa <USBD_StdEPReq+0x112>
 8009280:	e140      	b.n	8009504 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b02      	cmp	r3, #2
 800928c:	d002      	beq.n	8009294 <USBD_StdEPReq+0xac>
 800928e:	2b03      	cmp	r3, #3
 8009290:	d016      	beq.n	80092c0 <USBD_StdEPReq+0xd8>
 8009292:	e02c      	b.n	80092ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009294:	7bbb      	ldrb	r3, [r7, #14]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00d      	beq.n	80092b6 <USBD_StdEPReq+0xce>
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	2b80      	cmp	r3, #128	@ 0x80
 800929e:	d00a      	beq.n	80092b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 f993 	bl	800a5d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092aa:	2180      	movs	r1, #128	@ 0x80
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 f98f 	bl	800a5d0 <USBD_LL_StallEP>
 80092b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092b4:	e020      	b.n	80092f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fc7c 	bl	8009bb6 <USBD_CtlError>
              break;
 80092be:	e01b      	b.n	80092f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	885b      	ldrh	r3, [r3, #2]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10e      	bne.n	80092e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00b      	beq.n	80092e6 <USBD_StdEPReq+0xfe>
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	2b80      	cmp	r3, #128	@ 0x80
 80092d2:	d008      	beq.n	80092e6 <USBD_StdEPReq+0xfe>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	88db      	ldrh	r3, [r3, #6]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 f975 	bl	800a5d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fd43 	bl	8009d72 <USBD_CtlSendStatus>

              break;
 80092ec:	e004      	b.n	80092f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fc60 	bl	8009bb6 <USBD_CtlError>
              break;
 80092f6:	bf00      	nop
          }
          break;
 80092f8:	e109      	b.n	800950e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b02      	cmp	r3, #2
 8009304:	d002      	beq.n	800930c <USBD_StdEPReq+0x124>
 8009306:	2b03      	cmp	r3, #3
 8009308:	d016      	beq.n	8009338 <USBD_StdEPReq+0x150>
 800930a:	e04b      	b.n	80093a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00d      	beq.n	800932e <USBD_StdEPReq+0x146>
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	2b80      	cmp	r3, #128	@ 0x80
 8009316:	d00a      	beq.n	800932e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 f957 	bl	800a5d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009322:	2180      	movs	r1, #128	@ 0x80
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 f953 	bl	800a5d0 <USBD_LL_StallEP>
 800932a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800932c:	e040      	b.n	80093b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fc40 	bl	8009bb6 <USBD_CtlError>
              break;
 8009336:	e03b      	b.n	80093b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	885b      	ldrh	r3, [r3, #2]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d136      	bne.n	80093ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009346:	2b00      	cmp	r3, #0
 8009348:	d004      	beq.n	8009354 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800934a:	7bbb      	ldrb	r3, [r7, #14]
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f001 f95d 	bl	800a60e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fd0c 	bl	8009d72 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff fde3 	bl	8008f2a <USBD_CoreFindEP>
 8009364:	4603      	mov	r3, r0
 8009366:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009368:	7b7b      	ldrb	r3, [r7, #13]
 800936a:	2bff      	cmp	r3, #255	@ 0xff
 800936c:	d01f      	beq.n	80093ae <USBD_StdEPReq+0x1c6>
 800936e:	7b7b      	ldrb	r3, [r7, #13]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d11c      	bne.n	80093ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009374:	7b7a      	ldrb	r2, [r7, #13]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800937c:	7b7a      	ldrb	r2, [r7, #13]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	32ae      	adds	r2, #174	@ 0xae
 8009382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d010      	beq.n	80093ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800938c:	7b7a      	ldrb	r2, [r7, #13]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	32ae      	adds	r2, #174	@ 0xae
 8009392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	4798      	blx	r3
 800939e:	4603      	mov	r3, r0
 80093a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80093a2:	e004      	b.n	80093ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fc05 	bl	8009bb6 <USBD_CtlError>
              break;
 80093ac:	e000      	b.n	80093b0 <USBD_StdEPReq+0x1c8>
              break;
 80093ae:	bf00      	nop
          }
          break;
 80093b0:	e0ad      	b.n	800950e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d002      	beq.n	80093c4 <USBD_StdEPReq+0x1dc>
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d033      	beq.n	800942a <USBD_StdEPReq+0x242>
 80093c2:	e099      	b.n	80094f8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d007      	beq.n	80093da <USBD_StdEPReq+0x1f2>
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	2b80      	cmp	r3, #128	@ 0x80
 80093ce:	d004      	beq.n	80093da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fbef 	bl	8009bb6 <USBD_CtlError>
                break;
 80093d8:	e093      	b.n	8009502 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	da0b      	bge.n	80093fa <USBD_StdEPReq+0x212>
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093e8:	4613      	mov	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	3310      	adds	r3, #16
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	4413      	add	r3, r2
 80093f6:	3304      	adds	r3, #4
 80093f8:	e00b      	b.n	8009412 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	4413      	add	r3, r2
 8009410:	3304      	adds	r3, #4
 8009412:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2200      	movs	r2, #0
 8009418:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	330e      	adds	r3, #14
 800941e:	2202      	movs	r2, #2
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fc44 	bl	8009cb0 <USBD_CtlSendData>
              break;
 8009428:	e06b      	b.n	8009502 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800942a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800942e:	2b00      	cmp	r3, #0
 8009430:	da11      	bge.n	8009456 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	f003 020f 	and.w	r2, r3, #15
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	3323      	adds	r3, #35	@ 0x23
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d117      	bne.n	800947c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fbb1 	bl	8009bb6 <USBD_CtlError>
                  break;
 8009454:	e055      	b.n	8009502 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	f003 020f 	and.w	r2, r3, #15
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d104      	bne.n	800947c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fb9e 	bl	8009bb6 <USBD_CtlError>
                  break;
 800947a:	e042      	b.n	8009502 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800947c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009480:	2b00      	cmp	r3, #0
 8009482:	da0b      	bge.n	800949c <USBD_StdEPReq+0x2b4>
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	3310      	adds	r3, #16
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	4413      	add	r3, r2
 8009498:	3304      	adds	r3, #4
 800949a:	e00b      	b.n	80094b4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	4413      	add	r3, r2
 80094b2:	3304      	adds	r3, #4
 80094b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <USBD_StdEPReq+0x2da>
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	2b80      	cmp	r3, #128	@ 0x80
 80094c0:	d103      	bne.n	80094ca <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2200      	movs	r2, #0
 80094c6:	739a      	strb	r2, [r3, #14]
 80094c8:	e00e      	b.n	80094e8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094ca:	7bbb      	ldrb	r3, [r7, #14]
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f001 f8bc 	bl	800a64c <USBD_LL_IsStallEP>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2201      	movs	r2, #1
 80094de:	739a      	strb	r2, [r3, #14]
 80094e0:	e002      	b.n	80094e8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2200      	movs	r2, #0
 80094e6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	330e      	adds	r3, #14
 80094ec:	2202      	movs	r2, #2
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fbdd 	bl	8009cb0 <USBD_CtlSendData>
              break;
 80094f6:	e004      	b.n	8009502 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fb5b 	bl	8009bb6 <USBD_CtlError>
              break;
 8009500:	bf00      	nop
          }
          break;
 8009502:	e004      	b.n	800950e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fb55 	bl	8009bb6 <USBD_CtlError>
          break;
 800950c:	bf00      	nop
      }
      break;
 800950e:	e005      	b.n	800951c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fb4f 	bl	8009bb6 <USBD_CtlError>
      break;
 8009518:	e000      	b.n	800951c <USBD_StdEPReq+0x334>
      break;
 800951a:	bf00      	nop
  }

  return ret;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009536:	2300      	movs	r3, #0
 8009538:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	885b      	ldrh	r3, [r3, #2]
 8009542:	0a1b      	lsrs	r3, r3, #8
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	2b06      	cmp	r3, #6
 800954a:	f200 8128 	bhi.w	800979e <USBD_GetDescriptor+0x276>
 800954e:	a201      	add	r2, pc, #4	@ (adr r2, 8009554 <USBD_GetDescriptor+0x2c>)
 8009550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009554:	08009571 	.word	0x08009571
 8009558:	08009589 	.word	0x08009589
 800955c:	080095c9 	.word	0x080095c9
 8009560:	0800979f 	.word	0x0800979f
 8009564:	0800979f 	.word	0x0800979f
 8009568:	0800973f 	.word	0x0800973f
 800956c:	0800976b 	.word	0x0800976b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	7c12      	ldrb	r2, [r2, #16]
 800957c:	f107 0108 	add.w	r1, r7, #8
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	60f8      	str	r0, [r7, #12]
      break;
 8009586:	e112      	b.n	80097ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	7c1b      	ldrb	r3, [r3, #16]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10d      	bne.n	80095ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009598:	f107 0208 	add.w	r2, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3301      	adds	r3, #1
 80095a6:	2202      	movs	r2, #2
 80095a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095aa:	e100      	b.n	80097ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b4:	f107 0208 	add.w	r2, r7, #8
 80095b8:	4610      	mov	r0, r2
 80095ba:	4798      	blx	r3
 80095bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3301      	adds	r3, #1
 80095c2:	2202      	movs	r2, #2
 80095c4:	701a      	strb	r2, [r3, #0]
      break;
 80095c6:	e0f2      	b.n	80097ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	885b      	ldrh	r3, [r3, #2]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b05      	cmp	r3, #5
 80095d0:	f200 80ac 	bhi.w	800972c <USBD_GetDescriptor+0x204>
 80095d4:	a201      	add	r2, pc, #4	@ (adr r2, 80095dc <USBD_GetDescriptor+0xb4>)
 80095d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095da:	bf00      	nop
 80095dc:	080095f5 	.word	0x080095f5
 80095e0:	08009629 	.word	0x08009629
 80095e4:	0800965d 	.word	0x0800965d
 80095e8:	08009691 	.word	0x08009691
 80095ec:	080096c5 	.word	0x080096c5
 80095f0:	080096f9 	.word	0x080096f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	7c12      	ldrb	r2, [r2, #16]
 800960c:	f107 0108 	add.w	r1, r7, #8
 8009610:	4610      	mov	r0, r2
 8009612:	4798      	blx	r3
 8009614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009616:	e091      	b.n	800973c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 facb 	bl	8009bb6 <USBD_CtlError>
            err++;
 8009620:	7afb      	ldrb	r3, [r7, #11]
 8009622:	3301      	adds	r3, #1
 8009624:	72fb      	strb	r3, [r7, #11]
          break;
 8009626:	e089      	b.n	800973c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00b      	beq.n	800964c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	7c12      	ldrb	r2, [r2, #16]
 8009640:	f107 0108 	add.w	r1, r7, #8
 8009644:	4610      	mov	r0, r2
 8009646:	4798      	blx	r3
 8009648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800964a:	e077      	b.n	800973c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fab1 	bl	8009bb6 <USBD_CtlError>
            err++;
 8009654:	7afb      	ldrb	r3, [r7, #11]
 8009656:	3301      	adds	r3, #1
 8009658:	72fb      	strb	r3, [r7, #11]
          break;
 800965a:	e06f      	b.n	800973c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00b      	beq.n	8009680 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	7c12      	ldrb	r2, [r2, #16]
 8009674:	f107 0108 	add.w	r1, r7, #8
 8009678:	4610      	mov	r0, r2
 800967a:	4798      	blx	r3
 800967c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800967e:	e05d      	b.n	800973c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fa97 	bl	8009bb6 <USBD_CtlError>
            err++;
 8009688:	7afb      	ldrb	r3, [r7, #11]
 800968a:	3301      	adds	r3, #1
 800968c:	72fb      	strb	r3, [r7, #11]
          break;
 800968e:	e055      	b.n	800973c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00b      	beq.n	80096b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	7c12      	ldrb	r2, [r2, #16]
 80096a8:	f107 0108 	add.w	r1, r7, #8
 80096ac:	4610      	mov	r0, r2
 80096ae:	4798      	blx	r3
 80096b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096b2:	e043      	b.n	800973c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fa7d 	bl	8009bb6 <USBD_CtlError>
            err++;
 80096bc:	7afb      	ldrb	r3, [r7, #11]
 80096be:	3301      	adds	r3, #1
 80096c0:	72fb      	strb	r3, [r7, #11]
          break;
 80096c2:	e03b      	b.n	800973c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00b      	beq.n	80096e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	7c12      	ldrb	r2, [r2, #16]
 80096dc:	f107 0108 	add.w	r1, r7, #8
 80096e0:	4610      	mov	r0, r2
 80096e2:	4798      	blx	r3
 80096e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096e6:	e029      	b.n	800973c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fa63 	bl	8009bb6 <USBD_CtlError>
            err++;
 80096f0:	7afb      	ldrb	r3, [r7, #11]
 80096f2:	3301      	adds	r3, #1
 80096f4:	72fb      	strb	r3, [r7, #11]
          break;
 80096f6:	e021      	b.n	800973c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00b      	beq.n	800971c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	7c12      	ldrb	r2, [r2, #16]
 8009710:	f107 0108 	add.w	r1, r7, #8
 8009714:	4610      	mov	r0, r2
 8009716:	4798      	blx	r3
 8009718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800971a:	e00f      	b.n	800973c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fa49 	bl	8009bb6 <USBD_CtlError>
            err++;
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	3301      	adds	r3, #1
 8009728:	72fb      	strb	r3, [r7, #11]
          break;
 800972a:	e007      	b.n	800973c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fa41 	bl	8009bb6 <USBD_CtlError>
          err++;
 8009734:	7afb      	ldrb	r3, [r7, #11]
 8009736:	3301      	adds	r3, #1
 8009738:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800973a:	bf00      	nop
      }
      break;
 800973c:	e037      	b.n	80097ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	7c1b      	ldrb	r3, [r3, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d109      	bne.n	800975a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800974c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800974e:	f107 0208 	add.w	r2, r7, #8
 8009752:	4610      	mov	r0, r2
 8009754:	4798      	blx	r3
 8009756:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009758:	e029      	b.n	80097ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fa2a 	bl	8009bb6 <USBD_CtlError>
        err++;
 8009762:	7afb      	ldrb	r3, [r7, #11]
 8009764:	3301      	adds	r3, #1
 8009766:	72fb      	strb	r3, [r7, #11]
      break;
 8009768:	e021      	b.n	80097ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	7c1b      	ldrb	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10d      	bne.n	800978e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977a:	f107 0208 	add.w	r2, r7, #8
 800977e:	4610      	mov	r0, r2
 8009780:	4798      	blx	r3
 8009782:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3301      	adds	r3, #1
 8009788:	2207      	movs	r2, #7
 800978a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800978c:	e00f      	b.n	80097ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fa10 	bl	8009bb6 <USBD_CtlError>
        err++;
 8009796:	7afb      	ldrb	r3, [r7, #11]
 8009798:	3301      	adds	r3, #1
 800979a:	72fb      	strb	r3, [r7, #11]
      break;
 800979c:	e007      	b.n	80097ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fa08 	bl	8009bb6 <USBD_CtlError>
      err++;
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	3301      	adds	r3, #1
 80097aa:	72fb      	strb	r3, [r7, #11]
      break;
 80097ac:	bf00      	nop
  }

  if (err != 0U)
 80097ae:	7afb      	ldrb	r3, [r7, #11]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d11e      	bne.n	80097f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	88db      	ldrh	r3, [r3, #6]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d016      	beq.n	80097ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80097bc:	893b      	ldrh	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00e      	beq.n	80097e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	88da      	ldrh	r2, [r3, #6]
 80097c6:	893b      	ldrh	r3, [r7, #8]
 80097c8:	4293      	cmp	r3, r2
 80097ca:	bf28      	it	cs
 80097cc:	4613      	movcs	r3, r2
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097d2:	893b      	ldrh	r3, [r7, #8]
 80097d4:	461a      	mov	r2, r3
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fa69 	bl	8009cb0 <USBD_CtlSendData>
 80097de:	e009      	b.n	80097f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f9e7 	bl	8009bb6 <USBD_CtlError>
 80097e8:	e004      	b.n	80097f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fac1 	bl	8009d72 <USBD_CtlSendStatus>
 80097f0:	e000      	b.n	80097f4 <USBD_GetDescriptor+0x2cc>
    return;
 80097f2:	bf00      	nop
  }
}
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop

080097fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	889b      	ldrh	r3, [r3, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d131      	bne.n	8009872 <USBD_SetAddress+0x76>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	88db      	ldrh	r3, [r3, #6]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d12d      	bne.n	8009872 <USBD_SetAddress+0x76>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	885b      	ldrh	r3, [r3, #2]
 800981a:	2b7f      	cmp	r3, #127	@ 0x7f
 800981c:	d829      	bhi.n	8009872 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	885b      	ldrh	r3, [r3, #2]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009828:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b03      	cmp	r3, #3
 8009834:	d104      	bne.n	8009840 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f9bc 	bl	8009bb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983e:	e01d      	b.n	800987c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	7bfa      	ldrb	r2, [r7, #15]
 8009844:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 ff29 	bl	800a6a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fa8d 	bl	8009d72 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d004      	beq.n	8009868 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2202      	movs	r2, #2
 8009862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009866:	e009      	b.n	800987c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009870:	e004      	b.n	800987c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f99e 	bl	8009bb6 <USBD_CtlError>
  }
}
 800987a:	bf00      	nop
 800987c:	bf00      	nop
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	885b      	ldrh	r3, [r3, #2]
 8009896:	b2da      	uxtb	r2, r3
 8009898:	4b4e      	ldr	r3, [pc, #312]	@ (80099d4 <USBD_SetConfig+0x150>)
 800989a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800989c:	4b4d      	ldr	r3, [pc, #308]	@ (80099d4 <USBD_SetConfig+0x150>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d905      	bls.n	80098b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f985 	bl	8009bb6 <USBD_CtlError>
    return USBD_FAIL;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e08c      	b.n	80099ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d002      	beq.n	80098c2 <USBD_SetConfig+0x3e>
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d029      	beq.n	8009914 <USBD_SetConfig+0x90>
 80098c0:	e075      	b.n	80099ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80098c2:	4b44      	ldr	r3, [pc, #272]	@ (80099d4 <USBD_SetConfig+0x150>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d020      	beq.n	800990c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80098ca:	4b42      	ldr	r3, [pc, #264]	@ (80099d4 <USBD_SetConfig+0x150>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098d4:	4b3f      	ldr	r3, [pc, #252]	@ (80099d4 <USBD_SetConfig+0x150>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7fe ffcd 	bl	800887a <USBD_SetClassConfig>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d008      	beq.n	80098fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f962 	bl	8009bb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2202      	movs	r2, #2
 80098f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098fa:	e065      	b.n	80099c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fa38 	bl	8009d72 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2203      	movs	r2, #3
 8009906:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800990a:	e05d      	b.n	80099c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fa30 	bl	8009d72 <USBD_CtlSendStatus>
      break;
 8009912:	e059      	b.n	80099c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009914:	4b2f      	ldr	r3, [pc, #188]	@ (80099d4 <USBD_SetConfig+0x150>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d112      	bne.n	8009942 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009924:	4b2b      	ldr	r3, [pc, #172]	@ (80099d4 <USBD_SetConfig+0x150>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	461a      	mov	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800992e:	4b29      	ldr	r3, [pc, #164]	@ (80099d4 <USBD_SetConfig+0x150>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7fe ffbc 	bl	80088b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fa19 	bl	8009d72 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009940:	e042      	b.n	80099c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009942:	4b24      	ldr	r3, [pc, #144]	@ (80099d4 <USBD_SetConfig+0x150>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	429a      	cmp	r2, r3
 800994e:	d02a      	beq.n	80099a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7fe ffaa 	bl	80088b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800995e:	4b1d      	ldr	r3, [pc, #116]	@ (80099d4 <USBD_SetConfig+0x150>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009968:	4b1a      	ldr	r3, [pc, #104]	@ (80099d4 <USBD_SetConfig+0x150>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7fe ff83 	bl	800887a <USBD_SetClassConfig>
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00f      	beq.n	800999e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f918 	bl	8009bb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7fe ff8f 	bl	80088b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800999c:	e014      	b.n	80099c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f9e7 	bl	8009d72 <USBD_CtlSendStatus>
      break;
 80099a4:	e010      	b.n	80099c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f9e3 	bl	8009d72 <USBD_CtlSendStatus>
      break;
 80099ac:	e00c      	b.n	80099c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f900 	bl	8009bb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099b6:	4b07      	ldr	r3, [pc, #28]	@ (80099d4 <USBD_SetConfig+0x150>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7fe ff78 	bl	80088b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80099c2:	2303      	movs	r3, #3
 80099c4:	73fb      	strb	r3, [r7, #15]
      break;
 80099c6:	bf00      	nop
  }

  return ret;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	2000dc40 	.word	0x2000dc40

080099d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	88db      	ldrh	r3, [r3, #6]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d004      	beq.n	80099f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f8e2 	bl	8009bb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099f2:	e023      	b.n	8009a3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	dc02      	bgt.n	8009a06 <USBD_GetConfig+0x2e>
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	dc03      	bgt.n	8009a0c <USBD_GetConfig+0x34>
 8009a04:	e015      	b.n	8009a32 <USBD_GetConfig+0x5a>
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d00b      	beq.n	8009a22 <USBD_GetConfig+0x4a>
 8009a0a:	e012      	b.n	8009a32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	3308      	adds	r3, #8
 8009a16:	2201      	movs	r2, #1
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f948 	bl	8009cb0 <USBD_CtlSendData>
        break;
 8009a20:	e00c      	b.n	8009a3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3304      	adds	r3, #4
 8009a26:	2201      	movs	r2, #1
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f940 	bl	8009cb0 <USBD_CtlSendData>
        break;
 8009a30:	e004      	b.n	8009a3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f8be 	bl	8009bb6 <USBD_CtlError>
        break;
 8009a3a:	bf00      	nop
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	3b01      	subs	r3, #1
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d81e      	bhi.n	8009a9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	88db      	ldrh	r3, [r3, #6]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d004      	beq.n	8009a6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f8a5 	bl	8009bb6 <USBD_CtlError>
        break;
 8009a6c:	e01a      	b.n	8009aa4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d005      	beq.n	8009a8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f043 0202 	orr.w	r2, r3, #2
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	330c      	adds	r3, #12
 8009a8e:	2202      	movs	r2, #2
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f90c 	bl	8009cb0 <USBD_CtlSendData>
      break;
 8009a98:	e004      	b.n	8009aa4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f88a 	bl	8009bb6 <USBD_CtlError>
      break;
 8009aa2:	bf00      	nop
  }
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	885b      	ldrh	r3, [r3, #2]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d107      	bne.n	8009ace <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f953 	bl	8009d72 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009acc:	e013      	b.n	8009af6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	885b      	ldrh	r3, [r3, #2]
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d10b      	bne.n	8009aee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	889b      	ldrh	r3, [r3, #4]
 8009ada:	0a1b      	lsrs	r3, r3, #8
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f943 	bl	8009d72 <USBD_CtlSendStatus>
}
 8009aec:	e003      	b.n	8009af6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f860 	bl	8009bb6 <USBD_CtlError>
}
 8009af6:	bf00      	nop
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	3b01      	subs	r3, #1
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d80b      	bhi.n	8009b2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	885b      	ldrh	r3, [r3, #2]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d10c      	bne.n	8009b38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f923 	bl	8009d72 <USBD_CtlSendStatus>
      }
      break;
 8009b2c:	e004      	b.n	8009b38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f840 	bl	8009bb6 <USBD_CtlError>
      break;
 8009b36:	e000      	b.n	8009b3a <USBD_ClrFeature+0x3c>
      break;
 8009b38:	bf00      	nop
  }
}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b084      	sub	sp, #16
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	781a      	ldrb	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	781a      	ldrb	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f7ff fa3d 	bl	8008fec <SWAPBYTE>
 8009b72:	4603      	mov	r3, r0
 8009b74:	461a      	mov	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	3301      	adds	r3, #1
 8009b84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f7ff fa30 	bl	8008fec <SWAPBYTE>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	461a      	mov	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	3301      	adds	r3, #1
 8009b98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7ff fa23 	bl	8008fec <SWAPBYTE>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	461a      	mov	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	80da      	strh	r2, [r3, #6]
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bc0:	2180      	movs	r1, #128	@ 0x80
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fd04 	bl	800a5d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009bc8:	2100      	movs	r1, #0
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fd00 	bl	800a5d0 <USBD_LL_StallEP>
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d042      	beq.n	8009c74 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009bf2:	6938      	ldr	r0, [r7, #16]
 8009bf4:	f000 f842 	bl	8009c7c <USBD_GetLen>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c02:	d808      	bhi.n	8009c16 <USBD_GetString+0x3e>
 8009c04:	6938      	ldr	r0, [r7, #16]
 8009c06:	f000 f839 	bl	8009c7c <USBD_GetLen>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	e001      	b.n	8009c1a <USBD_GetString+0x42>
 8009c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	4413      	add	r3, r2
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	7812      	ldrb	r2, [r2, #0]
 8009c28:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	4413      	add	r3, r2
 8009c36:	2203      	movs	r2, #3
 8009c38:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c40:	e013      	b.n	8009c6a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009c42:	7dfb      	ldrb	r3, [r7, #23]
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	4413      	add	r3, r2
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	7812      	ldrb	r2, [r2, #0]
 8009c4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	3301      	adds	r3, #1
 8009c52:	613b      	str	r3, [r7, #16]
    idx++;
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
 8009c56:	3301      	adds	r3, #1
 8009c58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	4413      	add	r3, r2
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	3301      	adds	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1e7      	bne.n	8009c42 <USBD_GetString+0x6a>
 8009c72:	e000      	b.n	8009c76 <USBD_GetString+0x9e>
    return;
 8009c74:	bf00      	nop
  }
}
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c8c:	e005      	b.n	8009c9a <USBD_GetLen+0x1e>
  {
    len++;
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
 8009c90:	3301      	adds	r3, #1
 8009c92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3301      	adds	r3, #1
 8009c98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1f5      	bne.n	8009c8e <USBD_GetLen+0x12>
  }

  return len;
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	2100      	movs	r1, #0
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 fd00 	bl	800a6e2 <USBD_LL_Transmit>

  return USBD_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fcef 	bl	800a6e2 <USBD_LL_Transmit>

  return USBD_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	60f8      	str	r0, [r7, #12]
 8009d16:	60b9      	str	r1, [r7, #8]
 8009d18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2203      	movs	r2, #3
 8009d1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	2100      	movs	r1, #0
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 fcef 	bl	800a724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	2100      	movs	r1, #0
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f000 fcde 	bl	800a724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b082      	sub	sp, #8
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2204      	movs	r2, #4
 8009d7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d82:	2300      	movs	r3, #0
 8009d84:	2200      	movs	r2, #0
 8009d86:	2100      	movs	r1, #0
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fcaa 	bl	800a6e2 <USBD_LL_Transmit>

  return USBD_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2205      	movs	r2, #5
 8009da4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009da8:	2300      	movs	r3, #0
 8009daa:	2200      	movs	r2, #0
 8009dac:	2100      	movs	r1, #0
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fcb8 	bl	800a724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4912      	ldr	r1, [pc, #72]	@ (8009e10 <MX_USB_DEVICE_Init+0x50>)
 8009dc8:	4812      	ldr	r0, [pc, #72]	@ (8009e14 <MX_USB_DEVICE_Init+0x54>)
 8009dca:	f7fe fcd9 	bl	8008780 <USBD_Init>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009dd4:	f7f7 ff44 	bl	8001c60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009dd8:	490f      	ldr	r1, [pc, #60]	@ (8009e18 <MX_USB_DEVICE_Init+0x58>)
 8009dda:	480e      	ldr	r0, [pc, #56]	@ (8009e14 <MX_USB_DEVICE_Init+0x54>)
 8009ddc:	f7fe fd00 	bl	80087e0 <USBD_RegisterClass>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009de6:	f7f7 ff3b 	bl	8001c60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009dea:	490c      	ldr	r1, [pc, #48]	@ (8009e1c <MX_USB_DEVICE_Init+0x5c>)
 8009dec:	4809      	ldr	r0, [pc, #36]	@ (8009e14 <MX_USB_DEVICE_Init+0x54>)
 8009dee:	f7fe fbf7 	bl	80085e0 <USBD_CDC_RegisterInterface>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009df8:	f7f7 ff32 	bl	8001c60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009dfc:	4805      	ldr	r0, [pc, #20]	@ (8009e14 <MX_USB_DEVICE_Init+0x54>)
 8009dfe:	f7fe fd25 	bl	800884c <USBD_Start>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e08:	f7f7 ff2a 	bl	8001c60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e0c:	bf00      	nop
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	200000b8 	.word	0x200000b8
 8009e14:	2000dc44 	.word	0x2000dc44
 8009e18:	20000024 	.word	0x20000024
 8009e1c:	200000a4 	.word	0x200000a4

08009e20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e24:	2200      	movs	r2, #0
 8009e26:	4905      	ldr	r1, [pc, #20]	@ (8009e3c <CDC_Init_FS+0x1c>)
 8009e28:	4805      	ldr	r0, [pc, #20]	@ (8009e40 <CDC_Init_FS+0x20>)
 8009e2a:	f7fe fbf3 	bl	8008614 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e2e:	4905      	ldr	r1, [pc, #20]	@ (8009e44 <CDC_Init_FS+0x24>)
 8009e30:	4803      	ldr	r0, [pc, #12]	@ (8009e40 <CDC_Init_FS+0x20>)
 8009e32:	f7fe fc11 	bl	8008658 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	2000e764 	.word	0x2000e764
 8009e40:	2000dc44 	.word	0x2000dc44
 8009e44:	2000df64 	.word	0x2000df64

08009e48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
 8009e64:	4613      	mov	r3, r2
 8009e66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e68:	79fb      	ldrb	r3, [r7, #7]
 8009e6a:	2b23      	cmp	r3, #35	@ 0x23
 8009e6c:	d84a      	bhi.n	8009f04 <CDC_Control_FS+0xac>
 8009e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e74 <CDC_Control_FS+0x1c>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009f05 	.word	0x08009f05
 8009e78:	08009f05 	.word	0x08009f05
 8009e7c:	08009f05 	.word	0x08009f05
 8009e80:	08009f05 	.word	0x08009f05
 8009e84:	08009f05 	.word	0x08009f05
 8009e88:	08009f05 	.word	0x08009f05
 8009e8c:	08009f05 	.word	0x08009f05
 8009e90:	08009f05 	.word	0x08009f05
 8009e94:	08009f05 	.word	0x08009f05
 8009e98:	08009f05 	.word	0x08009f05
 8009e9c:	08009f05 	.word	0x08009f05
 8009ea0:	08009f05 	.word	0x08009f05
 8009ea4:	08009f05 	.word	0x08009f05
 8009ea8:	08009f05 	.word	0x08009f05
 8009eac:	08009f05 	.word	0x08009f05
 8009eb0:	08009f05 	.word	0x08009f05
 8009eb4:	08009f05 	.word	0x08009f05
 8009eb8:	08009f05 	.word	0x08009f05
 8009ebc:	08009f05 	.word	0x08009f05
 8009ec0:	08009f05 	.word	0x08009f05
 8009ec4:	08009f05 	.word	0x08009f05
 8009ec8:	08009f05 	.word	0x08009f05
 8009ecc:	08009f05 	.word	0x08009f05
 8009ed0:	08009f05 	.word	0x08009f05
 8009ed4:	08009f05 	.word	0x08009f05
 8009ed8:	08009f05 	.word	0x08009f05
 8009edc:	08009f05 	.word	0x08009f05
 8009ee0:	08009f05 	.word	0x08009f05
 8009ee4:	08009f05 	.word	0x08009f05
 8009ee8:	08009f05 	.word	0x08009f05
 8009eec:	08009f05 	.word	0x08009f05
 8009ef0:	08009f05 	.word	0x08009f05
 8009ef4:	08009f05 	.word	0x08009f05
 8009ef8:	08009f05 	.word	0x08009f05
 8009efc:	08009f05 	.word	0x08009f05
 8009f00:	08009f05 	.word	0x08009f05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f04:	bf00      	nop
  }

  return (USBD_OK);
 8009f06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  // Копируем полученные данные в буфер
	  memcpy((void*)usb_rx_buffer, Buf, (*Len > 64) ? 64 : *Len);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b40      	cmp	r3, #64	@ 0x40
 8009f24:	bf28      	it	cs
 8009f26:	2340      	movcs	r3, #64	@ 0x40
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	4808      	ldr	r0, [pc, #32]	@ (8009f50 <CDC_Receive_FS+0x3c>)
 8009f2e:	f001 fefc 	bl	800bd2a <memcpy>
	  new_data_received = 1; // Устанавливаем флаг получения данных
 8009f32:	4b08      	ldr	r3, [pc, #32]	@ (8009f54 <CDC_Receive_FS+0x40>)
 8009f34:	2201      	movs	r2, #1
 8009f36:	701a      	strb	r2, [r3, #0]

	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	4807      	ldr	r0, [pc, #28]	@ (8009f58 <CDC_Receive_FS+0x44>)
 8009f3c:	f7fe fb8c 	bl	8008658 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f40:	4805      	ldr	r0, [pc, #20]	@ (8009f58 <CDC_Receive_FS+0x44>)
 8009f42:	f7fe fbe7 	bl	8008714 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 8009f46:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	2000df20 	.word	0x2000df20
 8009f54:	2000df60 	.word	0x2000df60
 8009f58:	2000dc44 	.word	0x2000dc44

08009f5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa4 <CDC_Transmit_FS+0x48>)
 8009f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e00b      	b.n	8009f9a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f82:	887b      	ldrh	r3, [r7, #2]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	4806      	ldr	r0, [pc, #24]	@ (8009fa4 <CDC_Transmit_FS+0x48>)
 8009f8a:	f7fe fb43 	bl	8008614 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f8e:	4805      	ldr	r0, [pc, #20]	@ (8009fa4 <CDC_Transmit_FS+0x48>)
 8009f90:	f7fe fb80 	bl	8008694 <USBD_CDC_TransmitPacket>
 8009f94:	4603      	mov	r3, r0
 8009f96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	2000dc44 	.word	0x2000dc44

08009fa8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b087      	sub	sp, #28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	371c      	adds	r7, #28
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
	...

08009fcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	2212      	movs	r2, #18
 8009fdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009fde:	4b03      	ldr	r3, [pc, #12]	@ (8009fec <USBD_FS_DeviceDescriptor+0x20>)
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	200000d4 	.word	0x200000d4

08009ff0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	6039      	str	r1, [r7, #0]
 8009ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	2204      	movs	r2, #4
 800a000:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a002:	4b03      	ldr	r3, [pc, #12]	@ (800a010 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a004:	4618      	mov	r0, r3
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	200000e8 	.word	0x200000e8

0800a014 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	6039      	str	r1, [r7, #0]
 800a01e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a020:	79fb      	ldrb	r3, [r7, #7]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d105      	bne.n	800a032 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	4907      	ldr	r1, [pc, #28]	@ (800a048 <USBD_FS_ProductStrDescriptor+0x34>)
 800a02a:	4808      	ldr	r0, [pc, #32]	@ (800a04c <USBD_FS_ProductStrDescriptor+0x38>)
 800a02c:	f7ff fdd4 	bl	8009bd8 <USBD_GetString>
 800a030:	e004      	b.n	800a03c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	4904      	ldr	r1, [pc, #16]	@ (800a048 <USBD_FS_ProductStrDescriptor+0x34>)
 800a036:	4805      	ldr	r0, [pc, #20]	@ (800a04c <USBD_FS_ProductStrDescriptor+0x38>)
 800a038:	f7ff fdce 	bl	8009bd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a03c:	4b02      	ldr	r3, [pc, #8]	@ (800a048 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	2000ef64 	.word	0x2000ef64
 800a04c:	0800f534 	.word	0x0800f534

0800a050 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	4603      	mov	r3, r0
 800a058:	6039      	str	r1, [r7, #0]
 800a05a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	4904      	ldr	r1, [pc, #16]	@ (800a070 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a060:	4804      	ldr	r0, [pc, #16]	@ (800a074 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a062:	f7ff fdb9 	bl	8009bd8 <USBD_GetString>
  return USBD_StrDesc;
 800a066:	4b02      	ldr	r3, [pc, #8]	@ (800a070 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	2000ef64 	.word	0x2000ef64
 800a074:	0800f54c 	.word	0x0800f54c

0800a078 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	6039      	str	r1, [r7, #0]
 800a082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	221a      	movs	r2, #26
 800a088:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a08a:	f000 f843 	bl	800a114 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a08e:	4b02      	ldr	r3, [pc, #8]	@ (800a098 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	200000ec 	.word	0x200000ec

0800a09c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	6039      	str	r1, [r7, #0]
 800a0a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0a8:	79fb      	ldrb	r3, [r7, #7]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d105      	bne.n	800a0ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	4907      	ldr	r1, [pc, #28]	@ (800a0d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0b2:	4808      	ldr	r0, [pc, #32]	@ (800a0d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0b4:	f7ff fd90 	bl	8009bd8 <USBD_GetString>
 800a0b8:	e004      	b.n	800a0c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	4904      	ldr	r1, [pc, #16]	@ (800a0d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0be:	4805      	ldr	r0, [pc, #20]	@ (800a0d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0c0:	f7ff fd8a 	bl	8009bd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0c4:	4b02      	ldr	r3, [pc, #8]	@ (800a0d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	2000ef64 	.word	0x2000ef64
 800a0d4:	0800f560 	.word	0x0800f560

0800a0d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	6039      	str	r1, [r7, #0]
 800a0e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d105      	bne.n	800a0f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	4907      	ldr	r1, [pc, #28]	@ (800a10c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0ee:	4808      	ldr	r0, [pc, #32]	@ (800a110 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0f0:	f7ff fd72 	bl	8009bd8 <USBD_GetString>
 800a0f4:	e004      	b.n	800a100 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	4904      	ldr	r1, [pc, #16]	@ (800a10c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0fa:	4805      	ldr	r0, [pc, #20]	@ (800a110 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0fc:	f7ff fd6c 	bl	8009bd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a100:	4b02      	ldr	r3, [pc, #8]	@ (800a10c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	2000ef64 	.word	0x2000ef64
 800a110:	0800f56c 	.word	0x0800f56c

0800a114 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a11a:	4b0f      	ldr	r3, [pc, #60]	@ (800a158 <Get_SerialNum+0x44>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a120:	4b0e      	ldr	r3, [pc, #56]	@ (800a15c <Get_SerialNum+0x48>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a126:	4b0e      	ldr	r3, [pc, #56]	@ (800a160 <Get_SerialNum+0x4c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4413      	add	r3, r2
 800a132:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d009      	beq.n	800a14e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a13a:	2208      	movs	r2, #8
 800a13c:	4909      	ldr	r1, [pc, #36]	@ (800a164 <Get_SerialNum+0x50>)
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 f814 	bl	800a16c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a144:	2204      	movs	r2, #4
 800a146:	4908      	ldr	r1, [pc, #32]	@ (800a168 <Get_SerialNum+0x54>)
 800a148:	68b8      	ldr	r0, [r7, #8]
 800a14a:	f000 f80f 	bl	800a16c <IntToUnicode>
  }
}
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	1fff7a10 	.word	0x1fff7a10
 800a15c:	1fff7a14 	.word	0x1fff7a14
 800a160:	1fff7a18 	.word	0x1fff7a18
 800a164:	200000ee 	.word	0x200000ee
 800a168:	200000fe 	.word	0x200000fe

0800a16c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a17a:	2300      	movs	r3, #0
 800a17c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]
 800a182:	e027      	b.n	800a1d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	0f1b      	lsrs	r3, r3, #28
 800a188:	2b09      	cmp	r3, #9
 800a18a:	d80b      	bhi.n	800a1a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	0f1b      	lsrs	r3, r3, #28
 800a190:	b2da      	uxtb	r2, r3
 800a192:	7dfb      	ldrb	r3, [r7, #23]
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	4619      	mov	r1, r3
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	440b      	add	r3, r1
 800a19c:	3230      	adds	r2, #48	@ 0x30
 800a19e:	b2d2      	uxtb	r2, r2
 800a1a0:	701a      	strb	r2, [r3, #0]
 800a1a2:	e00a      	b.n	800a1ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	0f1b      	lsrs	r3, r3, #28
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	7dfb      	ldrb	r3, [r7, #23]
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	440b      	add	r3, r1
 800a1b4:	3237      	adds	r2, #55	@ 0x37
 800a1b6:	b2d2      	uxtb	r2, r2
 800a1b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	011b      	lsls	r3, r3, #4
 800a1be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	005b      	lsls	r3, r3, #1
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	75fb      	strb	r3, [r7, #23]
 800a1d4:	7dfa      	ldrb	r2, [r7, #23]
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d3d3      	bcc.n	800a184 <IntToUnicode+0x18>
  }
}
 800a1dc:	bf00      	nop
 800a1de:	bf00      	nop
 800a1e0:	371c      	adds	r7, #28
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
	...

0800a1ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08a      	sub	sp, #40	@ 0x28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1f4:	f107 0314 	add.w	r3, r7, #20
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	605a      	str	r2, [r3, #4]
 800a1fe:	609a      	str	r2, [r3, #8]
 800a200:	60da      	str	r2, [r3, #12]
 800a202:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a20c:	d13a      	bne.n	800a284 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a20e:	2300      	movs	r3, #0
 800a210:	613b      	str	r3, [r7, #16]
 800a212:	4b1e      	ldr	r3, [pc, #120]	@ (800a28c <HAL_PCD_MspInit+0xa0>)
 800a214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a216:	4a1d      	ldr	r2, [pc, #116]	@ (800a28c <HAL_PCD_MspInit+0xa0>)
 800a218:	f043 0301 	orr.w	r3, r3, #1
 800a21c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a21e:	4b1b      	ldr	r3, [pc, #108]	@ (800a28c <HAL_PCD_MspInit+0xa0>)
 800a220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	613b      	str	r3, [r7, #16]
 800a228:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a22a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a22e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a230:	2302      	movs	r3, #2
 800a232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a234:	2300      	movs	r3, #0
 800a236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a238:	2303      	movs	r3, #3
 800a23a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a23c:	230a      	movs	r3, #10
 800a23e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a240:	f107 0314 	add.w	r3, r7, #20
 800a244:	4619      	mov	r1, r3
 800a246:	4812      	ldr	r0, [pc, #72]	@ (800a290 <HAL_PCD_MspInit+0xa4>)
 800a248:	f7f8 fd20 	bl	8002c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a24c:	4b0f      	ldr	r3, [pc, #60]	@ (800a28c <HAL_PCD_MspInit+0xa0>)
 800a24e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a250:	4a0e      	ldr	r2, [pc, #56]	@ (800a28c <HAL_PCD_MspInit+0xa0>)
 800a252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a256:	6353      	str	r3, [r2, #52]	@ 0x34
 800a258:	2300      	movs	r3, #0
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	4b0b      	ldr	r3, [pc, #44]	@ (800a28c <HAL_PCD_MspInit+0xa0>)
 800a25e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a260:	4a0a      	ldr	r2, [pc, #40]	@ (800a28c <HAL_PCD_MspInit+0xa0>)
 800a262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a266:	6453      	str	r3, [r2, #68]	@ 0x44
 800a268:	4b08      	ldr	r3, [pc, #32]	@ (800a28c <HAL_PCD_MspInit+0xa0>)
 800a26a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a26c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a270:	60fb      	str	r3, [r7, #12]
 800a272:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a274:	2200      	movs	r2, #0
 800a276:	2100      	movs	r1, #0
 800a278:	2043      	movs	r0, #67	@ 0x43
 800a27a:	f7f8 f8f0 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a27e:	2043      	movs	r0, #67	@ 0x43
 800a280:	f7f8 f909 	bl	8002496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a284:	bf00      	nop
 800a286:	3728      	adds	r7, #40	@ 0x28
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	40023800 	.word	0x40023800
 800a290:	40020000 	.word	0x40020000

0800a294 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	f7fe fb1b 	bl	80088e6 <USBD_LL_SetupStage>
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a2ca:	78fa      	ldrb	r2, [r7, #3]
 800a2cc:	6879      	ldr	r1, [r7, #4]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	00db      	lsls	r3, r3, #3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	440b      	add	r3, r1
 800a2d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	78fb      	ldrb	r3, [r7, #3]
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	f7fe fb55 	bl	8008990 <USBD_LL_DataOutStage>
}
 800a2e6:	bf00      	nop
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a300:	78fa      	ldrb	r2, [r7, #3]
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	4613      	mov	r3, r2
 800a306:	00db      	lsls	r3, r3, #3
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	440b      	add	r3, r1
 800a30e:	3320      	adds	r3, #32
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	78fb      	ldrb	r3, [r7, #3]
 800a314:	4619      	mov	r1, r3
 800a316:	f7fe fbf7 	bl	8008b08 <USBD_LL_DataInStage>
}
 800a31a:	bf00      	nop
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b082      	sub	sp, #8
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe fd3b 	bl	8008dac <USBD_LL_SOF>
}
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a346:	2301      	movs	r3, #1
 800a348:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	79db      	ldrb	r3, [r3, #7]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d102      	bne.n	800a358 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
 800a356:	e008      	b.n	800a36a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	79db      	ldrb	r3, [r3, #7]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d102      	bne.n	800a366 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a360:	2301      	movs	r3, #1
 800a362:	73fb      	strb	r3, [r7, #15]
 800a364:	e001      	b.n	800a36a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a366:	f7f7 fc7b 	bl	8001c60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a370:	7bfa      	ldrb	r2, [r7, #15]
 800a372:	4611      	mov	r1, r2
 800a374:	4618      	mov	r0, r3
 800a376:	f7fe fcd5 	bl	8008d24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a380:	4618      	mov	r0, r3
 800a382:	f7fe fc7c 	bl	8008c7e <USBD_LL_Reset>
}
 800a386:	bf00      	nop
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
	...

0800a390 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fe fcd0 	bl	8008d44 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	6812      	ldr	r2, [r2, #0]
 800a3b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a3b6:	f043 0301 	orr.w	r3, r3, #1
 800a3ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	7adb      	ldrb	r3, [r3, #11]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d005      	beq.n	800a3d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3c4:	4b04      	ldr	r3, [pc, #16]	@ (800a3d8 <HAL_PCD_SuspendCallback+0x48>)
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	4a03      	ldr	r2, [pc, #12]	@ (800a3d8 <HAL_PCD_SuspendCallback+0x48>)
 800a3ca:	f043 0306 	orr.w	r3, r3, #6
 800a3ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3d0:	bf00      	nop
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	e000ed00 	.word	0xe000ed00

0800a3dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe fcc6 	bl	8008d7c <USBD_LL_Resume>
}
 800a3f0:	bf00      	nop
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a40a:	78fa      	ldrb	r2, [r7, #3]
 800a40c:	4611      	mov	r1, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe fd1e 	bl	8008e50 <USBD_LL_IsoOUTIncomplete>
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a42e:	78fa      	ldrb	r2, [r7, #3]
 800a430:	4611      	mov	r1, r2
 800a432:	4618      	mov	r0, r3
 800a434:	f7fe fcda 	bl	8008dec <USBD_LL_IsoINIncomplete>
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe fd30 	bl	8008eb4 <USBD_LL_DevConnected>
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fe fd2d 	bl	8008eca <USBD_LL_DevDisconnected>
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d13c      	bne.n	800a502 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a488:	4a20      	ldr	r2, [pc, #128]	@ (800a50c <USBD_LL_Init+0x94>)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a1e      	ldr	r2, [pc, #120]	@ (800a50c <USBD_LL_Init+0x94>)
 800a494:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a498:	4b1c      	ldr	r3, [pc, #112]	@ (800a50c <USBD_LL_Init+0x94>)
 800a49a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a49e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a4a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4a2:	2204      	movs	r2, #4
 800a4a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a4a6:	4b19      	ldr	r3, [pc, #100]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4ac:	4b17      	ldr	r3, [pc, #92]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4b2:	4b16      	ldr	r3, [pc, #88]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4b8:	4b14      	ldr	r3, [pc, #80]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a4be:	4b13      	ldr	r3, [pc, #76]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a4c4:	4b11      	ldr	r3, [pc, #68]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a4ca:	4b10      	ldr	r3, [pc, #64]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a4d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a4d6:	480d      	ldr	r0, [pc, #52]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4d8:	f7f8 fd8d 	bl	8002ff6 <HAL_PCD_Init>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a4e2:	f7f7 fbbd 	bl	8001c60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a4e6:	2180      	movs	r1, #128	@ 0x80
 800a4e8:	4808      	ldr	r0, [pc, #32]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4ea:	f7f9 ffba 	bl	8004462 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a4ee:	2240      	movs	r2, #64	@ 0x40
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	4806      	ldr	r0, [pc, #24]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4f4:	f7f9 ff6e 	bl	80043d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a4f8:	2280      	movs	r2, #128	@ 0x80
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	4803      	ldr	r0, [pc, #12]	@ (800a50c <USBD_LL_Init+0x94>)
 800a4fe:	f7f9 ff69 	bl	80043d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	2000f164 	.word	0x2000f164

0800a510 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a526:	4618      	mov	r0, r3
 800a528:	f7f8 fe74 	bl	8003214 <HAL_PCD_Start>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a530:	7bfb      	ldrb	r3, [r7, #15]
 800a532:	4618      	mov	r0, r3
 800a534:	f000 f942 	bl	800a7bc <USBD_Get_USB_Status>
 800a538:	4603      	mov	r3, r0
 800a53a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a53c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	4608      	mov	r0, r1
 800a550:	4611      	mov	r1, r2
 800a552:	461a      	mov	r2, r3
 800a554:	4603      	mov	r3, r0
 800a556:	70fb      	strb	r3, [r7, #3]
 800a558:	460b      	mov	r3, r1
 800a55a:	70bb      	strb	r3, [r7, #2]
 800a55c:	4613      	mov	r3, r2
 800a55e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a56e:	78bb      	ldrb	r3, [r7, #2]
 800a570:	883a      	ldrh	r2, [r7, #0]
 800a572:	78f9      	ldrb	r1, [r7, #3]
 800a574:	f7f9 fb48 	bl	8003c08 <HAL_PCD_EP_Open>
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 f91c 	bl	800a7bc <USBD_Get_USB_Status>
 800a584:	4603      	mov	r3, r0
 800a586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a588:	7bbb      	ldrb	r3, [r7, #14]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	460b      	mov	r3, r1
 800a59c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5ac:	78fa      	ldrb	r2, [r7, #3]
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7f9 fb93 	bl	8003cdc <HAL_PCD_EP_Close>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 f8fd 	bl	800a7bc <USBD_Get_USB_Status>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f9 fc4b 	bl	8003e8a <HAL_PCD_EP_SetStall>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 f8de 	bl	800a7bc <USBD_Get_USB_Status>
 800a600:	4603      	mov	r3, r0
 800a602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a604:	7bbb      	ldrb	r3, [r7, #14]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	460b      	mov	r3, r1
 800a618:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a628:	78fa      	ldrb	r2, [r7, #3]
 800a62a:	4611      	mov	r1, r2
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7f9 fc8f 	bl	8003f50 <HAL_PCD_EP_ClrStall>
 800a632:	4603      	mov	r3, r0
 800a634:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 f8bf 	bl	800a7bc <USBD_Get_USB_Status>
 800a63e:	4603      	mov	r3, r0
 800a640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a642:	7bbb      	ldrb	r3, [r7, #14]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a65e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a664:	2b00      	cmp	r3, #0
 800a666:	da0b      	bge.n	800a680 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a668:	78fb      	ldrb	r3, [r7, #3]
 800a66a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a66e:	68f9      	ldr	r1, [r7, #12]
 800a670:	4613      	mov	r3, r2
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	4413      	add	r3, r2
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	440b      	add	r3, r1
 800a67a:	3316      	adds	r3, #22
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	e00b      	b.n	800a698 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a686:	68f9      	ldr	r1, [r7, #12]
 800a688:	4613      	mov	r3, r2
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	4413      	add	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	440b      	add	r3, r1
 800a692:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a696:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6be:	78fa      	ldrb	r2, [r7, #3]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f9 fa7c 	bl	8003bc0 <HAL_PCD_SetAddress>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 f874 	bl	800a7bc <USBD_Get_USB_Status>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b086      	sub	sp, #24
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	603b      	str	r3, [r7, #0]
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a700:	7af9      	ldrb	r1, [r7, #11]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	f7f9 fb86 	bl	8003e16 <HAL_PCD_EP_Transmit>
 800a70a:	4603      	mov	r3, r0
 800a70c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	4618      	mov	r0, r3
 800a712:	f000 f853 	bl	800a7bc <USBD_Get_USB_Status>
 800a716:	4603      	mov	r3, r0
 800a718:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a71a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	607a      	str	r2, [r7, #4]
 800a72e:	603b      	str	r3, [r7, #0]
 800a730:	460b      	mov	r3, r1
 800a732:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a742:	7af9      	ldrb	r1, [r7, #11]
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	f7f9 fb12 	bl	8003d70 <HAL_PCD_EP_Receive>
 800a74c:	4603      	mov	r3, r0
 800a74e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a750:	7dfb      	ldrb	r3, [r7, #23]
 800a752:	4618      	mov	r0, r3
 800a754:	f000 f832 	bl	800a7bc <USBD_Get_USB_Status>
 800a758:	4603      	mov	r3, r0
 800a75a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a75c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b082      	sub	sp, #8
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a778:	78fa      	ldrb	r2, [r7, #3]
 800a77a:	4611      	mov	r1, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7f9 fb32 	bl	8003de6 <HAL_PCD_EP_GetRxCount>
 800a782:	4603      	mov	r3, r0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a794:	4b03      	ldr	r3, [pc, #12]	@ (800a7a4 <USBD_static_malloc+0x18>)
}
 800a796:	4618      	mov	r0, r3
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	2000f648 	.word	0x2000f648

0800a7a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]

}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7ca:	79fb      	ldrb	r3, [r7, #7]
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d817      	bhi.n	800a800 <USBD_Get_USB_Status+0x44>
 800a7d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d8 <USBD_Get_USB_Status+0x1c>)
 800a7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d6:	bf00      	nop
 800a7d8:	0800a7e9 	.word	0x0800a7e9
 800a7dc:	0800a7ef 	.word	0x0800a7ef
 800a7e0:	0800a7f5 	.word	0x0800a7f5
 800a7e4:	0800a7fb 	.word	0x0800a7fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ec:	e00b      	b.n	800a806 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f2:	e008      	b.n	800a806 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f8:	e005      	b.n	800a806 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fe:	e002      	b.n	800a806 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a800:	2303      	movs	r3, #3
 800a802:	73fb      	strb	r3, [r7, #15]
    break;
 800a804:	bf00      	nop
  }
  return usb_status;
 800a806:	7bfb      	ldrb	r3, [r7, #15]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <arm_copy_f32>:
 800a814:	b4f0      	push	{r4, r5, r6, r7}
 800a816:	0897      	lsrs	r7, r2, #2
 800a818:	d01e      	beq.n	800a858 <arm_copy_f32+0x44>
 800a81a:	f100 0410 	add.w	r4, r0, #16
 800a81e:	f101 0310 	add.w	r3, r1, #16
 800a822:	463d      	mov	r5, r7
 800a824:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800a828:	f843 6c10 	str.w	r6, [r3, #-16]
 800a82c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800a830:	f843 6c0c 	str.w	r6, [r3, #-12]
 800a834:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800a838:	f843 6c08 	str.w	r6, [r3, #-8]
 800a83c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800a840:	f843 6c04 	str.w	r6, [r3, #-4]
 800a844:	3d01      	subs	r5, #1
 800a846:	f104 0410 	add.w	r4, r4, #16
 800a84a:	f103 0310 	add.w	r3, r3, #16
 800a84e:	d1e9      	bne.n	800a824 <arm_copy_f32+0x10>
 800a850:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800a854:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800a858:	f012 0203 	ands.w	r2, r2, #3
 800a85c:	d009      	beq.n	800a872 <arm_copy_f32+0x5e>
 800a85e:	6803      	ldr	r3, [r0, #0]
 800a860:	600b      	str	r3, [r1, #0]
 800a862:	3a01      	subs	r2, #1
 800a864:	d005      	beq.n	800a872 <arm_copy_f32+0x5e>
 800a866:	6843      	ldr	r3, [r0, #4]
 800a868:	604b      	str	r3, [r1, #4]
 800a86a:	2a01      	cmp	r2, #1
 800a86c:	bf1c      	itt	ne
 800a86e:	6883      	ldrne	r3, [r0, #8]
 800a870:	608b      	strne	r3, [r1, #8]
 800a872:	bcf0      	pop	{r4, r5, r6, r7}
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop

0800a878 <arm_std_f32>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	ed2d 8b02 	vpush	{d8}
 800a87e:	b082      	sub	sp, #8
 800a880:	4614      	mov	r4, r2
 800a882:	aa01      	add	r2, sp, #4
 800a884:	f000 f8e4 	bl	800aa50 <arm_var_f32>
 800a888:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a88c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a894:	db0c      	blt.n	800a8b0 <arm_std_f32+0x38>
 800a896:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a8a2:	d408      	bmi.n	800a8b6 <arm_std_f32+0x3e>
 800a8a4:	ed84 8a00 	vstr	s16, [r4]
 800a8a8:	b002      	add	sp, #8
 800a8aa:	ecbd 8b02 	vpop	{d8}
 800a8ae:	bd10      	pop	{r4, pc}
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	6023      	str	r3, [r4, #0]
 800a8b4:	e7f8      	b.n	800a8a8 <arm_std_f32+0x30>
 800a8b6:	f004 fd91 	bl	800f3dc <sqrtf>
 800a8ba:	e7f3      	b.n	800a8a4 <arm_std_f32+0x2c>

0800a8bc <arm_mean_f32>:
 800a8bc:	b430      	push	{r4, r5}
 800a8be:	088d      	lsrs	r5, r1, #2
 800a8c0:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800a934 <arm_mean_f32+0x78>
 800a8c4:	d018      	beq.n	800a8f8 <arm_mean_f32+0x3c>
 800a8c6:	f100 0310 	add.w	r3, r0, #16
 800a8ca:	462c      	mov	r4, r5
 800a8cc:	ed53 5a04 	vldr	s11, [r3, #-16]
 800a8d0:	ed13 6a03 	vldr	s12, [r3, #-12]
 800a8d4:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a8d8:	ed13 7a01 	vldr	s14, [r3, #-4]
 800a8dc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a8e0:	3c01      	subs	r4, #1
 800a8e2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a8e6:	f103 0310 	add.w	r3, r3, #16
 800a8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8f2:	d1eb      	bne.n	800a8cc <arm_mean_f32+0x10>
 800a8f4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a8f8:	f011 0303 	ands.w	r3, r1, #3
 800a8fc:	d00f      	beq.n	800a91e <arm_mean_f32+0x62>
 800a8fe:	ed90 7a00 	vldr	s14, [r0]
 800a902:	3b01      	subs	r3, #1
 800a904:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a908:	d009      	beq.n	800a91e <arm_mean_f32+0x62>
 800a90a:	ed90 7a01 	vldr	s14, [r0, #4]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a914:	bf1c      	itt	ne
 800a916:	ed90 7a02 	vldrne	s14, [r0, #8]
 800a91a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800a91e:	ee07 1a10 	vmov	s14, r1
 800a922:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a926:	bc30      	pop	{r4, r5}
 800a928:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a92c:	edc2 6a00 	vstr	s13, [r2]
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	00000000 	.word	0x00000000

0800a938 <arm_scale_f32>:
 800a938:	b470      	push	{r4, r5, r6}
 800a93a:	0896      	lsrs	r6, r2, #2
 800a93c:	d026      	beq.n	800a98c <arm_scale_f32+0x54>
 800a93e:	f100 0410 	add.w	r4, r0, #16
 800a942:	f101 0310 	add.w	r3, r1, #16
 800a946:	4635      	mov	r5, r6
 800a948:	ed14 6a03 	vldr	s12, [r4, #-12]
 800a94c:	ed54 6a02 	vldr	s13, [r4, #-8]
 800a950:	ed14 7a01 	vldr	s14, [r4, #-4]
 800a954:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a958:	ee20 6a06 	vmul.f32	s12, s0, s12
 800a95c:	ee60 6a26 	vmul.f32	s13, s0, s13
 800a960:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a964:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a968:	3d01      	subs	r5, #1
 800a96a:	ed03 6a03 	vstr	s12, [r3, #-12]
 800a96e:	ed43 6a02 	vstr	s13, [r3, #-8]
 800a972:	ed03 7a01 	vstr	s14, [r3, #-4]
 800a976:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a97a:	f104 0410 	add.w	r4, r4, #16
 800a97e:	f103 0310 	add.w	r3, r3, #16
 800a982:	d1e1      	bne.n	800a948 <arm_scale_f32+0x10>
 800a984:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800a988:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800a98c:	f012 0203 	ands.w	r2, r2, #3
 800a990:	d015      	beq.n	800a9be <arm_scale_f32+0x86>
 800a992:	edd0 7a00 	vldr	s15, [r0]
 800a996:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a99a:	3a01      	subs	r2, #1
 800a99c:	edc1 7a00 	vstr	s15, [r1]
 800a9a0:	d00d      	beq.n	800a9be <arm_scale_f32+0x86>
 800a9a2:	edd0 7a01 	vldr	s15, [r0, #4]
 800a9a6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a9aa:	2a01      	cmp	r2, #1
 800a9ac:	edc1 7a01 	vstr	s15, [r1, #4]
 800a9b0:	d005      	beq.n	800a9be <arm_scale_f32+0x86>
 800a9b2:	edd0 7a02 	vldr	s15, [r0, #8]
 800a9b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a9ba:	ed81 0a02 	vstr	s0, [r1, #8]
 800a9be:	bc70      	pop	{r4, r5, r6}
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop

0800a9c4 <arm_offset_f32>:
 800a9c4:	b470      	push	{r4, r5, r6}
 800a9c6:	0896      	lsrs	r6, r2, #2
 800a9c8:	d026      	beq.n	800aa18 <arm_offset_f32+0x54>
 800a9ca:	f100 0410 	add.w	r4, r0, #16
 800a9ce:	f101 0310 	add.w	r3, r1, #16
 800a9d2:	4635      	mov	r5, r6
 800a9d4:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a9d8:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a9dc:	3d01      	subs	r5, #1
 800a9de:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a9e2:	ed54 7a03 	vldr	s15, [r4, #-12]
 800a9e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a9ea:	f104 0410 	add.w	r4, r4, #16
 800a9ee:	ed43 7a03 	vstr	s15, [r3, #-12]
 800a9f2:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800a9f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a9fa:	f103 0310 	add.w	r3, r3, #16
 800a9fe:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800aa02:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800aa06:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa0a:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800aa0e:	d1e1      	bne.n	800a9d4 <arm_offset_f32+0x10>
 800aa10:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800aa14:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800aa18:	f012 0203 	ands.w	r2, r2, #3
 800aa1c:	d015      	beq.n	800aa4a <arm_offset_f32+0x86>
 800aa1e:	edd0 7a00 	vldr	s15, [r0]
 800aa22:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa26:	3a01      	subs	r2, #1
 800aa28:	edc1 7a00 	vstr	s15, [r1]
 800aa2c:	d00d      	beq.n	800aa4a <arm_offset_f32+0x86>
 800aa2e:	edd0 7a01 	vldr	s15, [r0, #4]
 800aa32:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa36:	2a01      	cmp	r2, #1
 800aa38:	edc1 7a01 	vstr	s15, [r1, #4]
 800aa3c:	d005      	beq.n	800aa4a <arm_offset_f32+0x86>
 800aa3e:	edd0 7a02 	vldr	s15, [r0, #8]
 800aa42:	ee37 0a80 	vadd.f32	s0, s15, s0
 800aa46:	ed81 0a02 	vstr	s0, [r1, #8]
 800aa4a:	bc70      	pop	{r4, r5, r6}
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop

0800aa50 <arm_var_f32>:
 800aa50:	2901      	cmp	r1, #1
 800aa52:	f240 809a 	bls.w	800ab8a <arm_var_f32+0x13a>
 800aa56:	b4f0      	push	{r4, r5, r6, r7}
 800aa58:	088d      	lsrs	r5, r1, #2
 800aa5a:	f000 80a0 	beq.w	800ab9e <arm_var_f32+0x14e>
 800aa5e:	f100 0310 	add.w	r3, r0, #16
 800aa62:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800aba8 <arm_var_f32+0x158>
 800aa66:	461c      	mov	r4, r3
 800aa68:	462e      	mov	r6, r5
 800aa6a:	ed54 5a04 	vldr	s11, [r4, #-16]
 800aa6e:	ed14 6a03 	vldr	s12, [r4, #-12]
 800aa72:	ed54 6a02 	vldr	s13, [r4, #-8]
 800aa76:	ed14 7a01 	vldr	s14, [r4, #-4]
 800aa7a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800aa7e:	3e01      	subs	r6, #1
 800aa80:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aa84:	f104 0410 	add.w	r4, r4, #16
 800aa88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa90:	d1eb      	bne.n	800aa6a <arm_var_f32+0x1a>
 800aa92:	f011 0403 	ands.w	r4, r1, #3
 800aa96:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800aa9a:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800aa9e:	d077      	beq.n	800ab90 <arm_var_f32+0x140>
 800aaa0:	ed96 7a00 	vldr	s14, [r6]
 800aaa4:	1e63      	subs	r3, r4, #1
 800aaa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aaaa:	d063      	beq.n	800ab74 <arm_var_f32+0x124>
 800aaac:	ed96 7a01 	vldr	s14, [r6, #4]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aab6:	d05d      	beq.n	800ab74 <arm_var_f32+0x124>
 800aab8:	ed96 7a02 	vldr	s14, [r6, #8]
 800aabc:	ee06 1a90 	vmov	s13, r1
 800aac0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aac4:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800aac8:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800aacc:	2d00      	cmp	r5, #0
 800aace:	d059      	beq.n	800ab84 <arm_var_f32+0x134>
 800aad0:	f100 0310 	add.w	r3, r0, #16
 800aad4:	012f      	lsls	r7, r5, #4
 800aad6:	4629      	mov	r1, r5
 800aad8:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800aba8 <arm_var_f32+0x158>
 800aadc:	ed13 6a04 	vldr	s12, [r3, #-16]
 800aae0:	ed53 6a03 	vldr	s13, [r3, #-12]
 800aae4:	ed13 7a02 	vldr	s14, [r3, #-8]
 800aae8:	ed53 5a01 	vldr	s11, [r3, #-4]
 800aaec:	ee36 6a45 	vsub.f32	s12, s12, s10
 800aaf0:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800aaf4:	ee26 6a06 	vmul.f32	s12, s12, s12
 800aaf8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800aafc:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ab00:	ee77 7a45 	vsub.f32	s15, s14, s10
 800ab04:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ab08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ab0c:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800ab10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab14:	ee26 6a06 	vmul.f32	s12, s12, s12
 800ab18:	3901      	subs	r1, #1
 800ab1a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ab1e:	f103 0310 	add.w	r3, r3, #16
 800ab22:	d1db      	bne.n	800aadc <arm_var_f32+0x8c>
 800ab24:	4438      	add	r0, r7
 800ab26:	b1dc      	cbz	r4, 800ab60 <arm_var_f32+0x110>
 800ab28:	1e63      	subs	r3, r4, #1
 800ab2a:	ed90 7a00 	vldr	s14, [r0]
 800ab2e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ab32:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ab36:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab3a:	b18b      	cbz	r3, 800ab60 <arm_var_f32+0x110>
 800ab3c:	ed90 7a01 	vldr	s14, [r0, #4]
 800ab40:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ab4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab4e:	d007      	beq.n	800ab60 <arm_var_f32+0x110>
 800ab50:	ed90 7a02 	vldr	s14, [r0, #8]
 800ab54:	ee37 5a45 	vsub.f32	s10, s14, s10
 800ab58:	ee25 5a05 	vmul.f32	s10, s10, s10
 800ab5c:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ab60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab64:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800ab68:	bcf0      	pop	{r4, r5, r6, r7}
 800ab6a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab6e:	ed82 7a00 	vstr	s14, [r2]
 800ab72:	4770      	bx	lr
 800ab74:	ee07 1a10 	vmov	s14, r1
 800ab78:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800ab7c:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800ab80:	2d00      	cmp	r5, #0
 800ab82:	d1a5      	bne.n	800aad0 <arm_var_f32+0x80>
 800ab84:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800aba8 <arm_var_f32+0x158>
 800ab88:	e7cf      	b.n	800ab2a <arm_var_f32+0xda>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	4770      	bx	lr
 800ab90:	ee07 1a10 	vmov	s14, r1
 800ab94:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800ab98:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800ab9c:	e79b      	b.n	800aad6 <arm_var_f32+0x86>
 800ab9e:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800aba8 <arm_var_f32+0x158>
 800aba2:	4606      	mov	r6, r0
 800aba4:	460c      	mov	r4, r1
 800aba6:	e77b      	b.n	800aaa0 <arm_var_f32+0x50>
 800aba8:	00000000 	.word	0x00000000

0800abac <srand>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	4b10      	ldr	r3, [pc, #64]	@ (800abf0 <srand+0x44>)
 800abb0:	681d      	ldr	r5, [r3, #0]
 800abb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800abb4:	4604      	mov	r4, r0
 800abb6:	b9b3      	cbnz	r3, 800abe6 <srand+0x3a>
 800abb8:	2018      	movs	r0, #24
 800abba:	f001 ff8b 	bl	800cad4 <malloc>
 800abbe:	4602      	mov	r2, r0
 800abc0:	6328      	str	r0, [r5, #48]	@ 0x30
 800abc2:	b920      	cbnz	r0, 800abce <srand+0x22>
 800abc4:	4b0b      	ldr	r3, [pc, #44]	@ (800abf4 <srand+0x48>)
 800abc6:	480c      	ldr	r0, [pc, #48]	@ (800abf8 <srand+0x4c>)
 800abc8:	2146      	movs	r1, #70	@ 0x46
 800abca:	f001 f8c3 	bl	800bd54 <__assert_func>
 800abce:	490b      	ldr	r1, [pc, #44]	@ (800abfc <srand+0x50>)
 800abd0:	4b0b      	ldr	r3, [pc, #44]	@ (800ac00 <srand+0x54>)
 800abd2:	e9c0 1300 	strd	r1, r3, [r0]
 800abd6:	4b0b      	ldr	r3, [pc, #44]	@ (800ac04 <srand+0x58>)
 800abd8:	6083      	str	r3, [r0, #8]
 800abda:	230b      	movs	r3, #11
 800abdc:	8183      	strh	r3, [r0, #12]
 800abde:	2100      	movs	r1, #0
 800abe0:	2001      	movs	r0, #1
 800abe2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800abe6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800abe8:	2200      	movs	r2, #0
 800abea:	611c      	str	r4, [r3, #16]
 800abec:	615a      	str	r2, [r3, #20]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	20000114 	.word	0x20000114
 800abf4:	08013d74 	.word	0x08013d74
 800abf8:	08013d8b 	.word	0x08013d8b
 800abfc:	abcd330e 	.word	0xabcd330e
 800ac00:	e66d1234 	.word	0xe66d1234
 800ac04:	0005deec 	.word	0x0005deec

0800ac08 <rand>:
 800ac08:	4b16      	ldr	r3, [pc, #88]	@ (800ac64 <rand+0x5c>)
 800ac0a:	b510      	push	{r4, lr}
 800ac0c:	681c      	ldr	r4, [r3, #0]
 800ac0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ac10:	b9b3      	cbnz	r3, 800ac40 <rand+0x38>
 800ac12:	2018      	movs	r0, #24
 800ac14:	f001 ff5e 	bl	800cad4 <malloc>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	6320      	str	r0, [r4, #48]	@ 0x30
 800ac1c:	b920      	cbnz	r0, 800ac28 <rand+0x20>
 800ac1e:	4b12      	ldr	r3, [pc, #72]	@ (800ac68 <rand+0x60>)
 800ac20:	4812      	ldr	r0, [pc, #72]	@ (800ac6c <rand+0x64>)
 800ac22:	2152      	movs	r1, #82	@ 0x52
 800ac24:	f001 f896 	bl	800bd54 <__assert_func>
 800ac28:	4911      	ldr	r1, [pc, #68]	@ (800ac70 <rand+0x68>)
 800ac2a:	4b12      	ldr	r3, [pc, #72]	@ (800ac74 <rand+0x6c>)
 800ac2c:	e9c0 1300 	strd	r1, r3, [r0]
 800ac30:	4b11      	ldr	r3, [pc, #68]	@ (800ac78 <rand+0x70>)
 800ac32:	6083      	str	r3, [r0, #8]
 800ac34:	230b      	movs	r3, #11
 800ac36:	8183      	strh	r3, [r0, #12]
 800ac38:	2100      	movs	r1, #0
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ac40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ac42:	480e      	ldr	r0, [pc, #56]	@ (800ac7c <rand+0x74>)
 800ac44:	690b      	ldr	r3, [r1, #16]
 800ac46:	694c      	ldr	r4, [r1, #20]
 800ac48:	4a0d      	ldr	r2, [pc, #52]	@ (800ac80 <rand+0x78>)
 800ac4a:	4358      	muls	r0, r3
 800ac4c:	fb02 0004 	mla	r0, r2, r4, r0
 800ac50:	fba3 3202 	umull	r3, r2, r3, r2
 800ac54:	3301      	adds	r3, #1
 800ac56:	eb40 0002 	adc.w	r0, r0, r2
 800ac5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ac5e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ac62:	bd10      	pop	{r4, pc}
 800ac64:	20000114 	.word	0x20000114
 800ac68:	08013d74 	.word	0x08013d74
 800ac6c:	08013d8b 	.word	0x08013d8b
 800ac70:	abcd330e 	.word	0xabcd330e
 800ac74:	e66d1234 	.word	0xe66d1234
 800ac78:	0005deec 	.word	0x0005deec
 800ac7c:	5851f42d 	.word	0x5851f42d
 800ac80:	4c957f2d 	.word	0x4c957f2d

0800ac84 <__cvt>:
 800ac84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac88:	ec57 6b10 	vmov	r6, r7, d0
 800ac8c:	2f00      	cmp	r7, #0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	4619      	mov	r1, r3
 800ac92:	463b      	mov	r3, r7
 800ac94:	bfbb      	ittet	lt
 800ac96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ac9a:	461f      	movlt	r7, r3
 800ac9c:	2300      	movge	r3, #0
 800ac9e:	232d      	movlt	r3, #45	@ 0x2d
 800aca0:	700b      	strb	r3, [r1, #0]
 800aca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aca4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aca8:	4691      	mov	r9, r2
 800acaa:	f023 0820 	bic.w	r8, r3, #32
 800acae:	bfbc      	itt	lt
 800acb0:	4632      	movlt	r2, r6
 800acb2:	4616      	movlt	r6, r2
 800acb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800acb8:	d005      	beq.n	800acc6 <__cvt+0x42>
 800acba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800acbe:	d100      	bne.n	800acc2 <__cvt+0x3e>
 800acc0:	3401      	adds	r4, #1
 800acc2:	2102      	movs	r1, #2
 800acc4:	e000      	b.n	800acc8 <__cvt+0x44>
 800acc6:	2103      	movs	r1, #3
 800acc8:	ab03      	add	r3, sp, #12
 800acca:	9301      	str	r3, [sp, #4]
 800accc:	ab02      	add	r3, sp, #8
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	ec47 6b10 	vmov	d0, r6, r7
 800acd4:	4653      	mov	r3, sl
 800acd6:	4622      	mov	r2, r4
 800acd8:	f001 f8e2 	bl	800bea0 <_dtoa_r>
 800acdc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ace0:	4605      	mov	r5, r0
 800ace2:	d119      	bne.n	800ad18 <__cvt+0x94>
 800ace4:	f019 0f01 	tst.w	r9, #1
 800ace8:	d00e      	beq.n	800ad08 <__cvt+0x84>
 800acea:	eb00 0904 	add.w	r9, r0, r4
 800acee:	2200      	movs	r2, #0
 800acf0:	2300      	movs	r3, #0
 800acf2:	4630      	mov	r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	f7f5 fee7 	bl	8000ac8 <__aeabi_dcmpeq>
 800acfa:	b108      	cbz	r0, 800ad00 <__cvt+0x7c>
 800acfc:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad00:	2230      	movs	r2, #48	@ 0x30
 800ad02:	9b03      	ldr	r3, [sp, #12]
 800ad04:	454b      	cmp	r3, r9
 800ad06:	d31e      	bcc.n	800ad46 <__cvt+0xc2>
 800ad08:	9b03      	ldr	r3, [sp, #12]
 800ad0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad0c:	1b5b      	subs	r3, r3, r5
 800ad0e:	4628      	mov	r0, r5
 800ad10:	6013      	str	r3, [r2, #0]
 800ad12:	b004      	add	sp, #16
 800ad14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad1c:	eb00 0904 	add.w	r9, r0, r4
 800ad20:	d1e5      	bne.n	800acee <__cvt+0x6a>
 800ad22:	7803      	ldrb	r3, [r0, #0]
 800ad24:	2b30      	cmp	r3, #48	@ 0x30
 800ad26:	d10a      	bne.n	800ad3e <__cvt+0xba>
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f7f5 feca 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad34:	b918      	cbnz	r0, 800ad3e <__cvt+0xba>
 800ad36:	f1c4 0401 	rsb	r4, r4, #1
 800ad3a:	f8ca 4000 	str.w	r4, [sl]
 800ad3e:	f8da 3000 	ldr.w	r3, [sl]
 800ad42:	4499      	add	r9, r3
 800ad44:	e7d3      	b.n	800acee <__cvt+0x6a>
 800ad46:	1c59      	adds	r1, r3, #1
 800ad48:	9103      	str	r1, [sp, #12]
 800ad4a:	701a      	strb	r2, [r3, #0]
 800ad4c:	e7d9      	b.n	800ad02 <__cvt+0x7e>

0800ad4e <__exponent>:
 800ad4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad50:	2900      	cmp	r1, #0
 800ad52:	bfba      	itte	lt
 800ad54:	4249      	neglt	r1, r1
 800ad56:	232d      	movlt	r3, #45	@ 0x2d
 800ad58:	232b      	movge	r3, #43	@ 0x2b
 800ad5a:	2909      	cmp	r1, #9
 800ad5c:	7002      	strb	r2, [r0, #0]
 800ad5e:	7043      	strb	r3, [r0, #1]
 800ad60:	dd29      	ble.n	800adb6 <__exponent+0x68>
 800ad62:	f10d 0307 	add.w	r3, sp, #7
 800ad66:	461d      	mov	r5, r3
 800ad68:	270a      	movs	r7, #10
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ad70:	fb07 1416 	mls	r4, r7, r6, r1
 800ad74:	3430      	adds	r4, #48	@ 0x30
 800ad76:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	2c63      	cmp	r4, #99	@ 0x63
 800ad7e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad82:	4631      	mov	r1, r6
 800ad84:	dcf1      	bgt.n	800ad6a <__exponent+0x1c>
 800ad86:	3130      	adds	r1, #48	@ 0x30
 800ad88:	1e94      	subs	r4, r2, #2
 800ad8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad8e:	1c41      	adds	r1, r0, #1
 800ad90:	4623      	mov	r3, r4
 800ad92:	42ab      	cmp	r3, r5
 800ad94:	d30a      	bcc.n	800adac <__exponent+0x5e>
 800ad96:	f10d 0309 	add.w	r3, sp, #9
 800ad9a:	1a9b      	subs	r3, r3, r2
 800ad9c:	42ac      	cmp	r4, r5
 800ad9e:	bf88      	it	hi
 800ada0:	2300      	movhi	r3, #0
 800ada2:	3302      	adds	r3, #2
 800ada4:	4403      	add	r3, r0
 800ada6:	1a18      	subs	r0, r3, r0
 800ada8:	b003      	add	sp, #12
 800adaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800adb0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800adb4:	e7ed      	b.n	800ad92 <__exponent+0x44>
 800adb6:	2330      	movs	r3, #48	@ 0x30
 800adb8:	3130      	adds	r1, #48	@ 0x30
 800adba:	7083      	strb	r3, [r0, #2]
 800adbc:	70c1      	strb	r1, [r0, #3]
 800adbe:	1d03      	adds	r3, r0, #4
 800adc0:	e7f1      	b.n	800ada6 <__exponent+0x58>
	...

0800adc4 <_printf_float>:
 800adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	b08d      	sub	sp, #52	@ 0x34
 800adca:	460c      	mov	r4, r1
 800adcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800add0:	4616      	mov	r6, r2
 800add2:	461f      	mov	r7, r3
 800add4:	4605      	mov	r5, r0
 800add6:	f000 ff31 	bl	800bc3c <_localeconv_r>
 800adda:	6803      	ldr	r3, [r0, #0]
 800addc:	9304      	str	r3, [sp, #16]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f5 fa46 	bl	8000270 <strlen>
 800ade4:	2300      	movs	r3, #0
 800ade6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ade8:	f8d8 3000 	ldr.w	r3, [r8]
 800adec:	9005      	str	r0, [sp, #20]
 800adee:	3307      	adds	r3, #7
 800adf0:	f023 0307 	bic.w	r3, r3, #7
 800adf4:	f103 0208 	add.w	r2, r3, #8
 800adf8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800adfc:	f8d4 b000 	ldr.w	fp, [r4]
 800ae00:	f8c8 2000 	str.w	r2, [r8]
 800ae04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae0c:	9307      	str	r3, [sp, #28]
 800ae0e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae1a:	4b9c      	ldr	r3, [pc, #624]	@ (800b08c <_printf_float+0x2c8>)
 800ae1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae20:	f7f5 fe84 	bl	8000b2c <__aeabi_dcmpun>
 800ae24:	bb70      	cbnz	r0, 800ae84 <_printf_float+0xc0>
 800ae26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae2a:	4b98      	ldr	r3, [pc, #608]	@ (800b08c <_printf_float+0x2c8>)
 800ae2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae30:	f7f5 fe5e 	bl	8000af0 <__aeabi_dcmple>
 800ae34:	bb30      	cbnz	r0, 800ae84 <_printf_float+0xc0>
 800ae36:	2200      	movs	r2, #0
 800ae38:	2300      	movs	r3, #0
 800ae3a:	4640      	mov	r0, r8
 800ae3c:	4649      	mov	r1, r9
 800ae3e:	f7f5 fe4d 	bl	8000adc <__aeabi_dcmplt>
 800ae42:	b110      	cbz	r0, 800ae4a <_printf_float+0x86>
 800ae44:	232d      	movs	r3, #45	@ 0x2d
 800ae46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae4a:	4a91      	ldr	r2, [pc, #580]	@ (800b090 <_printf_float+0x2cc>)
 800ae4c:	4b91      	ldr	r3, [pc, #580]	@ (800b094 <_printf_float+0x2d0>)
 800ae4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae52:	bf8c      	ite	hi
 800ae54:	4690      	movhi	r8, r2
 800ae56:	4698      	movls	r8, r3
 800ae58:	2303      	movs	r3, #3
 800ae5a:	6123      	str	r3, [r4, #16]
 800ae5c:	f02b 0304 	bic.w	r3, fp, #4
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	f04f 0900 	mov.w	r9, #0
 800ae66:	9700      	str	r7, [sp, #0]
 800ae68:	4633      	mov	r3, r6
 800ae6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f000 f9d2 	bl	800b218 <_printf_common>
 800ae74:	3001      	adds	r0, #1
 800ae76:	f040 808d 	bne.w	800af94 <_printf_float+0x1d0>
 800ae7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7e:	b00d      	add	sp, #52	@ 0x34
 800ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae84:	4642      	mov	r2, r8
 800ae86:	464b      	mov	r3, r9
 800ae88:	4640      	mov	r0, r8
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	f7f5 fe4e 	bl	8000b2c <__aeabi_dcmpun>
 800ae90:	b140      	cbz	r0, 800aea4 <_printf_float+0xe0>
 800ae92:	464b      	mov	r3, r9
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bfbc      	itt	lt
 800ae98:	232d      	movlt	r3, #45	@ 0x2d
 800ae9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ae9e:	4a7e      	ldr	r2, [pc, #504]	@ (800b098 <_printf_float+0x2d4>)
 800aea0:	4b7e      	ldr	r3, [pc, #504]	@ (800b09c <_printf_float+0x2d8>)
 800aea2:	e7d4      	b.n	800ae4e <_printf_float+0x8a>
 800aea4:	6863      	ldr	r3, [r4, #4]
 800aea6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aeaa:	9206      	str	r2, [sp, #24]
 800aeac:	1c5a      	adds	r2, r3, #1
 800aeae:	d13b      	bne.n	800af28 <_printf_float+0x164>
 800aeb0:	2306      	movs	r3, #6
 800aeb2:	6063      	str	r3, [r4, #4]
 800aeb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aeb8:	2300      	movs	r3, #0
 800aeba:	6022      	str	r2, [r4, #0]
 800aebc:	9303      	str	r3, [sp, #12]
 800aebe:	ab0a      	add	r3, sp, #40	@ 0x28
 800aec0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aec4:	ab09      	add	r3, sp, #36	@ 0x24
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	6861      	ldr	r1, [r4, #4]
 800aeca:	ec49 8b10 	vmov	d0, r8, r9
 800aece:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aed2:	4628      	mov	r0, r5
 800aed4:	f7ff fed6 	bl	800ac84 <__cvt>
 800aed8:	9b06      	ldr	r3, [sp, #24]
 800aeda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aedc:	2b47      	cmp	r3, #71	@ 0x47
 800aede:	4680      	mov	r8, r0
 800aee0:	d129      	bne.n	800af36 <_printf_float+0x172>
 800aee2:	1cc8      	adds	r0, r1, #3
 800aee4:	db02      	blt.n	800aeec <_printf_float+0x128>
 800aee6:	6863      	ldr	r3, [r4, #4]
 800aee8:	4299      	cmp	r1, r3
 800aeea:	dd41      	ble.n	800af70 <_printf_float+0x1ac>
 800aeec:	f1aa 0a02 	sub.w	sl, sl, #2
 800aef0:	fa5f fa8a 	uxtb.w	sl, sl
 800aef4:	3901      	subs	r1, #1
 800aef6:	4652      	mov	r2, sl
 800aef8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aefc:	9109      	str	r1, [sp, #36]	@ 0x24
 800aefe:	f7ff ff26 	bl	800ad4e <__exponent>
 800af02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af04:	1813      	adds	r3, r2, r0
 800af06:	2a01      	cmp	r2, #1
 800af08:	4681      	mov	r9, r0
 800af0a:	6123      	str	r3, [r4, #16]
 800af0c:	dc02      	bgt.n	800af14 <_printf_float+0x150>
 800af0e:	6822      	ldr	r2, [r4, #0]
 800af10:	07d2      	lsls	r2, r2, #31
 800af12:	d501      	bpl.n	800af18 <_printf_float+0x154>
 800af14:	3301      	adds	r3, #1
 800af16:	6123      	str	r3, [r4, #16]
 800af18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0a2      	beq.n	800ae66 <_printf_float+0xa2>
 800af20:	232d      	movs	r3, #45	@ 0x2d
 800af22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af26:	e79e      	b.n	800ae66 <_printf_float+0xa2>
 800af28:	9a06      	ldr	r2, [sp, #24]
 800af2a:	2a47      	cmp	r2, #71	@ 0x47
 800af2c:	d1c2      	bne.n	800aeb4 <_printf_float+0xf0>
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1c0      	bne.n	800aeb4 <_printf_float+0xf0>
 800af32:	2301      	movs	r3, #1
 800af34:	e7bd      	b.n	800aeb2 <_printf_float+0xee>
 800af36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af3a:	d9db      	bls.n	800aef4 <_printf_float+0x130>
 800af3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800af40:	d118      	bne.n	800af74 <_printf_float+0x1b0>
 800af42:	2900      	cmp	r1, #0
 800af44:	6863      	ldr	r3, [r4, #4]
 800af46:	dd0b      	ble.n	800af60 <_printf_float+0x19c>
 800af48:	6121      	str	r1, [r4, #16]
 800af4a:	b913      	cbnz	r3, 800af52 <_printf_float+0x18e>
 800af4c:	6822      	ldr	r2, [r4, #0]
 800af4e:	07d0      	lsls	r0, r2, #31
 800af50:	d502      	bpl.n	800af58 <_printf_float+0x194>
 800af52:	3301      	adds	r3, #1
 800af54:	440b      	add	r3, r1
 800af56:	6123      	str	r3, [r4, #16]
 800af58:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af5a:	f04f 0900 	mov.w	r9, #0
 800af5e:	e7db      	b.n	800af18 <_printf_float+0x154>
 800af60:	b913      	cbnz	r3, 800af68 <_printf_float+0x1a4>
 800af62:	6822      	ldr	r2, [r4, #0]
 800af64:	07d2      	lsls	r2, r2, #31
 800af66:	d501      	bpl.n	800af6c <_printf_float+0x1a8>
 800af68:	3302      	adds	r3, #2
 800af6a:	e7f4      	b.n	800af56 <_printf_float+0x192>
 800af6c:	2301      	movs	r3, #1
 800af6e:	e7f2      	b.n	800af56 <_printf_float+0x192>
 800af70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800af74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af76:	4299      	cmp	r1, r3
 800af78:	db05      	blt.n	800af86 <_printf_float+0x1c2>
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	6121      	str	r1, [r4, #16]
 800af7e:	07d8      	lsls	r0, r3, #31
 800af80:	d5ea      	bpl.n	800af58 <_printf_float+0x194>
 800af82:	1c4b      	adds	r3, r1, #1
 800af84:	e7e7      	b.n	800af56 <_printf_float+0x192>
 800af86:	2900      	cmp	r1, #0
 800af88:	bfd4      	ite	le
 800af8a:	f1c1 0202 	rsble	r2, r1, #2
 800af8e:	2201      	movgt	r2, #1
 800af90:	4413      	add	r3, r2
 800af92:	e7e0      	b.n	800af56 <_printf_float+0x192>
 800af94:	6823      	ldr	r3, [r4, #0]
 800af96:	055a      	lsls	r2, r3, #21
 800af98:	d407      	bmi.n	800afaa <_printf_float+0x1e6>
 800af9a:	6923      	ldr	r3, [r4, #16]
 800af9c:	4642      	mov	r2, r8
 800af9e:	4631      	mov	r1, r6
 800afa0:	4628      	mov	r0, r5
 800afa2:	47b8      	blx	r7
 800afa4:	3001      	adds	r0, #1
 800afa6:	d12b      	bne.n	800b000 <_printf_float+0x23c>
 800afa8:	e767      	b.n	800ae7a <_printf_float+0xb6>
 800afaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afae:	f240 80dd 	bls.w	800b16c <_printf_float+0x3a8>
 800afb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afb6:	2200      	movs	r2, #0
 800afb8:	2300      	movs	r3, #0
 800afba:	f7f5 fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d033      	beq.n	800b02a <_printf_float+0x266>
 800afc2:	4a37      	ldr	r2, [pc, #220]	@ (800b0a0 <_printf_float+0x2dc>)
 800afc4:	2301      	movs	r3, #1
 800afc6:	4631      	mov	r1, r6
 800afc8:	4628      	mov	r0, r5
 800afca:	47b8      	blx	r7
 800afcc:	3001      	adds	r0, #1
 800afce:	f43f af54 	beq.w	800ae7a <_printf_float+0xb6>
 800afd2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800afd6:	4543      	cmp	r3, r8
 800afd8:	db02      	blt.n	800afe0 <_printf_float+0x21c>
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	07d8      	lsls	r0, r3, #31
 800afde:	d50f      	bpl.n	800b000 <_printf_float+0x23c>
 800afe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe4:	4631      	mov	r1, r6
 800afe6:	4628      	mov	r0, r5
 800afe8:	47b8      	blx	r7
 800afea:	3001      	adds	r0, #1
 800afec:	f43f af45 	beq.w	800ae7a <_printf_float+0xb6>
 800aff0:	f04f 0900 	mov.w	r9, #0
 800aff4:	f108 38ff 	add.w	r8, r8, #4294967295
 800aff8:	f104 0a1a 	add.w	sl, r4, #26
 800affc:	45c8      	cmp	r8, r9
 800affe:	dc09      	bgt.n	800b014 <_printf_float+0x250>
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	079b      	lsls	r3, r3, #30
 800b004:	f100 8103 	bmi.w	800b20e <_printf_float+0x44a>
 800b008:	68e0      	ldr	r0, [r4, #12]
 800b00a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b00c:	4298      	cmp	r0, r3
 800b00e:	bfb8      	it	lt
 800b010:	4618      	movlt	r0, r3
 800b012:	e734      	b.n	800ae7e <_printf_float+0xba>
 800b014:	2301      	movs	r3, #1
 800b016:	4652      	mov	r2, sl
 800b018:	4631      	mov	r1, r6
 800b01a:	4628      	mov	r0, r5
 800b01c:	47b8      	blx	r7
 800b01e:	3001      	adds	r0, #1
 800b020:	f43f af2b 	beq.w	800ae7a <_printf_float+0xb6>
 800b024:	f109 0901 	add.w	r9, r9, #1
 800b028:	e7e8      	b.n	800affc <_printf_float+0x238>
 800b02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	dc39      	bgt.n	800b0a4 <_printf_float+0x2e0>
 800b030:	4a1b      	ldr	r2, [pc, #108]	@ (800b0a0 <_printf_float+0x2dc>)
 800b032:	2301      	movs	r3, #1
 800b034:	4631      	mov	r1, r6
 800b036:	4628      	mov	r0, r5
 800b038:	47b8      	blx	r7
 800b03a:	3001      	adds	r0, #1
 800b03c:	f43f af1d 	beq.w	800ae7a <_printf_float+0xb6>
 800b040:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b044:	ea59 0303 	orrs.w	r3, r9, r3
 800b048:	d102      	bne.n	800b050 <_printf_float+0x28c>
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	07d9      	lsls	r1, r3, #31
 800b04e:	d5d7      	bpl.n	800b000 <_printf_float+0x23c>
 800b050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b054:	4631      	mov	r1, r6
 800b056:	4628      	mov	r0, r5
 800b058:	47b8      	blx	r7
 800b05a:	3001      	adds	r0, #1
 800b05c:	f43f af0d 	beq.w	800ae7a <_printf_float+0xb6>
 800b060:	f04f 0a00 	mov.w	sl, #0
 800b064:	f104 0b1a 	add.w	fp, r4, #26
 800b068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b06a:	425b      	negs	r3, r3
 800b06c:	4553      	cmp	r3, sl
 800b06e:	dc01      	bgt.n	800b074 <_printf_float+0x2b0>
 800b070:	464b      	mov	r3, r9
 800b072:	e793      	b.n	800af9c <_printf_float+0x1d8>
 800b074:	2301      	movs	r3, #1
 800b076:	465a      	mov	r2, fp
 800b078:	4631      	mov	r1, r6
 800b07a:	4628      	mov	r0, r5
 800b07c:	47b8      	blx	r7
 800b07e:	3001      	adds	r0, #1
 800b080:	f43f aefb 	beq.w	800ae7a <_printf_float+0xb6>
 800b084:	f10a 0a01 	add.w	sl, sl, #1
 800b088:	e7ee      	b.n	800b068 <_printf_float+0x2a4>
 800b08a:	bf00      	nop
 800b08c:	7fefffff 	.word	0x7fefffff
 800b090:	08013de7 	.word	0x08013de7
 800b094:	08013de3 	.word	0x08013de3
 800b098:	08013def 	.word	0x08013def
 800b09c:	08013deb 	.word	0x08013deb
 800b0a0:	08013df3 	.word	0x08013df3
 800b0a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0aa:	4553      	cmp	r3, sl
 800b0ac:	bfa8      	it	ge
 800b0ae:	4653      	movge	r3, sl
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	4699      	mov	r9, r3
 800b0b4:	dc36      	bgt.n	800b124 <_printf_float+0x360>
 800b0b6:	f04f 0b00 	mov.w	fp, #0
 800b0ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0be:	f104 021a 	add.w	r2, r4, #26
 800b0c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0c4:	9306      	str	r3, [sp, #24]
 800b0c6:	eba3 0309 	sub.w	r3, r3, r9
 800b0ca:	455b      	cmp	r3, fp
 800b0cc:	dc31      	bgt.n	800b132 <_printf_float+0x36e>
 800b0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d0:	459a      	cmp	sl, r3
 800b0d2:	dc3a      	bgt.n	800b14a <_printf_float+0x386>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	07da      	lsls	r2, r3, #31
 800b0d8:	d437      	bmi.n	800b14a <_printf_float+0x386>
 800b0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0dc:	ebaa 0903 	sub.w	r9, sl, r3
 800b0e0:	9b06      	ldr	r3, [sp, #24]
 800b0e2:	ebaa 0303 	sub.w	r3, sl, r3
 800b0e6:	4599      	cmp	r9, r3
 800b0e8:	bfa8      	it	ge
 800b0ea:	4699      	movge	r9, r3
 800b0ec:	f1b9 0f00 	cmp.w	r9, #0
 800b0f0:	dc33      	bgt.n	800b15a <_printf_float+0x396>
 800b0f2:	f04f 0800 	mov.w	r8, #0
 800b0f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0fa:	f104 0b1a 	add.w	fp, r4, #26
 800b0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b100:	ebaa 0303 	sub.w	r3, sl, r3
 800b104:	eba3 0309 	sub.w	r3, r3, r9
 800b108:	4543      	cmp	r3, r8
 800b10a:	f77f af79 	ble.w	800b000 <_printf_float+0x23c>
 800b10e:	2301      	movs	r3, #1
 800b110:	465a      	mov	r2, fp
 800b112:	4631      	mov	r1, r6
 800b114:	4628      	mov	r0, r5
 800b116:	47b8      	blx	r7
 800b118:	3001      	adds	r0, #1
 800b11a:	f43f aeae 	beq.w	800ae7a <_printf_float+0xb6>
 800b11e:	f108 0801 	add.w	r8, r8, #1
 800b122:	e7ec      	b.n	800b0fe <_printf_float+0x33a>
 800b124:	4642      	mov	r2, r8
 800b126:	4631      	mov	r1, r6
 800b128:	4628      	mov	r0, r5
 800b12a:	47b8      	blx	r7
 800b12c:	3001      	adds	r0, #1
 800b12e:	d1c2      	bne.n	800b0b6 <_printf_float+0x2f2>
 800b130:	e6a3      	b.n	800ae7a <_printf_float+0xb6>
 800b132:	2301      	movs	r3, #1
 800b134:	4631      	mov	r1, r6
 800b136:	4628      	mov	r0, r5
 800b138:	9206      	str	r2, [sp, #24]
 800b13a:	47b8      	blx	r7
 800b13c:	3001      	adds	r0, #1
 800b13e:	f43f ae9c 	beq.w	800ae7a <_printf_float+0xb6>
 800b142:	9a06      	ldr	r2, [sp, #24]
 800b144:	f10b 0b01 	add.w	fp, fp, #1
 800b148:	e7bb      	b.n	800b0c2 <_printf_float+0x2fe>
 800b14a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b14e:	4631      	mov	r1, r6
 800b150:	4628      	mov	r0, r5
 800b152:	47b8      	blx	r7
 800b154:	3001      	adds	r0, #1
 800b156:	d1c0      	bne.n	800b0da <_printf_float+0x316>
 800b158:	e68f      	b.n	800ae7a <_printf_float+0xb6>
 800b15a:	9a06      	ldr	r2, [sp, #24]
 800b15c:	464b      	mov	r3, r9
 800b15e:	4442      	add	r2, r8
 800b160:	4631      	mov	r1, r6
 800b162:	4628      	mov	r0, r5
 800b164:	47b8      	blx	r7
 800b166:	3001      	adds	r0, #1
 800b168:	d1c3      	bne.n	800b0f2 <_printf_float+0x32e>
 800b16a:	e686      	b.n	800ae7a <_printf_float+0xb6>
 800b16c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b170:	f1ba 0f01 	cmp.w	sl, #1
 800b174:	dc01      	bgt.n	800b17a <_printf_float+0x3b6>
 800b176:	07db      	lsls	r3, r3, #31
 800b178:	d536      	bpl.n	800b1e8 <_printf_float+0x424>
 800b17a:	2301      	movs	r3, #1
 800b17c:	4642      	mov	r2, r8
 800b17e:	4631      	mov	r1, r6
 800b180:	4628      	mov	r0, r5
 800b182:	47b8      	blx	r7
 800b184:	3001      	adds	r0, #1
 800b186:	f43f ae78 	beq.w	800ae7a <_printf_float+0xb6>
 800b18a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b18e:	4631      	mov	r1, r6
 800b190:	4628      	mov	r0, r5
 800b192:	47b8      	blx	r7
 800b194:	3001      	adds	r0, #1
 800b196:	f43f ae70 	beq.w	800ae7a <_printf_float+0xb6>
 800b19a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b19e:	2200      	movs	r2, #0
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1a6:	f7f5 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1aa:	b9c0      	cbnz	r0, 800b1de <_printf_float+0x41a>
 800b1ac:	4653      	mov	r3, sl
 800b1ae:	f108 0201 	add.w	r2, r8, #1
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	47b8      	blx	r7
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d10c      	bne.n	800b1d6 <_printf_float+0x412>
 800b1bc:	e65d      	b.n	800ae7a <_printf_float+0xb6>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	465a      	mov	r2, fp
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	47b8      	blx	r7
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	f43f ae56 	beq.w	800ae7a <_printf_float+0xb6>
 800b1ce:	f108 0801 	add.w	r8, r8, #1
 800b1d2:	45d0      	cmp	r8, sl
 800b1d4:	dbf3      	blt.n	800b1be <_printf_float+0x3fa>
 800b1d6:	464b      	mov	r3, r9
 800b1d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b1dc:	e6df      	b.n	800af9e <_printf_float+0x1da>
 800b1de:	f04f 0800 	mov.w	r8, #0
 800b1e2:	f104 0b1a 	add.w	fp, r4, #26
 800b1e6:	e7f4      	b.n	800b1d2 <_printf_float+0x40e>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	4642      	mov	r2, r8
 800b1ec:	e7e1      	b.n	800b1b2 <_printf_float+0x3ee>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	464a      	mov	r2, r9
 800b1f2:	4631      	mov	r1, r6
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	47b8      	blx	r7
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	f43f ae3e 	beq.w	800ae7a <_printf_float+0xb6>
 800b1fe:	f108 0801 	add.w	r8, r8, #1
 800b202:	68e3      	ldr	r3, [r4, #12]
 800b204:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b206:	1a5b      	subs	r3, r3, r1
 800b208:	4543      	cmp	r3, r8
 800b20a:	dcf0      	bgt.n	800b1ee <_printf_float+0x42a>
 800b20c:	e6fc      	b.n	800b008 <_printf_float+0x244>
 800b20e:	f04f 0800 	mov.w	r8, #0
 800b212:	f104 0919 	add.w	r9, r4, #25
 800b216:	e7f4      	b.n	800b202 <_printf_float+0x43e>

0800b218 <_printf_common>:
 800b218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b21c:	4616      	mov	r6, r2
 800b21e:	4698      	mov	r8, r3
 800b220:	688a      	ldr	r2, [r1, #8]
 800b222:	690b      	ldr	r3, [r1, #16]
 800b224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b228:	4293      	cmp	r3, r2
 800b22a:	bfb8      	it	lt
 800b22c:	4613      	movlt	r3, r2
 800b22e:	6033      	str	r3, [r6, #0]
 800b230:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b234:	4607      	mov	r7, r0
 800b236:	460c      	mov	r4, r1
 800b238:	b10a      	cbz	r2, 800b23e <_printf_common+0x26>
 800b23a:	3301      	adds	r3, #1
 800b23c:	6033      	str	r3, [r6, #0]
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	0699      	lsls	r1, r3, #26
 800b242:	bf42      	ittt	mi
 800b244:	6833      	ldrmi	r3, [r6, #0]
 800b246:	3302      	addmi	r3, #2
 800b248:	6033      	strmi	r3, [r6, #0]
 800b24a:	6825      	ldr	r5, [r4, #0]
 800b24c:	f015 0506 	ands.w	r5, r5, #6
 800b250:	d106      	bne.n	800b260 <_printf_common+0x48>
 800b252:	f104 0a19 	add.w	sl, r4, #25
 800b256:	68e3      	ldr	r3, [r4, #12]
 800b258:	6832      	ldr	r2, [r6, #0]
 800b25a:	1a9b      	subs	r3, r3, r2
 800b25c:	42ab      	cmp	r3, r5
 800b25e:	dc26      	bgt.n	800b2ae <_printf_common+0x96>
 800b260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b264:	6822      	ldr	r2, [r4, #0]
 800b266:	3b00      	subs	r3, #0
 800b268:	bf18      	it	ne
 800b26a:	2301      	movne	r3, #1
 800b26c:	0692      	lsls	r2, r2, #26
 800b26e:	d42b      	bmi.n	800b2c8 <_printf_common+0xb0>
 800b270:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b274:	4641      	mov	r1, r8
 800b276:	4638      	mov	r0, r7
 800b278:	47c8      	blx	r9
 800b27a:	3001      	adds	r0, #1
 800b27c:	d01e      	beq.n	800b2bc <_printf_common+0xa4>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	6922      	ldr	r2, [r4, #16]
 800b282:	f003 0306 	and.w	r3, r3, #6
 800b286:	2b04      	cmp	r3, #4
 800b288:	bf02      	ittt	eq
 800b28a:	68e5      	ldreq	r5, [r4, #12]
 800b28c:	6833      	ldreq	r3, [r6, #0]
 800b28e:	1aed      	subeq	r5, r5, r3
 800b290:	68a3      	ldr	r3, [r4, #8]
 800b292:	bf0c      	ite	eq
 800b294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b298:	2500      	movne	r5, #0
 800b29a:	4293      	cmp	r3, r2
 800b29c:	bfc4      	itt	gt
 800b29e:	1a9b      	subgt	r3, r3, r2
 800b2a0:	18ed      	addgt	r5, r5, r3
 800b2a2:	2600      	movs	r6, #0
 800b2a4:	341a      	adds	r4, #26
 800b2a6:	42b5      	cmp	r5, r6
 800b2a8:	d11a      	bne.n	800b2e0 <_printf_common+0xc8>
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	e008      	b.n	800b2c0 <_printf_common+0xa8>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	4641      	mov	r1, r8
 800b2b4:	4638      	mov	r0, r7
 800b2b6:	47c8      	blx	r9
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	d103      	bne.n	800b2c4 <_printf_common+0xac>
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c4:	3501      	adds	r5, #1
 800b2c6:	e7c6      	b.n	800b256 <_printf_common+0x3e>
 800b2c8:	18e1      	adds	r1, r4, r3
 800b2ca:	1c5a      	adds	r2, r3, #1
 800b2cc:	2030      	movs	r0, #48	@ 0x30
 800b2ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2d2:	4422      	add	r2, r4
 800b2d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2dc:	3302      	adds	r3, #2
 800b2de:	e7c7      	b.n	800b270 <_printf_common+0x58>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	4641      	mov	r1, r8
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	47c8      	blx	r9
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d0e6      	beq.n	800b2bc <_printf_common+0xa4>
 800b2ee:	3601      	adds	r6, #1
 800b2f0:	e7d9      	b.n	800b2a6 <_printf_common+0x8e>
	...

0800b2f4 <_printf_i>:
 800b2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f8:	7e0f      	ldrb	r7, [r1, #24]
 800b2fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2fc:	2f78      	cmp	r7, #120	@ 0x78
 800b2fe:	4691      	mov	r9, r2
 800b300:	4680      	mov	r8, r0
 800b302:	460c      	mov	r4, r1
 800b304:	469a      	mov	sl, r3
 800b306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b30a:	d807      	bhi.n	800b31c <_printf_i+0x28>
 800b30c:	2f62      	cmp	r7, #98	@ 0x62
 800b30e:	d80a      	bhi.n	800b326 <_printf_i+0x32>
 800b310:	2f00      	cmp	r7, #0
 800b312:	f000 80d1 	beq.w	800b4b8 <_printf_i+0x1c4>
 800b316:	2f58      	cmp	r7, #88	@ 0x58
 800b318:	f000 80b8 	beq.w	800b48c <_printf_i+0x198>
 800b31c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b324:	e03a      	b.n	800b39c <_printf_i+0xa8>
 800b326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b32a:	2b15      	cmp	r3, #21
 800b32c:	d8f6      	bhi.n	800b31c <_printf_i+0x28>
 800b32e:	a101      	add	r1, pc, #4	@ (adr r1, 800b334 <_printf_i+0x40>)
 800b330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b334:	0800b38d 	.word	0x0800b38d
 800b338:	0800b3a1 	.word	0x0800b3a1
 800b33c:	0800b31d 	.word	0x0800b31d
 800b340:	0800b31d 	.word	0x0800b31d
 800b344:	0800b31d 	.word	0x0800b31d
 800b348:	0800b31d 	.word	0x0800b31d
 800b34c:	0800b3a1 	.word	0x0800b3a1
 800b350:	0800b31d 	.word	0x0800b31d
 800b354:	0800b31d 	.word	0x0800b31d
 800b358:	0800b31d 	.word	0x0800b31d
 800b35c:	0800b31d 	.word	0x0800b31d
 800b360:	0800b49f 	.word	0x0800b49f
 800b364:	0800b3cb 	.word	0x0800b3cb
 800b368:	0800b459 	.word	0x0800b459
 800b36c:	0800b31d 	.word	0x0800b31d
 800b370:	0800b31d 	.word	0x0800b31d
 800b374:	0800b4c1 	.word	0x0800b4c1
 800b378:	0800b31d 	.word	0x0800b31d
 800b37c:	0800b3cb 	.word	0x0800b3cb
 800b380:	0800b31d 	.word	0x0800b31d
 800b384:	0800b31d 	.word	0x0800b31d
 800b388:	0800b461 	.word	0x0800b461
 800b38c:	6833      	ldr	r3, [r6, #0]
 800b38e:	1d1a      	adds	r2, r3, #4
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6032      	str	r2, [r6, #0]
 800b394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b39c:	2301      	movs	r3, #1
 800b39e:	e09c      	b.n	800b4da <_printf_i+0x1e6>
 800b3a0:	6833      	ldr	r3, [r6, #0]
 800b3a2:	6820      	ldr	r0, [r4, #0]
 800b3a4:	1d19      	adds	r1, r3, #4
 800b3a6:	6031      	str	r1, [r6, #0]
 800b3a8:	0606      	lsls	r6, r0, #24
 800b3aa:	d501      	bpl.n	800b3b0 <_printf_i+0xbc>
 800b3ac:	681d      	ldr	r5, [r3, #0]
 800b3ae:	e003      	b.n	800b3b8 <_printf_i+0xc4>
 800b3b0:	0645      	lsls	r5, r0, #25
 800b3b2:	d5fb      	bpl.n	800b3ac <_printf_i+0xb8>
 800b3b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3b8:	2d00      	cmp	r5, #0
 800b3ba:	da03      	bge.n	800b3c4 <_printf_i+0xd0>
 800b3bc:	232d      	movs	r3, #45	@ 0x2d
 800b3be:	426d      	negs	r5, r5
 800b3c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3c4:	4858      	ldr	r0, [pc, #352]	@ (800b528 <_printf_i+0x234>)
 800b3c6:	230a      	movs	r3, #10
 800b3c8:	e011      	b.n	800b3ee <_printf_i+0xfa>
 800b3ca:	6821      	ldr	r1, [r4, #0]
 800b3cc:	6833      	ldr	r3, [r6, #0]
 800b3ce:	0608      	lsls	r0, r1, #24
 800b3d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3d4:	d402      	bmi.n	800b3dc <_printf_i+0xe8>
 800b3d6:	0649      	lsls	r1, r1, #25
 800b3d8:	bf48      	it	mi
 800b3da:	b2ad      	uxthmi	r5, r5
 800b3dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3de:	4852      	ldr	r0, [pc, #328]	@ (800b528 <_printf_i+0x234>)
 800b3e0:	6033      	str	r3, [r6, #0]
 800b3e2:	bf14      	ite	ne
 800b3e4:	230a      	movne	r3, #10
 800b3e6:	2308      	moveq	r3, #8
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3ee:	6866      	ldr	r6, [r4, #4]
 800b3f0:	60a6      	str	r6, [r4, #8]
 800b3f2:	2e00      	cmp	r6, #0
 800b3f4:	db05      	blt.n	800b402 <_printf_i+0x10e>
 800b3f6:	6821      	ldr	r1, [r4, #0]
 800b3f8:	432e      	orrs	r6, r5
 800b3fa:	f021 0104 	bic.w	r1, r1, #4
 800b3fe:	6021      	str	r1, [r4, #0]
 800b400:	d04b      	beq.n	800b49a <_printf_i+0x1a6>
 800b402:	4616      	mov	r6, r2
 800b404:	fbb5 f1f3 	udiv	r1, r5, r3
 800b408:	fb03 5711 	mls	r7, r3, r1, r5
 800b40c:	5dc7      	ldrb	r7, [r0, r7]
 800b40e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b412:	462f      	mov	r7, r5
 800b414:	42bb      	cmp	r3, r7
 800b416:	460d      	mov	r5, r1
 800b418:	d9f4      	bls.n	800b404 <_printf_i+0x110>
 800b41a:	2b08      	cmp	r3, #8
 800b41c:	d10b      	bne.n	800b436 <_printf_i+0x142>
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	07df      	lsls	r7, r3, #31
 800b422:	d508      	bpl.n	800b436 <_printf_i+0x142>
 800b424:	6923      	ldr	r3, [r4, #16]
 800b426:	6861      	ldr	r1, [r4, #4]
 800b428:	4299      	cmp	r1, r3
 800b42a:	bfde      	ittt	le
 800b42c:	2330      	movle	r3, #48	@ 0x30
 800b42e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b432:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b436:	1b92      	subs	r2, r2, r6
 800b438:	6122      	str	r2, [r4, #16]
 800b43a:	f8cd a000 	str.w	sl, [sp]
 800b43e:	464b      	mov	r3, r9
 800b440:	aa03      	add	r2, sp, #12
 800b442:	4621      	mov	r1, r4
 800b444:	4640      	mov	r0, r8
 800b446:	f7ff fee7 	bl	800b218 <_printf_common>
 800b44a:	3001      	adds	r0, #1
 800b44c:	d14a      	bne.n	800b4e4 <_printf_i+0x1f0>
 800b44e:	f04f 30ff 	mov.w	r0, #4294967295
 800b452:	b004      	add	sp, #16
 800b454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	f043 0320 	orr.w	r3, r3, #32
 800b45e:	6023      	str	r3, [r4, #0]
 800b460:	4832      	ldr	r0, [pc, #200]	@ (800b52c <_printf_i+0x238>)
 800b462:	2778      	movs	r7, #120	@ 0x78
 800b464:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b468:	6823      	ldr	r3, [r4, #0]
 800b46a:	6831      	ldr	r1, [r6, #0]
 800b46c:	061f      	lsls	r7, r3, #24
 800b46e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b472:	d402      	bmi.n	800b47a <_printf_i+0x186>
 800b474:	065f      	lsls	r7, r3, #25
 800b476:	bf48      	it	mi
 800b478:	b2ad      	uxthmi	r5, r5
 800b47a:	6031      	str	r1, [r6, #0]
 800b47c:	07d9      	lsls	r1, r3, #31
 800b47e:	bf44      	itt	mi
 800b480:	f043 0320 	orrmi.w	r3, r3, #32
 800b484:	6023      	strmi	r3, [r4, #0]
 800b486:	b11d      	cbz	r5, 800b490 <_printf_i+0x19c>
 800b488:	2310      	movs	r3, #16
 800b48a:	e7ad      	b.n	800b3e8 <_printf_i+0xf4>
 800b48c:	4826      	ldr	r0, [pc, #152]	@ (800b528 <_printf_i+0x234>)
 800b48e:	e7e9      	b.n	800b464 <_printf_i+0x170>
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	f023 0320 	bic.w	r3, r3, #32
 800b496:	6023      	str	r3, [r4, #0]
 800b498:	e7f6      	b.n	800b488 <_printf_i+0x194>
 800b49a:	4616      	mov	r6, r2
 800b49c:	e7bd      	b.n	800b41a <_printf_i+0x126>
 800b49e:	6833      	ldr	r3, [r6, #0]
 800b4a0:	6825      	ldr	r5, [r4, #0]
 800b4a2:	6961      	ldr	r1, [r4, #20]
 800b4a4:	1d18      	adds	r0, r3, #4
 800b4a6:	6030      	str	r0, [r6, #0]
 800b4a8:	062e      	lsls	r6, r5, #24
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	d501      	bpl.n	800b4b2 <_printf_i+0x1be>
 800b4ae:	6019      	str	r1, [r3, #0]
 800b4b0:	e002      	b.n	800b4b8 <_printf_i+0x1c4>
 800b4b2:	0668      	lsls	r0, r5, #25
 800b4b4:	d5fb      	bpl.n	800b4ae <_printf_i+0x1ba>
 800b4b6:	8019      	strh	r1, [r3, #0]
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	6123      	str	r3, [r4, #16]
 800b4bc:	4616      	mov	r6, r2
 800b4be:	e7bc      	b.n	800b43a <_printf_i+0x146>
 800b4c0:	6833      	ldr	r3, [r6, #0]
 800b4c2:	1d1a      	adds	r2, r3, #4
 800b4c4:	6032      	str	r2, [r6, #0]
 800b4c6:	681e      	ldr	r6, [r3, #0]
 800b4c8:	6862      	ldr	r2, [r4, #4]
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	f7f4 fe7f 	bl	80001d0 <memchr>
 800b4d2:	b108      	cbz	r0, 800b4d8 <_printf_i+0x1e4>
 800b4d4:	1b80      	subs	r0, r0, r6
 800b4d6:	6060      	str	r0, [r4, #4]
 800b4d8:	6863      	ldr	r3, [r4, #4]
 800b4da:	6123      	str	r3, [r4, #16]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4e2:	e7aa      	b.n	800b43a <_printf_i+0x146>
 800b4e4:	6923      	ldr	r3, [r4, #16]
 800b4e6:	4632      	mov	r2, r6
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	47d0      	blx	sl
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d0ad      	beq.n	800b44e <_printf_i+0x15a>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	079b      	lsls	r3, r3, #30
 800b4f6:	d413      	bmi.n	800b520 <_printf_i+0x22c>
 800b4f8:	68e0      	ldr	r0, [r4, #12]
 800b4fa:	9b03      	ldr	r3, [sp, #12]
 800b4fc:	4298      	cmp	r0, r3
 800b4fe:	bfb8      	it	lt
 800b500:	4618      	movlt	r0, r3
 800b502:	e7a6      	b.n	800b452 <_printf_i+0x15e>
 800b504:	2301      	movs	r3, #1
 800b506:	4632      	mov	r2, r6
 800b508:	4649      	mov	r1, r9
 800b50a:	4640      	mov	r0, r8
 800b50c:	47d0      	blx	sl
 800b50e:	3001      	adds	r0, #1
 800b510:	d09d      	beq.n	800b44e <_printf_i+0x15a>
 800b512:	3501      	adds	r5, #1
 800b514:	68e3      	ldr	r3, [r4, #12]
 800b516:	9903      	ldr	r1, [sp, #12]
 800b518:	1a5b      	subs	r3, r3, r1
 800b51a:	42ab      	cmp	r3, r5
 800b51c:	dcf2      	bgt.n	800b504 <_printf_i+0x210>
 800b51e:	e7eb      	b.n	800b4f8 <_printf_i+0x204>
 800b520:	2500      	movs	r5, #0
 800b522:	f104 0619 	add.w	r6, r4, #25
 800b526:	e7f5      	b.n	800b514 <_printf_i+0x220>
 800b528:	08013df5 	.word	0x08013df5
 800b52c:	08013e06 	.word	0x08013e06

0800b530 <_scanf_float>:
 800b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	b087      	sub	sp, #28
 800b536:	4691      	mov	r9, r2
 800b538:	9303      	str	r3, [sp, #12]
 800b53a:	688b      	ldr	r3, [r1, #8]
 800b53c:	1e5a      	subs	r2, r3, #1
 800b53e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b542:	bf81      	itttt	hi
 800b544:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b548:	eb03 0b05 	addhi.w	fp, r3, r5
 800b54c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b550:	608b      	strhi	r3, [r1, #8]
 800b552:	680b      	ldr	r3, [r1, #0]
 800b554:	460a      	mov	r2, r1
 800b556:	f04f 0500 	mov.w	r5, #0
 800b55a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b55e:	f842 3b1c 	str.w	r3, [r2], #28
 800b562:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b566:	4680      	mov	r8, r0
 800b568:	460c      	mov	r4, r1
 800b56a:	bf98      	it	ls
 800b56c:	f04f 0b00 	movls.w	fp, #0
 800b570:	9201      	str	r2, [sp, #4]
 800b572:	4616      	mov	r6, r2
 800b574:	46aa      	mov	sl, r5
 800b576:	462f      	mov	r7, r5
 800b578:	9502      	str	r5, [sp, #8]
 800b57a:	68a2      	ldr	r2, [r4, #8]
 800b57c:	b15a      	cbz	r2, 800b596 <_scanf_float+0x66>
 800b57e:	f8d9 3000 	ldr.w	r3, [r9]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b4e      	cmp	r3, #78	@ 0x4e
 800b586:	d863      	bhi.n	800b650 <_scanf_float+0x120>
 800b588:	2b40      	cmp	r3, #64	@ 0x40
 800b58a:	d83b      	bhi.n	800b604 <_scanf_float+0xd4>
 800b58c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b590:	b2c8      	uxtb	r0, r1
 800b592:	280e      	cmp	r0, #14
 800b594:	d939      	bls.n	800b60a <_scanf_float+0xda>
 800b596:	b11f      	cbz	r7, 800b5a0 <_scanf_float+0x70>
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b59e:	6023      	str	r3, [r4, #0]
 800b5a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5a4:	f1ba 0f01 	cmp.w	sl, #1
 800b5a8:	f200 8114 	bhi.w	800b7d4 <_scanf_float+0x2a4>
 800b5ac:	9b01      	ldr	r3, [sp, #4]
 800b5ae:	429e      	cmp	r6, r3
 800b5b0:	f200 8105 	bhi.w	800b7be <_scanf_float+0x28e>
 800b5b4:	2001      	movs	r0, #1
 800b5b6:	b007      	add	sp, #28
 800b5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5bc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b5c0:	2a0d      	cmp	r2, #13
 800b5c2:	d8e8      	bhi.n	800b596 <_scanf_float+0x66>
 800b5c4:	a101      	add	r1, pc, #4	@ (adr r1, 800b5cc <_scanf_float+0x9c>)
 800b5c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b5ca:	bf00      	nop
 800b5cc:	0800b715 	.word	0x0800b715
 800b5d0:	0800b597 	.word	0x0800b597
 800b5d4:	0800b597 	.word	0x0800b597
 800b5d8:	0800b597 	.word	0x0800b597
 800b5dc:	0800b771 	.word	0x0800b771
 800b5e0:	0800b74b 	.word	0x0800b74b
 800b5e4:	0800b597 	.word	0x0800b597
 800b5e8:	0800b597 	.word	0x0800b597
 800b5ec:	0800b723 	.word	0x0800b723
 800b5f0:	0800b597 	.word	0x0800b597
 800b5f4:	0800b597 	.word	0x0800b597
 800b5f8:	0800b597 	.word	0x0800b597
 800b5fc:	0800b597 	.word	0x0800b597
 800b600:	0800b6df 	.word	0x0800b6df
 800b604:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b608:	e7da      	b.n	800b5c0 <_scanf_float+0x90>
 800b60a:	290e      	cmp	r1, #14
 800b60c:	d8c3      	bhi.n	800b596 <_scanf_float+0x66>
 800b60e:	a001      	add	r0, pc, #4	@ (adr r0, 800b614 <_scanf_float+0xe4>)
 800b610:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b614:	0800b6cf 	.word	0x0800b6cf
 800b618:	0800b597 	.word	0x0800b597
 800b61c:	0800b6cf 	.word	0x0800b6cf
 800b620:	0800b75f 	.word	0x0800b75f
 800b624:	0800b597 	.word	0x0800b597
 800b628:	0800b671 	.word	0x0800b671
 800b62c:	0800b6b5 	.word	0x0800b6b5
 800b630:	0800b6b5 	.word	0x0800b6b5
 800b634:	0800b6b5 	.word	0x0800b6b5
 800b638:	0800b6b5 	.word	0x0800b6b5
 800b63c:	0800b6b5 	.word	0x0800b6b5
 800b640:	0800b6b5 	.word	0x0800b6b5
 800b644:	0800b6b5 	.word	0x0800b6b5
 800b648:	0800b6b5 	.word	0x0800b6b5
 800b64c:	0800b6b5 	.word	0x0800b6b5
 800b650:	2b6e      	cmp	r3, #110	@ 0x6e
 800b652:	d809      	bhi.n	800b668 <_scanf_float+0x138>
 800b654:	2b60      	cmp	r3, #96	@ 0x60
 800b656:	d8b1      	bhi.n	800b5bc <_scanf_float+0x8c>
 800b658:	2b54      	cmp	r3, #84	@ 0x54
 800b65a:	d07b      	beq.n	800b754 <_scanf_float+0x224>
 800b65c:	2b59      	cmp	r3, #89	@ 0x59
 800b65e:	d19a      	bne.n	800b596 <_scanf_float+0x66>
 800b660:	2d07      	cmp	r5, #7
 800b662:	d198      	bne.n	800b596 <_scanf_float+0x66>
 800b664:	2508      	movs	r5, #8
 800b666:	e02f      	b.n	800b6c8 <_scanf_float+0x198>
 800b668:	2b74      	cmp	r3, #116	@ 0x74
 800b66a:	d073      	beq.n	800b754 <_scanf_float+0x224>
 800b66c:	2b79      	cmp	r3, #121	@ 0x79
 800b66e:	e7f6      	b.n	800b65e <_scanf_float+0x12e>
 800b670:	6821      	ldr	r1, [r4, #0]
 800b672:	05c8      	lsls	r0, r1, #23
 800b674:	d51e      	bpl.n	800b6b4 <_scanf_float+0x184>
 800b676:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b67a:	6021      	str	r1, [r4, #0]
 800b67c:	3701      	adds	r7, #1
 800b67e:	f1bb 0f00 	cmp.w	fp, #0
 800b682:	d003      	beq.n	800b68c <_scanf_float+0x15c>
 800b684:	3201      	adds	r2, #1
 800b686:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b68a:	60a2      	str	r2, [r4, #8]
 800b68c:	68a3      	ldr	r3, [r4, #8]
 800b68e:	3b01      	subs	r3, #1
 800b690:	60a3      	str	r3, [r4, #8]
 800b692:	6923      	ldr	r3, [r4, #16]
 800b694:	3301      	adds	r3, #1
 800b696:	6123      	str	r3, [r4, #16]
 800b698:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f8c9 3004 	str.w	r3, [r9, #4]
 800b6a4:	f340 8082 	ble.w	800b7ac <_scanf_float+0x27c>
 800b6a8:	f8d9 3000 	ldr.w	r3, [r9]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	f8c9 3000 	str.w	r3, [r9]
 800b6b2:	e762      	b.n	800b57a <_scanf_float+0x4a>
 800b6b4:	eb1a 0105 	adds.w	r1, sl, r5
 800b6b8:	f47f af6d 	bne.w	800b596 <_scanf_float+0x66>
 800b6bc:	6822      	ldr	r2, [r4, #0]
 800b6be:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b6c2:	6022      	str	r2, [r4, #0]
 800b6c4:	460d      	mov	r5, r1
 800b6c6:	468a      	mov	sl, r1
 800b6c8:	f806 3b01 	strb.w	r3, [r6], #1
 800b6cc:	e7de      	b.n	800b68c <_scanf_float+0x15c>
 800b6ce:	6822      	ldr	r2, [r4, #0]
 800b6d0:	0610      	lsls	r0, r2, #24
 800b6d2:	f57f af60 	bpl.w	800b596 <_scanf_float+0x66>
 800b6d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b6da:	6022      	str	r2, [r4, #0]
 800b6dc:	e7f4      	b.n	800b6c8 <_scanf_float+0x198>
 800b6de:	f1ba 0f00 	cmp.w	sl, #0
 800b6e2:	d10c      	bne.n	800b6fe <_scanf_float+0x1ce>
 800b6e4:	b977      	cbnz	r7, 800b704 <_scanf_float+0x1d4>
 800b6e6:	6822      	ldr	r2, [r4, #0]
 800b6e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b6ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b6f0:	d108      	bne.n	800b704 <_scanf_float+0x1d4>
 800b6f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b6f6:	6022      	str	r2, [r4, #0]
 800b6f8:	f04f 0a01 	mov.w	sl, #1
 800b6fc:	e7e4      	b.n	800b6c8 <_scanf_float+0x198>
 800b6fe:	f1ba 0f02 	cmp.w	sl, #2
 800b702:	d050      	beq.n	800b7a6 <_scanf_float+0x276>
 800b704:	2d01      	cmp	r5, #1
 800b706:	d002      	beq.n	800b70e <_scanf_float+0x1de>
 800b708:	2d04      	cmp	r5, #4
 800b70a:	f47f af44 	bne.w	800b596 <_scanf_float+0x66>
 800b70e:	3501      	adds	r5, #1
 800b710:	b2ed      	uxtb	r5, r5
 800b712:	e7d9      	b.n	800b6c8 <_scanf_float+0x198>
 800b714:	f1ba 0f01 	cmp.w	sl, #1
 800b718:	f47f af3d 	bne.w	800b596 <_scanf_float+0x66>
 800b71c:	f04f 0a02 	mov.w	sl, #2
 800b720:	e7d2      	b.n	800b6c8 <_scanf_float+0x198>
 800b722:	b975      	cbnz	r5, 800b742 <_scanf_float+0x212>
 800b724:	2f00      	cmp	r7, #0
 800b726:	f47f af37 	bne.w	800b598 <_scanf_float+0x68>
 800b72a:	6822      	ldr	r2, [r4, #0]
 800b72c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b730:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b734:	f040 8103 	bne.w	800b93e <_scanf_float+0x40e>
 800b738:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b73c:	6022      	str	r2, [r4, #0]
 800b73e:	2501      	movs	r5, #1
 800b740:	e7c2      	b.n	800b6c8 <_scanf_float+0x198>
 800b742:	2d03      	cmp	r5, #3
 800b744:	d0e3      	beq.n	800b70e <_scanf_float+0x1de>
 800b746:	2d05      	cmp	r5, #5
 800b748:	e7df      	b.n	800b70a <_scanf_float+0x1da>
 800b74a:	2d02      	cmp	r5, #2
 800b74c:	f47f af23 	bne.w	800b596 <_scanf_float+0x66>
 800b750:	2503      	movs	r5, #3
 800b752:	e7b9      	b.n	800b6c8 <_scanf_float+0x198>
 800b754:	2d06      	cmp	r5, #6
 800b756:	f47f af1e 	bne.w	800b596 <_scanf_float+0x66>
 800b75a:	2507      	movs	r5, #7
 800b75c:	e7b4      	b.n	800b6c8 <_scanf_float+0x198>
 800b75e:	6822      	ldr	r2, [r4, #0]
 800b760:	0591      	lsls	r1, r2, #22
 800b762:	f57f af18 	bpl.w	800b596 <_scanf_float+0x66>
 800b766:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b76a:	6022      	str	r2, [r4, #0]
 800b76c:	9702      	str	r7, [sp, #8]
 800b76e:	e7ab      	b.n	800b6c8 <_scanf_float+0x198>
 800b770:	6822      	ldr	r2, [r4, #0]
 800b772:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b776:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b77a:	d005      	beq.n	800b788 <_scanf_float+0x258>
 800b77c:	0550      	lsls	r0, r2, #21
 800b77e:	f57f af0a 	bpl.w	800b596 <_scanf_float+0x66>
 800b782:	2f00      	cmp	r7, #0
 800b784:	f000 80db 	beq.w	800b93e <_scanf_float+0x40e>
 800b788:	0591      	lsls	r1, r2, #22
 800b78a:	bf58      	it	pl
 800b78c:	9902      	ldrpl	r1, [sp, #8]
 800b78e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b792:	bf58      	it	pl
 800b794:	1a79      	subpl	r1, r7, r1
 800b796:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b79a:	bf58      	it	pl
 800b79c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b7a0:	6022      	str	r2, [r4, #0]
 800b7a2:	2700      	movs	r7, #0
 800b7a4:	e790      	b.n	800b6c8 <_scanf_float+0x198>
 800b7a6:	f04f 0a03 	mov.w	sl, #3
 800b7aa:	e78d      	b.n	800b6c8 <_scanf_float+0x198>
 800b7ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	4798      	blx	r3
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	f43f aedf 	beq.w	800b57a <_scanf_float+0x4a>
 800b7bc:	e6eb      	b.n	800b596 <_scanf_float+0x66>
 800b7be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7c6:	464a      	mov	r2, r9
 800b7c8:	4640      	mov	r0, r8
 800b7ca:	4798      	blx	r3
 800b7cc:	6923      	ldr	r3, [r4, #16]
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	6123      	str	r3, [r4, #16]
 800b7d2:	e6eb      	b.n	800b5ac <_scanf_float+0x7c>
 800b7d4:	1e6b      	subs	r3, r5, #1
 800b7d6:	2b06      	cmp	r3, #6
 800b7d8:	d824      	bhi.n	800b824 <_scanf_float+0x2f4>
 800b7da:	2d02      	cmp	r5, #2
 800b7dc:	d836      	bhi.n	800b84c <_scanf_float+0x31c>
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	429e      	cmp	r6, r3
 800b7e2:	f67f aee7 	bls.w	800b5b4 <_scanf_float+0x84>
 800b7e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7ee:	464a      	mov	r2, r9
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	4798      	blx	r3
 800b7f4:	6923      	ldr	r3, [r4, #16]
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	e7f0      	b.n	800b7de <_scanf_float+0x2ae>
 800b7fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b800:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b804:	464a      	mov	r2, r9
 800b806:	4640      	mov	r0, r8
 800b808:	4798      	blx	r3
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	3b01      	subs	r3, #1
 800b80e:	6123      	str	r3, [r4, #16]
 800b810:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b814:	fa5f fa8a 	uxtb.w	sl, sl
 800b818:	f1ba 0f02 	cmp.w	sl, #2
 800b81c:	d1ee      	bne.n	800b7fc <_scanf_float+0x2cc>
 800b81e:	3d03      	subs	r5, #3
 800b820:	b2ed      	uxtb	r5, r5
 800b822:	1b76      	subs	r6, r6, r5
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	05da      	lsls	r2, r3, #23
 800b828:	d530      	bpl.n	800b88c <_scanf_float+0x35c>
 800b82a:	055b      	lsls	r3, r3, #21
 800b82c:	d511      	bpl.n	800b852 <_scanf_float+0x322>
 800b82e:	9b01      	ldr	r3, [sp, #4]
 800b830:	429e      	cmp	r6, r3
 800b832:	f67f aebf 	bls.w	800b5b4 <_scanf_float+0x84>
 800b836:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b83a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b83e:	464a      	mov	r2, r9
 800b840:	4640      	mov	r0, r8
 800b842:	4798      	blx	r3
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	3b01      	subs	r3, #1
 800b848:	6123      	str	r3, [r4, #16]
 800b84a:	e7f0      	b.n	800b82e <_scanf_float+0x2fe>
 800b84c:	46aa      	mov	sl, r5
 800b84e:	46b3      	mov	fp, r6
 800b850:	e7de      	b.n	800b810 <_scanf_float+0x2e0>
 800b852:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b856:	6923      	ldr	r3, [r4, #16]
 800b858:	2965      	cmp	r1, #101	@ 0x65
 800b85a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b85e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b862:	6123      	str	r3, [r4, #16]
 800b864:	d00c      	beq.n	800b880 <_scanf_float+0x350>
 800b866:	2945      	cmp	r1, #69	@ 0x45
 800b868:	d00a      	beq.n	800b880 <_scanf_float+0x350>
 800b86a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b86e:	464a      	mov	r2, r9
 800b870:	4640      	mov	r0, r8
 800b872:	4798      	blx	r3
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	1eb5      	subs	r5, r6, #2
 800b87e:	6123      	str	r3, [r4, #16]
 800b880:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b884:	464a      	mov	r2, r9
 800b886:	4640      	mov	r0, r8
 800b888:	4798      	blx	r3
 800b88a:	462e      	mov	r6, r5
 800b88c:	6822      	ldr	r2, [r4, #0]
 800b88e:	f012 0210 	ands.w	r2, r2, #16
 800b892:	d001      	beq.n	800b898 <_scanf_float+0x368>
 800b894:	2000      	movs	r0, #0
 800b896:	e68e      	b.n	800b5b6 <_scanf_float+0x86>
 800b898:	7032      	strb	r2, [r6, #0]
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b8a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8a4:	d125      	bne.n	800b8f2 <_scanf_float+0x3c2>
 800b8a6:	9b02      	ldr	r3, [sp, #8]
 800b8a8:	429f      	cmp	r7, r3
 800b8aa:	d00a      	beq.n	800b8c2 <_scanf_float+0x392>
 800b8ac:	1bda      	subs	r2, r3, r7
 800b8ae:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b8b2:	429e      	cmp	r6, r3
 800b8b4:	bf28      	it	cs
 800b8b6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b8ba:	4922      	ldr	r1, [pc, #136]	@ (800b944 <_scanf_float+0x414>)
 800b8bc:	4630      	mov	r0, r6
 800b8be:	f000 f93d 	bl	800bb3c <siprintf>
 800b8c2:	9901      	ldr	r1, [sp, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	f002 fc66 	bl	800e198 <_strtod_r>
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	6821      	ldr	r1, [r4, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f011 0f02 	tst.w	r1, #2
 800b8d6:	ec57 6b10 	vmov	r6, r7, d0
 800b8da:	f103 0204 	add.w	r2, r3, #4
 800b8de:	d015      	beq.n	800b90c <_scanf_float+0x3dc>
 800b8e0:	9903      	ldr	r1, [sp, #12]
 800b8e2:	600a      	str	r2, [r1, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	e9c3 6700 	strd	r6, r7, [r3]
 800b8ea:	68e3      	ldr	r3, [r4, #12]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	60e3      	str	r3, [r4, #12]
 800b8f0:	e7d0      	b.n	800b894 <_scanf_float+0x364>
 800b8f2:	9b04      	ldr	r3, [sp, #16]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d0e4      	beq.n	800b8c2 <_scanf_float+0x392>
 800b8f8:	9905      	ldr	r1, [sp, #20]
 800b8fa:	230a      	movs	r3, #10
 800b8fc:	3101      	adds	r1, #1
 800b8fe:	4640      	mov	r0, r8
 800b900:	f002 fcca 	bl	800e298 <_strtol_r>
 800b904:	9b04      	ldr	r3, [sp, #16]
 800b906:	9e05      	ldr	r6, [sp, #20]
 800b908:	1ac2      	subs	r2, r0, r3
 800b90a:	e7d0      	b.n	800b8ae <_scanf_float+0x37e>
 800b90c:	f011 0f04 	tst.w	r1, #4
 800b910:	9903      	ldr	r1, [sp, #12]
 800b912:	600a      	str	r2, [r1, #0]
 800b914:	d1e6      	bne.n	800b8e4 <_scanf_float+0x3b4>
 800b916:	681d      	ldr	r5, [r3, #0]
 800b918:	4632      	mov	r2, r6
 800b91a:	463b      	mov	r3, r7
 800b91c:	4630      	mov	r0, r6
 800b91e:	4639      	mov	r1, r7
 800b920:	f7f5 f904 	bl	8000b2c <__aeabi_dcmpun>
 800b924:	b128      	cbz	r0, 800b932 <_scanf_float+0x402>
 800b926:	4808      	ldr	r0, [pc, #32]	@ (800b948 <_scanf_float+0x418>)
 800b928:	f000 fa0e 	bl	800bd48 <nanf>
 800b92c:	ed85 0a00 	vstr	s0, [r5]
 800b930:	e7db      	b.n	800b8ea <_scanf_float+0x3ba>
 800b932:	4630      	mov	r0, r6
 800b934:	4639      	mov	r1, r7
 800b936:	f7f5 f957 	bl	8000be8 <__aeabi_d2f>
 800b93a:	6028      	str	r0, [r5, #0]
 800b93c:	e7d5      	b.n	800b8ea <_scanf_float+0x3ba>
 800b93e:	2700      	movs	r7, #0
 800b940:	e62e      	b.n	800b5a0 <_scanf_float+0x70>
 800b942:	bf00      	nop
 800b944:	08013e17 	.word	0x08013e17
 800b948:	08013e57 	.word	0x08013e57

0800b94c <std>:
 800b94c:	2300      	movs	r3, #0
 800b94e:	b510      	push	{r4, lr}
 800b950:	4604      	mov	r4, r0
 800b952:	e9c0 3300 	strd	r3, r3, [r0]
 800b956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b95a:	6083      	str	r3, [r0, #8]
 800b95c:	8181      	strh	r1, [r0, #12]
 800b95e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b960:	81c2      	strh	r2, [r0, #14]
 800b962:	6183      	str	r3, [r0, #24]
 800b964:	4619      	mov	r1, r3
 800b966:	2208      	movs	r2, #8
 800b968:	305c      	adds	r0, #92	@ 0x5c
 800b96a:	f000 f94c 	bl	800bc06 <memset>
 800b96e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a4 <std+0x58>)
 800b970:	6263      	str	r3, [r4, #36]	@ 0x24
 800b972:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a8 <std+0x5c>)
 800b974:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b976:	4b0d      	ldr	r3, [pc, #52]	@ (800b9ac <std+0x60>)
 800b978:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b97a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b0 <std+0x64>)
 800b97c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b97e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b4 <std+0x68>)
 800b980:	6224      	str	r4, [r4, #32]
 800b982:	429c      	cmp	r4, r3
 800b984:	d006      	beq.n	800b994 <std+0x48>
 800b986:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b98a:	4294      	cmp	r4, r2
 800b98c:	d002      	beq.n	800b994 <std+0x48>
 800b98e:	33d0      	adds	r3, #208	@ 0xd0
 800b990:	429c      	cmp	r4, r3
 800b992:	d105      	bne.n	800b9a0 <std+0x54>
 800b994:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b99c:	f000 b9c2 	b.w	800bd24 <__retarget_lock_init_recursive>
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	bf00      	nop
 800b9a4:	0800bb81 	.word	0x0800bb81
 800b9a8:	0800bba3 	.word	0x0800bba3
 800b9ac:	0800bbdb 	.word	0x0800bbdb
 800b9b0:	0800bbff 	.word	0x0800bbff
 800b9b4:	2000f868 	.word	0x2000f868

0800b9b8 <stdio_exit_handler>:
 800b9b8:	4a02      	ldr	r2, [pc, #8]	@ (800b9c4 <stdio_exit_handler+0xc>)
 800b9ba:	4903      	ldr	r1, [pc, #12]	@ (800b9c8 <stdio_exit_handler+0x10>)
 800b9bc:	4803      	ldr	r0, [pc, #12]	@ (800b9cc <stdio_exit_handler+0x14>)
 800b9be:	f000 b869 	b.w	800ba94 <_fwalk_sglue>
 800b9c2:	bf00      	nop
 800b9c4:	20000108 	.word	0x20000108
 800b9c8:	0800e655 	.word	0x0800e655
 800b9cc:	20000118 	.word	0x20000118

0800b9d0 <cleanup_stdio>:
 800b9d0:	6841      	ldr	r1, [r0, #4]
 800b9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800ba04 <cleanup_stdio+0x34>)
 800b9d4:	4299      	cmp	r1, r3
 800b9d6:	b510      	push	{r4, lr}
 800b9d8:	4604      	mov	r4, r0
 800b9da:	d001      	beq.n	800b9e0 <cleanup_stdio+0x10>
 800b9dc:	f002 fe3a 	bl	800e654 <_fflush_r>
 800b9e0:	68a1      	ldr	r1, [r4, #8]
 800b9e2:	4b09      	ldr	r3, [pc, #36]	@ (800ba08 <cleanup_stdio+0x38>)
 800b9e4:	4299      	cmp	r1, r3
 800b9e6:	d002      	beq.n	800b9ee <cleanup_stdio+0x1e>
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f002 fe33 	bl	800e654 <_fflush_r>
 800b9ee:	68e1      	ldr	r1, [r4, #12]
 800b9f0:	4b06      	ldr	r3, [pc, #24]	@ (800ba0c <cleanup_stdio+0x3c>)
 800b9f2:	4299      	cmp	r1, r3
 800b9f4:	d004      	beq.n	800ba00 <cleanup_stdio+0x30>
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9fc:	f002 be2a 	b.w	800e654 <_fflush_r>
 800ba00:	bd10      	pop	{r4, pc}
 800ba02:	bf00      	nop
 800ba04:	2000f868 	.word	0x2000f868
 800ba08:	2000f8d0 	.word	0x2000f8d0
 800ba0c:	2000f938 	.word	0x2000f938

0800ba10 <global_stdio_init.part.0>:
 800ba10:	b510      	push	{r4, lr}
 800ba12:	4b0b      	ldr	r3, [pc, #44]	@ (800ba40 <global_stdio_init.part.0+0x30>)
 800ba14:	4c0b      	ldr	r4, [pc, #44]	@ (800ba44 <global_stdio_init.part.0+0x34>)
 800ba16:	4a0c      	ldr	r2, [pc, #48]	@ (800ba48 <global_stdio_init.part.0+0x38>)
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2104      	movs	r1, #4
 800ba20:	f7ff ff94 	bl	800b94c <std>
 800ba24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba28:	2201      	movs	r2, #1
 800ba2a:	2109      	movs	r1, #9
 800ba2c:	f7ff ff8e 	bl	800b94c <std>
 800ba30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba34:	2202      	movs	r2, #2
 800ba36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba3a:	2112      	movs	r1, #18
 800ba3c:	f7ff bf86 	b.w	800b94c <std>
 800ba40:	2000f9a0 	.word	0x2000f9a0
 800ba44:	2000f868 	.word	0x2000f868
 800ba48:	0800b9b9 	.word	0x0800b9b9

0800ba4c <__sfp_lock_acquire>:
 800ba4c:	4801      	ldr	r0, [pc, #4]	@ (800ba54 <__sfp_lock_acquire+0x8>)
 800ba4e:	f000 b96a 	b.w	800bd26 <__retarget_lock_acquire_recursive>
 800ba52:	bf00      	nop
 800ba54:	2000f9a9 	.word	0x2000f9a9

0800ba58 <__sfp_lock_release>:
 800ba58:	4801      	ldr	r0, [pc, #4]	@ (800ba60 <__sfp_lock_release+0x8>)
 800ba5a:	f000 b965 	b.w	800bd28 <__retarget_lock_release_recursive>
 800ba5e:	bf00      	nop
 800ba60:	2000f9a9 	.word	0x2000f9a9

0800ba64 <__sinit>:
 800ba64:	b510      	push	{r4, lr}
 800ba66:	4604      	mov	r4, r0
 800ba68:	f7ff fff0 	bl	800ba4c <__sfp_lock_acquire>
 800ba6c:	6a23      	ldr	r3, [r4, #32]
 800ba6e:	b11b      	cbz	r3, 800ba78 <__sinit+0x14>
 800ba70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba74:	f7ff bff0 	b.w	800ba58 <__sfp_lock_release>
 800ba78:	4b04      	ldr	r3, [pc, #16]	@ (800ba8c <__sinit+0x28>)
 800ba7a:	6223      	str	r3, [r4, #32]
 800ba7c:	4b04      	ldr	r3, [pc, #16]	@ (800ba90 <__sinit+0x2c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1f5      	bne.n	800ba70 <__sinit+0xc>
 800ba84:	f7ff ffc4 	bl	800ba10 <global_stdio_init.part.0>
 800ba88:	e7f2      	b.n	800ba70 <__sinit+0xc>
 800ba8a:	bf00      	nop
 800ba8c:	0800b9d1 	.word	0x0800b9d1
 800ba90:	2000f9a0 	.word	0x2000f9a0

0800ba94 <_fwalk_sglue>:
 800ba94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba98:	4607      	mov	r7, r0
 800ba9a:	4688      	mov	r8, r1
 800ba9c:	4614      	mov	r4, r2
 800ba9e:	2600      	movs	r6, #0
 800baa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800baa4:	f1b9 0901 	subs.w	r9, r9, #1
 800baa8:	d505      	bpl.n	800bab6 <_fwalk_sglue+0x22>
 800baaa:	6824      	ldr	r4, [r4, #0]
 800baac:	2c00      	cmp	r4, #0
 800baae:	d1f7      	bne.n	800baa0 <_fwalk_sglue+0xc>
 800bab0:	4630      	mov	r0, r6
 800bab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bab6:	89ab      	ldrh	r3, [r5, #12]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d907      	bls.n	800bacc <_fwalk_sglue+0x38>
 800babc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bac0:	3301      	adds	r3, #1
 800bac2:	d003      	beq.n	800bacc <_fwalk_sglue+0x38>
 800bac4:	4629      	mov	r1, r5
 800bac6:	4638      	mov	r0, r7
 800bac8:	47c0      	blx	r8
 800baca:	4306      	orrs	r6, r0
 800bacc:	3568      	adds	r5, #104	@ 0x68
 800bace:	e7e9      	b.n	800baa4 <_fwalk_sglue+0x10>

0800bad0 <sniprintf>:
 800bad0:	b40c      	push	{r2, r3}
 800bad2:	b530      	push	{r4, r5, lr}
 800bad4:	4b18      	ldr	r3, [pc, #96]	@ (800bb38 <sniprintf+0x68>)
 800bad6:	1e0c      	subs	r4, r1, #0
 800bad8:	681d      	ldr	r5, [r3, #0]
 800bada:	b09d      	sub	sp, #116	@ 0x74
 800badc:	da08      	bge.n	800baf0 <sniprintf+0x20>
 800bade:	238b      	movs	r3, #139	@ 0x8b
 800bae0:	602b      	str	r3, [r5, #0]
 800bae2:	f04f 30ff 	mov.w	r0, #4294967295
 800bae6:	b01d      	add	sp, #116	@ 0x74
 800bae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800baec:	b002      	add	sp, #8
 800baee:	4770      	bx	lr
 800baf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800baf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800baf8:	f04f 0300 	mov.w	r3, #0
 800bafc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bafe:	bf14      	ite	ne
 800bb00:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb04:	4623      	moveq	r3, r4
 800bb06:	9304      	str	r3, [sp, #16]
 800bb08:	9307      	str	r3, [sp, #28]
 800bb0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb0e:	9002      	str	r0, [sp, #8]
 800bb10:	9006      	str	r0, [sp, #24]
 800bb12:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb16:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb18:	ab21      	add	r3, sp, #132	@ 0x84
 800bb1a:	a902      	add	r1, sp, #8
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	9301      	str	r3, [sp, #4]
 800bb20:	f002 fc18 	bl	800e354 <_svfiprintf_r>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	bfbc      	itt	lt
 800bb28:	238b      	movlt	r3, #139	@ 0x8b
 800bb2a:	602b      	strlt	r3, [r5, #0]
 800bb2c:	2c00      	cmp	r4, #0
 800bb2e:	d0da      	beq.n	800bae6 <sniprintf+0x16>
 800bb30:	9b02      	ldr	r3, [sp, #8]
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
 800bb36:	e7d6      	b.n	800bae6 <sniprintf+0x16>
 800bb38:	20000114 	.word	0x20000114

0800bb3c <siprintf>:
 800bb3c:	b40e      	push	{r1, r2, r3}
 800bb3e:	b510      	push	{r4, lr}
 800bb40:	b09d      	sub	sp, #116	@ 0x74
 800bb42:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bb44:	9002      	str	r0, [sp, #8]
 800bb46:	9006      	str	r0, [sp, #24]
 800bb48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb4c:	480a      	ldr	r0, [pc, #40]	@ (800bb78 <siprintf+0x3c>)
 800bb4e:	9107      	str	r1, [sp, #28]
 800bb50:	9104      	str	r1, [sp, #16]
 800bb52:	490a      	ldr	r1, [pc, #40]	@ (800bb7c <siprintf+0x40>)
 800bb54:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb58:	9105      	str	r1, [sp, #20]
 800bb5a:	2400      	movs	r4, #0
 800bb5c:	a902      	add	r1, sp, #8
 800bb5e:	6800      	ldr	r0, [r0, #0]
 800bb60:	9301      	str	r3, [sp, #4]
 800bb62:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bb64:	f002 fbf6 	bl	800e354 <_svfiprintf_r>
 800bb68:	9b02      	ldr	r3, [sp, #8]
 800bb6a:	701c      	strb	r4, [r3, #0]
 800bb6c:	b01d      	add	sp, #116	@ 0x74
 800bb6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb72:	b003      	add	sp, #12
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	20000114 	.word	0x20000114
 800bb7c:	ffff0208 	.word	0xffff0208

0800bb80 <__sread>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	460c      	mov	r4, r1
 800bb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb88:	f000 f87e 	bl	800bc88 <_read_r>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	bfab      	itete	ge
 800bb90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bb92:	89a3      	ldrhlt	r3, [r4, #12]
 800bb94:	181b      	addge	r3, r3, r0
 800bb96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bb9a:	bfac      	ite	ge
 800bb9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bb9e:	81a3      	strhlt	r3, [r4, #12]
 800bba0:	bd10      	pop	{r4, pc}

0800bba2 <__swrite>:
 800bba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba6:	461f      	mov	r7, r3
 800bba8:	898b      	ldrh	r3, [r1, #12]
 800bbaa:	05db      	lsls	r3, r3, #23
 800bbac:	4605      	mov	r5, r0
 800bbae:	460c      	mov	r4, r1
 800bbb0:	4616      	mov	r6, r2
 800bbb2:	d505      	bpl.n	800bbc0 <__swrite+0x1e>
 800bbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb8:	2302      	movs	r3, #2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f000 f852 	bl	800bc64 <_lseek_r>
 800bbc0:	89a3      	ldrh	r3, [r4, #12]
 800bbc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bbca:	81a3      	strh	r3, [r4, #12]
 800bbcc:	4632      	mov	r2, r6
 800bbce:	463b      	mov	r3, r7
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd6:	f000 b869 	b.w	800bcac <_write_r>

0800bbda <__sseek>:
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	460c      	mov	r4, r1
 800bbde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe2:	f000 f83f 	bl	800bc64 <_lseek_r>
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	bf15      	itete	ne
 800bbec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bbee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bbf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bbf6:	81a3      	strheq	r3, [r4, #12]
 800bbf8:	bf18      	it	ne
 800bbfa:	81a3      	strhne	r3, [r4, #12]
 800bbfc:	bd10      	pop	{r4, pc}

0800bbfe <__sclose>:
 800bbfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc02:	f000 b81f 	b.w	800bc44 <_close_r>

0800bc06 <memset>:
 800bc06:	4402      	add	r2, r0
 800bc08:	4603      	mov	r3, r0
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d100      	bne.n	800bc10 <memset+0xa>
 800bc0e:	4770      	bx	lr
 800bc10:	f803 1b01 	strb.w	r1, [r3], #1
 800bc14:	e7f9      	b.n	800bc0a <memset+0x4>

0800bc16 <strncat>:
 800bc16:	b530      	push	{r4, r5, lr}
 800bc18:	4604      	mov	r4, r0
 800bc1a:	7825      	ldrb	r5, [r4, #0]
 800bc1c:	4623      	mov	r3, r4
 800bc1e:	3401      	adds	r4, #1
 800bc20:	2d00      	cmp	r5, #0
 800bc22:	d1fa      	bne.n	800bc1a <strncat+0x4>
 800bc24:	3a01      	subs	r2, #1
 800bc26:	d304      	bcc.n	800bc32 <strncat+0x1c>
 800bc28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc2c:	f803 4b01 	strb.w	r4, [r3], #1
 800bc30:	b904      	cbnz	r4, 800bc34 <strncat+0x1e>
 800bc32:	bd30      	pop	{r4, r5, pc}
 800bc34:	2a00      	cmp	r2, #0
 800bc36:	d1f5      	bne.n	800bc24 <strncat+0xe>
 800bc38:	701a      	strb	r2, [r3, #0]
 800bc3a:	e7f3      	b.n	800bc24 <strncat+0xe>

0800bc3c <_localeconv_r>:
 800bc3c:	4800      	ldr	r0, [pc, #0]	@ (800bc40 <_localeconv_r+0x4>)
 800bc3e:	4770      	bx	lr
 800bc40:	20000254 	.word	0x20000254

0800bc44 <_close_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d06      	ldr	r5, [pc, #24]	@ (800bc60 <_close_r+0x1c>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	602b      	str	r3, [r5, #0]
 800bc50:	f7f6 f9ee 	bl	8002030 <_close>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_close_r+0x1a>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_close_r+0x1a>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	2000f9a4 	.word	0x2000f9a4

0800bc64 <_lseek_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d07      	ldr	r5, [pc, #28]	@ (800bc84 <_lseek_r+0x20>)
 800bc68:	4604      	mov	r4, r0
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	2200      	movs	r2, #0
 800bc70:	602a      	str	r2, [r5, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f7f6 fa03 	bl	800207e <_lseek>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_lseek_r+0x1e>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_lseek_r+0x1e>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	2000f9a4 	.word	0x2000f9a4

0800bc88 <_read_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	@ (800bca8 <_read_r+0x20>)
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	4608      	mov	r0, r1
 800bc90:	4611      	mov	r1, r2
 800bc92:	2200      	movs	r2, #0
 800bc94:	602a      	str	r2, [r5, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f7f6 f991 	bl	8001fbe <_read>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_read_r+0x1e>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_read_r+0x1e>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	2000f9a4 	.word	0x2000f9a4

0800bcac <_write_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d07      	ldr	r5, [pc, #28]	@ (800bccc <_write_r+0x20>)
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	4608      	mov	r0, r1
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	602a      	str	r2, [r5, #0]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	f7f6 f99c 	bl	8001ff8 <_write>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d102      	bne.n	800bcca <_write_r+0x1e>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b103      	cbz	r3, 800bcca <_write_r+0x1e>
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	2000f9a4 	.word	0x2000f9a4

0800bcd0 <__errno>:
 800bcd0:	4b01      	ldr	r3, [pc, #4]	@ (800bcd8 <__errno+0x8>)
 800bcd2:	6818      	ldr	r0, [r3, #0]
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	20000114 	.word	0x20000114

0800bcdc <__libc_init_array>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	4d0d      	ldr	r5, [pc, #52]	@ (800bd14 <__libc_init_array+0x38>)
 800bce0:	4c0d      	ldr	r4, [pc, #52]	@ (800bd18 <__libc_init_array+0x3c>)
 800bce2:	1b64      	subs	r4, r4, r5
 800bce4:	10a4      	asrs	r4, r4, #2
 800bce6:	2600      	movs	r6, #0
 800bce8:	42a6      	cmp	r6, r4
 800bcea:	d109      	bne.n	800bd00 <__libc_init_array+0x24>
 800bcec:	4d0b      	ldr	r5, [pc, #44]	@ (800bd1c <__libc_init_array+0x40>)
 800bcee:	4c0c      	ldr	r4, [pc, #48]	@ (800bd20 <__libc_init_array+0x44>)
 800bcf0:	f003 fb96 	bl	800f420 <_init>
 800bcf4:	1b64      	subs	r4, r4, r5
 800bcf6:	10a4      	asrs	r4, r4, #2
 800bcf8:	2600      	movs	r6, #0
 800bcfa:	42a6      	cmp	r6, r4
 800bcfc:	d105      	bne.n	800bd0a <__libc_init_array+0x2e>
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}
 800bd00:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd04:	4798      	blx	r3
 800bd06:	3601      	adds	r6, #1
 800bd08:	e7ee      	b.n	800bce8 <__libc_init_array+0xc>
 800bd0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd0e:	4798      	blx	r3
 800bd10:	3601      	adds	r6, #1
 800bd12:	e7f2      	b.n	800bcfa <__libc_init_array+0x1e>
 800bd14:	080141fc 	.word	0x080141fc
 800bd18:	080141fc 	.word	0x080141fc
 800bd1c:	080141fc 	.word	0x080141fc
 800bd20:	08014200 	.word	0x08014200

0800bd24 <__retarget_lock_init_recursive>:
 800bd24:	4770      	bx	lr

0800bd26 <__retarget_lock_acquire_recursive>:
 800bd26:	4770      	bx	lr

0800bd28 <__retarget_lock_release_recursive>:
 800bd28:	4770      	bx	lr

0800bd2a <memcpy>:
 800bd2a:	440a      	add	r2, r1
 800bd2c:	4291      	cmp	r1, r2
 800bd2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd32:	d100      	bne.n	800bd36 <memcpy+0xc>
 800bd34:	4770      	bx	lr
 800bd36:	b510      	push	{r4, lr}
 800bd38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd40:	4291      	cmp	r1, r2
 800bd42:	d1f9      	bne.n	800bd38 <memcpy+0xe>
 800bd44:	bd10      	pop	{r4, pc}
	...

0800bd48 <nanf>:
 800bd48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bd50 <nanf+0x8>
 800bd4c:	4770      	bx	lr
 800bd4e:	bf00      	nop
 800bd50:	7fc00000 	.word	0x7fc00000

0800bd54 <__assert_func>:
 800bd54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd56:	4614      	mov	r4, r2
 800bd58:	461a      	mov	r2, r3
 800bd5a:	4b09      	ldr	r3, [pc, #36]	@ (800bd80 <__assert_func+0x2c>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4605      	mov	r5, r0
 800bd60:	68d8      	ldr	r0, [r3, #12]
 800bd62:	b14c      	cbz	r4, 800bd78 <__assert_func+0x24>
 800bd64:	4b07      	ldr	r3, [pc, #28]	@ (800bd84 <__assert_func+0x30>)
 800bd66:	9100      	str	r1, [sp, #0]
 800bd68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd6c:	4906      	ldr	r1, [pc, #24]	@ (800bd88 <__assert_func+0x34>)
 800bd6e:	462b      	mov	r3, r5
 800bd70:	f002 fc98 	bl	800e6a4 <fiprintf>
 800bd74:	f002 fcec 	bl	800e750 <abort>
 800bd78:	4b04      	ldr	r3, [pc, #16]	@ (800bd8c <__assert_func+0x38>)
 800bd7a:	461c      	mov	r4, r3
 800bd7c:	e7f3      	b.n	800bd66 <__assert_func+0x12>
 800bd7e:	bf00      	nop
 800bd80:	20000114 	.word	0x20000114
 800bd84:	08013e1c 	.word	0x08013e1c
 800bd88:	08013e29 	.word	0x08013e29
 800bd8c:	08013e57 	.word	0x08013e57

0800bd90 <quorem>:
 800bd90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd94:	6903      	ldr	r3, [r0, #16]
 800bd96:	690c      	ldr	r4, [r1, #16]
 800bd98:	42a3      	cmp	r3, r4
 800bd9a:	4607      	mov	r7, r0
 800bd9c:	db7e      	blt.n	800be9c <quorem+0x10c>
 800bd9e:	3c01      	subs	r4, #1
 800bda0:	f101 0814 	add.w	r8, r1, #20
 800bda4:	00a3      	lsls	r3, r4, #2
 800bda6:	f100 0514 	add.w	r5, r0, #20
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdb0:	9301      	str	r3, [sp, #4]
 800bdb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdc2:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdc6:	d32e      	bcc.n	800be26 <quorem+0x96>
 800bdc8:	f04f 0a00 	mov.w	sl, #0
 800bdcc:	46c4      	mov	ip, r8
 800bdce:	46ae      	mov	lr, r5
 800bdd0:	46d3      	mov	fp, sl
 800bdd2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdd6:	b298      	uxth	r0, r3
 800bdd8:	fb06 a000 	mla	r0, r6, r0, sl
 800bddc:	0c02      	lsrs	r2, r0, #16
 800bdde:	0c1b      	lsrs	r3, r3, #16
 800bde0:	fb06 2303 	mla	r3, r6, r3, r2
 800bde4:	f8de 2000 	ldr.w	r2, [lr]
 800bde8:	b280      	uxth	r0, r0
 800bdea:	b292      	uxth	r2, r2
 800bdec:	1a12      	subs	r2, r2, r0
 800bdee:	445a      	add	r2, fp
 800bdf0:	f8de 0000 	ldr.w	r0, [lr]
 800bdf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bdfe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800be02:	b292      	uxth	r2, r2
 800be04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800be08:	45e1      	cmp	r9, ip
 800be0a:	f84e 2b04 	str.w	r2, [lr], #4
 800be0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be12:	d2de      	bcs.n	800bdd2 <quorem+0x42>
 800be14:	9b00      	ldr	r3, [sp, #0]
 800be16:	58eb      	ldr	r3, [r5, r3]
 800be18:	b92b      	cbnz	r3, 800be26 <quorem+0x96>
 800be1a:	9b01      	ldr	r3, [sp, #4]
 800be1c:	3b04      	subs	r3, #4
 800be1e:	429d      	cmp	r5, r3
 800be20:	461a      	mov	r2, r3
 800be22:	d32f      	bcc.n	800be84 <quorem+0xf4>
 800be24:	613c      	str	r4, [r7, #16]
 800be26:	4638      	mov	r0, r7
 800be28:	f001 f9c6 	bl	800d1b8 <__mcmp>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	db25      	blt.n	800be7c <quorem+0xec>
 800be30:	4629      	mov	r1, r5
 800be32:	2000      	movs	r0, #0
 800be34:	f858 2b04 	ldr.w	r2, [r8], #4
 800be38:	f8d1 c000 	ldr.w	ip, [r1]
 800be3c:	fa1f fe82 	uxth.w	lr, r2
 800be40:	fa1f f38c 	uxth.w	r3, ip
 800be44:	eba3 030e 	sub.w	r3, r3, lr
 800be48:	4403      	add	r3, r0
 800be4a:	0c12      	lsrs	r2, r2, #16
 800be4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be54:	b29b      	uxth	r3, r3
 800be56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be5a:	45c1      	cmp	r9, r8
 800be5c:	f841 3b04 	str.w	r3, [r1], #4
 800be60:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be64:	d2e6      	bcs.n	800be34 <quorem+0xa4>
 800be66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be6e:	b922      	cbnz	r2, 800be7a <quorem+0xea>
 800be70:	3b04      	subs	r3, #4
 800be72:	429d      	cmp	r5, r3
 800be74:	461a      	mov	r2, r3
 800be76:	d30b      	bcc.n	800be90 <quorem+0x100>
 800be78:	613c      	str	r4, [r7, #16]
 800be7a:	3601      	adds	r6, #1
 800be7c:	4630      	mov	r0, r6
 800be7e:	b003      	add	sp, #12
 800be80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be84:	6812      	ldr	r2, [r2, #0]
 800be86:	3b04      	subs	r3, #4
 800be88:	2a00      	cmp	r2, #0
 800be8a:	d1cb      	bne.n	800be24 <quorem+0x94>
 800be8c:	3c01      	subs	r4, #1
 800be8e:	e7c6      	b.n	800be1e <quorem+0x8e>
 800be90:	6812      	ldr	r2, [r2, #0]
 800be92:	3b04      	subs	r3, #4
 800be94:	2a00      	cmp	r2, #0
 800be96:	d1ef      	bne.n	800be78 <quorem+0xe8>
 800be98:	3c01      	subs	r4, #1
 800be9a:	e7ea      	b.n	800be72 <quorem+0xe2>
 800be9c:	2000      	movs	r0, #0
 800be9e:	e7ee      	b.n	800be7e <quorem+0xee>

0800bea0 <_dtoa_r>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	69c7      	ldr	r7, [r0, #28]
 800bea6:	b097      	sub	sp, #92	@ 0x5c
 800bea8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800beac:	ec55 4b10 	vmov	r4, r5, d0
 800beb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800beb2:	9107      	str	r1, [sp, #28]
 800beb4:	4681      	mov	r9, r0
 800beb6:	920c      	str	r2, [sp, #48]	@ 0x30
 800beb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800beba:	b97f      	cbnz	r7, 800bedc <_dtoa_r+0x3c>
 800bebc:	2010      	movs	r0, #16
 800bebe:	f000 fe09 	bl	800cad4 <malloc>
 800bec2:	4602      	mov	r2, r0
 800bec4:	f8c9 001c 	str.w	r0, [r9, #28]
 800bec8:	b920      	cbnz	r0, 800bed4 <_dtoa_r+0x34>
 800beca:	4ba9      	ldr	r3, [pc, #676]	@ (800c170 <_dtoa_r+0x2d0>)
 800becc:	21ef      	movs	r1, #239	@ 0xef
 800bece:	48a9      	ldr	r0, [pc, #676]	@ (800c174 <_dtoa_r+0x2d4>)
 800bed0:	f7ff ff40 	bl	800bd54 <__assert_func>
 800bed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bed8:	6007      	str	r7, [r0, #0]
 800beda:	60c7      	str	r7, [r0, #12]
 800bedc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bee0:	6819      	ldr	r1, [r3, #0]
 800bee2:	b159      	cbz	r1, 800befc <_dtoa_r+0x5c>
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	604a      	str	r2, [r1, #4]
 800bee8:	2301      	movs	r3, #1
 800beea:	4093      	lsls	r3, r2
 800beec:	608b      	str	r3, [r1, #8]
 800beee:	4648      	mov	r0, r9
 800bef0:	f000 fee6 	bl	800ccc0 <_Bfree>
 800bef4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]
 800befc:	1e2b      	subs	r3, r5, #0
 800befe:	bfb9      	ittee	lt
 800bf00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bf04:	9305      	strlt	r3, [sp, #20]
 800bf06:	2300      	movge	r3, #0
 800bf08:	6033      	strge	r3, [r6, #0]
 800bf0a:	9f05      	ldr	r7, [sp, #20]
 800bf0c:	4b9a      	ldr	r3, [pc, #616]	@ (800c178 <_dtoa_r+0x2d8>)
 800bf0e:	bfbc      	itt	lt
 800bf10:	2201      	movlt	r2, #1
 800bf12:	6032      	strlt	r2, [r6, #0]
 800bf14:	43bb      	bics	r3, r7
 800bf16:	d112      	bne.n	800bf3e <_dtoa_r+0x9e>
 800bf18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf1e:	6013      	str	r3, [r2, #0]
 800bf20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf24:	4323      	orrs	r3, r4
 800bf26:	f000 855a 	beq.w	800c9de <_dtoa_r+0xb3e>
 800bf2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c18c <_dtoa_r+0x2ec>
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 855c 	beq.w	800c9ee <_dtoa_r+0xb4e>
 800bf36:	f10a 0303 	add.w	r3, sl, #3
 800bf3a:	f000 bd56 	b.w	800c9ea <_dtoa_r+0xb4a>
 800bf3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf42:	2200      	movs	r2, #0
 800bf44:	ec51 0b17 	vmov	r0, r1, d7
 800bf48:	2300      	movs	r3, #0
 800bf4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bf4e:	f7f4 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf52:	4680      	mov	r8, r0
 800bf54:	b158      	cbz	r0, 800bf6e <_dtoa_r+0xce>
 800bf56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf58:	2301      	movs	r3, #1
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf5e:	b113      	cbz	r3, 800bf66 <_dtoa_r+0xc6>
 800bf60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bf62:	4b86      	ldr	r3, [pc, #536]	@ (800c17c <_dtoa_r+0x2dc>)
 800bf64:	6013      	str	r3, [r2, #0]
 800bf66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c190 <_dtoa_r+0x2f0>
 800bf6a:	f000 bd40 	b.w	800c9ee <_dtoa_r+0xb4e>
 800bf6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bf72:	aa14      	add	r2, sp, #80	@ 0x50
 800bf74:	a915      	add	r1, sp, #84	@ 0x54
 800bf76:	4648      	mov	r0, r9
 800bf78:	f001 fa3e 	bl	800d3f8 <__d2b>
 800bf7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf80:	9002      	str	r0, [sp, #8]
 800bf82:	2e00      	cmp	r6, #0
 800bf84:	d078      	beq.n	800c078 <_dtoa_r+0x1d8>
 800bf86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bf8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4b76      	ldr	r3, [pc, #472]	@ (800c180 <_dtoa_r+0x2e0>)
 800bfa6:	f7f4 f96f 	bl	8000288 <__aeabi_dsub>
 800bfaa:	a36b      	add	r3, pc, #428	@ (adr r3, 800c158 <_dtoa_r+0x2b8>)
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	f7f4 fb22 	bl	80005f8 <__aeabi_dmul>
 800bfb4:	a36a      	add	r3, pc, #424	@ (adr r3, 800c160 <_dtoa_r+0x2c0>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	f7f4 f967 	bl	800028c <__adddf3>
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	f7f4 faae 	bl	8000524 <__aeabi_i2d>
 800bfc8:	a367      	add	r3, pc, #412	@ (adr r3, 800c168 <_dtoa_r+0x2c8>)
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f7f4 fb13 	bl	80005f8 <__aeabi_dmul>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	4629      	mov	r1, r5
 800bfda:	f7f4 f957 	bl	800028c <__adddf3>
 800bfde:	4604      	mov	r4, r0
 800bfe0:	460d      	mov	r5, r1
 800bfe2:	f7f4 fdb9 	bl	8000b58 <__aeabi_d2iz>
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	4607      	mov	r7, r0
 800bfea:	2300      	movs	r3, #0
 800bfec:	4620      	mov	r0, r4
 800bfee:	4629      	mov	r1, r5
 800bff0:	f7f4 fd74 	bl	8000adc <__aeabi_dcmplt>
 800bff4:	b140      	cbz	r0, 800c008 <_dtoa_r+0x168>
 800bff6:	4638      	mov	r0, r7
 800bff8:	f7f4 fa94 	bl	8000524 <__aeabi_i2d>
 800bffc:	4622      	mov	r2, r4
 800bffe:	462b      	mov	r3, r5
 800c000:	f7f4 fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 800c004:	b900      	cbnz	r0, 800c008 <_dtoa_r+0x168>
 800c006:	3f01      	subs	r7, #1
 800c008:	2f16      	cmp	r7, #22
 800c00a:	d852      	bhi.n	800c0b2 <_dtoa_r+0x212>
 800c00c:	4b5d      	ldr	r3, [pc, #372]	@ (800c184 <_dtoa_r+0x2e4>)
 800c00e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c01a:	f7f4 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d049      	beq.n	800c0b6 <_dtoa_r+0x216>
 800c022:	3f01      	subs	r7, #1
 800c024:	2300      	movs	r3, #0
 800c026:	9310      	str	r3, [sp, #64]	@ 0x40
 800c028:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c02a:	1b9b      	subs	r3, r3, r6
 800c02c:	1e5a      	subs	r2, r3, #1
 800c02e:	bf45      	ittet	mi
 800c030:	f1c3 0301 	rsbmi	r3, r3, #1
 800c034:	9300      	strmi	r3, [sp, #0]
 800c036:	2300      	movpl	r3, #0
 800c038:	2300      	movmi	r3, #0
 800c03a:	9206      	str	r2, [sp, #24]
 800c03c:	bf54      	ite	pl
 800c03e:	9300      	strpl	r3, [sp, #0]
 800c040:	9306      	strmi	r3, [sp, #24]
 800c042:	2f00      	cmp	r7, #0
 800c044:	db39      	blt.n	800c0ba <_dtoa_r+0x21a>
 800c046:	9b06      	ldr	r3, [sp, #24]
 800c048:	970d      	str	r7, [sp, #52]	@ 0x34
 800c04a:	443b      	add	r3, r7
 800c04c:	9306      	str	r3, [sp, #24]
 800c04e:	2300      	movs	r3, #0
 800c050:	9308      	str	r3, [sp, #32]
 800c052:	9b07      	ldr	r3, [sp, #28]
 800c054:	2b09      	cmp	r3, #9
 800c056:	d863      	bhi.n	800c120 <_dtoa_r+0x280>
 800c058:	2b05      	cmp	r3, #5
 800c05a:	bfc4      	itt	gt
 800c05c:	3b04      	subgt	r3, #4
 800c05e:	9307      	strgt	r3, [sp, #28]
 800c060:	9b07      	ldr	r3, [sp, #28]
 800c062:	f1a3 0302 	sub.w	r3, r3, #2
 800c066:	bfcc      	ite	gt
 800c068:	2400      	movgt	r4, #0
 800c06a:	2401      	movle	r4, #1
 800c06c:	2b03      	cmp	r3, #3
 800c06e:	d863      	bhi.n	800c138 <_dtoa_r+0x298>
 800c070:	e8df f003 	tbb	[pc, r3]
 800c074:	2b375452 	.word	0x2b375452
 800c078:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c07c:	441e      	add	r6, r3
 800c07e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c082:	2b20      	cmp	r3, #32
 800c084:	bfc1      	itttt	gt
 800c086:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c08a:	409f      	lslgt	r7, r3
 800c08c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c090:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c094:	bfd6      	itet	le
 800c096:	f1c3 0320 	rsble	r3, r3, #32
 800c09a:	ea47 0003 	orrgt.w	r0, r7, r3
 800c09e:	fa04 f003 	lslle.w	r0, r4, r3
 800c0a2:	f7f4 fa2f 	bl	8000504 <__aeabi_ui2d>
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c0ac:	3e01      	subs	r6, #1
 800c0ae:	9212      	str	r2, [sp, #72]	@ 0x48
 800c0b0:	e776      	b.n	800bfa0 <_dtoa_r+0x100>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e7b7      	b.n	800c026 <_dtoa_r+0x186>
 800c0b6:	9010      	str	r0, [sp, #64]	@ 0x40
 800c0b8:	e7b6      	b.n	800c028 <_dtoa_r+0x188>
 800c0ba:	9b00      	ldr	r3, [sp, #0]
 800c0bc:	1bdb      	subs	r3, r3, r7
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	427b      	negs	r3, r7
 800c0c2:	9308      	str	r3, [sp, #32]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0c8:	e7c3      	b.n	800c052 <_dtoa_r+0x1b2>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0d0:	eb07 0b03 	add.w	fp, r7, r3
 800c0d4:	f10b 0301 	add.w	r3, fp, #1
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	9303      	str	r3, [sp, #12]
 800c0dc:	bfb8      	it	lt
 800c0de:	2301      	movlt	r3, #1
 800c0e0:	e006      	b.n	800c0f0 <_dtoa_r+0x250>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dd28      	ble.n	800c13e <_dtoa_r+0x29e>
 800c0ec:	469b      	mov	fp, r3
 800c0ee:	9303      	str	r3, [sp, #12]
 800c0f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	2204      	movs	r2, #4
 800c0f8:	f102 0514 	add.w	r5, r2, #20
 800c0fc:	429d      	cmp	r5, r3
 800c0fe:	d926      	bls.n	800c14e <_dtoa_r+0x2ae>
 800c100:	6041      	str	r1, [r0, #4]
 800c102:	4648      	mov	r0, r9
 800c104:	f000 fd9c 	bl	800cc40 <_Balloc>
 800c108:	4682      	mov	sl, r0
 800c10a:	2800      	cmp	r0, #0
 800c10c:	d142      	bne.n	800c194 <_dtoa_r+0x2f4>
 800c10e:	4b1e      	ldr	r3, [pc, #120]	@ (800c188 <_dtoa_r+0x2e8>)
 800c110:	4602      	mov	r2, r0
 800c112:	f240 11af 	movw	r1, #431	@ 0x1af
 800c116:	e6da      	b.n	800bece <_dtoa_r+0x2e>
 800c118:	2300      	movs	r3, #0
 800c11a:	e7e3      	b.n	800c0e4 <_dtoa_r+0x244>
 800c11c:	2300      	movs	r3, #0
 800c11e:	e7d5      	b.n	800c0cc <_dtoa_r+0x22c>
 800c120:	2401      	movs	r4, #1
 800c122:	2300      	movs	r3, #0
 800c124:	9307      	str	r3, [sp, #28]
 800c126:	9409      	str	r4, [sp, #36]	@ 0x24
 800c128:	f04f 3bff 	mov.w	fp, #4294967295
 800c12c:	2200      	movs	r2, #0
 800c12e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c132:	2312      	movs	r3, #18
 800c134:	920c      	str	r2, [sp, #48]	@ 0x30
 800c136:	e7db      	b.n	800c0f0 <_dtoa_r+0x250>
 800c138:	2301      	movs	r3, #1
 800c13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c13c:	e7f4      	b.n	800c128 <_dtoa_r+0x288>
 800c13e:	f04f 0b01 	mov.w	fp, #1
 800c142:	f8cd b00c 	str.w	fp, [sp, #12]
 800c146:	465b      	mov	r3, fp
 800c148:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c14c:	e7d0      	b.n	800c0f0 <_dtoa_r+0x250>
 800c14e:	3101      	adds	r1, #1
 800c150:	0052      	lsls	r2, r2, #1
 800c152:	e7d1      	b.n	800c0f8 <_dtoa_r+0x258>
 800c154:	f3af 8000 	nop.w
 800c158:	636f4361 	.word	0x636f4361
 800c15c:	3fd287a7 	.word	0x3fd287a7
 800c160:	8b60c8b3 	.word	0x8b60c8b3
 800c164:	3fc68a28 	.word	0x3fc68a28
 800c168:	509f79fb 	.word	0x509f79fb
 800c16c:	3fd34413 	.word	0x3fd34413
 800c170:	08013d74 	.word	0x08013d74
 800c174:	08013e65 	.word	0x08013e65
 800c178:	7ff00000 	.word	0x7ff00000
 800c17c:	08013df4 	.word	0x08013df4
 800c180:	3ff80000 	.word	0x3ff80000
 800c184:	08013fd8 	.word	0x08013fd8
 800c188:	08013ebd 	.word	0x08013ebd
 800c18c:	08013e61 	.word	0x08013e61
 800c190:	08013df3 	.word	0x08013df3
 800c194:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c198:	6018      	str	r0, [r3, #0]
 800c19a:	9b03      	ldr	r3, [sp, #12]
 800c19c:	2b0e      	cmp	r3, #14
 800c19e:	f200 80a1 	bhi.w	800c2e4 <_dtoa_r+0x444>
 800c1a2:	2c00      	cmp	r4, #0
 800c1a4:	f000 809e 	beq.w	800c2e4 <_dtoa_r+0x444>
 800c1a8:	2f00      	cmp	r7, #0
 800c1aa:	dd33      	ble.n	800c214 <_dtoa_r+0x374>
 800c1ac:	4b9c      	ldr	r3, [pc, #624]	@ (800c420 <_dtoa_r+0x580>)
 800c1ae:	f007 020f 	and.w	r2, r7, #15
 800c1b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1b6:	ed93 7b00 	vldr	d7, [r3]
 800c1ba:	05f8      	lsls	r0, r7, #23
 800c1bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c1c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c1c4:	d516      	bpl.n	800c1f4 <_dtoa_r+0x354>
 800c1c6:	4b97      	ldr	r3, [pc, #604]	@ (800c424 <_dtoa_r+0x584>)
 800c1c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1d0:	f7f4 fb3c 	bl	800084c <__aeabi_ddiv>
 800c1d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1d8:	f004 040f 	and.w	r4, r4, #15
 800c1dc:	2603      	movs	r6, #3
 800c1de:	4d91      	ldr	r5, [pc, #580]	@ (800c424 <_dtoa_r+0x584>)
 800c1e0:	b954      	cbnz	r4, 800c1f8 <_dtoa_r+0x358>
 800c1e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1ea:	f7f4 fb2f 	bl	800084c <__aeabi_ddiv>
 800c1ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1f2:	e028      	b.n	800c246 <_dtoa_r+0x3a6>
 800c1f4:	2602      	movs	r6, #2
 800c1f6:	e7f2      	b.n	800c1de <_dtoa_r+0x33e>
 800c1f8:	07e1      	lsls	r1, r4, #31
 800c1fa:	d508      	bpl.n	800c20e <_dtoa_r+0x36e>
 800c1fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c200:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c204:	f7f4 f9f8 	bl	80005f8 <__aeabi_dmul>
 800c208:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c20c:	3601      	adds	r6, #1
 800c20e:	1064      	asrs	r4, r4, #1
 800c210:	3508      	adds	r5, #8
 800c212:	e7e5      	b.n	800c1e0 <_dtoa_r+0x340>
 800c214:	f000 80af 	beq.w	800c376 <_dtoa_r+0x4d6>
 800c218:	427c      	negs	r4, r7
 800c21a:	4b81      	ldr	r3, [pc, #516]	@ (800c420 <_dtoa_r+0x580>)
 800c21c:	4d81      	ldr	r5, [pc, #516]	@ (800c424 <_dtoa_r+0x584>)
 800c21e:	f004 020f 	and.w	r2, r4, #15
 800c222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c22e:	f7f4 f9e3 	bl	80005f8 <__aeabi_dmul>
 800c232:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c236:	1124      	asrs	r4, r4, #4
 800c238:	2300      	movs	r3, #0
 800c23a:	2602      	movs	r6, #2
 800c23c:	2c00      	cmp	r4, #0
 800c23e:	f040 808f 	bne.w	800c360 <_dtoa_r+0x4c0>
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1d3      	bne.n	800c1ee <_dtoa_r+0x34e>
 800c246:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c248:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 8094 	beq.w	800c37a <_dtoa_r+0x4da>
 800c252:	4b75      	ldr	r3, [pc, #468]	@ (800c428 <_dtoa_r+0x588>)
 800c254:	2200      	movs	r2, #0
 800c256:	4620      	mov	r0, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	f7f4 fc3f 	bl	8000adc <__aeabi_dcmplt>
 800c25e:	2800      	cmp	r0, #0
 800c260:	f000 808b 	beq.w	800c37a <_dtoa_r+0x4da>
 800c264:	9b03      	ldr	r3, [sp, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 8087 	beq.w	800c37a <_dtoa_r+0x4da>
 800c26c:	f1bb 0f00 	cmp.w	fp, #0
 800c270:	dd34      	ble.n	800c2dc <_dtoa_r+0x43c>
 800c272:	4620      	mov	r0, r4
 800c274:	4b6d      	ldr	r3, [pc, #436]	@ (800c42c <_dtoa_r+0x58c>)
 800c276:	2200      	movs	r2, #0
 800c278:	4629      	mov	r1, r5
 800c27a:	f7f4 f9bd 	bl	80005f8 <__aeabi_dmul>
 800c27e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c282:	f107 38ff 	add.w	r8, r7, #4294967295
 800c286:	3601      	adds	r6, #1
 800c288:	465c      	mov	r4, fp
 800c28a:	4630      	mov	r0, r6
 800c28c:	f7f4 f94a 	bl	8000524 <__aeabi_i2d>
 800c290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c294:	f7f4 f9b0 	bl	80005f8 <__aeabi_dmul>
 800c298:	4b65      	ldr	r3, [pc, #404]	@ (800c430 <_dtoa_r+0x590>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	f7f3 fff6 	bl	800028c <__adddf3>
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c2a6:	2c00      	cmp	r4, #0
 800c2a8:	d16a      	bne.n	800c380 <_dtoa_r+0x4e0>
 800c2aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2ae:	4b61      	ldr	r3, [pc, #388]	@ (800c434 <_dtoa_r+0x594>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f7f3 ffe9 	bl	8000288 <__aeabi_dsub>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2be:	462a      	mov	r2, r5
 800c2c0:	4633      	mov	r3, r6
 800c2c2:	f7f4 fc29 	bl	8000b18 <__aeabi_dcmpgt>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	f040 8298 	bne.w	800c7fc <_dtoa_r+0x95c>
 800c2cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2d0:	462a      	mov	r2, r5
 800c2d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2d6:	f7f4 fc01 	bl	8000adc <__aeabi_dcmplt>
 800c2da:	bb38      	cbnz	r0, 800c32c <_dtoa_r+0x48c>
 800c2dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c2e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c2e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f2c0 8157 	blt.w	800c59a <_dtoa_r+0x6fa>
 800c2ec:	2f0e      	cmp	r7, #14
 800c2ee:	f300 8154 	bgt.w	800c59a <_dtoa_r+0x6fa>
 800c2f2:	4b4b      	ldr	r3, [pc, #300]	@ (800c420 <_dtoa_r+0x580>)
 800c2f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2f8:	ed93 7b00 	vldr	d7, [r3]
 800c2fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	ed8d 7b00 	vstr	d7, [sp]
 800c304:	f280 80e5 	bge.w	800c4d2 <_dtoa_r+0x632>
 800c308:	9b03      	ldr	r3, [sp, #12]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f300 80e1 	bgt.w	800c4d2 <_dtoa_r+0x632>
 800c310:	d10c      	bne.n	800c32c <_dtoa_r+0x48c>
 800c312:	4b48      	ldr	r3, [pc, #288]	@ (800c434 <_dtoa_r+0x594>)
 800c314:	2200      	movs	r2, #0
 800c316:	ec51 0b17 	vmov	r0, r1, d7
 800c31a:	f7f4 f96d 	bl	80005f8 <__aeabi_dmul>
 800c31e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c322:	f7f4 fbef 	bl	8000b04 <__aeabi_dcmpge>
 800c326:	2800      	cmp	r0, #0
 800c328:	f000 8266 	beq.w	800c7f8 <_dtoa_r+0x958>
 800c32c:	2400      	movs	r4, #0
 800c32e:	4625      	mov	r5, r4
 800c330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c332:	4656      	mov	r6, sl
 800c334:	ea6f 0803 	mvn.w	r8, r3
 800c338:	2700      	movs	r7, #0
 800c33a:	4621      	mov	r1, r4
 800c33c:	4648      	mov	r0, r9
 800c33e:	f000 fcbf 	bl	800ccc0 <_Bfree>
 800c342:	2d00      	cmp	r5, #0
 800c344:	f000 80bd 	beq.w	800c4c2 <_dtoa_r+0x622>
 800c348:	b12f      	cbz	r7, 800c356 <_dtoa_r+0x4b6>
 800c34a:	42af      	cmp	r7, r5
 800c34c:	d003      	beq.n	800c356 <_dtoa_r+0x4b6>
 800c34e:	4639      	mov	r1, r7
 800c350:	4648      	mov	r0, r9
 800c352:	f000 fcb5 	bl	800ccc0 <_Bfree>
 800c356:	4629      	mov	r1, r5
 800c358:	4648      	mov	r0, r9
 800c35a:	f000 fcb1 	bl	800ccc0 <_Bfree>
 800c35e:	e0b0      	b.n	800c4c2 <_dtoa_r+0x622>
 800c360:	07e2      	lsls	r2, r4, #31
 800c362:	d505      	bpl.n	800c370 <_dtoa_r+0x4d0>
 800c364:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c368:	f7f4 f946 	bl	80005f8 <__aeabi_dmul>
 800c36c:	3601      	adds	r6, #1
 800c36e:	2301      	movs	r3, #1
 800c370:	1064      	asrs	r4, r4, #1
 800c372:	3508      	adds	r5, #8
 800c374:	e762      	b.n	800c23c <_dtoa_r+0x39c>
 800c376:	2602      	movs	r6, #2
 800c378:	e765      	b.n	800c246 <_dtoa_r+0x3a6>
 800c37a:	9c03      	ldr	r4, [sp, #12]
 800c37c:	46b8      	mov	r8, r7
 800c37e:	e784      	b.n	800c28a <_dtoa_r+0x3ea>
 800c380:	4b27      	ldr	r3, [pc, #156]	@ (800c420 <_dtoa_r+0x580>)
 800c382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c384:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c388:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c38c:	4454      	add	r4, sl
 800c38e:	2900      	cmp	r1, #0
 800c390:	d054      	beq.n	800c43c <_dtoa_r+0x59c>
 800c392:	4929      	ldr	r1, [pc, #164]	@ (800c438 <_dtoa_r+0x598>)
 800c394:	2000      	movs	r0, #0
 800c396:	f7f4 fa59 	bl	800084c <__aeabi_ddiv>
 800c39a:	4633      	mov	r3, r6
 800c39c:	462a      	mov	r2, r5
 800c39e:	f7f3 ff73 	bl	8000288 <__aeabi_dsub>
 800c3a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c3a6:	4656      	mov	r6, sl
 800c3a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3ac:	f7f4 fbd4 	bl	8000b58 <__aeabi_d2iz>
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	f7f4 f8b7 	bl	8000524 <__aeabi_i2d>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3be:	f7f3 ff63 	bl	8000288 <__aeabi_dsub>
 800c3c2:	3530      	adds	r5, #48	@ 0x30
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3cc:	f806 5b01 	strb.w	r5, [r6], #1
 800c3d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3d4:	f7f4 fb82 	bl	8000adc <__aeabi_dcmplt>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d172      	bne.n	800c4c2 <_dtoa_r+0x622>
 800c3dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3e0:	4911      	ldr	r1, [pc, #68]	@ (800c428 <_dtoa_r+0x588>)
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	f7f3 ff50 	bl	8000288 <__aeabi_dsub>
 800c3e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3ec:	f7f4 fb76 	bl	8000adc <__aeabi_dcmplt>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	f040 80b4 	bne.w	800c55e <_dtoa_r+0x6be>
 800c3f6:	42a6      	cmp	r6, r4
 800c3f8:	f43f af70 	beq.w	800c2dc <_dtoa_r+0x43c>
 800c3fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c400:	4b0a      	ldr	r3, [pc, #40]	@ (800c42c <_dtoa_r+0x58c>)
 800c402:	2200      	movs	r2, #0
 800c404:	f7f4 f8f8 	bl	80005f8 <__aeabi_dmul>
 800c408:	4b08      	ldr	r3, [pc, #32]	@ (800c42c <_dtoa_r+0x58c>)
 800c40a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c40e:	2200      	movs	r2, #0
 800c410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c414:	f7f4 f8f0 	bl	80005f8 <__aeabi_dmul>
 800c418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c41c:	e7c4      	b.n	800c3a8 <_dtoa_r+0x508>
 800c41e:	bf00      	nop
 800c420:	08013fd8 	.word	0x08013fd8
 800c424:	08013fb0 	.word	0x08013fb0
 800c428:	3ff00000 	.word	0x3ff00000
 800c42c:	40240000 	.word	0x40240000
 800c430:	401c0000 	.word	0x401c0000
 800c434:	40140000 	.word	0x40140000
 800c438:	3fe00000 	.word	0x3fe00000
 800c43c:	4631      	mov	r1, r6
 800c43e:	4628      	mov	r0, r5
 800c440:	f7f4 f8da 	bl	80005f8 <__aeabi_dmul>
 800c444:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c448:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c44a:	4656      	mov	r6, sl
 800c44c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c450:	f7f4 fb82 	bl	8000b58 <__aeabi_d2iz>
 800c454:	4605      	mov	r5, r0
 800c456:	f7f4 f865 	bl	8000524 <__aeabi_i2d>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c462:	f7f3 ff11 	bl	8000288 <__aeabi_dsub>
 800c466:	3530      	adds	r5, #48	@ 0x30
 800c468:	f806 5b01 	strb.w	r5, [r6], #1
 800c46c:	4602      	mov	r2, r0
 800c46e:	460b      	mov	r3, r1
 800c470:	42a6      	cmp	r6, r4
 800c472:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c476:	f04f 0200 	mov.w	r2, #0
 800c47a:	d124      	bne.n	800c4c6 <_dtoa_r+0x626>
 800c47c:	4baf      	ldr	r3, [pc, #700]	@ (800c73c <_dtoa_r+0x89c>)
 800c47e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c482:	f7f3 ff03 	bl	800028c <__adddf3>
 800c486:	4602      	mov	r2, r0
 800c488:	460b      	mov	r3, r1
 800c48a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c48e:	f7f4 fb43 	bl	8000b18 <__aeabi_dcmpgt>
 800c492:	2800      	cmp	r0, #0
 800c494:	d163      	bne.n	800c55e <_dtoa_r+0x6be>
 800c496:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c49a:	49a8      	ldr	r1, [pc, #672]	@ (800c73c <_dtoa_r+0x89c>)
 800c49c:	2000      	movs	r0, #0
 800c49e:	f7f3 fef3 	bl	8000288 <__aeabi_dsub>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4aa:	f7f4 fb17 	bl	8000adc <__aeabi_dcmplt>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	f43f af14 	beq.w	800c2dc <_dtoa_r+0x43c>
 800c4b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c4b6:	1e73      	subs	r3, r6, #1
 800c4b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4be:	2b30      	cmp	r3, #48	@ 0x30
 800c4c0:	d0f8      	beq.n	800c4b4 <_dtoa_r+0x614>
 800c4c2:	4647      	mov	r7, r8
 800c4c4:	e03b      	b.n	800c53e <_dtoa_r+0x69e>
 800c4c6:	4b9e      	ldr	r3, [pc, #632]	@ (800c740 <_dtoa_r+0x8a0>)
 800c4c8:	f7f4 f896 	bl	80005f8 <__aeabi_dmul>
 800c4cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4d0:	e7bc      	b.n	800c44c <_dtoa_r+0x5ac>
 800c4d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c4d6:	4656      	mov	r6, sl
 800c4d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f7f4 f9b4 	bl	800084c <__aeabi_ddiv>
 800c4e4:	f7f4 fb38 	bl	8000b58 <__aeabi_d2iz>
 800c4e8:	4680      	mov	r8, r0
 800c4ea:	f7f4 f81b 	bl	8000524 <__aeabi_i2d>
 800c4ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4f2:	f7f4 f881 	bl	80005f8 <__aeabi_dmul>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c502:	f7f3 fec1 	bl	8000288 <__aeabi_dsub>
 800c506:	f806 4b01 	strb.w	r4, [r6], #1
 800c50a:	9d03      	ldr	r5, [sp, #12]
 800c50c:	eba6 040a 	sub.w	r4, r6, sl
 800c510:	42a5      	cmp	r5, r4
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	d133      	bne.n	800c580 <_dtoa_r+0x6e0>
 800c518:	f7f3 feb8 	bl	800028c <__adddf3>
 800c51c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c520:	4604      	mov	r4, r0
 800c522:	460d      	mov	r5, r1
 800c524:	f7f4 faf8 	bl	8000b18 <__aeabi_dcmpgt>
 800c528:	b9c0      	cbnz	r0, 800c55c <_dtoa_r+0x6bc>
 800c52a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c52e:	4620      	mov	r0, r4
 800c530:	4629      	mov	r1, r5
 800c532:	f7f4 fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c536:	b110      	cbz	r0, 800c53e <_dtoa_r+0x69e>
 800c538:	f018 0f01 	tst.w	r8, #1
 800c53c:	d10e      	bne.n	800c55c <_dtoa_r+0x6bc>
 800c53e:	9902      	ldr	r1, [sp, #8]
 800c540:	4648      	mov	r0, r9
 800c542:	f000 fbbd 	bl	800ccc0 <_Bfree>
 800c546:	2300      	movs	r3, #0
 800c548:	7033      	strb	r3, [r6, #0]
 800c54a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c54c:	3701      	adds	r7, #1
 800c54e:	601f      	str	r7, [r3, #0]
 800c550:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c552:	2b00      	cmp	r3, #0
 800c554:	f000 824b 	beq.w	800c9ee <_dtoa_r+0xb4e>
 800c558:	601e      	str	r6, [r3, #0]
 800c55a:	e248      	b.n	800c9ee <_dtoa_r+0xb4e>
 800c55c:	46b8      	mov	r8, r7
 800c55e:	4633      	mov	r3, r6
 800c560:	461e      	mov	r6, r3
 800c562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c566:	2a39      	cmp	r2, #57	@ 0x39
 800c568:	d106      	bne.n	800c578 <_dtoa_r+0x6d8>
 800c56a:	459a      	cmp	sl, r3
 800c56c:	d1f8      	bne.n	800c560 <_dtoa_r+0x6c0>
 800c56e:	2230      	movs	r2, #48	@ 0x30
 800c570:	f108 0801 	add.w	r8, r8, #1
 800c574:	f88a 2000 	strb.w	r2, [sl]
 800c578:	781a      	ldrb	r2, [r3, #0]
 800c57a:	3201      	adds	r2, #1
 800c57c:	701a      	strb	r2, [r3, #0]
 800c57e:	e7a0      	b.n	800c4c2 <_dtoa_r+0x622>
 800c580:	4b6f      	ldr	r3, [pc, #444]	@ (800c740 <_dtoa_r+0x8a0>)
 800c582:	2200      	movs	r2, #0
 800c584:	f7f4 f838 	bl	80005f8 <__aeabi_dmul>
 800c588:	2200      	movs	r2, #0
 800c58a:	2300      	movs	r3, #0
 800c58c:	4604      	mov	r4, r0
 800c58e:	460d      	mov	r5, r1
 800c590:	f7f4 fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c594:	2800      	cmp	r0, #0
 800c596:	d09f      	beq.n	800c4d8 <_dtoa_r+0x638>
 800c598:	e7d1      	b.n	800c53e <_dtoa_r+0x69e>
 800c59a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c59c:	2a00      	cmp	r2, #0
 800c59e:	f000 80ea 	beq.w	800c776 <_dtoa_r+0x8d6>
 800c5a2:	9a07      	ldr	r2, [sp, #28]
 800c5a4:	2a01      	cmp	r2, #1
 800c5a6:	f300 80cd 	bgt.w	800c744 <_dtoa_r+0x8a4>
 800c5aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c5ac:	2a00      	cmp	r2, #0
 800c5ae:	f000 80c1 	beq.w	800c734 <_dtoa_r+0x894>
 800c5b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c5b6:	9c08      	ldr	r4, [sp, #32]
 800c5b8:	9e00      	ldr	r6, [sp, #0]
 800c5ba:	9a00      	ldr	r2, [sp, #0]
 800c5bc:	441a      	add	r2, r3
 800c5be:	9200      	str	r2, [sp, #0]
 800c5c0:	9a06      	ldr	r2, [sp, #24]
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	441a      	add	r2, r3
 800c5c6:	4648      	mov	r0, r9
 800c5c8:	9206      	str	r2, [sp, #24]
 800c5ca:	f000 fc77 	bl	800cebc <__i2b>
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	b166      	cbz	r6, 800c5ec <_dtoa_r+0x74c>
 800c5d2:	9b06      	ldr	r3, [sp, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	dd09      	ble.n	800c5ec <_dtoa_r+0x74c>
 800c5d8:	42b3      	cmp	r3, r6
 800c5da:	9a00      	ldr	r2, [sp, #0]
 800c5dc:	bfa8      	it	ge
 800c5de:	4633      	movge	r3, r6
 800c5e0:	1ad2      	subs	r2, r2, r3
 800c5e2:	9200      	str	r2, [sp, #0]
 800c5e4:	9a06      	ldr	r2, [sp, #24]
 800c5e6:	1af6      	subs	r6, r6, r3
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	9306      	str	r3, [sp, #24]
 800c5ec:	9b08      	ldr	r3, [sp, #32]
 800c5ee:	b30b      	cbz	r3, 800c634 <_dtoa_r+0x794>
 800c5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f000 80c6 	beq.w	800c784 <_dtoa_r+0x8e4>
 800c5f8:	2c00      	cmp	r4, #0
 800c5fa:	f000 80c0 	beq.w	800c77e <_dtoa_r+0x8de>
 800c5fe:	4629      	mov	r1, r5
 800c600:	4622      	mov	r2, r4
 800c602:	4648      	mov	r0, r9
 800c604:	f000 fd12 	bl	800d02c <__pow5mult>
 800c608:	9a02      	ldr	r2, [sp, #8]
 800c60a:	4601      	mov	r1, r0
 800c60c:	4605      	mov	r5, r0
 800c60e:	4648      	mov	r0, r9
 800c610:	f000 fc6a 	bl	800cee8 <__multiply>
 800c614:	9902      	ldr	r1, [sp, #8]
 800c616:	4680      	mov	r8, r0
 800c618:	4648      	mov	r0, r9
 800c61a:	f000 fb51 	bl	800ccc0 <_Bfree>
 800c61e:	9b08      	ldr	r3, [sp, #32]
 800c620:	1b1b      	subs	r3, r3, r4
 800c622:	9308      	str	r3, [sp, #32]
 800c624:	f000 80b1 	beq.w	800c78a <_dtoa_r+0x8ea>
 800c628:	9a08      	ldr	r2, [sp, #32]
 800c62a:	4641      	mov	r1, r8
 800c62c:	4648      	mov	r0, r9
 800c62e:	f000 fcfd 	bl	800d02c <__pow5mult>
 800c632:	9002      	str	r0, [sp, #8]
 800c634:	2101      	movs	r1, #1
 800c636:	4648      	mov	r0, r9
 800c638:	f000 fc40 	bl	800cebc <__i2b>
 800c63c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c63e:	4604      	mov	r4, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 81d8 	beq.w	800c9f6 <_dtoa_r+0xb56>
 800c646:	461a      	mov	r2, r3
 800c648:	4601      	mov	r1, r0
 800c64a:	4648      	mov	r0, r9
 800c64c:	f000 fcee 	bl	800d02c <__pow5mult>
 800c650:	9b07      	ldr	r3, [sp, #28]
 800c652:	2b01      	cmp	r3, #1
 800c654:	4604      	mov	r4, r0
 800c656:	f300 809f 	bgt.w	800c798 <_dtoa_r+0x8f8>
 800c65a:	9b04      	ldr	r3, [sp, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f040 8097 	bne.w	800c790 <_dtoa_r+0x8f0>
 800c662:	9b05      	ldr	r3, [sp, #20]
 800c664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f040 8093 	bne.w	800c794 <_dtoa_r+0x8f4>
 800c66e:	9b05      	ldr	r3, [sp, #20]
 800c670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c674:	0d1b      	lsrs	r3, r3, #20
 800c676:	051b      	lsls	r3, r3, #20
 800c678:	b133      	cbz	r3, 800c688 <_dtoa_r+0x7e8>
 800c67a:	9b00      	ldr	r3, [sp, #0]
 800c67c:	3301      	adds	r3, #1
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	9b06      	ldr	r3, [sp, #24]
 800c682:	3301      	adds	r3, #1
 800c684:	9306      	str	r3, [sp, #24]
 800c686:	2301      	movs	r3, #1
 800c688:	9308      	str	r3, [sp, #32]
 800c68a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f000 81b8 	beq.w	800ca02 <_dtoa_r+0xb62>
 800c692:	6923      	ldr	r3, [r4, #16]
 800c694:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c698:	6918      	ldr	r0, [r3, #16]
 800c69a:	f000 fbc3 	bl	800ce24 <__hi0bits>
 800c69e:	f1c0 0020 	rsb	r0, r0, #32
 800c6a2:	9b06      	ldr	r3, [sp, #24]
 800c6a4:	4418      	add	r0, r3
 800c6a6:	f010 001f 	ands.w	r0, r0, #31
 800c6aa:	f000 8082 	beq.w	800c7b2 <_dtoa_r+0x912>
 800c6ae:	f1c0 0320 	rsb	r3, r0, #32
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	dd73      	ble.n	800c79e <_dtoa_r+0x8fe>
 800c6b6:	9b00      	ldr	r3, [sp, #0]
 800c6b8:	f1c0 001c 	rsb	r0, r0, #28
 800c6bc:	4403      	add	r3, r0
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	9b06      	ldr	r3, [sp, #24]
 800c6c2:	4403      	add	r3, r0
 800c6c4:	4406      	add	r6, r0
 800c6c6:	9306      	str	r3, [sp, #24]
 800c6c8:	9b00      	ldr	r3, [sp, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dd05      	ble.n	800c6da <_dtoa_r+0x83a>
 800c6ce:	9902      	ldr	r1, [sp, #8]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	4648      	mov	r0, r9
 800c6d4:	f000 fd04 	bl	800d0e0 <__lshift>
 800c6d8:	9002      	str	r0, [sp, #8]
 800c6da:	9b06      	ldr	r3, [sp, #24]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	dd05      	ble.n	800c6ec <_dtoa_r+0x84c>
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4648      	mov	r0, r9
 800c6e6:	f000 fcfb 	bl	800d0e0 <__lshift>
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d061      	beq.n	800c7b6 <_dtoa_r+0x916>
 800c6f2:	9802      	ldr	r0, [sp, #8]
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	f000 fd5f 	bl	800d1b8 <__mcmp>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	da5b      	bge.n	800c7b6 <_dtoa_r+0x916>
 800c6fe:	2300      	movs	r3, #0
 800c700:	9902      	ldr	r1, [sp, #8]
 800c702:	220a      	movs	r2, #10
 800c704:	4648      	mov	r0, r9
 800c706:	f000 fafd 	bl	800cd04 <__multadd>
 800c70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c70c:	9002      	str	r0, [sp, #8]
 800c70e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 8177 	beq.w	800ca06 <_dtoa_r+0xb66>
 800c718:	4629      	mov	r1, r5
 800c71a:	2300      	movs	r3, #0
 800c71c:	220a      	movs	r2, #10
 800c71e:	4648      	mov	r0, r9
 800c720:	f000 faf0 	bl	800cd04 <__multadd>
 800c724:	f1bb 0f00 	cmp.w	fp, #0
 800c728:	4605      	mov	r5, r0
 800c72a:	dc6f      	bgt.n	800c80c <_dtoa_r+0x96c>
 800c72c:	9b07      	ldr	r3, [sp, #28]
 800c72e:	2b02      	cmp	r3, #2
 800c730:	dc49      	bgt.n	800c7c6 <_dtoa_r+0x926>
 800c732:	e06b      	b.n	800c80c <_dtoa_r+0x96c>
 800c734:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c736:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c73a:	e73c      	b.n	800c5b6 <_dtoa_r+0x716>
 800c73c:	3fe00000 	.word	0x3fe00000
 800c740:	40240000 	.word	0x40240000
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	1e5c      	subs	r4, r3, #1
 800c748:	9b08      	ldr	r3, [sp, #32]
 800c74a:	42a3      	cmp	r3, r4
 800c74c:	db09      	blt.n	800c762 <_dtoa_r+0x8c2>
 800c74e:	1b1c      	subs	r4, r3, r4
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	2b00      	cmp	r3, #0
 800c754:	f6bf af30 	bge.w	800c5b8 <_dtoa_r+0x718>
 800c758:	9b00      	ldr	r3, [sp, #0]
 800c75a:	9a03      	ldr	r2, [sp, #12]
 800c75c:	1a9e      	subs	r6, r3, r2
 800c75e:	2300      	movs	r3, #0
 800c760:	e72b      	b.n	800c5ba <_dtoa_r+0x71a>
 800c762:	9b08      	ldr	r3, [sp, #32]
 800c764:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c766:	9408      	str	r4, [sp, #32]
 800c768:	1ae3      	subs	r3, r4, r3
 800c76a:	441a      	add	r2, r3
 800c76c:	9e00      	ldr	r6, [sp, #0]
 800c76e:	9b03      	ldr	r3, [sp, #12]
 800c770:	920d      	str	r2, [sp, #52]	@ 0x34
 800c772:	2400      	movs	r4, #0
 800c774:	e721      	b.n	800c5ba <_dtoa_r+0x71a>
 800c776:	9c08      	ldr	r4, [sp, #32]
 800c778:	9e00      	ldr	r6, [sp, #0]
 800c77a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c77c:	e728      	b.n	800c5d0 <_dtoa_r+0x730>
 800c77e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c782:	e751      	b.n	800c628 <_dtoa_r+0x788>
 800c784:	9a08      	ldr	r2, [sp, #32]
 800c786:	9902      	ldr	r1, [sp, #8]
 800c788:	e750      	b.n	800c62c <_dtoa_r+0x78c>
 800c78a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c78e:	e751      	b.n	800c634 <_dtoa_r+0x794>
 800c790:	2300      	movs	r3, #0
 800c792:	e779      	b.n	800c688 <_dtoa_r+0x7e8>
 800c794:	9b04      	ldr	r3, [sp, #16]
 800c796:	e777      	b.n	800c688 <_dtoa_r+0x7e8>
 800c798:	2300      	movs	r3, #0
 800c79a:	9308      	str	r3, [sp, #32]
 800c79c:	e779      	b.n	800c692 <_dtoa_r+0x7f2>
 800c79e:	d093      	beq.n	800c6c8 <_dtoa_r+0x828>
 800c7a0:	9a00      	ldr	r2, [sp, #0]
 800c7a2:	331c      	adds	r3, #28
 800c7a4:	441a      	add	r2, r3
 800c7a6:	9200      	str	r2, [sp, #0]
 800c7a8:	9a06      	ldr	r2, [sp, #24]
 800c7aa:	441a      	add	r2, r3
 800c7ac:	441e      	add	r6, r3
 800c7ae:	9206      	str	r2, [sp, #24]
 800c7b0:	e78a      	b.n	800c6c8 <_dtoa_r+0x828>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	e7f4      	b.n	800c7a0 <_dtoa_r+0x900>
 800c7b6:	9b03      	ldr	r3, [sp, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	46b8      	mov	r8, r7
 800c7bc:	dc20      	bgt.n	800c800 <_dtoa_r+0x960>
 800c7be:	469b      	mov	fp, r3
 800c7c0:	9b07      	ldr	r3, [sp, #28]
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	dd1e      	ble.n	800c804 <_dtoa_r+0x964>
 800c7c6:	f1bb 0f00 	cmp.w	fp, #0
 800c7ca:	f47f adb1 	bne.w	800c330 <_dtoa_r+0x490>
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	465b      	mov	r3, fp
 800c7d2:	2205      	movs	r2, #5
 800c7d4:	4648      	mov	r0, r9
 800c7d6:	f000 fa95 	bl	800cd04 <__multadd>
 800c7da:	4601      	mov	r1, r0
 800c7dc:	4604      	mov	r4, r0
 800c7de:	9802      	ldr	r0, [sp, #8]
 800c7e0:	f000 fcea 	bl	800d1b8 <__mcmp>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	f77f ada3 	ble.w	800c330 <_dtoa_r+0x490>
 800c7ea:	4656      	mov	r6, sl
 800c7ec:	2331      	movs	r3, #49	@ 0x31
 800c7ee:	f806 3b01 	strb.w	r3, [r6], #1
 800c7f2:	f108 0801 	add.w	r8, r8, #1
 800c7f6:	e59f      	b.n	800c338 <_dtoa_r+0x498>
 800c7f8:	9c03      	ldr	r4, [sp, #12]
 800c7fa:	46b8      	mov	r8, r7
 800c7fc:	4625      	mov	r5, r4
 800c7fe:	e7f4      	b.n	800c7ea <_dtoa_r+0x94a>
 800c800:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c806:	2b00      	cmp	r3, #0
 800c808:	f000 8101 	beq.w	800ca0e <_dtoa_r+0xb6e>
 800c80c:	2e00      	cmp	r6, #0
 800c80e:	dd05      	ble.n	800c81c <_dtoa_r+0x97c>
 800c810:	4629      	mov	r1, r5
 800c812:	4632      	mov	r2, r6
 800c814:	4648      	mov	r0, r9
 800c816:	f000 fc63 	bl	800d0e0 <__lshift>
 800c81a:	4605      	mov	r5, r0
 800c81c:	9b08      	ldr	r3, [sp, #32]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d05c      	beq.n	800c8dc <_dtoa_r+0xa3c>
 800c822:	6869      	ldr	r1, [r5, #4]
 800c824:	4648      	mov	r0, r9
 800c826:	f000 fa0b 	bl	800cc40 <_Balloc>
 800c82a:	4606      	mov	r6, r0
 800c82c:	b928      	cbnz	r0, 800c83a <_dtoa_r+0x99a>
 800c82e:	4b82      	ldr	r3, [pc, #520]	@ (800ca38 <_dtoa_r+0xb98>)
 800c830:	4602      	mov	r2, r0
 800c832:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c836:	f7ff bb4a 	b.w	800bece <_dtoa_r+0x2e>
 800c83a:	692a      	ldr	r2, [r5, #16]
 800c83c:	3202      	adds	r2, #2
 800c83e:	0092      	lsls	r2, r2, #2
 800c840:	f105 010c 	add.w	r1, r5, #12
 800c844:	300c      	adds	r0, #12
 800c846:	f7ff fa70 	bl	800bd2a <memcpy>
 800c84a:	2201      	movs	r2, #1
 800c84c:	4631      	mov	r1, r6
 800c84e:	4648      	mov	r0, r9
 800c850:	f000 fc46 	bl	800d0e0 <__lshift>
 800c854:	f10a 0301 	add.w	r3, sl, #1
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	eb0a 030b 	add.w	r3, sl, fp
 800c85e:	9308      	str	r3, [sp, #32]
 800c860:	9b04      	ldr	r3, [sp, #16]
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	462f      	mov	r7, r5
 800c868:	9306      	str	r3, [sp, #24]
 800c86a:	4605      	mov	r5, r0
 800c86c:	9b00      	ldr	r3, [sp, #0]
 800c86e:	9802      	ldr	r0, [sp, #8]
 800c870:	4621      	mov	r1, r4
 800c872:	f103 3bff 	add.w	fp, r3, #4294967295
 800c876:	f7ff fa8b 	bl	800bd90 <quorem>
 800c87a:	4603      	mov	r3, r0
 800c87c:	3330      	adds	r3, #48	@ 0x30
 800c87e:	9003      	str	r0, [sp, #12]
 800c880:	4639      	mov	r1, r7
 800c882:	9802      	ldr	r0, [sp, #8]
 800c884:	9309      	str	r3, [sp, #36]	@ 0x24
 800c886:	f000 fc97 	bl	800d1b8 <__mcmp>
 800c88a:	462a      	mov	r2, r5
 800c88c:	9004      	str	r0, [sp, #16]
 800c88e:	4621      	mov	r1, r4
 800c890:	4648      	mov	r0, r9
 800c892:	f000 fcad 	bl	800d1f0 <__mdiff>
 800c896:	68c2      	ldr	r2, [r0, #12]
 800c898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89a:	4606      	mov	r6, r0
 800c89c:	bb02      	cbnz	r2, 800c8e0 <_dtoa_r+0xa40>
 800c89e:	4601      	mov	r1, r0
 800c8a0:	9802      	ldr	r0, [sp, #8]
 800c8a2:	f000 fc89 	bl	800d1b8 <__mcmp>
 800c8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	4648      	mov	r0, r9
 800c8ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8b2:	f000 fa05 	bl	800ccc0 <_Bfree>
 800c8b6:	9b07      	ldr	r3, [sp, #28]
 800c8b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c8ba:	9e00      	ldr	r6, [sp, #0]
 800c8bc:	ea42 0103 	orr.w	r1, r2, r3
 800c8c0:	9b06      	ldr	r3, [sp, #24]
 800c8c2:	4319      	orrs	r1, r3
 800c8c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c6:	d10d      	bne.n	800c8e4 <_dtoa_r+0xa44>
 800c8c8:	2b39      	cmp	r3, #57	@ 0x39
 800c8ca:	d027      	beq.n	800c91c <_dtoa_r+0xa7c>
 800c8cc:	9a04      	ldr	r2, [sp, #16]
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	dd01      	ble.n	800c8d6 <_dtoa_r+0xa36>
 800c8d2:	9b03      	ldr	r3, [sp, #12]
 800c8d4:	3331      	adds	r3, #49	@ 0x31
 800c8d6:	f88b 3000 	strb.w	r3, [fp]
 800c8da:	e52e      	b.n	800c33a <_dtoa_r+0x49a>
 800c8dc:	4628      	mov	r0, r5
 800c8de:	e7b9      	b.n	800c854 <_dtoa_r+0x9b4>
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	e7e2      	b.n	800c8aa <_dtoa_r+0xa0a>
 800c8e4:	9904      	ldr	r1, [sp, #16]
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	db04      	blt.n	800c8f4 <_dtoa_r+0xa54>
 800c8ea:	9807      	ldr	r0, [sp, #28]
 800c8ec:	4301      	orrs	r1, r0
 800c8ee:	9806      	ldr	r0, [sp, #24]
 800c8f0:	4301      	orrs	r1, r0
 800c8f2:	d120      	bne.n	800c936 <_dtoa_r+0xa96>
 800c8f4:	2a00      	cmp	r2, #0
 800c8f6:	ddee      	ble.n	800c8d6 <_dtoa_r+0xa36>
 800c8f8:	9902      	ldr	r1, [sp, #8]
 800c8fa:	9300      	str	r3, [sp, #0]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	4648      	mov	r0, r9
 800c900:	f000 fbee 	bl	800d0e0 <__lshift>
 800c904:	4621      	mov	r1, r4
 800c906:	9002      	str	r0, [sp, #8]
 800c908:	f000 fc56 	bl	800d1b8 <__mcmp>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	9b00      	ldr	r3, [sp, #0]
 800c910:	dc02      	bgt.n	800c918 <_dtoa_r+0xa78>
 800c912:	d1e0      	bne.n	800c8d6 <_dtoa_r+0xa36>
 800c914:	07da      	lsls	r2, r3, #31
 800c916:	d5de      	bpl.n	800c8d6 <_dtoa_r+0xa36>
 800c918:	2b39      	cmp	r3, #57	@ 0x39
 800c91a:	d1da      	bne.n	800c8d2 <_dtoa_r+0xa32>
 800c91c:	2339      	movs	r3, #57	@ 0x39
 800c91e:	f88b 3000 	strb.w	r3, [fp]
 800c922:	4633      	mov	r3, r6
 800c924:	461e      	mov	r6, r3
 800c926:	3b01      	subs	r3, #1
 800c928:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c92c:	2a39      	cmp	r2, #57	@ 0x39
 800c92e:	d04e      	beq.n	800c9ce <_dtoa_r+0xb2e>
 800c930:	3201      	adds	r2, #1
 800c932:	701a      	strb	r2, [r3, #0]
 800c934:	e501      	b.n	800c33a <_dtoa_r+0x49a>
 800c936:	2a00      	cmp	r2, #0
 800c938:	dd03      	ble.n	800c942 <_dtoa_r+0xaa2>
 800c93a:	2b39      	cmp	r3, #57	@ 0x39
 800c93c:	d0ee      	beq.n	800c91c <_dtoa_r+0xa7c>
 800c93e:	3301      	adds	r3, #1
 800c940:	e7c9      	b.n	800c8d6 <_dtoa_r+0xa36>
 800c942:	9a00      	ldr	r2, [sp, #0]
 800c944:	9908      	ldr	r1, [sp, #32]
 800c946:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c94a:	428a      	cmp	r2, r1
 800c94c:	d028      	beq.n	800c9a0 <_dtoa_r+0xb00>
 800c94e:	9902      	ldr	r1, [sp, #8]
 800c950:	2300      	movs	r3, #0
 800c952:	220a      	movs	r2, #10
 800c954:	4648      	mov	r0, r9
 800c956:	f000 f9d5 	bl	800cd04 <__multadd>
 800c95a:	42af      	cmp	r7, r5
 800c95c:	9002      	str	r0, [sp, #8]
 800c95e:	f04f 0300 	mov.w	r3, #0
 800c962:	f04f 020a 	mov.w	r2, #10
 800c966:	4639      	mov	r1, r7
 800c968:	4648      	mov	r0, r9
 800c96a:	d107      	bne.n	800c97c <_dtoa_r+0xadc>
 800c96c:	f000 f9ca 	bl	800cd04 <__multadd>
 800c970:	4607      	mov	r7, r0
 800c972:	4605      	mov	r5, r0
 800c974:	9b00      	ldr	r3, [sp, #0]
 800c976:	3301      	adds	r3, #1
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	e777      	b.n	800c86c <_dtoa_r+0x9cc>
 800c97c:	f000 f9c2 	bl	800cd04 <__multadd>
 800c980:	4629      	mov	r1, r5
 800c982:	4607      	mov	r7, r0
 800c984:	2300      	movs	r3, #0
 800c986:	220a      	movs	r2, #10
 800c988:	4648      	mov	r0, r9
 800c98a:	f000 f9bb 	bl	800cd04 <__multadd>
 800c98e:	4605      	mov	r5, r0
 800c990:	e7f0      	b.n	800c974 <_dtoa_r+0xad4>
 800c992:	f1bb 0f00 	cmp.w	fp, #0
 800c996:	bfcc      	ite	gt
 800c998:	465e      	movgt	r6, fp
 800c99a:	2601      	movle	r6, #1
 800c99c:	4456      	add	r6, sl
 800c99e:	2700      	movs	r7, #0
 800c9a0:	9902      	ldr	r1, [sp, #8]
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	4648      	mov	r0, r9
 800c9a8:	f000 fb9a 	bl	800d0e0 <__lshift>
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	9002      	str	r0, [sp, #8]
 800c9b0:	f000 fc02 	bl	800d1b8 <__mcmp>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	dcb4      	bgt.n	800c922 <_dtoa_r+0xa82>
 800c9b8:	d102      	bne.n	800c9c0 <_dtoa_r+0xb20>
 800c9ba:	9b00      	ldr	r3, [sp, #0]
 800c9bc:	07db      	lsls	r3, r3, #31
 800c9be:	d4b0      	bmi.n	800c922 <_dtoa_r+0xa82>
 800c9c0:	4633      	mov	r3, r6
 800c9c2:	461e      	mov	r6, r3
 800c9c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9c8:	2a30      	cmp	r2, #48	@ 0x30
 800c9ca:	d0fa      	beq.n	800c9c2 <_dtoa_r+0xb22>
 800c9cc:	e4b5      	b.n	800c33a <_dtoa_r+0x49a>
 800c9ce:	459a      	cmp	sl, r3
 800c9d0:	d1a8      	bne.n	800c924 <_dtoa_r+0xa84>
 800c9d2:	2331      	movs	r3, #49	@ 0x31
 800c9d4:	f108 0801 	add.w	r8, r8, #1
 800c9d8:	f88a 3000 	strb.w	r3, [sl]
 800c9dc:	e4ad      	b.n	800c33a <_dtoa_r+0x49a>
 800c9de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ca3c <_dtoa_r+0xb9c>
 800c9e4:	b11b      	cbz	r3, 800c9ee <_dtoa_r+0xb4e>
 800c9e6:	f10a 0308 	add.w	r3, sl, #8
 800c9ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	4650      	mov	r0, sl
 800c9f0:	b017      	add	sp, #92	@ 0x5c
 800c9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f6:	9b07      	ldr	r3, [sp, #28]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	f77f ae2e 	ble.w	800c65a <_dtoa_r+0x7ba>
 800c9fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca00:	9308      	str	r3, [sp, #32]
 800ca02:	2001      	movs	r0, #1
 800ca04:	e64d      	b.n	800c6a2 <_dtoa_r+0x802>
 800ca06:	f1bb 0f00 	cmp.w	fp, #0
 800ca0a:	f77f aed9 	ble.w	800c7c0 <_dtoa_r+0x920>
 800ca0e:	4656      	mov	r6, sl
 800ca10:	9802      	ldr	r0, [sp, #8]
 800ca12:	4621      	mov	r1, r4
 800ca14:	f7ff f9bc 	bl	800bd90 <quorem>
 800ca18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ca1c:	f806 3b01 	strb.w	r3, [r6], #1
 800ca20:	eba6 020a 	sub.w	r2, r6, sl
 800ca24:	4593      	cmp	fp, r2
 800ca26:	ddb4      	ble.n	800c992 <_dtoa_r+0xaf2>
 800ca28:	9902      	ldr	r1, [sp, #8]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	220a      	movs	r2, #10
 800ca2e:	4648      	mov	r0, r9
 800ca30:	f000 f968 	bl	800cd04 <__multadd>
 800ca34:	9002      	str	r0, [sp, #8]
 800ca36:	e7eb      	b.n	800ca10 <_dtoa_r+0xb70>
 800ca38:	08013ebd 	.word	0x08013ebd
 800ca3c:	08013e58 	.word	0x08013e58

0800ca40 <_free_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4605      	mov	r5, r0
 800ca44:	2900      	cmp	r1, #0
 800ca46:	d041      	beq.n	800cacc <_free_r+0x8c>
 800ca48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca4c:	1f0c      	subs	r4, r1, #4
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	bfb8      	it	lt
 800ca52:	18e4      	addlt	r4, r4, r3
 800ca54:	f000 f8e8 	bl	800cc28 <__malloc_lock>
 800ca58:	4a1d      	ldr	r2, [pc, #116]	@ (800cad0 <_free_r+0x90>)
 800ca5a:	6813      	ldr	r3, [r2, #0]
 800ca5c:	b933      	cbnz	r3, 800ca6c <_free_r+0x2c>
 800ca5e:	6063      	str	r3, [r4, #4]
 800ca60:	6014      	str	r4, [r2, #0]
 800ca62:	4628      	mov	r0, r5
 800ca64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca68:	f000 b8e4 	b.w	800cc34 <__malloc_unlock>
 800ca6c:	42a3      	cmp	r3, r4
 800ca6e:	d908      	bls.n	800ca82 <_free_r+0x42>
 800ca70:	6820      	ldr	r0, [r4, #0]
 800ca72:	1821      	adds	r1, r4, r0
 800ca74:	428b      	cmp	r3, r1
 800ca76:	bf01      	itttt	eq
 800ca78:	6819      	ldreq	r1, [r3, #0]
 800ca7a:	685b      	ldreq	r3, [r3, #4]
 800ca7c:	1809      	addeq	r1, r1, r0
 800ca7e:	6021      	streq	r1, [r4, #0]
 800ca80:	e7ed      	b.n	800ca5e <_free_r+0x1e>
 800ca82:	461a      	mov	r2, r3
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	b10b      	cbz	r3, 800ca8c <_free_r+0x4c>
 800ca88:	42a3      	cmp	r3, r4
 800ca8a:	d9fa      	bls.n	800ca82 <_free_r+0x42>
 800ca8c:	6811      	ldr	r1, [r2, #0]
 800ca8e:	1850      	adds	r0, r2, r1
 800ca90:	42a0      	cmp	r0, r4
 800ca92:	d10b      	bne.n	800caac <_free_r+0x6c>
 800ca94:	6820      	ldr	r0, [r4, #0]
 800ca96:	4401      	add	r1, r0
 800ca98:	1850      	adds	r0, r2, r1
 800ca9a:	4283      	cmp	r3, r0
 800ca9c:	6011      	str	r1, [r2, #0]
 800ca9e:	d1e0      	bne.n	800ca62 <_free_r+0x22>
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	6053      	str	r3, [r2, #4]
 800caa6:	4408      	add	r0, r1
 800caa8:	6010      	str	r0, [r2, #0]
 800caaa:	e7da      	b.n	800ca62 <_free_r+0x22>
 800caac:	d902      	bls.n	800cab4 <_free_r+0x74>
 800caae:	230c      	movs	r3, #12
 800cab0:	602b      	str	r3, [r5, #0]
 800cab2:	e7d6      	b.n	800ca62 <_free_r+0x22>
 800cab4:	6820      	ldr	r0, [r4, #0]
 800cab6:	1821      	adds	r1, r4, r0
 800cab8:	428b      	cmp	r3, r1
 800caba:	bf04      	itt	eq
 800cabc:	6819      	ldreq	r1, [r3, #0]
 800cabe:	685b      	ldreq	r3, [r3, #4]
 800cac0:	6063      	str	r3, [r4, #4]
 800cac2:	bf04      	itt	eq
 800cac4:	1809      	addeq	r1, r1, r0
 800cac6:	6021      	streq	r1, [r4, #0]
 800cac8:	6054      	str	r4, [r2, #4]
 800caca:	e7ca      	b.n	800ca62 <_free_r+0x22>
 800cacc:	bd38      	pop	{r3, r4, r5, pc}
 800cace:	bf00      	nop
 800cad0:	2000f9b0 	.word	0x2000f9b0

0800cad4 <malloc>:
 800cad4:	4b02      	ldr	r3, [pc, #8]	@ (800cae0 <malloc+0xc>)
 800cad6:	4601      	mov	r1, r0
 800cad8:	6818      	ldr	r0, [r3, #0]
 800cada:	f000 b825 	b.w	800cb28 <_malloc_r>
 800cade:	bf00      	nop
 800cae0:	20000114 	.word	0x20000114

0800cae4 <sbrk_aligned>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	4e0f      	ldr	r6, [pc, #60]	@ (800cb24 <sbrk_aligned+0x40>)
 800cae8:	460c      	mov	r4, r1
 800caea:	6831      	ldr	r1, [r6, #0]
 800caec:	4605      	mov	r5, r0
 800caee:	b911      	cbnz	r1, 800caf6 <sbrk_aligned+0x12>
 800caf0:	f001 fe16 	bl	800e720 <_sbrk_r>
 800caf4:	6030      	str	r0, [r6, #0]
 800caf6:	4621      	mov	r1, r4
 800caf8:	4628      	mov	r0, r5
 800cafa:	f001 fe11 	bl	800e720 <_sbrk_r>
 800cafe:	1c43      	adds	r3, r0, #1
 800cb00:	d103      	bne.n	800cb0a <sbrk_aligned+0x26>
 800cb02:	f04f 34ff 	mov.w	r4, #4294967295
 800cb06:	4620      	mov	r0, r4
 800cb08:	bd70      	pop	{r4, r5, r6, pc}
 800cb0a:	1cc4      	adds	r4, r0, #3
 800cb0c:	f024 0403 	bic.w	r4, r4, #3
 800cb10:	42a0      	cmp	r0, r4
 800cb12:	d0f8      	beq.n	800cb06 <sbrk_aligned+0x22>
 800cb14:	1a21      	subs	r1, r4, r0
 800cb16:	4628      	mov	r0, r5
 800cb18:	f001 fe02 	bl	800e720 <_sbrk_r>
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	d1f2      	bne.n	800cb06 <sbrk_aligned+0x22>
 800cb20:	e7ef      	b.n	800cb02 <sbrk_aligned+0x1e>
 800cb22:	bf00      	nop
 800cb24:	2000f9ac 	.word	0x2000f9ac

0800cb28 <_malloc_r>:
 800cb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb2c:	1ccd      	adds	r5, r1, #3
 800cb2e:	f025 0503 	bic.w	r5, r5, #3
 800cb32:	3508      	adds	r5, #8
 800cb34:	2d0c      	cmp	r5, #12
 800cb36:	bf38      	it	cc
 800cb38:	250c      	movcc	r5, #12
 800cb3a:	2d00      	cmp	r5, #0
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	db01      	blt.n	800cb44 <_malloc_r+0x1c>
 800cb40:	42a9      	cmp	r1, r5
 800cb42:	d904      	bls.n	800cb4e <_malloc_r+0x26>
 800cb44:	230c      	movs	r3, #12
 800cb46:	6033      	str	r3, [r6, #0]
 800cb48:	2000      	movs	r0, #0
 800cb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc24 <_malloc_r+0xfc>
 800cb52:	f000 f869 	bl	800cc28 <__malloc_lock>
 800cb56:	f8d8 3000 	ldr.w	r3, [r8]
 800cb5a:	461c      	mov	r4, r3
 800cb5c:	bb44      	cbnz	r4, 800cbb0 <_malloc_r+0x88>
 800cb5e:	4629      	mov	r1, r5
 800cb60:	4630      	mov	r0, r6
 800cb62:	f7ff ffbf 	bl	800cae4 <sbrk_aligned>
 800cb66:	1c43      	adds	r3, r0, #1
 800cb68:	4604      	mov	r4, r0
 800cb6a:	d158      	bne.n	800cc1e <_malloc_r+0xf6>
 800cb6c:	f8d8 4000 	ldr.w	r4, [r8]
 800cb70:	4627      	mov	r7, r4
 800cb72:	2f00      	cmp	r7, #0
 800cb74:	d143      	bne.n	800cbfe <_malloc_r+0xd6>
 800cb76:	2c00      	cmp	r4, #0
 800cb78:	d04b      	beq.n	800cc12 <_malloc_r+0xea>
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	4639      	mov	r1, r7
 800cb7e:	4630      	mov	r0, r6
 800cb80:	eb04 0903 	add.w	r9, r4, r3
 800cb84:	f001 fdcc 	bl	800e720 <_sbrk_r>
 800cb88:	4581      	cmp	r9, r0
 800cb8a:	d142      	bne.n	800cc12 <_malloc_r+0xea>
 800cb8c:	6821      	ldr	r1, [r4, #0]
 800cb8e:	1a6d      	subs	r5, r5, r1
 800cb90:	4629      	mov	r1, r5
 800cb92:	4630      	mov	r0, r6
 800cb94:	f7ff ffa6 	bl	800cae4 <sbrk_aligned>
 800cb98:	3001      	adds	r0, #1
 800cb9a:	d03a      	beq.n	800cc12 <_malloc_r+0xea>
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	442b      	add	r3, r5
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	f8d8 3000 	ldr.w	r3, [r8]
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	bb62      	cbnz	r2, 800cc04 <_malloc_r+0xdc>
 800cbaa:	f8c8 7000 	str.w	r7, [r8]
 800cbae:	e00f      	b.n	800cbd0 <_malloc_r+0xa8>
 800cbb0:	6822      	ldr	r2, [r4, #0]
 800cbb2:	1b52      	subs	r2, r2, r5
 800cbb4:	d420      	bmi.n	800cbf8 <_malloc_r+0xd0>
 800cbb6:	2a0b      	cmp	r2, #11
 800cbb8:	d917      	bls.n	800cbea <_malloc_r+0xc2>
 800cbba:	1961      	adds	r1, r4, r5
 800cbbc:	42a3      	cmp	r3, r4
 800cbbe:	6025      	str	r5, [r4, #0]
 800cbc0:	bf18      	it	ne
 800cbc2:	6059      	strne	r1, [r3, #4]
 800cbc4:	6863      	ldr	r3, [r4, #4]
 800cbc6:	bf08      	it	eq
 800cbc8:	f8c8 1000 	streq.w	r1, [r8]
 800cbcc:	5162      	str	r2, [r4, r5]
 800cbce:	604b      	str	r3, [r1, #4]
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f000 f82f 	bl	800cc34 <__malloc_unlock>
 800cbd6:	f104 000b 	add.w	r0, r4, #11
 800cbda:	1d23      	adds	r3, r4, #4
 800cbdc:	f020 0007 	bic.w	r0, r0, #7
 800cbe0:	1ac2      	subs	r2, r0, r3
 800cbe2:	bf1c      	itt	ne
 800cbe4:	1a1b      	subne	r3, r3, r0
 800cbe6:	50a3      	strne	r3, [r4, r2]
 800cbe8:	e7af      	b.n	800cb4a <_malloc_r+0x22>
 800cbea:	6862      	ldr	r2, [r4, #4]
 800cbec:	42a3      	cmp	r3, r4
 800cbee:	bf0c      	ite	eq
 800cbf0:	f8c8 2000 	streq.w	r2, [r8]
 800cbf4:	605a      	strne	r2, [r3, #4]
 800cbf6:	e7eb      	b.n	800cbd0 <_malloc_r+0xa8>
 800cbf8:	4623      	mov	r3, r4
 800cbfa:	6864      	ldr	r4, [r4, #4]
 800cbfc:	e7ae      	b.n	800cb5c <_malloc_r+0x34>
 800cbfe:	463c      	mov	r4, r7
 800cc00:	687f      	ldr	r7, [r7, #4]
 800cc02:	e7b6      	b.n	800cb72 <_malloc_r+0x4a>
 800cc04:	461a      	mov	r2, r3
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	d1fb      	bne.n	800cc04 <_malloc_r+0xdc>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	6053      	str	r3, [r2, #4]
 800cc10:	e7de      	b.n	800cbd0 <_malloc_r+0xa8>
 800cc12:	230c      	movs	r3, #12
 800cc14:	6033      	str	r3, [r6, #0]
 800cc16:	4630      	mov	r0, r6
 800cc18:	f000 f80c 	bl	800cc34 <__malloc_unlock>
 800cc1c:	e794      	b.n	800cb48 <_malloc_r+0x20>
 800cc1e:	6005      	str	r5, [r0, #0]
 800cc20:	e7d6      	b.n	800cbd0 <_malloc_r+0xa8>
 800cc22:	bf00      	nop
 800cc24:	2000f9b0 	.word	0x2000f9b0

0800cc28 <__malloc_lock>:
 800cc28:	4801      	ldr	r0, [pc, #4]	@ (800cc30 <__malloc_lock+0x8>)
 800cc2a:	f7ff b87c 	b.w	800bd26 <__retarget_lock_acquire_recursive>
 800cc2e:	bf00      	nop
 800cc30:	2000f9a8 	.word	0x2000f9a8

0800cc34 <__malloc_unlock>:
 800cc34:	4801      	ldr	r0, [pc, #4]	@ (800cc3c <__malloc_unlock+0x8>)
 800cc36:	f7ff b877 	b.w	800bd28 <__retarget_lock_release_recursive>
 800cc3a:	bf00      	nop
 800cc3c:	2000f9a8 	.word	0x2000f9a8

0800cc40 <_Balloc>:
 800cc40:	b570      	push	{r4, r5, r6, lr}
 800cc42:	69c6      	ldr	r6, [r0, #28]
 800cc44:	4604      	mov	r4, r0
 800cc46:	460d      	mov	r5, r1
 800cc48:	b976      	cbnz	r6, 800cc68 <_Balloc+0x28>
 800cc4a:	2010      	movs	r0, #16
 800cc4c:	f7ff ff42 	bl	800cad4 <malloc>
 800cc50:	4602      	mov	r2, r0
 800cc52:	61e0      	str	r0, [r4, #28]
 800cc54:	b920      	cbnz	r0, 800cc60 <_Balloc+0x20>
 800cc56:	4b18      	ldr	r3, [pc, #96]	@ (800ccb8 <_Balloc+0x78>)
 800cc58:	4818      	ldr	r0, [pc, #96]	@ (800ccbc <_Balloc+0x7c>)
 800cc5a:	216b      	movs	r1, #107	@ 0x6b
 800cc5c:	f7ff f87a 	bl	800bd54 <__assert_func>
 800cc60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc64:	6006      	str	r6, [r0, #0]
 800cc66:	60c6      	str	r6, [r0, #12]
 800cc68:	69e6      	ldr	r6, [r4, #28]
 800cc6a:	68f3      	ldr	r3, [r6, #12]
 800cc6c:	b183      	cbz	r3, 800cc90 <_Balloc+0x50>
 800cc6e:	69e3      	ldr	r3, [r4, #28]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc76:	b9b8      	cbnz	r0, 800cca8 <_Balloc+0x68>
 800cc78:	2101      	movs	r1, #1
 800cc7a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc7e:	1d72      	adds	r2, r6, #5
 800cc80:	0092      	lsls	r2, r2, #2
 800cc82:	4620      	mov	r0, r4
 800cc84:	f001 fd6b 	bl	800e75e <_calloc_r>
 800cc88:	b160      	cbz	r0, 800cca4 <_Balloc+0x64>
 800cc8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc8e:	e00e      	b.n	800ccae <_Balloc+0x6e>
 800cc90:	2221      	movs	r2, #33	@ 0x21
 800cc92:	2104      	movs	r1, #4
 800cc94:	4620      	mov	r0, r4
 800cc96:	f001 fd62 	bl	800e75e <_calloc_r>
 800cc9a:	69e3      	ldr	r3, [r4, #28]
 800cc9c:	60f0      	str	r0, [r6, #12]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1e4      	bne.n	800cc6e <_Balloc+0x2e>
 800cca4:	2000      	movs	r0, #0
 800cca6:	bd70      	pop	{r4, r5, r6, pc}
 800cca8:	6802      	ldr	r2, [r0, #0]
 800ccaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccb4:	e7f7      	b.n	800cca6 <_Balloc+0x66>
 800ccb6:	bf00      	nop
 800ccb8:	08013d74 	.word	0x08013d74
 800ccbc:	08013ece 	.word	0x08013ece

0800ccc0 <_Bfree>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	69c6      	ldr	r6, [r0, #28]
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	b976      	cbnz	r6, 800cce8 <_Bfree+0x28>
 800ccca:	2010      	movs	r0, #16
 800cccc:	f7ff ff02 	bl	800cad4 <malloc>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	61e8      	str	r0, [r5, #28]
 800ccd4:	b920      	cbnz	r0, 800cce0 <_Bfree+0x20>
 800ccd6:	4b09      	ldr	r3, [pc, #36]	@ (800ccfc <_Bfree+0x3c>)
 800ccd8:	4809      	ldr	r0, [pc, #36]	@ (800cd00 <_Bfree+0x40>)
 800ccda:	218f      	movs	r1, #143	@ 0x8f
 800ccdc:	f7ff f83a 	bl	800bd54 <__assert_func>
 800cce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cce4:	6006      	str	r6, [r0, #0]
 800cce6:	60c6      	str	r6, [r0, #12]
 800cce8:	b13c      	cbz	r4, 800ccfa <_Bfree+0x3a>
 800ccea:	69eb      	ldr	r3, [r5, #28]
 800ccec:	6862      	ldr	r2, [r4, #4]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccf4:	6021      	str	r1, [r4, #0]
 800ccf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
 800ccfc:	08013d74 	.word	0x08013d74
 800cd00:	08013ece 	.word	0x08013ece

0800cd04 <__multadd>:
 800cd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd08:	690d      	ldr	r5, [r1, #16]
 800cd0a:	4607      	mov	r7, r0
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	461e      	mov	r6, r3
 800cd10:	f101 0c14 	add.w	ip, r1, #20
 800cd14:	2000      	movs	r0, #0
 800cd16:	f8dc 3000 	ldr.w	r3, [ip]
 800cd1a:	b299      	uxth	r1, r3
 800cd1c:	fb02 6101 	mla	r1, r2, r1, r6
 800cd20:	0c1e      	lsrs	r6, r3, #16
 800cd22:	0c0b      	lsrs	r3, r1, #16
 800cd24:	fb02 3306 	mla	r3, r2, r6, r3
 800cd28:	b289      	uxth	r1, r1
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd30:	4285      	cmp	r5, r0
 800cd32:	f84c 1b04 	str.w	r1, [ip], #4
 800cd36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd3a:	dcec      	bgt.n	800cd16 <__multadd+0x12>
 800cd3c:	b30e      	cbz	r6, 800cd82 <__multadd+0x7e>
 800cd3e:	68a3      	ldr	r3, [r4, #8]
 800cd40:	42ab      	cmp	r3, r5
 800cd42:	dc19      	bgt.n	800cd78 <__multadd+0x74>
 800cd44:	6861      	ldr	r1, [r4, #4]
 800cd46:	4638      	mov	r0, r7
 800cd48:	3101      	adds	r1, #1
 800cd4a:	f7ff ff79 	bl	800cc40 <_Balloc>
 800cd4e:	4680      	mov	r8, r0
 800cd50:	b928      	cbnz	r0, 800cd5e <__multadd+0x5a>
 800cd52:	4602      	mov	r2, r0
 800cd54:	4b0c      	ldr	r3, [pc, #48]	@ (800cd88 <__multadd+0x84>)
 800cd56:	480d      	ldr	r0, [pc, #52]	@ (800cd8c <__multadd+0x88>)
 800cd58:	21ba      	movs	r1, #186	@ 0xba
 800cd5a:	f7fe fffb 	bl	800bd54 <__assert_func>
 800cd5e:	6922      	ldr	r2, [r4, #16]
 800cd60:	3202      	adds	r2, #2
 800cd62:	f104 010c 	add.w	r1, r4, #12
 800cd66:	0092      	lsls	r2, r2, #2
 800cd68:	300c      	adds	r0, #12
 800cd6a:	f7fe ffde 	bl	800bd2a <memcpy>
 800cd6e:	4621      	mov	r1, r4
 800cd70:	4638      	mov	r0, r7
 800cd72:	f7ff ffa5 	bl	800ccc0 <_Bfree>
 800cd76:	4644      	mov	r4, r8
 800cd78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd7c:	3501      	adds	r5, #1
 800cd7e:	615e      	str	r6, [r3, #20]
 800cd80:	6125      	str	r5, [r4, #16]
 800cd82:	4620      	mov	r0, r4
 800cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd88:	08013ebd 	.word	0x08013ebd
 800cd8c:	08013ece 	.word	0x08013ece

0800cd90 <__s2b>:
 800cd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd94:	460c      	mov	r4, r1
 800cd96:	4615      	mov	r5, r2
 800cd98:	461f      	mov	r7, r3
 800cd9a:	2209      	movs	r2, #9
 800cd9c:	3308      	adds	r3, #8
 800cd9e:	4606      	mov	r6, r0
 800cda0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cda4:	2100      	movs	r1, #0
 800cda6:	2201      	movs	r2, #1
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	db09      	blt.n	800cdc0 <__s2b+0x30>
 800cdac:	4630      	mov	r0, r6
 800cdae:	f7ff ff47 	bl	800cc40 <_Balloc>
 800cdb2:	b940      	cbnz	r0, 800cdc6 <__s2b+0x36>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	4b19      	ldr	r3, [pc, #100]	@ (800ce1c <__s2b+0x8c>)
 800cdb8:	4819      	ldr	r0, [pc, #100]	@ (800ce20 <__s2b+0x90>)
 800cdba:	21d3      	movs	r1, #211	@ 0xd3
 800cdbc:	f7fe ffca 	bl	800bd54 <__assert_func>
 800cdc0:	0052      	lsls	r2, r2, #1
 800cdc2:	3101      	adds	r1, #1
 800cdc4:	e7f0      	b.n	800cda8 <__s2b+0x18>
 800cdc6:	9b08      	ldr	r3, [sp, #32]
 800cdc8:	6143      	str	r3, [r0, #20]
 800cdca:	2d09      	cmp	r5, #9
 800cdcc:	f04f 0301 	mov.w	r3, #1
 800cdd0:	6103      	str	r3, [r0, #16]
 800cdd2:	dd16      	ble.n	800ce02 <__s2b+0x72>
 800cdd4:	f104 0909 	add.w	r9, r4, #9
 800cdd8:	46c8      	mov	r8, r9
 800cdda:	442c      	add	r4, r5
 800cddc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cde0:	4601      	mov	r1, r0
 800cde2:	3b30      	subs	r3, #48	@ 0x30
 800cde4:	220a      	movs	r2, #10
 800cde6:	4630      	mov	r0, r6
 800cde8:	f7ff ff8c 	bl	800cd04 <__multadd>
 800cdec:	45a0      	cmp	r8, r4
 800cdee:	d1f5      	bne.n	800cddc <__s2b+0x4c>
 800cdf0:	f1a5 0408 	sub.w	r4, r5, #8
 800cdf4:	444c      	add	r4, r9
 800cdf6:	1b2d      	subs	r5, r5, r4
 800cdf8:	1963      	adds	r3, r4, r5
 800cdfa:	42bb      	cmp	r3, r7
 800cdfc:	db04      	blt.n	800ce08 <__s2b+0x78>
 800cdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce02:	340a      	adds	r4, #10
 800ce04:	2509      	movs	r5, #9
 800ce06:	e7f6      	b.n	800cdf6 <__s2b+0x66>
 800ce08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce0c:	4601      	mov	r1, r0
 800ce0e:	3b30      	subs	r3, #48	@ 0x30
 800ce10:	220a      	movs	r2, #10
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7ff ff76 	bl	800cd04 <__multadd>
 800ce18:	e7ee      	b.n	800cdf8 <__s2b+0x68>
 800ce1a:	bf00      	nop
 800ce1c:	08013ebd 	.word	0x08013ebd
 800ce20:	08013ece 	.word	0x08013ece

0800ce24 <__hi0bits>:
 800ce24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce28:	4603      	mov	r3, r0
 800ce2a:	bf36      	itet	cc
 800ce2c:	0403      	lslcc	r3, r0, #16
 800ce2e:	2000      	movcs	r0, #0
 800ce30:	2010      	movcc	r0, #16
 800ce32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce36:	bf3c      	itt	cc
 800ce38:	021b      	lslcc	r3, r3, #8
 800ce3a:	3008      	addcc	r0, #8
 800ce3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce40:	bf3c      	itt	cc
 800ce42:	011b      	lslcc	r3, r3, #4
 800ce44:	3004      	addcc	r0, #4
 800ce46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce4a:	bf3c      	itt	cc
 800ce4c:	009b      	lslcc	r3, r3, #2
 800ce4e:	3002      	addcc	r0, #2
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	db05      	blt.n	800ce60 <__hi0bits+0x3c>
 800ce54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ce58:	f100 0001 	add.w	r0, r0, #1
 800ce5c:	bf08      	it	eq
 800ce5e:	2020      	moveq	r0, #32
 800ce60:	4770      	bx	lr

0800ce62 <__lo0bits>:
 800ce62:	6803      	ldr	r3, [r0, #0]
 800ce64:	4602      	mov	r2, r0
 800ce66:	f013 0007 	ands.w	r0, r3, #7
 800ce6a:	d00b      	beq.n	800ce84 <__lo0bits+0x22>
 800ce6c:	07d9      	lsls	r1, r3, #31
 800ce6e:	d421      	bmi.n	800ceb4 <__lo0bits+0x52>
 800ce70:	0798      	lsls	r0, r3, #30
 800ce72:	bf49      	itett	mi
 800ce74:	085b      	lsrmi	r3, r3, #1
 800ce76:	089b      	lsrpl	r3, r3, #2
 800ce78:	2001      	movmi	r0, #1
 800ce7a:	6013      	strmi	r3, [r2, #0]
 800ce7c:	bf5c      	itt	pl
 800ce7e:	6013      	strpl	r3, [r2, #0]
 800ce80:	2002      	movpl	r0, #2
 800ce82:	4770      	bx	lr
 800ce84:	b299      	uxth	r1, r3
 800ce86:	b909      	cbnz	r1, 800ce8c <__lo0bits+0x2a>
 800ce88:	0c1b      	lsrs	r3, r3, #16
 800ce8a:	2010      	movs	r0, #16
 800ce8c:	b2d9      	uxtb	r1, r3
 800ce8e:	b909      	cbnz	r1, 800ce94 <__lo0bits+0x32>
 800ce90:	3008      	adds	r0, #8
 800ce92:	0a1b      	lsrs	r3, r3, #8
 800ce94:	0719      	lsls	r1, r3, #28
 800ce96:	bf04      	itt	eq
 800ce98:	091b      	lsreq	r3, r3, #4
 800ce9a:	3004      	addeq	r0, #4
 800ce9c:	0799      	lsls	r1, r3, #30
 800ce9e:	bf04      	itt	eq
 800cea0:	089b      	lsreq	r3, r3, #2
 800cea2:	3002      	addeq	r0, #2
 800cea4:	07d9      	lsls	r1, r3, #31
 800cea6:	d403      	bmi.n	800ceb0 <__lo0bits+0x4e>
 800cea8:	085b      	lsrs	r3, r3, #1
 800ceaa:	f100 0001 	add.w	r0, r0, #1
 800ceae:	d003      	beq.n	800ceb8 <__lo0bits+0x56>
 800ceb0:	6013      	str	r3, [r2, #0]
 800ceb2:	4770      	bx	lr
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	4770      	bx	lr
 800ceb8:	2020      	movs	r0, #32
 800ceba:	4770      	bx	lr

0800cebc <__i2b>:
 800cebc:	b510      	push	{r4, lr}
 800cebe:	460c      	mov	r4, r1
 800cec0:	2101      	movs	r1, #1
 800cec2:	f7ff febd 	bl	800cc40 <_Balloc>
 800cec6:	4602      	mov	r2, r0
 800cec8:	b928      	cbnz	r0, 800ced6 <__i2b+0x1a>
 800ceca:	4b05      	ldr	r3, [pc, #20]	@ (800cee0 <__i2b+0x24>)
 800cecc:	4805      	ldr	r0, [pc, #20]	@ (800cee4 <__i2b+0x28>)
 800cece:	f240 1145 	movw	r1, #325	@ 0x145
 800ced2:	f7fe ff3f 	bl	800bd54 <__assert_func>
 800ced6:	2301      	movs	r3, #1
 800ced8:	6144      	str	r4, [r0, #20]
 800ceda:	6103      	str	r3, [r0, #16]
 800cedc:	bd10      	pop	{r4, pc}
 800cede:	bf00      	nop
 800cee0:	08013ebd 	.word	0x08013ebd
 800cee4:	08013ece 	.word	0x08013ece

0800cee8 <__multiply>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	4617      	mov	r7, r2
 800ceee:	690a      	ldr	r2, [r1, #16]
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	bfa8      	it	ge
 800cef6:	463b      	movge	r3, r7
 800cef8:	4689      	mov	r9, r1
 800cefa:	bfa4      	itt	ge
 800cefc:	460f      	movge	r7, r1
 800cefe:	4699      	movge	r9, r3
 800cf00:	693d      	ldr	r5, [r7, #16]
 800cf02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	eb05 060a 	add.w	r6, r5, sl
 800cf0e:	42b3      	cmp	r3, r6
 800cf10:	b085      	sub	sp, #20
 800cf12:	bfb8      	it	lt
 800cf14:	3101      	addlt	r1, #1
 800cf16:	f7ff fe93 	bl	800cc40 <_Balloc>
 800cf1a:	b930      	cbnz	r0, 800cf2a <__multiply+0x42>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	4b41      	ldr	r3, [pc, #260]	@ (800d024 <__multiply+0x13c>)
 800cf20:	4841      	ldr	r0, [pc, #260]	@ (800d028 <__multiply+0x140>)
 800cf22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf26:	f7fe ff15 	bl	800bd54 <__assert_func>
 800cf2a:	f100 0414 	add.w	r4, r0, #20
 800cf2e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cf32:	4623      	mov	r3, r4
 800cf34:	2200      	movs	r2, #0
 800cf36:	4573      	cmp	r3, lr
 800cf38:	d320      	bcc.n	800cf7c <__multiply+0x94>
 800cf3a:	f107 0814 	add.w	r8, r7, #20
 800cf3e:	f109 0114 	add.w	r1, r9, #20
 800cf42:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cf46:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cf4a:	9302      	str	r3, [sp, #8]
 800cf4c:	1beb      	subs	r3, r5, r7
 800cf4e:	3b15      	subs	r3, #21
 800cf50:	f023 0303 	bic.w	r3, r3, #3
 800cf54:	3304      	adds	r3, #4
 800cf56:	3715      	adds	r7, #21
 800cf58:	42bd      	cmp	r5, r7
 800cf5a:	bf38      	it	cc
 800cf5c:	2304      	movcc	r3, #4
 800cf5e:	9301      	str	r3, [sp, #4]
 800cf60:	9b02      	ldr	r3, [sp, #8]
 800cf62:	9103      	str	r1, [sp, #12]
 800cf64:	428b      	cmp	r3, r1
 800cf66:	d80c      	bhi.n	800cf82 <__multiply+0x9a>
 800cf68:	2e00      	cmp	r6, #0
 800cf6a:	dd03      	ble.n	800cf74 <__multiply+0x8c>
 800cf6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d055      	beq.n	800d020 <__multiply+0x138>
 800cf74:	6106      	str	r6, [r0, #16]
 800cf76:	b005      	add	sp, #20
 800cf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7c:	f843 2b04 	str.w	r2, [r3], #4
 800cf80:	e7d9      	b.n	800cf36 <__multiply+0x4e>
 800cf82:	f8b1 a000 	ldrh.w	sl, [r1]
 800cf86:	f1ba 0f00 	cmp.w	sl, #0
 800cf8a:	d01f      	beq.n	800cfcc <__multiply+0xe4>
 800cf8c:	46c4      	mov	ip, r8
 800cf8e:	46a1      	mov	r9, r4
 800cf90:	2700      	movs	r7, #0
 800cf92:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf96:	f8d9 3000 	ldr.w	r3, [r9]
 800cf9a:	fa1f fb82 	uxth.w	fp, r2
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	fb0a 330b 	mla	r3, sl, fp, r3
 800cfa4:	443b      	add	r3, r7
 800cfa6:	f8d9 7000 	ldr.w	r7, [r9]
 800cfaa:	0c12      	lsrs	r2, r2, #16
 800cfac:	0c3f      	lsrs	r7, r7, #16
 800cfae:	fb0a 7202 	mla	r2, sl, r2, r7
 800cfb2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfbc:	4565      	cmp	r5, ip
 800cfbe:	f849 3b04 	str.w	r3, [r9], #4
 800cfc2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cfc6:	d8e4      	bhi.n	800cf92 <__multiply+0xaa>
 800cfc8:	9b01      	ldr	r3, [sp, #4]
 800cfca:	50e7      	str	r7, [r4, r3]
 800cfcc:	9b03      	ldr	r3, [sp, #12]
 800cfce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cfd2:	3104      	adds	r1, #4
 800cfd4:	f1b9 0f00 	cmp.w	r9, #0
 800cfd8:	d020      	beq.n	800d01c <__multiply+0x134>
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	4647      	mov	r7, r8
 800cfde:	46a4      	mov	ip, r4
 800cfe0:	f04f 0a00 	mov.w	sl, #0
 800cfe4:	f8b7 b000 	ldrh.w	fp, [r7]
 800cfe8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cfec:	fb09 220b 	mla	r2, r9, fp, r2
 800cff0:	4452      	add	r2, sl
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cff8:	f84c 3b04 	str.w	r3, [ip], #4
 800cffc:	f857 3b04 	ldr.w	r3, [r7], #4
 800d000:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d004:	f8bc 3000 	ldrh.w	r3, [ip]
 800d008:	fb09 330a 	mla	r3, r9, sl, r3
 800d00c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d010:	42bd      	cmp	r5, r7
 800d012:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d016:	d8e5      	bhi.n	800cfe4 <__multiply+0xfc>
 800d018:	9a01      	ldr	r2, [sp, #4]
 800d01a:	50a3      	str	r3, [r4, r2]
 800d01c:	3404      	adds	r4, #4
 800d01e:	e79f      	b.n	800cf60 <__multiply+0x78>
 800d020:	3e01      	subs	r6, #1
 800d022:	e7a1      	b.n	800cf68 <__multiply+0x80>
 800d024:	08013ebd 	.word	0x08013ebd
 800d028:	08013ece 	.word	0x08013ece

0800d02c <__pow5mult>:
 800d02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d030:	4615      	mov	r5, r2
 800d032:	f012 0203 	ands.w	r2, r2, #3
 800d036:	4607      	mov	r7, r0
 800d038:	460e      	mov	r6, r1
 800d03a:	d007      	beq.n	800d04c <__pow5mult+0x20>
 800d03c:	4c25      	ldr	r4, [pc, #148]	@ (800d0d4 <__pow5mult+0xa8>)
 800d03e:	3a01      	subs	r2, #1
 800d040:	2300      	movs	r3, #0
 800d042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d046:	f7ff fe5d 	bl	800cd04 <__multadd>
 800d04a:	4606      	mov	r6, r0
 800d04c:	10ad      	asrs	r5, r5, #2
 800d04e:	d03d      	beq.n	800d0cc <__pow5mult+0xa0>
 800d050:	69fc      	ldr	r4, [r7, #28]
 800d052:	b97c      	cbnz	r4, 800d074 <__pow5mult+0x48>
 800d054:	2010      	movs	r0, #16
 800d056:	f7ff fd3d 	bl	800cad4 <malloc>
 800d05a:	4602      	mov	r2, r0
 800d05c:	61f8      	str	r0, [r7, #28]
 800d05e:	b928      	cbnz	r0, 800d06c <__pow5mult+0x40>
 800d060:	4b1d      	ldr	r3, [pc, #116]	@ (800d0d8 <__pow5mult+0xac>)
 800d062:	481e      	ldr	r0, [pc, #120]	@ (800d0dc <__pow5mult+0xb0>)
 800d064:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d068:	f7fe fe74 	bl	800bd54 <__assert_func>
 800d06c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d070:	6004      	str	r4, [r0, #0]
 800d072:	60c4      	str	r4, [r0, #12]
 800d074:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d078:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d07c:	b94c      	cbnz	r4, 800d092 <__pow5mult+0x66>
 800d07e:	f240 2171 	movw	r1, #625	@ 0x271
 800d082:	4638      	mov	r0, r7
 800d084:	f7ff ff1a 	bl	800cebc <__i2b>
 800d088:	2300      	movs	r3, #0
 800d08a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d08e:	4604      	mov	r4, r0
 800d090:	6003      	str	r3, [r0, #0]
 800d092:	f04f 0900 	mov.w	r9, #0
 800d096:	07eb      	lsls	r3, r5, #31
 800d098:	d50a      	bpl.n	800d0b0 <__pow5mult+0x84>
 800d09a:	4631      	mov	r1, r6
 800d09c:	4622      	mov	r2, r4
 800d09e:	4638      	mov	r0, r7
 800d0a0:	f7ff ff22 	bl	800cee8 <__multiply>
 800d0a4:	4631      	mov	r1, r6
 800d0a6:	4680      	mov	r8, r0
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	f7ff fe09 	bl	800ccc0 <_Bfree>
 800d0ae:	4646      	mov	r6, r8
 800d0b0:	106d      	asrs	r5, r5, #1
 800d0b2:	d00b      	beq.n	800d0cc <__pow5mult+0xa0>
 800d0b4:	6820      	ldr	r0, [r4, #0]
 800d0b6:	b938      	cbnz	r0, 800d0c8 <__pow5mult+0x9c>
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	4638      	mov	r0, r7
 800d0be:	f7ff ff13 	bl	800cee8 <__multiply>
 800d0c2:	6020      	str	r0, [r4, #0]
 800d0c4:	f8c0 9000 	str.w	r9, [r0]
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	e7e4      	b.n	800d096 <__pow5mult+0x6a>
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0d2:	bf00      	nop
 800d0d4:	08013fa4 	.word	0x08013fa4
 800d0d8:	08013d74 	.word	0x08013d74
 800d0dc:	08013ece 	.word	0x08013ece

0800d0e0 <__lshift>:
 800d0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e4:	460c      	mov	r4, r1
 800d0e6:	6849      	ldr	r1, [r1, #4]
 800d0e8:	6923      	ldr	r3, [r4, #16]
 800d0ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0ee:	68a3      	ldr	r3, [r4, #8]
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	4691      	mov	r9, r2
 800d0f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0f8:	f108 0601 	add.w	r6, r8, #1
 800d0fc:	42b3      	cmp	r3, r6
 800d0fe:	db0b      	blt.n	800d118 <__lshift+0x38>
 800d100:	4638      	mov	r0, r7
 800d102:	f7ff fd9d 	bl	800cc40 <_Balloc>
 800d106:	4605      	mov	r5, r0
 800d108:	b948      	cbnz	r0, 800d11e <__lshift+0x3e>
 800d10a:	4602      	mov	r2, r0
 800d10c:	4b28      	ldr	r3, [pc, #160]	@ (800d1b0 <__lshift+0xd0>)
 800d10e:	4829      	ldr	r0, [pc, #164]	@ (800d1b4 <__lshift+0xd4>)
 800d110:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d114:	f7fe fe1e 	bl	800bd54 <__assert_func>
 800d118:	3101      	adds	r1, #1
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	e7ee      	b.n	800d0fc <__lshift+0x1c>
 800d11e:	2300      	movs	r3, #0
 800d120:	f100 0114 	add.w	r1, r0, #20
 800d124:	f100 0210 	add.w	r2, r0, #16
 800d128:	4618      	mov	r0, r3
 800d12a:	4553      	cmp	r3, sl
 800d12c:	db33      	blt.n	800d196 <__lshift+0xb6>
 800d12e:	6920      	ldr	r0, [r4, #16]
 800d130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d134:	f104 0314 	add.w	r3, r4, #20
 800d138:	f019 091f 	ands.w	r9, r9, #31
 800d13c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d140:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d144:	d02b      	beq.n	800d19e <__lshift+0xbe>
 800d146:	f1c9 0e20 	rsb	lr, r9, #32
 800d14a:	468a      	mov	sl, r1
 800d14c:	2200      	movs	r2, #0
 800d14e:	6818      	ldr	r0, [r3, #0]
 800d150:	fa00 f009 	lsl.w	r0, r0, r9
 800d154:	4310      	orrs	r0, r2
 800d156:	f84a 0b04 	str.w	r0, [sl], #4
 800d15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d15e:	459c      	cmp	ip, r3
 800d160:	fa22 f20e 	lsr.w	r2, r2, lr
 800d164:	d8f3      	bhi.n	800d14e <__lshift+0x6e>
 800d166:	ebac 0304 	sub.w	r3, ip, r4
 800d16a:	3b15      	subs	r3, #21
 800d16c:	f023 0303 	bic.w	r3, r3, #3
 800d170:	3304      	adds	r3, #4
 800d172:	f104 0015 	add.w	r0, r4, #21
 800d176:	4560      	cmp	r0, ip
 800d178:	bf88      	it	hi
 800d17a:	2304      	movhi	r3, #4
 800d17c:	50ca      	str	r2, [r1, r3]
 800d17e:	b10a      	cbz	r2, 800d184 <__lshift+0xa4>
 800d180:	f108 0602 	add.w	r6, r8, #2
 800d184:	3e01      	subs	r6, #1
 800d186:	4638      	mov	r0, r7
 800d188:	612e      	str	r6, [r5, #16]
 800d18a:	4621      	mov	r1, r4
 800d18c:	f7ff fd98 	bl	800ccc0 <_Bfree>
 800d190:	4628      	mov	r0, r5
 800d192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d196:	f842 0f04 	str.w	r0, [r2, #4]!
 800d19a:	3301      	adds	r3, #1
 800d19c:	e7c5      	b.n	800d12a <__lshift+0x4a>
 800d19e:	3904      	subs	r1, #4
 800d1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1a8:	459c      	cmp	ip, r3
 800d1aa:	d8f9      	bhi.n	800d1a0 <__lshift+0xc0>
 800d1ac:	e7ea      	b.n	800d184 <__lshift+0xa4>
 800d1ae:	bf00      	nop
 800d1b0:	08013ebd 	.word	0x08013ebd
 800d1b4:	08013ece 	.word	0x08013ece

0800d1b8 <__mcmp>:
 800d1b8:	690a      	ldr	r2, [r1, #16]
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	6900      	ldr	r0, [r0, #16]
 800d1be:	1a80      	subs	r0, r0, r2
 800d1c0:	b530      	push	{r4, r5, lr}
 800d1c2:	d10e      	bne.n	800d1e2 <__mcmp+0x2a>
 800d1c4:	3314      	adds	r3, #20
 800d1c6:	3114      	adds	r1, #20
 800d1c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d1cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d1d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d1d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d1d8:	4295      	cmp	r5, r2
 800d1da:	d003      	beq.n	800d1e4 <__mcmp+0x2c>
 800d1dc:	d205      	bcs.n	800d1ea <__mcmp+0x32>
 800d1de:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e2:	bd30      	pop	{r4, r5, pc}
 800d1e4:	42a3      	cmp	r3, r4
 800d1e6:	d3f3      	bcc.n	800d1d0 <__mcmp+0x18>
 800d1e8:	e7fb      	b.n	800d1e2 <__mcmp+0x2a>
 800d1ea:	2001      	movs	r0, #1
 800d1ec:	e7f9      	b.n	800d1e2 <__mcmp+0x2a>
	...

0800d1f0 <__mdiff>:
 800d1f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f4:	4689      	mov	r9, r1
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	4648      	mov	r0, r9
 800d1fc:	4614      	mov	r4, r2
 800d1fe:	f7ff ffdb 	bl	800d1b8 <__mcmp>
 800d202:	1e05      	subs	r5, r0, #0
 800d204:	d112      	bne.n	800d22c <__mdiff+0x3c>
 800d206:	4629      	mov	r1, r5
 800d208:	4630      	mov	r0, r6
 800d20a:	f7ff fd19 	bl	800cc40 <_Balloc>
 800d20e:	4602      	mov	r2, r0
 800d210:	b928      	cbnz	r0, 800d21e <__mdiff+0x2e>
 800d212:	4b3f      	ldr	r3, [pc, #252]	@ (800d310 <__mdiff+0x120>)
 800d214:	f240 2137 	movw	r1, #567	@ 0x237
 800d218:	483e      	ldr	r0, [pc, #248]	@ (800d314 <__mdiff+0x124>)
 800d21a:	f7fe fd9b 	bl	800bd54 <__assert_func>
 800d21e:	2301      	movs	r3, #1
 800d220:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d224:	4610      	mov	r0, r2
 800d226:	b003      	add	sp, #12
 800d228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22c:	bfbc      	itt	lt
 800d22e:	464b      	movlt	r3, r9
 800d230:	46a1      	movlt	r9, r4
 800d232:	4630      	mov	r0, r6
 800d234:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d238:	bfba      	itte	lt
 800d23a:	461c      	movlt	r4, r3
 800d23c:	2501      	movlt	r5, #1
 800d23e:	2500      	movge	r5, #0
 800d240:	f7ff fcfe 	bl	800cc40 <_Balloc>
 800d244:	4602      	mov	r2, r0
 800d246:	b918      	cbnz	r0, 800d250 <__mdiff+0x60>
 800d248:	4b31      	ldr	r3, [pc, #196]	@ (800d310 <__mdiff+0x120>)
 800d24a:	f240 2145 	movw	r1, #581	@ 0x245
 800d24e:	e7e3      	b.n	800d218 <__mdiff+0x28>
 800d250:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d254:	6926      	ldr	r6, [r4, #16]
 800d256:	60c5      	str	r5, [r0, #12]
 800d258:	f109 0310 	add.w	r3, r9, #16
 800d25c:	f109 0514 	add.w	r5, r9, #20
 800d260:	f104 0e14 	add.w	lr, r4, #20
 800d264:	f100 0b14 	add.w	fp, r0, #20
 800d268:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d26c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d270:	9301      	str	r3, [sp, #4]
 800d272:	46d9      	mov	r9, fp
 800d274:	f04f 0c00 	mov.w	ip, #0
 800d278:	9b01      	ldr	r3, [sp, #4]
 800d27a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d27e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d282:	9301      	str	r3, [sp, #4]
 800d284:	fa1f f38a 	uxth.w	r3, sl
 800d288:	4619      	mov	r1, r3
 800d28a:	b283      	uxth	r3, r0
 800d28c:	1acb      	subs	r3, r1, r3
 800d28e:	0c00      	lsrs	r0, r0, #16
 800d290:	4463      	add	r3, ip
 800d292:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d296:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d2a0:	4576      	cmp	r6, lr
 800d2a2:	f849 3b04 	str.w	r3, [r9], #4
 800d2a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2aa:	d8e5      	bhi.n	800d278 <__mdiff+0x88>
 800d2ac:	1b33      	subs	r3, r6, r4
 800d2ae:	3b15      	subs	r3, #21
 800d2b0:	f023 0303 	bic.w	r3, r3, #3
 800d2b4:	3415      	adds	r4, #21
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	42a6      	cmp	r6, r4
 800d2ba:	bf38      	it	cc
 800d2bc:	2304      	movcc	r3, #4
 800d2be:	441d      	add	r5, r3
 800d2c0:	445b      	add	r3, fp
 800d2c2:	461e      	mov	r6, r3
 800d2c4:	462c      	mov	r4, r5
 800d2c6:	4544      	cmp	r4, r8
 800d2c8:	d30e      	bcc.n	800d2e8 <__mdiff+0xf8>
 800d2ca:	f108 0103 	add.w	r1, r8, #3
 800d2ce:	1b49      	subs	r1, r1, r5
 800d2d0:	f021 0103 	bic.w	r1, r1, #3
 800d2d4:	3d03      	subs	r5, #3
 800d2d6:	45a8      	cmp	r8, r5
 800d2d8:	bf38      	it	cc
 800d2da:	2100      	movcc	r1, #0
 800d2dc:	440b      	add	r3, r1
 800d2de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d2e2:	b191      	cbz	r1, 800d30a <__mdiff+0x11a>
 800d2e4:	6117      	str	r7, [r2, #16]
 800d2e6:	e79d      	b.n	800d224 <__mdiff+0x34>
 800d2e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d2ec:	46e6      	mov	lr, ip
 800d2ee:	0c08      	lsrs	r0, r1, #16
 800d2f0:	fa1c fc81 	uxtah	ip, ip, r1
 800d2f4:	4471      	add	r1, lr
 800d2f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d2fa:	b289      	uxth	r1, r1
 800d2fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d300:	f846 1b04 	str.w	r1, [r6], #4
 800d304:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d308:	e7dd      	b.n	800d2c6 <__mdiff+0xd6>
 800d30a:	3f01      	subs	r7, #1
 800d30c:	e7e7      	b.n	800d2de <__mdiff+0xee>
 800d30e:	bf00      	nop
 800d310:	08013ebd 	.word	0x08013ebd
 800d314:	08013ece 	.word	0x08013ece

0800d318 <__ulp>:
 800d318:	b082      	sub	sp, #8
 800d31a:	ed8d 0b00 	vstr	d0, [sp]
 800d31e:	9a01      	ldr	r2, [sp, #4]
 800d320:	4b0f      	ldr	r3, [pc, #60]	@ (800d360 <__ulp+0x48>)
 800d322:	4013      	ands	r3, r2
 800d324:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	dc08      	bgt.n	800d33e <__ulp+0x26>
 800d32c:	425b      	negs	r3, r3
 800d32e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d332:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d336:	da04      	bge.n	800d342 <__ulp+0x2a>
 800d338:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d33c:	4113      	asrs	r3, r2
 800d33e:	2200      	movs	r2, #0
 800d340:	e008      	b.n	800d354 <__ulp+0x3c>
 800d342:	f1a2 0314 	sub.w	r3, r2, #20
 800d346:	2b1e      	cmp	r3, #30
 800d348:	bfda      	itte	le
 800d34a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d34e:	40da      	lsrle	r2, r3
 800d350:	2201      	movgt	r2, #1
 800d352:	2300      	movs	r3, #0
 800d354:	4619      	mov	r1, r3
 800d356:	4610      	mov	r0, r2
 800d358:	ec41 0b10 	vmov	d0, r0, r1
 800d35c:	b002      	add	sp, #8
 800d35e:	4770      	bx	lr
 800d360:	7ff00000 	.word	0x7ff00000

0800d364 <__b2d>:
 800d364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d368:	6906      	ldr	r6, [r0, #16]
 800d36a:	f100 0814 	add.w	r8, r0, #20
 800d36e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d372:	1f37      	subs	r7, r6, #4
 800d374:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d378:	4610      	mov	r0, r2
 800d37a:	f7ff fd53 	bl	800ce24 <__hi0bits>
 800d37e:	f1c0 0320 	rsb	r3, r0, #32
 800d382:	280a      	cmp	r0, #10
 800d384:	600b      	str	r3, [r1, #0]
 800d386:	491b      	ldr	r1, [pc, #108]	@ (800d3f4 <__b2d+0x90>)
 800d388:	dc15      	bgt.n	800d3b6 <__b2d+0x52>
 800d38a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d38e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d392:	45b8      	cmp	r8, r7
 800d394:	ea43 0501 	orr.w	r5, r3, r1
 800d398:	bf34      	ite	cc
 800d39a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d39e:	2300      	movcs	r3, #0
 800d3a0:	3015      	adds	r0, #21
 800d3a2:	fa02 f000 	lsl.w	r0, r2, r0
 800d3a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800d3aa:	4303      	orrs	r3, r0
 800d3ac:	461c      	mov	r4, r3
 800d3ae:	ec45 4b10 	vmov	d0, r4, r5
 800d3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b6:	45b8      	cmp	r8, r7
 800d3b8:	bf3a      	itte	cc
 800d3ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d3be:	f1a6 0708 	subcc.w	r7, r6, #8
 800d3c2:	2300      	movcs	r3, #0
 800d3c4:	380b      	subs	r0, #11
 800d3c6:	d012      	beq.n	800d3ee <__b2d+0x8a>
 800d3c8:	f1c0 0120 	rsb	r1, r0, #32
 800d3cc:	fa23 f401 	lsr.w	r4, r3, r1
 800d3d0:	4082      	lsls	r2, r0
 800d3d2:	4322      	orrs	r2, r4
 800d3d4:	4547      	cmp	r7, r8
 800d3d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d3da:	bf8c      	ite	hi
 800d3dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d3e0:	2200      	movls	r2, #0
 800d3e2:	4083      	lsls	r3, r0
 800d3e4:	40ca      	lsrs	r2, r1
 800d3e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	e7de      	b.n	800d3ac <__b2d+0x48>
 800d3ee:	ea42 0501 	orr.w	r5, r2, r1
 800d3f2:	e7db      	b.n	800d3ac <__b2d+0x48>
 800d3f4:	3ff00000 	.word	0x3ff00000

0800d3f8 <__d2b>:
 800d3f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3fc:	460f      	mov	r7, r1
 800d3fe:	2101      	movs	r1, #1
 800d400:	ec59 8b10 	vmov	r8, r9, d0
 800d404:	4616      	mov	r6, r2
 800d406:	f7ff fc1b 	bl	800cc40 <_Balloc>
 800d40a:	4604      	mov	r4, r0
 800d40c:	b930      	cbnz	r0, 800d41c <__d2b+0x24>
 800d40e:	4602      	mov	r2, r0
 800d410:	4b23      	ldr	r3, [pc, #140]	@ (800d4a0 <__d2b+0xa8>)
 800d412:	4824      	ldr	r0, [pc, #144]	@ (800d4a4 <__d2b+0xac>)
 800d414:	f240 310f 	movw	r1, #783	@ 0x30f
 800d418:	f7fe fc9c 	bl	800bd54 <__assert_func>
 800d41c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d424:	b10d      	cbz	r5, 800d42a <__d2b+0x32>
 800d426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d42a:	9301      	str	r3, [sp, #4]
 800d42c:	f1b8 0300 	subs.w	r3, r8, #0
 800d430:	d023      	beq.n	800d47a <__d2b+0x82>
 800d432:	4668      	mov	r0, sp
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	f7ff fd14 	bl	800ce62 <__lo0bits>
 800d43a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d43e:	b1d0      	cbz	r0, 800d476 <__d2b+0x7e>
 800d440:	f1c0 0320 	rsb	r3, r0, #32
 800d444:	fa02 f303 	lsl.w	r3, r2, r3
 800d448:	430b      	orrs	r3, r1
 800d44a:	40c2      	lsrs	r2, r0
 800d44c:	6163      	str	r3, [r4, #20]
 800d44e:	9201      	str	r2, [sp, #4]
 800d450:	9b01      	ldr	r3, [sp, #4]
 800d452:	61a3      	str	r3, [r4, #24]
 800d454:	2b00      	cmp	r3, #0
 800d456:	bf0c      	ite	eq
 800d458:	2201      	moveq	r2, #1
 800d45a:	2202      	movne	r2, #2
 800d45c:	6122      	str	r2, [r4, #16]
 800d45e:	b1a5      	cbz	r5, 800d48a <__d2b+0x92>
 800d460:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d464:	4405      	add	r5, r0
 800d466:	603d      	str	r5, [r7, #0]
 800d468:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d46c:	6030      	str	r0, [r6, #0]
 800d46e:	4620      	mov	r0, r4
 800d470:	b003      	add	sp, #12
 800d472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d476:	6161      	str	r1, [r4, #20]
 800d478:	e7ea      	b.n	800d450 <__d2b+0x58>
 800d47a:	a801      	add	r0, sp, #4
 800d47c:	f7ff fcf1 	bl	800ce62 <__lo0bits>
 800d480:	9b01      	ldr	r3, [sp, #4]
 800d482:	6163      	str	r3, [r4, #20]
 800d484:	3020      	adds	r0, #32
 800d486:	2201      	movs	r2, #1
 800d488:	e7e8      	b.n	800d45c <__d2b+0x64>
 800d48a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d48e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d492:	6038      	str	r0, [r7, #0]
 800d494:	6918      	ldr	r0, [r3, #16]
 800d496:	f7ff fcc5 	bl	800ce24 <__hi0bits>
 800d49a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d49e:	e7e5      	b.n	800d46c <__d2b+0x74>
 800d4a0:	08013ebd 	.word	0x08013ebd
 800d4a4:	08013ece 	.word	0x08013ece

0800d4a8 <__ratio>:
 800d4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	b085      	sub	sp, #20
 800d4ae:	e9cd 1000 	strd	r1, r0, [sp]
 800d4b2:	a902      	add	r1, sp, #8
 800d4b4:	f7ff ff56 	bl	800d364 <__b2d>
 800d4b8:	9800      	ldr	r0, [sp, #0]
 800d4ba:	a903      	add	r1, sp, #12
 800d4bc:	ec55 4b10 	vmov	r4, r5, d0
 800d4c0:	f7ff ff50 	bl	800d364 <__b2d>
 800d4c4:	9b01      	ldr	r3, [sp, #4]
 800d4c6:	6919      	ldr	r1, [r3, #16]
 800d4c8:	9b00      	ldr	r3, [sp, #0]
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	1ac9      	subs	r1, r1, r3
 800d4ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d4d2:	1a9b      	subs	r3, r3, r2
 800d4d4:	ec5b ab10 	vmov	sl, fp, d0
 800d4d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	bfce      	itee	gt
 800d4e0:	462a      	movgt	r2, r5
 800d4e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d4e6:	465a      	movle	r2, fp
 800d4e8:	462f      	mov	r7, r5
 800d4ea:	46d9      	mov	r9, fp
 800d4ec:	bfcc      	ite	gt
 800d4ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d4f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d4f6:	464b      	mov	r3, r9
 800d4f8:	4652      	mov	r2, sl
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	f7f3 f9a5 	bl	800084c <__aeabi_ddiv>
 800d502:	ec41 0b10 	vmov	d0, r0, r1
 800d506:	b005      	add	sp, #20
 800d508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d50c <__copybits>:
 800d50c:	3901      	subs	r1, #1
 800d50e:	b570      	push	{r4, r5, r6, lr}
 800d510:	1149      	asrs	r1, r1, #5
 800d512:	6914      	ldr	r4, [r2, #16]
 800d514:	3101      	adds	r1, #1
 800d516:	f102 0314 	add.w	r3, r2, #20
 800d51a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d51e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d522:	1f05      	subs	r5, r0, #4
 800d524:	42a3      	cmp	r3, r4
 800d526:	d30c      	bcc.n	800d542 <__copybits+0x36>
 800d528:	1aa3      	subs	r3, r4, r2
 800d52a:	3b11      	subs	r3, #17
 800d52c:	f023 0303 	bic.w	r3, r3, #3
 800d530:	3211      	adds	r2, #17
 800d532:	42a2      	cmp	r2, r4
 800d534:	bf88      	it	hi
 800d536:	2300      	movhi	r3, #0
 800d538:	4418      	add	r0, r3
 800d53a:	2300      	movs	r3, #0
 800d53c:	4288      	cmp	r0, r1
 800d53e:	d305      	bcc.n	800d54c <__copybits+0x40>
 800d540:	bd70      	pop	{r4, r5, r6, pc}
 800d542:	f853 6b04 	ldr.w	r6, [r3], #4
 800d546:	f845 6f04 	str.w	r6, [r5, #4]!
 800d54a:	e7eb      	b.n	800d524 <__copybits+0x18>
 800d54c:	f840 3b04 	str.w	r3, [r0], #4
 800d550:	e7f4      	b.n	800d53c <__copybits+0x30>

0800d552 <__any_on>:
 800d552:	f100 0214 	add.w	r2, r0, #20
 800d556:	6900      	ldr	r0, [r0, #16]
 800d558:	114b      	asrs	r3, r1, #5
 800d55a:	4298      	cmp	r0, r3
 800d55c:	b510      	push	{r4, lr}
 800d55e:	db11      	blt.n	800d584 <__any_on+0x32>
 800d560:	dd0a      	ble.n	800d578 <__any_on+0x26>
 800d562:	f011 011f 	ands.w	r1, r1, #31
 800d566:	d007      	beq.n	800d578 <__any_on+0x26>
 800d568:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d56c:	fa24 f001 	lsr.w	r0, r4, r1
 800d570:	fa00 f101 	lsl.w	r1, r0, r1
 800d574:	428c      	cmp	r4, r1
 800d576:	d10b      	bne.n	800d590 <__any_on+0x3e>
 800d578:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d803      	bhi.n	800d588 <__any_on+0x36>
 800d580:	2000      	movs	r0, #0
 800d582:	bd10      	pop	{r4, pc}
 800d584:	4603      	mov	r3, r0
 800d586:	e7f7      	b.n	800d578 <__any_on+0x26>
 800d588:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d58c:	2900      	cmp	r1, #0
 800d58e:	d0f5      	beq.n	800d57c <__any_on+0x2a>
 800d590:	2001      	movs	r0, #1
 800d592:	e7f6      	b.n	800d582 <__any_on+0x30>

0800d594 <sulp>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	4604      	mov	r4, r0
 800d598:	460d      	mov	r5, r1
 800d59a:	ec45 4b10 	vmov	d0, r4, r5
 800d59e:	4616      	mov	r6, r2
 800d5a0:	f7ff feba 	bl	800d318 <__ulp>
 800d5a4:	ec51 0b10 	vmov	r0, r1, d0
 800d5a8:	b17e      	cbz	r6, 800d5ca <sulp+0x36>
 800d5aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d5ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	dd09      	ble.n	800d5ca <sulp+0x36>
 800d5b6:	051b      	lsls	r3, r3, #20
 800d5b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d5bc:	2400      	movs	r4, #0
 800d5be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d5c2:	4622      	mov	r2, r4
 800d5c4:	462b      	mov	r3, r5
 800d5c6:	f7f3 f817 	bl	80005f8 <__aeabi_dmul>
 800d5ca:	ec41 0b10 	vmov	d0, r0, r1
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}

0800d5d0 <_strtod_l>:
 800d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d4:	b09f      	sub	sp, #124	@ 0x7c
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d5da:	2200      	movs	r2, #0
 800d5dc:	921a      	str	r2, [sp, #104]	@ 0x68
 800d5de:	9005      	str	r0, [sp, #20]
 800d5e0:	f04f 0a00 	mov.w	sl, #0
 800d5e4:	f04f 0b00 	mov.w	fp, #0
 800d5e8:	460a      	mov	r2, r1
 800d5ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5ec:	7811      	ldrb	r1, [r2, #0]
 800d5ee:	292b      	cmp	r1, #43	@ 0x2b
 800d5f0:	d04a      	beq.n	800d688 <_strtod_l+0xb8>
 800d5f2:	d838      	bhi.n	800d666 <_strtod_l+0x96>
 800d5f4:	290d      	cmp	r1, #13
 800d5f6:	d832      	bhi.n	800d65e <_strtod_l+0x8e>
 800d5f8:	2908      	cmp	r1, #8
 800d5fa:	d832      	bhi.n	800d662 <_strtod_l+0x92>
 800d5fc:	2900      	cmp	r1, #0
 800d5fe:	d03b      	beq.n	800d678 <_strtod_l+0xa8>
 800d600:	2200      	movs	r2, #0
 800d602:	920e      	str	r2, [sp, #56]	@ 0x38
 800d604:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d606:	782a      	ldrb	r2, [r5, #0]
 800d608:	2a30      	cmp	r2, #48	@ 0x30
 800d60a:	f040 80b2 	bne.w	800d772 <_strtod_l+0x1a2>
 800d60e:	786a      	ldrb	r2, [r5, #1]
 800d610:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d614:	2a58      	cmp	r2, #88	@ 0x58
 800d616:	d16e      	bne.n	800d6f6 <_strtod_l+0x126>
 800d618:	9302      	str	r3, [sp, #8]
 800d61a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d61c:	9301      	str	r3, [sp, #4]
 800d61e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	4a8f      	ldr	r2, [pc, #572]	@ (800d860 <_strtod_l+0x290>)
 800d624:	9805      	ldr	r0, [sp, #20]
 800d626:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d628:	a919      	add	r1, sp, #100	@ 0x64
 800d62a:	f001 f913 	bl	800e854 <__gethex>
 800d62e:	f010 060f 	ands.w	r6, r0, #15
 800d632:	4604      	mov	r4, r0
 800d634:	d005      	beq.n	800d642 <_strtod_l+0x72>
 800d636:	2e06      	cmp	r6, #6
 800d638:	d128      	bne.n	800d68c <_strtod_l+0xbc>
 800d63a:	3501      	adds	r5, #1
 800d63c:	2300      	movs	r3, #0
 800d63e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d640:	930e      	str	r3, [sp, #56]	@ 0x38
 800d642:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d644:	2b00      	cmp	r3, #0
 800d646:	f040 858e 	bne.w	800e166 <_strtod_l+0xb96>
 800d64a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d64c:	b1cb      	cbz	r3, 800d682 <_strtod_l+0xb2>
 800d64e:	4652      	mov	r2, sl
 800d650:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d654:	ec43 2b10 	vmov	d0, r2, r3
 800d658:	b01f      	add	sp, #124	@ 0x7c
 800d65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65e:	2920      	cmp	r1, #32
 800d660:	d1ce      	bne.n	800d600 <_strtod_l+0x30>
 800d662:	3201      	adds	r2, #1
 800d664:	e7c1      	b.n	800d5ea <_strtod_l+0x1a>
 800d666:	292d      	cmp	r1, #45	@ 0x2d
 800d668:	d1ca      	bne.n	800d600 <_strtod_l+0x30>
 800d66a:	2101      	movs	r1, #1
 800d66c:	910e      	str	r1, [sp, #56]	@ 0x38
 800d66e:	1c51      	adds	r1, r2, #1
 800d670:	9119      	str	r1, [sp, #100]	@ 0x64
 800d672:	7852      	ldrb	r2, [r2, #1]
 800d674:	2a00      	cmp	r2, #0
 800d676:	d1c5      	bne.n	800d604 <_strtod_l+0x34>
 800d678:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d67a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f040 8570 	bne.w	800e162 <_strtod_l+0xb92>
 800d682:	4652      	mov	r2, sl
 800d684:	465b      	mov	r3, fp
 800d686:	e7e5      	b.n	800d654 <_strtod_l+0x84>
 800d688:	2100      	movs	r1, #0
 800d68a:	e7ef      	b.n	800d66c <_strtod_l+0x9c>
 800d68c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d68e:	b13a      	cbz	r2, 800d6a0 <_strtod_l+0xd0>
 800d690:	2135      	movs	r1, #53	@ 0x35
 800d692:	a81c      	add	r0, sp, #112	@ 0x70
 800d694:	f7ff ff3a 	bl	800d50c <__copybits>
 800d698:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d69a:	9805      	ldr	r0, [sp, #20]
 800d69c:	f7ff fb10 	bl	800ccc0 <_Bfree>
 800d6a0:	3e01      	subs	r6, #1
 800d6a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d6a4:	2e04      	cmp	r6, #4
 800d6a6:	d806      	bhi.n	800d6b6 <_strtod_l+0xe6>
 800d6a8:	e8df f006 	tbb	[pc, r6]
 800d6ac:	201d0314 	.word	0x201d0314
 800d6b0:	14          	.byte	0x14
 800d6b1:	00          	.byte	0x00
 800d6b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d6b6:	05e1      	lsls	r1, r4, #23
 800d6b8:	bf48      	it	mi
 800d6ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d6be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d6c2:	0d1b      	lsrs	r3, r3, #20
 800d6c4:	051b      	lsls	r3, r3, #20
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1bb      	bne.n	800d642 <_strtod_l+0x72>
 800d6ca:	f7fe fb01 	bl	800bcd0 <__errno>
 800d6ce:	2322      	movs	r3, #34	@ 0x22
 800d6d0:	6003      	str	r3, [r0, #0]
 800d6d2:	e7b6      	b.n	800d642 <_strtod_l+0x72>
 800d6d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d6d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d6dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d6e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d6e4:	e7e7      	b.n	800d6b6 <_strtod_l+0xe6>
 800d6e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d868 <_strtod_l+0x298>
 800d6ea:	e7e4      	b.n	800d6b6 <_strtod_l+0xe6>
 800d6ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d6f0:	f04f 3aff 	mov.w	sl, #4294967295
 800d6f4:	e7df      	b.n	800d6b6 <_strtod_l+0xe6>
 800d6f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6fc:	785b      	ldrb	r3, [r3, #1]
 800d6fe:	2b30      	cmp	r3, #48	@ 0x30
 800d700:	d0f9      	beq.n	800d6f6 <_strtod_l+0x126>
 800d702:	2b00      	cmp	r3, #0
 800d704:	d09d      	beq.n	800d642 <_strtod_l+0x72>
 800d706:	2301      	movs	r3, #1
 800d708:	2700      	movs	r7, #0
 800d70a:	9308      	str	r3, [sp, #32]
 800d70c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d70e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d710:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d712:	46b9      	mov	r9, r7
 800d714:	220a      	movs	r2, #10
 800d716:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d718:	7805      	ldrb	r5, [r0, #0]
 800d71a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d71e:	b2d9      	uxtb	r1, r3
 800d720:	2909      	cmp	r1, #9
 800d722:	d928      	bls.n	800d776 <_strtod_l+0x1a6>
 800d724:	494f      	ldr	r1, [pc, #316]	@ (800d864 <_strtod_l+0x294>)
 800d726:	2201      	movs	r2, #1
 800d728:	f000 ffe8 	bl	800e6fc <strncmp>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d032      	beq.n	800d796 <_strtod_l+0x1c6>
 800d730:	2000      	movs	r0, #0
 800d732:	462a      	mov	r2, r5
 800d734:	900a      	str	r0, [sp, #40]	@ 0x28
 800d736:	464d      	mov	r5, r9
 800d738:	4603      	mov	r3, r0
 800d73a:	2a65      	cmp	r2, #101	@ 0x65
 800d73c:	d001      	beq.n	800d742 <_strtod_l+0x172>
 800d73e:	2a45      	cmp	r2, #69	@ 0x45
 800d740:	d114      	bne.n	800d76c <_strtod_l+0x19c>
 800d742:	b91d      	cbnz	r5, 800d74c <_strtod_l+0x17c>
 800d744:	9a08      	ldr	r2, [sp, #32]
 800d746:	4302      	orrs	r2, r0
 800d748:	d096      	beq.n	800d678 <_strtod_l+0xa8>
 800d74a:	2500      	movs	r5, #0
 800d74c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d74e:	1c62      	adds	r2, r4, #1
 800d750:	9219      	str	r2, [sp, #100]	@ 0x64
 800d752:	7862      	ldrb	r2, [r4, #1]
 800d754:	2a2b      	cmp	r2, #43	@ 0x2b
 800d756:	d07a      	beq.n	800d84e <_strtod_l+0x27e>
 800d758:	2a2d      	cmp	r2, #45	@ 0x2d
 800d75a:	d07e      	beq.n	800d85a <_strtod_l+0x28a>
 800d75c:	f04f 0c00 	mov.w	ip, #0
 800d760:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d764:	2909      	cmp	r1, #9
 800d766:	f240 8085 	bls.w	800d874 <_strtod_l+0x2a4>
 800d76a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d76c:	f04f 0800 	mov.w	r8, #0
 800d770:	e0a5      	b.n	800d8be <_strtod_l+0x2ee>
 800d772:	2300      	movs	r3, #0
 800d774:	e7c8      	b.n	800d708 <_strtod_l+0x138>
 800d776:	f1b9 0f08 	cmp.w	r9, #8
 800d77a:	bfd8      	it	le
 800d77c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d77e:	f100 0001 	add.w	r0, r0, #1
 800d782:	bfda      	itte	le
 800d784:	fb02 3301 	mlale	r3, r2, r1, r3
 800d788:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d78a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d78e:	f109 0901 	add.w	r9, r9, #1
 800d792:	9019      	str	r0, [sp, #100]	@ 0x64
 800d794:	e7bf      	b.n	800d716 <_strtod_l+0x146>
 800d796:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d798:	1c5a      	adds	r2, r3, #1
 800d79a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d79c:	785a      	ldrb	r2, [r3, #1]
 800d79e:	f1b9 0f00 	cmp.w	r9, #0
 800d7a2:	d03b      	beq.n	800d81c <_strtod_l+0x24c>
 800d7a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d7a6:	464d      	mov	r5, r9
 800d7a8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d7ac:	2b09      	cmp	r3, #9
 800d7ae:	d912      	bls.n	800d7d6 <_strtod_l+0x206>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e7c2      	b.n	800d73a <_strtod_l+0x16a>
 800d7b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7b6:	1c5a      	adds	r2, r3, #1
 800d7b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7ba:	785a      	ldrb	r2, [r3, #1]
 800d7bc:	3001      	adds	r0, #1
 800d7be:	2a30      	cmp	r2, #48	@ 0x30
 800d7c0:	d0f8      	beq.n	800d7b4 <_strtod_l+0x1e4>
 800d7c2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d7c6:	2b08      	cmp	r3, #8
 800d7c8:	f200 84d2 	bhi.w	800e170 <_strtod_l+0xba0>
 800d7cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7ce:	900a      	str	r0, [sp, #40]	@ 0x28
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	930c      	str	r3, [sp, #48]	@ 0x30
 800d7d4:	4605      	mov	r5, r0
 800d7d6:	3a30      	subs	r2, #48	@ 0x30
 800d7d8:	f100 0301 	add.w	r3, r0, #1
 800d7dc:	d018      	beq.n	800d810 <_strtod_l+0x240>
 800d7de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d7e0:	4419      	add	r1, r3
 800d7e2:	910a      	str	r1, [sp, #40]	@ 0x28
 800d7e4:	462e      	mov	r6, r5
 800d7e6:	f04f 0e0a 	mov.w	lr, #10
 800d7ea:	1c71      	adds	r1, r6, #1
 800d7ec:	eba1 0c05 	sub.w	ip, r1, r5
 800d7f0:	4563      	cmp	r3, ip
 800d7f2:	dc15      	bgt.n	800d820 <_strtod_l+0x250>
 800d7f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d7f8:	182b      	adds	r3, r5, r0
 800d7fa:	2b08      	cmp	r3, #8
 800d7fc:	f105 0501 	add.w	r5, r5, #1
 800d800:	4405      	add	r5, r0
 800d802:	dc1a      	bgt.n	800d83a <_strtod_l+0x26a>
 800d804:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d806:	230a      	movs	r3, #10
 800d808:	fb03 2301 	mla	r3, r3, r1, r2
 800d80c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d80e:	2300      	movs	r3, #0
 800d810:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d812:	1c51      	adds	r1, r2, #1
 800d814:	9119      	str	r1, [sp, #100]	@ 0x64
 800d816:	7852      	ldrb	r2, [r2, #1]
 800d818:	4618      	mov	r0, r3
 800d81a:	e7c5      	b.n	800d7a8 <_strtod_l+0x1d8>
 800d81c:	4648      	mov	r0, r9
 800d81e:	e7ce      	b.n	800d7be <_strtod_l+0x1ee>
 800d820:	2e08      	cmp	r6, #8
 800d822:	dc05      	bgt.n	800d830 <_strtod_l+0x260>
 800d824:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d826:	fb0e f606 	mul.w	r6, lr, r6
 800d82a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d82c:	460e      	mov	r6, r1
 800d82e:	e7dc      	b.n	800d7ea <_strtod_l+0x21a>
 800d830:	2910      	cmp	r1, #16
 800d832:	bfd8      	it	le
 800d834:	fb0e f707 	mulle.w	r7, lr, r7
 800d838:	e7f8      	b.n	800d82c <_strtod_l+0x25c>
 800d83a:	2b0f      	cmp	r3, #15
 800d83c:	bfdc      	itt	le
 800d83e:	230a      	movle	r3, #10
 800d840:	fb03 2707 	mlale	r7, r3, r7, r2
 800d844:	e7e3      	b.n	800d80e <_strtod_l+0x23e>
 800d846:	2300      	movs	r3, #0
 800d848:	930a      	str	r3, [sp, #40]	@ 0x28
 800d84a:	2301      	movs	r3, #1
 800d84c:	e77a      	b.n	800d744 <_strtod_l+0x174>
 800d84e:	f04f 0c00 	mov.w	ip, #0
 800d852:	1ca2      	adds	r2, r4, #2
 800d854:	9219      	str	r2, [sp, #100]	@ 0x64
 800d856:	78a2      	ldrb	r2, [r4, #2]
 800d858:	e782      	b.n	800d760 <_strtod_l+0x190>
 800d85a:	f04f 0c01 	mov.w	ip, #1
 800d85e:	e7f8      	b.n	800d852 <_strtod_l+0x282>
 800d860:	080140b4 	.word	0x080140b4
 800d864:	08013f27 	.word	0x08013f27
 800d868:	7ff00000 	.word	0x7ff00000
 800d86c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d86e:	1c51      	adds	r1, r2, #1
 800d870:	9119      	str	r1, [sp, #100]	@ 0x64
 800d872:	7852      	ldrb	r2, [r2, #1]
 800d874:	2a30      	cmp	r2, #48	@ 0x30
 800d876:	d0f9      	beq.n	800d86c <_strtod_l+0x29c>
 800d878:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d87c:	2908      	cmp	r1, #8
 800d87e:	f63f af75 	bhi.w	800d76c <_strtod_l+0x19c>
 800d882:	3a30      	subs	r2, #48	@ 0x30
 800d884:	9209      	str	r2, [sp, #36]	@ 0x24
 800d886:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d888:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d88a:	f04f 080a 	mov.w	r8, #10
 800d88e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d890:	1c56      	adds	r6, r2, #1
 800d892:	9619      	str	r6, [sp, #100]	@ 0x64
 800d894:	7852      	ldrb	r2, [r2, #1]
 800d896:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d89a:	f1be 0f09 	cmp.w	lr, #9
 800d89e:	d939      	bls.n	800d914 <_strtod_l+0x344>
 800d8a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d8a2:	1a76      	subs	r6, r6, r1
 800d8a4:	2e08      	cmp	r6, #8
 800d8a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d8aa:	dc03      	bgt.n	800d8b4 <_strtod_l+0x2e4>
 800d8ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d8ae:	4588      	cmp	r8, r1
 800d8b0:	bfa8      	it	ge
 800d8b2:	4688      	movge	r8, r1
 800d8b4:	f1bc 0f00 	cmp.w	ip, #0
 800d8b8:	d001      	beq.n	800d8be <_strtod_l+0x2ee>
 800d8ba:	f1c8 0800 	rsb	r8, r8, #0
 800d8be:	2d00      	cmp	r5, #0
 800d8c0:	d14e      	bne.n	800d960 <_strtod_l+0x390>
 800d8c2:	9908      	ldr	r1, [sp, #32]
 800d8c4:	4308      	orrs	r0, r1
 800d8c6:	f47f aebc 	bne.w	800d642 <_strtod_l+0x72>
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	f47f aed4 	bne.w	800d678 <_strtod_l+0xa8>
 800d8d0:	2a69      	cmp	r2, #105	@ 0x69
 800d8d2:	d028      	beq.n	800d926 <_strtod_l+0x356>
 800d8d4:	dc25      	bgt.n	800d922 <_strtod_l+0x352>
 800d8d6:	2a49      	cmp	r2, #73	@ 0x49
 800d8d8:	d025      	beq.n	800d926 <_strtod_l+0x356>
 800d8da:	2a4e      	cmp	r2, #78	@ 0x4e
 800d8dc:	f47f aecc 	bne.w	800d678 <_strtod_l+0xa8>
 800d8e0:	499a      	ldr	r1, [pc, #616]	@ (800db4c <_strtod_l+0x57c>)
 800d8e2:	a819      	add	r0, sp, #100	@ 0x64
 800d8e4:	f001 f9d8 	bl	800ec98 <__match>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	f43f aec5 	beq.w	800d678 <_strtod_l+0xa8>
 800d8ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	2b28      	cmp	r3, #40	@ 0x28
 800d8f4:	d12e      	bne.n	800d954 <_strtod_l+0x384>
 800d8f6:	4996      	ldr	r1, [pc, #600]	@ (800db50 <_strtod_l+0x580>)
 800d8f8:	aa1c      	add	r2, sp, #112	@ 0x70
 800d8fa:	a819      	add	r0, sp, #100	@ 0x64
 800d8fc:	f001 f9e0 	bl	800ecc0 <__hexnan>
 800d900:	2805      	cmp	r0, #5
 800d902:	d127      	bne.n	800d954 <_strtod_l+0x384>
 800d904:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d906:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d90a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d90e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d912:	e696      	b.n	800d642 <_strtod_l+0x72>
 800d914:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d916:	fb08 2101 	mla	r1, r8, r1, r2
 800d91a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d91e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d920:	e7b5      	b.n	800d88e <_strtod_l+0x2be>
 800d922:	2a6e      	cmp	r2, #110	@ 0x6e
 800d924:	e7da      	b.n	800d8dc <_strtod_l+0x30c>
 800d926:	498b      	ldr	r1, [pc, #556]	@ (800db54 <_strtod_l+0x584>)
 800d928:	a819      	add	r0, sp, #100	@ 0x64
 800d92a:	f001 f9b5 	bl	800ec98 <__match>
 800d92e:	2800      	cmp	r0, #0
 800d930:	f43f aea2 	beq.w	800d678 <_strtod_l+0xa8>
 800d934:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d936:	4988      	ldr	r1, [pc, #544]	@ (800db58 <_strtod_l+0x588>)
 800d938:	3b01      	subs	r3, #1
 800d93a:	a819      	add	r0, sp, #100	@ 0x64
 800d93c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d93e:	f001 f9ab 	bl	800ec98 <__match>
 800d942:	b910      	cbnz	r0, 800d94a <_strtod_l+0x37a>
 800d944:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d946:	3301      	adds	r3, #1
 800d948:	9319      	str	r3, [sp, #100]	@ 0x64
 800d94a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800db68 <_strtod_l+0x598>
 800d94e:	f04f 0a00 	mov.w	sl, #0
 800d952:	e676      	b.n	800d642 <_strtod_l+0x72>
 800d954:	4881      	ldr	r0, [pc, #516]	@ (800db5c <_strtod_l+0x58c>)
 800d956:	f000 fef3 	bl	800e740 <nan>
 800d95a:	ec5b ab10 	vmov	sl, fp, d0
 800d95e:	e670      	b.n	800d642 <_strtod_l+0x72>
 800d960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d962:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d964:	eba8 0303 	sub.w	r3, r8, r3
 800d968:	f1b9 0f00 	cmp.w	r9, #0
 800d96c:	bf08      	it	eq
 800d96e:	46a9      	moveq	r9, r5
 800d970:	2d10      	cmp	r5, #16
 800d972:	9309      	str	r3, [sp, #36]	@ 0x24
 800d974:	462c      	mov	r4, r5
 800d976:	bfa8      	it	ge
 800d978:	2410      	movge	r4, #16
 800d97a:	f7f2 fdc3 	bl	8000504 <__aeabi_ui2d>
 800d97e:	2d09      	cmp	r5, #9
 800d980:	4682      	mov	sl, r0
 800d982:	468b      	mov	fp, r1
 800d984:	dc13      	bgt.n	800d9ae <_strtod_l+0x3de>
 800d986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f43f ae5a 	beq.w	800d642 <_strtod_l+0x72>
 800d98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d990:	dd78      	ble.n	800da84 <_strtod_l+0x4b4>
 800d992:	2b16      	cmp	r3, #22
 800d994:	dc5f      	bgt.n	800da56 <_strtod_l+0x486>
 800d996:	4972      	ldr	r1, [pc, #456]	@ (800db60 <_strtod_l+0x590>)
 800d998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d99c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9a0:	4652      	mov	r2, sl
 800d9a2:	465b      	mov	r3, fp
 800d9a4:	f7f2 fe28 	bl	80005f8 <__aeabi_dmul>
 800d9a8:	4682      	mov	sl, r0
 800d9aa:	468b      	mov	fp, r1
 800d9ac:	e649      	b.n	800d642 <_strtod_l+0x72>
 800d9ae:	4b6c      	ldr	r3, [pc, #432]	@ (800db60 <_strtod_l+0x590>)
 800d9b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d9b8:	f7f2 fe1e 	bl	80005f8 <__aeabi_dmul>
 800d9bc:	4682      	mov	sl, r0
 800d9be:	4638      	mov	r0, r7
 800d9c0:	468b      	mov	fp, r1
 800d9c2:	f7f2 fd9f 	bl	8000504 <__aeabi_ui2d>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	4650      	mov	r0, sl
 800d9cc:	4659      	mov	r1, fp
 800d9ce:	f7f2 fc5d 	bl	800028c <__adddf3>
 800d9d2:	2d0f      	cmp	r5, #15
 800d9d4:	4682      	mov	sl, r0
 800d9d6:	468b      	mov	fp, r1
 800d9d8:	ddd5      	ble.n	800d986 <_strtod_l+0x3b6>
 800d9da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9dc:	1b2c      	subs	r4, r5, r4
 800d9de:	441c      	add	r4, r3
 800d9e0:	2c00      	cmp	r4, #0
 800d9e2:	f340 8093 	ble.w	800db0c <_strtod_l+0x53c>
 800d9e6:	f014 030f 	ands.w	r3, r4, #15
 800d9ea:	d00a      	beq.n	800da02 <_strtod_l+0x432>
 800d9ec:	495c      	ldr	r1, [pc, #368]	@ (800db60 <_strtod_l+0x590>)
 800d9ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d9f2:	4652      	mov	r2, sl
 800d9f4:	465b      	mov	r3, fp
 800d9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9fa:	f7f2 fdfd 	bl	80005f8 <__aeabi_dmul>
 800d9fe:	4682      	mov	sl, r0
 800da00:	468b      	mov	fp, r1
 800da02:	f034 040f 	bics.w	r4, r4, #15
 800da06:	d073      	beq.n	800daf0 <_strtod_l+0x520>
 800da08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800da0c:	dd49      	ble.n	800daa2 <_strtod_l+0x4d2>
 800da0e:	2400      	movs	r4, #0
 800da10:	46a0      	mov	r8, r4
 800da12:	940b      	str	r4, [sp, #44]	@ 0x2c
 800da14:	46a1      	mov	r9, r4
 800da16:	9a05      	ldr	r2, [sp, #20]
 800da18:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800db68 <_strtod_l+0x598>
 800da1c:	2322      	movs	r3, #34	@ 0x22
 800da1e:	6013      	str	r3, [r2, #0]
 800da20:	f04f 0a00 	mov.w	sl, #0
 800da24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da26:	2b00      	cmp	r3, #0
 800da28:	f43f ae0b 	beq.w	800d642 <_strtod_l+0x72>
 800da2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da2e:	9805      	ldr	r0, [sp, #20]
 800da30:	f7ff f946 	bl	800ccc0 <_Bfree>
 800da34:	9805      	ldr	r0, [sp, #20]
 800da36:	4649      	mov	r1, r9
 800da38:	f7ff f942 	bl	800ccc0 <_Bfree>
 800da3c:	9805      	ldr	r0, [sp, #20]
 800da3e:	4641      	mov	r1, r8
 800da40:	f7ff f93e 	bl	800ccc0 <_Bfree>
 800da44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da46:	9805      	ldr	r0, [sp, #20]
 800da48:	f7ff f93a 	bl	800ccc0 <_Bfree>
 800da4c:	9805      	ldr	r0, [sp, #20]
 800da4e:	4621      	mov	r1, r4
 800da50:	f7ff f936 	bl	800ccc0 <_Bfree>
 800da54:	e5f5      	b.n	800d642 <_strtod_l+0x72>
 800da56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800da5c:	4293      	cmp	r3, r2
 800da5e:	dbbc      	blt.n	800d9da <_strtod_l+0x40a>
 800da60:	4c3f      	ldr	r4, [pc, #252]	@ (800db60 <_strtod_l+0x590>)
 800da62:	f1c5 050f 	rsb	r5, r5, #15
 800da66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800da6a:	4652      	mov	r2, sl
 800da6c:	465b      	mov	r3, fp
 800da6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da72:	f7f2 fdc1 	bl	80005f8 <__aeabi_dmul>
 800da76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da78:	1b5d      	subs	r5, r3, r5
 800da7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800da7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800da82:	e78f      	b.n	800d9a4 <_strtod_l+0x3d4>
 800da84:	3316      	adds	r3, #22
 800da86:	dba8      	blt.n	800d9da <_strtod_l+0x40a>
 800da88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da8a:	eba3 0808 	sub.w	r8, r3, r8
 800da8e:	4b34      	ldr	r3, [pc, #208]	@ (800db60 <_strtod_l+0x590>)
 800da90:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800da94:	e9d8 2300 	ldrd	r2, r3, [r8]
 800da98:	4650      	mov	r0, sl
 800da9a:	4659      	mov	r1, fp
 800da9c:	f7f2 fed6 	bl	800084c <__aeabi_ddiv>
 800daa0:	e782      	b.n	800d9a8 <_strtod_l+0x3d8>
 800daa2:	2300      	movs	r3, #0
 800daa4:	4f2f      	ldr	r7, [pc, #188]	@ (800db64 <_strtod_l+0x594>)
 800daa6:	1124      	asrs	r4, r4, #4
 800daa8:	4650      	mov	r0, sl
 800daaa:	4659      	mov	r1, fp
 800daac:	461e      	mov	r6, r3
 800daae:	2c01      	cmp	r4, #1
 800dab0:	dc21      	bgt.n	800daf6 <_strtod_l+0x526>
 800dab2:	b10b      	cbz	r3, 800dab8 <_strtod_l+0x4e8>
 800dab4:	4682      	mov	sl, r0
 800dab6:	468b      	mov	fp, r1
 800dab8:	492a      	ldr	r1, [pc, #168]	@ (800db64 <_strtod_l+0x594>)
 800daba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dabe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dac2:	4652      	mov	r2, sl
 800dac4:	465b      	mov	r3, fp
 800dac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daca:	f7f2 fd95 	bl	80005f8 <__aeabi_dmul>
 800dace:	4b26      	ldr	r3, [pc, #152]	@ (800db68 <_strtod_l+0x598>)
 800dad0:	460a      	mov	r2, r1
 800dad2:	400b      	ands	r3, r1
 800dad4:	4925      	ldr	r1, [pc, #148]	@ (800db6c <_strtod_l+0x59c>)
 800dad6:	428b      	cmp	r3, r1
 800dad8:	4682      	mov	sl, r0
 800dada:	d898      	bhi.n	800da0e <_strtod_l+0x43e>
 800dadc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dae0:	428b      	cmp	r3, r1
 800dae2:	bf86      	itte	hi
 800dae4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800db70 <_strtod_l+0x5a0>
 800dae8:	f04f 3aff 	movhi.w	sl, #4294967295
 800daec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800daf0:	2300      	movs	r3, #0
 800daf2:	9308      	str	r3, [sp, #32]
 800daf4:	e076      	b.n	800dbe4 <_strtod_l+0x614>
 800daf6:	07e2      	lsls	r2, r4, #31
 800daf8:	d504      	bpl.n	800db04 <_strtod_l+0x534>
 800dafa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dafe:	f7f2 fd7b 	bl	80005f8 <__aeabi_dmul>
 800db02:	2301      	movs	r3, #1
 800db04:	3601      	adds	r6, #1
 800db06:	1064      	asrs	r4, r4, #1
 800db08:	3708      	adds	r7, #8
 800db0a:	e7d0      	b.n	800daae <_strtod_l+0x4de>
 800db0c:	d0f0      	beq.n	800daf0 <_strtod_l+0x520>
 800db0e:	4264      	negs	r4, r4
 800db10:	f014 020f 	ands.w	r2, r4, #15
 800db14:	d00a      	beq.n	800db2c <_strtod_l+0x55c>
 800db16:	4b12      	ldr	r3, [pc, #72]	@ (800db60 <_strtod_l+0x590>)
 800db18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db1c:	4650      	mov	r0, sl
 800db1e:	4659      	mov	r1, fp
 800db20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db24:	f7f2 fe92 	bl	800084c <__aeabi_ddiv>
 800db28:	4682      	mov	sl, r0
 800db2a:	468b      	mov	fp, r1
 800db2c:	1124      	asrs	r4, r4, #4
 800db2e:	d0df      	beq.n	800daf0 <_strtod_l+0x520>
 800db30:	2c1f      	cmp	r4, #31
 800db32:	dd1f      	ble.n	800db74 <_strtod_l+0x5a4>
 800db34:	2400      	movs	r4, #0
 800db36:	46a0      	mov	r8, r4
 800db38:	940b      	str	r4, [sp, #44]	@ 0x2c
 800db3a:	46a1      	mov	r9, r4
 800db3c:	9a05      	ldr	r2, [sp, #20]
 800db3e:	2322      	movs	r3, #34	@ 0x22
 800db40:	f04f 0a00 	mov.w	sl, #0
 800db44:	f04f 0b00 	mov.w	fp, #0
 800db48:	6013      	str	r3, [r2, #0]
 800db4a:	e76b      	b.n	800da24 <_strtod_l+0x454>
 800db4c:	08013df0 	.word	0x08013df0
 800db50:	080140a0 	.word	0x080140a0
 800db54:	08013de8 	.word	0x08013de8
 800db58:	08013e5b 	.word	0x08013e5b
 800db5c:	08013e57 	.word	0x08013e57
 800db60:	08013fd8 	.word	0x08013fd8
 800db64:	08013fb0 	.word	0x08013fb0
 800db68:	7ff00000 	.word	0x7ff00000
 800db6c:	7ca00000 	.word	0x7ca00000
 800db70:	7fefffff 	.word	0x7fefffff
 800db74:	f014 0310 	ands.w	r3, r4, #16
 800db78:	bf18      	it	ne
 800db7a:	236a      	movne	r3, #106	@ 0x6a
 800db7c:	4ea9      	ldr	r6, [pc, #676]	@ (800de24 <_strtod_l+0x854>)
 800db7e:	9308      	str	r3, [sp, #32]
 800db80:	4650      	mov	r0, sl
 800db82:	4659      	mov	r1, fp
 800db84:	2300      	movs	r3, #0
 800db86:	07e7      	lsls	r7, r4, #31
 800db88:	d504      	bpl.n	800db94 <_strtod_l+0x5c4>
 800db8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db8e:	f7f2 fd33 	bl	80005f8 <__aeabi_dmul>
 800db92:	2301      	movs	r3, #1
 800db94:	1064      	asrs	r4, r4, #1
 800db96:	f106 0608 	add.w	r6, r6, #8
 800db9a:	d1f4      	bne.n	800db86 <_strtod_l+0x5b6>
 800db9c:	b10b      	cbz	r3, 800dba2 <_strtod_l+0x5d2>
 800db9e:	4682      	mov	sl, r0
 800dba0:	468b      	mov	fp, r1
 800dba2:	9b08      	ldr	r3, [sp, #32]
 800dba4:	b1b3      	cbz	r3, 800dbd4 <_strtod_l+0x604>
 800dba6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dbaa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	4659      	mov	r1, fp
 800dbb2:	dd0f      	ble.n	800dbd4 <_strtod_l+0x604>
 800dbb4:	2b1f      	cmp	r3, #31
 800dbb6:	dd56      	ble.n	800dc66 <_strtod_l+0x696>
 800dbb8:	2b34      	cmp	r3, #52	@ 0x34
 800dbba:	bfde      	ittt	le
 800dbbc:	f04f 33ff 	movle.w	r3, #4294967295
 800dbc0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dbc4:	4093      	lslle	r3, r2
 800dbc6:	f04f 0a00 	mov.w	sl, #0
 800dbca:	bfcc      	ite	gt
 800dbcc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dbd0:	ea03 0b01 	andle.w	fp, r3, r1
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	4650      	mov	r0, sl
 800dbda:	4659      	mov	r1, fp
 800dbdc:	f7f2 ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d1a7      	bne.n	800db34 <_strtod_l+0x564>
 800dbe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dbea:	9805      	ldr	r0, [sp, #20]
 800dbec:	462b      	mov	r3, r5
 800dbee:	464a      	mov	r2, r9
 800dbf0:	f7ff f8ce 	bl	800cd90 <__s2b>
 800dbf4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	f43f af09 	beq.w	800da0e <_strtod_l+0x43e>
 800dbfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc00:	2a00      	cmp	r2, #0
 800dc02:	eba3 0308 	sub.w	r3, r3, r8
 800dc06:	bfa8      	it	ge
 800dc08:	2300      	movge	r3, #0
 800dc0a:	9312      	str	r3, [sp, #72]	@ 0x48
 800dc0c:	2400      	movs	r4, #0
 800dc0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dc12:	9316      	str	r3, [sp, #88]	@ 0x58
 800dc14:	46a0      	mov	r8, r4
 800dc16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc18:	9805      	ldr	r0, [sp, #20]
 800dc1a:	6859      	ldr	r1, [r3, #4]
 800dc1c:	f7ff f810 	bl	800cc40 <_Balloc>
 800dc20:	4681      	mov	r9, r0
 800dc22:	2800      	cmp	r0, #0
 800dc24:	f43f aef7 	beq.w	800da16 <_strtod_l+0x446>
 800dc28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc2a:	691a      	ldr	r2, [r3, #16]
 800dc2c:	3202      	adds	r2, #2
 800dc2e:	f103 010c 	add.w	r1, r3, #12
 800dc32:	0092      	lsls	r2, r2, #2
 800dc34:	300c      	adds	r0, #12
 800dc36:	f7fe f878 	bl	800bd2a <memcpy>
 800dc3a:	ec4b ab10 	vmov	d0, sl, fp
 800dc3e:	9805      	ldr	r0, [sp, #20]
 800dc40:	aa1c      	add	r2, sp, #112	@ 0x70
 800dc42:	a91b      	add	r1, sp, #108	@ 0x6c
 800dc44:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dc48:	f7ff fbd6 	bl	800d3f8 <__d2b>
 800dc4c:	901a      	str	r0, [sp, #104]	@ 0x68
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	f43f aee1 	beq.w	800da16 <_strtod_l+0x446>
 800dc54:	9805      	ldr	r0, [sp, #20]
 800dc56:	2101      	movs	r1, #1
 800dc58:	f7ff f930 	bl	800cebc <__i2b>
 800dc5c:	4680      	mov	r8, r0
 800dc5e:	b948      	cbnz	r0, 800dc74 <_strtod_l+0x6a4>
 800dc60:	f04f 0800 	mov.w	r8, #0
 800dc64:	e6d7      	b.n	800da16 <_strtod_l+0x446>
 800dc66:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc6e:	ea03 0a0a 	and.w	sl, r3, sl
 800dc72:	e7af      	b.n	800dbd4 <_strtod_l+0x604>
 800dc74:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dc76:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dc78:	2d00      	cmp	r5, #0
 800dc7a:	bfab      	itete	ge
 800dc7c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dc7e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dc80:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dc82:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dc84:	bfac      	ite	ge
 800dc86:	18ef      	addge	r7, r5, r3
 800dc88:	1b5e      	sublt	r6, r3, r5
 800dc8a:	9b08      	ldr	r3, [sp, #32]
 800dc8c:	1aed      	subs	r5, r5, r3
 800dc8e:	4415      	add	r5, r2
 800dc90:	4b65      	ldr	r3, [pc, #404]	@ (800de28 <_strtod_l+0x858>)
 800dc92:	3d01      	subs	r5, #1
 800dc94:	429d      	cmp	r5, r3
 800dc96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dc9a:	da50      	bge.n	800dd3e <_strtod_l+0x76e>
 800dc9c:	1b5b      	subs	r3, r3, r5
 800dc9e:	2b1f      	cmp	r3, #31
 800dca0:	eba2 0203 	sub.w	r2, r2, r3
 800dca4:	f04f 0101 	mov.w	r1, #1
 800dca8:	dc3d      	bgt.n	800dd26 <_strtod_l+0x756>
 800dcaa:	fa01 f303 	lsl.w	r3, r1, r3
 800dcae:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	9310      	str	r3, [sp, #64]	@ 0x40
 800dcb4:	18bd      	adds	r5, r7, r2
 800dcb6:	9b08      	ldr	r3, [sp, #32]
 800dcb8:	42af      	cmp	r7, r5
 800dcba:	4416      	add	r6, r2
 800dcbc:	441e      	add	r6, r3
 800dcbe:	463b      	mov	r3, r7
 800dcc0:	bfa8      	it	ge
 800dcc2:	462b      	movge	r3, r5
 800dcc4:	42b3      	cmp	r3, r6
 800dcc6:	bfa8      	it	ge
 800dcc8:	4633      	movge	r3, r6
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	bfc2      	ittt	gt
 800dcce:	1aed      	subgt	r5, r5, r3
 800dcd0:	1af6      	subgt	r6, r6, r3
 800dcd2:	1aff      	subgt	r7, r7, r3
 800dcd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	dd16      	ble.n	800dd08 <_strtod_l+0x738>
 800dcda:	4641      	mov	r1, r8
 800dcdc:	9805      	ldr	r0, [sp, #20]
 800dcde:	461a      	mov	r2, r3
 800dce0:	f7ff f9a4 	bl	800d02c <__pow5mult>
 800dce4:	4680      	mov	r8, r0
 800dce6:	2800      	cmp	r0, #0
 800dce8:	d0ba      	beq.n	800dc60 <_strtod_l+0x690>
 800dcea:	4601      	mov	r1, r0
 800dcec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dcee:	9805      	ldr	r0, [sp, #20]
 800dcf0:	f7ff f8fa 	bl	800cee8 <__multiply>
 800dcf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	f43f ae8d 	beq.w	800da16 <_strtod_l+0x446>
 800dcfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dcfe:	9805      	ldr	r0, [sp, #20]
 800dd00:	f7fe ffde 	bl	800ccc0 <_Bfree>
 800dd04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd06:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd08:	2d00      	cmp	r5, #0
 800dd0a:	dc1d      	bgt.n	800dd48 <_strtod_l+0x778>
 800dd0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	dd23      	ble.n	800dd5a <_strtod_l+0x78a>
 800dd12:	4649      	mov	r1, r9
 800dd14:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dd16:	9805      	ldr	r0, [sp, #20]
 800dd18:	f7ff f988 	bl	800d02c <__pow5mult>
 800dd1c:	4681      	mov	r9, r0
 800dd1e:	b9e0      	cbnz	r0, 800dd5a <_strtod_l+0x78a>
 800dd20:	f04f 0900 	mov.w	r9, #0
 800dd24:	e677      	b.n	800da16 <_strtod_l+0x446>
 800dd26:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dd2a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dd2e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dd32:	35e2      	adds	r5, #226	@ 0xe2
 800dd34:	fa01 f305 	lsl.w	r3, r1, r5
 800dd38:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dd3c:	e7ba      	b.n	800dcb4 <_strtod_l+0x6e4>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd42:	2301      	movs	r3, #1
 800dd44:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd46:	e7b5      	b.n	800dcb4 <_strtod_l+0x6e4>
 800dd48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd4a:	9805      	ldr	r0, [sp, #20]
 800dd4c:	462a      	mov	r2, r5
 800dd4e:	f7ff f9c7 	bl	800d0e0 <__lshift>
 800dd52:	901a      	str	r0, [sp, #104]	@ 0x68
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d1d9      	bne.n	800dd0c <_strtod_l+0x73c>
 800dd58:	e65d      	b.n	800da16 <_strtod_l+0x446>
 800dd5a:	2e00      	cmp	r6, #0
 800dd5c:	dd07      	ble.n	800dd6e <_strtod_l+0x79e>
 800dd5e:	4649      	mov	r1, r9
 800dd60:	9805      	ldr	r0, [sp, #20]
 800dd62:	4632      	mov	r2, r6
 800dd64:	f7ff f9bc 	bl	800d0e0 <__lshift>
 800dd68:	4681      	mov	r9, r0
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d0d8      	beq.n	800dd20 <_strtod_l+0x750>
 800dd6e:	2f00      	cmp	r7, #0
 800dd70:	dd08      	ble.n	800dd84 <_strtod_l+0x7b4>
 800dd72:	4641      	mov	r1, r8
 800dd74:	9805      	ldr	r0, [sp, #20]
 800dd76:	463a      	mov	r2, r7
 800dd78:	f7ff f9b2 	bl	800d0e0 <__lshift>
 800dd7c:	4680      	mov	r8, r0
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	f43f ae49 	beq.w	800da16 <_strtod_l+0x446>
 800dd84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd86:	9805      	ldr	r0, [sp, #20]
 800dd88:	464a      	mov	r2, r9
 800dd8a:	f7ff fa31 	bl	800d1f0 <__mdiff>
 800dd8e:	4604      	mov	r4, r0
 800dd90:	2800      	cmp	r0, #0
 800dd92:	f43f ae40 	beq.w	800da16 <_strtod_l+0x446>
 800dd96:	68c3      	ldr	r3, [r0, #12]
 800dd98:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	60c3      	str	r3, [r0, #12]
 800dd9e:	4641      	mov	r1, r8
 800dda0:	f7ff fa0a 	bl	800d1b8 <__mcmp>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	da45      	bge.n	800de34 <_strtod_l+0x864>
 800dda8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddaa:	ea53 030a 	orrs.w	r3, r3, sl
 800ddae:	d16b      	bne.n	800de88 <_strtod_l+0x8b8>
 800ddb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d167      	bne.n	800de88 <_strtod_l+0x8b8>
 800ddb8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ddbc:	0d1b      	lsrs	r3, r3, #20
 800ddbe:	051b      	lsls	r3, r3, #20
 800ddc0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ddc4:	d960      	bls.n	800de88 <_strtod_l+0x8b8>
 800ddc6:	6963      	ldr	r3, [r4, #20]
 800ddc8:	b913      	cbnz	r3, 800ddd0 <_strtod_l+0x800>
 800ddca:	6923      	ldr	r3, [r4, #16]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	dd5b      	ble.n	800de88 <_strtod_l+0x8b8>
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	9805      	ldr	r0, [sp, #20]
 800ddd6:	f7ff f983 	bl	800d0e0 <__lshift>
 800ddda:	4641      	mov	r1, r8
 800dddc:	4604      	mov	r4, r0
 800ddde:	f7ff f9eb 	bl	800d1b8 <__mcmp>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	dd50      	ble.n	800de88 <_strtod_l+0x8b8>
 800dde6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ddea:	9a08      	ldr	r2, [sp, #32]
 800ddec:	0d1b      	lsrs	r3, r3, #20
 800ddee:	051b      	lsls	r3, r3, #20
 800ddf0:	2a00      	cmp	r2, #0
 800ddf2:	d06a      	beq.n	800deca <_strtod_l+0x8fa>
 800ddf4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ddf8:	d867      	bhi.n	800deca <_strtod_l+0x8fa>
 800ddfa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ddfe:	f67f ae9d 	bls.w	800db3c <_strtod_l+0x56c>
 800de02:	4b0a      	ldr	r3, [pc, #40]	@ (800de2c <_strtod_l+0x85c>)
 800de04:	4650      	mov	r0, sl
 800de06:	4659      	mov	r1, fp
 800de08:	2200      	movs	r2, #0
 800de0a:	f7f2 fbf5 	bl	80005f8 <__aeabi_dmul>
 800de0e:	4b08      	ldr	r3, [pc, #32]	@ (800de30 <_strtod_l+0x860>)
 800de10:	400b      	ands	r3, r1
 800de12:	4682      	mov	sl, r0
 800de14:	468b      	mov	fp, r1
 800de16:	2b00      	cmp	r3, #0
 800de18:	f47f ae08 	bne.w	800da2c <_strtod_l+0x45c>
 800de1c:	9a05      	ldr	r2, [sp, #20]
 800de1e:	2322      	movs	r3, #34	@ 0x22
 800de20:	6013      	str	r3, [r2, #0]
 800de22:	e603      	b.n	800da2c <_strtod_l+0x45c>
 800de24:	080140c8 	.word	0x080140c8
 800de28:	fffffc02 	.word	0xfffffc02
 800de2c:	39500000 	.word	0x39500000
 800de30:	7ff00000 	.word	0x7ff00000
 800de34:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800de38:	d165      	bne.n	800df06 <_strtod_l+0x936>
 800de3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800de3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de40:	b35a      	cbz	r2, 800de9a <_strtod_l+0x8ca>
 800de42:	4a9f      	ldr	r2, [pc, #636]	@ (800e0c0 <_strtod_l+0xaf0>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d12b      	bne.n	800dea0 <_strtod_l+0x8d0>
 800de48:	9b08      	ldr	r3, [sp, #32]
 800de4a:	4651      	mov	r1, sl
 800de4c:	b303      	cbz	r3, 800de90 <_strtod_l+0x8c0>
 800de4e:	4b9d      	ldr	r3, [pc, #628]	@ (800e0c4 <_strtod_l+0xaf4>)
 800de50:	465a      	mov	r2, fp
 800de52:	4013      	ands	r3, r2
 800de54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800de58:	f04f 32ff 	mov.w	r2, #4294967295
 800de5c:	d81b      	bhi.n	800de96 <_strtod_l+0x8c6>
 800de5e:	0d1b      	lsrs	r3, r3, #20
 800de60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800de64:	fa02 f303 	lsl.w	r3, r2, r3
 800de68:	4299      	cmp	r1, r3
 800de6a:	d119      	bne.n	800dea0 <_strtod_l+0x8d0>
 800de6c:	4b96      	ldr	r3, [pc, #600]	@ (800e0c8 <_strtod_l+0xaf8>)
 800de6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de70:	429a      	cmp	r2, r3
 800de72:	d102      	bne.n	800de7a <_strtod_l+0x8aa>
 800de74:	3101      	adds	r1, #1
 800de76:	f43f adce 	beq.w	800da16 <_strtod_l+0x446>
 800de7a:	4b92      	ldr	r3, [pc, #584]	@ (800e0c4 <_strtod_l+0xaf4>)
 800de7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de7e:	401a      	ands	r2, r3
 800de80:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800de84:	f04f 0a00 	mov.w	sl, #0
 800de88:	9b08      	ldr	r3, [sp, #32]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d1b9      	bne.n	800de02 <_strtod_l+0x832>
 800de8e:	e5cd      	b.n	800da2c <_strtod_l+0x45c>
 800de90:	f04f 33ff 	mov.w	r3, #4294967295
 800de94:	e7e8      	b.n	800de68 <_strtod_l+0x898>
 800de96:	4613      	mov	r3, r2
 800de98:	e7e6      	b.n	800de68 <_strtod_l+0x898>
 800de9a:	ea53 030a 	orrs.w	r3, r3, sl
 800de9e:	d0a2      	beq.n	800dde6 <_strtod_l+0x816>
 800dea0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dea2:	b1db      	cbz	r3, 800dedc <_strtod_l+0x90c>
 800dea4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dea6:	4213      	tst	r3, r2
 800dea8:	d0ee      	beq.n	800de88 <_strtod_l+0x8b8>
 800deaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deac:	9a08      	ldr	r2, [sp, #32]
 800deae:	4650      	mov	r0, sl
 800deb0:	4659      	mov	r1, fp
 800deb2:	b1bb      	cbz	r3, 800dee4 <_strtod_l+0x914>
 800deb4:	f7ff fb6e 	bl	800d594 <sulp>
 800deb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800debc:	ec53 2b10 	vmov	r2, r3, d0
 800dec0:	f7f2 f9e4 	bl	800028c <__adddf3>
 800dec4:	4682      	mov	sl, r0
 800dec6:	468b      	mov	fp, r1
 800dec8:	e7de      	b.n	800de88 <_strtod_l+0x8b8>
 800deca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dece:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ded2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ded6:	f04f 3aff 	mov.w	sl, #4294967295
 800deda:	e7d5      	b.n	800de88 <_strtod_l+0x8b8>
 800dedc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dede:	ea13 0f0a 	tst.w	r3, sl
 800dee2:	e7e1      	b.n	800dea8 <_strtod_l+0x8d8>
 800dee4:	f7ff fb56 	bl	800d594 <sulp>
 800dee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800deec:	ec53 2b10 	vmov	r2, r3, d0
 800def0:	f7f2 f9ca 	bl	8000288 <__aeabi_dsub>
 800def4:	2200      	movs	r2, #0
 800def6:	2300      	movs	r3, #0
 800def8:	4682      	mov	sl, r0
 800defa:	468b      	mov	fp, r1
 800defc:	f7f2 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 800df00:	2800      	cmp	r0, #0
 800df02:	d0c1      	beq.n	800de88 <_strtod_l+0x8b8>
 800df04:	e61a      	b.n	800db3c <_strtod_l+0x56c>
 800df06:	4641      	mov	r1, r8
 800df08:	4620      	mov	r0, r4
 800df0a:	f7ff facd 	bl	800d4a8 <__ratio>
 800df0e:	ec57 6b10 	vmov	r6, r7, d0
 800df12:	2200      	movs	r2, #0
 800df14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800df18:	4630      	mov	r0, r6
 800df1a:	4639      	mov	r1, r7
 800df1c:	f7f2 fde8 	bl	8000af0 <__aeabi_dcmple>
 800df20:	2800      	cmp	r0, #0
 800df22:	d06f      	beq.n	800e004 <_strtod_l+0xa34>
 800df24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df26:	2b00      	cmp	r3, #0
 800df28:	d17a      	bne.n	800e020 <_strtod_l+0xa50>
 800df2a:	f1ba 0f00 	cmp.w	sl, #0
 800df2e:	d158      	bne.n	800dfe2 <_strtod_l+0xa12>
 800df30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df36:	2b00      	cmp	r3, #0
 800df38:	d15a      	bne.n	800dff0 <_strtod_l+0xa20>
 800df3a:	4b64      	ldr	r3, [pc, #400]	@ (800e0cc <_strtod_l+0xafc>)
 800df3c:	2200      	movs	r2, #0
 800df3e:	4630      	mov	r0, r6
 800df40:	4639      	mov	r1, r7
 800df42:	f7f2 fdcb 	bl	8000adc <__aeabi_dcmplt>
 800df46:	2800      	cmp	r0, #0
 800df48:	d159      	bne.n	800dffe <_strtod_l+0xa2e>
 800df4a:	4630      	mov	r0, r6
 800df4c:	4639      	mov	r1, r7
 800df4e:	4b60      	ldr	r3, [pc, #384]	@ (800e0d0 <_strtod_l+0xb00>)
 800df50:	2200      	movs	r2, #0
 800df52:	f7f2 fb51 	bl	80005f8 <__aeabi_dmul>
 800df56:	4606      	mov	r6, r0
 800df58:	460f      	mov	r7, r1
 800df5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800df5e:	9606      	str	r6, [sp, #24]
 800df60:	9307      	str	r3, [sp, #28]
 800df62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df66:	4d57      	ldr	r5, [pc, #348]	@ (800e0c4 <_strtod_l+0xaf4>)
 800df68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800df6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df6e:	401d      	ands	r5, r3
 800df70:	4b58      	ldr	r3, [pc, #352]	@ (800e0d4 <_strtod_l+0xb04>)
 800df72:	429d      	cmp	r5, r3
 800df74:	f040 80b2 	bne.w	800e0dc <_strtod_l+0xb0c>
 800df78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800df7e:	ec4b ab10 	vmov	d0, sl, fp
 800df82:	f7ff f9c9 	bl	800d318 <__ulp>
 800df86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df8a:	ec51 0b10 	vmov	r0, r1, d0
 800df8e:	f7f2 fb33 	bl	80005f8 <__aeabi_dmul>
 800df92:	4652      	mov	r2, sl
 800df94:	465b      	mov	r3, fp
 800df96:	f7f2 f979 	bl	800028c <__adddf3>
 800df9a:	460b      	mov	r3, r1
 800df9c:	4949      	ldr	r1, [pc, #292]	@ (800e0c4 <_strtod_l+0xaf4>)
 800df9e:	4a4e      	ldr	r2, [pc, #312]	@ (800e0d8 <_strtod_l+0xb08>)
 800dfa0:	4019      	ands	r1, r3
 800dfa2:	4291      	cmp	r1, r2
 800dfa4:	4682      	mov	sl, r0
 800dfa6:	d942      	bls.n	800e02e <_strtod_l+0xa5e>
 800dfa8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dfaa:	4b47      	ldr	r3, [pc, #284]	@ (800e0c8 <_strtod_l+0xaf8>)
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d103      	bne.n	800dfb8 <_strtod_l+0x9e8>
 800dfb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	f43f ad2f 	beq.w	800da16 <_strtod_l+0x446>
 800dfb8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e0c8 <_strtod_l+0xaf8>
 800dfbc:	f04f 3aff 	mov.w	sl, #4294967295
 800dfc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfc2:	9805      	ldr	r0, [sp, #20]
 800dfc4:	f7fe fe7c 	bl	800ccc0 <_Bfree>
 800dfc8:	9805      	ldr	r0, [sp, #20]
 800dfca:	4649      	mov	r1, r9
 800dfcc:	f7fe fe78 	bl	800ccc0 <_Bfree>
 800dfd0:	9805      	ldr	r0, [sp, #20]
 800dfd2:	4641      	mov	r1, r8
 800dfd4:	f7fe fe74 	bl	800ccc0 <_Bfree>
 800dfd8:	9805      	ldr	r0, [sp, #20]
 800dfda:	4621      	mov	r1, r4
 800dfdc:	f7fe fe70 	bl	800ccc0 <_Bfree>
 800dfe0:	e619      	b.n	800dc16 <_strtod_l+0x646>
 800dfe2:	f1ba 0f01 	cmp.w	sl, #1
 800dfe6:	d103      	bne.n	800dff0 <_strtod_l+0xa20>
 800dfe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	f43f ada6 	beq.w	800db3c <_strtod_l+0x56c>
 800dff0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e0a0 <_strtod_l+0xad0>
 800dff4:	4f35      	ldr	r7, [pc, #212]	@ (800e0cc <_strtod_l+0xafc>)
 800dff6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dffa:	2600      	movs	r6, #0
 800dffc:	e7b1      	b.n	800df62 <_strtod_l+0x992>
 800dffe:	4f34      	ldr	r7, [pc, #208]	@ (800e0d0 <_strtod_l+0xb00>)
 800e000:	2600      	movs	r6, #0
 800e002:	e7aa      	b.n	800df5a <_strtod_l+0x98a>
 800e004:	4b32      	ldr	r3, [pc, #200]	@ (800e0d0 <_strtod_l+0xb00>)
 800e006:	4630      	mov	r0, r6
 800e008:	4639      	mov	r1, r7
 800e00a:	2200      	movs	r2, #0
 800e00c:	f7f2 faf4 	bl	80005f8 <__aeabi_dmul>
 800e010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e012:	4606      	mov	r6, r0
 800e014:	460f      	mov	r7, r1
 800e016:	2b00      	cmp	r3, #0
 800e018:	d09f      	beq.n	800df5a <_strtod_l+0x98a>
 800e01a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e01e:	e7a0      	b.n	800df62 <_strtod_l+0x992>
 800e020:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e0a8 <_strtod_l+0xad8>
 800e024:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e028:	ec57 6b17 	vmov	r6, r7, d7
 800e02c:	e799      	b.n	800df62 <_strtod_l+0x992>
 800e02e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e032:	9b08      	ldr	r3, [sp, #32]
 800e034:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1c1      	bne.n	800dfc0 <_strtod_l+0x9f0>
 800e03c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e040:	0d1b      	lsrs	r3, r3, #20
 800e042:	051b      	lsls	r3, r3, #20
 800e044:	429d      	cmp	r5, r3
 800e046:	d1bb      	bne.n	800dfc0 <_strtod_l+0x9f0>
 800e048:	4630      	mov	r0, r6
 800e04a:	4639      	mov	r1, r7
 800e04c:	f7f2 fe34 	bl	8000cb8 <__aeabi_d2lz>
 800e050:	f7f2 faa4 	bl	800059c <__aeabi_l2d>
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	4630      	mov	r0, r6
 800e05a:	4639      	mov	r1, r7
 800e05c:	f7f2 f914 	bl	8000288 <__aeabi_dsub>
 800e060:	460b      	mov	r3, r1
 800e062:	4602      	mov	r2, r0
 800e064:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e068:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e06c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e06e:	ea46 060a 	orr.w	r6, r6, sl
 800e072:	431e      	orrs	r6, r3
 800e074:	d06f      	beq.n	800e156 <_strtod_l+0xb86>
 800e076:	a30e      	add	r3, pc, #56	@ (adr r3, 800e0b0 <_strtod_l+0xae0>)
 800e078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07c:	f7f2 fd2e 	bl	8000adc <__aeabi_dcmplt>
 800e080:	2800      	cmp	r0, #0
 800e082:	f47f acd3 	bne.w	800da2c <_strtod_l+0x45c>
 800e086:	a30c      	add	r3, pc, #48	@ (adr r3, 800e0b8 <_strtod_l+0xae8>)
 800e088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e090:	f7f2 fd42 	bl	8000b18 <__aeabi_dcmpgt>
 800e094:	2800      	cmp	r0, #0
 800e096:	d093      	beq.n	800dfc0 <_strtod_l+0x9f0>
 800e098:	e4c8      	b.n	800da2c <_strtod_l+0x45c>
 800e09a:	bf00      	nop
 800e09c:	f3af 8000 	nop.w
 800e0a0:	00000000 	.word	0x00000000
 800e0a4:	bff00000 	.word	0xbff00000
 800e0a8:	00000000 	.word	0x00000000
 800e0ac:	3ff00000 	.word	0x3ff00000
 800e0b0:	94a03595 	.word	0x94a03595
 800e0b4:	3fdfffff 	.word	0x3fdfffff
 800e0b8:	35afe535 	.word	0x35afe535
 800e0bc:	3fe00000 	.word	0x3fe00000
 800e0c0:	000fffff 	.word	0x000fffff
 800e0c4:	7ff00000 	.word	0x7ff00000
 800e0c8:	7fefffff 	.word	0x7fefffff
 800e0cc:	3ff00000 	.word	0x3ff00000
 800e0d0:	3fe00000 	.word	0x3fe00000
 800e0d4:	7fe00000 	.word	0x7fe00000
 800e0d8:	7c9fffff 	.word	0x7c9fffff
 800e0dc:	9b08      	ldr	r3, [sp, #32]
 800e0de:	b323      	cbz	r3, 800e12a <_strtod_l+0xb5a>
 800e0e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e0e4:	d821      	bhi.n	800e12a <_strtod_l+0xb5a>
 800e0e6:	a328      	add	r3, pc, #160	@ (adr r3, 800e188 <_strtod_l+0xbb8>)
 800e0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	4639      	mov	r1, r7
 800e0f0:	f7f2 fcfe 	bl	8000af0 <__aeabi_dcmple>
 800e0f4:	b1a0      	cbz	r0, 800e120 <_strtod_l+0xb50>
 800e0f6:	4639      	mov	r1, r7
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f7f2 fd55 	bl	8000ba8 <__aeabi_d2uiz>
 800e0fe:	2801      	cmp	r0, #1
 800e100:	bf38      	it	cc
 800e102:	2001      	movcc	r0, #1
 800e104:	f7f2 f9fe 	bl	8000504 <__aeabi_ui2d>
 800e108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e10a:	4606      	mov	r6, r0
 800e10c:	460f      	mov	r7, r1
 800e10e:	b9fb      	cbnz	r3, 800e150 <_strtod_l+0xb80>
 800e110:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e114:	9014      	str	r0, [sp, #80]	@ 0x50
 800e116:	9315      	str	r3, [sp, #84]	@ 0x54
 800e118:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e11c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e120:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e122:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e126:	1b5b      	subs	r3, r3, r5
 800e128:	9311      	str	r3, [sp, #68]	@ 0x44
 800e12a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e12e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e132:	f7ff f8f1 	bl	800d318 <__ulp>
 800e136:	4650      	mov	r0, sl
 800e138:	ec53 2b10 	vmov	r2, r3, d0
 800e13c:	4659      	mov	r1, fp
 800e13e:	f7f2 fa5b 	bl	80005f8 <__aeabi_dmul>
 800e142:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e146:	f7f2 f8a1 	bl	800028c <__adddf3>
 800e14a:	4682      	mov	sl, r0
 800e14c:	468b      	mov	fp, r1
 800e14e:	e770      	b.n	800e032 <_strtod_l+0xa62>
 800e150:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e154:	e7e0      	b.n	800e118 <_strtod_l+0xb48>
 800e156:	a30e      	add	r3, pc, #56	@ (adr r3, 800e190 <_strtod_l+0xbc0>)
 800e158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15c:	f7f2 fcbe 	bl	8000adc <__aeabi_dcmplt>
 800e160:	e798      	b.n	800e094 <_strtod_l+0xac4>
 800e162:	2300      	movs	r3, #0
 800e164:	930e      	str	r3, [sp, #56]	@ 0x38
 800e166:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e168:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e16a:	6013      	str	r3, [r2, #0]
 800e16c:	f7ff ba6d 	b.w	800d64a <_strtod_l+0x7a>
 800e170:	2a65      	cmp	r2, #101	@ 0x65
 800e172:	f43f ab68 	beq.w	800d846 <_strtod_l+0x276>
 800e176:	2a45      	cmp	r2, #69	@ 0x45
 800e178:	f43f ab65 	beq.w	800d846 <_strtod_l+0x276>
 800e17c:	2301      	movs	r3, #1
 800e17e:	f7ff bba0 	b.w	800d8c2 <_strtod_l+0x2f2>
 800e182:	bf00      	nop
 800e184:	f3af 8000 	nop.w
 800e188:	ffc00000 	.word	0xffc00000
 800e18c:	41dfffff 	.word	0x41dfffff
 800e190:	94a03595 	.word	0x94a03595
 800e194:	3fcfffff 	.word	0x3fcfffff

0800e198 <_strtod_r>:
 800e198:	4b01      	ldr	r3, [pc, #4]	@ (800e1a0 <_strtod_r+0x8>)
 800e19a:	f7ff ba19 	b.w	800d5d0 <_strtod_l>
 800e19e:	bf00      	nop
 800e1a0:	20000164 	.word	0x20000164

0800e1a4 <_strtol_l.isra.0>:
 800e1a4:	2b24      	cmp	r3, #36	@ 0x24
 800e1a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1aa:	4686      	mov	lr, r0
 800e1ac:	4690      	mov	r8, r2
 800e1ae:	d801      	bhi.n	800e1b4 <_strtol_l.isra.0+0x10>
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d106      	bne.n	800e1c2 <_strtol_l.isra.0+0x1e>
 800e1b4:	f7fd fd8c 	bl	800bcd0 <__errno>
 800e1b8:	2316      	movs	r3, #22
 800e1ba:	6003      	str	r3, [r0, #0]
 800e1bc:	2000      	movs	r0, #0
 800e1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1c2:	4834      	ldr	r0, [pc, #208]	@ (800e294 <_strtol_l.isra.0+0xf0>)
 800e1c4:	460d      	mov	r5, r1
 800e1c6:	462a      	mov	r2, r5
 800e1c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1cc:	5d06      	ldrb	r6, [r0, r4]
 800e1ce:	f016 0608 	ands.w	r6, r6, #8
 800e1d2:	d1f8      	bne.n	800e1c6 <_strtol_l.isra.0+0x22>
 800e1d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e1d6:	d110      	bne.n	800e1fa <_strtol_l.isra.0+0x56>
 800e1d8:	782c      	ldrb	r4, [r5, #0]
 800e1da:	2601      	movs	r6, #1
 800e1dc:	1c95      	adds	r5, r2, #2
 800e1de:	f033 0210 	bics.w	r2, r3, #16
 800e1e2:	d115      	bne.n	800e210 <_strtol_l.isra.0+0x6c>
 800e1e4:	2c30      	cmp	r4, #48	@ 0x30
 800e1e6:	d10d      	bne.n	800e204 <_strtol_l.isra.0+0x60>
 800e1e8:	782a      	ldrb	r2, [r5, #0]
 800e1ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e1ee:	2a58      	cmp	r2, #88	@ 0x58
 800e1f0:	d108      	bne.n	800e204 <_strtol_l.isra.0+0x60>
 800e1f2:	786c      	ldrb	r4, [r5, #1]
 800e1f4:	3502      	adds	r5, #2
 800e1f6:	2310      	movs	r3, #16
 800e1f8:	e00a      	b.n	800e210 <_strtol_l.isra.0+0x6c>
 800e1fa:	2c2b      	cmp	r4, #43	@ 0x2b
 800e1fc:	bf04      	itt	eq
 800e1fe:	782c      	ldrbeq	r4, [r5, #0]
 800e200:	1c95      	addeq	r5, r2, #2
 800e202:	e7ec      	b.n	800e1de <_strtol_l.isra.0+0x3a>
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1f6      	bne.n	800e1f6 <_strtol_l.isra.0+0x52>
 800e208:	2c30      	cmp	r4, #48	@ 0x30
 800e20a:	bf14      	ite	ne
 800e20c:	230a      	movne	r3, #10
 800e20e:	2308      	moveq	r3, #8
 800e210:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e214:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e218:	2200      	movs	r2, #0
 800e21a:	fbbc f9f3 	udiv	r9, ip, r3
 800e21e:	4610      	mov	r0, r2
 800e220:	fb03 ca19 	mls	sl, r3, r9, ip
 800e224:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e228:	2f09      	cmp	r7, #9
 800e22a:	d80f      	bhi.n	800e24c <_strtol_l.isra.0+0xa8>
 800e22c:	463c      	mov	r4, r7
 800e22e:	42a3      	cmp	r3, r4
 800e230:	dd1b      	ble.n	800e26a <_strtol_l.isra.0+0xc6>
 800e232:	1c57      	adds	r7, r2, #1
 800e234:	d007      	beq.n	800e246 <_strtol_l.isra.0+0xa2>
 800e236:	4581      	cmp	r9, r0
 800e238:	d314      	bcc.n	800e264 <_strtol_l.isra.0+0xc0>
 800e23a:	d101      	bne.n	800e240 <_strtol_l.isra.0+0x9c>
 800e23c:	45a2      	cmp	sl, r4
 800e23e:	db11      	blt.n	800e264 <_strtol_l.isra.0+0xc0>
 800e240:	fb00 4003 	mla	r0, r0, r3, r4
 800e244:	2201      	movs	r2, #1
 800e246:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e24a:	e7eb      	b.n	800e224 <_strtol_l.isra.0+0x80>
 800e24c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e250:	2f19      	cmp	r7, #25
 800e252:	d801      	bhi.n	800e258 <_strtol_l.isra.0+0xb4>
 800e254:	3c37      	subs	r4, #55	@ 0x37
 800e256:	e7ea      	b.n	800e22e <_strtol_l.isra.0+0x8a>
 800e258:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e25c:	2f19      	cmp	r7, #25
 800e25e:	d804      	bhi.n	800e26a <_strtol_l.isra.0+0xc6>
 800e260:	3c57      	subs	r4, #87	@ 0x57
 800e262:	e7e4      	b.n	800e22e <_strtol_l.isra.0+0x8a>
 800e264:	f04f 32ff 	mov.w	r2, #4294967295
 800e268:	e7ed      	b.n	800e246 <_strtol_l.isra.0+0xa2>
 800e26a:	1c53      	adds	r3, r2, #1
 800e26c:	d108      	bne.n	800e280 <_strtol_l.isra.0+0xdc>
 800e26e:	2322      	movs	r3, #34	@ 0x22
 800e270:	f8ce 3000 	str.w	r3, [lr]
 800e274:	4660      	mov	r0, ip
 800e276:	f1b8 0f00 	cmp.w	r8, #0
 800e27a:	d0a0      	beq.n	800e1be <_strtol_l.isra.0+0x1a>
 800e27c:	1e69      	subs	r1, r5, #1
 800e27e:	e006      	b.n	800e28e <_strtol_l.isra.0+0xea>
 800e280:	b106      	cbz	r6, 800e284 <_strtol_l.isra.0+0xe0>
 800e282:	4240      	negs	r0, r0
 800e284:	f1b8 0f00 	cmp.w	r8, #0
 800e288:	d099      	beq.n	800e1be <_strtol_l.isra.0+0x1a>
 800e28a:	2a00      	cmp	r2, #0
 800e28c:	d1f6      	bne.n	800e27c <_strtol_l.isra.0+0xd8>
 800e28e:	f8c8 1000 	str.w	r1, [r8]
 800e292:	e794      	b.n	800e1be <_strtol_l.isra.0+0x1a>
 800e294:	080140f1 	.word	0x080140f1

0800e298 <_strtol_r>:
 800e298:	f7ff bf84 	b.w	800e1a4 <_strtol_l.isra.0>

0800e29c <__ssputs_r>:
 800e29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2a0:	688e      	ldr	r6, [r1, #8]
 800e2a2:	461f      	mov	r7, r3
 800e2a4:	42be      	cmp	r6, r7
 800e2a6:	680b      	ldr	r3, [r1, #0]
 800e2a8:	4682      	mov	sl, r0
 800e2aa:	460c      	mov	r4, r1
 800e2ac:	4690      	mov	r8, r2
 800e2ae:	d82d      	bhi.n	800e30c <__ssputs_r+0x70>
 800e2b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e2b8:	d026      	beq.n	800e308 <__ssputs_r+0x6c>
 800e2ba:	6965      	ldr	r5, [r4, #20]
 800e2bc:	6909      	ldr	r1, [r1, #16]
 800e2be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2c2:	eba3 0901 	sub.w	r9, r3, r1
 800e2c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2ca:	1c7b      	adds	r3, r7, #1
 800e2cc:	444b      	add	r3, r9
 800e2ce:	106d      	asrs	r5, r5, #1
 800e2d0:	429d      	cmp	r5, r3
 800e2d2:	bf38      	it	cc
 800e2d4:	461d      	movcc	r5, r3
 800e2d6:	0553      	lsls	r3, r2, #21
 800e2d8:	d527      	bpl.n	800e32a <__ssputs_r+0x8e>
 800e2da:	4629      	mov	r1, r5
 800e2dc:	f7fe fc24 	bl	800cb28 <_malloc_r>
 800e2e0:	4606      	mov	r6, r0
 800e2e2:	b360      	cbz	r0, 800e33e <__ssputs_r+0xa2>
 800e2e4:	6921      	ldr	r1, [r4, #16]
 800e2e6:	464a      	mov	r2, r9
 800e2e8:	f7fd fd1f 	bl	800bd2a <memcpy>
 800e2ec:	89a3      	ldrh	r3, [r4, #12]
 800e2ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2f6:	81a3      	strh	r3, [r4, #12]
 800e2f8:	6126      	str	r6, [r4, #16]
 800e2fa:	6165      	str	r5, [r4, #20]
 800e2fc:	444e      	add	r6, r9
 800e2fe:	eba5 0509 	sub.w	r5, r5, r9
 800e302:	6026      	str	r6, [r4, #0]
 800e304:	60a5      	str	r5, [r4, #8]
 800e306:	463e      	mov	r6, r7
 800e308:	42be      	cmp	r6, r7
 800e30a:	d900      	bls.n	800e30e <__ssputs_r+0x72>
 800e30c:	463e      	mov	r6, r7
 800e30e:	6820      	ldr	r0, [r4, #0]
 800e310:	4632      	mov	r2, r6
 800e312:	4641      	mov	r1, r8
 800e314:	f000 f9d8 	bl	800e6c8 <memmove>
 800e318:	68a3      	ldr	r3, [r4, #8]
 800e31a:	1b9b      	subs	r3, r3, r6
 800e31c:	60a3      	str	r3, [r4, #8]
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	4433      	add	r3, r6
 800e322:	6023      	str	r3, [r4, #0]
 800e324:	2000      	movs	r0, #0
 800e326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e32a:	462a      	mov	r2, r5
 800e32c:	f000 fd75 	bl	800ee1a <_realloc_r>
 800e330:	4606      	mov	r6, r0
 800e332:	2800      	cmp	r0, #0
 800e334:	d1e0      	bne.n	800e2f8 <__ssputs_r+0x5c>
 800e336:	6921      	ldr	r1, [r4, #16]
 800e338:	4650      	mov	r0, sl
 800e33a:	f7fe fb81 	bl	800ca40 <_free_r>
 800e33e:	230c      	movs	r3, #12
 800e340:	f8ca 3000 	str.w	r3, [sl]
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e34a:	81a3      	strh	r3, [r4, #12]
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	e7e9      	b.n	800e326 <__ssputs_r+0x8a>
	...

0800e354 <_svfiprintf_r>:
 800e354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e358:	4698      	mov	r8, r3
 800e35a:	898b      	ldrh	r3, [r1, #12]
 800e35c:	061b      	lsls	r3, r3, #24
 800e35e:	b09d      	sub	sp, #116	@ 0x74
 800e360:	4607      	mov	r7, r0
 800e362:	460d      	mov	r5, r1
 800e364:	4614      	mov	r4, r2
 800e366:	d510      	bpl.n	800e38a <_svfiprintf_r+0x36>
 800e368:	690b      	ldr	r3, [r1, #16]
 800e36a:	b973      	cbnz	r3, 800e38a <_svfiprintf_r+0x36>
 800e36c:	2140      	movs	r1, #64	@ 0x40
 800e36e:	f7fe fbdb 	bl	800cb28 <_malloc_r>
 800e372:	6028      	str	r0, [r5, #0]
 800e374:	6128      	str	r0, [r5, #16]
 800e376:	b930      	cbnz	r0, 800e386 <_svfiprintf_r+0x32>
 800e378:	230c      	movs	r3, #12
 800e37a:	603b      	str	r3, [r7, #0]
 800e37c:	f04f 30ff 	mov.w	r0, #4294967295
 800e380:	b01d      	add	sp, #116	@ 0x74
 800e382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e386:	2340      	movs	r3, #64	@ 0x40
 800e388:	616b      	str	r3, [r5, #20]
 800e38a:	2300      	movs	r3, #0
 800e38c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e38e:	2320      	movs	r3, #32
 800e390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e394:	f8cd 800c 	str.w	r8, [sp, #12]
 800e398:	2330      	movs	r3, #48	@ 0x30
 800e39a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e538 <_svfiprintf_r+0x1e4>
 800e39e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3a2:	f04f 0901 	mov.w	r9, #1
 800e3a6:	4623      	mov	r3, r4
 800e3a8:	469a      	mov	sl, r3
 800e3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3ae:	b10a      	cbz	r2, 800e3b4 <_svfiprintf_r+0x60>
 800e3b0:	2a25      	cmp	r2, #37	@ 0x25
 800e3b2:	d1f9      	bne.n	800e3a8 <_svfiprintf_r+0x54>
 800e3b4:	ebba 0b04 	subs.w	fp, sl, r4
 800e3b8:	d00b      	beq.n	800e3d2 <_svfiprintf_r+0x7e>
 800e3ba:	465b      	mov	r3, fp
 800e3bc:	4622      	mov	r2, r4
 800e3be:	4629      	mov	r1, r5
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	f7ff ff6b 	bl	800e29c <__ssputs_r>
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	f000 80a7 	beq.w	800e51a <_svfiprintf_r+0x1c6>
 800e3cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3ce:	445a      	add	r2, fp
 800e3d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f000 809f 	beq.w	800e51a <_svfiprintf_r+0x1c6>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3e6:	f10a 0a01 	add.w	sl, sl, #1
 800e3ea:	9304      	str	r3, [sp, #16]
 800e3ec:	9307      	str	r3, [sp, #28]
 800e3ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e3f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e3f4:	4654      	mov	r4, sl
 800e3f6:	2205      	movs	r2, #5
 800e3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3fc:	484e      	ldr	r0, [pc, #312]	@ (800e538 <_svfiprintf_r+0x1e4>)
 800e3fe:	f7f1 fee7 	bl	80001d0 <memchr>
 800e402:	9a04      	ldr	r2, [sp, #16]
 800e404:	b9d8      	cbnz	r0, 800e43e <_svfiprintf_r+0xea>
 800e406:	06d0      	lsls	r0, r2, #27
 800e408:	bf44      	itt	mi
 800e40a:	2320      	movmi	r3, #32
 800e40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e410:	0711      	lsls	r1, r2, #28
 800e412:	bf44      	itt	mi
 800e414:	232b      	movmi	r3, #43	@ 0x2b
 800e416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e41a:	f89a 3000 	ldrb.w	r3, [sl]
 800e41e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e420:	d015      	beq.n	800e44e <_svfiprintf_r+0xfa>
 800e422:	9a07      	ldr	r2, [sp, #28]
 800e424:	4654      	mov	r4, sl
 800e426:	2000      	movs	r0, #0
 800e428:	f04f 0c0a 	mov.w	ip, #10
 800e42c:	4621      	mov	r1, r4
 800e42e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e432:	3b30      	subs	r3, #48	@ 0x30
 800e434:	2b09      	cmp	r3, #9
 800e436:	d94b      	bls.n	800e4d0 <_svfiprintf_r+0x17c>
 800e438:	b1b0      	cbz	r0, 800e468 <_svfiprintf_r+0x114>
 800e43a:	9207      	str	r2, [sp, #28]
 800e43c:	e014      	b.n	800e468 <_svfiprintf_r+0x114>
 800e43e:	eba0 0308 	sub.w	r3, r0, r8
 800e442:	fa09 f303 	lsl.w	r3, r9, r3
 800e446:	4313      	orrs	r3, r2
 800e448:	9304      	str	r3, [sp, #16]
 800e44a:	46a2      	mov	sl, r4
 800e44c:	e7d2      	b.n	800e3f4 <_svfiprintf_r+0xa0>
 800e44e:	9b03      	ldr	r3, [sp, #12]
 800e450:	1d19      	adds	r1, r3, #4
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	9103      	str	r1, [sp, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	bfbb      	ittet	lt
 800e45a:	425b      	neglt	r3, r3
 800e45c:	f042 0202 	orrlt.w	r2, r2, #2
 800e460:	9307      	strge	r3, [sp, #28]
 800e462:	9307      	strlt	r3, [sp, #28]
 800e464:	bfb8      	it	lt
 800e466:	9204      	strlt	r2, [sp, #16]
 800e468:	7823      	ldrb	r3, [r4, #0]
 800e46a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e46c:	d10a      	bne.n	800e484 <_svfiprintf_r+0x130>
 800e46e:	7863      	ldrb	r3, [r4, #1]
 800e470:	2b2a      	cmp	r3, #42	@ 0x2a
 800e472:	d132      	bne.n	800e4da <_svfiprintf_r+0x186>
 800e474:	9b03      	ldr	r3, [sp, #12]
 800e476:	1d1a      	adds	r2, r3, #4
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	9203      	str	r2, [sp, #12]
 800e47c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e480:	3402      	adds	r4, #2
 800e482:	9305      	str	r3, [sp, #20]
 800e484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e548 <_svfiprintf_r+0x1f4>
 800e488:	7821      	ldrb	r1, [r4, #0]
 800e48a:	2203      	movs	r2, #3
 800e48c:	4650      	mov	r0, sl
 800e48e:	f7f1 fe9f 	bl	80001d0 <memchr>
 800e492:	b138      	cbz	r0, 800e4a4 <_svfiprintf_r+0x150>
 800e494:	9b04      	ldr	r3, [sp, #16]
 800e496:	eba0 000a 	sub.w	r0, r0, sl
 800e49a:	2240      	movs	r2, #64	@ 0x40
 800e49c:	4082      	lsls	r2, r0
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	3401      	adds	r4, #1
 800e4a2:	9304      	str	r3, [sp, #16]
 800e4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a8:	4824      	ldr	r0, [pc, #144]	@ (800e53c <_svfiprintf_r+0x1e8>)
 800e4aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4ae:	2206      	movs	r2, #6
 800e4b0:	f7f1 fe8e 	bl	80001d0 <memchr>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d036      	beq.n	800e526 <_svfiprintf_r+0x1d2>
 800e4b8:	4b21      	ldr	r3, [pc, #132]	@ (800e540 <_svfiprintf_r+0x1ec>)
 800e4ba:	bb1b      	cbnz	r3, 800e504 <_svfiprintf_r+0x1b0>
 800e4bc:	9b03      	ldr	r3, [sp, #12]
 800e4be:	3307      	adds	r3, #7
 800e4c0:	f023 0307 	bic.w	r3, r3, #7
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	9303      	str	r3, [sp, #12]
 800e4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ca:	4433      	add	r3, r6
 800e4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4ce:	e76a      	b.n	800e3a6 <_svfiprintf_r+0x52>
 800e4d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	2001      	movs	r0, #1
 800e4d8:	e7a8      	b.n	800e42c <_svfiprintf_r+0xd8>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	3401      	adds	r4, #1
 800e4de:	9305      	str	r3, [sp, #20]
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	f04f 0c0a 	mov.w	ip, #10
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4ec:	3a30      	subs	r2, #48	@ 0x30
 800e4ee:	2a09      	cmp	r2, #9
 800e4f0:	d903      	bls.n	800e4fa <_svfiprintf_r+0x1a6>
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d0c6      	beq.n	800e484 <_svfiprintf_r+0x130>
 800e4f6:	9105      	str	r1, [sp, #20]
 800e4f8:	e7c4      	b.n	800e484 <_svfiprintf_r+0x130>
 800e4fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4fe:	4604      	mov	r4, r0
 800e500:	2301      	movs	r3, #1
 800e502:	e7f0      	b.n	800e4e6 <_svfiprintf_r+0x192>
 800e504:	ab03      	add	r3, sp, #12
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	462a      	mov	r2, r5
 800e50a:	4b0e      	ldr	r3, [pc, #56]	@ (800e544 <_svfiprintf_r+0x1f0>)
 800e50c:	a904      	add	r1, sp, #16
 800e50e:	4638      	mov	r0, r7
 800e510:	f7fc fc58 	bl	800adc4 <_printf_float>
 800e514:	1c42      	adds	r2, r0, #1
 800e516:	4606      	mov	r6, r0
 800e518:	d1d6      	bne.n	800e4c8 <_svfiprintf_r+0x174>
 800e51a:	89ab      	ldrh	r3, [r5, #12]
 800e51c:	065b      	lsls	r3, r3, #25
 800e51e:	f53f af2d 	bmi.w	800e37c <_svfiprintf_r+0x28>
 800e522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e524:	e72c      	b.n	800e380 <_svfiprintf_r+0x2c>
 800e526:	ab03      	add	r3, sp, #12
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	462a      	mov	r2, r5
 800e52c:	4b05      	ldr	r3, [pc, #20]	@ (800e544 <_svfiprintf_r+0x1f0>)
 800e52e:	a904      	add	r1, sp, #16
 800e530:	4638      	mov	r0, r7
 800e532:	f7fc fedf 	bl	800b2f4 <_printf_i>
 800e536:	e7ed      	b.n	800e514 <_svfiprintf_r+0x1c0>
 800e538:	08013f29 	.word	0x08013f29
 800e53c:	08013f33 	.word	0x08013f33
 800e540:	0800adc5 	.word	0x0800adc5
 800e544:	0800e29d 	.word	0x0800e29d
 800e548:	08013f2f 	.word	0x08013f2f

0800e54c <__sflush_r>:
 800e54c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e554:	0716      	lsls	r6, r2, #28
 800e556:	4605      	mov	r5, r0
 800e558:	460c      	mov	r4, r1
 800e55a:	d454      	bmi.n	800e606 <__sflush_r+0xba>
 800e55c:	684b      	ldr	r3, [r1, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	dc02      	bgt.n	800e568 <__sflush_r+0x1c>
 800e562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e564:	2b00      	cmp	r3, #0
 800e566:	dd48      	ble.n	800e5fa <__sflush_r+0xae>
 800e568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e56a:	2e00      	cmp	r6, #0
 800e56c:	d045      	beq.n	800e5fa <__sflush_r+0xae>
 800e56e:	2300      	movs	r3, #0
 800e570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e574:	682f      	ldr	r7, [r5, #0]
 800e576:	6a21      	ldr	r1, [r4, #32]
 800e578:	602b      	str	r3, [r5, #0]
 800e57a:	d030      	beq.n	800e5de <__sflush_r+0x92>
 800e57c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e57e:	89a3      	ldrh	r3, [r4, #12]
 800e580:	0759      	lsls	r1, r3, #29
 800e582:	d505      	bpl.n	800e590 <__sflush_r+0x44>
 800e584:	6863      	ldr	r3, [r4, #4]
 800e586:	1ad2      	subs	r2, r2, r3
 800e588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e58a:	b10b      	cbz	r3, 800e590 <__sflush_r+0x44>
 800e58c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e58e:	1ad2      	subs	r2, r2, r3
 800e590:	2300      	movs	r3, #0
 800e592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e594:	6a21      	ldr	r1, [r4, #32]
 800e596:	4628      	mov	r0, r5
 800e598:	47b0      	blx	r6
 800e59a:	1c43      	adds	r3, r0, #1
 800e59c:	89a3      	ldrh	r3, [r4, #12]
 800e59e:	d106      	bne.n	800e5ae <__sflush_r+0x62>
 800e5a0:	6829      	ldr	r1, [r5, #0]
 800e5a2:	291d      	cmp	r1, #29
 800e5a4:	d82b      	bhi.n	800e5fe <__sflush_r+0xb2>
 800e5a6:	4a2a      	ldr	r2, [pc, #168]	@ (800e650 <__sflush_r+0x104>)
 800e5a8:	40ca      	lsrs	r2, r1
 800e5aa:	07d6      	lsls	r6, r2, #31
 800e5ac:	d527      	bpl.n	800e5fe <__sflush_r+0xb2>
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	6062      	str	r2, [r4, #4]
 800e5b2:	04d9      	lsls	r1, r3, #19
 800e5b4:	6922      	ldr	r2, [r4, #16]
 800e5b6:	6022      	str	r2, [r4, #0]
 800e5b8:	d504      	bpl.n	800e5c4 <__sflush_r+0x78>
 800e5ba:	1c42      	adds	r2, r0, #1
 800e5bc:	d101      	bne.n	800e5c2 <__sflush_r+0x76>
 800e5be:	682b      	ldr	r3, [r5, #0]
 800e5c0:	b903      	cbnz	r3, 800e5c4 <__sflush_r+0x78>
 800e5c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800e5c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5c6:	602f      	str	r7, [r5, #0]
 800e5c8:	b1b9      	cbz	r1, 800e5fa <__sflush_r+0xae>
 800e5ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5ce:	4299      	cmp	r1, r3
 800e5d0:	d002      	beq.n	800e5d8 <__sflush_r+0x8c>
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	f7fe fa34 	bl	800ca40 <_free_r>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5dc:	e00d      	b.n	800e5fa <__sflush_r+0xae>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	47b0      	blx	r6
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	1c50      	adds	r0, r2, #1
 800e5e8:	d1c9      	bne.n	800e57e <__sflush_r+0x32>
 800e5ea:	682b      	ldr	r3, [r5, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d0c6      	beq.n	800e57e <__sflush_r+0x32>
 800e5f0:	2b1d      	cmp	r3, #29
 800e5f2:	d001      	beq.n	800e5f8 <__sflush_r+0xac>
 800e5f4:	2b16      	cmp	r3, #22
 800e5f6:	d11e      	bne.n	800e636 <__sflush_r+0xea>
 800e5f8:	602f      	str	r7, [r5, #0]
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	e022      	b.n	800e644 <__sflush_r+0xf8>
 800e5fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e602:	b21b      	sxth	r3, r3
 800e604:	e01b      	b.n	800e63e <__sflush_r+0xf2>
 800e606:	690f      	ldr	r7, [r1, #16]
 800e608:	2f00      	cmp	r7, #0
 800e60a:	d0f6      	beq.n	800e5fa <__sflush_r+0xae>
 800e60c:	0793      	lsls	r3, r2, #30
 800e60e:	680e      	ldr	r6, [r1, #0]
 800e610:	bf08      	it	eq
 800e612:	694b      	ldreq	r3, [r1, #20]
 800e614:	600f      	str	r7, [r1, #0]
 800e616:	bf18      	it	ne
 800e618:	2300      	movne	r3, #0
 800e61a:	eba6 0807 	sub.w	r8, r6, r7
 800e61e:	608b      	str	r3, [r1, #8]
 800e620:	f1b8 0f00 	cmp.w	r8, #0
 800e624:	dde9      	ble.n	800e5fa <__sflush_r+0xae>
 800e626:	6a21      	ldr	r1, [r4, #32]
 800e628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e62a:	4643      	mov	r3, r8
 800e62c:	463a      	mov	r2, r7
 800e62e:	4628      	mov	r0, r5
 800e630:	47b0      	blx	r6
 800e632:	2800      	cmp	r0, #0
 800e634:	dc08      	bgt.n	800e648 <__sflush_r+0xfc>
 800e636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e63a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e63e:	81a3      	strh	r3, [r4, #12]
 800e640:	f04f 30ff 	mov.w	r0, #4294967295
 800e644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e648:	4407      	add	r7, r0
 800e64a:	eba8 0800 	sub.w	r8, r8, r0
 800e64e:	e7e7      	b.n	800e620 <__sflush_r+0xd4>
 800e650:	20400001 	.word	0x20400001

0800e654 <_fflush_r>:
 800e654:	b538      	push	{r3, r4, r5, lr}
 800e656:	690b      	ldr	r3, [r1, #16]
 800e658:	4605      	mov	r5, r0
 800e65a:	460c      	mov	r4, r1
 800e65c:	b913      	cbnz	r3, 800e664 <_fflush_r+0x10>
 800e65e:	2500      	movs	r5, #0
 800e660:	4628      	mov	r0, r5
 800e662:	bd38      	pop	{r3, r4, r5, pc}
 800e664:	b118      	cbz	r0, 800e66e <_fflush_r+0x1a>
 800e666:	6a03      	ldr	r3, [r0, #32]
 800e668:	b90b      	cbnz	r3, 800e66e <_fflush_r+0x1a>
 800e66a:	f7fd f9fb 	bl	800ba64 <__sinit>
 800e66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d0f3      	beq.n	800e65e <_fflush_r+0xa>
 800e676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e678:	07d0      	lsls	r0, r2, #31
 800e67a:	d404      	bmi.n	800e686 <_fflush_r+0x32>
 800e67c:	0599      	lsls	r1, r3, #22
 800e67e:	d402      	bmi.n	800e686 <_fflush_r+0x32>
 800e680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e682:	f7fd fb50 	bl	800bd26 <__retarget_lock_acquire_recursive>
 800e686:	4628      	mov	r0, r5
 800e688:	4621      	mov	r1, r4
 800e68a:	f7ff ff5f 	bl	800e54c <__sflush_r>
 800e68e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e690:	07da      	lsls	r2, r3, #31
 800e692:	4605      	mov	r5, r0
 800e694:	d4e4      	bmi.n	800e660 <_fflush_r+0xc>
 800e696:	89a3      	ldrh	r3, [r4, #12]
 800e698:	059b      	lsls	r3, r3, #22
 800e69a:	d4e1      	bmi.n	800e660 <_fflush_r+0xc>
 800e69c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e69e:	f7fd fb43 	bl	800bd28 <__retarget_lock_release_recursive>
 800e6a2:	e7dd      	b.n	800e660 <_fflush_r+0xc>

0800e6a4 <fiprintf>:
 800e6a4:	b40e      	push	{r1, r2, r3}
 800e6a6:	b503      	push	{r0, r1, lr}
 800e6a8:	4601      	mov	r1, r0
 800e6aa:	ab03      	add	r3, sp, #12
 800e6ac:	4805      	ldr	r0, [pc, #20]	@ (800e6c4 <fiprintf+0x20>)
 800e6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6b2:	6800      	ldr	r0, [r0, #0]
 800e6b4:	9301      	str	r3, [sp, #4]
 800e6b6:	f000 fc15 	bl	800eee4 <_vfiprintf_r>
 800e6ba:	b002      	add	sp, #8
 800e6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6c0:	b003      	add	sp, #12
 800e6c2:	4770      	bx	lr
 800e6c4:	20000114 	.word	0x20000114

0800e6c8 <memmove>:
 800e6c8:	4288      	cmp	r0, r1
 800e6ca:	b510      	push	{r4, lr}
 800e6cc:	eb01 0402 	add.w	r4, r1, r2
 800e6d0:	d902      	bls.n	800e6d8 <memmove+0x10>
 800e6d2:	4284      	cmp	r4, r0
 800e6d4:	4623      	mov	r3, r4
 800e6d6:	d807      	bhi.n	800e6e8 <memmove+0x20>
 800e6d8:	1e43      	subs	r3, r0, #1
 800e6da:	42a1      	cmp	r1, r4
 800e6dc:	d008      	beq.n	800e6f0 <memmove+0x28>
 800e6de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6e6:	e7f8      	b.n	800e6da <memmove+0x12>
 800e6e8:	4402      	add	r2, r0
 800e6ea:	4601      	mov	r1, r0
 800e6ec:	428a      	cmp	r2, r1
 800e6ee:	d100      	bne.n	800e6f2 <memmove+0x2a>
 800e6f0:	bd10      	pop	{r4, pc}
 800e6f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6fa:	e7f7      	b.n	800e6ec <memmove+0x24>

0800e6fc <strncmp>:
 800e6fc:	b510      	push	{r4, lr}
 800e6fe:	b16a      	cbz	r2, 800e71c <strncmp+0x20>
 800e700:	3901      	subs	r1, #1
 800e702:	1884      	adds	r4, r0, r2
 800e704:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e708:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d103      	bne.n	800e718 <strncmp+0x1c>
 800e710:	42a0      	cmp	r0, r4
 800e712:	d001      	beq.n	800e718 <strncmp+0x1c>
 800e714:	2a00      	cmp	r2, #0
 800e716:	d1f5      	bne.n	800e704 <strncmp+0x8>
 800e718:	1ad0      	subs	r0, r2, r3
 800e71a:	bd10      	pop	{r4, pc}
 800e71c:	4610      	mov	r0, r2
 800e71e:	e7fc      	b.n	800e71a <strncmp+0x1e>

0800e720 <_sbrk_r>:
 800e720:	b538      	push	{r3, r4, r5, lr}
 800e722:	4d06      	ldr	r5, [pc, #24]	@ (800e73c <_sbrk_r+0x1c>)
 800e724:	2300      	movs	r3, #0
 800e726:	4604      	mov	r4, r0
 800e728:	4608      	mov	r0, r1
 800e72a:	602b      	str	r3, [r5, #0]
 800e72c:	f7f3 fcb4 	bl	8002098 <_sbrk>
 800e730:	1c43      	adds	r3, r0, #1
 800e732:	d102      	bne.n	800e73a <_sbrk_r+0x1a>
 800e734:	682b      	ldr	r3, [r5, #0]
 800e736:	b103      	cbz	r3, 800e73a <_sbrk_r+0x1a>
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	bd38      	pop	{r3, r4, r5, pc}
 800e73c:	2000f9a4 	.word	0x2000f9a4

0800e740 <nan>:
 800e740:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e748 <nan+0x8>
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	00000000 	.word	0x00000000
 800e74c:	7ff80000 	.word	0x7ff80000

0800e750 <abort>:
 800e750:	b508      	push	{r3, lr}
 800e752:	2006      	movs	r0, #6
 800e754:	f000 fd9a 	bl	800f28c <raise>
 800e758:	2001      	movs	r0, #1
 800e75a:	f7f3 fc25 	bl	8001fa8 <_exit>

0800e75e <_calloc_r>:
 800e75e:	b570      	push	{r4, r5, r6, lr}
 800e760:	fba1 5402 	umull	r5, r4, r1, r2
 800e764:	b934      	cbnz	r4, 800e774 <_calloc_r+0x16>
 800e766:	4629      	mov	r1, r5
 800e768:	f7fe f9de 	bl	800cb28 <_malloc_r>
 800e76c:	4606      	mov	r6, r0
 800e76e:	b928      	cbnz	r0, 800e77c <_calloc_r+0x1e>
 800e770:	4630      	mov	r0, r6
 800e772:	bd70      	pop	{r4, r5, r6, pc}
 800e774:	220c      	movs	r2, #12
 800e776:	6002      	str	r2, [r0, #0]
 800e778:	2600      	movs	r6, #0
 800e77a:	e7f9      	b.n	800e770 <_calloc_r+0x12>
 800e77c:	462a      	mov	r2, r5
 800e77e:	4621      	mov	r1, r4
 800e780:	f7fd fa41 	bl	800bc06 <memset>
 800e784:	e7f4      	b.n	800e770 <_calloc_r+0x12>

0800e786 <rshift>:
 800e786:	6903      	ldr	r3, [r0, #16]
 800e788:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e78c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e790:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e794:	f100 0414 	add.w	r4, r0, #20
 800e798:	dd45      	ble.n	800e826 <rshift+0xa0>
 800e79a:	f011 011f 	ands.w	r1, r1, #31
 800e79e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e7a2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e7a6:	d10c      	bne.n	800e7c2 <rshift+0x3c>
 800e7a8:	f100 0710 	add.w	r7, r0, #16
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	42b1      	cmp	r1, r6
 800e7b0:	d334      	bcc.n	800e81c <rshift+0x96>
 800e7b2:	1a9b      	subs	r3, r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	1eea      	subs	r2, r5, #3
 800e7b8:	4296      	cmp	r6, r2
 800e7ba:	bf38      	it	cc
 800e7bc:	2300      	movcc	r3, #0
 800e7be:	4423      	add	r3, r4
 800e7c0:	e015      	b.n	800e7ee <rshift+0x68>
 800e7c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e7c6:	f1c1 0820 	rsb	r8, r1, #32
 800e7ca:	40cf      	lsrs	r7, r1
 800e7cc:	f105 0e04 	add.w	lr, r5, #4
 800e7d0:	46a1      	mov	r9, r4
 800e7d2:	4576      	cmp	r6, lr
 800e7d4:	46f4      	mov	ip, lr
 800e7d6:	d815      	bhi.n	800e804 <rshift+0x7e>
 800e7d8:	1a9a      	subs	r2, r3, r2
 800e7da:	0092      	lsls	r2, r2, #2
 800e7dc:	3a04      	subs	r2, #4
 800e7de:	3501      	adds	r5, #1
 800e7e0:	42ae      	cmp	r6, r5
 800e7e2:	bf38      	it	cc
 800e7e4:	2200      	movcc	r2, #0
 800e7e6:	18a3      	adds	r3, r4, r2
 800e7e8:	50a7      	str	r7, [r4, r2]
 800e7ea:	b107      	cbz	r7, 800e7ee <rshift+0x68>
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	1b1a      	subs	r2, r3, r4
 800e7f0:	42a3      	cmp	r3, r4
 800e7f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e7f6:	bf08      	it	eq
 800e7f8:	2300      	moveq	r3, #0
 800e7fa:	6102      	str	r2, [r0, #16]
 800e7fc:	bf08      	it	eq
 800e7fe:	6143      	streq	r3, [r0, #20]
 800e800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e804:	f8dc c000 	ldr.w	ip, [ip]
 800e808:	fa0c fc08 	lsl.w	ip, ip, r8
 800e80c:	ea4c 0707 	orr.w	r7, ip, r7
 800e810:	f849 7b04 	str.w	r7, [r9], #4
 800e814:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e818:	40cf      	lsrs	r7, r1
 800e81a:	e7da      	b.n	800e7d2 <rshift+0x4c>
 800e81c:	f851 cb04 	ldr.w	ip, [r1], #4
 800e820:	f847 cf04 	str.w	ip, [r7, #4]!
 800e824:	e7c3      	b.n	800e7ae <rshift+0x28>
 800e826:	4623      	mov	r3, r4
 800e828:	e7e1      	b.n	800e7ee <rshift+0x68>

0800e82a <__hexdig_fun>:
 800e82a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e82e:	2b09      	cmp	r3, #9
 800e830:	d802      	bhi.n	800e838 <__hexdig_fun+0xe>
 800e832:	3820      	subs	r0, #32
 800e834:	b2c0      	uxtb	r0, r0
 800e836:	4770      	bx	lr
 800e838:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e83c:	2b05      	cmp	r3, #5
 800e83e:	d801      	bhi.n	800e844 <__hexdig_fun+0x1a>
 800e840:	3847      	subs	r0, #71	@ 0x47
 800e842:	e7f7      	b.n	800e834 <__hexdig_fun+0xa>
 800e844:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e848:	2b05      	cmp	r3, #5
 800e84a:	d801      	bhi.n	800e850 <__hexdig_fun+0x26>
 800e84c:	3827      	subs	r0, #39	@ 0x27
 800e84e:	e7f1      	b.n	800e834 <__hexdig_fun+0xa>
 800e850:	2000      	movs	r0, #0
 800e852:	4770      	bx	lr

0800e854 <__gethex>:
 800e854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e858:	b085      	sub	sp, #20
 800e85a:	468a      	mov	sl, r1
 800e85c:	9302      	str	r3, [sp, #8]
 800e85e:	680b      	ldr	r3, [r1, #0]
 800e860:	9001      	str	r0, [sp, #4]
 800e862:	4690      	mov	r8, r2
 800e864:	1c9c      	adds	r4, r3, #2
 800e866:	46a1      	mov	r9, r4
 800e868:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e86c:	2830      	cmp	r0, #48	@ 0x30
 800e86e:	d0fa      	beq.n	800e866 <__gethex+0x12>
 800e870:	eba9 0303 	sub.w	r3, r9, r3
 800e874:	f1a3 0b02 	sub.w	fp, r3, #2
 800e878:	f7ff ffd7 	bl	800e82a <__hexdig_fun>
 800e87c:	4605      	mov	r5, r0
 800e87e:	2800      	cmp	r0, #0
 800e880:	d168      	bne.n	800e954 <__gethex+0x100>
 800e882:	49a0      	ldr	r1, [pc, #640]	@ (800eb04 <__gethex+0x2b0>)
 800e884:	2201      	movs	r2, #1
 800e886:	4648      	mov	r0, r9
 800e888:	f7ff ff38 	bl	800e6fc <strncmp>
 800e88c:	4607      	mov	r7, r0
 800e88e:	2800      	cmp	r0, #0
 800e890:	d167      	bne.n	800e962 <__gethex+0x10e>
 800e892:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e896:	4626      	mov	r6, r4
 800e898:	f7ff ffc7 	bl	800e82a <__hexdig_fun>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d062      	beq.n	800e966 <__gethex+0x112>
 800e8a0:	4623      	mov	r3, r4
 800e8a2:	7818      	ldrb	r0, [r3, #0]
 800e8a4:	2830      	cmp	r0, #48	@ 0x30
 800e8a6:	4699      	mov	r9, r3
 800e8a8:	f103 0301 	add.w	r3, r3, #1
 800e8ac:	d0f9      	beq.n	800e8a2 <__gethex+0x4e>
 800e8ae:	f7ff ffbc 	bl	800e82a <__hexdig_fun>
 800e8b2:	fab0 f580 	clz	r5, r0
 800e8b6:	096d      	lsrs	r5, r5, #5
 800e8b8:	f04f 0b01 	mov.w	fp, #1
 800e8bc:	464a      	mov	r2, r9
 800e8be:	4616      	mov	r6, r2
 800e8c0:	3201      	adds	r2, #1
 800e8c2:	7830      	ldrb	r0, [r6, #0]
 800e8c4:	f7ff ffb1 	bl	800e82a <__hexdig_fun>
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d1f8      	bne.n	800e8be <__gethex+0x6a>
 800e8cc:	498d      	ldr	r1, [pc, #564]	@ (800eb04 <__gethex+0x2b0>)
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	f7ff ff13 	bl	800e6fc <strncmp>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d13f      	bne.n	800e95a <__gethex+0x106>
 800e8da:	b944      	cbnz	r4, 800e8ee <__gethex+0x9a>
 800e8dc:	1c74      	adds	r4, r6, #1
 800e8de:	4622      	mov	r2, r4
 800e8e0:	4616      	mov	r6, r2
 800e8e2:	3201      	adds	r2, #1
 800e8e4:	7830      	ldrb	r0, [r6, #0]
 800e8e6:	f7ff ffa0 	bl	800e82a <__hexdig_fun>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d1f8      	bne.n	800e8e0 <__gethex+0x8c>
 800e8ee:	1ba4      	subs	r4, r4, r6
 800e8f0:	00a7      	lsls	r7, r4, #2
 800e8f2:	7833      	ldrb	r3, [r6, #0]
 800e8f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e8f8:	2b50      	cmp	r3, #80	@ 0x50
 800e8fa:	d13e      	bne.n	800e97a <__gethex+0x126>
 800e8fc:	7873      	ldrb	r3, [r6, #1]
 800e8fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800e900:	d033      	beq.n	800e96a <__gethex+0x116>
 800e902:	2b2d      	cmp	r3, #45	@ 0x2d
 800e904:	d034      	beq.n	800e970 <__gethex+0x11c>
 800e906:	1c71      	adds	r1, r6, #1
 800e908:	2400      	movs	r4, #0
 800e90a:	7808      	ldrb	r0, [r1, #0]
 800e90c:	f7ff ff8d 	bl	800e82a <__hexdig_fun>
 800e910:	1e43      	subs	r3, r0, #1
 800e912:	b2db      	uxtb	r3, r3
 800e914:	2b18      	cmp	r3, #24
 800e916:	d830      	bhi.n	800e97a <__gethex+0x126>
 800e918:	f1a0 0210 	sub.w	r2, r0, #16
 800e91c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e920:	f7ff ff83 	bl	800e82a <__hexdig_fun>
 800e924:	f100 3cff 	add.w	ip, r0, #4294967295
 800e928:	fa5f fc8c 	uxtb.w	ip, ip
 800e92c:	f1bc 0f18 	cmp.w	ip, #24
 800e930:	f04f 030a 	mov.w	r3, #10
 800e934:	d91e      	bls.n	800e974 <__gethex+0x120>
 800e936:	b104      	cbz	r4, 800e93a <__gethex+0xe6>
 800e938:	4252      	negs	r2, r2
 800e93a:	4417      	add	r7, r2
 800e93c:	f8ca 1000 	str.w	r1, [sl]
 800e940:	b1ed      	cbz	r5, 800e97e <__gethex+0x12a>
 800e942:	f1bb 0f00 	cmp.w	fp, #0
 800e946:	bf0c      	ite	eq
 800e948:	2506      	moveq	r5, #6
 800e94a:	2500      	movne	r5, #0
 800e94c:	4628      	mov	r0, r5
 800e94e:	b005      	add	sp, #20
 800e950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e954:	2500      	movs	r5, #0
 800e956:	462c      	mov	r4, r5
 800e958:	e7b0      	b.n	800e8bc <__gethex+0x68>
 800e95a:	2c00      	cmp	r4, #0
 800e95c:	d1c7      	bne.n	800e8ee <__gethex+0x9a>
 800e95e:	4627      	mov	r7, r4
 800e960:	e7c7      	b.n	800e8f2 <__gethex+0x9e>
 800e962:	464e      	mov	r6, r9
 800e964:	462f      	mov	r7, r5
 800e966:	2501      	movs	r5, #1
 800e968:	e7c3      	b.n	800e8f2 <__gethex+0x9e>
 800e96a:	2400      	movs	r4, #0
 800e96c:	1cb1      	adds	r1, r6, #2
 800e96e:	e7cc      	b.n	800e90a <__gethex+0xb6>
 800e970:	2401      	movs	r4, #1
 800e972:	e7fb      	b.n	800e96c <__gethex+0x118>
 800e974:	fb03 0002 	mla	r0, r3, r2, r0
 800e978:	e7ce      	b.n	800e918 <__gethex+0xc4>
 800e97a:	4631      	mov	r1, r6
 800e97c:	e7de      	b.n	800e93c <__gethex+0xe8>
 800e97e:	eba6 0309 	sub.w	r3, r6, r9
 800e982:	3b01      	subs	r3, #1
 800e984:	4629      	mov	r1, r5
 800e986:	2b07      	cmp	r3, #7
 800e988:	dc0a      	bgt.n	800e9a0 <__gethex+0x14c>
 800e98a:	9801      	ldr	r0, [sp, #4]
 800e98c:	f7fe f958 	bl	800cc40 <_Balloc>
 800e990:	4604      	mov	r4, r0
 800e992:	b940      	cbnz	r0, 800e9a6 <__gethex+0x152>
 800e994:	4b5c      	ldr	r3, [pc, #368]	@ (800eb08 <__gethex+0x2b4>)
 800e996:	4602      	mov	r2, r0
 800e998:	21e4      	movs	r1, #228	@ 0xe4
 800e99a:	485c      	ldr	r0, [pc, #368]	@ (800eb0c <__gethex+0x2b8>)
 800e99c:	f7fd f9da 	bl	800bd54 <__assert_func>
 800e9a0:	3101      	adds	r1, #1
 800e9a2:	105b      	asrs	r3, r3, #1
 800e9a4:	e7ef      	b.n	800e986 <__gethex+0x132>
 800e9a6:	f100 0a14 	add.w	sl, r0, #20
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	4655      	mov	r5, sl
 800e9ae:	469b      	mov	fp, r3
 800e9b0:	45b1      	cmp	r9, r6
 800e9b2:	d337      	bcc.n	800ea24 <__gethex+0x1d0>
 800e9b4:	f845 bb04 	str.w	fp, [r5], #4
 800e9b8:	eba5 050a 	sub.w	r5, r5, sl
 800e9bc:	10ad      	asrs	r5, r5, #2
 800e9be:	6125      	str	r5, [r4, #16]
 800e9c0:	4658      	mov	r0, fp
 800e9c2:	f7fe fa2f 	bl	800ce24 <__hi0bits>
 800e9c6:	016d      	lsls	r5, r5, #5
 800e9c8:	f8d8 6000 	ldr.w	r6, [r8]
 800e9cc:	1a2d      	subs	r5, r5, r0
 800e9ce:	42b5      	cmp	r5, r6
 800e9d0:	dd54      	ble.n	800ea7c <__gethex+0x228>
 800e9d2:	1bad      	subs	r5, r5, r6
 800e9d4:	4629      	mov	r1, r5
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f7fe fdbb 	bl	800d552 <__any_on>
 800e9dc:	4681      	mov	r9, r0
 800e9de:	b178      	cbz	r0, 800ea00 <__gethex+0x1ac>
 800e9e0:	1e6b      	subs	r3, r5, #1
 800e9e2:	1159      	asrs	r1, r3, #5
 800e9e4:	f003 021f 	and.w	r2, r3, #31
 800e9e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e9ec:	f04f 0901 	mov.w	r9, #1
 800e9f0:	fa09 f202 	lsl.w	r2, r9, r2
 800e9f4:	420a      	tst	r2, r1
 800e9f6:	d003      	beq.n	800ea00 <__gethex+0x1ac>
 800e9f8:	454b      	cmp	r3, r9
 800e9fa:	dc36      	bgt.n	800ea6a <__gethex+0x216>
 800e9fc:	f04f 0902 	mov.w	r9, #2
 800ea00:	4629      	mov	r1, r5
 800ea02:	4620      	mov	r0, r4
 800ea04:	f7ff febf 	bl	800e786 <rshift>
 800ea08:	442f      	add	r7, r5
 800ea0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea0e:	42bb      	cmp	r3, r7
 800ea10:	da42      	bge.n	800ea98 <__gethex+0x244>
 800ea12:	9801      	ldr	r0, [sp, #4]
 800ea14:	4621      	mov	r1, r4
 800ea16:	f7fe f953 	bl	800ccc0 <_Bfree>
 800ea1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	6013      	str	r3, [r2, #0]
 800ea20:	25a3      	movs	r5, #163	@ 0xa3
 800ea22:	e793      	b.n	800e94c <__gethex+0xf8>
 800ea24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ea28:	2a2e      	cmp	r2, #46	@ 0x2e
 800ea2a:	d012      	beq.n	800ea52 <__gethex+0x1fe>
 800ea2c:	2b20      	cmp	r3, #32
 800ea2e:	d104      	bne.n	800ea3a <__gethex+0x1e6>
 800ea30:	f845 bb04 	str.w	fp, [r5], #4
 800ea34:	f04f 0b00 	mov.w	fp, #0
 800ea38:	465b      	mov	r3, fp
 800ea3a:	7830      	ldrb	r0, [r6, #0]
 800ea3c:	9303      	str	r3, [sp, #12]
 800ea3e:	f7ff fef4 	bl	800e82a <__hexdig_fun>
 800ea42:	9b03      	ldr	r3, [sp, #12]
 800ea44:	f000 000f 	and.w	r0, r0, #15
 800ea48:	4098      	lsls	r0, r3
 800ea4a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ea4e:	3304      	adds	r3, #4
 800ea50:	e7ae      	b.n	800e9b0 <__gethex+0x15c>
 800ea52:	45b1      	cmp	r9, r6
 800ea54:	d8ea      	bhi.n	800ea2c <__gethex+0x1d8>
 800ea56:	492b      	ldr	r1, [pc, #172]	@ (800eb04 <__gethex+0x2b0>)
 800ea58:	9303      	str	r3, [sp, #12]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f7ff fe4d 	bl	800e6fc <strncmp>
 800ea62:	9b03      	ldr	r3, [sp, #12]
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d1e1      	bne.n	800ea2c <__gethex+0x1d8>
 800ea68:	e7a2      	b.n	800e9b0 <__gethex+0x15c>
 800ea6a:	1ea9      	subs	r1, r5, #2
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	f7fe fd70 	bl	800d552 <__any_on>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d0c2      	beq.n	800e9fc <__gethex+0x1a8>
 800ea76:	f04f 0903 	mov.w	r9, #3
 800ea7a:	e7c1      	b.n	800ea00 <__gethex+0x1ac>
 800ea7c:	da09      	bge.n	800ea92 <__gethex+0x23e>
 800ea7e:	1b75      	subs	r5, r6, r5
 800ea80:	4621      	mov	r1, r4
 800ea82:	9801      	ldr	r0, [sp, #4]
 800ea84:	462a      	mov	r2, r5
 800ea86:	f7fe fb2b 	bl	800d0e0 <__lshift>
 800ea8a:	1b7f      	subs	r7, r7, r5
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	f100 0a14 	add.w	sl, r0, #20
 800ea92:	f04f 0900 	mov.w	r9, #0
 800ea96:	e7b8      	b.n	800ea0a <__gethex+0x1b6>
 800ea98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ea9c:	42bd      	cmp	r5, r7
 800ea9e:	dd6f      	ble.n	800eb80 <__gethex+0x32c>
 800eaa0:	1bed      	subs	r5, r5, r7
 800eaa2:	42ae      	cmp	r6, r5
 800eaa4:	dc34      	bgt.n	800eb10 <__gethex+0x2bc>
 800eaa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	d022      	beq.n	800eaf4 <__gethex+0x2a0>
 800eaae:	2b03      	cmp	r3, #3
 800eab0:	d024      	beq.n	800eafc <__gethex+0x2a8>
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d115      	bne.n	800eae2 <__gethex+0x28e>
 800eab6:	42ae      	cmp	r6, r5
 800eab8:	d113      	bne.n	800eae2 <__gethex+0x28e>
 800eaba:	2e01      	cmp	r6, #1
 800eabc:	d10b      	bne.n	800ead6 <__gethex+0x282>
 800eabe:	9a02      	ldr	r2, [sp, #8]
 800eac0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eac4:	6013      	str	r3, [r2, #0]
 800eac6:	2301      	movs	r3, #1
 800eac8:	6123      	str	r3, [r4, #16]
 800eaca:	f8ca 3000 	str.w	r3, [sl]
 800eace:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ead0:	2562      	movs	r5, #98	@ 0x62
 800ead2:	601c      	str	r4, [r3, #0]
 800ead4:	e73a      	b.n	800e94c <__gethex+0xf8>
 800ead6:	1e71      	subs	r1, r6, #1
 800ead8:	4620      	mov	r0, r4
 800eada:	f7fe fd3a 	bl	800d552 <__any_on>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d1ed      	bne.n	800eabe <__gethex+0x26a>
 800eae2:	9801      	ldr	r0, [sp, #4]
 800eae4:	4621      	mov	r1, r4
 800eae6:	f7fe f8eb 	bl	800ccc0 <_Bfree>
 800eaea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eaec:	2300      	movs	r3, #0
 800eaee:	6013      	str	r3, [r2, #0]
 800eaf0:	2550      	movs	r5, #80	@ 0x50
 800eaf2:	e72b      	b.n	800e94c <__gethex+0xf8>
 800eaf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1f3      	bne.n	800eae2 <__gethex+0x28e>
 800eafa:	e7e0      	b.n	800eabe <__gethex+0x26a>
 800eafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1dd      	bne.n	800eabe <__gethex+0x26a>
 800eb02:	e7ee      	b.n	800eae2 <__gethex+0x28e>
 800eb04:	08013f27 	.word	0x08013f27
 800eb08:	08013ebd 	.word	0x08013ebd
 800eb0c:	08013f42 	.word	0x08013f42
 800eb10:	1e6f      	subs	r7, r5, #1
 800eb12:	f1b9 0f00 	cmp.w	r9, #0
 800eb16:	d130      	bne.n	800eb7a <__gethex+0x326>
 800eb18:	b127      	cbz	r7, 800eb24 <__gethex+0x2d0>
 800eb1a:	4639      	mov	r1, r7
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f7fe fd18 	bl	800d552 <__any_on>
 800eb22:	4681      	mov	r9, r0
 800eb24:	117a      	asrs	r2, r7, #5
 800eb26:	2301      	movs	r3, #1
 800eb28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eb2c:	f007 071f 	and.w	r7, r7, #31
 800eb30:	40bb      	lsls	r3, r7
 800eb32:	4213      	tst	r3, r2
 800eb34:	4629      	mov	r1, r5
 800eb36:	4620      	mov	r0, r4
 800eb38:	bf18      	it	ne
 800eb3a:	f049 0902 	orrne.w	r9, r9, #2
 800eb3e:	f7ff fe22 	bl	800e786 <rshift>
 800eb42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800eb46:	1b76      	subs	r6, r6, r5
 800eb48:	2502      	movs	r5, #2
 800eb4a:	f1b9 0f00 	cmp.w	r9, #0
 800eb4e:	d047      	beq.n	800ebe0 <__gethex+0x38c>
 800eb50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d015      	beq.n	800eb84 <__gethex+0x330>
 800eb58:	2b03      	cmp	r3, #3
 800eb5a:	d017      	beq.n	800eb8c <__gethex+0x338>
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d109      	bne.n	800eb74 <__gethex+0x320>
 800eb60:	f019 0f02 	tst.w	r9, #2
 800eb64:	d006      	beq.n	800eb74 <__gethex+0x320>
 800eb66:	f8da 3000 	ldr.w	r3, [sl]
 800eb6a:	ea49 0903 	orr.w	r9, r9, r3
 800eb6e:	f019 0f01 	tst.w	r9, #1
 800eb72:	d10e      	bne.n	800eb92 <__gethex+0x33e>
 800eb74:	f045 0510 	orr.w	r5, r5, #16
 800eb78:	e032      	b.n	800ebe0 <__gethex+0x38c>
 800eb7a:	f04f 0901 	mov.w	r9, #1
 800eb7e:	e7d1      	b.n	800eb24 <__gethex+0x2d0>
 800eb80:	2501      	movs	r5, #1
 800eb82:	e7e2      	b.n	800eb4a <__gethex+0x2f6>
 800eb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb86:	f1c3 0301 	rsb	r3, r3, #1
 800eb8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eb8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d0f0      	beq.n	800eb74 <__gethex+0x320>
 800eb92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eb96:	f104 0314 	add.w	r3, r4, #20
 800eb9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eb9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eba2:	f04f 0c00 	mov.w	ip, #0
 800eba6:	4618      	mov	r0, r3
 800eba8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ebb0:	d01b      	beq.n	800ebea <__gethex+0x396>
 800ebb2:	3201      	adds	r2, #1
 800ebb4:	6002      	str	r2, [r0, #0]
 800ebb6:	2d02      	cmp	r5, #2
 800ebb8:	f104 0314 	add.w	r3, r4, #20
 800ebbc:	d13c      	bne.n	800ec38 <__gethex+0x3e4>
 800ebbe:	f8d8 2000 	ldr.w	r2, [r8]
 800ebc2:	3a01      	subs	r2, #1
 800ebc4:	42b2      	cmp	r2, r6
 800ebc6:	d109      	bne.n	800ebdc <__gethex+0x388>
 800ebc8:	1171      	asrs	r1, r6, #5
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ebd0:	f006 061f 	and.w	r6, r6, #31
 800ebd4:	fa02 f606 	lsl.w	r6, r2, r6
 800ebd8:	421e      	tst	r6, r3
 800ebda:	d13a      	bne.n	800ec52 <__gethex+0x3fe>
 800ebdc:	f045 0520 	orr.w	r5, r5, #32
 800ebe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebe2:	601c      	str	r4, [r3, #0]
 800ebe4:	9b02      	ldr	r3, [sp, #8]
 800ebe6:	601f      	str	r7, [r3, #0]
 800ebe8:	e6b0      	b.n	800e94c <__gethex+0xf8>
 800ebea:	4299      	cmp	r1, r3
 800ebec:	f843 cc04 	str.w	ip, [r3, #-4]
 800ebf0:	d8d9      	bhi.n	800eba6 <__gethex+0x352>
 800ebf2:	68a3      	ldr	r3, [r4, #8]
 800ebf4:	459b      	cmp	fp, r3
 800ebf6:	db17      	blt.n	800ec28 <__gethex+0x3d4>
 800ebf8:	6861      	ldr	r1, [r4, #4]
 800ebfa:	9801      	ldr	r0, [sp, #4]
 800ebfc:	3101      	adds	r1, #1
 800ebfe:	f7fe f81f 	bl	800cc40 <_Balloc>
 800ec02:	4681      	mov	r9, r0
 800ec04:	b918      	cbnz	r0, 800ec0e <__gethex+0x3ba>
 800ec06:	4b1a      	ldr	r3, [pc, #104]	@ (800ec70 <__gethex+0x41c>)
 800ec08:	4602      	mov	r2, r0
 800ec0a:	2184      	movs	r1, #132	@ 0x84
 800ec0c:	e6c5      	b.n	800e99a <__gethex+0x146>
 800ec0e:	6922      	ldr	r2, [r4, #16]
 800ec10:	3202      	adds	r2, #2
 800ec12:	f104 010c 	add.w	r1, r4, #12
 800ec16:	0092      	lsls	r2, r2, #2
 800ec18:	300c      	adds	r0, #12
 800ec1a:	f7fd f886 	bl	800bd2a <memcpy>
 800ec1e:	4621      	mov	r1, r4
 800ec20:	9801      	ldr	r0, [sp, #4]
 800ec22:	f7fe f84d 	bl	800ccc0 <_Bfree>
 800ec26:	464c      	mov	r4, r9
 800ec28:	6923      	ldr	r3, [r4, #16]
 800ec2a:	1c5a      	adds	r2, r3, #1
 800ec2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec30:	6122      	str	r2, [r4, #16]
 800ec32:	2201      	movs	r2, #1
 800ec34:	615a      	str	r2, [r3, #20]
 800ec36:	e7be      	b.n	800ebb6 <__gethex+0x362>
 800ec38:	6922      	ldr	r2, [r4, #16]
 800ec3a:	455a      	cmp	r2, fp
 800ec3c:	dd0b      	ble.n	800ec56 <__gethex+0x402>
 800ec3e:	2101      	movs	r1, #1
 800ec40:	4620      	mov	r0, r4
 800ec42:	f7ff fda0 	bl	800e786 <rshift>
 800ec46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec4a:	3701      	adds	r7, #1
 800ec4c:	42bb      	cmp	r3, r7
 800ec4e:	f6ff aee0 	blt.w	800ea12 <__gethex+0x1be>
 800ec52:	2501      	movs	r5, #1
 800ec54:	e7c2      	b.n	800ebdc <__gethex+0x388>
 800ec56:	f016 061f 	ands.w	r6, r6, #31
 800ec5a:	d0fa      	beq.n	800ec52 <__gethex+0x3fe>
 800ec5c:	4453      	add	r3, sl
 800ec5e:	f1c6 0620 	rsb	r6, r6, #32
 800ec62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ec66:	f7fe f8dd 	bl	800ce24 <__hi0bits>
 800ec6a:	42b0      	cmp	r0, r6
 800ec6c:	dbe7      	blt.n	800ec3e <__gethex+0x3ea>
 800ec6e:	e7f0      	b.n	800ec52 <__gethex+0x3fe>
 800ec70:	08013ebd 	.word	0x08013ebd

0800ec74 <L_shift>:
 800ec74:	f1c2 0208 	rsb	r2, r2, #8
 800ec78:	0092      	lsls	r2, r2, #2
 800ec7a:	b570      	push	{r4, r5, r6, lr}
 800ec7c:	f1c2 0620 	rsb	r6, r2, #32
 800ec80:	6843      	ldr	r3, [r0, #4]
 800ec82:	6804      	ldr	r4, [r0, #0]
 800ec84:	fa03 f506 	lsl.w	r5, r3, r6
 800ec88:	432c      	orrs	r4, r5
 800ec8a:	40d3      	lsrs	r3, r2
 800ec8c:	6004      	str	r4, [r0, #0]
 800ec8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec92:	4288      	cmp	r0, r1
 800ec94:	d3f4      	bcc.n	800ec80 <L_shift+0xc>
 800ec96:	bd70      	pop	{r4, r5, r6, pc}

0800ec98 <__match>:
 800ec98:	b530      	push	{r4, r5, lr}
 800ec9a:	6803      	ldr	r3, [r0, #0]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eca2:	b914      	cbnz	r4, 800ecaa <__match+0x12>
 800eca4:	6003      	str	r3, [r0, #0]
 800eca6:	2001      	movs	r0, #1
 800eca8:	bd30      	pop	{r4, r5, pc}
 800ecaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ecb2:	2d19      	cmp	r5, #25
 800ecb4:	bf98      	it	ls
 800ecb6:	3220      	addls	r2, #32
 800ecb8:	42a2      	cmp	r2, r4
 800ecba:	d0f0      	beq.n	800ec9e <__match+0x6>
 800ecbc:	2000      	movs	r0, #0
 800ecbe:	e7f3      	b.n	800eca8 <__match+0x10>

0800ecc0 <__hexnan>:
 800ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc4:	680b      	ldr	r3, [r1, #0]
 800ecc6:	6801      	ldr	r1, [r0, #0]
 800ecc8:	115e      	asrs	r6, r3, #5
 800ecca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ecce:	f013 031f 	ands.w	r3, r3, #31
 800ecd2:	b087      	sub	sp, #28
 800ecd4:	bf18      	it	ne
 800ecd6:	3604      	addne	r6, #4
 800ecd8:	2500      	movs	r5, #0
 800ecda:	1f37      	subs	r7, r6, #4
 800ecdc:	4682      	mov	sl, r0
 800ecde:	4690      	mov	r8, r2
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ece6:	46b9      	mov	r9, r7
 800ece8:	463c      	mov	r4, r7
 800ecea:	9502      	str	r5, [sp, #8]
 800ecec:	46ab      	mov	fp, r5
 800ecee:	784a      	ldrb	r2, [r1, #1]
 800ecf0:	1c4b      	adds	r3, r1, #1
 800ecf2:	9303      	str	r3, [sp, #12]
 800ecf4:	b342      	cbz	r2, 800ed48 <__hexnan+0x88>
 800ecf6:	4610      	mov	r0, r2
 800ecf8:	9105      	str	r1, [sp, #20]
 800ecfa:	9204      	str	r2, [sp, #16]
 800ecfc:	f7ff fd95 	bl	800e82a <__hexdig_fun>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d151      	bne.n	800eda8 <__hexnan+0xe8>
 800ed04:	9a04      	ldr	r2, [sp, #16]
 800ed06:	9905      	ldr	r1, [sp, #20]
 800ed08:	2a20      	cmp	r2, #32
 800ed0a:	d818      	bhi.n	800ed3e <__hexnan+0x7e>
 800ed0c:	9b02      	ldr	r3, [sp, #8]
 800ed0e:	459b      	cmp	fp, r3
 800ed10:	dd13      	ble.n	800ed3a <__hexnan+0x7a>
 800ed12:	454c      	cmp	r4, r9
 800ed14:	d206      	bcs.n	800ed24 <__hexnan+0x64>
 800ed16:	2d07      	cmp	r5, #7
 800ed18:	dc04      	bgt.n	800ed24 <__hexnan+0x64>
 800ed1a:	462a      	mov	r2, r5
 800ed1c:	4649      	mov	r1, r9
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f7ff ffa8 	bl	800ec74 <L_shift>
 800ed24:	4544      	cmp	r4, r8
 800ed26:	d952      	bls.n	800edce <__hexnan+0x10e>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	f1a4 0904 	sub.w	r9, r4, #4
 800ed2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed32:	f8cd b008 	str.w	fp, [sp, #8]
 800ed36:	464c      	mov	r4, r9
 800ed38:	461d      	mov	r5, r3
 800ed3a:	9903      	ldr	r1, [sp, #12]
 800ed3c:	e7d7      	b.n	800ecee <__hexnan+0x2e>
 800ed3e:	2a29      	cmp	r2, #41	@ 0x29
 800ed40:	d157      	bne.n	800edf2 <__hexnan+0x132>
 800ed42:	3102      	adds	r1, #2
 800ed44:	f8ca 1000 	str.w	r1, [sl]
 800ed48:	f1bb 0f00 	cmp.w	fp, #0
 800ed4c:	d051      	beq.n	800edf2 <__hexnan+0x132>
 800ed4e:	454c      	cmp	r4, r9
 800ed50:	d206      	bcs.n	800ed60 <__hexnan+0xa0>
 800ed52:	2d07      	cmp	r5, #7
 800ed54:	dc04      	bgt.n	800ed60 <__hexnan+0xa0>
 800ed56:	462a      	mov	r2, r5
 800ed58:	4649      	mov	r1, r9
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7ff ff8a 	bl	800ec74 <L_shift>
 800ed60:	4544      	cmp	r4, r8
 800ed62:	d936      	bls.n	800edd2 <__hexnan+0x112>
 800ed64:	f1a8 0204 	sub.w	r2, r8, #4
 800ed68:	4623      	mov	r3, r4
 800ed6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ed6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ed72:	429f      	cmp	r7, r3
 800ed74:	d2f9      	bcs.n	800ed6a <__hexnan+0xaa>
 800ed76:	1b3b      	subs	r3, r7, r4
 800ed78:	f023 0303 	bic.w	r3, r3, #3
 800ed7c:	3304      	adds	r3, #4
 800ed7e:	3401      	adds	r4, #1
 800ed80:	3e03      	subs	r6, #3
 800ed82:	42b4      	cmp	r4, r6
 800ed84:	bf88      	it	hi
 800ed86:	2304      	movhi	r3, #4
 800ed88:	4443      	add	r3, r8
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f843 2b04 	str.w	r2, [r3], #4
 800ed90:	429f      	cmp	r7, r3
 800ed92:	d2fb      	bcs.n	800ed8c <__hexnan+0xcc>
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	b91b      	cbnz	r3, 800eda0 <__hexnan+0xe0>
 800ed98:	4547      	cmp	r7, r8
 800ed9a:	d128      	bne.n	800edee <__hexnan+0x12e>
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	603b      	str	r3, [r7, #0]
 800eda0:	2005      	movs	r0, #5
 800eda2:	b007      	add	sp, #28
 800eda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda8:	3501      	adds	r5, #1
 800edaa:	2d08      	cmp	r5, #8
 800edac:	f10b 0b01 	add.w	fp, fp, #1
 800edb0:	dd06      	ble.n	800edc0 <__hexnan+0x100>
 800edb2:	4544      	cmp	r4, r8
 800edb4:	d9c1      	bls.n	800ed3a <__hexnan+0x7a>
 800edb6:	2300      	movs	r3, #0
 800edb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800edbc:	2501      	movs	r5, #1
 800edbe:	3c04      	subs	r4, #4
 800edc0:	6822      	ldr	r2, [r4, #0]
 800edc2:	f000 000f 	and.w	r0, r0, #15
 800edc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800edca:	6020      	str	r0, [r4, #0]
 800edcc:	e7b5      	b.n	800ed3a <__hexnan+0x7a>
 800edce:	2508      	movs	r5, #8
 800edd0:	e7b3      	b.n	800ed3a <__hexnan+0x7a>
 800edd2:	9b01      	ldr	r3, [sp, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d0dd      	beq.n	800ed94 <__hexnan+0xd4>
 800edd8:	f1c3 0320 	rsb	r3, r3, #32
 800eddc:	f04f 32ff 	mov.w	r2, #4294967295
 800ede0:	40da      	lsrs	r2, r3
 800ede2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ede6:	4013      	ands	r3, r2
 800ede8:	f846 3c04 	str.w	r3, [r6, #-4]
 800edec:	e7d2      	b.n	800ed94 <__hexnan+0xd4>
 800edee:	3f04      	subs	r7, #4
 800edf0:	e7d0      	b.n	800ed94 <__hexnan+0xd4>
 800edf2:	2004      	movs	r0, #4
 800edf4:	e7d5      	b.n	800eda2 <__hexnan+0xe2>

0800edf6 <__ascii_mbtowc>:
 800edf6:	b082      	sub	sp, #8
 800edf8:	b901      	cbnz	r1, 800edfc <__ascii_mbtowc+0x6>
 800edfa:	a901      	add	r1, sp, #4
 800edfc:	b142      	cbz	r2, 800ee10 <__ascii_mbtowc+0x1a>
 800edfe:	b14b      	cbz	r3, 800ee14 <__ascii_mbtowc+0x1e>
 800ee00:	7813      	ldrb	r3, [r2, #0]
 800ee02:	600b      	str	r3, [r1, #0]
 800ee04:	7812      	ldrb	r2, [r2, #0]
 800ee06:	1e10      	subs	r0, r2, #0
 800ee08:	bf18      	it	ne
 800ee0a:	2001      	movne	r0, #1
 800ee0c:	b002      	add	sp, #8
 800ee0e:	4770      	bx	lr
 800ee10:	4610      	mov	r0, r2
 800ee12:	e7fb      	b.n	800ee0c <__ascii_mbtowc+0x16>
 800ee14:	f06f 0001 	mvn.w	r0, #1
 800ee18:	e7f8      	b.n	800ee0c <__ascii_mbtowc+0x16>

0800ee1a <_realloc_r>:
 800ee1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1e:	4607      	mov	r7, r0
 800ee20:	4614      	mov	r4, r2
 800ee22:	460d      	mov	r5, r1
 800ee24:	b921      	cbnz	r1, 800ee30 <_realloc_r+0x16>
 800ee26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2a:	4611      	mov	r1, r2
 800ee2c:	f7fd be7c 	b.w	800cb28 <_malloc_r>
 800ee30:	b92a      	cbnz	r2, 800ee3e <_realloc_r+0x24>
 800ee32:	f7fd fe05 	bl	800ca40 <_free_r>
 800ee36:	4625      	mov	r5, r4
 800ee38:	4628      	mov	r0, r5
 800ee3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3e:	f000 fa41 	bl	800f2c4 <_malloc_usable_size_r>
 800ee42:	4284      	cmp	r4, r0
 800ee44:	4606      	mov	r6, r0
 800ee46:	d802      	bhi.n	800ee4e <_realloc_r+0x34>
 800ee48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee4c:	d8f4      	bhi.n	800ee38 <_realloc_r+0x1e>
 800ee4e:	4621      	mov	r1, r4
 800ee50:	4638      	mov	r0, r7
 800ee52:	f7fd fe69 	bl	800cb28 <_malloc_r>
 800ee56:	4680      	mov	r8, r0
 800ee58:	b908      	cbnz	r0, 800ee5e <_realloc_r+0x44>
 800ee5a:	4645      	mov	r5, r8
 800ee5c:	e7ec      	b.n	800ee38 <_realloc_r+0x1e>
 800ee5e:	42b4      	cmp	r4, r6
 800ee60:	4622      	mov	r2, r4
 800ee62:	4629      	mov	r1, r5
 800ee64:	bf28      	it	cs
 800ee66:	4632      	movcs	r2, r6
 800ee68:	f7fc ff5f 	bl	800bd2a <memcpy>
 800ee6c:	4629      	mov	r1, r5
 800ee6e:	4638      	mov	r0, r7
 800ee70:	f7fd fde6 	bl	800ca40 <_free_r>
 800ee74:	e7f1      	b.n	800ee5a <_realloc_r+0x40>

0800ee76 <__ascii_wctomb>:
 800ee76:	4603      	mov	r3, r0
 800ee78:	4608      	mov	r0, r1
 800ee7a:	b141      	cbz	r1, 800ee8e <__ascii_wctomb+0x18>
 800ee7c:	2aff      	cmp	r2, #255	@ 0xff
 800ee7e:	d904      	bls.n	800ee8a <__ascii_wctomb+0x14>
 800ee80:	228a      	movs	r2, #138	@ 0x8a
 800ee82:	601a      	str	r2, [r3, #0]
 800ee84:	f04f 30ff 	mov.w	r0, #4294967295
 800ee88:	4770      	bx	lr
 800ee8a:	700a      	strb	r2, [r1, #0]
 800ee8c:	2001      	movs	r0, #1
 800ee8e:	4770      	bx	lr

0800ee90 <__sfputc_r>:
 800ee90:	6893      	ldr	r3, [r2, #8]
 800ee92:	3b01      	subs	r3, #1
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	b410      	push	{r4}
 800ee98:	6093      	str	r3, [r2, #8]
 800ee9a:	da08      	bge.n	800eeae <__sfputc_r+0x1e>
 800ee9c:	6994      	ldr	r4, [r2, #24]
 800ee9e:	42a3      	cmp	r3, r4
 800eea0:	db01      	blt.n	800eea6 <__sfputc_r+0x16>
 800eea2:	290a      	cmp	r1, #10
 800eea4:	d103      	bne.n	800eeae <__sfputc_r+0x1e>
 800eea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eeaa:	f000 b933 	b.w	800f114 <__swbuf_r>
 800eeae:	6813      	ldr	r3, [r2, #0]
 800eeb0:	1c58      	adds	r0, r3, #1
 800eeb2:	6010      	str	r0, [r2, #0]
 800eeb4:	7019      	strb	r1, [r3, #0]
 800eeb6:	4608      	mov	r0, r1
 800eeb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <__sfputs_r>:
 800eebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec0:	4606      	mov	r6, r0
 800eec2:	460f      	mov	r7, r1
 800eec4:	4614      	mov	r4, r2
 800eec6:	18d5      	adds	r5, r2, r3
 800eec8:	42ac      	cmp	r4, r5
 800eeca:	d101      	bne.n	800eed0 <__sfputs_r+0x12>
 800eecc:	2000      	movs	r0, #0
 800eece:	e007      	b.n	800eee0 <__sfputs_r+0x22>
 800eed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed4:	463a      	mov	r2, r7
 800eed6:	4630      	mov	r0, r6
 800eed8:	f7ff ffda 	bl	800ee90 <__sfputc_r>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d1f3      	bne.n	800eec8 <__sfputs_r+0xa>
 800eee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eee4 <_vfiprintf_r>:
 800eee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee8:	460d      	mov	r5, r1
 800eeea:	b09d      	sub	sp, #116	@ 0x74
 800eeec:	4614      	mov	r4, r2
 800eeee:	4698      	mov	r8, r3
 800eef0:	4606      	mov	r6, r0
 800eef2:	b118      	cbz	r0, 800eefc <_vfiprintf_r+0x18>
 800eef4:	6a03      	ldr	r3, [r0, #32]
 800eef6:	b90b      	cbnz	r3, 800eefc <_vfiprintf_r+0x18>
 800eef8:	f7fc fdb4 	bl	800ba64 <__sinit>
 800eefc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eefe:	07d9      	lsls	r1, r3, #31
 800ef00:	d405      	bmi.n	800ef0e <_vfiprintf_r+0x2a>
 800ef02:	89ab      	ldrh	r3, [r5, #12]
 800ef04:	059a      	lsls	r2, r3, #22
 800ef06:	d402      	bmi.n	800ef0e <_vfiprintf_r+0x2a>
 800ef08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef0a:	f7fc ff0c 	bl	800bd26 <__retarget_lock_acquire_recursive>
 800ef0e:	89ab      	ldrh	r3, [r5, #12]
 800ef10:	071b      	lsls	r3, r3, #28
 800ef12:	d501      	bpl.n	800ef18 <_vfiprintf_r+0x34>
 800ef14:	692b      	ldr	r3, [r5, #16]
 800ef16:	b99b      	cbnz	r3, 800ef40 <_vfiprintf_r+0x5c>
 800ef18:	4629      	mov	r1, r5
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	f000 f938 	bl	800f190 <__swsetup_r>
 800ef20:	b170      	cbz	r0, 800ef40 <_vfiprintf_r+0x5c>
 800ef22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef24:	07dc      	lsls	r4, r3, #31
 800ef26:	d504      	bpl.n	800ef32 <_vfiprintf_r+0x4e>
 800ef28:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2c:	b01d      	add	sp, #116	@ 0x74
 800ef2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef32:	89ab      	ldrh	r3, [r5, #12]
 800ef34:	0598      	lsls	r0, r3, #22
 800ef36:	d4f7      	bmi.n	800ef28 <_vfiprintf_r+0x44>
 800ef38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef3a:	f7fc fef5 	bl	800bd28 <__retarget_lock_release_recursive>
 800ef3e:	e7f3      	b.n	800ef28 <_vfiprintf_r+0x44>
 800ef40:	2300      	movs	r3, #0
 800ef42:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef44:	2320      	movs	r3, #32
 800ef46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef4e:	2330      	movs	r3, #48	@ 0x30
 800ef50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f100 <_vfiprintf_r+0x21c>
 800ef54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef58:	f04f 0901 	mov.w	r9, #1
 800ef5c:	4623      	mov	r3, r4
 800ef5e:	469a      	mov	sl, r3
 800ef60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef64:	b10a      	cbz	r2, 800ef6a <_vfiprintf_r+0x86>
 800ef66:	2a25      	cmp	r2, #37	@ 0x25
 800ef68:	d1f9      	bne.n	800ef5e <_vfiprintf_r+0x7a>
 800ef6a:	ebba 0b04 	subs.w	fp, sl, r4
 800ef6e:	d00b      	beq.n	800ef88 <_vfiprintf_r+0xa4>
 800ef70:	465b      	mov	r3, fp
 800ef72:	4622      	mov	r2, r4
 800ef74:	4629      	mov	r1, r5
 800ef76:	4630      	mov	r0, r6
 800ef78:	f7ff ffa1 	bl	800eebe <__sfputs_r>
 800ef7c:	3001      	adds	r0, #1
 800ef7e:	f000 80a7 	beq.w	800f0d0 <_vfiprintf_r+0x1ec>
 800ef82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef84:	445a      	add	r2, fp
 800ef86:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef88:	f89a 3000 	ldrb.w	r3, [sl]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f000 809f 	beq.w	800f0d0 <_vfiprintf_r+0x1ec>
 800ef92:	2300      	movs	r3, #0
 800ef94:	f04f 32ff 	mov.w	r2, #4294967295
 800ef98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef9c:	f10a 0a01 	add.w	sl, sl, #1
 800efa0:	9304      	str	r3, [sp, #16]
 800efa2:	9307      	str	r3, [sp, #28]
 800efa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efa8:	931a      	str	r3, [sp, #104]	@ 0x68
 800efaa:	4654      	mov	r4, sl
 800efac:	2205      	movs	r2, #5
 800efae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efb2:	4853      	ldr	r0, [pc, #332]	@ (800f100 <_vfiprintf_r+0x21c>)
 800efb4:	f7f1 f90c 	bl	80001d0 <memchr>
 800efb8:	9a04      	ldr	r2, [sp, #16]
 800efba:	b9d8      	cbnz	r0, 800eff4 <_vfiprintf_r+0x110>
 800efbc:	06d1      	lsls	r1, r2, #27
 800efbe:	bf44      	itt	mi
 800efc0:	2320      	movmi	r3, #32
 800efc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efc6:	0713      	lsls	r3, r2, #28
 800efc8:	bf44      	itt	mi
 800efca:	232b      	movmi	r3, #43	@ 0x2b
 800efcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efd0:	f89a 3000 	ldrb.w	r3, [sl]
 800efd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800efd6:	d015      	beq.n	800f004 <_vfiprintf_r+0x120>
 800efd8:	9a07      	ldr	r2, [sp, #28]
 800efda:	4654      	mov	r4, sl
 800efdc:	2000      	movs	r0, #0
 800efde:	f04f 0c0a 	mov.w	ip, #10
 800efe2:	4621      	mov	r1, r4
 800efe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efe8:	3b30      	subs	r3, #48	@ 0x30
 800efea:	2b09      	cmp	r3, #9
 800efec:	d94b      	bls.n	800f086 <_vfiprintf_r+0x1a2>
 800efee:	b1b0      	cbz	r0, 800f01e <_vfiprintf_r+0x13a>
 800eff0:	9207      	str	r2, [sp, #28]
 800eff2:	e014      	b.n	800f01e <_vfiprintf_r+0x13a>
 800eff4:	eba0 0308 	sub.w	r3, r0, r8
 800eff8:	fa09 f303 	lsl.w	r3, r9, r3
 800effc:	4313      	orrs	r3, r2
 800effe:	9304      	str	r3, [sp, #16]
 800f000:	46a2      	mov	sl, r4
 800f002:	e7d2      	b.n	800efaa <_vfiprintf_r+0xc6>
 800f004:	9b03      	ldr	r3, [sp, #12]
 800f006:	1d19      	adds	r1, r3, #4
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	9103      	str	r1, [sp, #12]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	bfbb      	ittet	lt
 800f010:	425b      	neglt	r3, r3
 800f012:	f042 0202 	orrlt.w	r2, r2, #2
 800f016:	9307      	strge	r3, [sp, #28]
 800f018:	9307      	strlt	r3, [sp, #28]
 800f01a:	bfb8      	it	lt
 800f01c:	9204      	strlt	r2, [sp, #16]
 800f01e:	7823      	ldrb	r3, [r4, #0]
 800f020:	2b2e      	cmp	r3, #46	@ 0x2e
 800f022:	d10a      	bne.n	800f03a <_vfiprintf_r+0x156>
 800f024:	7863      	ldrb	r3, [r4, #1]
 800f026:	2b2a      	cmp	r3, #42	@ 0x2a
 800f028:	d132      	bne.n	800f090 <_vfiprintf_r+0x1ac>
 800f02a:	9b03      	ldr	r3, [sp, #12]
 800f02c:	1d1a      	adds	r2, r3, #4
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	9203      	str	r2, [sp, #12]
 800f032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f036:	3402      	adds	r4, #2
 800f038:	9305      	str	r3, [sp, #20]
 800f03a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f110 <_vfiprintf_r+0x22c>
 800f03e:	7821      	ldrb	r1, [r4, #0]
 800f040:	2203      	movs	r2, #3
 800f042:	4650      	mov	r0, sl
 800f044:	f7f1 f8c4 	bl	80001d0 <memchr>
 800f048:	b138      	cbz	r0, 800f05a <_vfiprintf_r+0x176>
 800f04a:	9b04      	ldr	r3, [sp, #16]
 800f04c:	eba0 000a 	sub.w	r0, r0, sl
 800f050:	2240      	movs	r2, #64	@ 0x40
 800f052:	4082      	lsls	r2, r0
 800f054:	4313      	orrs	r3, r2
 800f056:	3401      	adds	r4, #1
 800f058:	9304      	str	r3, [sp, #16]
 800f05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f05e:	4829      	ldr	r0, [pc, #164]	@ (800f104 <_vfiprintf_r+0x220>)
 800f060:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f064:	2206      	movs	r2, #6
 800f066:	f7f1 f8b3 	bl	80001d0 <memchr>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d03f      	beq.n	800f0ee <_vfiprintf_r+0x20a>
 800f06e:	4b26      	ldr	r3, [pc, #152]	@ (800f108 <_vfiprintf_r+0x224>)
 800f070:	bb1b      	cbnz	r3, 800f0ba <_vfiprintf_r+0x1d6>
 800f072:	9b03      	ldr	r3, [sp, #12]
 800f074:	3307      	adds	r3, #7
 800f076:	f023 0307 	bic.w	r3, r3, #7
 800f07a:	3308      	adds	r3, #8
 800f07c:	9303      	str	r3, [sp, #12]
 800f07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f080:	443b      	add	r3, r7
 800f082:	9309      	str	r3, [sp, #36]	@ 0x24
 800f084:	e76a      	b.n	800ef5c <_vfiprintf_r+0x78>
 800f086:	fb0c 3202 	mla	r2, ip, r2, r3
 800f08a:	460c      	mov	r4, r1
 800f08c:	2001      	movs	r0, #1
 800f08e:	e7a8      	b.n	800efe2 <_vfiprintf_r+0xfe>
 800f090:	2300      	movs	r3, #0
 800f092:	3401      	adds	r4, #1
 800f094:	9305      	str	r3, [sp, #20]
 800f096:	4619      	mov	r1, r3
 800f098:	f04f 0c0a 	mov.w	ip, #10
 800f09c:	4620      	mov	r0, r4
 800f09e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0a2:	3a30      	subs	r2, #48	@ 0x30
 800f0a4:	2a09      	cmp	r2, #9
 800f0a6:	d903      	bls.n	800f0b0 <_vfiprintf_r+0x1cc>
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d0c6      	beq.n	800f03a <_vfiprintf_r+0x156>
 800f0ac:	9105      	str	r1, [sp, #20]
 800f0ae:	e7c4      	b.n	800f03a <_vfiprintf_r+0x156>
 800f0b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e7f0      	b.n	800f09c <_vfiprintf_r+0x1b8>
 800f0ba:	ab03      	add	r3, sp, #12
 800f0bc:	9300      	str	r3, [sp, #0]
 800f0be:	462a      	mov	r2, r5
 800f0c0:	4b12      	ldr	r3, [pc, #72]	@ (800f10c <_vfiprintf_r+0x228>)
 800f0c2:	a904      	add	r1, sp, #16
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	f7fb fe7d 	bl	800adc4 <_printf_float>
 800f0ca:	4607      	mov	r7, r0
 800f0cc:	1c78      	adds	r0, r7, #1
 800f0ce:	d1d6      	bne.n	800f07e <_vfiprintf_r+0x19a>
 800f0d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0d2:	07d9      	lsls	r1, r3, #31
 800f0d4:	d405      	bmi.n	800f0e2 <_vfiprintf_r+0x1fe>
 800f0d6:	89ab      	ldrh	r3, [r5, #12]
 800f0d8:	059a      	lsls	r2, r3, #22
 800f0da:	d402      	bmi.n	800f0e2 <_vfiprintf_r+0x1fe>
 800f0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0de:	f7fc fe23 	bl	800bd28 <__retarget_lock_release_recursive>
 800f0e2:	89ab      	ldrh	r3, [r5, #12]
 800f0e4:	065b      	lsls	r3, r3, #25
 800f0e6:	f53f af1f 	bmi.w	800ef28 <_vfiprintf_r+0x44>
 800f0ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0ec:	e71e      	b.n	800ef2c <_vfiprintf_r+0x48>
 800f0ee:	ab03      	add	r3, sp, #12
 800f0f0:	9300      	str	r3, [sp, #0]
 800f0f2:	462a      	mov	r2, r5
 800f0f4:	4b05      	ldr	r3, [pc, #20]	@ (800f10c <_vfiprintf_r+0x228>)
 800f0f6:	a904      	add	r1, sp, #16
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	f7fc f8fb 	bl	800b2f4 <_printf_i>
 800f0fe:	e7e4      	b.n	800f0ca <_vfiprintf_r+0x1e6>
 800f100:	08013f29 	.word	0x08013f29
 800f104:	08013f33 	.word	0x08013f33
 800f108:	0800adc5 	.word	0x0800adc5
 800f10c:	0800eebf 	.word	0x0800eebf
 800f110:	08013f2f 	.word	0x08013f2f

0800f114 <__swbuf_r>:
 800f114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f116:	460e      	mov	r6, r1
 800f118:	4614      	mov	r4, r2
 800f11a:	4605      	mov	r5, r0
 800f11c:	b118      	cbz	r0, 800f126 <__swbuf_r+0x12>
 800f11e:	6a03      	ldr	r3, [r0, #32]
 800f120:	b90b      	cbnz	r3, 800f126 <__swbuf_r+0x12>
 800f122:	f7fc fc9f 	bl	800ba64 <__sinit>
 800f126:	69a3      	ldr	r3, [r4, #24]
 800f128:	60a3      	str	r3, [r4, #8]
 800f12a:	89a3      	ldrh	r3, [r4, #12]
 800f12c:	071a      	lsls	r2, r3, #28
 800f12e:	d501      	bpl.n	800f134 <__swbuf_r+0x20>
 800f130:	6923      	ldr	r3, [r4, #16]
 800f132:	b943      	cbnz	r3, 800f146 <__swbuf_r+0x32>
 800f134:	4621      	mov	r1, r4
 800f136:	4628      	mov	r0, r5
 800f138:	f000 f82a 	bl	800f190 <__swsetup_r>
 800f13c:	b118      	cbz	r0, 800f146 <__swbuf_r+0x32>
 800f13e:	f04f 37ff 	mov.w	r7, #4294967295
 800f142:	4638      	mov	r0, r7
 800f144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f146:	6823      	ldr	r3, [r4, #0]
 800f148:	6922      	ldr	r2, [r4, #16]
 800f14a:	1a98      	subs	r0, r3, r2
 800f14c:	6963      	ldr	r3, [r4, #20]
 800f14e:	b2f6      	uxtb	r6, r6
 800f150:	4283      	cmp	r3, r0
 800f152:	4637      	mov	r7, r6
 800f154:	dc05      	bgt.n	800f162 <__swbuf_r+0x4e>
 800f156:	4621      	mov	r1, r4
 800f158:	4628      	mov	r0, r5
 800f15a:	f7ff fa7b 	bl	800e654 <_fflush_r>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d1ed      	bne.n	800f13e <__swbuf_r+0x2a>
 800f162:	68a3      	ldr	r3, [r4, #8]
 800f164:	3b01      	subs	r3, #1
 800f166:	60a3      	str	r3, [r4, #8]
 800f168:	6823      	ldr	r3, [r4, #0]
 800f16a:	1c5a      	adds	r2, r3, #1
 800f16c:	6022      	str	r2, [r4, #0]
 800f16e:	701e      	strb	r6, [r3, #0]
 800f170:	6962      	ldr	r2, [r4, #20]
 800f172:	1c43      	adds	r3, r0, #1
 800f174:	429a      	cmp	r2, r3
 800f176:	d004      	beq.n	800f182 <__swbuf_r+0x6e>
 800f178:	89a3      	ldrh	r3, [r4, #12]
 800f17a:	07db      	lsls	r3, r3, #31
 800f17c:	d5e1      	bpl.n	800f142 <__swbuf_r+0x2e>
 800f17e:	2e0a      	cmp	r6, #10
 800f180:	d1df      	bne.n	800f142 <__swbuf_r+0x2e>
 800f182:	4621      	mov	r1, r4
 800f184:	4628      	mov	r0, r5
 800f186:	f7ff fa65 	bl	800e654 <_fflush_r>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	d0d9      	beq.n	800f142 <__swbuf_r+0x2e>
 800f18e:	e7d6      	b.n	800f13e <__swbuf_r+0x2a>

0800f190 <__swsetup_r>:
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	4b29      	ldr	r3, [pc, #164]	@ (800f238 <__swsetup_r+0xa8>)
 800f194:	4605      	mov	r5, r0
 800f196:	6818      	ldr	r0, [r3, #0]
 800f198:	460c      	mov	r4, r1
 800f19a:	b118      	cbz	r0, 800f1a4 <__swsetup_r+0x14>
 800f19c:	6a03      	ldr	r3, [r0, #32]
 800f19e:	b90b      	cbnz	r3, 800f1a4 <__swsetup_r+0x14>
 800f1a0:	f7fc fc60 	bl	800ba64 <__sinit>
 800f1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1a8:	0719      	lsls	r1, r3, #28
 800f1aa:	d422      	bmi.n	800f1f2 <__swsetup_r+0x62>
 800f1ac:	06da      	lsls	r2, r3, #27
 800f1ae:	d407      	bmi.n	800f1c0 <__swsetup_r+0x30>
 800f1b0:	2209      	movs	r2, #9
 800f1b2:	602a      	str	r2, [r5, #0]
 800f1b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1b8:	81a3      	strh	r3, [r4, #12]
 800f1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f1be:	e033      	b.n	800f228 <__swsetup_r+0x98>
 800f1c0:	0758      	lsls	r0, r3, #29
 800f1c2:	d512      	bpl.n	800f1ea <__swsetup_r+0x5a>
 800f1c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1c6:	b141      	cbz	r1, 800f1da <__swsetup_r+0x4a>
 800f1c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1cc:	4299      	cmp	r1, r3
 800f1ce:	d002      	beq.n	800f1d6 <__swsetup_r+0x46>
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	f7fd fc35 	bl	800ca40 <_free_r>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1da:	89a3      	ldrh	r3, [r4, #12]
 800f1dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1e0:	81a3      	strh	r3, [r4, #12]
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	6063      	str	r3, [r4, #4]
 800f1e6:	6923      	ldr	r3, [r4, #16]
 800f1e8:	6023      	str	r3, [r4, #0]
 800f1ea:	89a3      	ldrh	r3, [r4, #12]
 800f1ec:	f043 0308 	orr.w	r3, r3, #8
 800f1f0:	81a3      	strh	r3, [r4, #12]
 800f1f2:	6923      	ldr	r3, [r4, #16]
 800f1f4:	b94b      	cbnz	r3, 800f20a <__swsetup_r+0x7a>
 800f1f6:	89a3      	ldrh	r3, [r4, #12]
 800f1f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f200:	d003      	beq.n	800f20a <__swsetup_r+0x7a>
 800f202:	4621      	mov	r1, r4
 800f204:	4628      	mov	r0, r5
 800f206:	f000 f88b 	bl	800f320 <__smakebuf_r>
 800f20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f20e:	f013 0201 	ands.w	r2, r3, #1
 800f212:	d00a      	beq.n	800f22a <__swsetup_r+0x9a>
 800f214:	2200      	movs	r2, #0
 800f216:	60a2      	str	r2, [r4, #8]
 800f218:	6962      	ldr	r2, [r4, #20]
 800f21a:	4252      	negs	r2, r2
 800f21c:	61a2      	str	r2, [r4, #24]
 800f21e:	6922      	ldr	r2, [r4, #16]
 800f220:	b942      	cbnz	r2, 800f234 <__swsetup_r+0xa4>
 800f222:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f226:	d1c5      	bne.n	800f1b4 <__swsetup_r+0x24>
 800f228:	bd38      	pop	{r3, r4, r5, pc}
 800f22a:	0799      	lsls	r1, r3, #30
 800f22c:	bf58      	it	pl
 800f22e:	6962      	ldrpl	r2, [r4, #20]
 800f230:	60a2      	str	r2, [r4, #8]
 800f232:	e7f4      	b.n	800f21e <__swsetup_r+0x8e>
 800f234:	2000      	movs	r0, #0
 800f236:	e7f7      	b.n	800f228 <__swsetup_r+0x98>
 800f238:	20000114 	.word	0x20000114

0800f23c <_raise_r>:
 800f23c:	291f      	cmp	r1, #31
 800f23e:	b538      	push	{r3, r4, r5, lr}
 800f240:	4605      	mov	r5, r0
 800f242:	460c      	mov	r4, r1
 800f244:	d904      	bls.n	800f250 <_raise_r+0x14>
 800f246:	2316      	movs	r3, #22
 800f248:	6003      	str	r3, [r0, #0]
 800f24a:	f04f 30ff 	mov.w	r0, #4294967295
 800f24e:	bd38      	pop	{r3, r4, r5, pc}
 800f250:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f252:	b112      	cbz	r2, 800f25a <_raise_r+0x1e>
 800f254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f258:	b94b      	cbnz	r3, 800f26e <_raise_r+0x32>
 800f25a:	4628      	mov	r0, r5
 800f25c:	f000 f830 	bl	800f2c0 <_getpid_r>
 800f260:	4622      	mov	r2, r4
 800f262:	4601      	mov	r1, r0
 800f264:	4628      	mov	r0, r5
 800f266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f26a:	f000 b817 	b.w	800f29c <_kill_r>
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d00a      	beq.n	800f288 <_raise_r+0x4c>
 800f272:	1c59      	adds	r1, r3, #1
 800f274:	d103      	bne.n	800f27e <_raise_r+0x42>
 800f276:	2316      	movs	r3, #22
 800f278:	6003      	str	r3, [r0, #0]
 800f27a:	2001      	movs	r0, #1
 800f27c:	e7e7      	b.n	800f24e <_raise_r+0x12>
 800f27e:	2100      	movs	r1, #0
 800f280:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f284:	4620      	mov	r0, r4
 800f286:	4798      	blx	r3
 800f288:	2000      	movs	r0, #0
 800f28a:	e7e0      	b.n	800f24e <_raise_r+0x12>

0800f28c <raise>:
 800f28c:	4b02      	ldr	r3, [pc, #8]	@ (800f298 <raise+0xc>)
 800f28e:	4601      	mov	r1, r0
 800f290:	6818      	ldr	r0, [r3, #0]
 800f292:	f7ff bfd3 	b.w	800f23c <_raise_r>
 800f296:	bf00      	nop
 800f298:	20000114 	.word	0x20000114

0800f29c <_kill_r>:
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	4d07      	ldr	r5, [pc, #28]	@ (800f2bc <_kill_r+0x20>)
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	4608      	mov	r0, r1
 800f2a6:	4611      	mov	r1, r2
 800f2a8:	602b      	str	r3, [r5, #0]
 800f2aa:	f7f2 fe6d 	bl	8001f88 <_kill>
 800f2ae:	1c43      	adds	r3, r0, #1
 800f2b0:	d102      	bne.n	800f2b8 <_kill_r+0x1c>
 800f2b2:	682b      	ldr	r3, [r5, #0]
 800f2b4:	b103      	cbz	r3, 800f2b8 <_kill_r+0x1c>
 800f2b6:	6023      	str	r3, [r4, #0]
 800f2b8:	bd38      	pop	{r3, r4, r5, pc}
 800f2ba:	bf00      	nop
 800f2bc:	2000f9a4 	.word	0x2000f9a4

0800f2c0 <_getpid_r>:
 800f2c0:	f7f2 be5a 	b.w	8001f78 <_getpid>

0800f2c4 <_malloc_usable_size_r>:
 800f2c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2c8:	1f18      	subs	r0, r3, #4
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	bfbc      	itt	lt
 800f2ce:	580b      	ldrlt	r3, [r1, r0]
 800f2d0:	18c0      	addlt	r0, r0, r3
 800f2d2:	4770      	bx	lr

0800f2d4 <__swhatbuf_r>:
 800f2d4:	b570      	push	{r4, r5, r6, lr}
 800f2d6:	460c      	mov	r4, r1
 800f2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2dc:	2900      	cmp	r1, #0
 800f2de:	b096      	sub	sp, #88	@ 0x58
 800f2e0:	4615      	mov	r5, r2
 800f2e2:	461e      	mov	r6, r3
 800f2e4:	da0d      	bge.n	800f302 <__swhatbuf_r+0x2e>
 800f2e6:	89a3      	ldrh	r3, [r4, #12]
 800f2e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f2ec:	f04f 0100 	mov.w	r1, #0
 800f2f0:	bf14      	ite	ne
 800f2f2:	2340      	movne	r3, #64	@ 0x40
 800f2f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	6031      	str	r1, [r6, #0]
 800f2fc:	602b      	str	r3, [r5, #0]
 800f2fe:	b016      	add	sp, #88	@ 0x58
 800f300:	bd70      	pop	{r4, r5, r6, pc}
 800f302:	466a      	mov	r2, sp
 800f304:	f000 f848 	bl	800f398 <_fstat_r>
 800f308:	2800      	cmp	r0, #0
 800f30a:	dbec      	blt.n	800f2e6 <__swhatbuf_r+0x12>
 800f30c:	9901      	ldr	r1, [sp, #4]
 800f30e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f312:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f316:	4259      	negs	r1, r3
 800f318:	4159      	adcs	r1, r3
 800f31a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f31e:	e7eb      	b.n	800f2f8 <__swhatbuf_r+0x24>

0800f320 <__smakebuf_r>:
 800f320:	898b      	ldrh	r3, [r1, #12]
 800f322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f324:	079d      	lsls	r5, r3, #30
 800f326:	4606      	mov	r6, r0
 800f328:	460c      	mov	r4, r1
 800f32a:	d507      	bpl.n	800f33c <__smakebuf_r+0x1c>
 800f32c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f330:	6023      	str	r3, [r4, #0]
 800f332:	6123      	str	r3, [r4, #16]
 800f334:	2301      	movs	r3, #1
 800f336:	6163      	str	r3, [r4, #20]
 800f338:	b003      	add	sp, #12
 800f33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f33c:	ab01      	add	r3, sp, #4
 800f33e:	466a      	mov	r2, sp
 800f340:	f7ff ffc8 	bl	800f2d4 <__swhatbuf_r>
 800f344:	9f00      	ldr	r7, [sp, #0]
 800f346:	4605      	mov	r5, r0
 800f348:	4639      	mov	r1, r7
 800f34a:	4630      	mov	r0, r6
 800f34c:	f7fd fbec 	bl	800cb28 <_malloc_r>
 800f350:	b948      	cbnz	r0, 800f366 <__smakebuf_r+0x46>
 800f352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f356:	059a      	lsls	r2, r3, #22
 800f358:	d4ee      	bmi.n	800f338 <__smakebuf_r+0x18>
 800f35a:	f023 0303 	bic.w	r3, r3, #3
 800f35e:	f043 0302 	orr.w	r3, r3, #2
 800f362:	81a3      	strh	r3, [r4, #12]
 800f364:	e7e2      	b.n	800f32c <__smakebuf_r+0xc>
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	6020      	str	r0, [r4, #0]
 800f36a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f36e:	81a3      	strh	r3, [r4, #12]
 800f370:	9b01      	ldr	r3, [sp, #4]
 800f372:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f376:	b15b      	cbz	r3, 800f390 <__smakebuf_r+0x70>
 800f378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f37c:	4630      	mov	r0, r6
 800f37e:	f000 f81d 	bl	800f3bc <_isatty_r>
 800f382:	b128      	cbz	r0, 800f390 <__smakebuf_r+0x70>
 800f384:	89a3      	ldrh	r3, [r4, #12]
 800f386:	f023 0303 	bic.w	r3, r3, #3
 800f38a:	f043 0301 	orr.w	r3, r3, #1
 800f38e:	81a3      	strh	r3, [r4, #12]
 800f390:	89a3      	ldrh	r3, [r4, #12]
 800f392:	431d      	orrs	r5, r3
 800f394:	81a5      	strh	r5, [r4, #12]
 800f396:	e7cf      	b.n	800f338 <__smakebuf_r+0x18>

0800f398 <_fstat_r>:
 800f398:	b538      	push	{r3, r4, r5, lr}
 800f39a:	4d07      	ldr	r5, [pc, #28]	@ (800f3b8 <_fstat_r+0x20>)
 800f39c:	2300      	movs	r3, #0
 800f39e:	4604      	mov	r4, r0
 800f3a0:	4608      	mov	r0, r1
 800f3a2:	4611      	mov	r1, r2
 800f3a4:	602b      	str	r3, [r5, #0]
 800f3a6:	f7f2 fe4f 	bl	8002048 <_fstat>
 800f3aa:	1c43      	adds	r3, r0, #1
 800f3ac:	d102      	bne.n	800f3b4 <_fstat_r+0x1c>
 800f3ae:	682b      	ldr	r3, [r5, #0]
 800f3b0:	b103      	cbz	r3, 800f3b4 <_fstat_r+0x1c>
 800f3b2:	6023      	str	r3, [r4, #0]
 800f3b4:	bd38      	pop	{r3, r4, r5, pc}
 800f3b6:	bf00      	nop
 800f3b8:	2000f9a4 	.word	0x2000f9a4

0800f3bc <_isatty_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	4d06      	ldr	r5, [pc, #24]	@ (800f3d8 <_isatty_r+0x1c>)
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	4608      	mov	r0, r1
 800f3c6:	602b      	str	r3, [r5, #0]
 800f3c8:	f7f2 fe4e 	bl	8002068 <_isatty>
 800f3cc:	1c43      	adds	r3, r0, #1
 800f3ce:	d102      	bne.n	800f3d6 <_isatty_r+0x1a>
 800f3d0:	682b      	ldr	r3, [r5, #0]
 800f3d2:	b103      	cbz	r3, 800f3d6 <_isatty_r+0x1a>
 800f3d4:	6023      	str	r3, [r4, #0]
 800f3d6:	bd38      	pop	{r3, r4, r5, pc}
 800f3d8:	2000f9a4 	.word	0x2000f9a4

0800f3dc <sqrtf>:
 800f3dc:	b508      	push	{r3, lr}
 800f3de:	ed2d 8b02 	vpush	{d8}
 800f3e2:	eeb0 8a40 	vmov.f32	s16, s0
 800f3e6:	f000 f817 	bl	800f418 <__ieee754_sqrtf>
 800f3ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f2:	d60c      	bvs.n	800f40e <sqrtf+0x32>
 800f3f4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f414 <sqrtf+0x38>
 800f3f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f400:	d505      	bpl.n	800f40e <sqrtf+0x32>
 800f402:	f7fc fc65 	bl	800bcd0 <__errno>
 800f406:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f40a:	2321      	movs	r3, #33	@ 0x21
 800f40c:	6003      	str	r3, [r0, #0]
 800f40e:	ecbd 8b02 	vpop	{d8}
 800f412:	bd08      	pop	{r3, pc}
 800f414:	00000000 	.word	0x00000000

0800f418 <__ieee754_sqrtf>:
 800f418:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f41c:	4770      	bx	lr
	...

0800f420 <_init>:
 800f420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f422:	bf00      	nop
 800f424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f426:	bc08      	pop	{r3}
 800f428:	469e      	mov	lr, r3
 800f42a:	4770      	bx	lr

0800f42c <_fini>:
 800f42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f42e:	bf00      	nop
 800f430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f432:	bc08      	pop	{r3}
 800f434:	469e      	mov	lr, r3
 800f436:	4770      	bx	lr
