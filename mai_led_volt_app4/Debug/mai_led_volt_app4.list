
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e42c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800e5c0  0800e5c0  0000f5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb1c  0800eb1c  000102c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800eb1c  0800eb1c  0000fb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb24  0800eb24  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb24  0800eb24  0000fb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb28  0800eb28  0000fb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800eb2c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c4  2**0
                  CONTENTS
 10 .bss          00001ef4  200002c4  200002c4  000102c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200021b8  200021b8  000102c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a1cb  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ed1  00000000  00000000  0002a4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0002e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001171  00000000  00000000  0002fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002417e  00000000  00000000  00030bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0d3  00000000  00000000  00054d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb8e5  00000000  00000000  00070e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c6ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007544  00000000  00000000  0013c734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00143c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e5a4 	.word	0x0800e5a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800e5a4 	.word	0x0800e5a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <ReadFPGAData>:
/* USER CODE BEGIN 0 */
/**
  * @brief Чтение данных из ПЛИС через FSMC интерфейс
  * @note Читает 10 значений по 12 бит из ПЛИС (каждое значение в старших 12 битах 16-битного слова)
  */
void ReadFPGAData(void) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
    fpga_data.data_count = 0;
 8001026:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <ReadFPGAData+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	755a      	strb	r2, [r3, #21]
    fpga_data.data_ready = false;
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <ReadFPGAData+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	751a      	strb	r2, [r3, #20]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001032:	b672      	cpsid	i
}
 8001034:	bf00      	nop

    __disable_irq();

    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	e01d      	b.n	8001078 <ReadFPGAData+0x58>
        // Просто читаем значение - ПЛИС само должно переключаться на следующее
        uint16_t value = fpga_reg[0];
 800103c:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <ReadFPGAData+0x78>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	817b      	strh	r3, [r7, #10]
        fpga_data.data[i] = value & 0x0FFF;
 8001044:	897b      	ldrh	r3, [r7, #10]
 8001046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104a:	b299      	uxth	r1, r3
 800104c:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <ReadFPGAData+0x74>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        fpga_data.data_count++;
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <ReadFPGAData+0x74>)
 8001056:	7d5b      	ldrb	r3, [r3, #21]
 8001058:	3301      	adds	r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <ReadFPGAData+0x74>)
 800105e:	755a      	strb	r2, [r3, #21]

        // Небольшая задержка между чтениями
        for(volatile int j = 0; j < 10; j++);
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	e002      	b.n	800106c <ReadFPGAData+0x4c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3301      	adds	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b09      	cmp	r3, #9
 8001070:	ddf9      	ble.n	8001066 <ReadFPGAData+0x46>
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3301      	adds	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b09      	cmp	r3, #9
 800107c:	ddde      	ble.n	800103c <ReadFPGAData+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 800107e:	b662      	cpsie	i
}
 8001080:	bf00      	nop
    }

    __enable_irq();
    fpga_data.data_ready = true;
 8001082:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <ReadFPGAData+0x74>)
 8001084:	2201      	movs	r2, #1
 8001086:	751a      	strb	r2, [r3, #20]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	200003d4 	.word	0x200003d4
 8001098:	20000470 	.word	0x20000470

0800109c <PrintDataToUSB>:

/**
  * @brief Вывод данных через USB CDC
  */
void PrintDataToUSB(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	@ 0x50
 80010a0:	af00      	add	r7, sp, #0
    if (!fpga_data.data_ready) return;
 80010a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <PrintDataToUSB+0xf4>)
 80010a4:	7d1b      	ldrb	r3, [r3, #20]
 80010a6:	f083 0301 	eor.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d16b      	bne.n	8001188 <PrintDataToUSB+0xec>

    // Формируем заголовок
    snprintf(usb_msg, sizeof(usb_msg), "FPGA Data [0-%d]:\r\n", DATA_VALUES_COUNT-1);
 80010b0:	2309      	movs	r3, #9
 80010b2:	4a38      	ldr	r2, [pc, #224]	@ (8001194 <PrintDataToUSB+0xf8>)
 80010b4:	2180      	movs	r1, #128	@ 0x80
 80010b6:	4838      	ldr	r0, [pc, #224]	@ (8001198 <PrintDataToUSB+0xfc>)
 80010b8:	f009 fdec 	bl	800ac94 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80010bc:	4836      	ldr	r0, [pc, #216]	@ (8001198 <PrintDataToUSB+0xfc>)
 80010be:	f7ff f8d7 	bl	8000270 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	4833      	ldr	r0, [pc, #204]	@ (8001198 <PrintDataToUSB+0xfc>)
 80010ca:	f008 fa61 	bl	8009590 <CDC_Transmit_FS>
    HAL_Delay(10);
 80010ce:	200a      	movs	r0, #10
 80010d0:	f000 fe42 	bl	8001d58 <HAL_Delay>

    // Формируем строку с данными
    char data_line[64] = "";
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2240      	movs	r2, #64	@ 0x40
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f009 fe74 	bl	800adca <memset>
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 80010e2:	2300      	movs	r3, #0
 80010e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80010e6:	e04b      	b.n	8001180 <PrintDataToUSB+0xe4>
        char val_str[8];
        snprintf(val_str, sizeof(val_str), "%4d ", fpga_data.data[i]);
 80010e8:	4a29      	ldr	r2, [pc, #164]	@ (8001190 <PrintDataToUSB+0xf4>)
 80010ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f0:	1d38      	adds	r0, r7, #4
 80010f2:	4a2a      	ldr	r2, [pc, #168]	@ (800119c <PrintDataToUSB+0x100>)
 80010f4:	2108      	movs	r1, #8
 80010f6:	f009 fdcd 	bl	800ac94 <sniprintf>
        strncat(data_line, val_str, sizeof(data_line) - strlen(data_line) - 1);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f8b6 	bl	8000270 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
 800110a:	1d39      	adds	r1, r7, #4
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4618      	mov	r0, r3
 8001112:	f009 fe62 	bl	800adda <strncat>

        // Если строка заполнена или это последнее значение
        if ((i+1) % VALUES_PER_LINE == 0 || i == DATA_VALUES_COUNT-1) {
 8001116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001118:	1c59      	adds	r1, r3, #1
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <PrintDataToUSB+0x104>)
 800111c:	fb83 2301 	smull	r2, r3, r3, r1
 8001120:	109a      	asrs	r2, r3, #2
 8001122:	17cb      	asrs	r3, r1, #31
 8001124:	1ad2      	subs	r2, r2, r3
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	1aca      	subs	r2, r1, r3
 8001130:	2a00      	cmp	r2, #0
 8001132:	d002      	beq.n	800113a <PrintDataToUSB+0x9e>
 8001134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001136:	2b09      	cmp	r3, #9
 8001138:	d11f      	bne.n	800117a <PrintDataToUSB+0xde>
            strncat(data_line, "\r\n", sizeof(data_line) - strlen(data_line) - 1);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f896 	bl	8000270 <strlen>
 8001144:	4603      	mov	r3, r0
 8001146:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4915      	ldr	r1, [pc, #84]	@ (80011a4 <PrintDataToUSB+0x108>)
 8001150:	4618      	mov	r0, r3
 8001152:	f009 fe42 	bl	800adda <strncat>
            CDC_Transmit_FS((uint8_t*)data_line, strlen(data_line));
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f888 	bl	8000270 <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f008 fa10 	bl	8009590 <CDC_Transmit_FS>
            HAL_Delay(10);
 8001170:	200a      	movs	r0, #10
 8001172:	f000 fdf1 	bl	8001d58 <HAL_Delay>
            data_line[0] = '\0'; // Очищаем строку
 8001176:	2300      	movs	r3, #0
 8001178:	733b      	strb	r3, [r7, #12]
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 800117a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800117c:	3301      	adds	r3, #1
 800117e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001182:	2b09      	cmp	r3, #9
 8001184:	ddb0      	ble.n	80010e8 <PrintDataToUSB+0x4c>
 8001186:	e000      	b.n	800118a <PrintDataToUSB+0xee>
    if (!fpga_data.data_ready) return;
 8001188:	bf00      	nop
        }
    }
}
 800118a:	3750      	adds	r7, #80	@ 0x50
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200003d4 	.word	0x200003d4
 8001194:	0800e5c0 	.word	0x0800e5c0
 8001198:	200003ec 	.word	0x200003ec
 800119c:	0800e5d4 	.word	0x0800e5d4
 80011a0:	66666667 	.word	0x66666667
 80011a4:	0800e5dc 	.word	0x0800e5dc

080011a8 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
    snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 80011b0:	f000 fdc6 	bl	8001d40 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	4613      	mov	r3, r2
 80011bc:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <SendUSBDebugMessage+0x40>)
 80011be:	2180      	movs	r1, #128	@ 0x80
 80011c0:	480a      	ldr	r0, [pc, #40]	@ (80011ec <SendUSBDebugMessage+0x44>)
 80011c2:	f009 fd67 	bl	800ac94 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80011c6:	4809      	ldr	r0, [pc, #36]	@ (80011ec <SendUSBDebugMessage+0x44>)
 80011c8:	f7ff f852 	bl	8000270 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	@ (80011ec <SendUSBDebugMessage+0x44>)
 80011d4:	f008 f9dc 	bl	8009590 <CDC_Transmit_FS>
    HAL_Delay(10); // Задержка для стабильной работы USB
 80011d8:	200a      	movs	r0, #10
 80011da:	f000 fdbd 	bl	8001d58 <HAL_Delay>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800e5e0 	.word	0x0800e5e0
 80011ec:	200003ec 	.word	0x200003ec

080011f0 <Set_DAC_Voltage>:

/**
  * @brief Устанавливает напряжение на DAC
  * @param voltage: Значение напряжения для установки (от 0.0 до 3.3)
  */
void Set_DAC_Voltage(float voltage) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage < 0) voltage = 0;
 80011fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	d502      	bpl.n	800120e <Set_DAC_Voltage+0x1e>
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
    if (voltage > 3.3f) voltage = 3.3f;
 800120e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001212:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001264 <Set_DAC_Voltage+0x74>
 8001216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	dd01      	ble.n	8001224 <Set_DAC_Voltage+0x34>
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <Set_DAC_Voltage+0x78>)
 8001222:	607b      	str	r3, [r7, #4]

    uint32_t dac_value = (voltage / 3.3f) * 4095;
 8001224:	ed97 7a01 	vldr	s14, [r7, #4]
 8001228:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001264 <Set_DAC_Voltage+0x74>
 800122c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001230:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800126c <Set_DAC_Voltage+0x7c>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123c:	ee17 3a90 	vmov	r3, s15
 8001240:	60fb      	str	r3, [r7, #12]
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	4809      	ldr	r0, [pc, #36]	@ (8001270 <Set_DAC_Voltage+0x80>)
 800124a:	f000 ff33 	bl	80020b4 <HAL_DAC_SetValue>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800124e:	2100      	movs	r1, #0
 8001250:	4807      	ldr	r0, [pc, #28]	@ (8001270 <Set_DAC_Voltage+0x80>)
 8001252:	f000 fed8 	bl	8002006 <HAL_DAC_Start>
    dac_voltage = voltage;
 8001256:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <Set_DAC_Voltage+0x84>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40533333 	.word	0x40533333
 8001268:	40533333 	.word	0x40533333
 800126c:	457ff000 	.word	0x457ff000
 8001270:	200002e0 	.word	0x200002e0
 8001274:	20000474 	.word	0x20000474

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127e:	f000 fcf9 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001282:	f000 f87d 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001286:	f000 f987 	bl	8001598 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800128a:	f000 f95b 	bl	8001544 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800128e:	f008 f8c1 	bl	8009414 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 8001292:	f000 f8df 	bl	8001454 <MX_DAC_Init>
  MX_TIM3_Init();
 8001296:	f000 f907 	bl	80014a8 <MX_TIM3_Init>
  MX_FSMC_Init();
 800129a:	f000 f9ff 	bl	800169c <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start(&htim3);
 800129e:	482b      	ldr	r0, [pc, #172]	@ (800134c <main+0xd4>)
 80012a0:	f003 f956 	bl	8004550 <HAL_TIM_Base_Start>

    // Инициализация указателя на регистр ПЛИС
    fpga_reg = (volatile uint16_t *)FPGA_BASE_ADDRESS;
 80012a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001350 <main+0xd8>)
 80012a6:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80012aa:	601a      	str	r2, [r3, #0]

    // Инициализация структуры данных
    memset(&fpga_data, 0, sizeof(fpga_data));
 80012ac:	2216      	movs	r2, #22
 80012ae:	2100      	movs	r1, #0
 80012b0:	4828      	ldr	r0, [pc, #160]	@ (8001354 <main+0xdc>)
 80012b2:	f009 fd8a 	bl	800adca <memset>

    // Инициализация DAC с начальным напряжением 0V
    Set_DAC_Voltage(0.0f);
 80012b6:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001358 <main+0xe0>
 80012ba:	f7ff ff99 	bl	80011f0 <Set_DAC_Voltage>

    // Сообщение о готовности системы
    SendUSBDebugMessage("System initialized. Ready to communicate with FPGA...");
 80012be:	4827      	ldr	r0, [pc, #156]	@ (800135c <main+0xe4>)
 80012c0:	f7ff ff72 	bl	80011a8 <SendUSBDebugMessage>
    SendUSBDebugMessage("FPGA generates data automatically every 3 seconds");
 80012c4:	4826      	ldr	r0, [pc, #152]	@ (8001360 <main+0xe8>)
 80012c6:	f7ff ff6f 	bl	80011a8 <SendUSBDebugMessage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
        uint32_t current_time = HAL_GetTick();
 80012ca:	f000 fd39 	bl	8001d40 <HAL_GetTick>
 80012ce:	6078      	str	r0, [r7, #4]

        // Циклическое изменение напряжения DAC каждые 3 секунды
        if (current_time - dac_last_update > 3000) {
 80012d0:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <main+0xec>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80012dc:	4293      	cmp	r3, r2
 80012de:	d915      	bls.n	800130c <main+0x94>
            dac_last_update = current_time;
 80012e0:	4a20      	ldr	r2, [pc, #128]	@ (8001364 <main+0xec>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
            Set_DAC_Voltage((dac_voltage < 1.65f) ? 3.3f : 0.0f);
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <main+0xf0>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800136c <main+0xf4>
 80012f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	d502      	bpl.n	8001300 <main+0x88>
 80012fa:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8001370 <main+0xf8>
 80012fe:	e001      	b.n	8001304 <main+0x8c>
 8001300:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8001358 <main+0xe0>
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	f7ff ff72 	bl	80011f0 <Set_DAC_Voltage>
        }

        // Проверяем, прошло ли 3 секунды с последнего измерения
        if ((current_time - last_measurement_time) >= MEASUREMENT_INTERVAL_MS) {
 800130c:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <main+0xfc>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001318:	4293      	cmp	r3, r2
 800131a:	d913      	bls.n	8001344 <main+0xcc>
            SendUSBDebugMessage("Reading data from FPGA...");
 800131c:	4816      	ldr	r0, [pc, #88]	@ (8001378 <main+0x100>)
 800131e:	f7ff ff43 	bl	80011a8 <SendUSBDebugMessage>

            // Читаем данные из ПЛИС
            ReadFPGAData();
 8001322:	f7ff fe7d 	bl	8001020 <ReadFPGAData>

            // Выводим результаты
            if (fpga_data.data_ready) {
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <main+0xdc>)
 8001328:	7d1b      	ldrb	r3, [r3, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <main+0xc6>
                SendUSBDebugMessage("Data received from FPGA:");
 800132e:	4813      	ldr	r0, [pc, #76]	@ (800137c <main+0x104>)
 8001330:	f7ff ff3a 	bl	80011a8 <SendUSBDebugMessage>
                PrintDataToUSB();
 8001334:	f7ff feb2 	bl	800109c <PrintDataToUSB>
                fpga_data.data_ready = false;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <main+0xdc>)
 800133a:	2200      	movs	r2, #0
 800133c:	751a      	strb	r2, [r3, #20]
            }

            last_measurement_time = current_time;
 800133e:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <main+0xfc>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6013      	str	r3, [r2, #0]
        }

        HAL_Delay(100); // Небольшая задержка для снижения нагрузки на CPU
 8001344:	2064      	movs	r0, #100	@ 0x64
 8001346:	f000 fd07 	bl	8001d58 <HAL_Delay>
    while (1) {
 800134a:	e7be      	b.n	80012ca <main+0x52>
 800134c:	200002f4 	.word	0x200002f4
 8001350:	20000470 	.word	0x20000470
 8001354:	200003d4 	.word	0x200003d4
 8001358:	00000000 	.word	0x00000000
 800135c:	0800e5ec 	.word	0x0800e5ec
 8001360:	0800e624 	.word	0x0800e624
 8001364:	20000478 	.word	0x20000478
 8001368:	20000474 	.word	0x20000474
 800136c:	3fd33333 	.word	0x3fd33333
 8001370:	40533333 	.word	0x40533333
 8001374:	2000046c 	.word	0x2000046c
 8001378:	0800e658 	.word	0x0800e658
 800137c:	0800e674 	.word	0x0800e674

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	@ 0x50
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	2230      	movs	r2, #48	@ 0x30
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f009 fd1b 	bl	800adca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	4b28      	ldr	r3, [pc, #160]	@ (800144c <SystemClock_Config+0xcc>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	4a27      	ldr	r2, [pc, #156]	@ (800144c <SystemClock_Config+0xcc>)
 80013ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b4:	4b25      	ldr	r3, [pc, #148]	@ (800144c <SystemClock_Config+0xcc>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4b22      	ldr	r3, [pc, #136]	@ (8001450 <SystemClock_Config+0xd0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <SystemClock_Config+0xd0>)
 80013ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <SystemClock_Config+0xd0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013dc:	2301      	movs	r3, #1
 80013de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e6:	2302      	movs	r3, #2
 80013e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f0:	2308      	movs	r3, #8
 80013f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013fe:	2307      	movs	r3, #7
 8001400:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fb72 	bl	8003af0 <HAL_RCC_OscConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001412:	f000 f9a1 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001416:	230f      	movs	r3, #15
 8001418:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141a:	2302      	movs	r3, #2
 800141c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001422:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001426:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800142c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2105      	movs	r1, #5
 8001434:	4618      	mov	r0, r3
 8001436:	f002 fdd3 	bl	8003fe0 <HAL_RCC_ClockConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001440:	f000 f98a 	bl	8001758 <Error_Handler>
  }
}
 8001444:	bf00      	nop
 8001446:	3750      	adds	r7, #80	@ 0x50
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000

08001454 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_DAC_Init+0x4c>)
 8001464:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <MX_DAC_Init+0x50>)
 8001466:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001468:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <MX_DAC_Init+0x4c>)
 800146a:	f000 fdaa 	bl	8001fc2 <HAL_DAC_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001474:	f000 f970 	bl	8001758 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001478:	2300      	movs	r3, #0
 800147a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <MX_DAC_Init+0x4c>)
 8001488:	f000 fe3e 	bl	8002108 <HAL_DAC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001492:	f000 f961 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200002e0 	.word	0x200002e0
 80014a4:	40007400 	.word	0x40007400

080014a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_TIM3_Init+0x94>)
 80014c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <MX_TIM3_Init+0x98>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <MX_TIM3_Init+0x94>)
 80014cc:	22a7      	movs	r2, #167	@ 0xa7
 80014ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_TIM3_Init+0x94>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <MX_TIM3_Init+0x94>)
 80014d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <MX_TIM3_Init+0x94>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e4:	4b15      	ldr	r3, [pc, #84]	@ (800153c <MX_TIM3_Init+0x94>)
 80014e6:	2280      	movs	r2, #128	@ 0x80
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ea:	4814      	ldr	r0, [pc, #80]	@ (800153c <MX_TIM3_Init+0x94>)
 80014ec:	f002 ffe0 	bl	80044b0 <HAL_TIM_Base_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014f6:	f000 f92f 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	@ (800153c <MX_TIM3_Init+0x94>)
 8001508:	f003 f97a 	bl	8004800 <HAL_TIM_ConfigClockSource>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001512:	f000 f921 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	@ (800153c <MX_TIM3_Init+0x94>)
 8001524:	f003 fba6 	bl	8004c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800152e:	f000 f913 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002f4 	.word	0x200002f4
 8001540:	40000400 	.word	0x40000400

08001544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <MX_USART1_UART_Init+0x50>)
 800154c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001550:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800157c:	f003 fc0a 	bl	8004d94 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001586:	f000 f8e7 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000033c 	.word	0x2000033c
 8001594:	40011000 	.word	0x40011000

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b37      	ldr	r3, [pc, #220]	@ (8001690 <MX_GPIO_Init+0xf8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a36      	ldr	r2, [pc, #216]	@ (8001690 <MX_GPIO_Init+0xf8>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <MX_GPIO_Init+0xf8>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <MX_GPIO_Init+0xf8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001690 <MX_GPIO_Init+0xf8>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <MX_GPIO_Init+0xf8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b29      	ldr	r3, [pc, #164]	@ (8001690 <MX_GPIO_Init+0xf8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a28      	ldr	r2, [pc, #160]	@ (8001690 <MX_GPIO_Init+0xf8>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b26      	ldr	r3, [pc, #152]	@ (8001690 <MX_GPIO_Init+0xf8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <MX_GPIO_Init+0xf8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a21      	ldr	r2, [pc, #132]	@ (8001690 <MX_GPIO_Init+0xf8>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <MX_GPIO_Init+0xf8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <MX_GPIO_Init+0xf8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a1a      	ldr	r2, [pc, #104]	@ (8001690 <MX_GPIO_Init+0xf8>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <MX_GPIO_Init+0xf8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2120      	movs	r1, #32
 800163e:	4815      	ldr	r0, [pc, #84]	@ (8001694 <MX_GPIO_Init+0xfc>)
 8001640:	f000 ffea 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2140      	movs	r1, #64	@ 0x40
 8001648:	4813      	ldr	r0, [pc, #76]	@ (8001698 <MX_GPIO_Init+0x100>)
 800164a:	f000 ffe5 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800164e:	2320      	movs	r3, #32
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	480b      	ldr	r0, [pc, #44]	@ (8001694 <MX_GPIO_Init+0xfc>)
 8001666:	f000 fe3b 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800166a:	2340      	movs	r3, #64	@ 0x40
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_GPIO_Init+0x100>)
 8001682:	f000 fe2d 	bl	80022e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	@ 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020c00 	.word	0x40020c00

0800169c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80016b4:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016b6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80016ba:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016be:	4a25      	ldr	r2, [pc, #148]	@ (8001754 <MX_FSMC_Init+0xb8>)
 80016c0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 80016ce:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016d0:	2204      	movs	r2, #4
 80016d2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016d6:	2210      	movs	r2, #16
 80016d8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80016da:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80016f2:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80016f8:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <MX_FSMC_Init+0xb4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <MX_FSMC_Init+0xb4>)
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001704:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <MX_FSMC_Init+0xb4>)
 8001706:	2200      	movs	r2, #0
 8001708:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <MX_FSMC_Init+0xb4>)
 800170c:	2200      	movs	r2, #0
 800170e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <MX_FSMC_Init+0xb4>)
 8001712:	2200      	movs	r2, #0
 8001714:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001716:	230f      	movs	r3, #15
 8001718:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800171a:	230f      	movs	r3, #15
 800171c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800171e:	23ff      	movs	r3, #255	@ 0xff
 8001720:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001722:	230f      	movs	r3, #15
 8001724:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001726:	2310      	movs	r3, #16
 8001728:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800172a:	2311      	movs	r3, #17
 800172c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_FSMC_Init+0xb4>)
 800173a:	f002 fe71 	bl	8004420 <HAL_SRAM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8001744:	f000 f808 	bl	8001758 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000384 	.word	0x20000384
 8001754:	a0000104 	.word	0xa0000104

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <Error_Handler+0x4>

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <HAL_MspInit+0x4c>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001774:	6453      	str	r3, [r2, #68]	@ 0x44
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <HAL_MspInit+0x4c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <HAL_MspInit+0x4c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_MspInit+0x4c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a17      	ldr	r2, [pc, #92]	@ (800182c <HAL_DAC_MspInit+0x7c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d127      	bne.n	8001822 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <HAL_DAC_MspInit+0x80>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	4a15      	ldr	r2, [pc, #84]	@ (8001830 <HAL_DAC_MspInit+0x80>)
 80017dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80017e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <HAL_DAC_MspInit+0x80>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <HAL_DAC_MspInit+0x80>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001830 <HAL_DAC_MspInit+0x80>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <HAL_DAC_MspInit+0x80>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800180a:	2310      	movs	r3, #16
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180e:	2303      	movs	r3, #3
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	@ (8001834 <HAL_DAC_MspInit+0x84>)
 800181e:	f000 fd5f 	bl	80022e0 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	@ 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40007400 	.word	0x40007400
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000

08001838 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <HAL_TIM_Base_MspInit+0x48>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d115      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_TIM_Base_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	4a0c      	ldr	r2, [pc, #48]	@ (8001884 <HAL_TIM_Base_MspInit+0x4c>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6413      	str	r3, [r2, #64]	@ 0x40
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_TIM_Base_MspInit+0x4c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	201d      	movs	r0, #29
 800186c:	f000 fb73 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001870:	201d      	movs	r0, #29
 8001872:	f000 fb8c 	bl	8001f8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40000400 	.word	0x40000400
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	@ 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1d      	ldr	r2, [pc, #116]	@ (800191c <HAL_UART_MspInit+0x94>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d133      	bne.n	8001912 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <HAL_UART_MspInit+0x98>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001920 <HAL_UART_MspInit+0x98>)
 80018b4:	f043 0310 	orr.w	r3, r3, #16
 80018b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ba:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_UART_MspInit+0x98>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_UART_MspInit+0x98>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a14      	ldr	r2, [pc, #80]	@ (8001920 <HAL_UART_MspInit+0x98>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <HAL_UART_MspInit+0x98>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e2:	23c0      	movs	r3, #192	@ 0xc0
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018f2:	2307      	movs	r3, #7
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4809      	ldr	r0, [pc, #36]	@ (8001924 <HAL_UART_MspInit+0x9c>)
 80018fe:	f000 fcef 	bl	80022e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2025      	movs	r0, #37	@ 0x25
 8001908:	f000 fb25 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800190c:	2025      	movs	r0, #37	@ 0x25
 800190e:	f000 fb3e 	bl	8001f8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40011000 	.word	0x40011000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020400 	.word	0x40020400

08001928 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800193c:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <HAL_FSMC_MspInit+0x88>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d131      	bne.n	80019a8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001944:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <HAL_FSMC_MspInit+0x88>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_FSMC_MspInit+0x8c>)
 8001950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001952:	4a18      	ldr	r2, [pc, #96]	@ (80019b4 <HAL_FSMC_MspInit+0x8c>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6393      	str	r3, [r2, #56]	@ 0x38
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <HAL_FSMC_MspInit+0x8c>)
 800195c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001966:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800196a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001978:	230c      	movs	r3, #12
 800197a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	4619      	mov	r1, r3
 8001980:	480d      	ldr	r0, [pc, #52]	@ (80019b8 <HAL_FSMC_MspInit+0x90>)
 8001982:	f000 fcad 	bl	80022e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001986:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 800198a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001998:	230c      	movs	r3, #12
 800199a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4806      	ldr	r0, [pc, #24]	@ (80019bc <HAL_FSMC_MspInit+0x94>)
 80019a2:	f000 fc9d 	bl	80022e0 <HAL_GPIO_Init>
 80019a6:	e000      	b.n	80019aa <HAL_FSMC_MspInit+0x82>
    return;
 80019a8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000047c 	.word	0x2000047c
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40020c00 	.word	0x40020c00

080019c0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80019c8:	f7ff ffae 	bl	8001928 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <NMI_Handler+0x4>

080019dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <MemManage_Handler+0x4>

080019ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2a:	f000 f975 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <TIM3_IRQHandler+0x10>)
 8001a3a:	f002 fdf1 	bl	8004620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200002f4 	.word	0x200002f4

08001a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <USART1_IRQHandler+0x10>)
 8001a4e:	f003 f9f1 	bl	8004e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000033c 	.word	0x2000033c

08001a5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <OTG_FS_IRQHandler+0x10>)
 8001a62:	f000 ff36 	bl	80028d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20001968 	.word	0x20001968

08001a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return 1;
 8001a74:	2301      	movs	r3, #1
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_kill>:

int _kill(int pid, int sig)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a8a:	f009 fa03 	bl	800ae94 <__errno>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2216      	movs	r2, #22
 8001a92:	601a      	str	r2, [r3, #0]
  return -1;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_exit>:

void _exit (int status)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ffe7 	bl	8001a80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ab2:	bf00      	nop
 8001ab4:	e7fd      	b.n	8001ab2 <_exit+0x12>

08001ab6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e00a      	b.n	8001ade <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ac8:	f3af 8000 	nop.w
 8001acc:	4601      	mov	r1, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	60ba      	str	r2, [r7, #8]
 8001ad4:	b2ca      	uxtb	r2, r1
 8001ad6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dbf0      	blt.n	8001ac8 <_read+0x12>
  }

  return len;
 8001ae6:	687b      	ldr	r3, [r7, #4]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e009      	b.n	8001b16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	dbf1      	blt.n	8001b02 <_write+0x12>
  }
  return len;
 8001b1e:	687b      	ldr	r3, [r7, #4]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_close>:

int _close(int file)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b50:	605a      	str	r2, [r3, #4]
  return 0;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_isatty>:

int _isatty(int file)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b98:	4a14      	ldr	r2, [pc, #80]	@ (8001bec <_sbrk+0x5c>)
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <_sbrk+0x60>)
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bac:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <_sbrk+0x64>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	@ (8001bf8 <_sbrk+0x68>)
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d207      	bcs.n	8001bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc0:	f009 f968 	bl	800ae94 <__errno>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	e009      	b.n	8001be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a05      	ldr	r2, [pc, #20]	@ (8001bf4 <_sbrk+0x64>)
 8001be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20020000 	.word	0x20020000
 8001bf0:	00000400 	.word	0x00000400
 8001bf4:	20000480 	.word	0x20000480
 8001bf8:	200021b8 	.word	0x200021b8

08001bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <SystemInit+0x20>)
 8001c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c06:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <SystemInit+0x20>)
 8001c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c24:	f7ff ffea 	bl	8001bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	@ (8001c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	@ (8001c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f009 f927 	bl	800aea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c52:	f7ff fb11 	bl	8001278 <main>
  bx  lr    
 8001c56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001c64:	0800eb2c 	.word	0x0800eb2c
  ldr r2, =_sbss
 8001c68:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001c6c:	200021b8 	.word	0x200021b8

08001c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <HAL_Init+0x40>)
 8001c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <HAL_Init+0x40>)
 8001c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	@ (8001cb4 <HAL_Init+0x40>)
 8001c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 f94f 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca2:	200f      	movs	r0, #15
 8001ca4:	f000 f808 	bl	8001cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca8:	f7ff fd5a 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_InitTick+0x54>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_InitTick+0x58>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f967 	bl	8001faa <HAL_SYSTICK_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00e      	b.n	8001d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d80a      	bhi.n	8001d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f000 f92f 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf8:	4a06      	ldr	r2, [pc, #24]	@ (8001d14 <HAL_InitTick+0x5c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000008 	.word	0x20000008
 8001d14:	20000004 	.word	0x20000004

08001d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_IncTick+0x20>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_IncTick+0x24>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <HAL_IncTick+0x24>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000484 	.word	0x20000484

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000484 	.word	0x20000484

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff ffee 	bl	8001d40 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4907      	ldr	r1, [pc, #28]	@ (8001e3c <__NVIC_EnableIRQ+0x38>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	@ (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	@ (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	@ 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	@ 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f7ff ff8e 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff29 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f68:	f7ff ff3e 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff8e 	bl	8001e94 <NVIC_EncodePriority>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff5d 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff31 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffa2 	bl	8001efc <SysTick_Config>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e014      	b.n	8001ffe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	791b      	ldrb	r3, [r3, #4]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fbe3 	bl	80017b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e046      	b.n	80020a8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	795b      	ldrb	r3, [r3, #5]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_DAC_Start+0x20>
 8002022:	2302      	movs	r3, #2
 8002024:	e040      	b.n	80020a8 <HAL_DAC_Start+0xa2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6819      	ldr	r1, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2201      	movs	r2, #1
 8002040:	409a      	lsls	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10f      	bne.n	8002070 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800205a:	2b3c      	cmp	r3, #60	@ 0x3c
 800205c:	d11d      	bne.n	800209a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0201 	orr.w	r2, r2, #1
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	e014      	b.n	800209a <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	213c      	movs	r1, #60	@ 0x3c
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	429a      	cmp	r2, r3
 8002088:	d107      	bne.n	800209a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0202 	orr.w	r2, r2, #2
 8002098:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e015      	b.n	80020fc <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	3308      	adds	r3, #8
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e004      	b.n	80020f2 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	3314      	adds	r3, #20
 80020f0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	461a      	mov	r2, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	@ 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HAL_DAC_ConfigChannel+0x1c>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e042      	b.n	80021ae <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	795b      	ldrb	r3, [r3, #5]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_DAC_ConfigChannel+0x2c>
 8002130:	2302      	movs	r3, #2
 8002132:	e03c      	b.n	80021ae <HAL_DAC_ConfigChannel+0xa6>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2202      	movs	r2, #2
 800213e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6819      	ldr	r1, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	22c0      	movs	r2, #192	@ 0xc0
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	400a      	ands	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80021ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	@ 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff fdba 	bl	8001d40 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d008      	beq.n	80021ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2280      	movs	r2, #128	@ 0x80
 80021de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e052      	b.n	8002292 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0216 	bic.w	r2, r2, #22
 80021fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800220a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <HAL_DMA_Abort+0x62>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0208 	bic.w	r2, r2, #8
 800222a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800223c:	e013      	b.n	8002266 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800223e:	f7ff fd7f 	bl	8001d40 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b05      	cmp	r3, #5
 800224a:	d90c      	bls.n	8002266 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2203      	movs	r2, #3
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e015      	b.n	8002292 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e4      	bne.n	800223e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002278:	223f      	movs	r2, #63	@ 0x3f
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d004      	beq.n	80022b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2280      	movs	r2, #128	@ 0x80
 80022b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e00c      	b.n	80022d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2205      	movs	r2, #5
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	@ 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e16b      	b.n	80025d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 815a 	bne.w	80025ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d005      	beq.n	8002332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232e:	2b02      	cmp	r3, #2
 8002330:	d130      	bne.n	8002394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 0201 	and.w	r2, r3, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d017      	beq.n	80023d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d123      	bne.n	8002424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80b4 	beq.w	80025ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b60      	ldr	r3, [pc, #384]	@ (80025ec <HAL_GPIO_Init+0x30c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	4a5f      	ldr	r2, [pc, #380]	@ (80025ec <HAL_GPIO_Init+0x30c>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002474:	6453      	str	r3, [r2, #68]	@ 0x44
 8002476:	4b5d      	ldr	r3, [pc, #372]	@ (80025ec <HAL_GPIO_Init+0x30c>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002482:	4a5b      	ldr	r2, [pc, #364]	@ (80025f0 <HAL_GPIO_Init+0x310>)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a52      	ldr	r2, [pc, #328]	@ (80025f4 <HAL_GPIO_Init+0x314>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02b      	beq.n	8002506 <HAL_GPIO_Init+0x226>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a51      	ldr	r2, [pc, #324]	@ (80025f8 <HAL_GPIO_Init+0x318>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d025      	beq.n	8002502 <HAL_GPIO_Init+0x222>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a50      	ldr	r2, [pc, #320]	@ (80025fc <HAL_GPIO_Init+0x31c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01f      	beq.n	80024fe <HAL_GPIO_Init+0x21e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002600 <HAL_GPIO_Init+0x320>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d019      	beq.n	80024fa <HAL_GPIO_Init+0x21a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002604 <HAL_GPIO_Init+0x324>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_GPIO_Init+0x216>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002608 <HAL_GPIO_Init+0x328>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <HAL_GPIO_Init+0x212>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4c      	ldr	r2, [pc, #304]	@ (800260c <HAL_GPIO_Init+0x32c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x20e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002610 <HAL_GPIO_Init+0x330>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_Init+0x20a>
 80024e6:	2307      	movs	r3, #7
 80024e8:	e00e      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024ea:	2308      	movs	r3, #8
 80024ec:	e00c      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024ee:	2306      	movs	r3, #6
 80024f0:	e00a      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024f2:	2305      	movs	r3, #5
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024f6:	2304      	movs	r3, #4
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x228>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x228>
 8002506:	2300      	movs	r3, #0
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002518:	4935      	ldr	r1, [pc, #212]	@ (80025f0 <HAL_GPIO_Init+0x310>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b3b      	ldr	r3, [pc, #236]	@ (8002614 <HAL_GPIO_Init+0x334>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254a:	4a32      	ldr	r2, [pc, #200]	@ (8002614 <HAL_GPIO_Init+0x334>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002550:	4b30      	ldr	r3, [pc, #192]	@ (8002614 <HAL_GPIO_Init+0x334>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002574:	4a27      	ldr	r2, [pc, #156]	@ (8002614 <HAL_GPIO_Init+0x334>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800257a:	4b26      	ldr	r3, [pc, #152]	@ (8002614 <HAL_GPIO_Init+0x334>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259e:	4a1d      	ldr	r2, [pc, #116]	@ (8002614 <HAL_GPIO_Init+0x334>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <HAL_GPIO_Init+0x334>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c8:	4a12      	ldr	r2, [pc, #72]	@ (8002614 <HAL_GPIO_Init+0x334>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3301      	adds	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	f67f ae90 	bls.w	80022fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	@ 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40021400 	.word	0x40021400
 800260c:	40021800 	.word	0x40021800
 8002610:	40021c00 	.word	0x40021c00
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af02      	add	r7, sp, #8
 8002650:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e101      	b.n	8002860 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f007 f8d2 	bl	8009820 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2203      	movs	r2, #3
 8002680:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800268a:	d102      	bne.n	8002692 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fc95 	bl	8005fc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7c1a      	ldrb	r2, [r3, #16]
 80026a4:	f88d 2000 	strb.w	r2, [sp]
 80026a8:	3304      	adds	r3, #4
 80026aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ac:	f003 fb74 	bl	8005d98 <USB_CoreInit>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0ce      	b.n	8002860 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 fc8d 	bl	8005fe8 <USB_SetCurrentMode>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0bf      	b.n	8002860 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e04a      	b.n	800277c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3315      	adds	r3, #21
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3314      	adds	r3, #20
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	b298      	uxth	r0, r3
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	332e      	adds	r3, #46	@ 0x2e
 8002722:	4602      	mov	r2, r0
 8002724:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	3318      	adds	r3, #24
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	331c      	adds	r3, #28
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3320      	adds	r3, #32
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3324      	adds	r3, #36	@ 0x24
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3301      	adds	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	791b      	ldrb	r3, [r3, #4]
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	429a      	cmp	r2, r3
 8002784:	d3af      	bcc.n	80026e6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e044      	b.n	8002816 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	3301      	adds	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	791b      	ldrb	r3, [r3, #4]
 800281a:	7bfa      	ldrb	r2, [r7, #15]
 800281c:	429a      	cmp	r2, r3
 800281e:	d3b5      	bcc.n	800278c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7c1a      	ldrb	r2, [r3, #16]
 8002828:	f88d 2000 	strb.w	r2, [sp]
 800282c:	3304      	adds	r3, #4
 800282e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002830:	f003 fc26 	bl	8006080 <USB_DevInit>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e00c      	b.n	8002860 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f004 fc70 	bl	800713e <USB_DevDisconnect>

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_PCD_Start+0x1c>
 8002880:	2302      	movs	r3, #2
 8002882:	e022      	b.n	80028ca <HAL_PCD_Start+0x62>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800289c:	2b01      	cmp	r3, #1
 800289e:	d105      	bne.n	80028ac <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fb77 	bl	8005fa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 fc1e 	bl	80070fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028d2:	b590      	push	{r4, r7, lr}
 80028d4:	b08d      	sub	sp, #52	@ 0x34
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 fcdc 	bl	80072a6 <USB_GetMode>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 848c 	bne.w	800320e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 fc40 	bl	8007180 <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 8482 	beq.w	800320c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f004 fc2d 	bl	8007180 <USB_ReadInterrupts>
 8002926:	4603      	mov	r3, r0
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b02      	cmp	r3, #2
 800292e:	d107      	bne.n	8002940 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f002 0202 	and.w	r2, r2, #2
 800293e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f004 fc1b 	bl	8007180 <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b10      	cmp	r3, #16
 8002952:	d161      	bne.n	8002a18 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0210 	bic.w	r2, r2, #16
 8002962:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f003 020f 	and.w	r2, r3, #15
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800298a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800298e:	d124      	bne.n	80029da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d035      	beq.n	8002a08 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	6a38      	ldr	r0, [r7, #32]
 80029b0:	f004 fa52 	bl	8006e58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c0:	441a      	add	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d2:	441a      	add	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	615a      	str	r2, [r3, #20]
 80029d8:	e016      	b.n	8002a08 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80029e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80029e4:	d110      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029ec:	2208      	movs	r2, #8
 80029ee:	4619      	mov	r1, r3
 80029f0:	6a38      	ldr	r0, [r7, #32]
 80029f2:	f004 fa31 	bl	8006e58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a02:	441a      	add	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0210 	orr.w	r2, r2, #16
 8002a16:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 fbaf 	bl	8007180 <USB_ReadInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a2c:	f040 80a7 	bne.w	8002b7e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 fbb4 	bl	80071a6 <USB_ReadDevAllOutEpInterrupt>
 8002a3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a40:	e099      	b.n	8002b76 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 808e 	beq.w	8002b6a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 fbd8 	bl	800720e <USB_ReadDevOutEPInterrupt>
 8002a5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a76:	461a      	mov	r2, r3
 8002a78:	2301      	movs	r3, #1
 8002a7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fea4 	bl	80037cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002aa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 ff7a 	bl	800399c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d030      	beq.n	8002b30 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad6:	2b80      	cmp	r3, #128	@ 0x80
 8002ad8:	d109      	bne.n	8002aee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ae8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	3304      	adds	r3, #4
 8002b02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	78db      	ldrb	r3, [r3, #3]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d108      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	4619      	mov	r1, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f006 ff87 	bl	8009a2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b46:	461a      	mov	r2, r3
 8002b48:	2320      	movs	r3, #32
 8002b4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b62:	461a      	mov	r2, r3
 8002b64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f af62 	bne.w	8002a42 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 fafc 	bl	8007180 <USB_ReadInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b92:	f040 80db 	bne.w	8002d4c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fb1d 	bl	80071da <USB_ReadDevAllInEpInterrupt>
 8002ba0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002ba6:	e0cd      	b.n	8002d44 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80c2 	beq.w	8002d38 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 fb43 	bl	800724a <USB_ReadDevInEPInterrupt>
 8002bc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d057      	beq.n	8002c80 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69f9      	ldr	r1, [r7, #28]
 8002bec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c00:	461a      	mov	r2, r3
 8002c02:	2301      	movs	r3, #1
 8002c04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	799b      	ldrb	r3, [r3, #6]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d132      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3320      	adds	r3, #32
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4403      	add	r3, r0
 8002c2e:	331c      	adds	r3, #28
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4419      	add	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4403      	add	r3, r0
 8002c42:	3320      	adds	r3, #32
 8002c44:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d113      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x3a2>
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3324      	adds	r3, #36	@ 0x24
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d108      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2101      	movs	r1, #1
 8002c70:	f004 fb4a 	bl	8007308 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f006 fe51 	bl	8009922 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c96:	461a      	mov	r2, r3
 8002c98:	2308      	movs	r3, #8
 8002c9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2340      	movs	r3, #64	@ 0x40
 8002cd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d023      	beq.n	8002d26 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ce0:	6a38      	ldr	r0, [r7, #32]
 8002ce2:	f003 fb31 	bl	8006348 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	3310      	adds	r3, #16
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	78db      	ldrb	r3, [r3, #3]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d108      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f006 fe9e 	bl	8009a50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d20:	461a      	mov	r2, r3
 8002d22:	2302      	movs	r3, #2
 8002d24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcbd 	bl	80036b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f47f af2e 	bne.w	8002ba8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f004 fa15 	bl	8007180 <USB_ReadInterrupts>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d60:	d122      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d108      	bne.n	8002d92 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d88:	2100      	movs	r1, #0
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fea4 	bl	8003ad8 <HAL_PCDEx_LPM_Callback>
 8002d90:	e002      	b.n	8002d98 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f006 fe3c 	bl	8009a10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 f9e7 	bl	8007180 <USB_ReadInterrupts>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dbc:	d112      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d102      	bne.n	8002dd4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f006 fdf8 	bl	80099c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002de2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f004 f9c9 	bl	8007180 <USB_ReadInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df8:	f040 80b7 	bne.w	8002f6a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2110      	movs	r1, #16
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fa96 	bl	8006348 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e20:	e046      	b.n	8002eb0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e46:	0151      	lsls	r1, r2, #5
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	440a      	add	r2, r1
 8002e4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e62:	461a      	mov	r2, r3
 8002e64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e7a:	0151      	lsls	r1, r2, #5
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	440a      	add	r2, r1
 8002e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e9a:	0151      	lsls	r1, r2, #5
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	440a      	add	r2, r1
 8002ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ea4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ea8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eac:	3301      	adds	r3, #1
 8002eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	791b      	ldrb	r3, [r3, #4]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d3b2      	bcc.n	8002e22 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eca:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ece:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7bdb      	ldrb	r3, [r3, #15]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d016      	beq.n	8002f06 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ee8:	f043 030b 	orr.w	r3, r3, #11
 8002eec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002efe:	f043 030b 	orr.w	r3, r3, #11
 8002f02:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f04:	e015      	b.n	8002f32 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f18:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002f1c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f2c:	f043 030b 	orr.w	r3, r3, #11
 8002f30:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f40:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f44:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f54:	461a      	mov	r2, r3
 8002f56:	f004 f9d7 	bl	8007308 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f004 f906 	bl	8007180 <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f7e:	d123      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f004 f99c 	bl	80072c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 fa53 	bl	800643a <USB_GetDevSpeed>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681c      	ldr	r4, [r3, #0]
 8002fa0:	f001 fa0a 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 8002fa4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002faa:	461a      	mov	r2, r3
 8002fac:	4620      	mov	r0, r4
 8002fae:	f002 ff57 	bl	8005e60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f006 fcdd 	bl	8009972 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 f8d7 	bl	8007180 <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d10a      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f006 fcba 	bl	8009956 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f002 0208 	and.w	r2, r2, #8
 8002ff0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f004 f8c2 	bl	8007180 <USB_ReadInterrupts>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003002:	2b80      	cmp	r3, #128	@ 0x80
 8003004:	d123      	bne.n	800304e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003012:	2301      	movs	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
 8003016:	e014      	b.n	8003042 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fb0a 	bl	8003650 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	3301      	adds	r3, #1
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	791b      	ldrb	r3, [r3, #4]
 8003046:	461a      	mov	r2, r3
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	4293      	cmp	r3, r2
 800304c:	d3e4      	bcc.n	8003018 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f004 f894 	bl	8007180 <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800305e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003062:	d13c      	bne.n	80030de <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003064:	2301      	movs	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	e02b      	b.n	80030c2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3318      	adds	r3, #24
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d115      	bne.n	80030bc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003090:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003092:	2b00      	cmp	r3, #0
 8003094:	da12      	bge.n	80030bc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3317      	adds	r3, #23
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 faca 	bl	8003650 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	3301      	adds	r3, #1
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	791b      	ldrb	r3, [r3, #4]
 80030c6:	461a      	mov	r2, r3
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d3cd      	bcc.n	800306a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80030dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f004 f84c 	bl	8007180 <USB_ReadInterrupts>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030f2:	d156      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f4:	2301      	movs	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f8:	e045      	b.n	8003186 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d12e      	bne.n	8003180 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003122:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003124:	2b00      	cmp	r3, #0
 8003126:	da2b      	bge.n	8003180 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	0c1a      	lsrs	r2, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003132:	4053      	eors	r3, r2
 8003134:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003138:	2b00      	cmp	r3, #0
 800313a:	d121      	bne.n	8003180 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003178:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800317c:	6053      	str	r3, [r2, #4]
            break;
 800317e:	e008      	b.n	8003192 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	3301      	adds	r3, #1
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	791b      	ldrb	r3, [r3, #4]
 800318a:	461a      	mov	r2, r3
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	4293      	cmp	r3, r2
 8003190:	d3b3      	bcc.n	80030fa <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80031a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 ffea 	bl	8007180 <USB_ReadInterrupts>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d10a      	bne.n	80031ce <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f006 fc5b 	bl	8009a74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80031cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f003 ffd4 	bl	8007180 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d115      	bne.n	800320e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f006 fc4b 	bl	8009a90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	e000      	b.n	800320e <HAL_PCD_IRQHandler+0x93c>
      return;
 800320c:	bf00      	nop
    }
  }
}
 800320e:	3734      	adds	r7, #52	@ 0x34
 8003210:	46bd      	mov	sp, r7
 8003212:	bd90      	pop	{r4, r7, pc}

08003214 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_PCD_SetAddress+0x1a>
 800322a:	2302      	movs	r3, #2
 800322c:	e012      	b.n	8003254 <HAL_PCD_SetAddress+0x40>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f003 ff33 	bl	80070b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4603      	mov	r3, r0
 800326c:	70fb      	strb	r3, [r7, #3]
 800326e:	460b      	mov	r3, r1
 8003270:	803b      	strh	r3, [r7, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800327a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800327e:	2b00      	cmp	r3, #0
 8003280:	da0f      	bge.n	80032a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 020f 	and.w	r2, r3, #15
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	3310      	adds	r3, #16
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	3304      	adds	r3, #4
 8003298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	705a      	strb	r2, [r3, #1]
 80032a0:	e00f      	b.n	80032c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 020f 	and.w	r2, r3, #15
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	3304      	adds	r3, #4
 80032ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80032ce:	883b      	ldrh	r3, [r7, #0]
 80032d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	78ba      	ldrb	r2, [r7, #2]
 80032dc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	785b      	ldrb	r3, [r3, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032f0:	78bb      	ldrb	r3, [r7, #2]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d102      	bne.n	80032fc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_PCD_EP_Open+0xae>
 8003306:	2302      	movs	r3, #2
 8003308:	e00e      	b.n	8003328 <HAL_PCD_EP_Open+0xcc>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68f9      	ldr	r1, [r7, #12]
 8003318:	4618      	mov	r0, r3
 800331a:	f003 f8b3 	bl	8006484 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003326:	7afb      	ldrb	r3, [r7, #11]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800333c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003340:	2b00      	cmp	r3, #0
 8003342:	da0f      	bge.n	8003364 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 020f 	and.w	r2, r3, #15
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	3310      	adds	r3, #16
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	3304      	adds	r3, #4
 800335a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	705a      	strb	r2, [r3, #1]
 8003362:	e00f      	b.n	8003384 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	f003 020f 	and.w	r2, r3, #15
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	3304      	adds	r3, #4
 800337c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_PCD_EP_Close+0x6e>
 800339a:	2302      	movs	r3, #2
 800339c:	e00e      	b.n	80033bc <HAL_PCD_EP_Close+0x8c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 f8f1 	bl	8006594 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	460b      	mov	r3, r1
 80033d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d4:	7afb      	ldrb	r3, [r7, #11]
 80033d6:	f003 020f 	and.w	r2, r3, #15
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4413      	add	r3, r2
 80033ea:	3304      	adds	r3, #4
 80033ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2200      	movs	r2, #0
 8003404:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003406:	7afb      	ldrb	r3, [r7, #11]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	b2da      	uxtb	r2, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	799b      	ldrb	r3, [r3, #6]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	799b      	ldrb	r3, [r3, #6]
 8003428:	461a      	mov	r2, r3
 800342a:	6979      	ldr	r1, [r7, #20]
 800342c:	f003 f98e 	bl	800674c <USB_EPStartXfer>

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 020f 	and.w	r2, r3, #15
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800345c:	681b      	ldr	r3, [r3, #0]
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	460b      	mov	r3, r1
 8003478:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347a:	7afb      	ldrb	r3, [r7, #11]
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	3310      	adds	r3, #16
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	3304      	adds	r3, #4
 8003490:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2201      	movs	r2, #1
 80034a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034aa:	7afb      	ldrb	r3, [r7, #11]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	799b      	ldrb	r3, [r3, #6]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d102      	bne.n	80034c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	799b      	ldrb	r3, [r3, #6]
 80034cc:	461a      	mov	r2, r3
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	f003 f93c 	bl	800674c <USB_EPStartXfer>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	7912      	ldrb	r2, [r2, #4]
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e04f      	b.n	800359c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003500:	2b00      	cmp	r3, #0
 8003502:	da0f      	bge.n	8003524 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	3310      	adds	r3, #16
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	3304      	adds	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	705a      	strb	r2, [r3, #1]
 8003522:	e00d      	b.n	8003540 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	3304      	adds	r3, #4
 8003538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	b2da      	uxtb	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_PCD_EP_SetStall+0x82>
 800355c:	2302      	movs	r3, #2
 800355e:	e01d      	b.n	800359c <HAL_PCD_EP_SetStall+0xbe>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68f9      	ldr	r1, [r7, #12]
 800356e:	4618      	mov	r0, r3
 8003570:	f003 fcca 	bl	8006f08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7999      	ldrb	r1, [r3, #6]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800358c:	461a      	mov	r2, r3
 800358e:	f003 febb 	bl	8007308 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	7912      	ldrb	r2, [r2, #4]
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e042      	b.n	8003648 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da0f      	bge.n	80035ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	3310      	adds	r3, #16
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	3304      	adds	r3, #4
 80035e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	705a      	strb	r2, [r3, #1]
 80035e8:	e00f      	b.n	800360a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	f003 020f 	and.w	r2, r3, #15
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4413      	add	r3, r2
 8003600:	3304      	adds	r3, #4
 8003602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	b2da      	uxtb	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_PCD_EP_ClrStall+0x86>
 8003626:	2302      	movs	r3, #2
 8003628:	e00e      	b.n	8003648 <HAL_PCD_EP_ClrStall+0xa4>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	4618      	mov	r0, r3
 800363a:	f003 fcd3 	bl	8006fe4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800365c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003660:	2b00      	cmp	r3, #0
 8003662:	da0c      	bge.n	800367e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	3310      	adds	r3, #16
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	3304      	adds	r3, #4
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e00c      	b.n	8003698 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f003 020f 	and.w	r2, r3, #15
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	4413      	add	r3, r2
 8003694:	3304      	adds	r3, #4
 8003696:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68f9      	ldr	r1, [r7, #12]
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 faf2 	bl	8006c88 <USB_EPStopXfer>
 80036a4:	4603      	mov	r3, r0
 80036a6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036a8:	7afb      	ldrb	r3, [r7, #11]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b08a      	sub	sp, #40	@ 0x28
 80036b6:	af02      	add	r7, sp, #8
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	3310      	adds	r3, #16
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	3304      	adds	r3, #4
 80036d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d901      	bls.n	80036ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e06b      	b.n	80037c2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d902      	bls.n	8003706 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3303      	adds	r3, #3
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800370e:	e02a      	b.n	8003766 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	429a      	cmp	r2, r3
 8003724:	d902      	bls.n	800372c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	3303      	adds	r3, #3
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68d9      	ldr	r1, [r3, #12]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	4603      	mov	r3, r0
 8003748:	6978      	ldr	r0, [r7, #20]
 800374a:	f003 fb47 	bl	8006ddc <USB_WritePacket>

    ep->xfer_buff  += len;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	441a      	add	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	441a      	add	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	429a      	cmp	r2, r3
 800377a:	d809      	bhi.n	8003790 <PCD_WriteEmptyTxFifo+0xde>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003784:	429a      	cmp	r2, r3
 8003786:	d203      	bcs.n	8003790 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1bf      	bne.n	8003710 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	429a      	cmp	r2, r3
 800379a:	d811      	bhi.n	80037c0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	2201      	movs	r2, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	6939      	ldr	r1, [r7, #16]
 80037b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037bc:	4013      	ands	r3, r2
 80037be:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	333c      	adds	r3, #60	@ 0x3c
 80037e4:	3304      	adds	r3, #4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	799b      	ldrb	r3, [r3, #6]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d17b      	bne.n	80038fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	4a61      	ldr	r2, [pc, #388]	@ (8003994 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	f240 80b9 	bls.w	8003988 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80b3 	beq.w	8003988 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382e:	461a      	mov	r2, r3
 8003830:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003834:	6093      	str	r3, [r2, #8]
 8003836:	e0a7      	b.n	8003988 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	2320      	movs	r3, #32
 8003852:	6093      	str	r3, [r2, #8]
 8003854:	e098      	b.n	8003988 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	f040 8093 	bne.w	8003988 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	4a4b      	ldr	r2, [pc, #300]	@ (8003994 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d90f      	bls.n	800388a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003880:	461a      	mov	r2, r3
 8003882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003886:	6093      	str	r3, [r2, #8]
 8003888:	e07e      	b.n	8003988 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4413      	add	r3, r2
 800389c:	3304      	adds	r3, #4
 800389e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	0159      	lsls	r1, r3, #5
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	440b      	add	r3, r1
 80038ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b6:	1ad2      	subs	r2, r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d114      	bne.n	80038ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038d4:	461a      	mov	r2, r3
 80038d6:	2101      	movs	r1, #1
 80038d8:	f003 fd16 	bl	8007308 <USB_EP0_OutStart>
 80038dc:	e006      	b.n	80038ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	441a      	add	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f005 fffa 	bl	80098ec <HAL_PCD_DataOutStageCallback>
 80038f8:	e046      	b.n	8003988 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	4a26      	ldr	r2, [pc, #152]	@ (8003998 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d124      	bne.n	800394c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003918:	461a      	mov	r2, r3
 800391a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800391e:	6093      	str	r3, [r2, #8]
 8003920:	e032      	b.n	8003988 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003938:	461a      	mov	r2, r3
 800393a:	2320      	movs	r3, #32
 800393c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f005 ffd1 	bl	80098ec <HAL_PCD_DataOutStageCallback>
 800394a:	e01d      	b.n	8003988 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d114      	bne.n	800397c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d108      	bne.n	800397c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003974:	461a      	mov	r2, r3
 8003976:	2100      	movs	r1, #0
 8003978:	f003 fcc6 	bl	8007308 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	4619      	mov	r1, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f005 ffb2 	bl	80098ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	4f54300a 	.word	0x4f54300a
 8003998:	4f54310a 	.word	0x4f54310a

0800399c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	333c      	adds	r3, #60	@ 0x3c
 80039b4:	3304      	adds	r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a15      	ldr	r2, [pc, #84]	@ (8003a24 <PCD_EP_OutSetupPacket_int+0x88>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d90e      	bls.n	80039f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e8:	461a      	mov	r2, r3
 80039ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f005 ff69 	bl	80098c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003a24 <PCD_EP_OutSetupPacket_int+0x88>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d90c      	bls.n	8003a18 <PCD_EP_OutSetupPacket_int+0x7c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	799b      	ldrb	r3, [r3, #6]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d108      	bne.n	8003a18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a10:	461a      	mov	r2, r3
 8003a12:	2101      	movs	r1, #1
 8003a14:	f003 fc78 	bl	8007308 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	4f54300a 	.word	0x4f54300a

08003a28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
 8003a34:	4613      	mov	r3, r2
 8003a36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a46:	883b      	ldrh	r3, [r7, #0]
 8003a48:	0419      	lsls	r1, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a54:	e028      	b.n	8003aa8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	4413      	add	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
 8003a68:	e00d      	b.n	8003a86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	3340      	adds	r3, #64	@ 0x40
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	3301      	adds	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d3ec      	bcc.n	8003a6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a90:	883b      	ldrh	r3, [r7, #0]
 8003a92:	0418      	lsls	r0, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6819      	ldr	r1, [r3, #0]
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	4302      	orrs	r2, r0
 8003aa0:	3340      	adds	r3, #64	@ 0x40
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e267      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d075      	beq.n	8003bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b0e:	4b88      	ldr	r3, [pc, #544]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d00c      	beq.n	8003b34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1a:	4b85      	ldr	r3, [pc, #532]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d112      	bne.n	8003b4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b26:	4b82      	ldr	r3, [pc, #520]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b32:	d10b      	bne.n	8003b4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	4b7e      	ldr	r3, [pc, #504]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d05b      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x108>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d157      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e242      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x74>
 8003b56:	4b76      	ldr	r3, [pc, #472]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a75      	ldr	r2, [pc, #468]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e01d      	b.n	8003ba0 <HAL_RCC_OscConfig+0xb0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x98>
 8003b6e:	4b70      	ldr	r3, [pc, #448]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6f      	ldr	r2, [pc, #444]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6c      	ldr	r2, [pc, #432]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0xb0>
 8003b88:	4b69      	ldr	r3, [pc, #420]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a68      	ldr	r2, [pc, #416]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b66      	ldr	r3, [pc, #408]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a65      	ldr	r2, [pc, #404]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe f8ca 	bl	8001d40 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fe f8c6 	bl	8001d40 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	@ 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e207      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	4b5b      	ldr	r3, [pc, #364]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xc0>
 8003bce:	e014      	b.n	8003bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe f8b6 	bl	8001d40 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fe f8b2 	bl	8001d40 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	@ 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1f3      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bea:	4b51      	ldr	r3, [pc, #324]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xe8>
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d063      	beq.n	8003cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c06:	4b4a      	ldr	r3, [pc, #296]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00b      	beq.n	8003c2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c12:	4b47      	ldr	r3, [pc, #284]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d11c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1e:	4b44      	ldr	r3, [pc, #272]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d116      	bne.n	8003c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	4b41      	ldr	r3, [pc, #260]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_RCC_OscConfig+0x152>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d001      	beq.n	8003c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e1c7      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c42:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4937      	ldr	r1, [pc, #220]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c56:	e03a      	b.n	8003cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d020      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c60:	4b34      	ldr	r3, [pc, #208]	@ (8003d34 <HAL_RCC_OscConfig+0x244>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c66:	f7fe f86b 	bl	8001d40 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6e:	f7fe f867 	bl	8001d40 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e1a8      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c80:	4b2b      	ldr	r3, [pc, #172]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8c:	4b28      	ldr	r3, [pc, #160]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4925      	ldr	r1, [pc, #148]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]
 8003ca0:	e015      	b.n	8003cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca2:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <HAL_RCC_OscConfig+0x244>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fe f84a 	bl	8001d40 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb0:	f7fe f846 	bl	8001d40 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e187      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d036      	beq.n	8003d48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce2:	4b15      	ldr	r3, [pc, #84]	@ (8003d38 <HAL_RCC_OscConfig+0x248>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fe f82a 	bl	8001d40 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf0:	f7fe f826 	bl	8001d40 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e167      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d02:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x200>
 8003d0e:	e01b      	b.n	8003d48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d10:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <HAL_RCC_OscConfig+0x248>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d16:	f7fe f813 	bl	8001d40 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	e00e      	b.n	8003d3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1e:	f7fe f80f 	bl	8001d40 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d907      	bls.n	8003d3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e150      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
 8003d30:	40023800 	.word	0x40023800
 8003d34:	42470000 	.word	0x42470000
 8003d38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	4b88      	ldr	r3, [pc, #544]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ea      	bne.n	8003d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8097 	beq.w	8003e84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d5a:	4b81      	ldr	r3, [pc, #516]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10f      	bne.n	8003d86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d76:	4b7a      	ldr	r3, [pc, #488]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d82:	2301      	movs	r3, #1
 8003d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d86:	4b77      	ldr	r3, [pc, #476]	@ (8003f64 <HAL_RCC_OscConfig+0x474>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d118      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d92:	4b74      	ldr	r3, [pc, #464]	@ (8003f64 <HAL_RCC_OscConfig+0x474>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a73      	ldr	r2, [pc, #460]	@ (8003f64 <HAL_RCC_OscConfig+0x474>)
 8003d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d9e:	f7fd ffcf 	bl	8001d40 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da6:	f7fd ffcb 	bl	8001d40 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e10c      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f64 <HAL_RCC_OscConfig+0x474>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d106      	bne.n	8003dda <HAL_RCC_OscConfig+0x2ea>
 8003dcc:	4b64      	ldr	r3, [pc, #400]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd0:	4a63      	ldr	r2, [pc, #396]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd8:	e01c      	b.n	8003e14 <HAL_RCC_OscConfig+0x324>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b05      	cmp	r3, #5
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x30c>
 8003de2:	4b5f      	ldr	r3, [pc, #380]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de6:	4a5e      	ldr	r2, [pc, #376]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003de8:	f043 0304 	orr.w	r3, r3, #4
 8003dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dee:	4b5c      	ldr	r3, [pc, #368]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df2:	4a5b      	ldr	r2, [pc, #364]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCC_OscConfig+0x324>
 8003dfc:	4b58      	ldr	r3, [pc, #352]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e00:	4a57      	ldr	r2, [pc, #348]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e08:	4b55      	ldr	r3, [pc, #340]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	4a54      	ldr	r2, [pc, #336]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	f023 0304 	bic.w	r3, r3, #4
 8003e12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d015      	beq.n	8003e48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1c:	f7fd ff90 	bl	8001d40 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e24:	f7fd ff8c 	bl	8001d40 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0cb      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3a:	4b49      	ldr	r3, [pc, #292]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ee      	beq.n	8003e24 <HAL_RCC_OscConfig+0x334>
 8003e46:	e014      	b.n	8003e72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e48:	f7fd ff7a 	bl	8001d40 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7fd ff76 	bl	8001d40 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e0b5      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e66:	4b3e      	ldr	r3, [pc, #248]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1ee      	bne.n	8003e50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d105      	bne.n	8003e84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e78:	4b39      	ldr	r3, [pc, #228]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	4a38      	ldr	r2, [pc, #224]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80a1 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e8e:	4b34      	ldr	r3, [pc, #208]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d05c      	beq.n	8003f54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d141      	bne.n	8003f26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea2:	4b31      	ldr	r3, [pc, #196]	@ (8003f68 <HAL_RCC_OscConfig+0x478>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fd ff4a 	bl	8001d40 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fd ff46 	bl	8001d40 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e087      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	4b27      	ldr	r3, [pc, #156]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	019b      	lsls	r3, r3, #6
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	491b      	ldr	r1, [pc, #108]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <HAL_RCC_OscConfig+0x478>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fd ff1f 	bl	8001d40 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fd ff1b 	bl	8001d40 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e05c      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f18:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x416>
 8003f24:	e054      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <HAL_RCC_OscConfig+0x478>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd ff08 	bl	8001d40 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd ff04 	bl	8001d40 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e045      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x444>
 8003f52:	e03d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e038      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40007000 	.word	0x40007000
 8003f68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fdc <HAL_RCC_OscConfig+0x4ec>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d028      	beq.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d121      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d11a      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d111      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800

08003fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0cc      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b68      	ldr	r3, [pc, #416]	@ (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d90c      	bls.n	800401c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b65      	ldr	r3, [pc, #404]	@ (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b63      	ldr	r3, [pc, #396]	@ (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0b8      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d020      	beq.n	800406a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004034:	4b59      	ldr	r3, [pc, #356]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a58      	ldr	r2, [pc, #352]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800403e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800404c:	4b53      	ldr	r3, [pc, #332]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4a52      	ldr	r2, [pc, #328]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004058:	4b50      	ldr	r3, [pc, #320]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	494d      	ldr	r1, [pc, #308]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d044      	beq.n	8004100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	4b47      	ldr	r3, [pc, #284]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d119      	bne.n	80040be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e07f      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d003      	beq.n	800409e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409a:	2b03      	cmp	r3, #3
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409e:	4b3f      	ldr	r3, [pc, #252]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e06f      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ae:	4b3b      	ldr	r3, [pc, #236]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e067      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040be:	4b37      	ldr	r3, [pc, #220]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 0203 	bic.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4934      	ldr	r1, [pc, #208]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d0:	f7fd fe36 	bl	8001d40 <HAL_GetTick>
 80040d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d6:	e00a      	b.n	80040ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d8:	f7fd fe32 	bl	8001d40 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e04f      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	4b2b      	ldr	r3, [pc, #172]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 020c 	and.w	r2, r3, #12
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d1eb      	bne.n	80040d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004100:	4b25      	ldr	r3, [pc, #148]	@ (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d20c      	bcs.n	8004128 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	4b22      	ldr	r3, [pc, #136]	@ (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b20      	ldr	r3, [pc, #128]	@ (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e032      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004134:	4b19      	ldr	r3, [pc, #100]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4916      	ldr	r1, [pc, #88]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004152:	4b12      	ldr	r3, [pc, #72]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	490e      	ldr	r1, [pc, #56]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004166:	f000 f821 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 800416a:	4602      	mov	r2, r0
 800416c:	4b0b      	ldr	r3, [pc, #44]	@ (800419c <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	490a      	ldr	r1, [pc, #40]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004178:	5ccb      	ldrb	r3, [r1, r3]
 800417a:	fa22 f303 	lsr.w	r3, r2, r3
 800417e:	4a09      	ldr	r2, [pc, #36]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004182:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd fd96 	bl	8001cb8 <HAL_InitTick>

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023c00 	.word	0x40023c00
 800419c:	40023800 	.word	0x40023800
 80041a0:	0800e6d8 	.word	0x0800e6d8
 80041a4:	20000000 	.word	0x20000000
 80041a8:	20000004 	.word	0x20000004

080041ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b0:	b094      	sub	sp, #80	@ 0x50
 80041b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041c4:	4b79      	ldr	r3, [pc, #484]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d00d      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x40>
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	f200 80e1 	bhi.w	8004398 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x34>
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041de:	e0db      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e0:	4b73      	ldr	r3, [pc, #460]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041e4:	e0db      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041e6:	4b73      	ldr	r3, [pc, #460]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80041e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ea:	e0d8      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041ec:	4b6f      	ldr	r3, [pc, #444]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041f6:	4b6d      	ldr	r3, [pc, #436]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d063      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004202:	4b6a      	ldr	r3, [pc, #424]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	2200      	movs	r2, #0
 800420a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800420c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	633b      	str	r3, [r7, #48]	@ 0x30
 8004216:	2300      	movs	r3, #0
 8004218:	637b      	str	r3, [r7, #52]	@ 0x34
 800421a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800421e:	4622      	mov	r2, r4
 8004220:	462b      	mov	r3, r5
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	0159      	lsls	r1, r3, #5
 800422c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004230:	0150      	lsls	r0, r2, #5
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4621      	mov	r1, r4
 8004238:	1a51      	subs	r1, r2, r1
 800423a:	6139      	str	r1, [r7, #16]
 800423c:	4629      	mov	r1, r5
 800423e:	eb63 0301 	sbc.w	r3, r3, r1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004250:	4659      	mov	r1, fp
 8004252:	018b      	lsls	r3, r1, #6
 8004254:	4651      	mov	r1, sl
 8004256:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800425a:	4651      	mov	r1, sl
 800425c:	018a      	lsls	r2, r1, #6
 800425e:	4651      	mov	r1, sl
 8004260:	ebb2 0801 	subs.w	r8, r2, r1
 8004264:	4659      	mov	r1, fp
 8004266:	eb63 0901 	sbc.w	r9, r3, r1
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800427a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800427e:	4690      	mov	r8, r2
 8004280:	4699      	mov	r9, r3
 8004282:	4623      	mov	r3, r4
 8004284:	eb18 0303 	adds.w	r3, r8, r3
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	462b      	mov	r3, r5
 800428c:	eb49 0303 	adc.w	r3, r9, r3
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800429e:	4629      	mov	r1, r5
 80042a0:	024b      	lsls	r3, r1, #9
 80042a2:	4621      	mov	r1, r4
 80042a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042a8:	4621      	mov	r1, r4
 80042aa:	024a      	lsls	r2, r1, #9
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b2:	2200      	movs	r2, #0
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042bc:	f7fc fce4 	bl	8000c88 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4613      	mov	r3, r2
 80042c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c8:	e058      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b38      	ldr	r3, [pc, #224]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	2200      	movs	r2, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	4611      	mov	r1, r2
 80042d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042da:	623b      	str	r3, [r7, #32]
 80042dc:	2300      	movs	r3, #0
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	f04f 0000 	mov.w	r0, #0
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	0159      	lsls	r1, r3, #5
 80042f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f6:	0150      	lsls	r0, r2, #5
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4641      	mov	r1, r8
 80042fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004302:	4649      	mov	r1, r9
 8004304:	eb63 0b01 	sbc.w	fp, r3, r1
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004314:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004318:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800431c:	ebb2 040a 	subs.w	r4, r2, sl
 8004320:	eb63 050b 	sbc.w	r5, r3, fp
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	00eb      	lsls	r3, r5, #3
 800432e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004332:	00e2      	lsls	r2, r4, #3
 8004334:	4614      	mov	r4, r2
 8004336:	461d      	mov	r5, r3
 8004338:	4643      	mov	r3, r8
 800433a:	18e3      	adds	r3, r4, r3
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	464b      	mov	r3, r9
 8004340:	eb45 0303 	adc.w	r3, r5, r3
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004352:	4629      	mov	r1, r5
 8004354:	028b      	lsls	r3, r1, #10
 8004356:	4621      	mov	r1, r4
 8004358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800435c:	4621      	mov	r1, r4
 800435e:	028a      	lsls	r2, r1, #10
 8004360:	4610      	mov	r0, r2
 8004362:	4619      	mov	r1, r3
 8004364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004366:	2200      	movs	r2, #0
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	61fa      	str	r2, [r7, #28]
 800436c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004370:	f7fc fc8a 	bl	8000c88 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4613      	mov	r3, r2
 800437a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800437c:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	3301      	adds	r3, #1
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800438c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800438e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004396:	e002      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800439a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800439c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3750      	adds	r7, #80	@ 0x50
 80043a4:	46bd      	mov	sp, r7
 80043a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
 80043b0:	00f42400 	.word	0x00f42400
 80043b4:	007a1200 	.word	0x007a1200

080043b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043bc:	4b03      	ldr	r3, [pc, #12]	@ (80043cc <HAL_RCC_GetHCLKFreq+0x14>)
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000000 	.word	0x20000000

080043d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043d4:	f7ff fff0 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	0a9b      	lsrs	r3, r3, #10
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4903      	ldr	r1, [pc, #12]	@ (80043f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40023800 	.word	0x40023800
 80043f4:	0800e6e8 	.word	0x0800e6e8

080043f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043fc:	f7ff ffdc 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	0b5b      	lsrs	r3, r3, #13
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4903      	ldr	r1, [pc, #12]	@ (800441c <HAL_RCC_GetPCLK2Freq+0x24>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	0800e6e8 	.word	0x0800e6e8

08004420 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e038      	b.n	80044a8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7fd fab8 	bl	80019c0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3308      	adds	r3, #8
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f001 fbcc 	bl	8005bf8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	461a      	mov	r2, r3
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	f001 fc2e 	bl	8005ccc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6858      	ldr	r0, [r3, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	f001 fc53 	bl	8005d28 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	6892      	ldr	r2, [r2, #8]
 800448a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	6892      	ldr	r2, [r2, #8]
 8004496:	f041 0101 	orr.w	r1, r1, #1
 800449a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e041      	b.n	8004546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd f9ae 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f000 fa80 	bl	80049f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d001      	beq.n	8004568 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e046      	b.n	80045f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a23      	ldr	r2, [pc, #140]	@ (8004604 <HAL_TIM_Base_Start+0xb4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d022      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004582:	d01d      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1f      	ldr	r2, [pc, #124]	@ (8004608 <HAL_TIM_Base_Start+0xb8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d018      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1e      	ldr	r2, [pc, #120]	@ (800460c <HAL_TIM_Base_Start+0xbc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1c      	ldr	r2, [pc, #112]	@ (8004610 <HAL_TIM_Base_Start+0xc0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00e      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004614 <HAL_TIM_Base_Start+0xc4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a19      	ldr	r2, [pc, #100]	@ (8004618 <HAL_TIM_Base_Start+0xc8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a18      	ldr	r2, [pc, #96]	@ (800461c <HAL_TIM_Base_Start+0xcc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d111      	bne.n	80045e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d010      	beq.n	80045f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	e007      	b.n	80045f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40010000 	.word	0x40010000
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40000c00 	.word	0x40000c00
 8004614:	40010400 	.word	0x40010400
 8004618:	40014000 	.word	0x40014000
 800461c:	40001800 	.word	0x40001800

08004620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d020      	beq.n	8004684 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0202 	mvn.w	r2, #2
 8004654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f9a3 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f995 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f9a6 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d020      	beq.n	80046d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01b      	beq.n	80046d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0204 	mvn.w	r2, #4
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f97d 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f96f 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f980 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d020      	beq.n	800471c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0208 	mvn.w	r2, #8
 80046ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2204      	movs	r2, #4
 80046f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f957 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 8004708:	e005      	b.n	8004716 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f949 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f95a 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	d020      	beq.n	8004768 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01b      	beq.n	8004768 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0210 	mvn.w	r2, #16
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2208      	movs	r2, #8
 800473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f931 	bl	80049b6 <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f923 	bl	80049a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f934 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0201 	mvn.w	r2, #1
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f901 	bl	800498e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00c      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fae8 	bl	8004d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f905 	bl	80049de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0220 	mvn.w	r2, #32
 80047f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 faba 	bl	8004d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIM_ConfigClockSource+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e0b4      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x186>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800483a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004854:	d03e      	beq.n	80048d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800485a:	f200 8087 	bhi.w	800496c <HAL_TIM_ConfigClockSource+0x16c>
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004862:	f000 8086 	beq.w	8004972 <HAL_TIM_ConfigClockSource+0x172>
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486a:	d87f      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b70      	cmp	r3, #112	@ 0x70
 800486e:	d01a      	beq.n	80048a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004870:	2b70      	cmp	r3, #112	@ 0x70
 8004872:	d87b      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b60      	cmp	r3, #96	@ 0x60
 8004876:	d050      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x11a>
 8004878:	2b60      	cmp	r3, #96	@ 0x60
 800487a:	d877      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b50      	cmp	r3, #80	@ 0x50
 800487e:	d03c      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0xfa>
 8004880:	2b50      	cmp	r3, #80	@ 0x50
 8004882:	d873      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b40      	cmp	r3, #64	@ 0x40
 8004886:	d058      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x13a>
 8004888:	2b40      	cmp	r3, #64	@ 0x40
 800488a:	d86f      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b30      	cmp	r3, #48	@ 0x30
 800488e:	d064      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15a>
 8004890:	2b30      	cmp	r3, #48	@ 0x30
 8004892:	d86b      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b20      	cmp	r3, #32
 8004896:	d060      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15a>
 8004898:	2b20      	cmp	r3, #32
 800489a:	d867      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d05c      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15a>
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d05a      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15a>
 80048a4:	e062      	b.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048b6:	f000 f9bd 	bl	8004c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	609a      	str	r2, [r3, #8]
      break;
 80048d2:	e04f      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048e4:	f000 f9a6 	bl	8004c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048f6:	609a      	str	r2, [r3, #8]
      break;
 80048f8:	e03c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004906:	461a      	mov	r2, r3
 8004908:	f000 f91a 	bl	8004b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2150      	movs	r1, #80	@ 0x50
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f973 	bl	8004bfe <TIM_ITRx_SetConfig>
      break;
 8004918:	e02c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004926:	461a      	mov	r2, r3
 8004928:	f000 f939 	bl	8004b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2160      	movs	r1, #96	@ 0x60
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f963 	bl	8004bfe <TIM_ITRx_SetConfig>
      break;
 8004938:	e01c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004946:	461a      	mov	r2, r3
 8004948:	f000 f8fa 	bl	8004b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2140      	movs	r1, #64	@ 0x40
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f953 	bl	8004bfe <TIM_ITRx_SetConfig>
      break;
 8004958:	e00c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f000 f94a 	bl	8004bfe <TIM_ITRx_SetConfig>
      break;
 800496a:	e003      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      break;
 8004970:	e000      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a43      	ldr	r2, [pc, #268]	@ (8004b14 <TIM_Base_SetConfig+0x120>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a12:	d00f      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a40      	ldr	r2, [pc, #256]	@ (8004b18 <TIM_Base_SetConfig+0x124>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b1c <TIM_Base_SetConfig+0x128>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a3e      	ldr	r2, [pc, #248]	@ (8004b20 <TIM_Base_SetConfig+0x12c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b24 <TIM_Base_SetConfig+0x130>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d108      	bne.n	8004a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a32      	ldr	r2, [pc, #200]	@ (8004b14 <TIM_Base_SetConfig+0x120>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d02b      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a54:	d027      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2f      	ldr	r2, [pc, #188]	@ (8004b18 <TIM_Base_SetConfig+0x124>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d023      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2e      	ldr	r2, [pc, #184]	@ (8004b1c <TIM_Base_SetConfig+0x128>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01f      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2d      	ldr	r2, [pc, #180]	@ (8004b20 <TIM_Base_SetConfig+0x12c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01b      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2c      	ldr	r2, [pc, #176]	@ (8004b24 <TIM_Base_SetConfig+0x130>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d017      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2b      	ldr	r2, [pc, #172]	@ (8004b28 <TIM_Base_SetConfig+0x134>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2a      	ldr	r2, [pc, #168]	@ (8004b2c <TIM_Base_SetConfig+0x138>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00f      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a29      	ldr	r2, [pc, #164]	@ (8004b30 <TIM_Base_SetConfig+0x13c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00b      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a28      	ldr	r2, [pc, #160]	@ (8004b34 <TIM_Base_SetConfig+0x140>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d007      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a27      	ldr	r2, [pc, #156]	@ (8004b38 <TIM_Base_SetConfig+0x144>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d003      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a26      	ldr	r2, [pc, #152]	@ (8004b3c <TIM_Base_SetConfig+0x148>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d108      	bne.n	8004ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8004b14 <TIM_Base_SetConfig+0x120>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <TIM_Base_SetConfig+0xf2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a10      	ldr	r2, [pc, #64]	@ (8004b24 <TIM_Base_SetConfig+0x130>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d103      	bne.n	8004aee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f043 0204 	orr.w	r2, r3, #4
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	601a      	str	r2, [r3, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40000c00 	.word	0x40000c00
 8004b24:	40010400 	.word	0x40010400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800
 8004b34:	40001800 	.word	0x40001800
 8004b38:	40001c00 	.word	0x40001c00
 8004b3c:	40002000 	.word	0x40002000

08004b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f023 0201 	bic.w	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f023 030a 	bic.w	r3, r3, #10
 8004b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b087      	sub	sp, #28
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f023 0210 	bic.w	r2, r3, #16
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	031b      	lsls	r3, r3, #12
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f043 0307 	orr.w	r3, r3, #7
 8004c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	609a      	str	r2, [r3, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	021a      	lsls	r2, r3, #8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	609a      	str	r2, [r3, #8]
}
 8004c68:	bf00      	nop
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e05a      	b.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a21      	ldr	r2, [pc, #132]	@ (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d022      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd8:	d01d      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1d      	ldr	r2, [pc, #116]	@ (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d018      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	@ (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a17      	ldr	r2, [pc, #92]	@ (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a15      	ldr	r2, [pc, #84]	@ (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d10c      	bne.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40001800 	.word	0x40001800

08004d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e042      	b.n	8004e2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fc fd64 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2224      	movs	r2, #36	@ 0x24
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fc99 	bl	8005710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b0ba      	sub	sp, #232	@ 0xe8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10f      	bne.n	8004e9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_UART_IRQHandler+0x66>
 8004e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fb7e 	bl	8005594 <UART_Receive_IT>
      return;
 8004e98:	e273      	b.n	8005382 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 80de 	beq.w	8005060 <HAL_UART_IRQHandler+0x22c>
 8004ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80d1 	beq.w	8005060 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <HAL_UART_IRQHandler+0xae>
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <HAL_UART_IRQHandler+0xd2>
 8004eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efe:	f043 0202 	orr.w	r2, r3, #2
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_UART_IRQHandler+0xf6>
 8004f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f22:	f043 0204 	orr.w	r2, r3, #4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d011      	beq.n	8004f5a <HAL_UART_IRQHandler+0x126>
 8004f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f52:	f043 0208 	orr.w	r2, r3, #8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 820a 	beq.w	8005378 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_UART_IRQHandler+0x14e>
 8004f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fb09 	bl	8005594 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8c:	2b40      	cmp	r3, #64	@ 0x40
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d103      	bne.n	8004fae <HAL_UART_IRQHandler+0x17a>
 8004fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d04f      	beq.n	800504e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa14 	bl	80053dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbe:	2b40      	cmp	r3, #64	@ 0x40
 8004fc0:	d141      	bne.n	8005046 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3314      	adds	r3, #20
 8004fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3314      	adds	r3, #20
 8004fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1d9      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d013      	beq.n	800503e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501a:	4a8a      	ldr	r2, [pc, #552]	@ (8005244 <HAL_UART_IRQHandler+0x410>)
 800501c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd f939 	bl	800229a <HAL_DMA_Abort_IT>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d016      	beq.n	800505c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005038:	4610      	mov	r0, r2
 800503a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503c:	e00e      	b.n	800505c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9b6 	bl	80053b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005044:	e00a      	b.n	800505c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f9b2 	bl	80053b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	e006      	b.n	800505c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f9ae 	bl	80053b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800505a:	e18d      	b.n	8005378 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	bf00      	nop
    return;
 800505e:	e18b      	b.n	8005378 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005064:	2b01      	cmp	r3, #1
 8005066:	f040 8167 	bne.w	8005338 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 8160 	beq.w	8005338 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8159 	beq.w	8005338 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005086:	2300      	movs	r3, #0
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a6:	2b40      	cmp	r3, #64	@ 0x40
 80050a8:	f040 80ce 	bne.w	8005248 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80a9 	beq.w	8005214 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050ca:	429a      	cmp	r2, r3
 80050cc:	f080 80a2 	bcs.w	8005214 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050e2:	f000 8088 	beq.w	80051f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005112:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800511e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800512a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1d9      	bne.n	80050e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3314      	adds	r3, #20
 8005138:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3314      	adds	r3, #20
 8005152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005156:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800515a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800515e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005168:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e1      	bne.n	8005132 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3314      	adds	r3, #20
 8005174:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800517e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3314      	adds	r3, #20
 800518e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005192:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005194:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005198:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e3      	bne.n	800516e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	330c      	adds	r3, #12
 80051ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051c6:	f023 0310 	bic.w	r3, r3, #16
 80051ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	330c      	adds	r3, #12
 80051d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e3      	bne.n	80051b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fc ffe2 	bl	80021ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005204:	b29b      	uxth	r3, r3
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	b29b      	uxth	r3, r3
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8d9 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005212:	e0b3      	b.n	800537c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005218:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800521c:	429a      	cmp	r2, r3
 800521e:	f040 80ad 	bne.w	800537c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522c:	f040 80a6 	bne.w	800537c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f8c1 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
      return;
 8005242:	e09b      	b.n	800537c <HAL_UART_IRQHandler+0x548>
 8005244:	080054a3 	.word	0x080054a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005250:	b29b      	uxth	r3, r3
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 808e 	beq.w	8005380 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8089 	beq.w	8005380 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800527e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005284:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005292:	647a      	str	r2, [r7, #68]	@ 0x44
 8005294:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005298:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e3      	bne.n	800526e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	623b      	str	r3, [r7, #32]
   return(result);
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3314      	adds	r3, #20
 80052c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80052cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e3      	bne.n	80052a6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0310 	bic.w	r3, r3, #16
 8005302:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005310:	61fa      	str	r2, [r7, #28]
 8005312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69b9      	ldr	r1, [r7, #24]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	617b      	str	r3, [r7, #20]
   return(result);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e3      	bne.n	80052ec <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800532a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f847 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005336:	e023      	b.n	8005380 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005340:	2b00      	cmp	r3, #0
 8005342:	d009      	beq.n	8005358 <HAL_UART_IRQHandler+0x524>
 8005344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f8b7 	bl	80054c4 <UART_Transmit_IT>
    return;
 8005356:	e014      	b.n	8005382 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00e      	beq.n	8005382 <HAL_UART_IRQHandler+0x54e>
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f8f7 	bl	8005564 <UART_EndTransmit_IT>
    return;
 8005376:	e004      	b.n	8005382 <HAL_UART_IRQHandler+0x54e>
    return;
 8005378:	bf00      	nop
 800537a:	e002      	b.n	8005382 <HAL_UART_IRQHandler+0x54e>
      return;
 800537c:	bf00      	nop
 800537e:	e000      	b.n	8005382 <HAL_UART_IRQHandler+0x54e>
      return;
 8005380:	bf00      	nop
  }
}
 8005382:	37e8      	adds	r7, #232	@ 0xe8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053dc:	b480      	push	{r7}
 80053de:	b095      	sub	sp, #84	@ 0x54
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005404:	643a      	str	r2, [r7, #64]	@ 0x40
 8005406:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800540a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800540c:	e841 2300 	strex	r3, r2, [r1]
 8005410:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e5      	bne.n	80053e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3314      	adds	r3, #20
 800541e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	61fb      	str	r3, [r7, #28]
   return(result);
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3314      	adds	r3, #20
 8005436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800543a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800543e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e5      	bne.n	8005418 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005450:	2b01      	cmp	r3, #1
 8005452:	d119      	bne.n	8005488 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	60bb      	str	r3, [r7, #8]
   return(result);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f023 0310 	bic.w	r3, r3, #16
 800546a:	647b      	str	r3, [r7, #68]	@ 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005474:	61ba      	str	r2, [r7, #24]
 8005476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6979      	ldr	r1, [r7, #20]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	613b      	str	r3, [r7, #16]
   return(result);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e5      	bne.n	8005454 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005496:	bf00      	nop
 8005498:	3754      	adds	r7, #84	@ 0x54
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7ff ff7a 	bl	80053b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b21      	cmp	r3, #33	@ 0x21
 80054d6:	d13e      	bne.n	8005556 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e0:	d114      	bne.n	800550c <UART_Transmit_IT+0x48>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d110      	bne.n	800550c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	1c9a      	adds	r2, r3, #2
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	621a      	str	r2, [r3, #32]
 800550a:	e008      	b.n	800551e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	1c59      	adds	r1, r3, #1
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6211      	str	r1, [r2, #32]
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29b      	uxth	r3, r3
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4619      	mov	r1, r3
 800552c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10f      	bne.n	8005552 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005540:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005550:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e000      	b.n	8005558 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005556:	2302      	movs	r3, #2
  }
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800557a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff feff 	bl	8005388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	@ 0x30
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800559c:	2300      	movs	r3, #0
 800559e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b22      	cmp	r3, #34	@ 0x22
 80055ae:	f040 80aa 	bne.w	8005706 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ba:	d115      	bne.n	80055e8 <UART_Receive_IT+0x54>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d111      	bne.n	80055e8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	1c9a      	adds	r2, r3, #2
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80055e6:	e024      	b.n	8005632 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f6:	d007      	beq.n	8005608 <UART_Receive_IT+0x74>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <UART_Receive_IT+0x82>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	b2da      	uxtb	r2, r3
 8005610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	e008      	b.n	8005628 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005622:	b2da      	uxtb	r2, r3
 8005624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005626:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29b      	uxth	r3, r3
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	4619      	mov	r1, r3
 8005640:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005642:	2b00      	cmp	r3, #0
 8005644:	d15d      	bne.n	8005702 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0220 	bic.w	r2, r2, #32
 8005654:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005664:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005688:	2b01      	cmp	r3, #1
 800568a:	d135      	bne.n	80056f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	330c      	adds	r3, #12
 8005698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	613b      	str	r3, [r7, #16]
   return(result);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f023 0310 	bic.w	r3, r3, #16
 80056a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b2:	623a      	str	r2, [r7, #32]
 80056b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	69f9      	ldr	r1, [r7, #28]
 80056b8:	6a3a      	ldr	r2, [r7, #32]
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	61bb      	str	r3, [r7, #24]
   return(result);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e5      	bne.n	8005692 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d10a      	bne.n	80056ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff fe67 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
 80056f6:	e002      	b.n	80056fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fe4f 	bl	800539c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e002      	b.n	8005708 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e000      	b.n	8005708 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005706:	2302      	movs	r3, #2
  }
}
 8005708:	4618      	mov	r0, r3
 800570a:	3730      	adds	r7, #48	@ 0x30
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005714:	b0c0      	sub	sp, #256	@ 0x100
 8005716:	af00      	add	r7, sp, #0
 8005718:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572c:	68d9      	ldr	r1, [r3, #12]
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	ea40 0301 	orr.w	r3, r0, r1
 8005738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	431a      	orrs	r2, r3
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	431a      	orrs	r2, r3
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005768:	f021 010c 	bic.w	r1, r1, #12
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005776:	430b      	orrs	r3, r1
 8005778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578a:	6999      	ldr	r1, [r3, #24]
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	ea40 0301 	orr.w	r3, r0, r1
 8005796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b8f      	ldr	r3, [pc, #572]	@ (80059dc <UART_SetConfig+0x2cc>)
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d005      	beq.n	80057b0 <UART_SetConfig+0xa0>
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b8d      	ldr	r3, [pc, #564]	@ (80059e0 <UART_SetConfig+0x2d0>)
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d104      	bne.n	80057ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057b0:	f7fe fe22 	bl	80043f8 <HAL_RCC_GetPCLK2Freq>
 80057b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057b8:	e003      	b.n	80057c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ba:	f7fe fe09 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 80057be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057cc:	f040 810c 	bne.w	80059e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057e2:	4622      	mov	r2, r4
 80057e4:	462b      	mov	r3, r5
 80057e6:	1891      	adds	r1, r2, r2
 80057e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057ea:	415b      	adcs	r3, r3
 80057ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057f2:	4621      	mov	r1, r4
 80057f4:	eb12 0801 	adds.w	r8, r2, r1
 80057f8:	4629      	mov	r1, r5
 80057fa:	eb43 0901 	adc.w	r9, r3, r1
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800580a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800580e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005812:	4690      	mov	r8, r2
 8005814:	4699      	mov	r9, r3
 8005816:	4623      	mov	r3, r4
 8005818:	eb18 0303 	adds.w	r3, r8, r3
 800581c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005820:	462b      	mov	r3, r5
 8005822:	eb49 0303 	adc.w	r3, r9, r3
 8005826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800582a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005836:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800583a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800583e:	460b      	mov	r3, r1
 8005840:	18db      	adds	r3, r3, r3
 8005842:	653b      	str	r3, [r7, #80]	@ 0x50
 8005844:	4613      	mov	r3, r2
 8005846:	eb42 0303 	adc.w	r3, r2, r3
 800584a:	657b      	str	r3, [r7, #84]	@ 0x54
 800584c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005854:	f7fb fa18 	bl	8000c88 <__aeabi_uldivmod>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4b61      	ldr	r3, [pc, #388]	@ (80059e4 <UART_SetConfig+0x2d4>)
 800585e:	fba3 2302 	umull	r2, r3, r3, r2
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	011c      	lsls	r4, r3, #4
 8005866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800586a:	2200      	movs	r2, #0
 800586c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005870:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	1891      	adds	r1, r2, r2
 800587e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005880:	415b      	adcs	r3, r3
 8005882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005888:	4641      	mov	r1, r8
 800588a:	eb12 0a01 	adds.w	sl, r2, r1
 800588e:	4649      	mov	r1, r9
 8005890:	eb43 0b01 	adc.w	fp, r3, r1
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058a8:	4692      	mov	sl, r2
 80058aa:	469b      	mov	fp, r3
 80058ac:	4643      	mov	r3, r8
 80058ae:	eb1a 0303 	adds.w	r3, sl, r3
 80058b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058b6:	464b      	mov	r3, r9
 80058b8:	eb4b 0303 	adc.w	r3, fp, r3
 80058bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058d4:	460b      	mov	r3, r1
 80058d6:	18db      	adds	r3, r3, r3
 80058d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80058da:	4613      	mov	r3, r2
 80058dc:	eb42 0303 	adc.w	r3, r2, r3
 80058e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058ea:	f7fb f9cd 	bl	8000c88 <__aeabi_uldivmod>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4611      	mov	r1, r2
 80058f4:	4b3b      	ldr	r3, [pc, #236]	@ (80059e4 <UART_SetConfig+0x2d4>)
 80058f6:	fba3 2301 	umull	r2, r3, r3, r1
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	2264      	movs	r2, #100	@ 0x64
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	1acb      	subs	r3, r1, r3
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800590a:	4b36      	ldr	r3, [pc, #216]	@ (80059e4 <UART_SetConfig+0x2d4>)
 800590c:	fba3 2302 	umull	r2, r3, r3, r2
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005918:	441c      	add	r4, r3
 800591a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800591e:	2200      	movs	r2, #0
 8005920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005924:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800592c:	4642      	mov	r2, r8
 800592e:	464b      	mov	r3, r9
 8005930:	1891      	adds	r1, r2, r2
 8005932:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005934:	415b      	adcs	r3, r3
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800593c:	4641      	mov	r1, r8
 800593e:	1851      	adds	r1, r2, r1
 8005940:	6339      	str	r1, [r7, #48]	@ 0x30
 8005942:	4649      	mov	r1, r9
 8005944:	414b      	adcs	r3, r1
 8005946:	637b      	str	r3, [r7, #52]	@ 0x34
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005954:	4659      	mov	r1, fp
 8005956:	00cb      	lsls	r3, r1, #3
 8005958:	4651      	mov	r1, sl
 800595a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800595e:	4651      	mov	r1, sl
 8005960:	00ca      	lsls	r2, r1, #3
 8005962:	4610      	mov	r0, r2
 8005964:	4619      	mov	r1, r3
 8005966:	4603      	mov	r3, r0
 8005968:	4642      	mov	r2, r8
 800596a:	189b      	adds	r3, r3, r2
 800596c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005970:	464b      	mov	r3, r9
 8005972:	460a      	mov	r2, r1
 8005974:	eb42 0303 	adc.w	r3, r2, r3
 8005978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005988:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800598c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005990:	460b      	mov	r3, r1
 8005992:	18db      	adds	r3, r3, r3
 8005994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005996:	4613      	mov	r3, r2
 8005998:	eb42 0303 	adc.w	r3, r2, r3
 800599c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800599e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059a6:	f7fb f96f 	bl	8000c88 <__aeabi_uldivmod>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <UART_SetConfig+0x2d4>)
 80059b0:	fba3 1302 	umull	r1, r3, r3, r2
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	2164      	movs	r1, #100	@ 0x64
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	3332      	adds	r3, #50	@ 0x32
 80059c2:	4a08      	ldr	r2, [pc, #32]	@ (80059e4 <UART_SetConfig+0x2d4>)
 80059c4:	fba2 2303 	umull	r2, r3, r2, r3
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	f003 0207 	and.w	r2, r3, #7
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4422      	add	r2, r4
 80059d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059d8:	e106      	b.n	8005be8 <UART_SetConfig+0x4d8>
 80059da:	bf00      	nop
 80059dc:	40011000 	.word	0x40011000
 80059e0:	40011400 	.word	0x40011400
 80059e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059fa:	4642      	mov	r2, r8
 80059fc:	464b      	mov	r3, r9
 80059fe:	1891      	adds	r1, r2, r2
 8005a00:	6239      	str	r1, [r7, #32]
 8005a02:	415b      	adcs	r3, r3
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a0a:	4641      	mov	r1, r8
 8005a0c:	1854      	adds	r4, r2, r1
 8005a0e:	4649      	mov	r1, r9
 8005a10:	eb43 0501 	adc.w	r5, r3, r1
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	00eb      	lsls	r3, r5, #3
 8005a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a22:	00e2      	lsls	r2, r4, #3
 8005a24:	4614      	mov	r4, r2
 8005a26:	461d      	mov	r5, r3
 8005a28:	4643      	mov	r3, r8
 8005a2a:	18e3      	adds	r3, r4, r3
 8005a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a30:	464b      	mov	r3, r9
 8005a32:	eb45 0303 	adc.w	r3, r5, r3
 8005a36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a56:	4629      	mov	r1, r5
 8005a58:	008b      	lsls	r3, r1, #2
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a60:	4621      	mov	r1, r4
 8005a62:	008a      	lsls	r2, r1, #2
 8005a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a68:	f7fb f90e 	bl	8000c88 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4b60      	ldr	r3, [pc, #384]	@ (8005bf4 <UART_SetConfig+0x4e4>)
 8005a72:	fba3 2302 	umull	r2, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	011c      	lsls	r4, r3, #4
 8005a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	464b      	mov	r3, r9
 8005a90:	1891      	adds	r1, r2, r2
 8005a92:	61b9      	str	r1, [r7, #24]
 8005a94:	415b      	adcs	r3, r3
 8005a96:	61fb      	str	r3, [r7, #28]
 8005a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	1851      	adds	r1, r2, r1
 8005aa0:	6139      	str	r1, [r7, #16]
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	414b      	adcs	r3, r1
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	00cb      	lsls	r3, r1, #3
 8005ab8:	4651      	mov	r1, sl
 8005aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005abe:	4651      	mov	r1, sl
 8005ac0:	00ca      	lsls	r2, r1, #3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4642      	mov	r2, r8
 8005aca:	189b      	adds	r3, r3, r2
 8005acc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	460a      	mov	r2, r1
 8005ad4:	eb42 0303 	adc.w	r3, r2, r3
 8005ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ae6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005af4:	4649      	mov	r1, r9
 8005af6:	008b      	lsls	r3, r1, #2
 8005af8:	4641      	mov	r1, r8
 8005afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005afe:	4641      	mov	r1, r8
 8005b00:	008a      	lsls	r2, r1, #2
 8005b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b06:	f7fb f8bf 	bl	8000c88 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	4b38      	ldr	r3, [pc, #224]	@ (8005bf4 <UART_SetConfig+0x4e4>)
 8005b12:	fba3 2301 	umull	r2, r3, r3, r1
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	2264      	movs	r2, #100	@ 0x64
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
 8005b1e:	1acb      	subs	r3, r1, r3
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	3332      	adds	r3, #50	@ 0x32
 8005b24:	4a33      	ldr	r2, [pc, #204]	@ (8005bf4 <UART_SetConfig+0x4e4>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b30:	441c      	add	r4, r3
 8005b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b36:	2200      	movs	r2, #0
 8005b38:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b40:	4642      	mov	r2, r8
 8005b42:	464b      	mov	r3, r9
 8005b44:	1891      	adds	r1, r2, r2
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	415b      	adcs	r3, r3
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b50:	4641      	mov	r1, r8
 8005b52:	1851      	adds	r1, r2, r1
 8005b54:	6039      	str	r1, [r7, #0]
 8005b56:	4649      	mov	r1, r9
 8005b58:	414b      	adcs	r3, r1
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b68:	4659      	mov	r1, fp
 8005b6a:	00cb      	lsls	r3, r1, #3
 8005b6c:	4651      	mov	r1, sl
 8005b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b72:	4651      	mov	r1, sl
 8005b74:	00ca      	lsls	r2, r1, #3
 8005b76:	4610      	mov	r0, r2
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	189b      	adds	r3, r3, r2
 8005b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b82:	464b      	mov	r3, r9
 8005b84:	460a      	mov	r2, r1
 8005b86:	eb42 0303 	adc.w	r3, r2, r3
 8005b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b96:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	008b      	lsls	r3, r1, #2
 8005ba8:	4641      	mov	r1, r8
 8005baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bae:	4641      	mov	r1, r8
 8005bb0:	008a      	lsls	r2, r1, #2
 8005bb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bb6:	f7fb f867 	bl	8000c88 <__aeabi_uldivmod>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <UART_SetConfig+0x4e4>)
 8005bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	2164      	movs	r1, #100	@ 0x64
 8005bc8:	fb01 f303 	mul.w	r3, r1, r3
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	3332      	adds	r3, #50	@ 0x32
 8005bd2:	4a08      	ldr	r2, [pc, #32]	@ (8005bf4 <UART_SetConfig+0x4e4>)
 8005bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	f003 020f 	and.w	r2, r3, #15
 8005bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4422      	add	r2, r4
 8005be6:	609a      	str	r2, [r3, #8]
}
 8005be8:	bf00      	nop
 8005bea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bf4:	51eb851f 	.word	0x51eb851f

08005bf8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	f023 0101 	bic.w	r1, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d102      	bne.n	8005c28 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005c22:	2340      	movs	r3, #64	@ 0x40
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	e001      	b.n	8005c2c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005c38:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005c3e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005c44:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005c4a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005c50:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005c56:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005c5c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8005c62:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005c68:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005c86:	4b10      	ldr	r3, [pc, #64]	@ (8005cc8 <FSMC_NORSRAM_Init+0xd0>)
 8005c88:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c90:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005c98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	ea02 0103 	and.w	r1, r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4319      	orrs	r1, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	0008fb7f 	.word	0x0008fb7f

08005ccc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005ce2:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005cea:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005cf2:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005cfc:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	3b02      	subs	r3, #2
 8005d04:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005d06:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005d12:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d3c:	d11d      	bne.n	8005d7a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d46:	4b13      	ldr	r3, [pc, #76]	@ (8005d94 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	6811      	ldr	r1, [r2, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	6852      	ldr	r2, [r2, #4]
 8005d52:	0112      	lsls	r2, r2, #4
 8005d54:	4311      	orrs	r1, r2
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	6892      	ldr	r2, [r2, #8]
 8005d5a:	0212      	lsls	r2, r2, #8
 8005d5c:	4311      	orrs	r1, r2
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	6992      	ldr	r2, [r2, #24]
 8005d62:	4311      	orrs	r1, r2
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	68d2      	ldr	r2, [r2, #12]
 8005d68:	0412      	lsls	r2, r2, #16
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	ea43 0102 	orr.w	r1, r3, r2
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005d78:	e005      	b.n	8005d86 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8005d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	cff00000 	.word	0xcff00000

08005d98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d98:	b084      	sub	sp, #16
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	f107 001c 	add.w	r0, r7, #28
 8005da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005daa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d123      	bne.n	8005dfa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d105      	bne.n	8005dee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 fae8 	bl	80073c4 <USB_CoreReset>
 8005df4:	4603      	mov	r3, r0
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e01b      	b.n	8005e32 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fadc 	bl	80073c4 <USB_CoreReset>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d106      	bne.n	8005e26 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e24:	e005      	b.n	8005e32 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e32:	7fbb      	ldrb	r3, [r7, #30]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d10b      	bne.n	8005e50 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f043 0206 	orr.w	r2, r3, #6
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f043 0220 	orr.w	r2, r3, #32
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e5c:	b004      	add	sp, #16
 8005e5e:	4770      	bx	lr

08005e60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d165      	bne.n	8005f40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4a41      	ldr	r2, [pc, #260]	@ (8005f7c <USB_SetTurnaroundTime+0x11c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d906      	bls.n	8005e8a <USB_SetTurnaroundTime+0x2a>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4a40      	ldr	r2, [pc, #256]	@ (8005f80 <USB_SetTurnaroundTime+0x120>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d202      	bcs.n	8005e8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e84:	230f      	movs	r3, #15
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e062      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f80 <USB_SetTurnaroundTime+0x120>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d306      	bcc.n	8005ea0 <USB_SetTurnaroundTime+0x40>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4a3b      	ldr	r2, [pc, #236]	@ (8005f84 <USB_SetTurnaroundTime+0x124>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d202      	bcs.n	8005ea0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e9a:	230e      	movs	r3, #14
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e057      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4a38      	ldr	r2, [pc, #224]	@ (8005f84 <USB_SetTurnaroundTime+0x124>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d306      	bcc.n	8005eb6 <USB_SetTurnaroundTime+0x56>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4a37      	ldr	r2, [pc, #220]	@ (8005f88 <USB_SetTurnaroundTime+0x128>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d202      	bcs.n	8005eb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005eb0:	230d      	movs	r3, #13
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	e04c      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4a33      	ldr	r2, [pc, #204]	@ (8005f88 <USB_SetTurnaroundTime+0x128>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d306      	bcc.n	8005ecc <USB_SetTurnaroundTime+0x6c>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a32      	ldr	r2, [pc, #200]	@ (8005f8c <USB_SetTurnaroundTime+0x12c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d802      	bhi.n	8005ecc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	e041      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4a2f      	ldr	r2, [pc, #188]	@ (8005f8c <USB_SetTurnaroundTime+0x12c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d906      	bls.n	8005ee2 <USB_SetTurnaroundTime+0x82>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8005f90 <USB_SetTurnaroundTime+0x130>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d802      	bhi.n	8005ee2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005edc:	230b      	movs	r3, #11
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	e036      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8005f90 <USB_SetTurnaroundTime+0x130>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d906      	bls.n	8005ef8 <USB_SetTurnaroundTime+0x98>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4a29      	ldr	r2, [pc, #164]	@ (8005f94 <USB_SetTurnaroundTime+0x134>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d802      	bhi.n	8005ef8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ef2:	230a      	movs	r3, #10
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e02b      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a26      	ldr	r2, [pc, #152]	@ (8005f94 <USB_SetTurnaroundTime+0x134>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d906      	bls.n	8005f0e <USB_SetTurnaroundTime+0xae>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4a25      	ldr	r2, [pc, #148]	@ (8005f98 <USB_SetTurnaroundTime+0x138>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d202      	bcs.n	8005f0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f08:	2309      	movs	r3, #9
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e020      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4a21      	ldr	r2, [pc, #132]	@ (8005f98 <USB_SetTurnaroundTime+0x138>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d306      	bcc.n	8005f24 <USB_SetTurnaroundTime+0xc4>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4a20      	ldr	r2, [pc, #128]	@ (8005f9c <USB_SetTurnaroundTime+0x13c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d802      	bhi.n	8005f24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f1e:	2308      	movs	r3, #8
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	e015      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4a1d      	ldr	r2, [pc, #116]	@ (8005f9c <USB_SetTurnaroundTime+0x13c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d906      	bls.n	8005f3a <USB_SetTurnaroundTime+0xda>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa0 <USB_SetTurnaroundTime+0x140>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d202      	bcs.n	8005f3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f34:	2307      	movs	r3, #7
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e00a      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f3a:	2306      	movs	r3, #6
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e007      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f46:	2309      	movs	r3, #9
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e001      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f4c:	2309      	movs	r3, #9
 8005f4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	029b      	lsls	r3, r3, #10
 8005f64:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	00d8acbf 	.word	0x00d8acbf
 8005f80:	00e4e1c0 	.word	0x00e4e1c0
 8005f84:	00f42400 	.word	0x00f42400
 8005f88:	01067380 	.word	0x01067380
 8005f8c:	011a499f 	.word	0x011a499f
 8005f90:	01312cff 	.word	0x01312cff
 8005f94:	014ca43f 	.word	0x014ca43f
 8005f98:	016e3600 	.word	0x016e3600
 8005f9c:	01a6ab1f 	.word	0x01a6ab1f
 8005fa0:	01e84800 	.word	0x01e84800

08005fa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f043 0201 	orr.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d115      	bne.n	8006036 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006016:	200a      	movs	r0, #10
 8006018:	f7fb fe9e 	bl	8001d58 <HAL_Delay>
      ms += 10U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	330a      	adds	r3, #10
 8006020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 f93f 	bl	80072a6 <USB_GetMode>
 8006028:	4603      	mov	r3, r0
 800602a:	2b01      	cmp	r3, #1
 800602c:	d01e      	beq.n	800606c <USB_SetCurrentMode+0x84>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2bc7      	cmp	r3, #199	@ 0xc7
 8006032:	d9f0      	bls.n	8006016 <USB_SetCurrentMode+0x2e>
 8006034:	e01a      	b.n	800606c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d115      	bne.n	8006068 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006048:	200a      	movs	r0, #10
 800604a:	f7fb fe85 	bl	8001d58 <HAL_Delay>
      ms += 10U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	330a      	adds	r3, #10
 8006052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 f926 	bl	80072a6 <USB_GetMode>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <USB_SetCurrentMode+0x84>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2bc7      	cmp	r3, #199	@ 0xc7
 8006064:	d9f0      	bls.n	8006048 <USB_SetCurrentMode+0x60>
 8006066:	e001      	b.n	800606c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e005      	b.n	8006078 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006070:	d101      	bne.n	8006076 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006080:	b084      	sub	sp, #16
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800608e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	e009      	b.n	80060b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3340      	adds	r3, #64	@ 0x40
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	2200      	movs	r2, #0
 80060ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b0e      	cmp	r3, #14
 80060b8:	d9f2      	bls.n	80060a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d11c      	bne.n	80060fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060d0:	f043 0302 	orr.w	r3, r3, #2
 80060d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80060fa:	e00b      	b.n	8006114 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006100:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800611a:	461a      	mov	r2, r3
 800611c:	2300      	movs	r3, #0
 800611e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006120:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006124:	2b01      	cmp	r3, #1
 8006126:	d10d      	bne.n	8006144 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800612c:	2b00      	cmp	r3, #0
 800612e:	d104      	bne.n	800613a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006130:	2100      	movs	r1, #0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f968 	bl	8006408 <USB_SetDevSpeed>
 8006138:	e008      	b.n	800614c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800613a:	2101      	movs	r1, #1
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f963 	bl	8006408 <USB_SetDevSpeed>
 8006142:	e003      	b.n	800614c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006144:	2103      	movs	r1, #3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f95e 	bl	8006408 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800614c:	2110      	movs	r1, #16
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f8fa 	bl	8006348 <USB_FlushTxFifo>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f924 	bl	80063ac <USB_FlushRxFifo>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006174:	461a      	mov	r2, r3
 8006176:	2300      	movs	r3, #0
 8006178:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006180:	461a      	mov	r2, r3
 8006182:	2300      	movs	r3, #0
 8006184:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800618c:	461a      	mov	r2, r3
 800618e:	2300      	movs	r3, #0
 8006190:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006192:	2300      	movs	r3, #0
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	e043      	b.n	8006220 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ae:	d118      	bne.n	80061e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c2:	461a      	mov	r2, r3
 80061c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e013      	b.n	80061f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d8:	461a      	mov	r2, r3
 80061da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	e008      	b.n	80061f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ee:	461a      	mov	r2, r3
 80061f0:	2300      	movs	r3, #0
 80061f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006200:	461a      	mov	r2, r3
 8006202:	2300      	movs	r3, #0
 8006204:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006212:	461a      	mov	r2, r3
 8006214:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006218:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	3301      	adds	r3, #1
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006224:	461a      	mov	r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4293      	cmp	r3, r2
 800622a:	d3b5      	bcc.n	8006198 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	e043      	b.n	80062ba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006248:	d118      	bne.n	800627c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800625c:	461a      	mov	r2, r3
 800625e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	e013      	b.n	800628e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006272:	461a      	mov	r2, r3
 8006274:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e008      	b.n	800628e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006288:	461a      	mov	r2, r3
 800628a:	2300      	movs	r3, #0
 800628c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629a:	461a      	mov	r2, r3
 800629c:	2300      	movs	r3, #0
 800629e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ac:	461a      	mov	r2, r3
 80062ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	3301      	adds	r3, #1
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062be:	461a      	mov	r2, r3
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d3b5      	bcc.n	8006232 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80062e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f043 0210 	orr.w	r2, r3, #16
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	4b10      	ldr	r3, [pc, #64]	@ (8006344 <USB_DevInit+0x2c4>)
 8006302:	4313      	orrs	r3, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006308:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f043 0208 	orr.w	r2, r3, #8
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800631c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006320:	2b01      	cmp	r3, #1
 8006322:	d107      	bne.n	8006334 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800632c:	f043 0304 	orr.w	r3, r3, #4
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006340:	b004      	add	sp, #16
 8006342:	4770      	bx	lr
 8006344:	803c3800 	.word	0x803c3800

08006348 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006362:	d901      	bls.n	8006368 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e01b      	b.n	80063a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	daf2      	bge.n	8006356 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	019b      	lsls	r3, r3, #6
 8006378:	f043 0220 	orr.w	r2, r3, #32
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800638c:	d901      	bls.n	8006392 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e006      	b.n	80063a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b20      	cmp	r3, #32
 800639c:	d0f0      	beq.n	8006380 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063c4:	d901      	bls.n	80063ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e018      	b.n	80063fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	daf2      	bge.n	80063b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2210      	movs	r2, #16
 80063da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3301      	adds	r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063e8:	d901      	bls.n	80063ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e006      	b.n	80063fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0310 	and.w	r3, r3, #16
 80063f6:	2b10      	cmp	r3, #16
 80063f8:	d0f0      	beq.n	80063dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006428:	4313      	orrs	r3, r2
 800642a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800643a:	b480      	push	{r7}
 800643c:	b087      	sub	sp, #28
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0306 	and.w	r3, r3, #6
 8006452:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800645a:	2300      	movs	r3, #0
 800645c:	75fb      	strb	r3, [r7, #23]
 800645e:	e00a      	b.n	8006476 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d002      	beq.n	800646c <USB_GetDevSpeed+0x32>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b06      	cmp	r3, #6
 800646a:	d102      	bne.n	8006472 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800646c:	2302      	movs	r3, #2
 800646e:	75fb      	strb	r3, [r7, #23]
 8006470:	e001      	b.n	8006476 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006472:	230f      	movs	r3, #15
 8006474:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006476:	7dfb      	ldrb	r3, [r7, #23]
}
 8006478:	4618      	mov	r0, r3
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d13a      	bne.n	8006516 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a6:	69da      	ldr	r2, [r3, #28]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	f003 030f 	and.w	r3, r3, #15
 80064b0:	2101      	movs	r1, #1
 80064b2:	fa01 f303 	lsl.w	r3, r1, r3
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	68f9      	ldr	r1, [r7, #12]
 80064ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064be:	4313      	orrs	r3, r2
 80064c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d155      	bne.n	8006584 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	791b      	ldrb	r3, [r3, #4]
 80064f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	059b      	lsls	r3, r3, #22
 80064fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064fc:	4313      	orrs	r3, r2
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800650a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800650e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	e036      	b.n	8006584 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800651c:	69da      	ldr	r2, [r3, #28]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	2101      	movs	r1, #1
 8006528:	fa01 f303 	lsl.w	r3, r1, r3
 800652c:	041b      	lsls	r3, r3, #16
 800652e:	68f9      	ldr	r1, [r7, #12]
 8006530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006534:	4313      	orrs	r3, r2
 8006536:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d11a      	bne.n	8006584 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	791b      	ldrb	r3, [r3, #4]
 8006568:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800656a:	430b      	orrs	r3, r1
 800656c:	4313      	orrs	r3, r2
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800657a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800657e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006582:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d161      	bne.n	8006674 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065c6:	d11f      	bne.n	8006608 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	0151      	lsls	r1, r2, #5
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	440a      	add	r2, r1
 80065fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006602:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006606:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800660e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	2101      	movs	r1, #1
 800661a:	fa01 f303 	lsl.w	r3, r1, r3
 800661e:	b29b      	uxth	r3, r3
 8006620:	43db      	mvns	r3, r3
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006628:	4013      	ands	r3, r2
 800662a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	2101      	movs	r1, #1
 800663e:	fa01 f303 	lsl.w	r3, r1, r3
 8006642:	b29b      	uxth	r3, r3
 8006644:	43db      	mvns	r3, r3
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800664c:	4013      	ands	r3, r2
 800664e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	0159      	lsls	r1, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	440b      	add	r3, r1
 8006666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666a:	4619      	mov	r1, r3
 800666c:	4b35      	ldr	r3, [pc, #212]	@ (8006744 <USB_DeactivateEndpoint+0x1b0>)
 800666e:	4013      	ands	r3, r2
 8006670:	600b      	str	r3, [r1, #0]
 8006672:	e060      	b.n	8006736 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006686:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800668a:	d11f      	bne.n	80066cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	2101      	movs	r1, #1
 80066de:	fa01 f303 	lsl.w	r3, r1, r3
 80066e2:	041b      	lsls	r3, r3, #16
 80066e4:	43db      	mvns	r3, r3
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066ec:	4013      	ands	r3, r2
 80066ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	2101      	movs	r1, #1
 8006702:	fa01 f303 	lsl.w	r3, r1, r3
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	43db      	mvns	r3, r3
 800670a:	68f9      	ldr	r1, [r7, #12]
 800670c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006710:	4013      	ands	r3, r2
 8006712:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	0159      	lsls	r1, r3, #5
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	440b      	add	r3, r1
 800672a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672e:	4619      	mov	r1, r3
 8006730:	4b05      	ldr	r3, [pc, #20]	@ (8006748 <USB_DeactivateEndpoint+0x1b4>)
 8006732:	4013      	ands	r3, r2
 8006734:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	ec337800 	.word	0xec337800
 8006748:	eff37800 	.word	0xeff37800

0800674c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08a      	sub	sp, #40	@ 0x28
 8006750:	af02      	add	r7, sp, #8
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	2b01      	cmp	r3, #1
 800676a:	f040 817f 	bne.w	8006a6c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d132      	bne.n	80067dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	440a      	add	r2, r1
 800678c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006790:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006794:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	0151      	lsls	r1, r2, #5
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	440a      	add	r2, r1
 80067b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067d4:	0cdb      	lsrs	r3, r3, #19
 80067d6:	04db      	lsls	r3, r3, #19
 80067d8:	6113      	str	r3, [r2, #16]
 80067da:	e097      	b.n	800690c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067f6:	0cdb      	lsrs	r3, r3, #19
 80067f8:	04db      	lsls	r3, r3, #19
 80067fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006816:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800681a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800681e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d11a      	bne.n	800685c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	429a      	cmp	r2, r3
 8006830:	d903      	bls.n	800683a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	0151      	lsls	r1, r2, #5
 800684c:	69fa      	ldr	r2, [r7, #28]
 800684e:	440a      	add	r2, r1
 8006850:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006854:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006858:	6113      	str	r3, [r2, #16]
 800685a:	e044      	b.n	80068e6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4413      	add	r3, r2
 8006866:	1e5a      	subs	r2, r3, #1
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	8afb      	ldrh	r3, [r7, #22]
 8006882:	04d9      	lsls	r1, r3, #19
 8006884:	4ba4      	ldr	r3, [pc, #656]	@ (8006b18 <USB_EPStartXfer+0x3cc>)
 8006886:	400b      	ands	r3, r1
 8006888:	69b9      	ldr	r1, [r7, #24]
 800688a:	0148      	lsls	r0, r1, #5
 800688c:	69f9      	ldr	r1, [r7, #28]
 800688e:	4401      	add	r1, r0
 8006890:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006894:	4313      	orrs	r3, r2
 8006896:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	791b      	ldrb	r3, [r3, #4]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d122      	bne.n	80068e6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ba:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80068be:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	8afb      	ldrh	r3, [r7, #22]
 80068d0:	075b      	lsls	r3, r3, #29
 80068d2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80068d6:	69b9      	ldr	r1, [r7, #24]
 80068d8:	0148      	lsls	r0, r1, #5
 80068da:	69f9      	ldr	r1, [r7, #28]
 80068dc:	4401      	add	r1, r0
 80068de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068e2:	4313      	orrs	r3, r2
 80068e4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f2:	691a      	ldr	r2, [r3, #16]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068fc:	69b9      	ldr	r1, [r7, #24]
 80068fe:	0148      	lsls	r0, r1, #5
 8006900:	69f9      	ldr	r1, [r7, #28]
 8006902:	4401      	add	r1, r0
 8006904:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006908:	4313      	orrs	r3, r2
 800690a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d14b      	bne.n	80069aa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006926:	461a      	mov	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	791b      	ldrb	r3, [r3, #4]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d128      	bne.n	8006988 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d110      	bne.n	8006968 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	69fa      	ldr	r2, [r7, #28]
 800695a:	440a      	add	r2, r1
 800695c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006960:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	e00f      	b.n	8006988 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	440a      	add	r2, r1
 800697e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006986:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	0151      	lsls	r1, r2, #5
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	440a      	add	r2, r1
 800699e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	e166      	b.n	8006c78 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069c8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	791b      	ldrb	r3, [r3, #4]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d015      	beq.n	80069fe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 814e 	beq.w	8006c78 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	2101      	movs	r1, #1
 80069ee:	fa01 f303 	lsl.w	r3, r1, r3
 80069f2:	69f9      	ldr	r1, [r7, #28]
 80069f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069f8:	4313      	orrs	r3, r2
 80069fa:	634b      	str	r3, [r1, #52]	@ 0x34
 80069fc:	e13c      	b.n	8006c78 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d110      	bne.n	8006a30 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	e00f      	b.n	8006a50 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a4e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	68d9      	ldr	r1, [r3, #12]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	781a      	ldrb	r2, [r3, #0]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	b298      	uxth	r0, r3
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	4603      	mov	r3, r0
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f9b9 	bl	8006ddc <USB_WritePacket>
 8006a6a:	e105      	b.n	8006c78 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a86:	0cdb      	lsrs	r3, r3, #19
 8006a88:	04db      	lsls	r3, r3, #19
 8006a8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	69fa      	ldr	r2, [r7, #28]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aa6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006aaa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006aae:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d132      	bne.n	8006b1c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae4:	69b9      	ldr	r1, [r7, #24]
 8006ae6:	0148      	lsls	r0, r1, #5
 8006ae8:	69f9      	ldr	r1, [r7, #28]
 8006aea:	4401      	add	r1, r0
 8006aec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006af0:	4313      	orrs	r3, r2
 8006af2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	0151      	lsls	r1, r2, #5
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	440a      	add	r2, r1
 8006b0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b12:	6113      	str	r3, [r2, #16]
 8006b14:	e062      	b.n	8006bdc <USB_EPStartXfer+0x490>
 8006b16:	bf00      	nop
 8006b18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d123      	bne.n	8006b6c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b3a:	69b9      	ldr	r1, [r7, #24]
 8006b3c:	0148      	lsls	r0, r1, #5
 8006b3e:	69f9      	ldr	r1, [r7, #28]
 8006b40:	4401      	add	r1, r0
 8006b42:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b46:	4313      	orrs	r3, r2
 8006b48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	0151      	lsls	r1, r2, #5
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	440a      	add	r2, r1
 8006b60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b68:	6113      	str	r3, [r2, #16]
 8006b6a:	e037      	b.n	8006bdc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	4413      	add	r3, r2
 8006b76:	1e5a      	subs	r2, r3, #1
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b80:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	8afa      	ldrh	r2, [r7, #22]
 8006b88:	fb03 f202 	mul.w	r2, r3, r2
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	8afb      	ldrh	r3, [r7, #22]
 8006ba0:	04d9      	lsls	r1, r3, #19
 8006ba2:	4b38      	ldr	r3, [pc, #224]	@ (8006c84 <USB_EPStartXfer+0x538>)
 8006ba4:	400b      	ands	r3, r1
 8006ba6:	69b9      	ldr	r1, [r7, #24]
 8006ba8:	0148      	lsls	r0, r1, #5
 8006baa:	69f9      	ldr	r1, [r7, #28]
 8006bac:	4401      	add	r1, r0
 8006bae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc2:	691a      	ldr	r2, [r3, #16]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bcc:	69b9      	ldr	r1, [r7, #24]
 8006bce:	0148      	lsls	r0, r1, #5
 8006bd0:	69f9      	ldr	r1, [r7, #28]
 8006bd2:	4401      	add	r1, r0
 8006bd4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d10d      	bne.n	8006bfe <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	68d9      	ldr	r1, [r3, #12]
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bfa:	460a      	mov	r2, r1
 8006bfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	791b      	ldrb	r3, [r3, #4]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d128      	bne.n	8006c58 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d110      	bne.n	8006c38 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	0151      	lsls	r1, r2, #5
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	440a      	add	r2, r1
 8006c2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e00f      	b.n	8006c58 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	69fa      	ldr	r2, [r7, #28]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c72:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3720      	adds	r7, #32
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	1ff80000 	.word	0x1ff80000

08006c88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d14a      	bne.n	8006d3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cbe:	f040 8086 	bne.w	8006dce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	7812      	ldrb	r2, [r2, #0]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ce0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ce4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	7812      	ldrb	r2, [r2, #0]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d902      	bls.n	8006d20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d1e:	e056      	b.n	8006dce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d38:	d0e7      	beq.n	8006d0a <USB_EPStopXfer+0x82>
 8006d3a:	e048      	b.n	8006dce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d54:	d13b      	bne.n	8006dce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	7812      	ldrb	r2, [r2, #0]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	7812      	ldrb	r2, [r2, #0]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3301      	adds	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d902      	bls.n	8006db4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	75fb      	strb	r3, [r7, #23]
          break;
 8006db2:	e00c      	b.n	8006dce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dcc:	d0e7      	beq.n	8006d9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	371c      	adds	r7, #28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b089      	sub	sp, #36	@ 0x24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4611      	mov	r1, r2
 8006de8:	461a      	mov	r2, r3
 8006dea:	460b      	mov	r3, r1
 8006dec:	71fb      	strb	r3, [r7, #7]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006dfa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d123      	bne.n	8006e4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e02:	88bb      	ldrh	r3, [r7, #4]
 8006e04:	3303      	adds	r3, #3
 8006e06:	089b      	lsrs	r3, r3, #2
 8006e08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	e018      	b.n	8006e42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	031a      	lsls	r2, r3, #12
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	3301      	adds	r3, #1
 8006e28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	3301      	adds	r3, #1
 8006e34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d3e2      	bcc.n	8006e10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3724      	adds	r7, #36	@ 0x24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b08b      	sub	sp, #44	@ 0x2c
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	4613      	mov	r3, r2
 8006e64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	089b      	lsrs	r3, r3, #2
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	f003 0303 	and.w	r3, r3, #3
 8006e7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e7e:	2300      	movs	r3, #0
 8006e80:	623b      	str	r3, [r7, #32]
 8006e82:	e014      	b.n	8006eae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	3301      	adds	r3, #1
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	3301      	adds	r3, #1
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	623b      	str	r3, [r7, #32]
 8006eae:	6a3a      	ldr	r2, [r7, #32]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d3e6      	bcc.n	8006e84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006eb6:	8bfb      	ldrh	r3, [r7, #30]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01e      	beq.n	8006efa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f107 0310 	add.w	r3, r7, #16
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	701a      	strb	r2, [r3, #0]
      i++;
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	3301      	adds	r3, #1
 8006eec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006eee:	8bfb      	ldrh	r3, [r7, #30]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ef4:	8bfb      	ldrh	r3, [r7, #30]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1ea      	bne.n	8006ed0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	372c      	adds	r7, #44	@ 0x2c
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d12c      	bne.n	8006f7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	db12      	blt.n	8006f5c <USB_EPSetStall+0x54>
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00f      	beq.n	8006f5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	0151      	lsls	r1, r2, #5
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	440a      	add	r2, r1
 8006f72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	e02b      	b.n	8006fd6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	db12      	blt.n	8006fb6 <USB_EPSetStall+0xae>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fb0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006fb4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006fd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	785b      	ldrb	r3, [r3, #1]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d128      	bne.n	8007052 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	0151      	lsls	r1, r2, #5
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	440a      	add	r2, r1
 8007016:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800701a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800701e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	791b      	ldrb	r3, [r3, #4]
 8007024:	2b03      	cmp	r3, #3
 8007026:	d003      	beq.n	8007030 <USB_EPClearStall+0x4c>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	791b      	ldrb	r3, [r3, #4]
 800702c:	2b02      	cmp	r3, #2
 800702e:	d138      	bne.n	80070a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	440a      	add	r2, r1
 8007046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800704a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	e027      	b.n	80070a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	0151      	lsls	r1, r2, #5
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	440a      	add	r2, r1
 8007068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800706c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007070:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	791b      	ldrb	r3, [r3, #4]
 8007076:	2b03      	cmp	r3, #3
 8007078:	d003      	beq.n	8007082 <USB_EPClearStall+0x9e>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	791b      	ldrb	r3, [r3, #4]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d10f      	bne.n	80070a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800709c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80070d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	011b      	lsls	r3, r3, #4
 80070e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070ea:	4313      	orrs	r3, r2
 80070ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800712a:	f023 0302 	bic.w	r3, r3, #2
 800712e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800716c:	f043 0302 	orr.w	r3, r3, #2
 8007170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4013      	ands	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007198:	68fb      	ldr	r3, [r7, #12]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	4013      	ands	r3, r2
 80071c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	0c1b      	lsrs	r3, r3, #16
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	4013      	ands	r3, r2
 80071fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	b29b      	uxth	r3, r3
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	4013      	ands	r3, r2
 800723a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800723c:	68bb      	ldr	r3, [r7, #8]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800724a:	b480      	push	{r7}
 800724c:	b087      	sub	sp, #28
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	460b      	mov	r3, r1
 8007254:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800726a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800726c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	f003 030f 	and.w	r3, r3, #15
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	fa22 f303 	lsr.w	r3, r2, r3
 800727a:	01db      	lsls	r3, r3, #7
 800727c:	b2db      	uxtb	r3, r3
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	4013      	ands	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007298:	68bb      	ldr	r3, [r7, #8]
}
 800729a:	4618      	mov	r0, r3
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	f003 0301 	and.w	r3, r3, #1
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80072e0:	f023 0307 	bic.w	r3, r3, #7
 80072e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	460b      	mov	r3, r1
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	333c      	adds	r3, #60	@ 0x3c
 800731e:	3304      	adds	r3, #4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	4a26      	ldr	r2, [pc, #152]	@ (80073c0 <USB_EP0_OutStart+0xb8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d90a      	bls.n	8007342 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007338:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800733c:	d101      	bne.n	8007342 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	e037      	b.n	80073b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007348:	461a      	mov	r2, r3
 800734a:	2300      	movs	r3, #0
 800734c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800735c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007360:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007370:	f043 0318 	orr.w	r3, r3, #24
 8007374:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007384:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007388:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800738a:	7afb      	ldrb	r3, [r7, #11]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d10f      	bne.n	80073b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80073ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	4f54300a 	.word	0x4f54300a

080073c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073dc:	d901      	bls.n	80073e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e022      	b.n	8007428 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	daf2      	bge.n	80073d0 <USB_CoreReset+0xc>

  count = 10U;
 80073ea:	230a      	movs	r3, #10
 80073ec:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80073ee:	e002      	b.n	80073f6 <USB_CoreReset+0x32>
  {
    count--;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1f9      	bne.n	80073f0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f043 0201 	orr.w	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3301      	adds	r3, #1
 800740c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007414:	d901      	bls.n	800741a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e006      	b.n	8007428 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b01      	cmp	r3, #1
 8007424:	d0f0      	beq.n	8007408 <USB_CoreReset+0x44>

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007440:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007444:	f002 fcbc 	bl	8009dc0 <USBD_static_malloc>
 8007448:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d109      	bne.n	8007464 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	32b0      	adds	r2, #176	@ 0xb0
 800745a:	2100      	movs	r1, #0
 800745c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007460:	2302      	movs	r3, #2
 8007462:	e0d4      	b.n	800760e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007464:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007468:	2100      	movs	r1, #0
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f003 fcad 	bl	800adca <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	32b0      	adds	r2, #176	@ 0xb0
 800747a:	68f9      	ldr	r1, [r7, #12]
 800747c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	32b0      	adds	r2, #176	@ 0xb0
 800748a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7c1b      	ldrb	r3, [r3, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d138      	bne.n	800750e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800749c:	4b5e      	ldr	r3, [pc, #376]	@ (8007618 <USBD_CDC_Init+0x1e4>)
 800749e:	7819      	ldrb	r1, [r3, #0]
 80074a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074a4:	2202      	movs	r2, #2
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f002 fb67 	bl	8009b7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80074ac:	4b5a      	ldr	r3, [pc, #360]	@ (8007618 <USBD_CDC_Init+0x1e4>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f003 020f 	and.w	r2, r3, #15
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	440b      	add	r3, r1
 80074c0:	3323      	adds	r3, #35	@ 0x23
 80074c2:	2201      	movs	r2, #1
 80074c4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074c6:	4b55      	ldr	r3, [pc, #340]	@ (800761c <USBD_CDC_Init+0x1e8>)
 80074c8:	7819      	ldrb	r1, [r3, #0]
 80074ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074ce:	2202      	movs	r2, #2
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f002 fb52 	bl	8009b7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074d6:	4b51      	ldr	r3, [pc, #324]	@ (800761c <USBD_CDC_Init+0x1e8>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	f003 020f 	and.w	r2, r3, #15
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80074ee:	2201      	movs	r2, #1
 80074f0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80074f2:	4b4b      	ldr	r3, [pc, #300]	@ (8007620 <USBD_CDC_Init+0x1ec>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	f003 020f 	and.w	r2, r3, #15
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	4613      	mov	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	440b      	add	r3, r1
 8007506:	331c      	adds	r3, #28
 8007508:	2210      	movs	r2, #16
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	e035      	b.n	800757a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800750e:	4b42      	ldr	r3, [pc, #264]	@ (8007618 <USBD_CDC_Init+0x1e4>)
 8007510:	7819      	ldrb	r1, [r3, #0]
 8007512:	2340      	movs	r3, #64	@ 0x40
 8007514:	2202      	movs	r2, #2
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f002 fb2f 	bl	8009b7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800751c:	4b3e      	ldr	r3, [pc, #248]	@ (8007618 <USBD_CDC_Init+0x1e4>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f003 020f 	and.w	r2, r3, #15
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	3323      	adds	r3, #35	@ 0x23
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007536:	4b39      	ldr	r3, [pc, #228]	@ (800761c <USBD_CDC_Init+0x1e8>)
 8007538:	7819      	ldrb	r1, [r3, #0]
 800753a:	2340      	movs	r3, #64	@ 0x40
 800753c:	2202      	movs	r2, #2
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f002 fb1b 	bl	8009b7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007544:	4b35      	ldr	r3, [pc, #212]	@ (800761c <USBD_CDC_Init+0x1e8>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 020f 	and.w	r2, r3, #15
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	440b      	add	r3, r1
 8007558:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800755c:	2201      	movs	r2, #1
 800755e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007560:	4b2f      	ldr	r3, [pc, #188]	@ (8007620 <USBD_CDC_Init+0x1ec>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	f003 020f 	and.w	r2, r3, #15
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	440b      	add	r3, r1
 8007574:	331c      	adds	r3, #28
 8007576:	2210      	movs	r2, #16
 8007578:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800757a:	4b29      	ldr	r3, [pc, #164]	@ (8007620 <USBD_CDC_Init+0x1ec>)
 800757c:	7819      	ldrb	r1, [r3, #0]
 800757e:	2308      	movs	r3, #8
 8007580:	2203      	movs	r2, #3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f002 faf9 	bl	8009b7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007588:	4b25      	ldr	r3, [pc, #148]	@ (8007620 <USBD_CDC_Init+0x1ec>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 020f 	and.w	r2, r3, #15
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	3323      	adds	r3, #35	@ 0x23
 800759e:	2201      	movs	r2, #1
 80075a0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	33b0      	adds	r3, #176	@ 0xb0
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80075d8:	2302      	movs	r3, #2
 80075da:	e018      	b.n	800760e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	7c1b      	ldrb	r3, [r3, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10a      	bne.n	80075fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075e4:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <USBD_CDC_Init+0x1e8>)
 80075e6:	7819      	ldrb	r1, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f002 fbb0 	bl	8009d58 <USBD_LL_PrepareReceive>
 80075f8:	e008      	b.n	800760c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075fa:	4b08      	ldr	r3, [pc, #32]	@ (800761c <USBD_CDC_Init+0x1e8>)
 80075fc:	7819      	ldrb	r1, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007604:	2340      	movs	r3, #64	@ 0x40
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f002 fba6 	bl	8009d58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000093 	.word	0x20000093
 800761c:	20000094 	.word	0x20000094
 8007620:	20000095 	.word	0x20000095

08007624 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007630:	4b3a      	ldr	r3, [pc, #232]	@ (800771c <USBD_CDC_DeInit+0xf8>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f002 fac5 	bl	8009bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800763c:	4b37      	ldr	r3, [pc, #220]	@ (800771c <USBD_CDC_DeInit+0xf8>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f003 020f 	and.w	r2, r3, #15
 8007644:	6879      	ldr	r1, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	440b      	add	r3, r1
 8007650:	3323      	adds	r3, #35	@ 0x23
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007656:	4b32      	ldr	r3, [pc, #200]	@ (8007720 <USBD_CDC_DeInit+0xfc>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f002 fab2 	bl	8009bc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007662:	4b2f      	ldr	r3, [pc, #188]	@ (8007720 <USBD_CDC_DeInit+0xfc>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	f003 020f 	and.w	r2, r3, #15
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800767a:	2200      	movs	r2, #0
 800767c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800767e:	4b29      	ldr	r3, [pc, #164]	@ (8007724 <USBD_CDC_DeInit+0x100>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f002 fa9e 	bl	8009bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800768a:	4b26      	ldr	r3, [pc, #152]	@ (8007724 <USBD_CDC_DeInit+0x100>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	f003 020f 	and.w	r2, r3, #15
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	3323      	adds	r3, #35	@ 0x23
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80076a4:	4b1f      	ldr	r3, [pc, #124]	@ (8007724 <USBD_CDC_DeInit+0x100>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	f003 020f 	and.w	r2, r3, #15
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	331c      	adds	r3, #28
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	32b0      	adds	r2, #176	@ 0xb0
 80076c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01f      	beq.n	8007710 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	33b0      	adds	r3, #176	@ 0xb0
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32b0      	adds	r2, #176	@ 0xb0
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f002 fb72 	bl	8009ddc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	32b0      	adds	r2, #176	@ 0xb0
 8007702:	2100      	movs	r1, #0
 8007704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20000093 	.word	0x20000093
 8007720:	20000094 	.word	0x20000094
 8007724:	20000095 	.word	0x20000095

08007728 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	32b0      	adds	r2, #176	@ 0xb0
 800773c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007740:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007754:	2303      	movs	r3, #3
 8007756:	e0bf      	b.n	80078d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007760:	2b00      	cmp	r3, #0
 8007762:	d050      	beq.n	8007806 <USBD_CDC_Setup+0xde>
 8007764:	2b20      	cmp	r3, #32
 8007766:	f040 80af 	bne.w	80078c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	88db      	ldrh	r3, [r3, #6]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d03a      	beq.n	80077e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	b25b      	sxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	da1b      	bge.n	80077b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	33b0      	adds	r3, #176	@ 0xb0
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007792:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	88d2      	ldrh	r2, [r2, #6]
 8007798:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	88db      	ldrh	r3, [r3, #6]
 800779e:	2b07      	cmp	r3, #7
 80077a0:	bf28      	it	cs
 80077a2:	2307      	movcs	r3, #7
 80077a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	89fa      	ldrh	r2, [r7, #14]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 fda9 	bl	8009304 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80077b2:	e090      	b.n	80078d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	785a      	ldrb	r2, [r3, #1]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	88db      	ldrh	r3, [r3, #6]
 80077c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80077c4:	d803      	bhi.n	80077ce <USBD_CDC_Setup+0xa6>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	88db      	ldrh	r3, [r3, #6]
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	e000      	b.n	80077d0 <USBD_CDC_Setup+0xa8>
 80077ce:	2240      	movs	r2, #64	@ 0x40
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80077d6:	6939      	ldr	r1, [r7, #16]
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80077de:	461a      	mov	r2, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 fdbe 	bl	8009362 <USBD_CtlPrepareRx>
      break;
 80077e6:	e076      	b.n	80078d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	33b0      	adds	r3, #176	@ 0xb0
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	7850      	ldrb	r0, [r2, #1]
 80077fe:	2200      	movs	r2, #0
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	4798      	blx	r3
      break;
 8007804:	e067      	b.n	80078d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	2b0b      	cmp	r3, #11
 800780c:	d851      	bhi.n	80078b2 <USBD_CDC_Setup+0x18a>
 800780e:	a201      	add	r2, pc, #4	@ (adr r2, 8007814 <USBD_CDC_Setup+0xec>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007845 	.word	0x08007845
 8007818:	080078c1 	.word	0x080078c1
 800781c:	080078b3 	.word	0x080078b3
 8007820:	080078b3 	.word	0x080078b3
 8007824:	080078b3 	.word	0x080078b3
 8007828:	080078b3 	.word	0x080078b3
 800782c:	080078b3 	.word	0x080078b3
 8007830:	080078b3 	.word	0x080078b3
 8007834:	080078b3 	.word	0x080078b3
 8007838:	080078b3 	.word	0x080078b3
 800783c:	0800786f 	.word	0x0800786f
 8007840:	08007899 	.word	0x08007899
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b03      	cmp	r3, #3
 800784e:	d107      	bne.n	8007860 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007850:	f107 030a 	add.w	r3, r7, #10
 8007854:	2202      	movs	r2, #2
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 fd53 	bl	8009304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800785e:	e032      	b.n	80078c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 fcd1 	bl	800920a <USBD_CtlError>
            ret = USBD_FAIL;
 8007868:	2303      	movs	r3, #3
 800786a:	75fb      	strb	r3, [r7, #23]
          break;
 800786c:	e02b      	b.n	80078c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b03      	cmp	r3, #3
 8007878:	d107      	bne.n	800788a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800787a:	f107 030d 	add.w	r3, r7, #13
 800787e:	2201      	movs	r2, #1
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 fd3e 	bl	8009304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007888:	e01d      	b.n	80078c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 fcbc 	bl	800920a <USBD_CtlError>
            ret = USBD_FAIL;
 8007892:	2303      	movs	r3, #3
 8007894:	75fb      	strb	r3, [r7, #23]
          break;
 8007896:	e016      	b.n	80078c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d00f      	beq.n	80078c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 fcaf 	bl	800920a <USBD_CtlError>
            ret = USBD_FAIL;
 80078ac:	2303      	movs	r3, #3
 80078ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078b0:	e008      	b.n	80078c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 fca8 	bl	800920a <USBD_CtlError>
          ret = USBD_FAIL;
 80078ba:	2303      	movs	r3, #3
 80078bc:	75fb      	strb	r3, [r7, #23]
          break;
 80078be:	e002      	b.n	80078c6 <USBD_CDC_Setup+0x19e>
          break;
 80078c0:	bf00      	nop
 80078c2:	e008      	b.n	80078d6 <USBD_CDC_Setup+0x1ae>
          break;
 80078c4:	bf00      	nop
      }
      break;
 80078c6:	e006      	b.n	80078d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 fc9d 	bl	800920a <USBD_CtlError>
      ret = USBD_FAIL;
 80078d0:	2303      	movs	r3, #3
 80078d2:	75fb      	strb	r3, [r7, #23]
      break;
 80078d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	32b0      	adds	r2, #176	@ 0xb0
 80078fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007906:	2303      	movs	r3, #3
 8007908:	e065      	b.n	80079d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	32b0      	adds	r2, #176	@ 0xb0
 8007914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007918:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	f003 020f 	and.w	r2, r3, #15
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	440b      	add	r3, r1
 800792c:	3314      	adds	r3, #20
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d02f      	beq.n	8007994 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	f003 020f 	and.w	r2, r3, #15
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	3314      	adds	r3, #20
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	78fb      	ldrb	r3, [r7, #3]
 800794c:	f003 010f 	and.w	r1, r3, #15
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	460b      	mov	r3, r1
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	440b      	add	r3, r1
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4403      	add	r3, r0
 800795c:	331c      	adds	r3, #28
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	fbb2 f1f3 	udiv	r1, r2, r3
 8007964:	fb01 f303 	mul.w	r3, r1, r3
 8007968:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800796a:	2b00      	cmp	r3, #0
 800796c:	d112      	bne.n	8007994 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	f003 020f 	and.w	r2, r3, #15
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	440b      	add	r3, r1
 8007980:	3314      	adds	r3, #20
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007986:	78f9      	ldrb	r1, [r7, #3]
 8007988:	2300      	movs	r3, #0
 800798a:	2200      	movs	r2, #0
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f002 f9c2 	bl	8009d16 <USBD_LL_Transmit>
 8007992:	e01f      	b.n	80079d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	33b0      	adds	r3, #176	@ 0xb0
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d010      	beq.n	80079d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	33b0      	adds	r3, #176	@ 0xb0
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	32b0      	adds	r2, #176	@ 0xb0
 80079f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	32b0      	adds	r2, #176	@ 0xb0
 8007a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e01a      	b.n	8007a46 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f002 f9c0 	bl	8009d9a <USBD_LL_GetRxDataSize>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	33b0      	adds	r3, #176	@ 0xb0
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007a40:	4611      	mov	r1, r2
 8007a42:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	32b0      	adds	r2, #176	@ 0xb0
 8007a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e024      	b.n	8007aba <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	33b0      	adds	r3, #176	@ 0xb0
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d019      	beq.n	8007ab8 <USBD_CDC_EP0_RxReady+0x6a>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007a8a:	2bff      	cmp	r3, #255	@ 0xff
 8007a8c:	d014      	beq.n	8007ab8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	33b0      	adds	r3, #176	@ 0xb0
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007aa6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007aae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	22ff      	movs	r2, #255	@ 0xff
 8007ab4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007acc:	2182      	movs	r1, #130	@ 0x82
 8007ace:	4818      	ldr	r0, [pc, #96]	@ (8007b30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ad0:	f000 fd62 	bl	8008598 <USBD_GetEpDesc>
 8007ad4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	4815      	ldr	r0, [pc, #84]	@ (8007b30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ada:	f000 fd5d 	bl	8008598 <USBD_GetEpDesc>
 8007ade:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ae0:	2181      	movs	r1, #129	@ 0x81
 8007ae2:	4813      	ldr	r0, [pc, #76]	@ (8007b30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ae4:	f000 fd58 	bl	8008598 <USBD_GetEpDesc>
 8007ae8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2210      	movs	r2, #16
 8007af4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d006      	beq.n	8007b0a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b04:	711a      	strb	r2, [r3, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d006      	beq.n	8007b1e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b18:	711a      	strb	r2, [r3, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2243      	movs	r2, #67	@ 0x43
 8007b22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b24:	4b02      	ldr	r3, [pc, #8]	@ (8007b30 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000050 	.word	0x20000050

08007b34 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b3c:	2182      	movs	r1, #130	@ 0x82
 8007b3e:	4818      	ldr	r0, [pc, #96]	@ (8007ba0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b40:	f000 fd2a 	bl	8008598 <USBD_GetEpDesc>
 8007b44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b46:	2101      	movs	r1, #1
 8007b48:	4815      	ldr	r0, [pc, #84]	@ (8007ba0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b4a:	f000 fd25 	bl	8008598 <USBD_GetEpDesc>
 8007b4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b50:	2181      	movs	r1, #129	@ 0x81
 8007b52:	4813      	ldr	r0, [pc, #76]	@ (8007ba0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b54:	f000 fd20 	bl	8008598 <USBD_GetEpDesc>
 8007b58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2210      	movs	r2, #16
 8007b64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d006      	beq.n	8007b7a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	711a      	strb	r2, [r3, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f042 0202 	orr.w	r2, r2, #2
 8007b78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d006      	beq.n	8007b8e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	711a      	strb	r2, [r3, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f042 0202 	orr.w	r2, r2, #2
 8007b8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2243      	movs	r2, #67	@ 0x43
 8007b92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b94:	4b02      	ldr	r3, [pc, #8]	@ (8007ba0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000050 	.word	0x20000050

08007ba4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bac:	2182      	movs	r1, #130	@ 0x82
 8007bae:	4818      	ldr	r0, [pc, #96]	@ (8007c10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007bb0:	f000 fcf2 	bl	8008598 <USBD_GetEpDesc>
 8007bb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	4815      	ldr	r0, [pc, #84]	@ (8007c10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007bba:	f000 fced 	bl	8008598 <USBD_GetEpDesc>
 8007bbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bc0:	2181      	movs	r1, #129	@ 0x81
 8007bc2:	4813      	ldr	r0, [pc, #76]	@ (8007c10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007bc4:	f000 fce8 	bl	8008598 <USBD_GetEpDesc>
 8007bc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2210      	movs	r2, #16
 8007bd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007be4:	711a      	strb	r2, [r3, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d006      	beq.n	8007bfe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bf8:	711a      	strb	r2, [r3, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2243      	movs	r2, #67	@ 0x43
 8007c02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c04:	4b02      	ldr	r3, [pc, #8]	@ (8007c10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000050 	.word	0x20000050

08007c14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	220a      	movs	r2, #10
 8007c20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c22:	4b03      	ldr	r3, [pc, #12]	@ (8007c30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	2000000c 	.word	0x2000000c

08007c34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e009      	b.n	8007c5c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	33b0      	adds	r3, #176	@ 0xb0
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	32b0      	adds	r2, #176	@ 0xb0
 8007c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c82:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e008      	b.n	8007ca0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	371c      	adds	r7, #28
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	32b0      	adds	r2, #176	@ 0xb0
 8007cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e004      	b.n	8007cda <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	32b0      	adds	r2, #176	@ 0xb0
 8007cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d00:	2301      	movs	r3, #1
 8007d02:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e025      	b.n	8007d5a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d11f      	bne.n	8007d58 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007d20:	4b10      	ldr	r3, [pc, #64]	@ (8007d64 <USBD_CDC_TransmitPacket+0x7c>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	f003 020f 	and.w	r2, r3, #15
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4403      	add	r3, r0
 8007d3a:	3314      	adds	r3, #20
 8007d3c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007d3e:	4b09      	ldr	r3, [pc, #36]	@ (8007d64 <USBD_CDC_TransmitPacket+0x7c>)
 8007d40:	7819      	ldrb	r1, [r3, #0]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 ffe1 	bl	8009d16 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000093 	.word	0x20000093

08007d68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	32b0      	adds	r2, #176	@ 0xb0
 8007d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	32b0      	adds	r2, #176	@ 0xb0
 8007d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e018      	b.n	8007dc8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7c1b      	ldrb	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10a      	bne.n	8007db4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd0 <USBD_CDC_ReceivePacket+0x68>)
 8007da0:	7819      	ldrb	r1, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 ffd3 	bl	8009d58 <USBD_LL_PrepareReceive>
 8007db2:	e008      	b.n	8007dc6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007db4:	4b06      	ldr	r3, [pc, #24]	@ (8007dd0 <USBD_CDC_ReceivePacket+0x68>)
 8007db6:	7819      	ldrb	r1, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007dbe:	2340      	movs	r3, #64	@ 0x40
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 ffc9 	bl	8009d58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000094 	.word	0x20000094

08007dd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e01f      	b.n	8007e2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	79fa      	ldrb	r2, [r7, #7]
 8007e1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f001 fe43 	bl	8009aac <USBD_LL_Init>
 8007e26:	4603      	mov	r3, r0
 8007e28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e025      	b.n	8007e98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32ae      	adds	r2, #174	@ 0xae
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00f      	beq.n	8007e88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	32ae      	adds	r2, #174	@ 0xae
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e78:	f107 020e 	add.w	r2, r7, #14
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	4798      	blx	r3
 8007e80:	4602      	mov	r2, r0
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 fe4b 	bl	8009b44 <USBD_LL_Start>
 8007eae:	4603      	mov	r3, r0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ec0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d009      	beq.n	8007efc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	78fa      	ldrb	r2, [r7, #3]
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	78fa      	ldrb	r2, [r7, #3]
 8007f20:	4611      	mov	r1, r2
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	4798      	blx	r3
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f001 f922 	bl	8009196 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007f60:	461a      	mov	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f6e:	f003 031f 	and.w	r3, r3, #31
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d01a      	beq.n	8007fac <USBD_LL_SetupStage+0x72>
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d822      	bhi.n	8007fc0 <USBD_LL_SetupStage+0x86>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <USBD_LL_SetupStage+0x4a>
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d00a      	beq.n	8007f98 <USBD_LL_SetupStage+0x5e>
 8007f82:	e01d      	b.n	8007fc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fb77 	bl	8008680 <USBD_StdDevReq>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]
      break;
 8007f96:	e020      	b.n	8007fda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fbdf 	bl	8008764 <USBD_StdItfReq>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8007faa:	e016      	b.n	8007fda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fc41 	bl	800883c <USBD_StdEPReq>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbe:	e00c      	b.n	8007fda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007fc6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 fe18 	bl	8009c04 <USBD_LL_StallEP>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd8:	bf00      	nop
  }

  return ret;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	460b      	mov	r3, r1
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007ff6:	7afb      	ldrb	r3, [r7, #11]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d177      	bne.n	80080ec <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008002:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800800a:	2b03      	cmp	r3, #3
 800800c:	f040 80a1 	bne.w	8008152 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	8992      	ldrh	r2, [r2, #12]
 8008018:	4293      	cmp	r3, r2
 800801a:	d91c      	bls.n	8008056 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	8992      	ldrh	r2, [r2, #12]
 8008024:	1a9a      	subs	r2, r3, r2
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	8992      	ldrh	r2, [r2, #12]
 8008032:	441a      	add	r2, r3
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6919      	ldr	r1, [r3, #16]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	899b      	ldrh	r3, [r3, #12]
 8008040:	461a      	mov	r2, r3
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	4293      	cmp	r3, r2
 8008048:	bf38      	it	cc
 800804a:	4613      	movcc	r3, r2
 800804c:	461a      	mov	r2, r3
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f001 f9a8 	bl	80093a4 <USBD_CtlContinueRx>
 8008054:	e07d      	b.n	8008152 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800805c:	f003 031f 	and.w	r3, r3, #31
 8008060:	2b02      	cmp	r3, #2
 8008062:	d014      	beq.n	800808e <USBD_LL_DataOutStage+0xaa>
 8008064:	2b02      	cmp	r3, #2
 8008066:	d81d      	bhi.n	80080a4 <USBD_LL_DataOutStage+0xc0>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <USBD_LL_DataOutStage+0x8e>
 800806c:	2b01      	cmp	r3, #1
 800806e:	d003      	beq.n	8008078 <USBD_LL_DataOutStage+0x94>
 8008070:	e018      	b.n	80080a4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	75bb      	strb	r3, [r7, #22]
            break;
 8008076:	e018      	b.n	80080aa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800807e:	b2db      	uxtb	r3, r3
 8008080:	4619      	mov	r1, r3
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fa6e 	bl	8008564 <USBD_CoreFindIF>
 8008088:	4603      	mov	r3, r0
 800808a:	75bb      	strb	r3, [r7, #22]
            break;
 800808c:	e00d      	b.n	80080aa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008094:	b2db      	uxtb	r3, r3
 8008096:	4619      	mov	r1, r3
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 fa70 	bl	800857e <USBD_CoreFindEP>
 800809e:	4603      	mov	r3, r0
 80080a0:	75bb      	strb	r3, [r7, #22]
            break;
 80080a2:	e002      	b.n	80080aa <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	75bb      	strb	r3, [r7, #22]
            break;
 80080a8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80080aa:	7dbb      	ldrb	r3, [r7, #22]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d119      	bne.n	80080e4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d113      	bne.n	80080e4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80080bc:	7dba      	ldrb	r2, [r7, #22]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	32ae      	adds	r2, #174	@ 0xae
 80080c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80080cc:	7dba      	ldrb	r2, [r7, #22]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80080d4:	7dba      	ldrb	r2, [r7, #22]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	32ae      	adds	r2, #174	@ 0xae
 80080da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f001 f96e 	bl	80093c6 <USBD_CtlSendStatus>
 80080ea:	e032      	b.n	8008152 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	4619      	mov	r1, r3
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fa41 	bl	800857e <USBD_CoreFindEP>
 80080fc:	4603      	mov	r3, r0
 80080fe:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008100:	7dbb      	ldrb	r3, [r7, #22]
 8008102:	2bff      	cmp	r3, #255	@ 0xff
 8008104:	d025      	beq.n	8008152 <USBD_LL_DataOutStage+0x16e>
 8008106:	7dbb      	ldrb	r3, [r7, #22]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d122      	bne.n	8008152 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b03      	cmp	r3, #3
 8008116:	d117      	bne.n	8008148 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008118:	7dba      	ldrb	r2, [r7, #22]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	32ae      	adds	r2, #174	@ 0xae
 800811e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00f      	beq.n	8008148 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008128:	7dba      	ldrb	r2, [r7, #22]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008130:	7dba      	ldrb	r2, [r7, #22]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	32ae      	adds	r2, #174	@ 0xae
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	7afa      	ldrb	r2, [r7, #11]
 800813e:	4611      	mov	r1, r2
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	4798      	blx	r3
 8008144:	4603      	mov	r3, r0
 8008146:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008148:	7dfb      	ldrb	r3, [r7, #23]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	e000      	b.n	8008154 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	460b      	mov	r3, r1
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800816a:	7afb      	ldrb	r3, [r7, #11]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d178      	bne.n	8008262 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3314      	adds	r3, #20
 8008174:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800817c:	2b02      	cmp	r3, #2
 800817e:	d163      	bne.n	8008248 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	8992      	ldrh	r2, [r2, #12]
 8008188:	4293      	cmp	r3, r2
 800818a:	d91c      	bls.n	80081c6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	8992      	ldrh	r2, [r2, #12]
 8008194:	1a9a      	subs	r2, r3, r2
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	8992      	ldrh	r2, [r2, #12]
 80081a2:	441a      	add	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	6919      	ldr	r1, [r3, #16]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	461a      	mov	r2, r3
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f001 f8c4 	bl	8009340 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081b8:	2300      	movs	r3, #0
 80081ba:	2200      	movs	r2, #0
 80081bc:	2100      	movs	r1, #0
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f001 fdca 	bl	8009d58 <USBD_LL_PrepareReceive>
 80081c4:	e040      	b.n	8008248 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	899b      	ldrh	r3, [r3, #12]
 80081ca:	461a      	mov	r2, r3
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d11c      	bne.n	800820e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081dc:	4293      	cmp	r3, r2
 80081de:	d316      	bcc.n	800820e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d20f      	bcs.n	800820e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081ee:	2200      	movs	r2, #0
 80081f0:	2100      	movs	r1, #0
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f001 f8a4 	bl	8009340 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008200:	2300      	movs	r3, #0
 8008202:	2200      	movs	r2, #0
 8008204:	2100      	movs	r1, #0
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f001 fda6 	bl	8009d58 <USBD_LL_PrepareReceive>
 800820c:	e01c      	b.n	8008248 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b03      	cmp	r3, #3
 8008218:	d10f      	bne.n	800823a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d009      	beq.n	800823a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800823a:	2180      	movs	r1, #128	@ 0x80
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f001 fce1 	bl	8009c04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f001 f8d2 	bl	80093ec <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d03a      	beq.n	80082c8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff fe30 	bl	8007eb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008260:	e032      	b.n	80082c8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008262:	7afb      	ldrb	r3, [r7, #11]
 8008264:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008268:	b2db      	uxtb	r3, r3
 800826a:	4619      	mov	r1, r3
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f986 	bl	800857e <USBD_CoreFindEP>
 8008272:	4603      	mov	r3, r0
 8008274:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	2bff      	cmp	r3, #255	@ 0xff
 800827a:	d025      	beq.n	80082c8 <USBD_LL_DataInStage+0x16c>
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d122      	bne.n	80082c8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b03      	cmp	r3, #3
 800828c:	d11c      	bne.n	80082c8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800828e:	7dfa      	ldrb	r2, [r7, #23]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	32ae      	adds	r2, #174	@ 0xae
 8008294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d014      	beq.n	80082c8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800829e:	7dfa      	ldrb	r2, [r7, #23]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80082a6:	7dfa      	ldrb	r2, [r7, #23]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	32ae      	adds	r2, #174	@ 0xae
 80082ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	7afa      	ldrb	r2, [r7, #11]
 80082b4:	4611      	mov	r1, r2
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	4798      	blx	r3
 80082ba:	4603      	mov	r3, r0
 80082bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80082be:	7dbb      	ldrb	r3, [r7, #22]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80082c4:	7dbb      	ldrb	r3, [r7, #22]
 80082c6:	e000      	b.n	80082ca <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800830a:	2b00      	cmp	r3, #0
 800830c:	d014      	beq.n	8008338 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00e      	beq.n	8008338 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6852      	ldr	r2, [r2, #4]
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	4611      	mov	r1, r2
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008334:	2303      	movs	r3, #3
 8008336:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008338:	2340      	movs	r3, #64	@ 0x40
 800833a:	2200      	movs	r2, #0
 800833c:	2100      	movs	r1, #0
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 fc1b 	bl	8009b7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2240      	movs	r2, #64	@ 0x40
 8008350:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008354:	2340      	movs	r3, #64	@ 0x40
 8008356:	2200      	movs	r2, #0
 8008358:	2180      	movs	r1, #128	@ 0x80
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 fc0d 	bl	8009b7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2240      	movs	r2, #64	@ 0x40
 800836c:	841a      	strh	r2, [r3, #32]

  return ret;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d006      	beq.n	80083ba <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2204      	movs	r2, #4
 80083be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d106      	bne.n	80083f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b03      	cmp	r3, #3
 8008412:	d110      	bne.n	8008436 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00b      	beq.n	8008436 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	32ae      	adds	r2, #174	@ 0xae
 8008456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800845e:	2303      	movs	r3, #3
 8008460:	e01c      	b.n	800849c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b03      	cmp	r3, #3
 800846c:	d115      	bne.n	800849a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	32ae      	adds	r2, #174	@ 0xae
 8008478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00b      	beq.n	800849a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	32ae      	adds	r2, #174	@ 0xae
 800848c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	78fa      	ldrb	r2, [r7, #3]
 8008494:	4611      	mov	r1, r2
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	32ae      	adds	r2, #174	@ 0xae
 80084ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e01c      	b.n	8008500 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d115      	bne.n	80084fe <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	32ae      	adds	r2, #174	@ 0xae
 80084dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00b      	beq.n	80084fe <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	32ae      	adds	r2, #174	@ 0xae
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	4611      	mov	r1, r2
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00e      	beq.n	800855a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	6852      	ldr	r2, [r2, #4]
 8008548:	b2d2      	uxtb	r2, r2
 800854a:	4611      	mov	r1, r2
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4798      	blx	r3
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008556:	2303      	movs	r3, #3
 8008558:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008570:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008572:	4618      	mov	r0, r3
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800858a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	885b      	ldrh	r3, [r3, #2]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	7812      	ldrb	r2, [r2, #0]
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d91f      	bls.n	80085fe <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80085c4:	e013      	b.n	80085ee <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80085c6:	f107 030a 	add.w	r3, r7, #10
 80085ca:	4619      	mov	r1, r3
 80085cc:	6978      	ldr	r0, [r7, #20]
 80085ce:	f000 f81b 	bl	8008608 <USBD_GetNextDesc>
 80085d2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	2b05      	cmp	r3, #5
 80085da:	d108      	bne.n	80085ee <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	789b      	ldrb	r3, [r3, #2]
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d008      	beq.n	80085fc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	885b      	ldrh	r3, [r3, #2]
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	897b      	ldrh	r3, [r7, #10]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d8e5      	bhi.n	80085c6 <USBD_GetEpDesc+0x2e>
 80085fa:	e000      	b.n	80085fe <USBD_GetEpDesc+0x66>
          break;
 80085fc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80085fe:	693b      	ldr	r3, [r7, #16]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	7812      	ldrb	r2, [r2, #0]
 800861e:	4413      	add	r3, r2
 8008620:	b29a      	uxth	r2, r3
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4413      	add	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008632:	68fb      	ldr	r3, [r7, #12]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	3301      	adds	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800865e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	b21a      	sxth	r2, r3
 8008666:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800866a:	4313      	orrs	r3, r2
 800866c:	b21b      	sxth	r3, r3
 800866e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008670:	89fb      	ldrh	r3, [r7, #14]
}
 8008672:	4618      	mov	r0, r3
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
	...

08008680 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008696:	2b40      	cmp	r3, #64	@ 0x40
 8008698:	d005      	beq.n	80086a6 <USBD_StdDevReq+0x26>
 800869a:	2b40      	cmp	r3, #64	@ 0x40
 800869c:	d857      	bhi.n	800874e <USBD_StdDevReq+0xce>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00f      	beq.n	80086c2 <USBD_StdDevReq+0x42>
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d153      	bne.n	800874e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	32ae      	adds	r2, #174	@ 0xae
 80086b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	4798      	blx	r3
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
      break;
 80086c0:	e04a      	b.n	8008758 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	785b      	ldrb	r3, [r3, #1]
 80086c6:	2b09      	cmp	r3, #9
 80086c8:	d83b      	bhi.n	8008742 <USBD_StdDevReq+0xc2>
 80086ca:	a201      	add	r2, pc, #4	@ (adr r2, 80086d0 <USBD_StdDevReq+0x50>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	08008725 	.word	0x08008725
 80086d4:	08008739 	.word	0x08008739
 80086d8:	08008743 	.word	0x08008743
 80086dc:	0800872f 	.word	0x0800872f
 80086e0:	08008743 	.word	0x08008743
 80086e4:	08008703 	.word	0x08008703
 80086e8:	080086f9 	.word	0x080086f9
 80086ec:	08008743 	.word	0x08008743
 80086f0:	0800871b 	.word	0x0800871b
 80086f4:	0800870d 	.word	0x0800870d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa3e 	bl	8008b7c <USBD_GetDescriptor>
          break;
 8008700:	e024      	b.n	800874c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fba3 	bl	8008e50 <USBD_SetAddress>
          break;
 800870a:	e01f      	b.n	800874c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fbe2 	bl	8008ed8 <USBD_SetConfig>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]
          break;
 8008718:	e018      	b.n	800874c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fc85 	bl	800902c <USBD_GetConfig>
          break;
 8008722:	e013      	b.n	800874c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fcb6 	bl	8009098 <USBD_GetStatus>
          break;
 800872c:	e00e      	b.n	800874c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fce5 	bl	8009100 <USBD_SetFeature>
          break;
 8008736:	e009      	b.n	800874c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fd09 	bl	8009152 <USBD_ClrFeature>
          break;
 8008740:	e004      	b.n	800874c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fd60 	bl	800920a <USBD_CtlError>
          break;
 800874a:	bf00      	nop
      }
      break;
 800874c:	e004      	b.n	8008758 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fd5a 	bl	800920a <USBD_CtlError>
      break;
 8008756:	bf00      	nop
  }

  return ret;
 8008758:	7bfb      	ldrb	r3, [r7, #15]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop

08008764 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800877a:	2b40      	cmp	r3, #64	@ 0x40
 800877c:	d005      	beq.n	800878a <USBD_StdItfReq+0x26>
 800877e:	2b40      	cmp	r3, #64	@ 0x40
 8008780:	d852      	bhi.n	8008828 <USBD_StdItfReq+0xc4>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <USBD_StdItfReq+0x26>
 8008786:	2b20      	cmp	r3, #32
 8008788:	d14e      	bne.n	8008828 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008790:	b2db      	uxtb	r3, r3
 8008792:	3b01      	subs	r3, #1
 8008794:	2b02      	cmp	r3, #2
 8008796:	d840      	bhi.n	800881a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	889b      	ldrh	r3, [r3, #4]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d836      	bhi.n	8008810 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	889b      	ldrh	r3, [r3, #4]
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff feda 	bl	8008564 <USBD_CoreFindIF>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2bff      	cmp	r3, #255	@ 0xff
 80087b8:	d01d      	beq.n	80087f6 <USBD_StdItfReq+0x92>
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d11a      	bne.n	80087f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80087c0:	7bba      	ldrb	r2, [r7, #14]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	32ae      	adds	r2, #174	@ 0xae
 80087c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00f      	beq.n	80087f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80087d0:	7bba      	ldrb	r2, [r7, #14]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80087d8:	7bba      	ldrb	r2, [r7, #14]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	32ae      	adds	r2, #174	@ 0xae
 80087de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	4798      	blx	r3
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80087ee:	e004      	b.n	80087fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80087f0:	2303      	movs	r3, #3
 80087f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80087f4:	e001      	b.n	80087fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80087f6:	2303      	movs	r3, #3
 80087f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	88db      	ldrh	r3, [r3, #6]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d110      	bne.n	8008824 <USBD_StdItfReq+0xc0>
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10d      	bne.n	8008824 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fddc 	bl	80093c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800880e:	e009      	b.n	8008824 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fcf9 	bl	800920a <USBD_CtlError>
          break;
 8008818:	e004      	b.n	8008824 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fcf4 	bl	800920a <USBD_CtlError>
          break;
 8008822:	e000      	b.n	8008826 <USBD_StdItfReq+0xc2>
          break;
 8008824:	bf00      	nop
      }
      break;
 8008826:	e004      	b.n	8008832 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fced 	bl	800920a <USBD_CtlError>
      break;
 8008830:	bf00      	nop
  }

  return ret;
 8008832:	7bfb      	ldrb	r3, [r7, #15]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	889b      	ldrh	r3, [r3, #4]
 800884e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008858:	2b40      	cmp	r3, #64	@ 0x40
 800885a:	d007      	beq.n	800886c <USBD_StdEPReq+0x30>
 800885c:	2b40      	cmp	r3, #64	@ 0x40
 800885e:	f200 8181 	bhi.w	8008b64 <USBD_StdEPReq+0x328>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d02a      	beq.n	80088bc <USBD_StdEPReq+0x80>
 8008866:	2b20      	cmp	r3, #32
 8008868:	f040 817c 	bne.w	8008b64 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fe84 	bl	800857e <USBD_CoreFindEP>
 8008876:	4603      	mov	r3, r0
 8008878:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800887a:	7b7b      	ldrb	r3, [r7, #13]
 800887c:	2bff      	cmp	r3, #255	@ 0xff
 800887e:	f000 8176 	beq.w	8008b6e <USBD_StdEPReq+0x332>
 8008882:	7b7b      	ldrb	r3, [r7, #13]
 8008884:	2b00      	cmp	r3, #0
 8008886:	f040 8172 	bne.w	8008b6e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800888a:	7b7a      	ldrb	r2, [r7, #13]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008892:	7b7a      	ldrb	r2, [r7, #13]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	32ae      	adds	r2, #174	@ 0xae
 8008898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 8165 	beq.w	8008b6e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80088a4:	7b7a      	ldrb	r2, [r7, #13]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	32ae      	adds	r2, #174	@ 0xae
 80088aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	4798      	blx	r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80088ba:	e158      	b.n	8008b6e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d008      	beq.n	80088d6 <USBD_StdEPReq+0x9a>
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	f300 8147 	bgt.w	8008b58 <USBD_StdEPReq+0x31c>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 809b 	beq.w	8008a06 <USBD_StdEPReq+0x1ca>
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d03c      	beq.n	800894e <USBD_StdEPReq+0x112>
 80088d4:	e140      	b.n	8008b58 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d002      	beq.n	80088e8 <USBD_StdEPReq+0xac>
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d016      	beq.n	8008914 <USBD_StdEPReq+0xd8>
 80088e6:	e02c      	b.n	8008942 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00d      	beq.n	800890a <USBD_StdEPReq+0xce>
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	2b80      	cmp	r3, #128	@ 0x80
 80088f2:	d00a      	beq.n	800890a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 f983 	bl	8009c04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088fe:	2180      	movs	r1, #128	@ 0x80
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f97f 	bl	8009c04 <USBD_LL_StallEP>
 8008906:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008908:	e020      	b.n	800894c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fc7c 	bl	800920a <USBD_CtlError>
              break;
 8008912:	e01b      	b.n	800894c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	885b      	ldrh	r3, [r3, #2]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10e      	bne.n	800893a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00b      	beq.n	800893a <USBD_StdEPReq+0xfe>
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b80      	cmp	r3, #128	@ 0x80
 8008926:	d008      	beq.n	800893a <USBD_StdEPReq+0xfe>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	88db      	ldrh	r3, [r3, #6]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f001 f965 	bl	8009c04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fd43 	bl	80093c6 <USBD_CtlSendStatus>

              break;
 8008940:	e004      	b.n	800894c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fc60 	bl	800920a <USBD_CtlError>
              break;
 800894a:	bf00      	nop
          }
          break;
 800894c:	e109      	b.n	8008b62 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d002      	beq.n	8008960 <USBD_StdEPReq+0x124>
 800895a:	2b03      	cmp	r3, #3
 800895c:	d016      	beq.n	800898c <USBD_StdEPReq+0x150>
 800895e:	e04b      	b.n	80089f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00d      	beq.n	8008982 <USBD_StdEPReq+0x146>
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b80      	cmp	r3, #128	@ 0x80
 800896a:	d00a      	beq.n	8008982 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f947 	bl	8009c04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008976:	2180      	movs	r1, #128	@ 0x80
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 f943 	bl	8009c04 <USBD_LL_StallEP>
 800897e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008980:	e040      	b.n	8008a04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fc40 	bl	800920a <USBD_CtlError>
              break;
 800898a:	e03b      	b.n	8008a04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	885b      	ldrh	r3, [r3, #2]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d136      	bne.n	8008a02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800899a:	2b00      	cmp	r3, #0
 800899c:	d004      	beq.n	80089a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 f94d 	bl	8009c42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fd0c 	bl	80093c6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7ff fde3 	bl	800857e <USBD_CoreFindEP>
 80089b8:	4603      	mov	r3, r0
 80089ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089bc:	7b7b      	ldrb	r3, [r7, #13]
 80089be:	2bff      	cmp	r3, #255	@ 0xff
 80089c0:	d01f      	beq.n	8008a02 <USBD_StdEPReq+0x1c6>
 80089c2:	7b7b      	ldrb	r3, [r7, #13]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d11c      	bne.n	8008a02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80089c8:	7b7a      	ldrb	r2, [r7, #13]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80089d0:	7b7a      	ldrb	r2, [r7, #13]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	32ae      	adds	r2, #174	@ 0xae
 80089d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d010      	beq.n	8008a02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80089e0:	7b7a      	ldrb	r2, [r7, #13]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	32ae      	adds	r2, #174	@ 0xae
 80089e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80089f6:	e004      	b.n	8008a02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fc05 	bl	800920a <USBD_CtlError>
              break;
 8008a00:	e000      	b.n	8008a04 <USBD_StdEPReq+0x1c8>
              break;
 8008a02:	bf00      	nop
          }
          break;
 8008a04:	e0ad      	b.n	8008b62 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d002      	beq.n	8008a18 <USBD_StdEPReq+0x1dc>
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d033      	beq.n	8008a7e <USBD_StdEPReq+0x242>
 8008a16:	e099      	b.n	8008b4c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d007      	beq.n	8008a2e <USBD_StdEPReq+0x1f2>
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	2b80      	cmp	r3, #128	@ 0x80
 8008a22:	d004      	beq.n	8008a2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fbef 	bl	800920a <USBD_CtlError>
                break;
 8008a2c:	e093      	b.n	8008b56 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	da0b      	bge.n	8008a4e <USBD_StdEPReq+0x212>
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	3310      	adds	r3, #16
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	4413      	add	r3, r2
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	e00b      	b.n	8008a66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a54:	4613      	mov	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	4413      	add	r3, r2
 8008a64:	3304      	adds	r3, #4
 8008a66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	330e      	adds	r3, #14
 8008a72:	2202      	movs	r2, #2
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fc44 	bl	8009304 <USBD_CtlSendData>
              break;
 8008a7c:	e06b      	b.n	8008b56 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	da11      	bge.n	8008aaa <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	f003 020f 	and.w	r2, r3, #15
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	440b      	add	r3, r1
 8008a98:	3323      	adds	r3, #35	@ 0x23
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d117      	bne.n	8008ad0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fbb1 	bl	800920a <USBD_CtlError>
                  break;
 8008aa8:	e055      	b.n	8008b56 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	f003 020f 	and.w	r2, r3, #15
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d104      	bne.n	8008ad0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fb9e 	bl	800920a <USBD_CtlError>
                  break;
 8008ace:	e042      	b.n	8008b56 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da0b      	bge.n	8008af0 <USBD_StdEPReq+0x2b4>
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	3310      	adds	r3, #16
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	4413      	add	r3, r2
 8008aec:	3304      	adds	r3, #4
 8008aee:	e00b      	b.n	8008b08 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	4413      	add	r3, r2
 8008b06:	3304      	adds	r3, #4
 8008b08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <USBD_StdEPReq+0x2da>
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	2b80      	cmp	r3, #128	@ 0x80
 8008b14:	d103      	bne.n	8008b1e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	739a      	strb	r2, [r3, #14]
 8008b1c:	e00e      	b.n	8008b3c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 f8ac 	bl	8009c80 <USBD_LL_IsStallEP>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2201      	movs	r2, #1
 8008b32:	739a      	strb	r2, [r3, #14]
 8008b34:	e002      	b.n	8008b3c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	330e      	adds	r3, #14
 8008b40:	2202      	movs	r2, #2
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fbdd 	bl	8009304 <USBD_CtlSendData>
              break;
 8008b4a:	e004      	b.n	8008b56 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fb5b 	bl	800920a <USBD_CtlError>
              break;
 8008b54:	bf00      	nop
          }
          break;
 8008b56:	e004      	b.n	8008b62 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fb55 	bl	800920a <USBD_CtlError>
          break;
 8008b60:	bf00      	nop
      }
      break;
 8008b62:	e005      	b.n	8008b70 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fb4f 	bl	800920a <USBD_CtlError>
      break;
 8008b6c:	e000      	b.n	8008b70 <USBD_StdEPReq+0x334>
      break;
 8008b6e:	bf00      	nop
  }

  return ret;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	885b      	ldrh	r3, [r3, #2]
 8008b96:	0a1b      	lsrs	r3, r3, #8
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	2b06      	cmp	r3, #6
 8008b9e:	f200 8128 	bhi.w	8008df2 <USBD_GetDescriptor+0x276>
 8008ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba8 <USBD_GetDescriptor+0x2c>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bc5 	.word	0x08008bc5
 8008bac:	08008bdd 	.word	0x08008bdd
 8008bb0:	08008c1d 	.word	0x08008c1d
 8008bb4:	08008df3 	.word	0x08008df3
 8008bb8:	08008df3 	.word	0x08008df3
 8008bbc:	08008d93 	.word	0x08008d93
 8008bc0:	08008dbf 	.word	0x08008dbf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	7c12      	ldrb	r2, [r2, #16]
 8008bd0:	f107 0108 	add.w	r1, r7, #8
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
 8008bd8:	60f8      	str	r0, [r7, #12]
      break;
 8008bda:	e112      	b.n	8008e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7c1b      	ldrb	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10d      	bne.n	8008c00 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bec:	f107 0208 	add.w	r2, r7, #8
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4798      	blx	r3
 8008bf4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bfe:	e100      	b.n	8008e02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c08:	f107 0208 	add.w	r2, r7, #8
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
 8008c10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3301      	adds	r3, #1
 8008c16:	2202      	movs	r2, #2
 8008c18:	701a      	strb	r2, [r3, #0]
      break;
 8008c1a:	e0f2      	b.n	8008e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	885b      	ldrh	r3, [r3, #2]
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b05      	cmp	r3, #5
 8008c24:	f200 80ac 	bhi.w	8008d80 <USBD_GetDescriptor+0x204>
 8008c28:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <USBD_GetDescriptor+0xb4>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c49 	.word	0x08008c49
 8008c34:	08008c7d 	.word	0x08008c7d
 8008c38:	08008cb1 	.word	0x08008cb1
 8008c3c:	08008ce5 	.word	0x08008ce5
 8008c40:	08008d19 	.word	0x08008d19
 8008c44:	08008d4d 	.word	0x08008d4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	7c12      	ldrb	r2, [r2, #16]
 8008c60:	f107 0108 	add.w	r1, r7, #8
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
 8008c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c6a:	e091      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 facb 	bl	800920a <USBD_CtlError>
            err++;
 8008c74:	7afb      	ldrb	r3, [r7, #11]
 8008c76:	3301      	adds	r3, #1
 8008c78:	72fb      	strb	r3, [r7, #11]
          break;
 8008c7a:	e089      	b.n	8008d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7c12      	ldrb	r2, [r2, #16]
 8008c94:	f107 0108 	add.w	r1, r7, #8
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3
 8008c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c9e:	e077      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fab1 	bl	800920a <USBD_CtlError>
            err++;
 8008ca8:	7afb      	ldrb	r3, [r7, #11]
 8008caa:	3301      	adds	r3, #1
 8008cac:	72fb      	strb	r3, [r7, #11]
          break;
 8008cae:	e06f      	b.n	8008d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00b      	beq.n	8008cd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7c12      	ldrb	r2, [r2, #16]
 8008cc8:	f107 0108 	add.w	r1, r7, #8
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cd2:	e05d      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa97 	bl	800920a <USBD_CtlError>
            err++;
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ce2:	e055      	b.n	8008d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	7c12      	ldrb	r2, [r2, #16]
 8008cfc:	f107 0108 	add.w	r1, r7, #8
 8008d00:	4610      	mov	r0, r2
 8008d02:	4798      	blx	r3
 8008d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d06:	e043      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fa7d 	bl	800920a <USBD_CtlError>
            err++;
 8008d10:	7afb      	ldrb	r3, [r7, #11]
 8008d12:	3301      	adds	r3, #1
 8008d14:	72fb      	strb	r3, [r7, #11]
          break;
 8008d16:	e03b      	b.n	8008d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	7c12      	ldrb	r2, [r2, #16]
 8008d30:	f107 0108 	add.w	r1, r7, #8
 8008d34:	4610      	mov	r0, r2
 8008d36:	4798      	blx	r3
 8008d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d3a:	e029      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa63 	bl	800920a <USBD_CtlError>
            err++;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	3301      	adds	r3, #1
 8008d48:	72fb      	strb	r3, [r7, #11]
          break;
 8008d4a:	e021      	b.n	8008d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	7c12      	ldrb	r2, [r2, #16]
 8008d64:	f107 0108 	add.w	r1, r7, #8
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4798      	blx	r3
 8008d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d6e:	e00f      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fa49 	bl	800920a <USBD_CtlError>
            err++;
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d7e:	e007      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fa41 	bl	800920a <USBD_CtlError>
          err++;
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008d8e:	bf00      	nop
      }
      break;
 8008d90:	e037      	b.n	8008e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	7c1b      	ldrb	r3, [r3, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d109      	bne.n	8008dae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008da2:	f107 0208 	add.w	r2, r7, #8
 8008da6:	4610      	mov	r0, r2
 8008da8:	4798      	blx	r3
 8008daa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dac:	e029      	b.n	8008e02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fa2a 	bl	800920a <USBD_CtlError>
        err++;
 8008db6:	7afb      	ldrb	r3, [r7, #11]
 8008db8:	3301      	adds	r3, #1
 8008dba:	72fb      	strb	r3, [r7, #11]
      break;
 8008dbc:	e021      	b.n	8008e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	7c1b      	ldrb	r3, [r3, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10d      	bne.n	8008de2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dce:	f107 0208 	add.w	r2, r7, #8
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4798      	blx	r3
 8008dd6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	2207      	movs	r2, #7
 8008dde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008de0:	e00f      	b.n	8008e02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fa10 	bl	800920a <USBD_CtlError>
        err++;
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	3301      	adds	r3, #1
 8008dee:	72fb      	strb	r3, [r7, #11]
      break;
 8008df0:	e007      	b.n	8008e02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fa08 	bl	800920a <USBD_CtlError>
      err++;
 8008dfa:	7afb      	ldrb	r3, [r7, #11]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	72fb      	strb	r3, [r7, #11]
      break;
 8008e00:	bf00      	nop
  }

  if (err != 0U)
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11e      	bne.n	8008e46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	88db      	ldrh	r3, [r3, #6]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d016      	beq.n	8008e3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008e10:	893b      	ldrh	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00e      	beq.n	8008e34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	88da      	ldrh	r2, [r3, #6]
 8008e1a:	893b      	ldrh	r3, [r7, #8]
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	bf28      	it	cs
 8008e20:	4613      	movcs	r3, r2
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e26:	893b      	ldrh	r3, [r7, #8]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	68f9      	ldr	r1, [r7, #12]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fa69 	bl	8009304 <USBD_CtlSendData>
 8008e32:	e009      	b.n	8008e48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f9e7 	bl	800920a <USBD_CtlError>
 8008e3c:	e004      	b.n	8008e48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fac1 	bl	80093c6 <USBD_CtlSendStatus>
 8008e44:	e000      	b.n	8008e48 <USBD_GetDescriptor+0x2cc>
    return;
 8008e46:	bf00      	nop
  }
}
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop

08008e50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	889b      	ldrh	r3, [r3, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d131      	bne.n	8008ec6 <USBD_SetAddress+0x76>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	88db      	ldrh	r3, [r3, #6]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d12d      	bne.n	8008ec6 <USBD_SetAddress+0x76>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e70:	d829      	bhi.n	8008ec6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	885b      	ldrh	r3, [r3, #2]
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d104      	bne.n	8008e94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f9bc 	bl	800920a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e92:	e01d      	b.n	8008ed0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7bfa      	ldrb	r2, [r7, #15]
 8008e98:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 ff19 	bl	8009cd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa8d 	bl	80093c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d004      	beq.n	8008ebc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eba:	e009      	b.n	8008ed0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec4:	e004      	b.n	8008ed0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f99e 	bl	800920a <USBD_CtlError>
  }
}
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	885b      	ldrh	r3, [r3, #2]
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	4b4e      	ldr	r3, [pc, #312]	@ (8009028 <USBD_SetConfig+0x150>)
 8008eee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8009028 <USBD_SetConfig+0x150>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d905      	bls.n	8008f04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f985 	bl	800920a <USBD_CtlError>
    return USBD_FAIL;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e08c      	b.n	800901e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d002      	beq.n	8008f16 <USBD_SetConfig+0x3e>
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d029      	beq.n	8008f68 <USBD_SetConfig+0x90>
 8008f14:	e075      	b.n	8009002 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f16:	4b44      	ldr	r3, [pc, #272]	@ (8009028 <USBD_SetConfig+0x150>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d020      	beq.n	8008f60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008f1e:	4b42      	ldr	r3, [pc, #264]	@ (8009028 <USBD_SetConfig+0x150>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f28:	4b3f      	ldr	r3, [pc, #252]	@ (8009028 <USBD_SetConfig+0x150>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7fe ffcd 	bl	8007ece <USBD_SetClassConfig>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d008      	beq.n	8008f50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f962 	bl	800920a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f4e:	e065      	b.n	800901c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fa38 	bl	80093c6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f5e:	e05d      	b.n	800901c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fa30 	bl	80093c6 <USBD_CtlSendStatus>
      break;
 8008f66:	e059      	b.n	800901c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f68:	4b2f      	ldr	r3, [pc, #188]	@ (8009028 <USBD_SetConfig+0x150>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d112      	bne.n	8008f96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2202      	movs	r2, #2
 8008f74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008f78:	4b2b      	ldr	r3, [pc, #172]	@ (8009028 <USBD_SetConfig+0x150>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f82:	4b29      	ldr	r3, [pc, #164]	@ (8009028 <USBD_SetConfig+0x150>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7fe ffbc 	bl	8007f06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fa19 	bl	80093c6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f94:	e042      	b.n	800901c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008f96:	4b24      	ldr	r3, [pc, #144]	@ (8009028 <USBD_SetConfig+0x150>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d02a      	beq.n	8008ffa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7fe ffaa 	bl	8007f06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8009028 <USBD_SetConfig+0x150>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009028 <USBD_SetConfig+0x150>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fe ff83 	bl	8007ece <USBD_SetClassConfig>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00f      	beq.n	8008ff2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f918 	bl	800920a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7fe ff8f 	bl	8007f06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ff0:	e014      	b.n	800901c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f9e7 	bl	80093c6 <USBD_CtlSendStatus>
      break;
 8008ff8:	e010      	b.n	800901c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f9e3 	bl	80093c6 <USBD_CtlSendStatus>
      break;
 8009000:	e00c      	b.n	800901c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f900 	bl	800920a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800900a:	4b07      	ldr	r3, [pc, #28]	@ (8009028 <USBD_SetConfig+0x150>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7fe ff78 	bl	8007f06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009016:	2303      	movs	r3, #3
 8009018:	73fb      	strb	r3, [r7, #15]
      break;
 800901a:	bf00      	nop
  }

  return ret;
 800901c:	7bfb      	ldrb	r3, [r7, #15]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000488 	.word	0x20000488

0800902c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	88db      	ldrh	r3, [r3, #6]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d004      	beq.n	8009048 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f8e2 	bl	800920a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009046:	e023      	b.n	8009090 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	dc02      	bgt.n	800905a <USBD_GetConfig+0x2e>
 8009054:	2b00      	cmp	r3, #0
 8009056:	dc03      	bgt.n	8009060 <USBD_GetConfig+0x34>
 8009058:	e015      	b.n	8009086 <USBD_GetConfig+0x5a>
 800905a:	2b03      	cmp	r3, #3
 800905c:	d00b      	beq.n	8009076 <USBD_GetConfig+0x4a>
 800905e:	e012      	b.n	8009086 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3308      	adds	r3, #8
 800906a:	2201      	movs	r2, #1
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f948 	bl	8009304 <USBD_CtlSendData>
        break;
 8009074:	e00c      	b.n	8009090 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3304      	adds	r3, #4
 800907a:	2201      	movs	r2, #1
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f940 	bl	8009304 <USBD_CtlSendData>
        break;
 8009084:	e004      	b.n	8009090 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8be 	bl	800920a <USBD_CtlError>
        break;
 800908e:	bf00      	nop
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d81e      	bhi.n	80090ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	88db      	ldrh	r3, [r3, #6]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d004      	beq.n	80090c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f8a5 	bl	800920a <USBD_CtlError>
        break;
 80090c0:	e01a      	b.n	80090f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f043 0202 	orr.w	r2, r3, #2
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	330c      	adds	r3, #12
 80090e2:	2202      	movs	r2, #2
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f90c 	bl	8009304 <USBD_CtlSendData>
      break;
 80090ec:	e004      	b.n	80090f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f88a 	bl	800920a <USBD_CtlError>
      break;
 80090f6:	bf00      	nop
  }
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	885b      	ldrh	r3, [r3, #2]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d107      	bne.n	8009122 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f953 	bl	80093c6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009120:	e013      	b.n	800914a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	885b      	ldrh	r3, [r3, #2]
 8009126:	2b02      	cmp	r3, #2
 8009128:	d10b      	bne.n	8009142 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	889b      	ldrh	r3, [r3, #4]
 800912e:	0a1b      	lsrs	r3, r3, #8
 8009130:	b29b      	uxth	r3, r3
 8009132:	b2da      	uxtb	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f943 	bl	80093c6 <USBD_CtlSendStatus>
}
 8009140:	e003      	b.n	800914a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f860 	bl	800920a <USBD_CtlError>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009162:	b2db      	uxtb	r3, r3
 8009164:	3b01      	subs	r3, #1
 8009166:	2b02      	cmp	r3, #2
 8009168:	d80b      	bhi.n	8009182 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	885b      	ldrh	r3, [r3, #2]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d10c      	bne.n	800918c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f923 	bl	80093c6 <USBD_CtlSendStatus>
      }
      break;
 8009180:	e004      	b.n	800918c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f840 	bl	800920a <USBD_CtlError>
      break;
 800918a:	e000      	b.n	800918e <USBD_ClrFeature+0x3c>
      break;
 800918c:	bf00      	nop
  }
}
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	781a      	ldrb	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3301      	adds	r3, #1
 80091b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	781a      	ldrb	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3301      	adds	r3, #1
 80091be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff fa3d 	bl	8008640 <SWAPBYTE>
 80091c6:	4603      	mov	r3, r0
 80091c8:	461a      	mov	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3301      	adds	r3, #1
 80091d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	3301      	adds	r3, #1
 80091d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f7ff fa30 	bl	8008640 <SWAPBYTE>
 80091e0:	4603      	mov	r3, r0
 80091e2:	461a      	mov	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3301      	adds	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3301      	adds	r3, #1
 80091f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7ff fa23 	bl	8008640 <SWAPBYTE>
 80091fa:	4603      	mov	r3, r0
 80091fc:	461a      	mov	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	80da      	strh	r2, [r3, #6]
}
 8009202:	bf00      	nop
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009214:	2180      	movs	r1, #128	@ 0x80
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fcf4 	bl	8009c04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800921c:	2100      	movs	r1, #0
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fcf0 	bl	8009c04 <USBD_LL_StallEP>
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d042      	beq.n	80092c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009246:	6938      	ldr	r0, [r7, #16]
 8009248:	f000 f842 	bl	80092d0 <USBD_GetLen>
 800924c:	4603      	mov	r3, r0
 800924e:	3301      	adds	r3, #1
 8009250:	005b      	lsls	r3, r3, #1
 8009252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009256:	d808      	bhi.n	800926a <USBD_GetString+0x3e>
 8009258:	6938      	ldr	r0, [r7, #16]
 800925a:	f000 f839 	bl	80092d0 <USBD_GetLen>
 800925e:	4603      	mov	r3, r0
 8009260:	3301      	adds	r3, #1
 8009262:	b29b      	uxth	r3, r3
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	b29a      	uxth	r2, r3
 8009268:	e001      	b.n	800926e <USBD_GetString+0x42>
 800926a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009272:	7dfb      	ldrb	r3, [r7, #23]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	4413      	add	r3, r2
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	7812      	ldrb	r2, [r2, #0]
 800927c:	701a      	strb	r2, [r3, #0]
  idx++;
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	3301      	adds	r3, #1
 8009282:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	4413      	add	r3, r2
 800928a:	2203      	movs	r2, #3
 800928c:	701a      	strb	r2, [r3, #0]
  idx++;
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	3301      	adds	r3, #1
 8009292:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009294:	e013      	b.n	80092be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	4413      	add	r3, r2
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	7812      	ldrb	r2, [r2, #0]
 80092a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	3301      	adds	r3, #1
 80092a6:	613b      	str	r3, [r7, #16]
    idx++;
 80092a8:	7dfb      	ldrb	r3, [r7, #23]
 80092aa:	3301      	adds	r3, #1
 80092ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	4413      	add	r3, r2
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	3301      	adds	r3, #1
 80092bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e7      	bne.n	8009296 <USBD_GetString+0x6a>
 80092c6:	e000      	b.n	80092ca <USBD_GetString+0x9e>
    return;
 80092c8:	bf00      	nop
  }
}
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80092e0:	e005      	b.n	80092ee <USBD_GetLen+0x1e>
  {
    len++;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	3301      	adds	r3, #1
 80092e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	3301      	adds	r3, #1
 80092ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1f5      	bne.n	80092e2 <USBD_GetLen+0x12>
  }

  return len;
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2202      	movs	r2, #2
 8009314:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	2100      	movs	r1, #0
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 fcf0 	bl	8009d16 <USBD_LL_Transmit>

  return USBD_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	2100      	movs	r1, #0
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 fcdf 	bl	8009d16 <USBD_LL_Transmit>

  return USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2203      	movs	r2, #3
 8009372:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	2100      	movs	r1, #0
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 fcdf 	bl	8009d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	2100      	movs	r1, #0
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 fcce 	bl	8009d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b082      	sub	sp, #8
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2204      	movs	r2, #4
 80093d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093d6:	2300      	movs	r3, #0
 80093d8:	2200      	movs	r2, #0
 80093da:	2100      	movs	r1, #0
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fc9a 	bl	8009d16 <USBD_LL_Transmit>

  return USBD_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2205      	movs	r2, #5
 80093f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093fc:	2300      	movs	r3, #0
 80093fe:	2200      	movs	r2, #0
 8009400:	2100      	movs	r1, #0
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fca8 	bl	8009d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009418:	2200      	movs	r2, #0
 800941a:	4912      	ldr	r1, [pc, #72]	@ (8009464 <MX_USB_DEVICE_Init+0x50>)
 800941c:	4812      	ldr	r0, [pc, #72]	@ (8009468 <MX_USB_DEVICE_Init+0x54>)
 800941e:	f7fe fcd9 	bl	8007dd4 <USBD_Init>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009428:	f7f8 f996 	bl	8001758 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800942c:	490f      	ldr	r1, [pc, #60]	@ (800946c <MX_USB_DEVICE_Init+0x58>)
 800942e:	480e      	ldr	r0, [pc, #56]	@ (8009468 <MX_USB_DEVICE_Init+0x54>)
 8009430:	f7fe fd00 	bl	8007e34 <USBD_RegisterClass>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800943a:	f7f8 f98d 	bl	8001758 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800943e:	490c      	ldr	r1, [pc, #48]	@ (8009470 <MX_USB_DEVICE_Init+0x5c>)
 8009440:	4809      	ldr	r0, [pc, #36]	@ (8009468 <MX_USB_DEVICE_Init+0x54>)
 8009442:	f7fe fbf7 	bl	8007c34 <USBD_CDC_RegisterInterface>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800944c:	f7f8 f984 	bl	8001758 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009450:	4805      	ldr	r0, [pc, #20]	@ (8009468 <MX_USB_DEVICE_Init+0x54>)
 8009452:	f7fe fd25 	bl	8007ea0 <USBD_Start>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800945c:	f7f8 f97c 	bl	8001758 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009460:	bf00      	nop
 8009462:	bd80      	pop	{r7, pc}
 8009464:	200000ac 	.word	0x200000ac
 8009468:	2000048c 	.word	0x2000048c
 800946c:	20000018 	.word	0x20000018
 8009470:	20000098 	.word	0x20000098

08009474 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009478:	2200      	movs	r2, #0
 800947a:	4905      	ldr	r1, [pc, #20]	@ (8009490 <CDC_Init_FS+0x1c>)
 800947c:	4805      	ldr	r0, [pc, #20]	@ (8009494 <CDC_Init_FS+0x20>)
 800947e:	f7fe fbf3 	bl	8007c68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009482:	4905      	ldr	r1, [pc, #20]	@ (8009498 <CDC_Init_FS+0x24>)
 8009484:	4803      	ldr	r0, [pc, #12]	@ (8009494 <CDC_Init_FS+0x20>)
 8009486:	f7fe fc11 	bl	8007cac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800948a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800948c:	4618      	mov	r0, r3
 800948e:	bd80      	pop	{r7, pc}
 8009490:	20000f68 	.word	0x20000f68
 8009494:	2000048c 	.word	0x2000048c
 8009498:	20000768 	.word	0x20000768

0800949c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80094a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	6039      	str	r1, [r7, #0]
 80094b6:	71fb      	strb	r3, [r7, #7]
 80094b8:	4613      	mov	r3, r2
 80094ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80094bc:	79fb      	ldrb	r3, [r7, #7]
 80094be:	2b23      	cmp	r3, #35	@ 0x23
 80094c0:	d84a      	bhi.n	8009558 <CDC_Control_FS+0xac>
 80094c2:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <CDC_Control_FS+0x1c>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	08009559 	.word	0x08009559
 80094cc:	08009559 	.word	0x08009559
 80094d0:	08009559 	.word	0x08009559
 80094d4:	08009559 	.word	0x08009559
 80094d8:	08009559 	.word	0x08009559
 80094dc:	08009559 	.word	0x08009559
 80094e0:	08009559 	.word	0x08009559
 80094e4:	08009559 	.word	0x08009559
 80094e8:	08009559 	.word	0x08009559
 80094ec:	08009559 	.word	0x08009559
 80094f0:	08009559 	.word	0x08009559
 80094f4:	08009559 	.word	0x08009559
 80094f8:	08009559 	.word	0x08009559
 80094fc:	08009559 	.word	0x08009559
 8009500:	08009559 	.word	0x08009559
 8009504:	08009559 	.word	0x08009559
 8009508:	08009559 	.word	0x08009559
 800950c:	08009559 	.word	0x08009559
 8009510:	08009559 	.word	0x08009559
 8009514:	08009559 	.word	0x08009559
 8009518:	08009559 	.word	0x08009559
 800951c:	08009559 	.word	0x08009559
 8009520:	08009559 	.word	0x08009559
 8009524:	08009559 	.word	0x08009559
 8009528:	08009559 	.word	0x08009559
 800952c:	08009559 	.word	0x08009559
 8009530:	08009559 	.word	0x08009559
 8009534:	08009559 	.word	0x08009559
 8009538:	08009559 	.word	0x08009559
 800953c:	08009559 	.word	0x08009559
 8009540:	08009559 	.word	0x08009559
 8009544:	08009559 	.word	0x08009559
 8009548:	08009559 	.word	0x08009559
 800954c:	08009559 	.word	0x08009559
 8009550:	08009559 	.word	0x08009559
 8009554:	08009559 	.word	0x08009559
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009558:	bf00      	nop
  }

  return (USBD_OK);
 800955a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	4805      	ldr	r0, [pc, #20]	@ (800958c <CDC_Receive_FS+0x24>)
 8009576:	f7fe fb99 	bl	8007cac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800957a:	4804      	ldr	r0, [pc, #16]	@ (800958c <CDC_Receive_FS+0x24>)
 800957c:	f7fe fbf4 	bl	8007d68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009580:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	2000048c 	.word	0x2000048c

08009590 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80095a0:	4b0d      	ldr	r3, [pc, #52]	@ (80095d8 <CDC_Transmit_FS+0x48>)
 80095a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e00b      	b.n	80095ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80095b6:	887b      	ldrh	r3, [r7, #2]
 80095b8:	461a      	mov	r2, r3
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4806      	ldr	r0, [pc, #24]	@ (80095d8 <CDC_Transmit_FS+0x48>)
 80095be:	f7fe fb53 	bl	8007c68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80095c2:	4805      	ldr	r0, [pc, #20]	@ (80095d8 <CDC_Transmit_FS+0x48>)
 80095c4:	f7fe fb90 	bl	8007ce8 <USBD_CDC_TransmitPacket>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	2000048c 	.word	0x2000048c

080095dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	4613      	mov	r3, r2
 80095e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80095ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
	...

08009600 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	6039      	str	r1, [r7, #0]
 800960a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2212      	movs	r2, #18
 8009610:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009612:	4b03      	ldr	r3, [pc, #12]	@ (8009620 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009614:	4618      	mov	r0, r3
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	200000c8 	.word	0x200000c8

08009624 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	6039      	str	r1, [r7, #0]
 800962e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2204      	movs	r2, #4
 8009634:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009636:	4b03      	ldr	r3, [pc, #12]	@ (8009644 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	200000dc 	.word	0x200000dc

08009648 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	6039      	str	r1, [r7, #0]
 8009652:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009654:	79fb      	ldrb	r3, [r7, #7]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d105      	bne.n	8009666 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	4907      	ldr	r1, [pc, #28]	@ (800967c <USBD_FS_ProductStrDescriptor+0x34>)
 800965e:	4808      	ldr	r0, [pc, #32]	@ (8009680 <USBD_FS_ProductStrDescriptor+0x38>)
 8009660:	f7ff fde4 	bl	800922c <USBD_GetString>
 8009664:	e004      	b.n	8009670 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	4904      	ldr	r1, [pc, #16]	@ (800967c <USBD_FS_ProductStrDescriptor+0x34>)
 800966a:	4805      	ldr	r0, [pc, #20]	@ (8009680 <USBD_FS_ProductStrDescriptor+0x38>)
 800966c:	f7ff fdde 	bl	800922c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009670:	4b02      	ldr	r3, [pc, #8]	@ (800967c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20001768 	.word	0x20001768
 8009680:	0800e690 	.word	0x0800e690

08009684 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	6039      	str	r1, [r7, #0]
 800968e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	4904      	ldr	r1, [pc, #16]	@ (80096a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009694:	4804      	ldr	r0, [pc, #16]	@ (80096a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009696:	f7ff fdc9 	bl	800922c <USBD_GetString>
  return USBD_StrDesc;
 800969a:	4b02      	ldr	r3, [pc, #8]	@ (80096a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20001768 	.word	0x20001768
 80096a8:	0800e6a8 	.word	0x0800e6a8

080096ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	6039      	str	r1, [r7, #0]
 80096b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	221a      	movs	r2, #26
 80096bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096be:	f000 f843 	bl	8009748 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80096c2:	4b02      	ldr	r3, [pc, #8]	@ (80096cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	200000e0 	.word	0x200000e0

080096d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	6039      	str	r1, [r7, #0]
 80096da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d105      	bne.n	80096ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	4907      	ldr	r1, [pc, #28]	@ (8009704 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096e6:	4808      	ldr	r0, [pc, #32]	@ (8009708 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096e8:	f7ff fda0 	bl	800922c <USBD_GetString>
 80096ec:	e004      	b.n	80096f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	4904      	ldr	r1, [pc, #16]	@ (8009704 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096f2:	4805      	ldr	r0, [pc, #20]	@ (8009708 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096f4:	f7ff fd9a 	bl	800922c <USBD_GetString>
  }
  return USBD_StrDesc;
 80096f8:	4b02      	ldr	r3, [pc, #8]	@ (8009704 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20001768 	.word	0x20001768
 8009708:	0800e6bc 	.word	0x0800e6bc

0800970c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	4603      	mov	r3, r0
 8009714:	6039      	str	r1, [r7, #0]
 8009716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009718:	79fb      	ldrb	r3, [r7, #7]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d105      	bne.n	800972a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	4907      	ldr	r1, [pc, #28]	@ (8009740 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009722:	4808      	ldr	r0, [pc, #32]	@ (8009744 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009724:	f7ff fd82 	bl	800922c <USBD_GetString>
 8009728:	e004      	b.n	8009734 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	4904      	ldr	r1, [pc, #16]	@ (8009740 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800972e:	4805      	ldr	r0, [pc, #20]	@ (8009744 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009730:	f7ff fd7c 	bl	800922c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009734:	4b02      	ldr	r3, [pc, #8]	@ (8009740 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009736:	4618      	mov	r0, r3
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20001768 	.word	0x20001768
 8009744:	0800e6c8 	.word	0x0800e6c8

08009748 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800974e:	4b0f      	ldr	r3, [pc, #60]	@ (800978c <Get_SerialNum+0x44>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009754:	4b0e      	ldr	r3, [pc, #56]	@ (8009790 <Get_SerialNum+0x48>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800975a:	4b0e      	ldr	r3, [pc, #56]	@ (8009794 <Get_SerialNum+0x4c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4413      	add	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d009      	beq.n	8009782 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800976e:	2208      	movs	r2, #8
 8009770:	4909      	ldr	r1, [pc, #36]	@ (8009798 <Get_SerialNum+0x50>)
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 f814 	bl	80097a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009778:	2204      	movs	r2, #4
 800977a:	4908      	ldr	r1, [pc, #32]	@ (800979c <Get_SerialNum+0x54>)
 800977c:	68b8      	ldr	r0, [r7, #8]
 800977e:	f000 f80f 	bl	80097a0 <IntToUnicode>
  }
}
 8009782:	bf00      	nop
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	1fff7a10 	.word	0x1fff7a10
 8009790:	1fff7a14 	.word	0x1fff7a14
 8009794:	1fff7a18 	.word	0x1fff7a18
 8009798:	200000e2 	.word	0x200000e2
 800979c:	200000f2 	.word	0x200000f2

080097a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	4613      	mov	r3, r2
 80097ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097b2:	2300      	movs	r3, #0
 80097b4:	75fb      	strb	r3, [r7, #23]
 80097b6:	e027      	b.n	8009808 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	0f1b      	lsrs	r3, r3, #28
 80097bc:	2b09      	cmp	r3, #9
 80097be:	d80b      	bhi.n	80097d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	0f1b      	lsrs	r3, r3, #28
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	4619      	mov	r1, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	440b      	add	r3, r1
 80097d0:	3230      	adds	r2, #48	@ 0x30
 80097d2:	b2d2      	uxtb	r2, r2
 80097d4:	701a      	strb	r2, [r3, #0]
 80097d6:	e00a      	b.n	80097ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	0f1b      	lsrs	r3, r3, #28
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	7dfb      	ldrb	r3, [r7, #23]
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	4619      	mov	r1, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	440b      	add	r3, r1
 80097e8:	3237      	adds	r2, #55	@ 0x37
 80097ea:	b2d2      	uxtb	r2, r2
 80097ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	011b      	lsls	r3, r3, #4
 80097f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	3301      	adds	r3, #1
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	4413      	add	r3, r2
 80097fe:	2200      	movs	r2, #0
 8009800:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009802:	7dfb      	ldrb	r3, [r7, #23]
 8009804:	3301      	adds	r3, #1
 8009806:	75fb      	strb	r3, [r7, #23]
 8009808:	7dfa      	ldrb	r2, [r7, #23]
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	429a      	cmp	r2, r3
 800980e:	d3d3      	bcc.n	80097b8 <IntToUnicode+0x18>
  }
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
	...

08009820 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08a      	sub	sp, #40	@ 0x28
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009828:	f107 0314 	add.w	r3, r7, #20
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	605a      	str	r2, [r3, #4]
 8009832:	609a      	str	r2, [r3, #8]
 8009834:	60da      	str	r2, [r3, #12]
 8009836:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009840:	d13a      	bne.n	80098b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009842:	2300      	movs	r3, #0
 8009844:	613b      	str	r3, [r7, #16]
 8009846:	4b1e      	ldr	r3, [pc, #120]	@ (80098c0 <HAL_PCD_MspInit+0xa0>)
 8009848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800984a:	4a1d      	ldr	r2, [pc, #116]	@ (80098c0 <HAL_PCD_MspInit+0xa0>)
 800984c:	f043 0301 	orr.w	r3, r3, #1
 8009850:	6313      	str	r3, [r2, #48]	@ 0x30
 8009852:	4b1b      	ldr	r3, [pc, #108]	@ (80098c0 <HAL_PCD_MspInit+0xa0>)
 8009854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800985e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009864:	2302      	movs	r3, #2
 8009866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009868:	2300      	movs	r3, #0
 800986a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800986c:	2303      	movs	r3, #3
 800986e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009870:	230a      	movs	r3, #10
 8009872:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009874:	f107 0314 	add.w	r3, r7, #20
 8009878:	4619      	mov	r1, r3
 800987a:	4812      	ldr	r0, [pc, #72]	@ (80098c4 <HAL_PCD_MspInit+0xa4>)
 800987c:	f7f8 fd30 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009880:	4b0f      	ldr	r3, [pc, #60]	@ (80098c0 <HAL_PCD_MspInit+0xa0>)
 8009882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009884:	4a0e      	ldr	r2, [pc, #56]	@ (80098c0 <HAL_PCD_MspInit+0xa0>)
 8009886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800988a:	6353      	str	r3, [r2, #52]	@ 0x34
 800988c:	2300      	movs	r3, #0
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	4b0b      	ldr	r3, [pc, #44]	@ (80098c0 <HAL_PCD_MspInit+0xa0>)
 8009892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009894:	4a0a      	ldr	r2, [pc, #40]	@ (80098c0 <HAL_PCD_MspInit+0xa0>)
 8009896:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800989a:	6453      	str	r3, [r2, #68]	@ 0x44
 800989c:	4b08      	ldr	r3, [pc, #32]	@ (80098c0 <HAL_PCD_MspInit+0xa0>)
 800989e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098a4:	60fb      	str	r3, [r7, #12]
 80098a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80098a8:	2200      	movs	r2, #0
 80098aa:	2100      	movs	r1, #0
 80098ac:	2043      	movs	r0, #67	@ 0x43
 80098ae:	f7f8 fb52 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098b2:	2043      	movs	r0, #67	@ 0x43
 80098b4:	f7f8 fb6b 	bl	8001f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098b8:	bf00      	nop
 80098ba:	3728      	adds	r7, #40	@ 0x28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	40023800 	.word	0x40023800
 80098c4:	40020000 	.word	0x40020000

080098c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80098dc:	4619      	mov	r1, r3
 80098de:	4610      	mov	r0, r2
 80098e0:	f7fe fb2b 	bl	8007f3a <USBD_LL_SetupStage>
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80098fe:	78fa      	ldrb	r2, [r7, #3]
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	4613      	mov	r3, r2
 8009904:	00db      	lsls	r3, r3, #3
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	440b      	add	r3, r1
 800990c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	4619      	mov	r1, r3
 8009916:	f7fe fb65 	bl	8007fe4 <USBD_LL_DataOutStage>
}
 800991a:	bf00      	nop
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b082      	sub	sp, #8
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	460b      	mov	r3, r1
 800992c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009934:	78fa      	ldrb	r2, [r7, #3]
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	4613      	mov	r3, r2
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	4413      	add	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	440b      	add	r3, r1
 8009942:	3320      	adds	r3, #32
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	78fb      	ldrb	r3, [r7, #3]
 8009948:	4619      	mov	r1, r3
 800994a:	f7fe fc07 	bl	800815c <USBD_LL_DataInStage>
}
 800994e:	bf00      	nop
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009964:	4618      	mov	r0, r3
 8009966:	f7fe fd4b 	bl	8008400 <USBD_LL_SOF>
}
 800996a:	bf00      	nop
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800997a:	2301      	movs	r3, #1
 800997c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	79db      	ldrb	r3, [r3, #7]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d102      	bne.n	800998c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009986:	2300      	movs	r3, #0
 8009988:	73fb      	strb	r3, [r7, #15]
 800998a:	e008      	b.n	800999e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	79db      	ldrb	r3, [r3, #7]
 8009990:	2b02      	cmp	r3, #2
 8009992:	d102      	bne.n	800999a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009994:	2301      	movs	r3, #1
 8009996:	73fb      	strb	r3, [r7, #15]
 8009998:	e001      	b.n	800999e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800999a:	f7f7 fedd 	bl	8001758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099a4:	7bfa      	ldrb	r2, [r7, #15]
 80099a6:	4611      	mov	r1, r2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe fce5 	bl	8008378 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fc8c 	bl	80082d2 <USBD_LL_Reset>
}
 80099ba:	bf00      	nop
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fce0 	bl	8008398 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099ea:	f043 0301 	orr.w	r3, r3, #1
 80099ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	7adb      	ldrb	r3, [r3, #11]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d005      	beq.n	8009a04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099f8:	4b04      	ldr	r3, [pc, #16]	@ (8009a0c <HAL_PCD_SuspendCallback+0x48>)
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	4a03      	ldr	r2, [pc, #12]	@ (8009a0c <HAL_PCD_SuspendCallback+0x48>)
 80099fe:	f043 0306 	orr.w	r3, r3, #6
 8009a02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a04:	bf00      	nop
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	e000ed00 	.word	0xe000ed00

08009a10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fcd6 	bl	80083d0 <USBD_LL_Resume>
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a3e:	78fa      	ldrb	r2, [r7, #3]
 8009a40:	4611      	mov	r1, r2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe fd2e 	bl	80084a4 <USBD_LL_IsoOUTIncomplete>
}
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a62:	78fa      	ldrb	r2, [r7, #3]
 8009a64:	4611      	mov	r1, r2
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fe fcea 	bl	8008440 <USBD_LL_IsoINIncomplete>
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fd40 	bl	8008508 <USBD_LL_DevConnected>
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fe fd3d 	bl	800851e <USBD_LL_DevDisconnected>
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d13c      	bne.n	8009b36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009abc:	4a20      	ldr	r2, [pc, #128]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009ac8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009acc:	4b1c      	ldr	r3, [pc, #112]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009ace:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009ad2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009ad6:	2204      	movs	r2, #4
 8009ad8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ada:	4b19      	ldr	r3, [pc, #100]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009adc:	2202      	movs	r2, #2
 8009ade:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ae0:	4b17      	ldr	r3, [pc, #92]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ae6:	4b16      	ldr	r3, [pc, #88]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009ae8:	2202      	movs	r2, #2
 8009aea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009aec:	4b14      	ldr	r3, [pc, #80]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009af2:	4b13      	ldr	r3, [pc, #76]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009af8:	4b11      	ldr	r3, [pc, #68]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009afe:	4b10      	ldr	r3, [pc, #64]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b04:	4b0e      	ldr	r3, [pc, #56]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b0a:	480d      	ldr	r0, [pc, #52]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009b0c:	f7f8 fd9d 	bl	800264a <HAL_PCD_Init>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b16:	f7f7 fe1f 	bl	8001758 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b1a:	2180      	movs	r1, #128	@ 0x80
 8009b1c:	4808      	ldr	r0, [pc, #32]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009b1e:	f7f9 ffca 	bl	8003ab6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b22:	2240      	movs	r2, #64	@ 0x40
 8009b24:	2100      	movs	r1, #0
 8009b26:	4806      	ldr	r0, [pc, #24]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009b28:	f7f9 ff7e 	bl	8003a28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b2c:	2280      	movs	r2, #128	@ 0x80
 8009b2e:	2101      	movs	r1, #1
 8009b30:	4803      	ldr	r0, [pc, #12]	@ (8009b40 <USBD_LL_Init+0x94>)
 8009b32:	f7f9 ff79 	bl	8003a28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	20001968 	.word	0x20001968

08009b44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7f8 fe84 	bl	8002868 <HAL_PCD_Start>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 f942 	bl	8009df0 <USBD_Get_USB_Status>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	4608      	mov	r0, r1
 8009b84:	4611      	mov	r1, r2
 8009b86:	461a      	mov	r2, r3
 8009b88:	4603      	mov	r3, r0
 8009b8a:	70fb      	strb	r3, [r7, #3]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70bb      	strb	r3, [r7, #2]
 8009b90:	4613      	mov	r3, r2
 8009b92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009ba2:	78bb      	ldrb	r3, [r7, #2]
 8009ba4:	883a      	ldrh	r2, [r7, #0]
 8009ba6:	78f9      	ldrb	r1, [r7, #3]
 8009ba8:	f7f9 fb58 	bl	800325c <HAL_PCD_EP_Open>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f91c 	bl	8009df0 <USBD_Get_USB_Status>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009be0:	78fa      	ldrb	r2, [r7, #3]
 8009be2:	4611      	mov	r1, r2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7f9 fba3 	bl	8003330 <HAL_PCD_EP_Close>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 f8fd 	bl	8009df0 <USBD_Get_USB_Status>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c1e:	78fa      	ldrb	r2, [r7, #3]
 8009c20:	4611      	mov	r1, r2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7f9 fc5b 	bl	80034de <HAL_PCD_EP_SetStall>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f8de 	bl	8009df0 <USBD_Get_USB_Status>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c5c:	78fa      	ldrb	r2, [r7, #3]
 8009c5e:	4611      	mov	r1, r2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7f9 fc9f 	bl	80035a4 <HAL_PCD_EP_ClrStall>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 f8bf 	bl	8009df0 <USBD_Get_USB_Status>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	da0b      	bge.n	8009cb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c9c:	78fb      	ldrb	r3, [r7, #3]
 8009c9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ca2:	68f9      	ldr	r1, [r7, #12]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	00db      	lsls	r3, r3, #3
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	440b      	add	r3, r1
 8009cae:	3316      	adds	r3, #22
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	e00b      	b.n	8009ccc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cba:	68f9      	ldr	r1, [r7, #12]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	4413      	add	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	440b      	add	r3, r1
 8009cc6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009cca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009cf2:	78fa      	ldrb	r2, [r7, #3]
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7f9 fa8c 	bl	8003214 <HAL_PCD_SetAddress>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f874 	bl	8009df0 <USBD_Get_USB_Status>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b086      	sub	sp, #24
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	603b      	str	r3, [r7, #0]
 8009d22:	460b      	mov	r3, r1
 8009d24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009d34:	7af9      	ldrb	r1, [r7, #11]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	f7f9 fb96 	bl	800346a <HAL_PCD_EP_Transmit>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 f853 	bl	8009df0 <USBD_Get_USB_Status>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3718      	adds	r7, #24
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	607a      	str	r2, [r7, #4]
 8009d62:	603b      	str	r3, [r7, #0]
 8009d64:	460b      	mov	r3, r1
 8009d66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009d76:	7af9      	ldrb	r1, [r7, #11]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	f7f9 fb22 	bl	80033c4 <HAL_PCD_EP_Receive>
 8009d80:	4603      	mov	r3, r0
 8009d82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f832 	bl	8009df0 <USBD_Get_USB_Status>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d90:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	460b      	mov	r3, r1
 8009da4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009dac:	78fa      	ldrb	r2, [r7, #3]
 8009dae:	4611      	mov	r1, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7f9 fb42 	bl	800343a <HAL_PCD_EP_GetRxCount>
 8009db6:	4603      	mov	r3, r0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009dc8:	4b03      	ldr	r3, [pc, #12]	@ (8009dd8 <USBD_static_malloc+0x18>)
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	370c      	adds	r7, #12
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	20001e4c 	.word	0x20001e4c

08009ddc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]

}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	4603      	mov	r3, r0
 8009df8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d817      	bhi.n	8009e34 <USBD_Get_USB_Status+0x44>
 8009e04:	a201      	add	r2, pc, #4	@ (adr r2, 8009e0c <USBD_Get_USB_Status+0x1c>)
 8009e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0a:	bf00      	nop
 8009e0c:	08009e1d 	.word	0x08009e1d
 8009e10:	08009e23 	.word	0x08009e23
 8009e14:	08009e29 	.word	0x08009e29
 8009e18:	08009e2f 	.word	0x08009e2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e20:	e00b      	b.n	8009e3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e22:	2303      	movs	r3, #3
 8009e24:	73fb      	strb	r3, [r7, #15]
    break;
 8009e26:	e008      	b.n	8009e3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e2c:	e005      	b.n	8009e3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	73fb      	strb	r3, [r7, #15]
    break;
 8009e32:	e002      	b.n	8009e3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e34:	2303      	movs	r3, #3
 8009e36:	73fb      	strb	r3, [r7, #15]
    break;
 8009e38:	bf00      	nop
  }
  return usb_status;
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <__cvt>:
 8009e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e4c:	ec57 6b10 	vmov	r6, r7, d0
 8009e50:	2f00      	cmp	r7, #0
 8009e52:	460c      	mov	r4, r1
 8009e54:	4619      	mov	r1, r3
 8009e56:	463b      	mov	r3, r7
 8009e58:	bfbb      	ittet	lt
 8009e5a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009e5e:	461f      	movlt	r7, r3
 8009e60:	2300      	movge	r3, #0
 8009e62:	232d      	movlt	r3, #45	@ 0x2d
 8009e64:	700b      	strb	r3, [r1, #0]
 8009e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009e6c:	4691      	mov	r9, r2
 8009e6e:	f023 0820 	bic.w	r8, r3, #32
 8009e72:	bfbc      	itt	lt
 8009e74:	4632      	movlt	r2, r6
 8009e76:	4616      	movlt	r6, r2
 8009e78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e7c:	d005      	beq.n	8009e8a <__cvt+0x42>
 8009e7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e82:	d100      	bne.n	8009e86 <__cvt+0x3e>
 8009e84:	3401      	adds	r4, #1
 8009e86:	2102      	movs	r1, #2
 8009e88:	e000      	b.n	8009e8c <__cvt+0x44>
 8009e8a:	2103      	movs	r1, #3
 8009e8c:	ab03      	add	r3, sp, #12
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	ab02      	add	r3, sp, #8
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	ec47 6b10 	vmov	d0, r6, r7
 8009e98:	4653      	mov	r3, sl
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	f001 f8b8 	bl	800b010 <_dtoa_r>
 8009ea0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	d119      	bne.n	8009edc <__cvt+0x94>
 8009ea8:	f019 0f01 	tst.w	r9, #1
 8009eac:	d00e      	beq.n	8009ecc <__cvt+0x84>
 8009eae:	eb00 0904 	add.w	r9, r0, r4
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7f6 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ebe:	b108      	cbz	r0, 8009ec4 <__cvt+0x7c>
 8009ec0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ec4:	2230      	movs	r2, #48	@ 0x30
 8009ec6:	9b03      	ldr	r3, [sp, #12]
 8009ec8:	454b      	cmp	r3, r9
 8009eca:	d31e      	bcc.n	8009f0a <__cvt+0xc2>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ed0:	1b5b      	subs	r3, r3, r5
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	6013      	str	r3, [r2, #0]
 8009ed6:	b004      	add	sp, #16
 8009ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009edc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ee0:	eb00 0904 	add.w	r9, r0, r4
 8009ee4:	d1e5      	bne.n	8009eb2 <__cvt+0x6a>
 8009ee6:	7803      	ldrb	r3, [r0, #0]
 8009ee8:	2b30      	cmp	r3, #48	@ 0x30
 8009eea:	d10a      	bne.n	8009f02 <__cvt+0xba>
 8009eec:	2200      	movs	r2, #0
 8009eee:	2300      	movs	r3, #0
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	f7f6 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef8:	b918      	cbnz	r0, 8009f02 <__cvt+0xba>
 8009efa:	f1c4 0401 	rsb	r4, r4, #1
 8009efe:	f8ca 4000 	str.w	r4, [sl]
 8009f02:	f8da 3000 	ldr.w	r3, [sl]
 8009f06:	4499      	add	r9, r3
 8009f08:	e7d3      	b.n	8009eb2 <__cvt+0x6a>
 8009f0a:	1c59      	adds	r1, r3, #1
 8009f0c:	9103      	str	r1, [sp, #12]
 8009f0e:	701a      	strb	r2, [r3, #0]
 8009f10:	e7d9      	b.n	8009ec6 <__cvt+0x7e>

08009f12 <__exponent>:
 8009f12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f14:	2900      	cmp	r1, #0
 8009f16:	bfba      	itte	lt
 8009f18:	4249      	neglt	r1, r1
 8009f1a:	232d      	movlt	r3, #45	@ 0x2d
 8009f1c:	232b      	movge	r3, #43	@ 0x2b
 8009f1e:	2909      	cmp	r1, #9
 8009f20:	7002      	strb	r2, [r0, #0]
 8009f22:	7043      	strb	r3, [r0, #1]
 8009f24:	dd29      	ble.n	8009f7a <__exponent+0x68>
 8009f26:	f10d 0307 	add.w	r3, sp, #7
 8009f2a:	461d      	mov	r5, r3
 8009f2c:	270a      	movs	r7, #10
 8009f2e:	461a      	mov	r2, r3
 8009f30:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f34:	fb07 1416 	mls	r4, r7, r6, r1
 8009f38:	3430      	adds	r4, #48	@ 0x30
 8009f3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f3e:	460c      	mov	r4, r1
 8009f40:	2c63      	cmp	r4, #99	@ 0x63
 8009f42:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f46:	4631      	mov	r1, r6
 8009f48:	dcf1      	bgt.n	8009f2e <__exponent+0x1c>
 8009f4a:	3130      	adds	r1, #48	@ 0x30
 8009f4c:	1e94      	subs	r4, r2, #2
 8009f4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f52:	1c41      	adds	r1, r0, #1
 8009f54:	4623      	mov	r3, r4
 8009f56:	42ab      	cmp	r3, r5
 8009f58:	d30a      	bcc.n	8009f70 <__exponent+0x5e>
 8009f5a:	f10d 0309 	add.w	r3, sp, #9
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	42ac      	cmp	r4, r5
 8009f62:	bf88      	it	hi
 8009f64:	2300      	movhi	r3, #0
 8009f66:	3302      	adds	r3, #2
 8009f68:	4403      	add	r3, r0
 8009f6a:	1a18      	subs	r0, r3, r0
 8009f6c:	b003      	add	sp, #12
 8009f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f70:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f74:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f78:	e7ed      	b.n	8009f56 <__exponent+0x44>
 8009f7a:	2330      	movs	r3, #48	@ 0x30
 8009f7c:	3130      	adds	r1, #48	@ 0x30
 8009f7e:	7083      	strb	r3, [r0, #2]
 8009f80:	70c1      	strb	r1, [r0, #3]
 8009f82:	1d03      	adds	r3, r0, #4
 8009f84:	e7f1      	b.n	8009f6a <__exponent+0x58>
	...

08009f88 <_printf_float>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	b08d      	sub	sp, #52	@ 0x34
 8009f8e:	460c      	mov	r4, r1
 8009f90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f94:	4616      	mov	r6, r2
 8009f96:	461f      	mov	r7, r3
 8009f98:	4605      	mov	r5, r0
 8009f9a:	f000 ff31 	bl	800ae00 <_localeconv_r>
 8009f9e:	6803      	ldr	r3, [r0, #0]
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7f6 f964 	bl	8000270 <strlen>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fac:	f8d8 3000 	ldr.w	r3, [r8]
 8009fb0:	9005      	str	r0, [sp, #20]
 8009fb2:	3307      	adds	r3, #7
 8009fb4:	f023 0307 	bic.w	r3, r3, #7
 8009fb8:	f103 0208 	add.w	r2, r3, #8
 8009fbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009fc0:	f8d4 b000 	ldr.w	fp, [r4]
 8009fc4:	f8c8 2000 	str.w	r2, [r8]
 8009fc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fcc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009fd0:	9307      	str	r3, [sp, #28]
 8009fd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fd6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fde:	4b9c      	ldr	r3, [pc, #624]	@ (800a250 <_printf_float+0x2c8>)
 8009fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe4:	f7f6 fda2 	bl	8000b2c <__aeabi_dcmpun>
 8009fe8:	bb70      	cbnz	r0, 800a048 <_printf_float+0xc0>
 8009fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fee:	4b98      	ldr	r3, [pc, #608]	@ (800a250 <_printf_float+0x2c8>)
 8009ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff4:	f7f6 fd7c 	bl	8000af0 <__aeabi_dcmple>
 8009ff8:	bb30      	cbnz	r0, 800a048 <_printf_float+0xc0>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4640      	mov	r0, r8
 800a000:	4649      	mov	r1, r9
 800a002:	f7f6 fd6b 	bl	8000adc <__aeabi_dcmplt>
 800a006:	b110      	cbz	r0, 800a00e <_printf_float+0x86>
 800a008:	232d      	movs	r3, #45	@ 0x2d
 800a00a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a00e:	4a91      	ldr	r2, [pc, #580]	@ (800a254 <_printf_float+0x2cc>)
 800a010:	4b91      	ldr	r3, [pc, #580]	@ (800a258 <_printf_float+0x2d0>)
 800a012:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a016:	bf8c      	ite	hi
 800a018:	4690      	movhi	r8, r2
 800a01a:	4698      	movls	r8, r3
 800a01c:	2303      	movs	r3, #3
 800a01e:	6123      	str	r3, [r4, #16]
 800a020:	f02b 0304 	bic.w	r3, fp, #4
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	f04f 0900 	mov.w	r9, #0
 800a02a:	9700      	str	r7, [sp, #0]
 800a02c:	4633      	mov	r3, r6
 800a02e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a030:	4621      	mov	r1, r4
 800a032:	4628      	mov	r0, r5
 800a034:	f000 f9d2 	bl	800a3dc <_printf_common>
 800a038:	3001      	adds	r0, #1
 800a03a:	f040 808d 	bne.w	800a158 <_printf_float+0x1d0>
 800a03e:	f04f 30ff 	mov.w	r0, #4294967295
 800a042:	b00d      	add	sp, #52	@ 0x34
 800a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a048:	4642      	mov	r2, r8
 800a04a:	464b      	mov	r3, r9
 800a04c:	4640      	mov	r0, r8
 800a04e:	4649      	mov	r1, r9
 800a050:	f7f6 fd6c 	bl	8000b2c <__aeabi_dcmpun>
 800a054:	b140      	cbz	r0, 800a068 <_printf_float+0xe0>
 800a056:	464b      	mov	r3, r9
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bfbc      	itt	lt
 800a05c:	232d      	movlt	r3, #45	@ 0x2d
 800a05e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a062:	4a7e      	ldr	r2, [pc, #504]	@ (800a25c <_printf_float+0x2d4>)
 800a064:	4b7e      	ldr	r3, [pc, #504]	@ (800a260 <_printf_float+0x2d8>)
 800a066:	e7d4      	b.n	800a012 <_printf_float+0x8a>
 800a068:	6863      	ldr	r3, [r4, #4]
 800a06a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a06e:	9206      	str	r2, [sp, #24]
 800a070:	1c5a      	adds	r2, r3, #1
 800a072:	d13b      	bne.n	800a0ec <_printf_float+0x164>
 800a074:	2306      	movs	r3, #6
 800a076:	6063      	str	r3, [r4, #4]
 800a078:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a07c:	2300      	movs	r3, #0
 800a07e:	6022      	str	r2, [r4, #0]
 800a080:	9303      	str	r3, [sp, #12]
 800a082:	ab0a      	add	r3, sp, #40	@ 0x28
 800a084:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a088:	ab09      	add	r3, sp, #36	@ 0x24
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	6861      	ldr	r1, [r4, #4]
 800a08e:	ec49 8b10 	vmov	d0, r8, r9
 800a092:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a096:	4628      	mov	r0, r5
 800a098:	f7ff fed6 	bl	8009e48 <__cvt>
 800a09c:	9b06      	ldr	r3, [sp, #24]
 800a09e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0a0:	2b47      	cmp	r3, #71	@ 0x47
 800a0a2:	4680      	mov	r8, r0
 800a0a4:	d129      	bne.n	800a0fa <_printf_float+0x172>
 800a0a6:	1cc8      	adds	r0, r1, #3
 800a0a8:	db02      	blt.n	800a0b0 <_printf_float+0x128>
 800a0aa:	6863      	ldr	r3, [r4, #4]
 800a0ac:	4299      	cmp	r1, r3
 800a0ae:	dd41      	ble.n	800a134 <_printf_float+0x1ac>
 800a0b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a0b4:	fa5f fa8a 	uxtb.w	sl, sl
 800a0b8:	3901      	subs	r1, #1
 800a0ba:	4652      	mov	r2, sl
 800a0bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0c2:	f7ff ff26 	bl	8009f12 <__exponent>
 800a0c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0c8:	1813      	adds	r3, r2, r0
 800a0ca:	2a01      	cmp	r2, #1
 800a0cc:	4681      	mov	r9, r0
 800a0ce:	6123      	str	r3, [r4, #16]
 800a0d0:	dc02      	bgt.n	800a0d8 <_printf_float+0x150>
 800a0d2:	6822      	ldr	r2, [r4, #0]
 800a0d4:	07d2      	lsls	r2, r2, #31
 800a0d6:	d501      	bpl.n	800a0dc <_printf_float+0x154>
 800a0d8:	3301      	adds	r3, #1
 800a0da:	6123      	str	r3, [r4, #16]
 800a0dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0a2      	beq.n	800a02a <_printf_float+0xa2>
 800a0e4:	232d      	movs	r3, #45	@ 0x2d
 800a0e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0ea:	e79e      	b.n	800a02a <_printf_float+0xa2>
 800a0ec:	9a06      	ldr	r2, [sp, #24]
 800a0ee:	2a47      	cmp	r2, #71	@ 0x47
 800a0f0:	d1c2      	bne.n	800a078 <_printf_float+0xf0>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1c0      	bne.n	800a078 <_printf_float+0xf0>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e7bd      	b.n	800a076 <_printf_float+0xee>
 800a0fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0fe:	d9db      	bls.n	800a0b8 <_printf_float+0x130>
 800a100:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a104:	d118      	bne.n	800a138 <_printf_float+0x1b0>
 800a106:	2900      	cmp	r1, #0
 800a108:	6863      	ldr	r3, [r4, #4]
 800a10a:	dd0b      	ble.n	800a124 <_printf_float+0x19c>
 800a10c:	6121      	str	r1, [r4, #16]
 800a10e:	b913      	cbnz	r3, 800a116 <_printf_float+0x18e>
 800a110:	6822      	ldr	r2, [r4, #0]
 800a112:	07d0      	lsls	r0, r2, #31
 800a114:	d502      	bpl.n	800a11c <_printf_float+0x194>
 800a116:	3301      	adds	r3, #1
 800a118:	440b      	add	r3, r1
 800a11a:	6123      	str	r3, [r4, #16]
 800a11c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a11e:	f04f 0900 	mov.w	r9, #0
 800a122:	e7db      	b.n	800a0dc <_printf_float+0x154>
 800a124:	b913      	cbnz	r3, 800a12c <_printf_float+0x1a4>
 800a126:	6822      	ldr	r2, [r4, #0]
 800a128:	07d2      	lsls	r2, r2, #31
 800a12a:	d501      	bpl.n	800a130 <_printf_float+0x1a8>
 800a12c:	3302      	adds	r3, #2
 800a12e:	e7f4      	b.n	800a11a <_printf_float+0x192>
 800a130:	2301      	movs	r3, #1
 800a132:	e7f2      	b.n	800a11a <_printf_float+0x192>
 800a134:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a13a:	4299      	cmp	r1, r3
 800a13c:	db05      	blt.n	800a14a <_printf_float+0x1c2>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	6121      	str	r1, [r4, #16]
 800a142:	07d8      	lsls	r0, r3, #31
 800a144:	d5ea      	bpl.n	800a11c <_printf_float+0x194>
 800a146:	1c4b      	adds	r3, r1, #1
 800a148:	e7e7      	b.n	800a11a <_printf_float+0x192>
 800a14a:	2900      	cmp	r1, #0
 800a14c:	bfd4      	ite	le
 800a14e:	f1c1 0202 	rsble	r2, r1, #2
 800a152:	2201      	movgt	r2, #1
 800a154:	4413      	add	r3, r2
 800a156:	e7e0      	b.n	800a11a <_printf_float+0x192>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	055a      	lsls	r2, r3, #21
 800a15c:	d407      	bmi.n	800a16e <_printf_float+0x1e6>
 800a15e:	6923      	ldr	r3, [r4, #16]
 800a160:	4642      	mov	r2, r8
 800a162:	4631      	mov	r1, r6
 800a164:	4628      	mov	r0, r5
 800a166:	47b8      	blx	r7
 800a168:	3001      	adds	r0, #1
 800a16a:	d12b      	bne.n	800a1c4 <_printf_float+0x23c>
 800a16c:	e767      	b.n	800a03e <_printf_float+0xb6>
 800a16e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a172:	f240 80dd 	bls.w	800a330 <_printf_float+0x3a8>
 800a176:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a17a:	2200      	movs	r2, #0
 800a17c:	2300      	movs	r3, #0
 800a17e:	f7f6 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a182:	2800      	cmp	r0, #0
 800a184:	d033      	beq.n	800a1ee <_printf_float+0x266>
 800a186:	4a37      	ldr	r2, [pc, #220]	@ (800a264 <_printf_float+0x2dc>)
 800a188:	2301      	movs	r3, #1
 800a18a:	4631      	mov	r1, r6
 800a18c:	4628      	mov	r0, r5
 800a18e:	47b8      	blx	r7
 800a190:	3001      	adds	r0, #1
 800a192:	f43f af54 	beq.w	800a03e <_printf_float+0xb6>
 800a196:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a19a:	4543      	cmp	r3, r8
 800a19c:	db02      	blt.n	800a1a4 <_printf_float+0x21c>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	07d8      	lsls	r0, r3, #31
 800a1a2:	d50f      	bpl.n	800a1c4 <_printf_float+0x23c>
 800a1a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	f43f af45 	beq.w	800a03e <_printf_float+0xb6>
 800a1b4:	f04f 0900 	mov.w	r9, #0
 800a1b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1bc:	f104 0a1a 	add.w	sl, r4, #26
 800a1c0:	45c8      	cmp	r8, r9
 800a1c2:	dc09      	bgt.n	800a1d8 <_printf_float+0x250>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	079b      	lsls	r3, r3, #30
 800a1c8:	f100 8103 	bmi.w	800a3d2 <_printf_float+0x44a>
 800a1cc:	68e0      	ldr	r0, [r4, #12]
 800a1ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1d0:	4298      	cmp	r0, r3
 800a1d2:	bfb8      	it	lt
 800a1d4:	4618      	movlt	r0, r3
 800a1d6:	e734      	b.n	800a042 <_printf_float+0xba>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	4652      	mov	r2, sl
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4628      	mov	r0, r5
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	f43f af2b 	beq.w	800a03e <_printf_float+0xb6>
 800a1e8:	f109 0901 	add.w	r9, r9, #1
 800a1ec:	e7e8      	b.n	800a1c0 <_printf_float+0x238>
 800a1ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	dc39      	bgt.n	800a268 <_printf_float+0x2e0>
 800a1f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a264 <_printf_float+0x2dc>)
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	4631      	mov	r1, r6
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	47b8      	blx	r7
 800a1fe:	3001      	adds	r0, #1
 800a200:	f43f af1d 	beq.w	800a03e <_printf_float+0xb6>
 800a204:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a208:	ea59 0303 	orrs.w	r3, r9, r3
 800a20c:	d102      	bne.n	800a214 <_printf_float+0x28c>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	07d9      	lsls	r1, r3, #31
 800a212:	d5d7      	bpl.n	800a1c4 <_printf_float+0x23c>
 800a214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a218:	4631      	mov	r1, r6
 800a21a:	4628      	mov	r0, r5
 800a21c:	47b8      	blx	r7
 800a21e:	3001      	adds	r0, #1
 800a220:	f43f af0d 	beq.w	800a03e <_printf_float+0xb6>
 800a224:	f04f 0a00 	mov.w	sl, #0
 800a228:	f104 0b1a 	add.w	fp, r4, #26
 800a22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a22e:	425b      	negs	r3, r3
 800a230:	4553      	cmp	r3, sl
 800a232:	dc01      	bgt.n	800a238 <_printf_float+0x2b0>
 800a234:	464b      	mov	r3, r9
 800a236:	e793      	b.n	800a160 <_printf_float+0x1d8>
 800a238:	2301      	movs	r3, #1
 800a23a:	465a      	mov	r2, fp
 800a23c:	4631      	mov	r1, r6
 800a23e:	4628      	mov	r0, r5
 800a240:	47b8      	blx	r7
 800a242:	3001      	adds	r0, #1
 800a244:	f43f aefb 	beq.w	800a03e <_printf_float+0xb6>
 800a248:	f10a 0a01 	add.w	sl, sl, #1
 800a24c:	e7ee      	b.n	800a22c <_printf_float+0x2a4>
 800a24e:	bf00      	nop
 800a250:	7fefffff 	.word	0x7fefffff
 800a254:	0800e6f4 	.word	0x0800e6f4
 800a258:	0800e6f0 	.word	0x0800e6f0
 800a25c:	0800e6fc 	.word	0x0800e6fc
 800a260:	0800e6f8 	.word	0x0800e6f8
 800a264:	0800e700 	.word	0x0800e700
 800a268:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a26a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a26e:	4553      	cmp	r3, sl
 800a270:	bfa8      	it	ge
 800a272:	4653      	movge	r3, sl
 800a274:	2b00      	cmp	r3, #0
 800a276:	4699      	mov	r9, r3
 800a278:	dc36      	bgt.n	800a2e8 <_printf_float+0x360>
 800a27a:	f04f 0b00 	mov.w	fp, #0
 800a27e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a282:	f104 021a 	add.w	r2, r4, #26
 800a286:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a288:	9306      	str	r3, [sp, #24]
 800a28a:	eba3 0309 	sub.w	r3, r3, r9
 800a28e:	455b      	cmp	r3, fp
 800a290:	dc31      	bgt.n	800a2f6 <_printf_float+0x36e>
 800a292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a294:	459a      	cmp	sl, r3
 800a296:	dc3a      	bgt.n	800a30e <_printf_float+0x386>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	07da      	lsls	r2, r3, #31
 800a29c:	d437      	bmi.n	800a30e <_printf_float+0x386>
 800a29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a0:	ebaa 0903 	sub.w	r9, sl, r3
 800a2a4:	9b06      	ldr	r3, [sp, #24]
 800a2a6:	ebaa 0303 	sub.w	r3, sl, r3
 800a2aa:	4599      	cmp	r9, r3
 800a2ac:	bfa8      	it	ge
 800a2ae:	4699      	movge	r9, r3
 800a2b0:	f1b9 0f00 	cmp.w	r9, #0
 800a2b4:	dc33      	bgt.n	800a31e <_printf_float+0x396>
 800a2b6:	f04f 0800 	mov.w	r8, #0
 800a2ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2be:	f104 0b1a 	add.w	fp, r4, #26
 800a2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a2c8:	eba3 0309 	sub.w	r3, r3, r9
 800a2cc:	4543      	cmp	r3, r8
 800a2ce:	f77f af79 	ble.w	800a1c4 <_printf_float+0x23c>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	465a      	mov	r2, fp
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47b8      	blx	r7
 800a2dc:	3001      	adds	r0, #1
 800a2de:	f43f aeae 	beq.w	800a03e <_printf_float+0xb6>
 800a2e2:	f108 0801 	add.w	r8, r8, #1
 800a2e6:	e7ec      	b.n	800a2c2 <_printf_float+0x33a>
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	47b8      	blx	r7
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d1c2      	bne.n	800a27a <_printf_float+0x2f2>
 800a2f4:	e6a3      	b.n	800a03e <_printf_float+0xb6>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	9206      	str	r2, [sp, #24]
 800a2fe:	47b8      	blx	r7
 800a300:	3001      	adds	r0, #1
 800a302:	f43f ae9c 	beq.w	800a03e <_printf_float+0xb6>
 800a306:	9a06      	ldr	r2, [sp, #24]
 800a308:	f10b 0b01 	add.w	fp, fp, #1
 800a30c:	e7bb      	b.n	800a286 <_printf_float+0x2fe>
 800a30e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	47b8      	blx	r7
 800a318:	3001      	adds	r0, #1
 800a31a:	d1c0      	bne.n	800a29e <_printf_float+0x316>
 800a31c:	e68f      	b.n	800a03e <_printf_float+0xb6>
 800a31e:	9a06      	ldr	r2, [sp, #24]
 800a320:	464b      	mov	r3, r9
 800a322:	4442      	add	r2, r8
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	d1c3      	bne.n	800a2b6 <_printf_float+0x32e>
 800a32e:	e686      	b.n	800a03e <_printf_float+0xb6>
 800a330:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a334:	f1ba 0f01 	cmp.w	sl, #1
 800a338:	dc01      	bgt.n	800a33e <_printf_float+0x3b6>
 800a33a:	07db      	lsls	r3, r3, #31
 800a33c:	d536      	bpl.n	800a3ac <_printf_float+0x424>
 800a33e:	2301      	movs	r3, #1
 800a340:	4642      	mov	r2, r8
 800a342:	4631      	mov	r1, r6
 800a344:	4628      	mov	r0, r5
 800a346:	47b8      	blx	r7
 800a348:	3001      	adds	r0, #1
 800a34a:	f43f ae78 	beq.w	800a03e <_printf_float+0xb6>
 800a34e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a352:	4631      	mov	r1, r6
 800a354:	4628      	mov	r0, r5
 800a356:	47b8      	blx	r7
 800a358:	3001      	adds	r0, #1
 800a35a:	f43f ae70 	beq.w	800a03e <_printf_float+0xb6>
 800a35e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a362:	2200      	movs	r2, #0
 800a364:	2300      	movs	r3, #0
 800a366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a36a:	f7f6 fbad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a36e:	b9c0      	cbnz	r0, 800a3a2 <_printf_float+0x41a>
 800a370:	4653      	mov	r3, sl
 800a372:	f108 0201 	add.w	r2, r8, #1
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	47b8      	blx	r7
 800a37c:	3001      	adds	r0, #1
 800a37e:	d10c      	bne.n	800a39a <_printf_float+0x412>
 800a380:	e65d      	b.n	800a03e <_printf_float+0xb6>
 800a382:	2301      	movs	r3, #1
 800a384:	465a      	mov	r2, fp
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	f43f ae56 	beq.w	800a03e <_printf_float+0xb6>
 800a392:	f108 0801 	add.w	r8, r8, #1
 800a396:	45d0      	cmp	r8, sl
 800a398:	dbf3      	blt.n	800a382 <_printf_float+0x3fa>
 800a39a:	464b      	mov	r3, r9
 800a39c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3a0:	e6df      	b.n	800a162 <_printf_float+0x1da>
 800a3a2:	f04f 0800 	mov.w	r8, #0
 800a3a6:	f104 0b1a 	add.w	fp, r4, #26
 800a3aa:	e7f4      	b.n	800a396 <_printf_float+0x40e>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	4642      	mov	r2, r8
 800a3b0:	e7e1      	b.n	800a376 <_printf_float+0x3ee>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	464a      	mov	r2, r9
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	47b8      	blx	r7
 800a3bc:	3001      	adds	r0, #1
 800a3be:	f43f ae3e 	beq.w	800a03e <_printf_float+0xb6>
 800a3c2:	f108 0801 	add.w	r8, r8, #1
 800a3c6:	68e3      	ldr	r3, [r4, #12]
 800a3c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3ca:	1a5b      	subs	r3, r3, r1
 800a3cc:	4543      	cmp	r3, r8
 800a3ce:	dcf0      	bgt.n	800a3b2 <_printf_float+0x42a>
 800a3d0:	e6fc      	b.n	800a1cc <_printf_float+0x244>
 800a3d2:	f04f 0800 	mov.w	r8, #0
 800a3d6:	f104 0919 	add.w	r9, r4, #25
 800a3da:	e7f4      	b.n	800a3c6 <_printf_float+0x43e>

0800a3dc <_printf_common>:
 800a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	4616      	mov	r6, r2
 800a3e2:	4698      	mov	r8, r3
 800a3e4:	688a      	ldr	r2, [r1, #8]
 800a3e6:	690b      	ldr	r3, [r1, #16]
 800a3e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	bfb8      	it	lt
 800a3f0:	4613      	movlt	r3, r2
 800a3f2:	6033      	str	r3, [r6, #0]
 800a3f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3f8:	4607      	mov	r7, r0
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	b10a      	cbz	r2, 800a402 <_printf_common+0x26>
 800a3fe:	3301      	adds	r3, #1
 800a400:	6033      	str	r3, [r6, #0]
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	0699      	lsls	r1, r3, #26
 800a406:	bf42      	ittt	mi
 800a408:	6833      	ldrmi	r3, [r6, #0]
 800a40a:	3302      	addmi	r3, #2
 800a40c:	6033      	strmi	r3, [r6, #0]
 800a40e:	6825      	ldr	r5, [r4, #0]
 800a410:	f015 0506 	ands.w	r5, r5, #6
 800a414:	d106      	bne.n	800a424 <_printf_common+0x48>
 800a416:	f104 0a19 	add.w	sl, r4, #25
 800a41a:	68e3      	ldr	r3, [r4, #12]
 800a41c:	6832      	ldr	r2, [r6, #0]
 800a41e:	1a9b      	subs	r3, r3, r2
 800a420:	42ab      	cmp	r3, r5
 800a422:	dc26      	bgt.n	800a472 <_printf_common+0x96>
 800a424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a428:	6822      	ldr	r2, [r4, #0]
 800a42a:	3b00      	subs	r3, #0
 800a42c:	bf18      	it	ne
 800a42e:	2301      	movne	r3, #1
 800a430:	0692      	lsls	r2, r2, #26
 800a432:	d42b      	bmi.n	800a48c <_printf_common+0xb0>
 800a434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a438:	4641      	mov	r1, r8
 800a43a:	4638      	mov	r0, r7
 800a43c:	47c8      	blx	r9
 800a43e:	3001      	adds	r0, #1
 800a440:	d01e      	beq.n	800a480 <_printf_common+0xa4>
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	6922      	ldr	r2, [r4, #16]
 800a446:	f003 0306 	and.w	r3, r3, #6
 800a44a:	2b04      	cmp	r3, #4
 800a44c:	bf02      	ittt	eq
 800a44e:	68e5      	ldreq	r5, [r4, #12]
 800a450:	6833      	ldreq	r3, [r6, #0]
 800a452:	1aed      	subeq	r5, r5, r3
 800a454:	68a3      	ldr	r3, [r4, #8]
 800a456:	bf0c      	ite	eq
 800a458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a45c:	2500      	movne	r5, #0
 800a45e:	4293      	cmp	r3, r2
 800a460:	bfc4      	itt	gt
 800a462:	1a9b      	subgt	r3, r3, r2
 800a464:	18ed      	addgt	r5, r5, r3
 800a466:	2600      	movs	r6, #0
 800a468:	341a      	adds	r4, #26
 800a46a:	42b5      	cmp	r5, r6
 800a46c:	d11a      	bne.n	800a4a4 <_printf_common+0xc8>
 800a46e:	2000      	movs	r0, #0
 800a470:	e008      	b.n	800a484 <_printf_common+0xa8>
 800a472:	2301      	movs	r3, #1
 800a474:	4652      	mov	r2, sl
 800a476:	4641      	mov	r1, r8
 800a478:	4638      	mov	r0, r7
 800a47a:	47c8      	blx	r9
 800a47c:	3001      	adds	r0, #1
 800a47e:	d103      	bne.n	800a488 <_printf_common+0xac>
 800a480:	f04f 30ff 	mov.w	r0, #4294967295
 800a484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a488:	3501      	adds	r5, #1
 800a48a:	e7c6      	b.n	800a41a <_printf_common+0x3e>
 800a48c:	18e1      	adds	r1, r4, r3
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	2030      	movs	r0, #48	@ 0x30
 800a492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a496:	4422      	add	r2, r4
 800a498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a49c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4a0:	3302      	adds	r3, #2
 800a4a2:	e7c7      	b.n	800a434 <_printf_common+0x58>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	4641      	mov	r1, r8
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	47c8      	blx	r9
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	d0e6      	beq.n	800a480 <_printf_common+0xa4>
 800a4b2:	3601      	adds	r6, #1
 800a4b4:	e7d9      	b.n	800a46a <_printf_common+0x8e>
	...

0800a4b8 <_printf_i>:
 800a4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4bc:	7e0f      	ldrb	r7, [r1, #24]
 800a4be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4c0:	2f78      	cmp	r7, #120	@ 0x78
 800a4c2:	4691      	mov	r9, r2
 800a4c4:	4680      	mov	r8, r0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	469a      	mov	sl, r3
 800a4ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4ce:	d807      	bhi.n	800a4e0 <_printf_i+0x28>
 800a4d0:	2f62      	cmp	r7, #98	@ 0x62
 800a4d2:	d80a      	bhi.n	800a4ea <_printf_i+0x32>
 800a4d4:	2f00      	cmp	r7, #0
 800a4d6:	f000 80d1 	beq.w	800a67c <_printf_i+0x1c4>
 800a4da:	2f58      	cmp	r7, #88	@ 0x58
 800a4dc:	f000 80b8 	beq.w	800a650 <_printf_i+0x198>
 800a4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4e8:	e03a      	b.n	800a560 <_printf_i+0xa8>
 800a4ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4ee:	2b15      	cmp	r3, #21
 800a4f0:	d8f6      	bhi.n	800a4e0 <_printf_i+0x28>
 800a4f2:	a101      	add	r1, pc, #4	@ (adr r1, 800a4f8 <_printf_i+0x40>)
 800a4f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4f8:	0800a551 	.word	0x0800a551
 800a4fc:	0800a565 	.word	0x0800a565
 800a500:	0800a4e1 	.word	0x0800a4e1
 800a504:	0800a4e1 	.word	0x0800a4e1
 800a508:	0800a4e1 	.word	0x0800a4e1
 800a50c:	0800a4e1 	.word	0x0800a4e1
 800a510:	0800a565 	.word	0x0800a565
 800a514:	0800a4e1 	.word	0x0800a4e1
 800a518:	0800a4e1 	.word	0x0800a4e1
 800a51c:	0800a4e1 	.word	0x0800a4e1
 800a520:	0800a4e1 	.word	0x0800a4e1
 800a524:	0800a663 	.word	0x0800a663
 800a528:	0800a58f 	.word	0x0800a58f
 800a52c:	0800a61d 	.word	0x0800a61d
 800a530:	0800a4e1 	.word	0x0800a4e1
 800a534:	0800a4e1 	.word	0x0800a4e1
 800a538:	0800a685 	.word	0x0800a685
 800a53c:	0800a4e1 	.word	0x0800a4e1
 800a540:	0800a58f 	.word	0x0800a58f
 800a544:	0800a4e1 	.word	0x0800a4e1
 800a548:	0800a4e1 	.word	0x0800a4e1
 800a54c:	0800a625 	.word	0x0800a625
 800a550:	6833      	ldr	r3, [r6, #0]
 800a552:	1d1a      	adds	r2, r3, #4
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6032      	str	r2, [r6, #0]
 800a558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a55c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a560:	2301      	movs	r3, #1
 800a562:	e09c      	b.n	800a69e <_printf_i+0x1e6>
 800a564:	6833      	ldr	r3, [r6, #0]
 800a566:	6820      	ldr	r0, [r4, #0]
 800a568:	1d19      	adds	r1, r3, #4
 800a56a:	6031      	str	r1, [r6, #0]
 800a56c:	0606      	lsls	r6, r0, #24
 800a56e:	d501      	bpl.n	800a574 <_printf_i+0xbc>
 800a570:	681d      	ldr	r5, [r3, #0]
 800a572:	e003      	b.n	800a57c <_printf_i+0xc4>
 800a574:	0645      	lsls	r5, r0, #25
 800a576:	d5fb      	bpl.n	800a570 <_printf_i+0xb8>
 800a578:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	da03      	bge.n	800a588 <_printf_i+0xd0>
 800a580:	232d      	movs	r3, #45	@ 0x2d
 800a582:	426d      	negs	r5, r5
 800a584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a588:	4858      	ldr	r0, [pc, #352]	@ (800a6ec <_printf_i+0x234>)
 800a58a:	230a      	movs	r3, #10
 800a58c:	e011      	b.n	800a5b2 <_printf_i+0xfa>
 800a58e:	6821      	ldr	r1, [r4, #0]
 800a590:	6833      	ldr	r3, [r6, #0]
 800a592:	0608      	lsls	r0, r1, #24
 800a594:	f853 5b04 	ldr.w	r5, [r3], #4
 800a598:	d402      	bmi.n	800a5a0 <_printf_i+0xe8>
 800a59a:	0649      	lsls	r1, r1, #25
 800a59c:	bf48      	it	mi
 800a59e:	b2ad      	uxthmi	r5, r5
 800a5a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5a2:	4852      	ldr	r0, [pc, #328]	@ (800a6ec <_printf_i+0x234>)
 800a5a4:	6033      	str	r3, [r6, #0]
 800a5a6:	bf14      	ite	ne
 800a5a8:	230a      	movne	r3, #10
 800a5aa:	2308      	moveq	r3, #8
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5b2:	6866      	ldr	r6, [r4, #4]
 800a5b4:	60a6      	str	r6, [r4, #8]
 800a5b6:	2e00      	cmp	r6, #0
 800a5b8:	db05      	blt.n	800a5c6 <_printf_i+0x10e>
 800a5ba:	6821      	ldr	r1, [r4, #0]
 800a5bc:	432e      	orrs	r6, r5
 800a5be:	f021 0104 	bic.w	r1, r1, #4
 800a5c2:	6021      	str	r1, [r4, #0]
 800a5c4:	d04b      	beq.n	800a65e <_printf_i+0x1a6>
 800a5c6:	4616      	mov	r6, r2
 800a5c8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5cc:	fb03 5711 	mls	r7, r3, r1, r5
 800a5d0:	5dc7      	ldrb	r7, [r0, r7]
 800a5d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5d6:	462f      	mov	r7, r5
 800a5d8:	42bb      	cmp	r3, r7
 800a5da:	460d      	mov	r5, r1
 800a5dc:	d9f4      	bls.n	800a5c8 <_printf_i+0x110>
 800a5de:	2b08      	cmp	r3, #8
 800a5e0:	d10b      	bne.n	800a5fa <_printf_i+0x142>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	07df      	lsls	r7, r3, #31
 800a5e6:	d508      	bpl.n	800a5fa <_printf_i+0x142>
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	6861      	ldr	r1, [r4, #4]
 800a5ec:	4299      	cmp	r1, r3
 800a5ee:	bfde      	ittt	le
 800a5f0:	2330      	movle	r3, #48	@ 0x30
 800a5f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5fa:	1b92      	subs	r2, r2, r6
 800a5fc:	6122      	str	r2, [r4, #16]
 800a5fe:	f8cd a000 	str.w	sl, [sp]
 800a602:	464b      	mov	r3, r9
 800a604:	aa03      	add	r2, sp, #12
 800a606:	4621      	mov	r1, r4
 800a608:	4640      	mov	r0, r8
 800a60a:	f7ff fee7 	bl	800a3dc <_printf_common>
 800a60e:	3001      	adds	r0, #1
 800a610:	d14a      	bne.n	800a6a8 <_printf_i+0x1f0>
 800a612:	f04f 30ff 	mov.w	r0, #4294967295
 800a616:	b004      	add	sp, #16
 800a618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	f043 0320 	orr.w	r3, r3, #32
 800a622:	6023      	str	r3, [r4, #0]
 800a624:	4832      	ldr	r0, [pc, #200]	@ (800a6f0 <_printf_i+0x238>)
 800a626:	2778      	movs	r7, #120	@ 0x78
 800a628:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	6831      	ldr	r1, [r6, #0]
 800a630:	061f      	lsls	r7, r3, #24
 800a632:	f851 5b04 	ldr.w	r5, [r1], #4
 800a636:	d402      	bmi.n	800a63e <_printf_i+0x186>
 800a638:	065f      	lsls	r7, r3, #25
 800a63a:	bf48      	it	mi
 800a63c:	b2ad      	uxthmi	r5, r5
 800a63e:	6031      	str	r1, [r6, #0]
 800a640:	07d9      	lsls	r1, r3, #31
 800a642:	bf44      	itt	mi
 800a644:	f043 0320 	orrmi.w	r3, r3, #32
 800a648:	6023      	strmi	r3, [r4, #0]
 800a64a:	b11d      	cbz	r5, 800a654 <_printf_i+0x19c>
 800a64c:	2310      	movs	r3, #16
 800a64e:	e7ad      	b.n	800a5ac <_printf_i+0xf4>
 800a650:	4826      	ldr	r0, [pc, #152]	@ (800a6ec <_printf_i+0x234>)
 800a652:	e7e9      	b.n	800a628 <_printf_i+0x170>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	f023 0320 	bic.w	r3, r3, #32
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	e7f6      	b.n	800a64c <_printf_i+0x194>
 800a65e:	4616      	mov	r6, r2
 800a660:	e7bd      	b.n	800a5de <_printf_i+0x126>
 800a662:	6833      	ldr	r3, [r6, #0]
 800a664:	6825      	ldr	r5, [r4, #0]
 800a666:	6961      	ldr	r1, [r4, #20]
 800a668:	1d18      	adds	r0, r3, #4
 800a66a:	6030      	str	r0, [r6, #0]
 800a66c:	062e      	lsls	r6, r5, #24
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	d501      	bpl.n	800a676 <_printf_i+0x1be>
 800a672:	6019      	str	r1, [r3, #0]
 800a674:	e002      	b.n	800a67c <_printf_i+0x1c4>
 800a676:	0668      	lsls	r0, r5, #25
 800a678:	d5fb      	bpl.n	800a672 <_printf_i+0x1ba>
 800a67a:	8019      	strh	r1, [r3, #0]
 800a67c:	2300      	movs	r3, #0
 800a67e:	6123      	str	r3, [r4, #16]
 800a680:	4616      	mov	r6, r2
 800a682:	e7bc      	b.n	800a5fe <_printf_i+0x146>
 800a684:	6833      	ldr	r3, [r6, #0]
 800a686:	1d1a      	adds	r2, r3, #4
 800a688:	6032      	str	r2, [r6, #0]
 800a68a:	681e      	ldr	r6, [r3, #0]
 800a68c:	6862      	ldr	r2, [r4, #4]
 800a68e:	2100      	movs	r1, #0
 800a690:	4630      	mov	r0, r6
 800a692:	f7f5 fd9d 	bl	80001d0 <memchr>
 800a696:	b108      	cbz	r0, 800a69c <_printf_i+0x1e4>
 800a698:	1b80      	subs	r0, r0, r6
 800a69a:	6060      	str	r0, [r4, #4]
 800a69c:	6863      	ldr	r3, [r4, #4]
 800a69e:	6123      	str	r3, [r4, #16]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6a6:	e7aa      	b.n	800a5fe <_printf_i+0x146>
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	4632      	mov	r2, r6
 800a6ac:	4649      	mov	r1, r9
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	47d0      	blx	sl
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	d0ad      	beq.n	800a612 <_printf_i+0x15a>
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	079b      	lsls	r3, r3, #30
 800a6ba:	d413      	bmi.n	800a6e4 <_printf_i+0x22c>
 800a6bc:	68e0      	ldr	r0, [r4, #12]
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	4298      	cmp	r0, r3
 800a6c2:	bfb8      	it	lt
 800a6c4:	4618      	movlt	r0, r3
 800a6c6:	e7a6      	b.n	800a616 <_printf_i+0x15e>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	4632      	mov	r2, r6
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	47d0      	blx	sl
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	d09d      	beq.n	800a612 <_printf_i+0x15a>
 800a6d6:	3501      	adds	r5, #1
 800a6d8:	68e3      	ldr	r3, [r4, #12]
 800a6da:	9903      	ldr	r1, [sp, #12]
 800a6dc:	1a5b      	subs	r3, r3, r1
 800a6de:	42ab      	cmp	r3, r5
 800a6e0:	dcf2      	bgt.n	800a6c8 <_printf_i+0x210>
 800a6e2:	e7eb      	b.n	800a6bc <_printf_i+0x204>
 800a6e4:	2500      	movs	r5, #0
 800a6e6:	f104 0619 	add.w	r6, r4, #25
 800a6ea:	e7f5      	b.n	800a6d8 <_printf_i+0x220>
 800a6ec:	0800e702 	.word	0x0800e702
 800a6f0:	0800e713 	.word	0x0800e713

0800a6f4 <_scanf_float>:
 800a6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f8:	b087      	sub	sp, #28
 800a6fa:	4691      	mov	r9, r2
 800a6fc:	9303      	str	r3, [sp, #12]
 800a6fe:	688b      	ldr	r3, [r1, #8]
 800a700:	1e5a      	subs	r2, r3, #1
 800a702:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a706:	bf81      	itttt	hi
 800a708:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a70c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a710:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a714:	608b      	strhi	r3, [r1, #8]
 800a716:	680b      	ldr	r3, [r1, #0]
 800a718:	460a      	mov	r2, r1
 800a71a:	f04f 0500 	mov.w	r5, #0
 800a71e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a722:	f842 3b1c 	str.w	r3, [r2], #28
 800a726:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a72a:	4680      	mov	r8, r0
 800a72c:	460c      	mov	r4, r1
 800a72e:	bf98      	it	ls
 800a730:	f04f 0b00 	movls.w	fp, #0
 800a734:	9201      	str	r2, [sp, #4]
 800a736:	4616      	mov	r6, r2
 800a738:	46aa      	mov	sl, r5
 800a73a:	462f      	mov	r7, r5
 800a73c:	9502      	str	r5, [sp, #8]
 800a73e:	68a2      	ldr	r2, [r4, #8]
 800a740:	b15a      	cbz	r2, 800a75a <_scanf_float+0x66>
 800a742:	f8d9 3000 	ldr.w	r3, [r9]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2b4e      	cmp	r3, #78	@ 0x4e
 800a74a:	d863      	bhi.n	800a814 <_scanf_float+0x120>
 800a74c:	2b40      	cmp	r3, #64	@ 0x40
 800a74e:	d83b      	bhi.n	800a7c8 <_scanf_float+0xd4>
 800a750:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a754:	b2c8      	uxtb	r0, r1
 800a756:	280e      	cmp	r0, #14
 800a758:	d939      	bls.n	800a7ce <_scanf_float+0xda>
 800a75a:	b11f      	cbz	r7, 800a764 <_scanf_float+0x70>
 800a75c:	6823      	ldr	r3, [r4, #0]
 800a75e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a762:	6023      	str	r3, [r4, #0]
 800a764:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a768:	f1ba 0f01 	cmp.w	sl, #1
 800a76c:	f200 8114 	bhi.w	800a998 <_scanf_float+0x2a4>
 800a770:	9b01      	ldr	r3, [sp, #4]
 800a772:	429e      	cmp	r6, r3
 800a774:	f200 8105 	bhi.w	800a982 <_scanf_float+0x28e>
 800a778:	2001      	movs	r0, #1
 800a77a:	b007      	add	sp, #28
 800a77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a780:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a784:	2a0d      	cmp	r2, #13
 800a786:	d8e8      	bhi.n	800a75a <_scanf_float+0x66>
 800a788:	a101      	add	r1, pc, #4	@ (adr r1, 800a790 <_scanf_float+0x9c>)
 800a78a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a78e:	bf00      	nop
 800a790:	0800a8d9 	.word	0x0800a8d9
 800a794:	0800a75b 	.word	0x0800a75b
 800a798:	0800a75b 	.word	0x0800a75b
 800a79c:	0800a75b 	.word	0x0800a75b
 800a7a0:	0800a935 	.word	0x0800a935
 800a7a4:	0800a90f 	.word	0x0800a90f
 800a7a8:	0800a75b 	.word	0x0800a75b
 800a7ac:	0800a75b 	.word	0x0800a75b
 800a7b0:	0800a8e7 	.word	0x0800a8e7
 800a7b4:	0800a75b 	.word	0x0800a75b
 800a7b8:	0800a75b 	.word	0x0800a75b
 800a7bc:	0800a75b 	.word	0x0800a75b
 800a7c0:	0800a75b 	.word	0x0800a75b
 800a7c4:	0800a8a3 	.word	0x0800a8a3
 800a7c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a7cc:	e7da      	b.n	800a784 <_scanf_float+0x90>
 800a7ce:	290e      	cmp	r1, #14
 800a7d0:	d8c3      	bhi.n	800a75a <_scanf_float+0x66>
 800a7d2:	a001      	add	r0, pc, #4	@ (adr r0, 800a7d8 <_scanf_float+0xe4>)
 800a7d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a7d8:	0800a893 	.word	0x0800a893
 800a7dc:	0800a75b 	.word	0x0800a75b
 800a7e0:	0800a893 	.word	0x0800a893
 800a7e4:	0800a923 	.word	0x0800a923
 800a7e8:	0800a75b 	.word	0x0800a75b
 800a7ec:	0800a835 	.word	0x0800a835
 800a7f0:	0800a879 	.word	0x0800a879
 800a7f4:	0800a879 	.word	0x0800a879
 800a7f8:	0800a879 	.word	0x0800a879
 800a7fc:	0800a879 	.word	0x0800a879
 800a800:	0800a879 	.word	0x0800a879
 800a804:	0800a879 	.word	0x0800a879
 800a808:	0800a879 	.word	0x0800a879
 800a80c:	0800a879 	.word	0x0800a879
 800a810:	0800a879 	.word	0x0800a879
 800a814:	2b6e      	cmp	r3, #110	@ 0x6e
 800a816:	d809      	bhi.n	800a82c <_scanf_float+0x138>
 800a818:	2b60      	cmp	r3, #96	@ 0x60
 800a81a:	d8b1      	bhi.n	800a780 <_scanf_float+0x8c>
 800a81c:	2b54      	cmp	r3, #84	@ 0x54
 800a81e:	d07b      	beq.n	800a918 <_scanf_float+0x224>
 800a820:	2b59      	cmp	r3, #89	@ 0x59
 800a822:	d19a      	bne.n	800a75a <_scanf_float+0x66>
 800a824:	2d07      	cmp	r5, #7
 800a826:	d198      	bne.n	800a75a <_scanf_float+0x66>
 800a828:	2508      	movs	r5, #8
 800a82a:	e02f      	b.n	800a88c <_scanf_float+0x198>
 800a82c:	2b74      	cmp	r3, #116	@ 0x74
 800a82e:	d073      	beq.n	800a918 <_scanf_float+0x224>
 800a830:	2b79      	cmp	r3, #121	@ 0x79
 800a832:	e7f6      	b.n	800a822 <_scanf_float+0x12e>
 800a834:	6821      	ldr	r1, [r4, #0]
 800a836:	05c8      	lsls	r0, r1, #23
 800a838:	d51e      	bpl.n	800a878 <_scanf_float+0x184>
 800a83a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a83e:	6021      	str	r1, [r4, #0]
 800a840:	3701      	adds	r7, #1
 800a842:	f1bb 0f00 	cmp.w	fp, #0
 800a846:	d003      	beq.n	800a850 <_scanf_float+0x15c>
 800a848:	3201      	adds	r2, #1
 800a84a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a84e:	60a2      	str	r2, [r4, #8]
 800a850:	68a3      	ldr	r3, [r4, #8]
 800a852:	3b01      	subs	r3, #1
 800a854:	60a3      	str	r3, [r4, #8]
 800a856:	6923      	ldr	r3, [r4, #16]
 800a858:	3301      	adds	r3, #1
 800a85a:	6123      	str	r3, [r4, #16]
 800a85c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a860:	3b01      	subs	r3, #1
 800a862:	2b00      	cmp	r3, #0
 800a864:	f8c9 3004 	str.w	r3, [r9, #4]
 800a868:	f340 8082 	ble.w	800a970 <_scanf_float+0x27c>
 800a86c:	f8d9 3000 	ldr.w	r3, [r9]
 800a870:	3301      	adds	r3, #1
 800a872:	f8c9 3000 	str.w	r3, [r9]
 800a876:	e762      	b.n	800a73e <_scanf_float+0x4a>
 800a878:	eb1a 0105 	adds.w	r1, sl, r5
 800a87c:	f47f af6d 	bne.w	800a75a <_scanf_float+0x66>
 800a880:	6822      	ldr	r2, [r4, #0]
 800a882:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a886:	6022      	str	r2, [r4, #0]
 800a888:	460d      	mov	r5, r1
 800a88a:	468a      	mov	sl, r1
 800a88c:	f806 3b01 	strb.w	r3, [r6], #1
 800a890:	e7de      	b.n	800a850 <_scanf_float+0x15c>
 800a892:	6822      	ldr	r2, [r4, #0]
 800a894:	0610      	lsls	r0, r2, #24
 800a896:	f57f af60 	bpl.w	800a75a <_scanf_float+0x66>
 800a89a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a89e:	6022      	str	r2, [r4, #0]
 800a8a0:	e7f4      	b.n	800a88c <_scanf_float+0x198>
 800a8a2:	f1ba 0f00 	cmp.w	sl, #0
 800a8a6:	d10c      	bne.n	800a8c2 <_scanf_float+0x1ce>
 800a8a8:	b977      	cbnz	r7, 800a8c8 <_scanf_float+0x1d4>
 800a8aa:	6822      	ldr	r2, [r4, #0]
 800a8ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a8b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a8b4:	d108      	bne.n	800a8c8 <_scanf_float+0x1d4>
 800a8b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8ba:	6022      	str	r2, [r4, #0]
 800a8bc:	f04f 0a01 	mov.w	sl, #1
 800a8c0:	e7e4      	b.n	800a88c <_scanf_float+0x198>
 800a8c2:	f1ba 0f02 	cmp.w	sl, #2
 800a8c6:	d050      	beq.n	800a96a <_scanf_float+0x276>
 800a8c8:	2d01      	cmp	r5, #1
 800a8ca:	d002      	beq.n	800a8d2 <_scanf_float+0x1de>
 800a8cc:	2d04      	cmp	r5, #4
 800a8ce:	f47f af44 	bne.w	800a75a <_scanf_float+0x66>
 800a8d2:	3501      	adds	r5, #1
 800a8d4:	b2ed      	uxtb	r5, r5
 800a8d6:	e7d9      	b.n	800a88c <_scanf_float+0x198>
 800a8d8:	f1ba 0f01 	cmp.w	sl, #1
 800a8dc:	f47f af3d 	bne.w	800a75a <_scanf_float+0x66>
 800a8e0:	f04f 0a02 	mov.w	sl, #2
 800a8e4:	e7d2      	b.n	800a88c <_scanf_float+0x198>
 800a8e6:	b975      	cbnz	r5, 800a906 <_scanf_float+0x212>
 800a8e8:	2f00      	cmp	r7, #0
 800a8ea:	f47f af37 	bne.w	800a75c <_scanf_float+0x68>
 800a8ee:	6822      	ldr	r2, [r4, #0]
 800a8f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a8f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a8f8:	f040 8103 	bne.w	800ab02 <_scanf_float+0x40e>
 800a8fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a900:	6022      	str	r2, [r4, #0]
 800a902:	2501      	movs	r5, #1
 800a904:	e7c2      	b.n	800a88c <_scanf_float+0x198>
 800a906:	2d03      	cmp	r5, #3
 800a908:	d0e3      	beq.n	800a8d2 <_scanf_float+0x1de>
 800a90a:	2d05      	cmp	r5, #5
 800a90c:	e7df      	b.n	800a8ce <_scanf_float+0x1da>
 800a90e:	2d02      	cmp	r5, #2
 800a910:	f47f af23 	bne.w	800a75a <_scanf_float+0x66>
 800a914:	2503      	movs	r5, #3
 800a916:	e7b9      	b.n	800a88c <_scanf_float+0x198>
 800a918:	2d06      	cmp	r5, #6
 800a91a:	f47f af1e 	bne.w	800a75a <_scanf_float+0x66>
 800a91e:	2507      	movs	r5, #7
 800a920:	e7b4      	b.n	800a88c <_scanf_float+0x198>
 800a922:	6822      	ldr	r2, [r4, #0]
 800a924:	0591      	lsls	r1, r2, #22
 800a926:	f57f af18 	bpl.w	800a75a <_scanf_float+0x66>
 800a92a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a92e:	6022      	str	r2, [r4, #0]
 800a930:	9702      	str	r7, [sp, #8]
 800a932:	e7ab      	b.n	800a88c <_scanf_float+0x198>
 800a934:	6822      	ldr	r2, [r4, #0]
 800a936:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a93a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a93e:	d005      	beq.n	800a94c <_scanf_float+0x258>
 800a940:	0550      	lsls	r0, r2, #21
 800a942:	f57f af0a 	bpl.w	800a75a <_scanf_float+0x66>
 800a946:	2f00      	cmp	r7, #0
 800a948:	f000 80db 	beq.w	800ab02 <_scanf_float+0x40e>
 800a94c:	0591      	lsls	r1, r2, #22
 800a94e:	bf58      	it	pl
 800a950:	9902      	ldrpl	r1, [sp, #8]
 800a952:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a956:	bf58      	it	pl
 800a958:	1a79      	subpl	r1, r7, r1
 800a95a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a95e:	bf58      	it	pl
 800a960:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a964:	6022      	str	r2, [r4, #0]
 800a966:	2700      	movs	r7, #0
 800a968:	e790      	b.n	800a88c <_scanf_float+0x198>
 800a96a:	f04f 0a03 	mov.w	sl, #3
 800a96e:	e78d      	b.n	800a88c <_scanf_float+0x198>
 800a970:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a974:	4649      	mov	r1, r9
 800a976:	4640      	mov	r0, r8
 800a978:	4798      	blx	r3
 800a97a:	2800      	cmp	r0, #0
 800a97c:	f43f aedf 	beq.w	800a73e <_scanf_float+0x4a>
 800a980:	e6eb      	b.n	800a75a <_scanf_float+0x66>
 800a982:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a986:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a98a:	464a      	mov	r2, r9
 800a98c:	4640      	mov	r0, r8
 800a98e:	4798      	blx	r3
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	3b01      	subs	r3, #1
 800a994:	6123      	str	r3, [r4, #16]
 800a996:	e6eb      	b.n	800a770 <_scanf_float+0x7c>
 800a998:	1e6b      	subs	r3, r5, #1
 800a99a:	2b06      	cmp	r3, #6
 800a99c:	d824      	bhi.n	800a9e8 <_scanf_float+0x2f4>
 800a99e:	2d02      	cmp	r5, #2
 800a9a0:	d836      	bhi.n	800aa10 <_scanf_float+0x31c>
 800a9a2:	9b01      	ldr	r3, [sp, #4]
 800a9a4:	429e      	cmp	r6, r3
 800a9a6:	f67f aee7 	bls.w	800a778 <_scanf_float+0x84>
 800a9aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9b2:	464a      	mov	r2, r9
 800a9b4:	4640      	mov	r0, r8
 800a9b6:	4798      	blx	r3
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	6123      	str	r3, [r4, #16]
 800a9be:	e7f0      	b.n	800a9a2 <_scanf_float+0x2ae>
 800a9c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a9c8:	464a      	mov	r2, r9
 800a9ca:	4640      	mov	r0, r8
 800a9cc:	4798      	blx	r3
 800a9ce:	6923      	ldr	r3, [r4, #16]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	6123      	str	r3, [r4, #16]
 800a9d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9d8:	fa5f fa8a 	uxtb.w	sl, sl
 800a9dc:	f1ba 0f02 	cmp.w	sl, #2
 800a9e0:	d1ee      	bne.n	800a9c0 <_scanf_float+0x2cc>
 800a9e2:	3d03      	subs	r5, #3
 800a9e4:	b2ed      	uxtb	r5, r5
 800a9e6:	1b76      	subs	r6, r6, r5
 800a9e8:	6823      	ldr	r3, [r4, #0]
 800a9ea:	05da      	lsls	r2, r3, #23
 800a9ec:	d530      	bpl.n	800aa50 <_scanf_float+0x35c>
 800a9ee:	055b      	lsls	r3, r3, #21
 800a9f0:	d511      	bpl.n	800aa16 <_scanf_float+0x322>
 800a9f2:	9b01      	ldr	r3, [sp, #4]
 800a9f4:	429e      	cmp	r6, r3
 800a9f6:	f67f aebf 	bls.w	800a778 <_scanf_float+0x84>
 800a9fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa02:	464a      	mov	r2, r9
 800aa04:	4640      	mov	r0, r8
 800aa06:	4798      	blx	r3
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	6123      	str	r3, [r4, #16]
 800aa0e:	e7f0      	b.n	800a9f2 <_scanf_float+0x2fe>
 800aa10:	46aa      	mov	sl, r5
 800aa12:	46b3      	mov	fp, r6
 800aa14:	e7de      	b.n	800a9d4 <_scanf_float+0x2e0>
 800aa16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	2965      	cmp	r1, #101	@ 0x65
 800aa1e:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa22:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa26:	6123      	str	r3, [r4, #16]
 800aa28:	d00c      	beq.n	800aa44 <_scanf_float+0x350>
 800aa2a:	2945      	cmp	r1, #69	@ 0x45
 800aa2c:	d00a      	beq.n	800aa44 <_scanf_float+0x350>
 800aa2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa32:	464a      	mov	r2, r9
 800aa34:	4640      	mov	r0, r8
 800aa36:	4798      	blx	r3
 800aa38:	6923      	ldr	r3, [r4, #16]
 800aa3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	1eb5      	subs	r5, r6, #2
 800aa42:	6123      	str	r3, [r4, #16]
 800aa44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa48:	464a      	mov	r2, r9
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	4798      	blx	r3
 800aa4e:	462e      	mov	r6, r5
 800aa50:	6822      	ldr	r2, [r4, #0]
 800aa52:	f012 0210 	ands.w	r2, r2, #16
 800aa56:	d001      	beq.n	800aa5c <_scanf_float+0x368>
 800aa58:	2000      	movs	r0, #0
 800aa5a:	e68e      	b.n	800a77a <_scanf_float+0x86>
 800aa5c:	7032      	strb	r2, [r6, #0]
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aa64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa68:	d125      	bne.n	800aab6 <_scanf_float+0x3c2>
 800aa6a:	9b02      	ldr	r3, [sp, #8]
 800aa6c:	429f      	cmp	r7, r3
 800aa6e:	d00a      	beq.n	800aa86 <_scanf_float+0x392>
 800aa70:	1bda      	subs	r2, r3, r7
 800aa72:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aa76:	429e      	cmp	r6, r3
 800aa78:	bf28      	it	cs
 800aa7a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aa7e:	4922      	ldr	r1, [pc, #136]	@ (800ab08 <_scanf_float+0x414>)
 800aa80:	4630      	mov	r0, r6
 800aa82:	f000 f93d 	bl	800ad00 <siprintf>
 800aa86:	9901      	ldr	r1, [sp, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	f002 fc3c 	bl	800d308 <_strtod_r>
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	6821      	ldr	r1, [r4, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f011 0f02 	tst.w	r1, #2
 800aa9a:	ec57 6b10 	vmov	r6, r7, d0
 800aa9e:	f103 0204 	add.w	r2, r3, #4
 800aaa2:	d015      	beq.n	800aad0 <_scanf_float+0x3dc>
 800aaa4:	9903      	ldr	r1, [sp, #12]
 800aaa6:	600a      	str	r2, [r1, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	e9c3 6700 	strd	r6, r7, [r3]
 800aaae:	68e3      	ldr	r3, [r4, #12]
 800aab0:	3301      	adds	r3, #1
 800aab2:	60e3      	str	r3, [r4, #12]
 800aab4:	e7d0      	b.n	800aa58 <_scanf_float+0x364>
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d0e4      	beq.n	800aa86 <_scanf_float+0x392>
 800aabc:	9905      	ldr	r1, [sp, #20]
 800aabe:	230a      	movs	r3, #10
 800aac0:	3101      	adds	r1, #1
 800aac2:	4640      	mov	r0, r8
 800aac4:	f002 fca0 	bl	800d408 <_strtol_r>
 800aac8:	9b04      	ldr	r3, [sp, #16]
 800aaca:	9e05      	ldr	r6, [sp, #20]
 800aacc:	1ac2      	subs	r2, r0, r3
 800aace:	e7d0      	b.n	800aa72 <_scanf_float+0x37e>
 800aad0:	f011 0f04 	tst.w	r1, #4
 800aad4:	9903      	ldr	r1, [sp, #12]
 800aad6:	600a      	str	r2, [r1, #0]
 800aad8:	d1e6      	bne.n	800aaa8 <_scanf_float+0x3b4>
 800aada:	681d      	ldr	r5, [r3, #0]
 800aadc:	4632      	mov	r2, r6
 800aade:	463b      	mov	r3, r7
 800aae0:	4630      	mov	r0, r6
 800aae2:	4639      	mov	r1, r7
 800aae4:	f7f6 f822 	bl	8000b2c <__aeabi_dcmpun>
 800aae8:	b128      	cbz	r0, 800aaf6 <_scanf_float+0x402>
 800aaea:	4808      	ldr	r0, [pc, #32]	@ (800ab0c <_scanf_float+0x418>)
 800aaec:	f000 fa00 	bl	800aef0 <nanf>
 800aaf0:	ed85 0a00 	vstr	s0, [r5]
 800aaf4:	e7db      	b.n	800aaae <_scanf_float+0x3ba>
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	4639      	mov	r1, r7
 800aafa:	f7f6 f875 	bl	8000be8 <__aeabi_d2f>
 800aafe:	6028      	str	r0, [r5, #0]
 800ab00:	e7d5      	b.n	800aaae <_scanf_float+0x3ba>
 800ab02:	2700      	movs	r7, #0
 800ab04:	e62e      	b.n	800a764 <_scanf_float+0x70>
 800ab06:	bf00      	nop
 800ab08:	0800e724 	.word	0x0800e724
 800ab0c:	0800e865 	.word	0x0800e865

0800ab10 <std>:
 800ab10:	2300      	movs	r3, #0
 800ab12:	b510      	push	{r4, lr}
 800ab14:	4604      	mov	r4, r0
 800ab16:	e9c0 3300 	strd	r3, r3, [r0]
 800ab1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab1e:	6083      	str	r3, [r0, #8]
 800ab20:	8181      	strh	r1, [r0, #12]
 800ab22:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab24:	81c2      	strh	r2, [r0, #14]
 800ab26:	6183      	str	r3, [r0, #24]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	2208      	movs	r2, #8
 800ab2c:	305c      	adds	r0, #92	@ 0x5c
 800ab2e:	f000 f94c 	bl	800adca <memset>
 800ab32:	4b0d      	ldr	r3, [pc, #52]	@ (800ab68 <std+0x58>)
 800ab34:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab36:	4b0d      	ldr	r3, [pc, #52]	@ (800ab6c <std+0x5c>)
 800ab38:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab70 <std+0x60>)
 800ab3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab74 <std+0x64>)
 800ab40:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab42:	4b0d      	ldr	r3, [pc, #52]	@ (800ab78 <std+0x68>)
 800ab44:	6224      	str	r4, [r4, #32]
 800ab46:	429c      	cmp	r4, r3
 800ab48:	d006      	beq.n	800ab58 <std+0x48>
 800ab4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab4e:	4294      	cmp	r4, r2
 800ab50:	d002      	beq.n	800ab58 <std+0x48>
 800ab52:	33d0      	adds	r3, #208	@ 0xd0
 800ab54:	429c      	cmp	r4, r3
 800ab56:	d105      	bne.n	800ab64 <std+0x54>
 800ab58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab60:	f000 b9c2 	b.w	800aee8 <__retarget_lock_init_recursive>
 800ab64:	bd10      	pop	{r4, pc}
 800ab66:	bf00      	nop
 800ab68:	0800ad45 	.word	0x0800ad45
 800ab6c:	0800ad67 	.word	0x0800ad67
 800ab70:	0800ad9f 	.word	0x0800ad9f
 800ab74:	0800adc3 	.word	0x0800adc3
 800ab78:	2000206c 	.word	0x2000206c

0800ab7c <stdio_exit_handler>:
 800ab7c:	4a02      	ldr	r2, [pc, #8]	@ (800ab88 <stdio_exit_handler+0xc>)
 800ab7e:	4903      	ldr	r1, [pc, #12]	@ (800ab8c <stdio_exit_handler+0x10>)
 800ab80:	4803      	ldr	r0, [pc, #12]	@ (800ab90 <stdio_exit_handler+0x14>)
 800ab82:	f000 b869 	b.w	800ac58 <_fwalk_sglue>
 800ab86:	bf00      	nop
 800ab88:	200000fc 	.word	0x200000fc
 800ab8c:	0800d7c5 	.word	0x0800d7c5
 800ab90:	2000010c 	.word	0x2000010c

0800ab94 <cleanup_stdio>:
 800ab94:	6841      	ldr	r1, [r0, #4]
 800ab96:	4b0c      	ldr	r3, [pc, #48]	@ (800abc8 <cleanup_stdio+0x34>)
 800ab98:	4299      	cmp	r1, r3
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	d001      	beq.n	800aba4 <cleanup_stdio+0x10>
 800aba0:	f002 fe10 	bl	800d7c4 <_fflush_r>
 800aba4:	68a1      	ldr	r1, [r4, #8]
 800aba6:	4b09      	ldr	r3, [pc, #36]	@ (800abcc <cleanup_stdio+0x38>)
 800aba8:	4299      	cmp	r1, r3
 800abaa:	d002      	beq.n	800abb2 <cleanup_stdio+0x1e>
 800abac:	4620      	mov	r0, r4
 800abae:	f002 fe09 	bl	800d7c4 <_fflush_r>
 800abb2:	68e1      	ldr	r1, [r4, #12]
 800abb4:	4b06      	ldr	r3, [pc, #24]	@ (800abd0 <cleanup_stdio+0x3c>)
 800abb6:	4299      	cmp	r1, r3
 800abb8:	d004      	beq.n	800abc4 <cleanup_stdio+0x30>
 800abba:	4620      	mov	r0, r4
 800abbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc0:	f002 be00 	b.w	800d7c4 <_fflush_r>
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	bf00      	nop
 800abc8:	2000206c 	.word	0x2000206c
 800abcc:	200020d4 	.word	0x200020d4
 800abd0:	2000213c 	.word	0x2000213c

0800abd4 <global_stdio_init.part.0>:
 800abd4:	b510      	push	{r4, lr}
 800abd6:	4b0b      	ldr	r3, [pc, #44]	@ (800ac04 <global_stdio_init.part.0+0x30>)
 800abd8:	4c0b      	ldr	r4, [pc, #44]	@ (800ac08 <global_stdio_init.part.0+0x34>)
 800abda:	4a0c      	ldr	r2, [pc, #48]	@ (800ac0c <global_stdio_init.part.0+0x38>)
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	4620      	mov	r0, r4
 800abe0:	2200      	movs	r2, #0
 800abe2:	2104      	movs	r1, #4
 800abe4:	f7ff ff94 	bl	800ab10 <std>
 800abe8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abec:	2201      	movs	r2, #1
 800abee:	2109      	movs	r1, #9
 800abf0:	f7ff ff8e 	bl	800ab10 <std>
 800abf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abf8:	2202      	movs	r2, #2
 800abfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abfe:	2112      	movs	r1, #18
 800ac00:	f7ff bf86 	b.w	800ab10 <std>
 800ac04:	200021a4 	.word	0x200021a4
 800ac08:	2000206c 	.word	0x2000206c
 800ac0c:	0800ab7d 	.word	0x0800ab7d

0800ac10 <__sfp_lock_acquire>:
 800ac10:	4801      	ldr	r0, [pc, #4]	@ (800ac18 <__sfp_lock_acquire+0x8>)
 800ac12:	f000 b96a 	b.w	800aeea <__retarget_lock_acquire_recursive>
 800ac16:	bf00      	nop
 800ac18:	200021ad 	.word	0x200021ad

0800ac1c <__sfp_lock_release>:
 800ac1c:	4801      	ldr	r0, [pc, #4]	@ (800ac24 <__sfp_lock_release+0x8>)
 800ac1e:	f000 b965 	b.w	800aeec <__retarget_lock_release_recursive>
 800ac22:	bf00      	nop
 800ac24:	200021ad 	.word	0x200021ad

0800ac28 <__sinit>:
 800ac28:	b510      	push	{r4, lr}
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	f7ff fff0 	bl	800ac10 <__sfp_lock_acquire>
 800ac30:	6a23      	ldr	r3, [r4, #32]
 800ac32:	b11b      	cbz	r3, 800ac3c <__sinit+0x14>
 800ac34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac38:	f7ff bff0 	b.w	800ac1c <__sfp_lock_release>
 800ac3c:	4b04      	ldr	r3, [pc, #16]	@ (800ac50 <__sinit+0x28>)
 800ac3e:	6223      	str	r3, [r4, #32]
 800ac40:	4b04      	ldr	r3, [pc, #16]	@ (800ac54 <__sinit+0x2c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1f5      	bne.n	800ac34 <__sinit+0xc>
 800ac48:	f7ff ffc4 	bl	800abd4 <global_stdio_init.part.0>
 800ac4c:	e7f2      	b.n	800ac34 <__sinit+0xc>
 800ac4e:	bf00      	nop
 800ac50:	0800ab95 	.word	0x0800ab95
 800ac54:	200021a4 	.word	0x200021a4

0800ac58 <_fwalk_sglue>:
 800ac58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	4688      	mov	r8, r1
 800ac60:	4614      	mov	r4, r2
 800ac62:	2600      	movs	r6, #0
 800ac64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac68:	f1b9 0901 	subs.w	r9, r9, #1
 800ac6c:	d505      	bpl.n	800ac7a <_fwalk_sglue+0x22>
 800ac6e:	6824      	ldr	r4, [r4, #0]
 800ac70:	2c00      	cmp	r4, #0
 800ac72:	d1f7      	bne.n	800ac64 <_fwalk_sglue+0xc>
 800ac74:	4630      	mov	r0, r6
 800ac76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac7a:	89ab      	ldrh	r3, [r5, #12]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d907      	bls.n	800ac90 <_fwalk_sglue+0x38>
 800ac80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac84:	3301      	adds	r3, #1
 800ac86:	d003      	beq.n	800ac90 <_fwalk_sglue+0x38>
 800ac88:	4629      	mov	r1, r5
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	47c0      	blx	r8
 800ac8e:	4306      	orrs	r6, r0
 800ac90:	3568      	adds	r5, #104	@ 0x68
 800ac92:	e7e9      	b.n	800ac68 <_fwalk_sglue+0x10>

0800ac94 <sniprintf>:
 800ac94:	b40c      	push	{r2, r3}
 800ac96:	b530      	push	{r4, r5, lr}
 800ac98:	4b18      	ldr	r3, [pc, #96]	@ (800acfc <sniprintf+0x68>)
 800ac9a:	1e0c      	subs	r4, r1, #0
 800ac9c:	681d      	ldr	r5, [r3, #0]
 800ac9e:	b09d      	sub	sp, #116	@ 0x74
 800aca0:	da08      	bge.n	800acb4 <sniprintf+0x20>
 800aca2:	238b      	movs	r3, #139	@ 0x8b
 800aca4:	602b      	str	r3, [r5, #0]
 800aca6:	f04f 30ff 	mov.w	r0, #4294967295
 800acaa:	b01d      	add	sp, #116	@ 0x74
 800acac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acb0:	b002      	add	sp, #8
 800acb2:	4770      	bx	lr
 800acb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800acb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800acbc:	f04f 0300 	mov.w	r3, #0
 800acc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800acc2:	bf14      	ite	ne
 800acc4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800acc8:	4623      	moveq	r3, r4
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	9307      	str	r3, [sp, #28]
 800acce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acd2:	9002      	str	r0, [sp, #8]
 800acd4:	9006      	str	r0, [sp, #24]
 800acd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800acda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800acdc:	ab21      	add	r3, sp, #132	@ 0x84
 800acde:	a902      	add	r1, sp, #8
 800ace0:	4628      	mov	r0, r5
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	f002 fbee 	bl	800d4c4 <_svfiprintf_r>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	bfbc      	itt	lt
 800acec:	238b      	movlt	r3, #139	@ 0x8b
 800acee:	602b      	strlt	r3, [r5, #0]
 800acf0:	2c00      	cmp	r4, #0
 800acf2:	d0da      	beq.n	800acaa <sniprintf+0x16>
 800acf4:	9b02      	ldr	r3, [sp, #8]
 800acf6:	2200      	movs	r2, #0
 800acf8:	701a      	strb	r2, [r3, #0]
 800acfa:	e7d6      	b.n	800acaa <sniprintf+0x16>
 800acfc:	20000108 	.word	0x20000108

0800ad00 <siprintf>:
 800ad00:	b40e      	push	{r1, r2, r3}
 800ad02:	b510      	push	{r4, lr}
 800ad04:	b09d      	sub	sp, #116	@ 0x74
 800ad06:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ad08:	9002      	str	r0, [sp, #8]
 800ad0a:	9006      	str	r0, [sp, #24]
 800ad0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad10:	480a      	ldr	r0, [pc, #40]	@ (800ad3c <siprintf+0x3c>)
 800ad12:	9107      	str	r1, [sp, #28]
 800ad14:	9104      	str	r1, [sp, #16]
 800ad16:	490a      	ldr	r1, [pc, #40]	@ (800ad40 <siprintf+0x40>)
 800ad18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad1c:	9105      	str	r1, [sp, #20]
 800ad1e:	2400      	movs	r4, #0
 800ad20:	a902      	add	r1, sp, #8
 800ad22:	6800      	ldr	r0, [r0, #0]
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ad28:	f002 fbcc 	bl	800d4c4 <_svfiprintf_r>
 800ad2c:	9b02      	ldr	r3, [sp, #8]
 800ad2e:	701c      	strb	r4, [r3, #0]
 800ad30:	b01d      	add	sp, #116	@ 0x74
 800ad32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad36:	b003      	add	sp, #12
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	20000108 	.word	0x20000108
 800ad40:	ffff0208 	.word	0xffff0208

0800ad44 <__sread>:
 800ad44:	b510      	push	{r4, lr}
 800ad46:	460c      	mov	r4, r1
 800ad48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad4c:	f000 f87e 	bl	800ae4c <_read_r>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	bfab      	itete	ge
 800ad54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad56:	89a3      	ldrhlt	r3, [r4, #12]
 800ad58:	181b      	addge	r3, r3, r0
 800ad5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad5e:	bfac      	ite	ge
 800ad60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad62:	81a3      	strhlt	r3, [r4, #12]
 800ad64:	bd10      	pop	{r4, pc}

0800ad66 <__swrite>:
 800ad66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6a:	461f      	mov	r7, r3
 800ad6c:	898b      	ldrh	r3, [r1, #12]
 800ad6e:	05db      	lsls	r3, r3, #23
 800ad70:	4605      	mov	r5, r0
 800ad72:	460c      	mov	r4, r1
 800ad74:	4616      	mov	r6, r2
 800ad76:	d505      	bpl.n	800ad84 <__swrite+0x1e>
 800ad78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f000 f852 	bl	800ae28 <_lseek_r>
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad8e:	81a3      	strh	r3, [r4, #12]
 800ad90:	4632      	mov	r2, r6
 800ad92:	463b      	mov	r3, r7
 800ad94:	4628      	mov	r0, r5
 800ad96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9a:	f000 b869 	b.w	800ae70 <_write_r>

0800ad9e <__sseek>:
 800ad9e:	b510      	push	{r4, lr}
 800ada0:	460c      	mov	r4, r1
 800ada2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada6:	f000 f83f 	bl	800ae28 <_lseek_r>
 800adaa:	1c43      	adds	r3, r0, #1
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	bf15      	itete	ne
 800adb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800adb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800adb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800adba:	81a3      	strheq	r3, [r4, #12]
 800adbc:	bf18      	it	ne
 800adbe:	81a3      	strhne	r3, [r4, #12]
 800adc0:	bd10      	pop	{r4, pc}

0800adc2 <__sclose>:
 800adc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc6:	f000 b81f 	b.w	800ae08 <_close_r>

0800adca <memset>:
 800adca:	4402      	add	r2, r0
 800adcc:	4603      	mov	r3, r0
 800adce:	4293      	cmp	r3, r2
 800add0:	d100      	bne.n	800add4 <memset+0xa>
 800add2:	4770      	bx	lr
 800add4:	f803 1b01 	strb.w	r1, [r3], #1
 800add8:	e7f9      	b.n	800adce <memset+0x4>

0800adda <strncat>:
 800adda:	b530      	push	{r4, r5, lr}
 800addc:	4604      	mov	r4, r0
 800adde:	7825      	ldrb	r5, [r4, #0]
 800ade0:	4623      	mov	r3, r4
 800ade2:	3401      	adds	r4, #1
 800ade4:	2d00      	cmp	r5, #0
 800ade6:	d1fa      	bne.n	800adde <strncat+0x4>
 800ade8:	3a01      	subs	r2, #1
 800adea:	d304      	bcc.n	800adf6 <strncat+0x1c>
 800adec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adf0:	f803 4b01 	strb.w	r4, [r3], #1
 800adf4:	b904      	cbnz	r4, 800adf8 <strncat+0x1e>
 800adf6:	bd30      	pop	{r4, r5, pc}
 800adf8:	2a00      	cmp	r2, #0
 800adfa:	d1f5      	bne.n	800ade8 <strncat+0xe>
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	e7f3      	b.n	800ade8 <strncat+0xe>

0800ae00 <_localeconv_r>:
 800ae00:	4800      	ldr	r0, [pc, #0]	@ (800ae04 <_localeconv_r+0x4>)
 800ae02:	4770      	bx	lr
 800ae04:	20000248 	.word	0x20000248

0800ae08 <_close_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d06      	ldr	r5, [pc, #24]	@ (800ae24 <_close_r+0x1c>)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4604      	mov	r4, r0
 800ae10:	4608      	mov	r0, r1
 800ae12:	602b      	str	r3, [r5, #0]
 800ae14:	f7f6 fe88 	bl	8001b28 <_close>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_close_r+0x1a>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_close_r+0x1a>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	200021a8 	.word	0x200021a8

0800ae28 <_lseek_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d07      	ldr	r5, [pc, #28]	@ (800ae48 <_lseek_r+0x20>)
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	4608      	mov	r0, r1
 800ae30:	4611      	mov	r1, r2
 800ae32:	2200      	movs	r2, #0
 800ae34:	602a      	str	r2, [r5, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	f7f6 fe9d 	bl	8001b76 <_lseek>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_lseek_r+0x1e>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_lseek_r+0x1e>
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	200021a8 	.word	0x200021a8

0800ae4c <_read_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d07      	ldr	r5, [pc, #28]	@ (800ae6c <_read_r+0x20>)
 800ae50:	4604      	mov	r4, r0
 800ae52:	4608      	mov	r0, r1
 800ae54:	4611      	mov	r1, r2
 800ae56:	2200      	movs	r2, #0
 800ae58:	602a      	str	r2, [r5, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f7f6 fe2b 	bl	8001ab6 <_read>
 800ae60:	1c43      	adds	r3, r0, #1
 800ae62:	d102      	bne.n	800ae6a <_read_r+0x1e>
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	b103      	cbz	r3, 800ae6a <_read_r+0x1e>
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	200021a8 	.word	0x200021a8

0800ae70 <_write_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d07      	ldr	r5, [pc, #28]	@ (800ae90 <_write_r+0x20>)
 800ae74:	4604      	mov	r4, r0
 800ae76:	4608      	mov	r0, r1
 800ae78:	4611      	mov	r1, r2
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	602a      	str	r2, [r5, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	f7f6 fe36 	bl	8001af0 <_write>
 800ae84:	1c43      	adds	r3, r0, #1
 800ae86:	d102      	bne.n	800ae8e <_write_r+0x1e>
 800ae88:	682b      	ldr	r3, [r5, #0]
 800ae8a:	b103      	cbz	r3, 800ae8e <_write_r+0x1e>
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	bd38      	pop	{r3, r4, r5, pc}
 800ae90:	200021a8 	.word	0x200021a8

0800ae94 <__errno>:
 800ae94:	4b01      	ldr	r3, [pc, #4]	@ (800ae9c <__errno+0x8>)
 800ae96:	6818      	ldr	r0, [r3, #0]
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	20000108 	.word	0x20000108

0800aea0 <__libc_init_array>:
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	4d0d      	ldr	r5, [pc, #52]	@ (800aed8 <__libc_init_array+0x38>)
 800aea4:	4c0d      	ldr	r4, [pc, #52]	@ (800aedc <__libc_init_array+0x3c>)
 800aea6:	1b64      	subs	r4, r4, r5
 800aea8:	10a4      	asrs	r4, r4, #2
 800aeaa:	2600      	movs	r6, #0
 800aeac:	42a6      	cmp	r6, r4
 800aeae:	d109      	bne.n	800aec4 <__libc_init_array+0x24>
 800aeb0:	4d0b      	ldr	r5, [pc, #44]	@ (800aee0 <__libc_init_array+0x40>)
 800aeb2:	4c0c      	ldr	r4, [pc, #48]	@ (800aee4 <__libc_init_array+0x44>)
 800aeb4:	f003 fb76 	bl	800e5a4 <_init>
 800aeb8:	1b64      	subs	r4, r4, r5
 800aeba:	10a4      	asrs	r4, r4, #2
 800aebc:	2600      	movs	r6, #0
 800aebe:	42a6      	cmp	r6, r4
 800aec0:	d105      	bne.n	800aece <__libc_init_array+0x2e>
 800aec2:	bd70      	pop	{r4, r5, r6, pc}
 800aec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec8:	4798      	blx	r3
 800aeca:	3601      	adds	r6, #1
 800aecc:	e7ee      	b.n	800aeac <__libc_init_array+0xc>
 800aece:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed2:	4798      	blx	r3
 800aed4:	3601      	adds	r6, #1
 800aed6:	e7f2      	b.n	800aebe <__libc_init_array+0x1e>
 800aed8:	0800eb24 	.word	0x0800eb24
 800aedc:	0800eb24 	.word	0x0800eb24
 800aee0:	0800eb24 	.word	0x0800eb24
 800aee4:	0800eb28 	.word	0x0800eb28

0800aee8 <__retarget_lock_init_recursive>:
 800aee8:	4770      	bx	lr

0800aeea <__retarget_lock_acquire_recursive>:
 800aeea:	4770      	bx	lr

0800aeec <__retarget_lock_release_recursive>:
 800aeec:	4770      	bx	lr
	...

0800aef0 <nanf>:
 800aef0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aef8 <nanf+0x8>
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	7fc00000 	.word	0x7fc00000

0800aefc <quorem>:
 800aefc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	6903      	ldr	r3, [r0, #16]
 800af02:	690c      	ldr	r4, [r1, #16]
 800af04:	42a3      	cmp	r3, r4
 800af06:	4607      	mov	r7, r0
 800af08:	db7e      	blt.n	800b008 <quorem+0x10c>
 800af0a:	3c01      	subs	r4, #1
 800af0c:	f101 0814 	add.w	r8, r1, #20
 800af10:	00a3      	lsls	r3, r4, #2
 800af12:	f100 0514 	add.w	r5, r0, #20
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af1c:	9301      	str	r3, [sp, #4]
 800af1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af26:	3301      	adds	r3, #1
 800af28:	429a      	cmp	r2, r3
 800af2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af2e:	fbb2 f6f3 	udiv	r6, r2, r3
 800af32:	d32e      	bcc.n	800af92 <quorem+0x96>
 800af34:	f04f 0a00 	mov.w	sl, #0
 800af38:	46c4      	mov	ip, r8
 800af3a:	46ae      	mov	lr, r5
 800af3c:	46d3      	mov	fp, sl
 800af3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af42:	b298      	uxth	r0, r3
 800af44:	fb06 a000 	mla	r0, r6, r0, sl
 800af48:	0c02      	lsrs	r2, r0, #16
 800af4a:	0c1b      	lsrs	r3, r3, #16
 800af4c:	fb06 2303 	mla	r3, r6, r3, r2
 800af50:	f8de 2000 	ldr.w	r2, [lr]
 800af54:	b280      	uxth	r0, r0
 800af56:	b292      	uxth	r2, r2
 800af58:	1a12      	subs	r2, r2, r0
 800af5a:	445a      	add	r2, fp
 800af5c:	f8de 0000 	ldr.w	r0, [lr]
 800af60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af64:	b29b      	uxth	r3, r3
 800af66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af6e:	b292      	uxth	r2, r2
 800af70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af74:	45e1      	cmp	r9, ip
 800af76:	f84e 2b04 	str.w	r2, [lr], #4
 800af7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af7e:	d2de      	bcs.n	800af3e <quorem+0x42>
 800af80:	9b00      	ldr	r3, [sp, #0]
 800af82:	58eb      	ldr	r3, [r5, r3]
 800af84:	b92b      	cbnz	r3, 800af92 <quorem+0x96>
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	3b04      	subs	r3, #4
 800af8a:	429d      	cmp	r5, r3
 800af8c:	461a      	mov	r2, r3
 800af8e:	d32f      	bcc.n	800aff0 <quorem+0xf4>
 800af90:	613c      	str	r4, [r7, #16]
 800af92:	4638      	mov	r0, r7
 800af94:	f001 f9c8 	bl	800c328 <__mcmp>
 800af98:	2800      	cmp	r0, #0
 800af9a:	db25      	blt.n	800afe8 <quorem+0xec>
 800af9c:	4629      	mov	r1, r5
 800af9e:	2000      	movs	r0, #0
 800afa0:	f858 2b04 	ldr.w	r2, [r8], #4
 800afa4:	f8d1 c000 	ldr.w	ip, [r1]
 800afa8:	fa1f fe82 	uxth.w	lr, r2
 800afac:	fa1f f38c 	uxth.w	r3, ip
 800afb0:	eba3 030e 	sub.w	r3, r3, lr
 800afb4:	4403      	add	r3, r0
 800afb6:	0c12      	lsrs	r2, r2, #16
 800afb8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800afbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afc6:	45c1      	cmp	r9, r8
 800afc8:	f841 3b04 	str.w	r3, [r1], #4
 800afcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800afd0:	d2e6      	bcs.n	800afa0 <quorem+0xa4>
 800afd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afda:	b922      	cbnz	r2, 800afe6 <quorem+0xea>
 800afdc:	3b04      	subs	r3, #4
 800afde:	429d      	cmp	r5, r3
 800afe0:	461a      	mov	r2, r3
 800afe2:	d30b      	bcc.n	800affc <quorem+0x100>
 800afe4:	613c      	str	r4, [r7, #16]
 800afe6:	3601      	adds	r6, #1
 800afe8:	4630      	mov	r0, r6
 800afea:	b003      	add	sp, #12
 800afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff0:	6812      	ldr	r2, [r2, #0]
 800aff2:	3b04      	subs	r3, #4
 800aff4:	2a00      	cmp	r2, #0
 800aff6:	d1cb      	bne.n	800af90 <quorem+0x94>
 800aff8:	3c01      	subs	r4, #1
 800affa:	e7c6      	b.n	800af8a <quorem+0x8e>
 800affc:	6812      	ldr	r2, [r2, #0]
 800affe:	3b04      	subs	r3, #4
 800b000:	2a00      	cmp	r2, #0
 800b002:	d1ef      	bne.n	800afe4 <quorem+0xe8>
 800b004:	3c01      	subs	r4, #1
 800b006:	e7ea      	b.n	800afde <quorem+0xe2>
 800b008:	2000      	movs	r0, #0
 800b00a:	e7ee      	b.n	800afea <quorem+0xee>
 800b00c:	0000      	movs	r0, r0
	...

0800b010 <_dtoa_r>:
 800b010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	69c7      	ldr	r7, [r0, #28]
 800b016:	b097      	sub	sp, #92	@ 0x5c
 800b018:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b01c:	ec55 4b10 	vmov	r4, r5, d0
 800b020:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b022:	9107      	str	r1, [sp, #28]
 800b024:	4681      	mov	r9, r0
 800b026:	920c      	str	r2, [sp, #48]	@ 0x30
 800b028:	9311      	str	r3, [sp, #68]	@ 0x44
 800b02a:	b97f      	cbnz	r7, 800b04c <_dtoa_r+0x3c>
 800b02c:	2010      	movs	r0, #16
 800b02e:	f000 fe09 	bl	800bc44 <malloc>
 800b032:	4602      	mov	r2, r0
 800b034:	f8c9 001c 	str.w	r0, [r9, #28]
 800b038:	b920      	cbnz	r0, 800b044 <_dtoa_r+0x34>
 800b03a:	4ba9      	ldr	r3, [pc, #676]	@ (800b2e0 <_dtoa_r+0x2d0>)
 800b03c:	21ef      	movs	r1, #239	@ 0xef
 800b03e:	48a9      	ldr	r0, [pc, #676]	@ (800b2e4 <_dtoa_r+0x2d4>)
 800b040:	f002 fc3a 	bl	800d8b8 <__assert_func>
 800b044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b048:	6007      	str	r7, [r0, #0]
 800b04a:	60c7      	str	r7, [r0, #12]
 800b04c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b050:	6819      	ldr	r1, [r3, #0]
 800b052:	b159      	cbz	r1, 800b06c <_dtoa_r+0x5c>
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	604a      	str	r2, [r1, #4]
 800b058:	2301      	movs	r3, #1
 800b05a:	4093      	lsls	r3, r2
 800b05c:	608b      	str	r3, [r1, #8]
 800b05e:	4648      	mov	r0, r9
 800b060:	f000 fee6 	bl	800be30 <_Bfree>
 800b064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	1e2b      	subs	r3, r5, #0
 800b06e:	bfb9      	ittee	lt
 800b070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b074:	9305      	strlt	r3, [sp, #20]
 800b076:	2300      	movge	r3, #0
 800b078:	6033      	strge	r3, [r6, #0]
 800b07a:	9f05      	ldr	r7, [sp, #20]
 800b07c:	4b9a      	ldr	r3, [pc, #616]	@ (800b2e8 <_dtoa_r+0x2d8>)
 800b07e:	bfbc      	itt	lt
 800b080:	2201      	movlt	r2, #1
 800b082:	6032      	strlt	r2, [r6, #0]
 800b084:	43bb      	bics	r3, r7
 800b086:	d112      	bne.n	800b0ae <_dtoa_r+0x9e>
 800b088:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b08a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b094:	4323      	orrs	r3, r4
 800b096:	f000 855a 	beq.w	800bb4e <_dtoa_r+0xb3e>
 800b09a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b09c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b2fc <_dtoa_r+0x2ec>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 855c 	beq.w	800bb5e <_dtoa_r+0xb4e>
 800b0a6:	f10a 0303 	add.w	r3, sl, #3
 800b0aa:	f000 bd56 	b.w	800bb5a <_dtoa_r+0xb4a>
 800b0ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	ec51 0b17 	vmov	r0, r1, d7
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b0be:	f7f5 fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0c2:	4680      	mov	r8, r0
 800b0c4:	b158      	cbz	r0, 800b0de <_dtoa_r+0xce>
 800b0c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	6013      	str	r3, [r2, #0]
 800b0cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0ce:	b113      	cbz	r3, 800b0d6 <_dtoa_r+0xc6>
 800b0d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b0d2:	4b86      	ldr	r3, [pc, #536]	@ (800b2ec <_dtoa_r+0x2dc>)
 800b0d4:	6013      	str	r3, [r2, #0]
 800b0d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b300 <_dtoa_r+0x2f0>
 800b0da:	f000 bd40 	b.w	800bb5e <_dtoa_r+0xb4e>
 800b0de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b0e2:	aa14      	add	r2, sp, #80	@ 0x50
 800b0e4:	a915      	add	r1, sp, #84	@ 0x54
 800b0e6:	4648      	mov	r0, r9
 800b0e8:	f001 fa3e 	bl	800c568 <__d2b>
 800b0ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b0f0:	9002      	str	r0, [sp, #8]
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	d078      	beq.n	800b1e8 <_dtoa_r+0x1d8>
 800b0f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b10c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b110:	4619      	mov	r1, r3
 800b112:	2200      	movs	r2, #0
 800b114:	4b76      	ldr	r3, [pc, #472]	@ (800b2f0 <_dtoa_r+0x2e0>)
 800b116:	f7f5 f8b7 	bl	8000288 <__aeabi_dsub>
 800b11a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b2c8 <_dtoa_r+0x2b8>)
 800b11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b120:	f7f5 fa6a 	bl	80005f8 <__aeabi_dmul>
 800b124:	a36a      	add	r3, pc, #424	@ (adr r3, 800b2d0 <_dtoa_r+0x2c0>)
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	f7f5 f8af 	bl	800028c <__adddf3>
 800b12e:	4604      	mov	r4, r0
 800b130:	4630      	mov	r0, r6
 800b132:	460d      	mov	r5, r1
 800b134:	f7f5 f9f6 	bl	8000524 <__aeabi_i2d>
 800b138:	a367      	add	r3, pc, #412	@ (adr r3, 800b2d8 <_dtoa_r+0x2c8>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 fa5b 	bl	80005f8 <__aeabi_dmul>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	4620      	mov	r0, r4
 800b148:	4629      	mov	r1, r5
 800b14a:	f7f5 f89f 	bl	800028c <__adddf3>
 800b14e:	4604      	mov	r4, r0
 800b150:	460d      	mov	r5, r1
 800b152:	f7f5 fd01 	bl	8000b58 <__aeabi_d2iz>
 800b156:	2200      	movs	r2, #0
 800b158:	4607      	mov	r7, r0
 800b15a:	2300      	movs	r3, #0
 800b15c:	4620      	mov	r0, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	f7f5 fcbc 	bl	8000adc <__aeabi_dcmplt>
 800b164:	b140      	cbz	r0, 800b178 <_dtoa_r+0x168>
 800b166:	4638      	mov	r0, r7
 800b168:	f7f5 f9dc 	bl	8000524 <__aeabi_i2d>
 800b16c:	4622      	mov	r2, r4
 800b16e:	462b      	mov	r3, r5
 800b170:	f7f5 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b174:	b900      	cbnz	r0, 800b178 <_dtoa_r+0x168>
 800b176:	3f01      	subs	r7, #1
 800b178:	2f16      	cmp	r7, #22
 800b17a:	d852      	bhi.n	800b222 <_dtoa_r+0x212>
 800b17c:	4b5d      	ldr	r3, [pc, #372]	@ (800b2f4 <_dtoa_r+0x2e4>)
 800b17e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b18a:	f7f5 fca7 	bl	8000adc <__aeabi_dcmplt>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d049      	beq.n	800b226 <_dtoa_r+0x216>
 800b192:	3f01      	subs	r7, #1
 800b194:	2300      	movs	r3, #0
 800b196:	9310      	str	r3, [sp, #64]	@ 0x40
 800b198:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b19a:	1b9b      	subs	r3, r3, r6
 800b19c:	1e5a      	subs	r2, r3, #1
 800b19e:	bf45      	ittet	mi
 800b1a0:	f1c3 0301 	rsbmi	r3, r3, #1
 800b1a4:	9300      	strmi	r3, [sp, #0]
 800b1a6:	2300      	movpl	r3, #0
 800b1a8:	2300      	movmi	r3, #0
 800b1aa:	9206      	str	r2, [sp, #24]
 800b1ac:	bf54      	ite	pl
 800b1ae:	9300      	strpl	r3, [sp, #0]
 800b1b0:	9306      	strmi	r3, [sp, #24]
 800b1b2:	2f00      	cmp	r7, #0
 800b1b4:	db39      	blt.n	800b22a <_dtoa_r+0x21a>
 800b1b6:	9b06      	ldr	r3, [sp, #24]
 800b1b8:	970d      	str	r7, [sp, #52]	@ 0x34
 800b1ba:	443b      	add	r3, r7
 800b1bc:	9306      	str	r3, [sp, #24]
 800b1be:	2300      	movs	r3, #0
 800b1c0:	9308      	str	r3, [sp, #32]
 800b1c2:	9b07      	ldr	r3, [sp, #28]
 800b1c4:	2b09      	cmp	r3, #9
 800b1c6:	d863      	bhi.n	800b290 <_dtoa_r+0x280>
 800b1c8:	2b05      	cmp	r3, #5
 800b1ca:	bfc4      	itt	gt
 800b1cc:	3b04      	subgt	r3, #4
 800b1ce:	9307      	strgt	r3, [sp, #28]
 800b1d0:	9b07      	ldr	r3, [sp, #28]
 800b1d2:	f1a3 0302 	sub.w	r3, r3, #2
 800b1d6:	bfcc      	ite	gt
 800b1d8:	2400      	movgt	r4, #0
 800b1da:	2401      	movle	r4, #1
 800b1dc:	2b03      	cmp	r3, #3
 800b1de:	d863      	bhi.n	800b2a8 <_dtoa_r+0x298>
 800b1e0:	e8df f003 	tbb	[pc, r3]
 800b1e4:	2b375452 	.word	0x2b375452
 800b1e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b1ec:	441e      	add	r6, r3
 800b1ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b1f2:	2b20      	cmp	r3, #32
 800b1f4:	bfc1      	itttt	gt
 800b1f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b1fa:	409f      	lslgt	r7, r3
 800b1fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b200:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b204:	bfd6      	itet	le
 800b206:	f1c3 0320 	rsble	r3, r3, #32
 800b20a:	ea47 0003 	orrgt.w	r0, r7, r3
 800b20e:	fa04 f003 	lslle.w	r0, r4, r3
 800b212:	f7f5 f977 	bl	8000504 <__aeabi_ui2d>
 800b216:	2201      	movs	r2, #1
 800b218:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b21c:	3e01      	subs	r6, #1
 800b21e:	9212      	str	r2, [sp, #72]	@ 0x48
 800b220:	e776      	b.n	800b110 <_dtoa_r+0x100>
 800b222:	2301      	movs	r3, #1
 800b224:	e7b7      	b.n	800b196 <_dtoa_r+0x186>
 800b226:	9010      	str	r0, [sp, #64]	@ 0x40
 800b228:	e7b6      	b.n	800b198 <_dtoa_r+0x188>
 800b22a:	9b00      	ldr	r3, [sp, #0]
 800b22c:	1bdb      	subs	r3, r3, r7
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	427b      	negs	r3, r7
 800b232:	9308      	str	r3, [sp, #32]
 800b234:	2300      	movs	r3, #0
 800b236:	930d      	str	r3, [sp, #52]	@ 0x34
 800b238:	e7c3      	b.n	800b1c2 <_dtoa_r+0x1b2>
 800b23a:	2301      	movs	r3, #1
 800b23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b23e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b240:	eb07 0b03 	add.w	fp, r7, r3
 800b244:	f10b 0301 	add.w	r3, fp, #1
 800b248:	2b01      	cmp	r3, #1
 800b24a:	9303      	str	r3, [sp, #12]
 800b24c:	bfb8      	it	lt
 800b24e:	2301      	movlt	r3, #1
 800b250:	e006      	b.n	800b260 <_dtoa_r+0x250>
 800b252:	2301      	movs	r3, #1
 800b254:	9309      	str	r3, [sp, #36]	@ 0x24
 800b256:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b258:	2b00      	cmp	r3, #0
 800b25a:	dd28      	ble.n	800b2ae <_dtoa_r+0x29e>
 800b25c:	469b      	mov	fp, r3
 800b25e:	9303      	str	r3, [sp, #12]
 800b260:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b264:	2100      	movs	r1, #0
 800b266:	2204      	movs	r2, #4
 800b268:	f102 0514 	add.w	r5, r2, #20
 800b26c:	429d      	cmp	r5, r3
 800b26e:	d926      	bls.n	800b2be <_dtoa_r+0x2ae>
 800b270:	6041      	str	r1, [r0, #4]
 800b272:	4648      	mov	r0, r9
 800b274:	f000 fd9c 	bl	800bdb0 <_Balloc>
 800b278:	4682      	mov	sl, r0
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d142      	bne.n	800b304 <_dtoa_r+0x2f4>
 800b27e:	4b1e      	ldr	r3, [pc, #120]	@ (800b2f8 <_dtoa_r+0x2e8>)
 800b280:	4602      	mov	r2, r0
 800b282:	f240 11af 	movw	r1, #431	@ 0x1af
 800b286:	e6da      	b.n	800b03e <_dtoa_r+0x2e>
 800b288:	2300      	movs	r3, #0
 800b28a:	e7e3      	b.n	800b254 <_dtoa_r+0x244>
 800b28c:	2300      	movs	r3, #0
 800b28e:	e7d5      	b.n	800b23c <_dtoa_r+0x22c>
 800b290:	2401      	movs	r4, #1
 800b292:	2300      	movs	r3, #0
 800b294:	9307      	str	r3, [sp, #28]
 800b296:	9409      	str	r4, [sp, #36]	@ 0x24
 800b298:	f04f 3bff 	mov.w	fp, #4294967295
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8cd b00c 	str.w	fp, [sp, #12]
 800b2a2:	2312      	movs	r3, #18
 800b2a4:	920c      	str	r2, [sp, #48]	@ 0x30
 800b2a6:	e7db      	b.n	800b260 <_dtoa_r+0x250>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2ac:	e7f4      	b.n	800b298 <_dtoa_r+0x288>
 800b2ae:	f04f 0b01 	mov.w	fp, #1
 800b2b2:	f8cd b00c 	str.w	fp, [sp, #12]
 800b2b6:	465b      	mov	r3, fp
 800b2b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b2bc:	e7d0      	b.n	800b260 <_dtoa_r+0x250>
 800b2be:	3101      	adds	r1, #1
 800b2c0:	0052      	lsls	r2, r2, #1
 800b2c2:	e7d1      	b.n	800b268 <_dtoa_r+0x258>
 800b2c4:	f3af 8000 	nop.w
 800b2c8:	636f4361 	.word	0x636f4361
 800b2cc:	3fd287a7 	.word	0x3fd287a7
 800b2d0:	8b60c8b3 	.word	0x8b60c8b3
 800b2d4:	3fc68a28 	.word	0x3fc68a28
 800b2d8:	509f79fb 	.word	0x509f79fb
 800b2dc:	3fd34413 	.word	0x3fd34413
 800b2e0:	0800e736 	.word	0x0800e736
 800b2e4:	0800e74d 	.word	0x0800e74d
 800b2e8:	7ff00000 	.word	0x7ff00000
 800b2ec:	0800e701 	.word	0x0800e701
 800b2f0:	3ff80000 	.word	0x3ff80000
 800b2f4:	0800e900 	.word	0x0800e900
 800b2f8:	0800e7a5 	.word	0x0800e7a5
 800b2fc:	0800e732 	.word	0x0800e732
 800b300:	0800e700 	.word	0x0800e700
 800b304:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b308:	6018      	str	r0, [r3, #0]
 800b30a:	9b03      	ldr	r3, [sp, #12]
 800b30c:	2b0e      	cmp	r3, #14
 800b30e:	f200 80a1 	bhi.w	800b454 <_dtoa_r+0x444>
 800b312:	2c00      	cmp	r4, #0
 800b314:	f000 809e 	beq.w	800b454 <_dtoa_r+0x444>
 800b318:	2f00      	cmp	r7, #0
 800b31a:	dd33      	ble.n	800b384 <_dtoa_r+0x374>
 800b31c:	4b9c      	ldr	r3, [pc, #624]	@ (800b590 <_dtoa_r+0x580>)
 800b31e:	f007 020f 	and.w	r2, r7, #15
 800b322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b326:	ed93 7b00 	vldr	d7, [r3]
 800b32a:	05f8      	lsls	r0, r7, #23
 800b32c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b330:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b334:	d516      	bpl.n	800b364 <_dtoa_r+0x354>
 800b336:	4b97      	ldr	r3, [pc, #604]	@ (800b594 <_dtoa_r+0x584>)
 800b338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b33c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b340:	f7f5 fa84 	bl	800084c <__aeabi_ddiv>
 800b344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b348:	f004 040f 	and.w	r4, r4, #15
 800b34c:	2603      	movs	r6, #3
 800b34e:	4d91      	ldr	r5, [pc, #580]	@ (800b594 <_dtoa_r+0x584>)
 800b350:	b954      	cbnz	r4, 800b368 <_dtoa_r+0x358>
 800b352:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b35a:	f7f5 fa77 	bl	800084c <__aeabi_ddiv>
 800b35e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b362:	e028      	b.n	800b3b6 <_dtoa_r+0x3a6>
 800b364:	2602      	movs	r6, #2
 800b366:	e7f2      	b.n	800b34e <_dtoa_r+0x33e>
 800b368:	07e1      	lsls	r1, r4, #31
 800b36a:	d508      	bpl.n	800b37e <_dtoa_r+0x36e>
 800b36c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b370:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b374:	f7f5 f940 	bl	80005f8 <__aeabi_dmul>
 800b378:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b37c:	3601      	adds	r6, #1
 800b37e:	1064      	asrs	r4, r4, #1
 800b380:	3508      	adds	r5, #8
 800b382:	e7e5      	b.n	800b350 <_dtoa_r+0x340>
 800b384:	f000 80af 	beq.w	800b4e6 <_dtoa_r+0x4d6>
 800b388:	427c      	negs	r4, r7
 800b38a:	4b81      	ldr	r3, [pc, #516]	@ (800b590 <_dtoa_r+0x580>)
 800b38c:	4d81      	ldr	r5, [pc, #516]	@ (800b594 <_dtoa_r+0x584>)
 800b38e:	f004 020f 	and.w	r2, r4, #15
 800b392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b39e:	f7f5 f92b 	bl	80005f8 <__aeabi_dmul>
 800b3a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3a6:	1124      	asrs	r4, r4, #4
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	2602      	movs	r6, #2
 800b3ac:	2c00      	cmp	r4, #0
 800b3ae:	f040 808f 	bne.w	800b4d0 <_dtoa_r+0x4c0>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1d3      	bne.n	800b35e <_dtoa_r+0x34e>
 800b3b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 8094 	beq.w	800b4ea <_dtoa_r+0x4da>
 800b3c2:	4b75      	ldr	r3, [pc, #468]	@ (800b598 <_dtoa_r+0x588>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	f7f5 fb87 	bl	8000adc <__aeabi_dcmplt>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	f000 808b 	beq.w	800b4ea <_dtoa_r+0x4da>
 800b3d4:	9b03      	ldr	r3, [sp, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	f000 8087 	beq.w	800b4ea <_dtoa_r+0x4da>
 800b3dc:	f1bb 0f00 	cmp.w	fp, #0
 800b3e0:	dd34      	ble.n	800b44c <_dtoa_r+0x43c>
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	4b6d      	ldr	r3, [pc, #436]	@ (800b59c <_dtoa_r+0x58c>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	f7f5 f905 	bl	80005f8 <__aeabi_dmul>
 800b3ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3f2:	f107 38ff 	add.w	r8, r7, #4294967295
 800b3f6:	3601      	adds	r6, #1
 800b3f8:	465c      	mov	r4, fp
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f7f5 f892 	bl	8000524 <__aeabi_i2d>
 800b400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b404:	f7f5 f8f8 	bl	80005f8 <__aeabi_dmul>
 800b408:	4b65      	ldr	r3, [pc, #404]	@ (800b5a0 <_dtoa_r+0x590>)
 800b40a:	2200      	movs	r2, #0
 800b40c:	f7f4 ff3e 	bl	800028c <__adddf3>
 800b410:	4605      	mov	r5, r0
 800b412:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b416:	2c00      	cmp	r4, #0
 800b418:	d16a      	bne.n	800b4f0 <_dtoa_r+0x4e0>
 800b41a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b41e:	4b61      	ldr	r3, [pc, #388]	@ (800b5a4 <_dtoa_r+0x594>)
 800b420:	2200      	movs	r2, #0
 800b422:	f7f4 ff31 	bl	8000288 <__aeabi_dsub>
 800b426:	4602      	mov	r2, r0
 800b428:	460b      	mov	r3, r1
 800b42a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b42e:	462a      	mov	r2, r5
 800b430:	4633      	mov	r3, r6
 800b432:	f7f5 fb71 	bl	8000b18 <__aeabi_dcmpgt>
 800b436:	2800      	cmp	r0, #0
 800b438:	f040 8298 	bne.w	800b96c <_dtoa_r+0x95c>
 800b43c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b440:	462a      	mov	r2, r5
 800b442:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b446:	f7f5 fb49 	bl	8000adc <__aeabi_dcmplt>
 800b44a:	bb38      	cbnz	r0, 800b49c <_dtoa_r+0x48c>
 800b44c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b450:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b454:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b456:	2b00      	cmp	r3, #0
 800b458:	f2c0 8157 	blt.w	800b70a <_dtoa_r+0x6fa>
 800b45c:	2f0e      	cmp	r7, #14
 800b45e:	f300 8154 	bgt.w	800b70a <_dtoa_r+0x6fa>
 800b462:	4b4b      	ldr	r3, [pc, #300]	@ (800b590 <_dtoa_r+0x580>)
 800b464:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b468:	ed93 7b00 	vldr	d7, [r3]
 800b46c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b46e:	2b00      	cmp	r3, #0
 800b470:	ed8d 7b00 	vstr	d7, [sp]
 800b474:	f280 80e5 	bge.w	800b642 <_dtoa_r+0x632>
 800b478:	9b03      	ldr	r3, [sp, #12]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f300 80e1 	bgt.w	800b642 <_dtoa_r+0x632>
 800b480:	d10c      	bne.n	800b49c <_dtoa_r+0x48c>
 800b482:	4b48      	ldr	r3, [pc, #288]	@ (800b5a4 <_dtoa_r+0x594>)
 800b484:	2200      	movs	r2, #0
 800b486:	ec51 0b17 	vmov	r0, r1, d7
 800b48a:	f7f5 f8b5 	bl	80005f8 <__aeabi_dmul>
 800b48e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b492:	f7f5 fb37 	bl	8000b04 <__aeabi_dcmpge>
 800b496:	2800      	cmp	r0, #0
 800b498:	f000 8266 	beq.w	800b968 <_dtoa_r+0x958>
 800b49c:	2400      	movs	r4, #0
 800b49e:	4625      	mov	r5, r4
 800b4a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4a2:	4656      	mov	r6, sl
 800b4a4:	ea6f 0803 	mvn.w	r8, r3
 800b4a8:	2700      	movs	r7, #0
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	4648      	mov	r0, r9
 800b4ae:	f000 fcbf 	bl	800be30 <_Bfree>
 800b4b2:	2d00      	cmp	r5, #0
 800b4b4:	f000 80bd 	beq.w	800b632 <_dtoa_r+0x622>
 800b4b8:	b12f      	cbz	r7, 800b4c6 <_dtoa_r+0x4b6>
 800b4ba:	42af      	cmp	r7, r5
 800b4bc:	d003      	beq.n	800b4c6 <_dtoa_r+0x4b6>
 800b4be:	4639      	mov	r1, r7
 800b4c0:	4648      	mov	r0, r9
 800b4c2:	f000 fcb5 	bl	800be30 <_Bfree>
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4648      	mov	r0, r9
 800b4ca:	f000 fcb1 	bl	800be30 <_Bfree>
 800b4ce:	e0b0      	b.n	800b632 <_dtoa_r+0x622>
 800b4d0:	07e2      	lsls	r2, r4, #31
 800b4d2:	d505      	bpl.n	800b4e0 <_dtoa_r+0x4d0>
 800b4d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4d8:	f7f5 f88e 	bl	80005f8 <__aeabi_dmul>
 800b4dc:	3601      	adds	r6, #1
 800b4de:	2301      	movs	r3, #1
 800b4e0:	1064      	asrs	r4, r4, #1
 800b4e2:	3508      	adds	r5, #8
 800b4e4:	e762      	b.n	800b3ac <_dtoa_r+0x39c>
 800b4e6:	2602      	movs	r6, #2
 800b4e8:	e765      	b.n	800b3b6 <_dtoa_r+0x3a6>
 800b4ea:	9c03      	ldr	r4, [sp, #12]
 800b4ec:	46b8      	mov	r8, r7
 800b4ee:	e784      	b.n	800b3fa <_dtoa_r+0x3ea>
 800b4f0:	4b27      	ldr	r3, [pc, #156]	@ (800b590 <_dtoa_r+0x580>)
 800b4f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4fc:	4454      	add	r4, sl
 800b4fe:	2900      	cmp	r1, #0
 800b500:	d054      	beq.n	800b5ac <_dtoa_r+0x59c>
 800b502:	4929      	ldr	r1, [pc, #164]	@ (800b5a8 <_dtoa_r+0x598>)
 800b504:	2000      	movs	r0, #0
 800b506:	f7f5 f9a1 	bl	800084c <__aeabi_ddiv>
 800b50a:	4633      	mov	r3, r6
 800b50c:	462a      	mov	r2, r5
 800b50e:	f7f4 febb 	bl	8000288 <__aeabi_dsub>
 800b512:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b516:	4656      	mov	r6, sl
 800b518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b51c:	f7f5 fb1c 	bl	8000b58 <__aeabi_d2iz>
 800b520:	4605      	mov	r5, r0
 800b522:	f7f4 ffff 	bl	8000524 <__aeabi_i2d>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b52e:	f7f4 feab 	bl	8000288 <__aeabi_dsub>
 800b532:	3530      	adds	r5, #48	@ 0x30
 800b534:	4602      	mov	r2, r0
 800b536:	460b      	mov	r3, r1
 800b538:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b53c:	f806 5b01 	strb.w	r5, [r6], #1
 800b540:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b544:	f7f5 faca 	bl	8000adc <__aeabi_dcmplt>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d172      	bne.n	800b632 <_dtoa_r+0x622>
 800b54c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b550:	4911      	ldr	r1, [pc, #68]	@ (800b598 <_dtoa_r+0x588>)
 800b552:	2000      	movs	r0, #0
 800b554:	f7f4 fe98 	bl	8000288 <__aeabi_dsub>
 800b558:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b55c:	f7f5 fabe 	bl	8000adc <__aeabi_dcmplt>
 800b560:	2800      	cmp	r0, #0
 800b562:	f040 80b4 	bne.w	800b6ce <_dtoa_r+0x6be>
 800b566:	42a6      	cmp	r6, r4
 800b568:	f43f af70 	beq.w	800b44c <_dtoa_r+0x43c>
 800b56c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b570:	4b0a      	ldr	r3, [pc, #40]	@ (800b59c <_dtoa_r+0x58c>)
 800b572:	2200      	movs	r2, #0
 800b574:	f7f5 f840 	bl	80005f8 <__aeabi_dmul>
 800b578:	4b08      	ldr	r3, [pc, #32]	@ (800b59c <_dtoa_r+0x58c>)
 800b57a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b57e:	2200      	movs	r2, #0
 800b580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b584:	f7f5 f838 	bl	80005f8 <__aeabi_dmul>
 800b588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b58c:	e7c4      	b.n	800b518 <_dtoa_r+0x508>
 800b58e:	bf00      	nop
 800b590:	0800e900 	.word	0x0800e900
 800b594:	0800e8d8 	.word	0x0800e8d8
 800b598:	3ff00000 	.word	0x3ff00000
 800b59c:	40240000 	.word	0x40240000
 800b5a0:	401c0000 	.word	0x401c0000
 800b5a4:	40140000 	.word	0x40140000
 800b5a8:	3fe00000 	.word	0x3fe00000
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f7f5 f822 	bl	80005f8 <__aeabi_dmul>
 800b5b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b5b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b5ba:	4656      	mov	r6, sl
 800b5bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5c0:	f7f5 faca 	bl	8000b58 <__aeabi_d2iz>
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	f7f4 ffad 	bl	8000524 <__aeabi_i2d>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5d2:	f7f4 fe59 	bl	8000288 <__aeabi_dsub>
 800b5d6:	3530      	adds	r5, #48	@ 0x30
 800b5d8:	f806 5b01 	strb.w	r5, [r6], #1
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	42a6      	cmp	r6, r4
 800b5e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5e6:	f04f 0200 	mov.w	r2, #0
 800b5ea:	d124      	bne.n	800b636 <_dtoa_r+0x626>
 800b5ec:	4baf      	ldr	r3, [pc, #700]	@ (800b8ac <_dtoa_r+0x89c>)
 800b5ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b5f2:	f7f4 fe4b 	bl	800028c <__adddf3>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5fe:	f7f5 fa8b 	bl	8000b18 <__aeabi_dcmpgt>
 800b602:	2800      	cmp	r0, #0
 800b604:	d163      	bne.n	800b6ce <_dtoa_r+0x6be>
 800b606:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b60a:	49a8      	ldr	r1, [pc, #672]	@ (800b8ac <_dtoa_r+0x89c>)
 800b60c:	2000      	movs	r0, #0
 800b60e:	f7f4 fe3b 	bl	8000288 <__aeabi_dsub>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b61a:	f7f5 fa5f 	bl	8000adc <__aeabi_dcmplt>
 800b61e:	2800      	cmp	r0, #0
 800b620:	f43f af14 	beq.w	800b44c <_dtoa_r+0x43c>
 800b624:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b626:	1e73      	subs	r3, r6, #1
 800b628:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b62a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b62e:	2b30      	cmp	r3, #48	@ 0x30
 800b630:	d0f8      	beq.n	800b624 <_dtoa_r+0x614>
 800b632:	4647      	mov	r7, r8
 800b634:	e03b      	b.n	800b6ae <_dtoa_r+0x69e>
 800b636:	4b9e      	ldr	r3, [pc, #632]	@ (800b8b0 <_dtoa_r+0x8a0>)
 800b638:	f7f4 ffde 	bl	80005f8 <__aeabi_dmul>
 800b63c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b640:	e7bc      	b.n	800b5bc <_dtoa_r+0x5ac>
 800b642:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b646:	4656      	mov	r6, sl
 800b648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b64c:	4620      	mov	r0, r4
 800b64e:	4629      	mov	r1, r5
 800b650:	f7f5 f8fc 	bl	800084c <__aeabi_ddiv>
 800b654:	f7f5 fa80 	bl	8000b58 <__aeabi_d2iz>
 800b658:	4680      	mov	r8, r0
 800b65a:	f7f4 ff63 	bl	8000524 <__aeabi_i2d>
 800b65e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b662:	f7f4 ffc9 	bl	80005f8 <__aeabi_dmul>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	4620      	mov	r0, r4
 800b66c:	4629      	mov	r1, r5
 800b66e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b672:	f7f4 fe09 	bl	8000288 <__aeabi_dsub>
 800b676:	f806 4b01 	strb.w	r4, [r6], #1
 800b67a:	9d03      	ldr	r5, [sp, #12]
 800b67c:	eba6 040a 	sub.w	r4, r6, sl
 800b680:	42a5      	cmp	r5, r4
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	d133      	bne.n	800b6f0 <_dtoa_r+0x6e0>
 800b688:	f7f4 fe00 	bl	800028c <__adddf3>
 800b68c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b690:	4604      	mov	r4, r0
 800b692:	460d      	mov	r5, r1
 800b694:	f7f5 fa40 	bl	8000b18 <__aeabi_dcmpgt>
 800b698:	b9c0      	cbnz	r0, 800b6cc <_dtoa_r+0x6bc>
 800b69a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	f7f5 fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6a6:	b110      	cbz	r0, 800b6ae <_dtoa_r+0x69e>
 800b6a8:	f018 0f01 	tst.w	r8, #1
 800b6ac:	d10e      	bne.n	800b6cc <_dtoa_r+0x6bc>
 800b6ae:	9902      	ldr	r1, [sp, #8]
 800b6b0:	4648      	mov	r0, r9
 800b6b2:	f000 fbbd 	bl	800be30 <_Bfree>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	7033      	strb	r3, [r6, #0]
 800b6ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6bc:	3701      	adds	r7, #1
 800b6be:	601f      	str	r7, [r3, #0]
 800b6c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f000 824b 	beq.w	800bb5e <_dtoa_r+0xb4e>
 800b6c8:	601e      	str	r6, [r3, #0]
 800b6ca:	e248      	b.n	800bb5e <_dtoa_r+0xb4e>
 800b6cc:	46b8      	mov	r8, r7
 800b6ce:	4633      	mov	r3, r6
 800b6d0:	461e      	mov	r6, r3
 800b6d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6d6:	2a39      	cmp	r2, #57	@ 0x39
 800b6d8:	d106      	bne.n	800b6e8 <_dtoa_r+0x6d8>
 800b6da:	459a      	cmp	sl, r3
 800b6dc:	d1f8      	bne.n	800b6d0 <_dtoa_r+0x6c0>
 800b6de:	2230      	movs	r2, #48	@ 0x30
 800b6e0:	f108 0801 	add.w	r8, r8, #1
 800b6e4:	f88a 2000 	strb.w	r2, [sl]
 800b6e8:	781a      	ldrb	r2, [r3, #0]
 800b6ea:	3201      	adds	r2, #1
 800b6ec:	701a      	strb	r2, [r3, #0]
 800b6ee:	e7a0      	b.n	800b632 <_dtoa_r+0x622>
 800b6f0:	4b6f      	ldr	r3, [pc, #444]	@ (800b8b0 <_dtoa_r+0x8a0>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f7f4 ff80 	bl	80005f8 <__aeabi_dmul>
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	460d      	mov	r5, r1
 800b700:	f7f5 f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b704:	2800      	cmp	r0, #0
 800b706:	d09f      	beq.n	800b648 <_dtoa_r+0x638>
 800b708:	e7d1      	b.n	800b6ae <_dtoa_r+0x69e>
 800b70a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	f000 80ea 	beq.w	800b8e6 <_dtoa_r+0x8d6>
 800b712:	9a07      	ldr	r2, [sp, #28]
 800b714:	2a01      	cmp	r2, #1
 800b716:	f300 80cd 	bgt.w	800b8b4 <_dtoa_r+0x8a4>
 800b71a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b71c:	2a00      	cmp	r2, #0
 800b71e:	f000 80c1 	beq.w	800b8a4 <_dtoa_r+0x894>
 800b722:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b726:	9c08      	ldr	r4, [sp, #32]
 800b728:	9e00      	ldr	r6, [sp, #0]
 800b72a:	9a00      	ldr	r2, [sp, #0]
 800b72c:	441a      	add	r2, r3
 800b72e:	9200      	str	r2, [sp, #0]
 800b730:	9a06      	ldr	r2, [sp, #24]
 800b732:	2101      	movs	r1, #1
 800b734:	441a      	add	r2, r3
 800b736:	4648      	mov	r0, r9
 800b738:	9206      	str	r2, [sp, #24]
 800b73a:	f000 fc77 	bl	800c02c <__i2b>
 800b73e:	4605      	mov	r5, r0
 800b740:	b166      	cbz	r6, 800b75c <_dtoa_r+0x74c>
 800b742:	9b06      	ldr	r3, [sp, #24]
 800b744:	2b00      	cmp	r3, #0
 800b746:	dd09      	ble.n	800b75c <_dtoa_r+0x74c>
 800b748:	42b3      	cmp	r3, r6
 800b74a:	9a00      	ldr	r2, [sp, #0]
 800b74c:	bfa8      	it	ge
 800b74e:	4633      	movge	r3, r6
 800b750:	1ad2      	subs	r2, r2, r3
 800b752:	9200      	str	r2, [sp, #0]
 800b754:	9a06      	ldr	r2, [sp, #24]
 800b756:	1af6      	subs	r6, r6, r3
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	9306      	str	r3, [sp, #24]
 800b75c:	9b08      	ldr	r3, [sp, #32]
 800b75e:	b30b      	cbz	r3, 800b7a4 <_dtoa_r+0x794>
 800b760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 80c6 	beq.w	800b8f4 <_dtoa_r+0x8e4>
 800b768:	2c00      	cmp	r4, #0
 800b76a:	f000 80c0 	beq.w	800b8ee <_dtoa_r+0x8de>
 800b76e:	4629      	mov	r1, r5
 800b770:	4622      	mov	r2, r4
 800b772:	4648      	mov	r0, r9
 800b774:	f000 fd12 	bl	800c19c <__pow5mult>
 800b778:	9a02      	ldr	r2, [sp, #8]
 800b77a:	4601      	mov	r1, r0
 800b77c:	4605      	mov	r5, r0
 800b77e:	4648      	mov	r0, r9
 800b780:	f000 fc6a 	bl	800c058 <__multiply>
 800b784:	9902      	ldr	r1, [sp, #8]
 800b786:	4680      	mov	r8, r0
 800b788:	4648      	mov	r0, r9
 800b78a:	f000 fb51 	bl	800be30 <_Bfree>
 800b78e:	9b08      	ldr	r3, [sp, #32]
 800b790:	1b1b      	subs	r3, r3, r4
 800b792:	9308      	str	r3, [sp, #32]
 800b794:	f000 80b1 	beq.w	800b8fa <_dtoa_r+0x8ea>
 800b798:	9a08      	ldr	r2, [sp, #32]
 800b79a:	4641      	mov	r1, r8
 800b79c:	4648      	mov	r0, r9
 800b79e:	f000 fcfd 	bl	800c19c <__pow5mult>
 800b7a2:	9002      	str	r0, [sp, #8]
 800b7a4:	2101      	movs	r1, #1
 800b7a6:	4648      	mov	r0, r9
 800b7a8:	f000 fc40 	bl	800c02c <__i2b>
 800b7ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 81d8 	beq.w	800bb66 <_dtoa_r+0xb56>
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	4601      	mov	r1, r0
 800b7ba:	4648      	mov	r0, r9
 800b7bc:	f000 fcee 	bl	800c19c <__pow5mult>
 800b7c0:	9b07      	ldr	r3, [sp, #28]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	f300 809f 	bgt.w	800b908 <_dtoa_r+0x8f8>
 800b7ca:	9b04      	ldr	r3, [sp, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f040 8097 	bne.w	800b900 <_dtoa_r+0x8f0>
 800b7d2:	9b05      	ldr	r3, [sp, #20]
 800b7d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f040 8093 	bne.w	800b904 <_dtoa_r+0x8f4>
 800b7de:	9b05      	ldr	r3, [sp, #20]
 800b7e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7e4:	0d1b      	lsrs	r3, r3, #20
 800b7e6:	051b      	lsls	r3, r3, #20
 800b7e8:	b133      	cbz	r3, 800b7f8 <_dtoa_r+0x7e8>
 800b7ea:	9b00      	ldr	r3, [sp, #0]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	9b06      	ldr	r3, [sp, #24]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	9306      	str	r3, [sp, #24]
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	9308      	str	r3, [sp, #32]
 800b7fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f000 81b8 	beq.w	800bb72 <_dtoa_r+0xb62>
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b808:	6918      	ldr	r0, [r3, #16]
 800b80a:	f000 fbc3 	bl	800bf94 <__hi0bits>
 800b80e:	f1c0 0020 	rsb	r0, r0, #32
 800b812:	9b06      	ldr	r3, [sp, #24]
 800b814:	4418      	add	r0, r3
 800b816:	f010 001f 	ands.w	r0, r0, #31
 800b81a:	f000 8082 	beq.w	800b922 <_dtoa_r+0x912>
 800b81e:	f1c0 0320 	rsb	r3, r0, #32
 800b822:	2b04      	cmp	r3, #4
 800b824:	dd73      	ble.n	800b90e <_dtoa_r+0x8fe>
 800b826:	9b00      	ldr	r3, [sp, #0]
 800b828:	f1c0 001c 	rsb	r0, r0, #28
 800b82c:	4403      	add	r3, r0
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	9b06      	ldr	r3, [sp, #24]
 800b832:	4403      	add	r3, r0
 800b834:	4406      	add	r6, r0
 800b836:	9306      	str	r3, [sp, #24]
 800b838:	9b00      	ldr	r3, [sp, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	dd05      	ble.n	800b84a <_dtoa_r+0x83a>
 800b83e:	9902      	ldr	r1, [sp, #8]
 800b840:	461a      	mov	r2, r3
 800b842:	4648      	mov	r0, r9
 800b844:	f000 fd04 	bl	800c250 <__lshift>
 800b848:	9002      	str	r0, [sp, #8]
 800b84a:	9b06      	ldr	r3, [sp, #24]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	dd05      	ble.n	800b85c <_dtoa_r+0x84c>
 800b850:	4621      	mov	r1, r4
 800b852:	461a      	mov	r2, r3
 800b854:	4648      	mov	r0, r9
 800b856:	f000 fcfb 	bl	800c250 <__lshift>
 800b85a:	4604      	mov	r4, r0
 800b85c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d061      	beq.n	800b926 <_dtoa_r+0x916>
 800b862:	9802      	ldr	r0, [sp, #8]
 800b864:	4621      	mov	r1, r4
 800b866:	f000 fd5f 	bl	800c328 <__mcmp>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	da5b      	bge.n	800b926 <_dtoa_r+0x916>
 800b86e:	2300      	movs	r3, #0
 800b870:	9902      	ldr	r1, [sp, #8]
 800b872:	220a      	movs	r2, #10
 800b874:	4648      	mov	r0, r9
 800b876:	f000 fafd 	bl	800be74 <__multadd>
 800b87a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b87c:	9002      	str	r0, [sp, #8]
 800b87e:	f107 38ff 	add.w	r8, r7, #4294967295
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 8177 	beq.w	800bb76 <_dtoa_r+0xb66>
 800b888:	4629      	mov	r1, r5
 800b88a:	2300      	movs	r3, #0
 800b88c:	220a      	movs	r2, #10
 800b88e:	4648      	mov	r0, r9
 800b890:	f000 faf0 	bl	800be74 <__multadd>
 800b894:	f1bb 0f00 	cmp.w	fp, #0
 800b898:	4605      	mov	r5, r0
 800b89a:	dc6f      	bgt.n	800b97c <_dtoa_r+0x96c>
 800b89c:	9b07      	ldr	r3, [sp, #28]
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	dc49      	bgt.n	800b936 <_dtoa_r+0x926>
 800b8a2:	e06b      	b.n	800b97c <_dtoa_r+0x96c>
 800b8a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b8a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b8aa:	e73c      	b.n	800b726 <_dtoa_r+0x716>
 800b8ac:	3fe00000 	.word	0x3fe00000
 800b8b0:	40240000 	.word	0x40240000
 800b8b4:	9b03      	ldr	r3, [sp, #12]
 800b8b6:	1e5c      	subs	r4, r3, #1
 800b8b8:	9b08      	ldr	r3, [sp, #32]
 800b8ba:	42a3      	cmp	r3, r4
 800b8bc:	db09      	blt.n	800b8d2 <_dtoa_r+0x8c2>
 800b8be:	1b1c      	subs	r4, r3, r4
 800b8c0:	9b03      	ldr	r3, [sp, #12]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f6bf af30 	bge.w	800b728 <_dtoa_r+0x718>
 800b8c8:	9b00      	ldr	r3, [sp, #0]
 800b8ca:	9a03      	ldr	r2, [sp, #12]
 800b8cc:	1a9e      	subs	r6, r3, r2
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e72b      	b.n	800b72a <_dtoa_r+0x71a>
 800b8d2:	9b08      	ldr	r3, [sp, #32]
 800b8d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8d6:	9408      	str	r4, [sp, #32]
 800b8d8:	1ae3      	subs	r3, r4, r3
 800b8da:	441a      	add	r2, r3
 800b8dc:	9e00      	ldr	r6, [sp, #0]
 800b8de:	9b03      	ldr	r3, [sp, #12]
 800b8e0:	920d      	str	r2, [sp, #52]	@ 0x34
 800b8e2:	2400      	movs	r4, #0
 800b8e4:	e721      	b.n	800b72a <_dtoa_r+0x71a>
 800b8e6:	9c08      	ldr	r4, [sp, #32]
 800b8e8:	9e00      	ldr	r6, [sp, #0]
 800b8ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b8ec:	e728      	b.n	800b740 <_dtoa_r+0x730>
 800b8ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b8f2:	e751      	b.n	800b798 <_dtoa_r+0x788>
 800b8f4:	9a08      	ldr	r2, [sp, #32]
 800b8f6:	9902      	ldr	r1, [sp, #8]
 800b8f8:	e750      	b.n	800b79c <_dtoa_r+0x78c>
 800b8fa:	f8cd 8008 	str.w	r8, [sp, #8]
 800b8fe:	e751      	b.n	800b7a4 <_dtoa_r+0x794>
 800b900:	2300      	movs	r3, #0
 800b902:	e779      	b.n	800b7f8 <_dtoa_r+0x7e8>
 800b904:	9b04      	ldr	r3, [sp, #16]
 800b906:	e777      	b.n	800b7f8 <_dtoa_r+0x7e8>
 800b908:	2300      	movs	r3, #0
 800b90a:	9308      	str	r3, [sp, #32]
 800b90c:	e779      	b.n	800b802 <_dtoa_r+0x7f2>
 800b90e:	d093      	beq.n	800b838 <_dtoa_r+0x828>
 800b910:	9a00      	ldr	r2, [sp, #0]
 800b912:	331c      	adds	r3, #28
 800b914:	441a      	add	r2, r3
 800b916:	9200      	str	r2, [sp, #0]
 800b918:	9a06      	ldr	r2, [sp, #24]
 800b91a:	441a      	add	r2, r3
 800b91c:	441e      	add	r6, r3
 800b91e:	9206      	str	r2, [sp, #24]
 800b920:	e78a      	b.n	800b838 <_dtoa_r+0x828>
 800b922:	4603      	mov	r3, r0
 800b924:	e7f4      	b.n	800b910 <_dtoa_r+0x900>
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	46b8      	mov	r8, r7
 800b92c:	dc20      	bgt.n	800b970 <_dtoa_r+0x960>
 800b92e:	469b      	mov	fp, r3
 800b930:	9b07      	ldr	r3, [sp, #28]
 800b932:	2b02      	cmp	r3, #2
 800b934:	dd1e      	ble.n	800b974 <_dtoa_r+0x964>
 800b936:	f1bb 0f00 	cmp.w	fp, #0
 800b93a:	f47f adb1 	bne.w	800b4a0 <_dtoa_r+0x490>
 800b93e:	4621      	mov	r1, r4
 800b940:	465b      	mov	r3, fp
 800b942:	2205      	movs	r2, #5
 800b944:	4648      	mov	r0, r9
 800b946:	f000 fa95 	bl	800be74 <__multadd>
 800b94a:	4601      	mov	r1, r0
 800b94c:	4604      	mov	r4, r0
 800b94e:	9802      	ldr	r0, [sp, #8]
 800b950:	f000 fcea 	bl	800c328 <__mcmp>
 800b954:	2800      	cmp	r0, #0
 800b956:	f77f ada3 	ble.w	800b4a0 <_dtoa_r+0x490>
 800b95a:	4656      	mov	r6, sl
 800b95c:	2331      	movs	r3, #49	@ 0x31
 800b95e:	f806 3b01 	strb.w	r3, [r6], #1
 800b962:	f108 0801 	add.w	r8, r8, #1
 800b966:	e59f      	b.n	800b4a8 <_dtoa_r+0x498>
 800b968:	9c03      	ldr	r4, [sp, #12]
 800b96a:	46b8      	mov	r8, r7
 800b96c:	4625      	mov	r5, r4
 800b96e:	e7f4      	b.n	800b95a <_dtoa_r+0x94a>
 800b970:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 8101 	beq.w	800bb7e <_dtoa_r+0xb6e>
 800b97c:	2e00      	cmp	r6, #0
 800b97e:	dd05      	ble.n	800b98c <_dtoa_r+0x97c>
 800b980:	4629      	mov	r1, r5
 800b982:	4632      	mov	r2, r6
 800b984:	4648      	mov	r0, r9
 800b986:	f000 fc63 	bl	800c250 <__lshift>
 800b98a:	4605      	mov	r5, r0
 800b98c:	9b08      	ldr	r3, [sp, #32]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d05c      	beq.n	800ba4c <_dtoa_r+0xa3c>
 800b992:	6869      	ldr	r1, [r5, #4]
 800b994:	4648      	mov	r0, r9
 800b996:	f000 fa0b 	bl	800bdb0 <_Balloc>
 800b99a:	4606      	mov	r6, r0
 800b99c:	b928      	cbnz	r0, 800b9aa <_dtoa_r+0x99a>
 800b99e:	4b82      	ldr	r3, [pc, #520]	@ (800bba8 <_dtoa_r+0xb98>)
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b9a6:	f7ff bb4a 	b.w	800b03e <_dtoa_r+0x2e>
 800b9aa:	692a      	ldr	r2, [r5, #16]
 800b9ac:	3202      	adds	r2, #2
 800b9ae:	0092      	lsls	r2, r2, #2
 800b9b0:	f105 010c 	add.w	r1, r5, #12
 800b9b4:	300c      	adds	r0, #12
 800b9b6:	f001 ff69 	bl	800d88c <memcpy>
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	4631      	mov	r1, r6
 800b9be:	4648      	mov	r0, r9
 800b9c0:	f000 fc46 	bl	800c250 <__lshift>
 800b9c4:	f10a 0301 	add.w	r3, sl, #1
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	eb0a 030b 	add.w	r3, sl, fp
 800b9ce:	9308      	str	r3, [sp, #32]
 800b9d0:	9b04      	ldr	r3, [sp, #16]
 800b9d2:	f003 0301 	and.w	r3, r3, #1
 800b9d6:	462f      	mov	r7, r5
 800b9d8:	9306      	str	r3, [sp, #24]
 800b9da:	4605      	mov	r5, r0
 800b9dc:	9b00      	ldr	r3, [sp, #0]
 800b9de:	9802      	ldr	r0, [sp, #8]
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	f103 3bff 	add.w	fp, r3, #4294967295
 800b9e6:	f7ff fa89 	bl	800aefc <quorem>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	3330      	adds	r3, #48	@ 0x30
 800b9ee:	9003      	str	r0, [sp, #12]
 800b9f0:	4639      	mov	r1, r7
 800b9f2:	9802      	ldr	r0, [sp, #8]
 800b9f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9f6:	f000 fc97 	bl	800c328 <__mcmp>
 800b9fa:	462a      	mov	r2, r5
 800b9fc:	9004      	str	r0, [sp, #16]
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4648      	mov	r0, r9
 800ba02:	f000 fcad 	bl	800c360 <__mdiff>
 800ba06:	68c2      	ldr	r2, [r0, #12]
 800ba08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba0a:	4606      	mov	r6, r0
 800ba0c:	bb02      	cbnz	r2, 800ba50 <_dtoa_r+0xa40>
 800ba0e:	4601      	mov	r1, r0
 800ba10:	9802      	ldr	r0, [sp, #8]
 800ba12:	f000 fc89 	bl	800c328 <__mcmp>
 800ba16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba18:	4602      	mov	r2, r0
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4648      	mov	r0, r9
 800ba1e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba20:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba22:	f000 fa05 	bl	800be30 <_Bfree>
 800ba26:	9b07      	ldr	r3, [sp, #28]
 800ba28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba2a:	9e00      	ldr	r6, [sp, #0]
 800ba2c:	ea42 0103 	orr.w	r1, r2, r3
 800ba30:	9b06      	ldr	r3, [sp, #24]
 800ba32:	4319      	orrs	r1, r3
 800ba34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba36:	d10d      	bne.n	800ba54 <_dtoa_r+0xa44>
 800ba38:	2b39      	cmp	r3, #57	@ 0x39
 800ba3a:	d027      	beq.n	800ba8c <_dtoa_r+0xa7c>
 800ba3c:	9a04      	ldr	r2, [sp, #16]
 800ba3e:	2a00      	cmp	r2, #0
 800ba40:	dd01      	ble.n	800ba46 <_dtoa_r+0xa36>
 800ba42:	9b03      	ldr	r3, [sp, #12]
 800ba44:	3331      	adds	r3, #49	@ 0x31
 800ba46:	f88b 3000 	strb.w	r3, [fp]
 800ba4a:	e52e      	b.n	800b4aa <_dtoa_r+0x49a>
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	e7b9      	b.n	800b9c4 <_dtoa_r+0x9b4>
 800ba50:	2201      	movs	r2, #1
 800ba52:	e7e2      	b.n	800ba1a <_dtoa_r+0xa0a>
 800ba54:	9904      	ldr	r1, [sp, #16]
 800ba56:	2900      	cmp	r1, #0
 800ba58:	db04      	blt.n	800ba64 <_dtoa_r+0xa54>
 800ba5a:	9807      	ldr	r0, [sp, #28]
 800ba5c:	4301      	orrs	r1, r0
 800ba5e:	9806      	ldr	r0, [sp, #24]
 800ba60:	4301      	orrs	r1, r0
 800ba62:	d120      	bne.n	800baa6 <_dtoa_r+0xa96>
 800ba64:	2a00      	cmp	r2, #0
 800ba66:	ddee      	ble.n	800ba46 <_dtoa_r+0xa36>
 800ba68:	9902      	ldr	r1, [sp, #8]
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	4648      	mov	r0, r9
 800ba70:	f000 fbee 	bl	800c250 <__lshift>
 800ba74:	4621      	mov	r1, r4
 800ba76:	9002      	str	r0, [sp, #8]
 800ba78:	f000 fc56 	bl	800c328 <__mcmp>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	9b00      	ldr	r3, [sp, #0]
 800ba80:	dc02      	bgt.n	800ba88 <_dtoa_r+0xa78>
 800ba82:	d1e0      	bne.n	800ba46 <_dtoa_r+0xa36>
 800ba84:	07da      	lsls	r2, r3, #31
 800ba86:	d5de      	bpl.n	800ba46 <_dtoa_r+0xa36>
 800ba88:	2b39      	cmp	r3, #57	@ 0x39
 800ba8a:	d1da      	bne.n	800ba42 <_dtoa_r+0xa32>
 800ba8c:	2339      	movs	r3, #57	@ 0x39
 800ba8e:	f88b 3000 	strb.w	r3, [fp]
 800ba92:	4633      	mov	r3, r6
 800ba94:	461e      	mov	r6, r3
 800ba96:	3b01      	subs	r3, #1
 800ba98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba9c:	2a39      	cmp	r2, #57	@ 0x39
 800ba9e:	d04e      	beq.n	800bb3e <_dtoa_r+0xb2e>
 800baa0:	3201      	adds	r2, #1
 800baa2:	701a      	strb	r2, [r3, #0]
 800baa4:	e501      	b.n	800b4aa <_dtoa_r+0x49a>
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	dd03      	ble.n	800bab2 <_dtoa_r+0xaa2>
 800baaa:	2b39      	cmp	r3, #57	@ 0x39
 800baac:	d0ee      	beq.n	800ba8c <_dtoa_r+0xa7c>
 800baae:	3301      	adds	r3, #1
 800bab0:	e7c9      	b.n	800ba46 <_dtoa_r+0xa36>
 800bab2:	9a00      	ldr	r2, [sp, #0]
 800bab4:	9908      	ldr	r1, [sp, #32]
 800bab6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800baba:	428a      	cmp	r2, r1
 800babc:	d028      	beq.n	800bb10 <_dtoa_r+0xb00>
 800babe:	9902      	ldr	r1, [sp, #8]
 800bac0:	2300      	movs	r3, #0
 800bac2:	220a      	movs	r2, #10
 800bac4:	4648      	mov	r0, r9
 800bac6:	f000 f9d5 	bl	800be74 <__multadd>
 800baca:	42af      	cmp	r7, r5
 800bacc:	9002      	str	r0, [sp, #8]
 800bace:	f04f 0300 	mov.w	r3, #0
 800bad2:	f04f 020a 	mov.w	r2, #10
 800bad6:	4639      	mov	r1, r7
 800bad8:	4648      	mov	r0, r9
 800bada:	d107      	bne.n	800baec <_dtoa_r+0xadc>
 800badc:	f000 f9ca 	bl	800be74 <__multadd>
 800bae0:	4607      	mov	r7, r0
 800bae2:	4605      	mov	r5, r0
 800bae4:	9b00      	ldr	r3, [sp, #0]
 800bae6:	3301      	adds	r3, #1
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	e777      	b.n	800b9dc <_dtoa_r+0x9cc>
 800baec:	f000 f9c2 	bl	800be74 <__multadd>
 800baf0:	4629      	mov	r1, r5
 800baf2:	4607      	mov	r7, r0
 800baf4:	2300      	movs	r3, #0
 800baf6:	220a      	movs	r2, #10
 800baf8:	4648      	mov	r0, r9
 800bafa:	f000 f9bb 	bl	800be74 <__multadd>
 800bafe:	4605      	mov	r5, r0
 800bb00:	e7f0      	b.n	800bae4 <_dtoa_r+0xad4>
 800bb02:	f1bb 0f00 	cmp.w	fp, #0
 800bb06:	bfcc      	ite	gt
 800bb08:	465e      	movgt	r6, fp
 800bb0a:	2601      	movle	r6, #1
 800bb0c:	4456      	add	r6, sl
 800bb0e:	2700      	movs	r7, #0
 800bb10:	9902      	ldr	r1, [sp, #8]
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	2201      	movs	r2, #1
 800bb16:	4648      	mov	r0, r9
 800bb18:	f000 fb9a 	bl	800c250 <__lshift>
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	9002      	str	r0, [sp, #8]
 800bb20:	f000 fc02 	bl	800c328 <__mcmp>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	dcb4      	bgt.n	800ba92 <_dtoa_r+0xa82>
 800bb28:	d102      	bne.n	800bb30 <_dtoa_r+0xb20>
 800bb2a:	9b00      	ldr	r3, [sp, #0]
 800bb2c:	07db      	lsls	r3, r3, #31
 800bb2e:	d4b0      	bmi.n	800ba92 <_dtoa_r+0xa82>
 800bb30:	4633      	mov	r3, r6
 800bb32:	461e      	mov	r6, r3
 800bb34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb38:	2a30      	cmp	r2, #48	@ 0x30
 800bb3a:	d0fa      	beq.n	800bb32 <_dtoa_r+0xb22>
 800bb3c:	e4b5      	b.n	800b4aa <_dtoa_r+0x49a>
 800bb3e:	459a      	cmp	sl, r3
 800bb40:	d1a8      	bne.n	800ba94 <_dtoa_r+0xa84>
 800bb42:	2331      	movs	r3, #49	@ 0x31
 800bb44:	f108 0801 	add.w	r8, r8, #1
 800bb48:	f88a 3000 	strb.w	r3, [sl]
 800bb4c:	e4ad      	b.n	800b4aa <_dtoa_r+0x49a>
 800bb4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bbac <_dtoa_r+0xb9c>
 800bb54:	b11b      	cbz	r3, 800bb5e <_dtoa_r+0xb4e>
 800bb56:	f10a 0308 	add.w	r3, sl, #8
 800bb5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bb5c:	6013      	str	r3, [r2, #0]
 800bb5e:	4650      	mov	r0, sl
 800bb60:	b017      	add	sp, #92	@ 0x5c
 800bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb66:	9b07      	ldr	r3, [sp, #28]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	f77f ae2e 	ble.w	800b7ca <_dtoa_r+0x7ba>
 800bb6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb70:	9308      	str	r3, [sp, #32]
 800bb72:	2001      	movs	r0, #1
 800bb74:	e64d      	b.n	800b812 <_dtoa_r+0x802>
 800bb76:	f1bb 0f00 	cmp.w	fp, #0
 800bb7a:	f77f aed9 	ble.w	800b930 <_dtoa_r+0x920>
 800bb7e:	4656      	mov	r6, sl
 800bb80:	9802      	ldr	r0, [sp, #8]
 800bb82:	4621      	mov	r1, r4
 800bb84:	f7ff f9ba 	bl	800aefc <quorem>
 800bb88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bb8c:	f806 3b01 	strb.w	r3, [r6], #1
 800bb90:	eba6 020a 	sub.w	r2, r6, sl
 800bb94:	4593      	cmp	fp, r2
 800bb96:	ddb4      	ble.n	800bb02 <_dtoa_r+0xaf2>
 800bb98:	9902      	ldr	r1, [sp, #8]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	220a      	movs	r2, #10
 800bb9e:	4648      	mov	r0, r9
 800bba0:	f000 f968 	bl	800be74 <__multadd>
 800bba4:	9002      	str	r0, [sp, #8]
 800bba6:	e7eb      	b.n	800bb80 <_dtoa_r+0xb70>
 800bba8:	0800e7a5 	.word	0x0800e7a5
 800bbac:	0800e729 	.word	0x0800e729

0800bbb0 <_free_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	2900      	cmp	r1, #0
 800bbb6:	d041      	beq.n	800bc3c <_free_r+0x8c>
 800bbb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbbc:	1f0c      	subs	r4, r1, #4
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	bfb8      	it	lt
 800bbc2:	18e4      	addlt	r4, r4, r3
 800bbc4:	f000 f8e8 	bl	800bd98 <__malloc_lock>
 800bbc8:	4a1d      	ldr	r2, [pc, #116]	@ (800bc40 <_free_r+0x90>)
 800bbca:	6813      	ldr	r3, [r2, #0]
 800bbcc:	b933      	cbnz	r3, 800bbdc <_free_r+0x2c>
 800bbce:	6063      	str	r3, [r4, #4]
 800bbd0:	6014      	str	r4, [r2, #0]
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbd8:	f000 b8e4 	b.w	800bda4 <__malloc_unlock>
 800bbdc:	42a3      	cmp	r3, r4
 800bbde:	d908      	bls.n	800bbf2 <_free_r+0x42>
 800bbe0:	6820      	ldr	r0, [r4, #0]
 800bbe2:	1821      	adds	r1, r4, r0
 800bbe4:	428b      	cmp	r3, r1
 800bbe6:	bf01      	itttt	eq
 800bbe8:	6819      	ldreq	r1, [r3, #0]
 800bbea:	685b      	ldreq	r3, [r3, #4]
 800bbec:	1809      	addeq	r1, r1, r0
 800bbee:	6021      	streq	r1, [r4, #0]
 800bbf0:	e7ed      	b.n	800bbce <_free_r+0x1e>
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	b10b      	cbz	r3, 800bbfc <_free_r+0x4c>
 800bbf8:	42a3      	cmp	r3, r4
 800bbfa:	d9fa      	bls.n	800bbf2 <_free_r+0x42>
 800bbfc:	6811      	ldr	r1, [r2, #0]
 800bbfe:	1850      	adds	r0, r2, r1
 800bc00:	42a0      	cmp	r0, r4
 800bc02:	d10b      	bne.n	800bc1c <_free_r+0x6c>
 800bc04:	6820      	ldr	r0, [r4, #0]
 800bc06:	4401      	add	r1, r0
 800bc08:	1850      	adds	r0, r2, r1
 800bc0a:	4283      	cmp	r3, r0
 800bc0c:	6011      	str	r1, [r2, #0]
 800bc0e:	d1e0      	bne.n	800bbd2 <_free_r+0x22>
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	6053      	str	r3, [r2, #4]
 800bc16:	4408      	add	r0, r1
 800bc18:	6010      	str	r0, [r2, #0]
 800bc1a:	e7da      	b.n	800bbd2 <_free_r+0x22>
 800bc1c:	d902      	bls.n	800bc24 <_free_r+0x74>
 800bc1e:	230c      	movs	r3, #12
 800bc20:	602b      	str	r3, [r5, #0]
 800bc22:	e7d6      	b.n	800bbd2 <_free_r+0x22>
 800bc24:	6820      	ldr	r0, [r4, #0]
 800bc26:	1821      	adds	r1, r4, r0
 800bc28:	428b      	cmp	r3, r1
 800bc2a:	bf04      	itt	eq
 800bc2c:	6819      	ldreq	r1, [r3, #0]
 800bc2e:	685b      	ldreq	r3, [r3, #4]
 800bc30:	6063      	str	r3, [r4, #4]
 800bc32:	bf04      	itt	eq
 800bc34:	1809      	addeq	r1, r1, r0
 800bc36:	6021      	streq	r1, [r4, #0]
 800bc38:	6054      	str	r4, [r2, #4]
 800bc3a:	e7ca      	b.n	800bbd2 <_free_r+0x22>
 800bc3c:	bd38      	pop	{r3, r4, r5, pc}
 800bc3e:	bf00      	nop
 800bc40:	200021b4 	.word	0x200021b4

0800bc44 <malloc>:
 800bc44:	4b02      	ldr	r3, [pc, #8]	@ (800bc50 <malloc+0xc>)
 800bc46:	4601      	mov	r1, r0
 800bc48:	6818      	ldr	r0, [r3, #0]
 800bc4a:	f000 b825 	b.w	800bc98 <_malloc_r>
 800bc4e:	bf00      	nop
 800bc50:	20000108 	.word	0x20000108

0800bc54 <sbrk_aligned>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	4e0f      	ldr	r6, [pc, #60]	@ (800bc94 <sbrk_aligned+0x40>)
 800bc58:	460c      	mov	r4, r1
 800bc5a:	6831      	ldr	r1, [r6, #0]
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	b911      	cbnz	r1, 800bc66 <sbrk_aligned+0x12>
 800bc60:	f001 fe04 	bl	800d86c <_sbrk_r>
 800bc64:	6030      	str	r0, [r6, #0]
 800bc66:	4621      	mov	r1, r4
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f001 fdff 	bl	800d86c <_sbrk_r>
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	d103      	bne.n	800bc7a <sbrk_aligned+0x26>
 800bc72:	f04f 34ff 	mov.w	r4, #4294967295
 800bc76:	4620      	mov	r0, r4
 800bc78:	bd70      	pop	{r4, r5, r6, pc}
 800bc7a:	1cc4      	adds	r4, r0, #3
 800bc7c:	f024 0403 	bic.w	r4, r4, #3
 800bc80:	42a0      	cmp	r0, r4
 800bc82:	d0f8      	beq.n	800bc76 <sbrk_aligned+0x22>
 800bc84:	1a21      	subs	r1, r4, r0
 800bc86:	4628      	mov	r0, r5
 800bc88:	f001 fdf0 	bl	800d86c <_sbrk_r>
 800bc8c:	3001      	adds	r0, #1
 800bc8e:	d1f2      	bne.n	800bc76 <sbrk_aligned+0x22>
 800bc90:	e7ef      	b.n	800bc72 <sbrk_aligned+0x1e>
 800bc92:	bf00      	nop
 800bc94:	200021b0 	.word	0x200021b0

0800bc98 <_malloc_r>:
 800bc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc9c:	1ccd      	adds	r5, r1, #3
 800bc9e:	f025 0503 	bic.w	r5, r5, #3
 800bca2:	3508      	adds	r5, #8
 800bca4:	2d0c      	cmp	r5, #12
 800bca6:	bf38      	it	cc
 800bca8:	250c      	movcc	r5, #12
 800bcaa:	2d00      	cmp	r5, #0
 800bcac:	4606      	mov	r6, r0
 800bcae:	db01      	blt.n	800bcb4 <_malloc_r+0x1c>
 800bcb0:	42a9      	cmp	r1, r5
 800bcb2:	d904      	bls.n	800bcbe <_malloc_r+0x26>
 800bcb4:	230c      	movs	r3, #12
 800bcb6:	6033      	str	r3, [r6, #0]
 800bcb8:	2000      	movs	r0, #0
 800bcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd94 <_malloc_r+0xfc>
 800bcc2:	f000 f869 	bl	800bd98 <__malloc_lock>
 800bcc6:	f8d8 3000 	ldr.w	r3, [r8]
 800bcca:	461c      	mov	r4, r3
 800bccc:	bb44      	cbnz	r4, 800bd20 <_malloc_r+0x88>
 800bcce:	4629      	mov	r1, r5
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f7ff ffbf 	bl	800bc54 <sbrk_aligned>
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	4604      	mov	r4, r0
 800bcda:	d158      	bne.n	800bd8e <_malloc_r+0xf6>
 800bcdc:	f8d8 4000 	ldr.w	r4, [r8]
 800bce0:	4627      	mov	r7, r4
 800bce2:	2f00      	cmp	r7, #0
 800bce4:	d143      	bne.n	800bd6e <_malloc_r+0xd6>
 800bce6:	2c00      	cmp	r4, #0
 800bce8:	d04b      	beq.n	800bd82 <_malloc_r+0xea>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	4639      	mov	r1, r7
 800bcee:	4630      	mov	r0, r6
 800bcf0:	eb04 0903 	add.w	r9, r4, r3
 800bcf4:	f001 fdba 	bl	800d86c <_sbrk_r>
 800bcf8:	4581      	cmp	r9, r0
 800bcfa:	d142      	bne.n	800bd82 <_malloc_r+0xea>
 800bcfc:	6821      	ldr	r1, [r4, #0]
 800bcfe:	1a6d      	subs	r5, r5, r1
 800bd00:	4629      	mov	r1, r5
 800bd02:	4630      	mov	r0, r6
 800bd04:	f7ff ffa6 	bl	800bc54 <sbrk_aligned>
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d03a      	beq.n	800bd82 <_malloc_r+0xea>
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	442b      	add	r3, r5
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	f8d8 3000 	ldr.w	r3, [r8]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	bb62      	cbnz	r2, 800bd74 <_malloc_r+0xdc>
 800bd1a:	f8c8 7000 	str.w	r7, [r8]
 800bd1e:	e00f      	b.n	800bd40 <_malloc_r+0xa8>
 800bd20:	6822      	ldr	r2, [r4, #0]
 800bd22:	1b52      	subs	r2, r2, r5
 800bd24:	d420      	bmi.n	800bd68 <_malloc_r+0xd0>
 800bd26:	2a0b      	cmp	r2, #11
 800bd28:	d917      	bls.n	800bd5a <_malloc_r+0xc2>
 800bd2a:	1961      	adds	r1, r4, r5
 800bd2c:	42a3      	cmp	r3, r4
 800bd2e:	6025      	str	r5, [r4, #0]
 800bd30:	bf18      	it	ne
 800bd32:	6059      	strne	r1, [r3, #4]
 800bd34:	6863      	ldr	r3, [r4, #4]
 800bd36:	bf08      	it	eq
 800bd38:	f8c8 1000 	streq.w	r1, [r8]
 800bd3c:	5162      	str	r2, [r4, r5]
 800bd3e:	604b      	str	r3, [r1, #4]
 800bd40:	4630      	mov	r0, r6
 800bd42:	f000 f82f 	bl	800bda4 <__malloc_unlock>
 800bd46:	f104 000b 	add.w	r0, r4, #11
 800bd4a:	1d23      	adds	r3, r4, #4
 800bd4c:	f020 0007 	bic.w	r0, r0, #7
 800bd50:	1ac2      	subs	r2, r0, r3
 800bd52:	bf1c      	itt	ne
 800bd54:	1a1b      	subne	r3, r3, r0
 800bd56:	50a3      	strne	r3, [r4, r2]
 800bd58:	e7af      	b.n	800bcba <_malloc_r+0x22>
 800bd5a:	6862      	ldr	r2, [r4, #4]
 800bd5c:	42a3      	cmp	r3, r4
 800bd5e:	bf0c      	ite	eq
 800bd60:	f8c8 2000 	streq.w	r2, [r8]
 800bd64:	605a      	strne	r2, [r3, #4]
 800bd66:	e7eb      	b.n	800bd40 <_malloc_r+0xa8>
 800bd68:	4623      	mov	r3, r4
 800bd6a:	6864      	ldr	r4, [r4, #4]
 800bd6c:	e7ae      	b.n	800bccc <_malloc_r+0x34>
 800bd6e:	463c      	mov	r4, r7
 800bd70:	687f      	ldr	r7, [r7, #4]
 800bd72:	e7b6      	b.n	800bce2 <_malloc_r+0x4a>
 800bd74:	461a      	mov	r2, r3
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	42a3      	cmp	r3, r4
 800bd7a:	d1fb      	bne.n	800bd74 <_malloc_r+0xdc>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	6053      	str	r3, [r2, #4]
 800bd80:	e7de      	b.n	800bd40 <_malloc_r+0xa8>
 800bd82:	230c      	movs	r3, #12
 800bd84:	6033      	str	r3, [r6, #0]
 800bd86:	4630      	mov	r0, r6
 800bd88:	f000 f80c 	bl	800bda4 <__malloc_unlock>
 800bd8c:	e794      	b.n	800bcb8 <_malloc_r+0x20>
 800bd8e:	6005      	str	r5, [r0, #0]
 800bd90:	e7d6      	b.n	800bd40 <_malloc_r+0xa8>
 800bd92:	bf00      	nop
 800bd94:	200021b4 	.word	0x200021b4

0800bd98 <__malloc_lock>:
 800bd98:	4801      	ldr	r0, [pc, #4]	@ (800bda0 <__malloc_lock+0x8>)
 800bd9a:	f7ff b8a6 	b.w	800aeea <__retarget_lock_acquire_recursive>
 800bd9e:	bf00      	nop
 800bda0:	200021ac 	.word	0x200021ac

0800bda4 <__malloc_unlock>:
 800bda4:	4801      	ldr	r0, [pc, #4]	@ (800bdac <__malloc_unlock+0x8>)
 800bda6:	f7ff b8a1 	b.w	800aeec <__retarget_lock_release_recursive>
 800bdaa:	bf00      	nop
 800bdac:	200021ac 	.word	0x200021ac

0800bdb0 <_Balloc>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	69c6      	ldr	r6, [r0, #28]
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	b976      	cbnz	r6, 800bdd8 <_Balloc+0x28>
 800bdba:	2010      	movs	r0, #16
 800bdbc:	f7ff ff42 	bl	800bc44 <malloc>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	61e0      	str	r0, [r4, #28]
 800bdc4:	b920      	cbnz	r0, 800bdd0 <_Balloc+0x20>
 800bdc6:	4b18      	ldr	r3, [pc, #96]	@ (800be28 <_Balloc+0x78>)
 800bdc8:	4818      	ldr	r0, [pc, #96]	@ (800be2c <_Balloc+0x7c>)
 800bdca:	216b      	movs	r1, #107	@ 0x6b
 800bdcc:	f001 fd74 	bl	800d8b8 <__assert_func>
 800bdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdd4:	6006      	str	r6, [r0, #0]
 800bdd6:	60c6      	str	r6, [r0, #12]
 800bdd8:	69e6      	ldr	r6, [r4, #28]
 800bdda:	68f3      	ldr	r3, [r6, #12]
 800bddc:	b183      	cbz	r3, 800be00 <_Balloc+0x50>
 800bdde:	69e3      	ldr	r3, [r4, #28]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bde6:	b9b8      	cbnz	r0, 800be18 <_Balloc+0x68>
 800bde8:	2101      	movs	r1, #1
 800bdea:	fa01 f605 	lsl.w	r6, r1, r5
 800bdee:	1d72      	adds	r2, r6, #5
 800bdf0:	0092      	lsls	r2, r2, #2
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f001 fd7e 	bl	800d8f4 <_calloc_r>
 800bdf8:	b160      	cbz	r0, 800be14 <_Balloc+0x64>
 800bdfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdfe:	e00e      	b.n	800be1e <_Balloc+0x6e>
 800be00:	2221      	movs	r2, #33	@ 0x21
 800be02:	2104      	movs	r1, #4
 800be04:	4620      	mov	r0, r4
 800be06:	f001 fd75 	bl	800d8f4 <_calloc_r>
 800be0a:	69e3      	ldr	r3, [r4, #28]
 800be0c:	60f0      	str	r0, [r6, #12]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1e4      	bne.n	800bdde <_Balloc+0x2e>
 800be14:	2000      	movs	r0, #0
 800be16:	bd70      	pop	{r4, r5, r6, pc}
 800be18:	6802      	ldr	r2, [r0, #0]
 800be1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be1e:	2300      	movs	r3, #0
 800be20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be24:	e7f7      	b.n	800be16 <_Balloc+0x66>
 800be26:	bf00      	nop
 800be28:	0800e736 	.word	0x0800e736
 800be2c:	0800e7b6 	.word	0x0800e7b6

0800be30 <_Bfree>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	69c6      	ldr	r6, [r0, #28]
 800be34:	4605      	mov	r5, r0
 800be36:	460c      	mov	r4, r1
 800be38:	b976      	cbnz	r6, 800be58 <_Bfree+0x28>
 800be3a:	2010      	movs	r0, #16
 800be3c:	f7ff ff02 	bl	800bc44 <malloc>
 800be40:	4602      	mov	r2, r0
 800be42:	61e8      	str	r0, [r5, #28]
 800be44:	b920      	cbnz	r0, 800be50 <_Bfree+0x20>
 800be46:	4b09      	ldr	r3, [pc, #36]	@ (800be6c <_Bfree+0x3c>)
 800be48:	4809      	ldr	r0, [pc, #36]	@ (800be70 <_Bfree+0x40>)
 800be4a:	218f      	movs	r1, #143	@ 0x8f
 800be4c:	f001 fd34 	bl	800d8b8 <__assert_func>
 800be50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be54:	6006      	str	r6, [r0, #0]
 800be56:	60c6      	str	r6, [r0, #12]
 800be58:	b13c      	cbz	r4, 800be6a <_Bfree+0x3a>
 800be5a:	69eb      	ldr	r3, [r5, #28]
 800be5c:	6862      	ldr	r2, [r4, #4]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be64:	6021      	str	r1, [r4, #0]
 800be66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	0800e736 	.word	0x0800e736
 800be70:	0800e7b6 	.word	0x0800e7b6

0800be74 <__multadd>:
 800be74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be78:	690d      	ldr	r5, [r1, #16]
 800be7a:	4607      	mov	r7, r0
 800be7c:	460c      	mov	r4, r1
 800be7e:	461e      	mov	r6, r3
 800be80:	f101 0c14 	add.w	ip, r1, #20
 800be84:	2000      	movs	r0, #0
 800be86:	f8dc 3000 	ldr.w	r3, [ip]
 800be8a:	b299      	uxth	r1, r3
 800be8c:	fb02 6101 	mla	r1, r2, r1, r6
 800be90:	0c1e      	lsrs	r6, r3, #16
 800be92:	0c0b      	lsrs	r3, r1, #16
 800be94:	fb02 3306 	mla	r3, r2, r6, r3
 800be98:	b289      	uxth	r1, r1
 800be9a:	3001      	adds	r0, #1
 800be9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bea0:	4285      	cmp	r5, r0
 800bea2:	f84c 1b04 	str.w	r1, [ip], #4
 800bea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800beaa:	dcec      	bgt.n	800be86 <__multadd+0x12>
 800beac:	b30e      	cbz	r6, 800bef2 <__multadd+0x7e>
 800beae:	68a3      	ldr	r3, [r4, #8]
 800beb0:	42ab      	cmp	r3, r5
 800beb2:	dc19      	bgt.n	800bee8 <__multadd+0x74>
 800beb4:	6861      	ldr	r1, [r4, #4]
 800beb6:	4638      	mov	r0, r7
 800beb8:	3101      	adds	r1, #1
 800beba:	f7ff ff79 	bl	800bdb0 <_Balloc>
 800bebe:	4680      	mov	r8, r0
 800bec0:	b928      	cbnz	r0, 800bece <__multadd+0x5a>
 800bec2:	4602      	mov	r2, r0
 800bec4:	4b0c      	ldr	r3, [pc, #48]	@ (800bef8 <__multadd+0x84>)
 800bec6:	480d      	ldr	r0, [pc, #52]	@ (800befc <__multadd+0x88>)
 800bec8:	21ba      	movs	r1, #186	@ 0xba
 800beca:	f001 fcf5 	bl	800d8b8 <__assert_func>
 800bece:	6922      	ldr	r2, [r4, #16]
 800bed0:	3202      	adds	r2, #2
 800bed2:	f104 010c 	add.w	r1, r4, #12
 800bed6:	0092      	lsls	r2, r2, #2
 800bed8:	300c      	adds	r0, #12
 800beda:	f001 fcd7 	bl	800d88c <memcpy>
 800bede:	4621      	mov	r1, r4
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff ffa5 	bl	800be30 <_Bfree>
 800bee6:	4644      	mov	r4, r8
 800bee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800beec:	3501      	adds	r5, #1
 800beee:	615e      	str	r6, [r3, #20]
 800bef0:	6125      	str	r5, [r4, #16]
 800bef2:	4620      	mov	r0, r4
 800bef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef8:	0800e7a5 	.word	0x0800e7a5
 800befc:	0800e7b6 	.word	0x0800e7b6

0800bf00 <__s2b>:
 800bf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf04:	460c      	mov	r4, r1
 800bf06:	4615      	mov	r5, r2
 800bf08:	461f      	mov	r7, r3
 800bf0a:	2209      	movs	r2, #9
 800bf0c:	3308      	adds	r3, #8
 800bf0e:	4606      	mov	r6, r0
 800bf10:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf14:	2100      	movs	r1, #0
 800bf16:	2201      	movs	r2, #1
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	db09      	blt.n	800bf30 <__s2b+0x30>
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f7ff ff47 	bl	800bdb0 <_Balloc>
 800bf22:	b940      	cbnz	r0, 800bf36 <__s2b+0x36>
 800bf24:	4602      	mov	r2, r0
 800bf26:	4b19      	ldr	r3, [pc, #100]	@ (800bf8c <__s2b+0x8c>)
 800bf28:	4819      	ldr	r0, [pc, #100]	@ (800bf90 <__s2b+0x90>)
 800bf2a:	21d3      	movs	r1, #211	@ 0xd3
 800bf2c:	f001 fcc4 	bl	800d8b8 <__assert_func>
 800bf30:	0052      	lsls	r2, r2, #1
 800bf32:	3101      	adds	r1, #1
 800bf34:	e7f0      	b.n	800bf18 <__s2b+0x18>
 800bf36:	9b08      	ldr	r3, [sp, #32]
 800bf38:	6143      	str	r3, [r0, #20]
 800bf3a:	2d09      	cmp	r5, #9
 800bf3c:	f04f 0301 	mov.w	r3, #1
 800bf40:	6103      	str	r3, [r0, #16]
 800bf42:	dd16      	ble.n	800bf72 <__s2b+0x72>
 800bf44:	f104 0909 	add.w	r9, r4, #9
 800bf48:	46c8      	mov	r8, r9
 800bf4a:	442c      	add	r4, r5
 800bf4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf50:	4601      	mov	r1, r0
 800bf52:	3b30      	subs	r3, #48	@ 0x30
 800bf54:	220a      	movs	r2, #10
 800bf56:	4630      	mov	r0, r6
 800bf58:	f7ff ff8c 	bl	800be74 <__multadd>
 800bf5c:	45a0      	cmp	r8, r4
 800bf5e:	d1f5      	bne.n	800bf4c <__s2b+0x4c>
 800bf60:	f1a5 0408 	sub.w	r4, r5, #8
 800bf64:	444c      	add	r4, r9
 800bf66:	1b2d      	subs	r5, r5, r4
 800bf68:	1963      	adds	r3, r4, r5
 800bf6a:	42bb      	cmp	r3, r7
 800bf6c:	db04      	blt.n	800bf78 <__s2b+0x78>
 800bf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf72:	340a      	adds	r4, #10
 800bf74:	2509      	movs	r5, #9
 800bf76:	e7f6      	b.n	800bf66 <__s2b+0x66>
 800bf78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf7c:	4601      	mov	r1, r0
 800bf7e:	3b30      	subs	r3, #48	@ 0x30
 800bf80:	220a      	movs	r2, #10
 800bf82:	4630      	mov	r0, r6
 800bf84:	f7ff ff76 	bl	800be74 <__multadd>
 800bf88:	e7ee      	b.n	800bf68 <__s2b+0x68>
 800bf8a:	bf00      	nop
 800bf8c:	0800e7a5 	.word	0x0800e7a5
 800bf90:	0800e7b6 	.word	0x0800e7b6

0800bf94 <__hi0bits>:
 800bf94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bf98:	4603      	mov	r3, r0
 800bf9a:	bf36      	itet	cc
 800bf9c:	0403      	lslcc	r3, r0, #16
 800bf9e:	2000      	movcs	r0, #0
 800bfa0:	2010      	movcc	r0, #16
 800bfa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bfa6:	bf3c      	itt	cc
 800bfa8:	021b      	lslcc	r3, r3, #8
 800bfaa:	3008      	addcc	r0, #8
 800bfac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfb0:	bf3c      	itt	cc
 800bfb2:	011b      	lslcc	r3, r3, #4
 800bfb4:	3004      	addcc	r0, #4
 800bfb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfba:	bf3c      	itt	cc
 800bfbc:	009b      	lslcc	r3, r3, #2
 800bfbe:	3002      	addcc	r0, #2
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	db05      	blt.n	800bfd0 <__hi0bits+0x3c>
 800bfc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bfc8:	f100 0001 	add.w	r0, r0, #1
 800bfcc:	bf08      	it	eq
 800bfce:	2020      	moveq	r0, #32
 800bfd0:	4770      	bx	lr

0800bfd2 <__lo0bits>:
 800bfd2:	6803      	ldr	r3, [r0, #0]
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	f013 0007 	ands.w	r0, r3, #7
 800bfda:	d00b      	beq.n	800bff4 <__lo0bits+0x22>
 800bfdc:	07d9      	lsls	r1, r3, #31
 800bfde:	d421      	bmi.n	800c024 <__lo0bits+0x52>
 800bfe0:	0798      	lsls	r0, r3, #30
 800bfe2:	bf49      	itett	mi
 800bfe4:	085b      	lsrmi	r3, r3, #1
 800bfe6:	089b      	lsrpl	r3, r3, #2
 800bfe8:	2001      	movmi	r0, #1
 800bfea:	6013      	strmi	r3, [r2, #0]
 800bfec:	bf5c      	itt	pl
 800bfee:	6013      	strpl	r3, [r2, #0]
 800bff0:	2002      	movpl	r0, #2
 800bff2:	4770      	bx	lr
 800bff4:	b299      	uxth	r1, r3
 800bff6:	b909      	cbnz	r1, 800bffc <__lo0bits+0x2a>
 800bff8:	0c1b      	lsrs	r3, r3, #16
 800bffa:	2010      	movs	r0, #16
 800bffc:	b2d9      	uxtb	r1, r3
 800bffe:	b909      	cbnz	r1, 800c004 <__lo0bits+0x32>
 800c000:	3008      	adds	r0, #8
 800c002:	0a1b      	lsrs	r3, r3, #8
 800c004:	0719      	lsls	r1, r3, #28
 800c006:	bf04      	itt	eq
 800c008:	091b      	lsreq	r3, r3, #4
 800c00a:	3004      	addeq	r0, #4
 800c00c:	0799      	lsls	r1, r3, #30
 800c00e:	bf04      	itt	eq
 800c010:	089b      	lsreq	r3, r3, #2
 800c012:	3002      	addeq	r0, #2
 800c014:	07d9      	lsls	r1, r3, #31
 800c016:	d403      	bmi.n	800c020 <__lo0bits+0x4e>
 800c018:	085b      	lsrs	r3, r3, #1
 800c01a:	f100 0001 	add.w	r0, r0, #1
 800c01e:	d003      	beq.n	800c028 <__lo0bits+0x56>
 800c020:	6013      	str	r3, [r2, #0]
 800c022:	4770      	bx	lr
 800c024:	2000      	movs	r0, #0
 800c026:	4770      	bx	lr
 800c028:	2020      	movs	r0, #32
 800c02a:	4770      	bx	lr

0800c02c <__i2b>:
 800c02c:	b510      	push	{r4, lr}
 800c02e:	460c      	mov	r4, r1
 800c030:	2101      	movs	r1, #1
 800c032:	f7ff febd 	bl	800bdb0 <_Balloc>
 800c036:	4602      	mov	r2, r0
 800c038:	b928      	cbnz	r0, 800c046 <__i2b+0x1a>
 800c03a:	4b05      	ldr	r3, [pc, #20]	@ (800c050 <__i2b+0x24>)
 800c03c:	4805      	ldr	r0, [pc, #20]	@ (800c054 <__i2b+0x28>)
 800c03e:	f240 1145 	movw	r1, #325	@ 0x145
 800c042:	f001 fc39 	bl	800d8b8 <__assert_func>
 800c046:	2301      	movs	r3, #1
 800c048:	6144      	str	r4, [r0, #20]
 800c04a:	6103      	str	r3, [r0, #16]
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	bf00      	nop
 800c050:	0800e7a5 	.word	0x0800e7a5
 800c054:	0800e7b6 	.word	0x0800e7b6

0800c058 <__multiply>:
 800c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05c:	4617      	mov	r7, r2
 800c05e:	690a      	ldr	r2, [r1, #16]
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	429a      	cmp	r2, r3
 800c064:	bfa8      	it	ge
 800c066:	463b      	movge	r3, r7
 800c068:	4689      	mov	r9, r1
 800c06a:	bfa4      	itt	ge
 800c06c:	460f      	movge	r7, r1
 800c06e:	4699      	movge	r9, r3
 800c070:	693d      	ldr	r5, [r7, #16]
 800c072:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	6879      	ldr	r1, [r7, #4]
 800c07a:	eb05 060a 	add.w	r6, r5, sl
 800c07e:	42b3      	cmp	r3, r6
 800c080:	b085      	sub	sp, #20
 800c082:	bfb8      	it	lt
 800c084:	3101      	addlt	r1, #1
 800c086:	f7ff fe93 	bl	800bdb0 <_Balloc>
 800c08a:	b930      	cbnz	r0, 800c09a <__multiply+0x42>
 800c08c:	4602      	mov	r2, r0
 800c08e:	4b41      	ldr	r3, [pc, #260]	@ (800c194 <__multiply+0x13c>)
 800c090:	4841      	ldr	r0, [pc, #260]	@ (800c198 <__multiply+0x140>)
 800c092:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c096:	f001 fc0f 	bl	800d8b8 <__assert_func>
 800c09a:	f100 0414 	add.w	r4, r0, #20
 800c09e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c0a2:	4623      	mov	r3, r4
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	4573      	cmp	r3, lr
 800c0a8:	d320      	bcc.n	800c0ec <__multiply+0x94>
 800c0aa:	f107 0814 	add.w	r8, r7, #20
 800c0ae:	f109 0114 	add.w	r1, r9, #20
 800c0b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c0b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c0ba:	9302      	str	r3, [sp, #8]
 800c0bc:	1beb      	subs	r3, r5, r7
 800c0be:	3b15      	subs	r3, #21
 800c0c0:	f023 0303 	bic.w	r3, r3, #3
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	3715      	adds	r7, #21
 800c0c8:	42bd      	cmp	r5, r7
 800c0ca:	bf38      	it	cc
 800c0cc:	2304      	movcc	r3, #4
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	9b02      	ldr	r3, [sp, #8]
 800c0d2:	9103      	str	r1, [sp, #12]
 800c0d4:	428b      	cmp	r3, r1
 800c0d6:	d80c      	bhi.n	800c0f2 <__multiply+0x9a>
 800c0d8:	2e00      	cmp	r6, #0
 800c0da:	dd03      	ble.n	800c0e4 <__multiply+0x8c>
 800c0dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d055      	beq.n	800c190 <__multiply+0x138>
 800c0e4:	6106      	str	r6, [r0, #16]
 800c0e6:	b005      	add	sp, #20
 800c0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ec:	f843 2b04 	str.w	r2, [r3], #4
 800c0f0:	e7d9      	b.n	800c0a6 <__multiply+0x4e>
 800c0f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c0f6:	f1ba 0f00 	cmp.w	sl, #0
 800c0fa:	d01f      	beq.n	800c13c <__multiply+0xe4>
 800c0fc:	46c4      	mov	ip, r8
 800c0fe:	46a1      	mov	r9, r4
 800c100:	2700      	movs	r7, #0
 800c102:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c106:	f8d9 3000 	ldr.w	r3, [r9]
 800c10a:	fa1f fb82 	uxth.w	fp, r2
 800c10e:	b29b      	uxth	r3, r3
 800c110:	fb0a 330b 	mla	r3, sl, fp, r3
 800c114:	443b      	add	r3, r7
 800c116:	f8d9 7000 	ldr.w	r7, [r9]
 800c11a:	0c12      	lsrs	r2, r2, #16
 800c11c:	0c3f      	lsrs	r7, r7, #16
 800c11e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c122:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c126:	b29b      	uxth	r3, r3
 800c128:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c12c:	4565      	cmp	r5, ip
 800c12e:	f849 3b04 	str.w	r3, [r9], #4
 800c132:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c136:	d8e4      	bhi.n	800c102 <__multiply+0xaa>
 800c138:	9b01      	ldr	r3, [sp, #4]
 800c13a:	50e7      	str	r7, [r4, r3]
 800c13c:	9b03      	ldr	r3, [sp, #12]
 800c13e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c142:	3104      	adds	r1, #4
 800c144:	f1b9 0f00 	cmp.w	r9, #0
 800c148:	d020      	beq.n	800c18c <__multiply+0x134>
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	4647      	mov	r7, r8
 800c14e:	46a4      	mov	ip, r4
 800c150:	f04f 0a00 	mov.w	sl, #0
 800c154:	f8b7 b000 	ldrh.w	fp, [r7]
 800c158:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c15c:	fb09 220b 	mla	r2, r9, fp, r2
 800c160:	4452      	add	r2, sl
 800c162:	b29b      	uxth	r3, r3
 800c164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c168:	f84c 3b04 	str.w	r3, [ip], #4
 800c16c:	f857 3b04 	ldr.w	r3, [r7], #4
 800c170:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c174:	f8bc 3000 	ldrh.w	r3, [ip]
 800c178:	fb09 330a 	mla	r3, r9, sl, r3
 800c17c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c180:	42bd      	cmp	r5, r7
 800c182:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c186:	d8e5      	bhi.n	800c154 <__multiply+0xfc>
 800c188:	9a01      	ldr	r2, [sp, #4]
 800c18a:	50a3      	str	r3, [r4, r2]
 800c18c:	3404      	adds	r4, #4
 800c18e:	e79f      	b.n	800c0d0 <__multiply+0x78>
 800c190:	3e01      	subs	r6, #1
 800c192:	e7a1      	b.n	800c0d8 <__multiply+0x80>
 800c194:	0800e7a5 	.word	0x0800e7a5
 800c198:	0800e7b6 	.word	0x0800e7b6

0800c19c <__pow5mult>:
 800c19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a0:	4615      	mov	r5, r2
 800c1a2:	f012 0203 	ands.w	r2, r2, #3
 800c1a6:	4607      	mov	r7, r0
 800c1a8:	460e      	mov	r6, r1
 800c1aa:	d007      	beq.n	800c1bc <__pow5mult+0x20>
 800c1ac:	4c25      	ldr	r4, [pc, #148]	@ (800c244 <__pow5mult+0xa8>)
 800c1ae:	3a01      	subs	r2, #1
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1b6:	f7ff fe5d 	bl	800be74 <__multadd>
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	10ad      	asrs	r5, r5, #2
 800c1be:	d03d      	beq.n	800c23c <__pow5mult+0xa0>
 800c1c0:	69fc      	ldr	r4, [r7, #28]
 800c1c2:	b97c      	cbnz	r4, 800c1e4 <__pow5mult+0x48>
 800c1c4:	2010      	movs	r0, #16
 800c1c6:	f7ff fd3d 	bl	800bc44 <malloc>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	61f8      	str	r0, [r7, #28]
 800c1ce:	b928      	cbnz	r0, 800c1dc <__pow5mult+0x40>
 800c1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c248 <__pow5mult+0xac>)
 800c1d2:	481e      	ldr	r0, [pc, #120]	@ (800c24c <__pow5mult+0xb0>)
 800c1d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c1d8:	f001 fb6e 	bl	800d8b8 <__assert_func>
 800c1dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1e0:	6004      	str	r4, [r0, #0]
 800c1e2:	60c4      	str	r4, [r0, #12]
 800c1e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c1e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1ec:	b94c      	cbnz	r4, 800c202 <__pow5mult+0x66>
 800c1ee:	f240 2171 	movw	r1, #625	@ 0x271
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	f7ff ff1a 	bl	800c02c <__i2b>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1fe:	4604      	mov	r4, r0
 800c200:	6003      	str	r3, [r0, #0]
 800c202:	f04f 0900 	mov.w	r9, #0
 800c206:	07eb      	lsls	r3, r5, #31
 800c208:	d50a      	bpl.n	800c220 <__pow5mult+0x84>
 800c20a:	4631      	mov	r1, r6
 800c20c:	4622      	mov	r2, r4
 800c20e:	4638      	mov	r0, r7
 800c210:	f7ff ff22 	bl	800c058 <__multiply>
 800c214:	4631      	mov	r1, r6
 800c216:	4680      	mov	r8, r0
 800c218:	4638      	mov	r0, r7
 800c21a:	f7ff fe09 	bl	800be30 <_Bfree>
 800c21e:	4646      	mov	r6, r8
 800c220:	106d      	asrs	r5, r5, #1
 800c222:	d00b      	beq.n	800c23c <__pow5mult+0xa0>
 800c224:	6820      	ldr	r0, [r4, #0]
 800c226:	b938      	cbnz	r0, 800c238 <__pow5mult+0x9c>
 800c228:	4622      	mov	r2, r4
 800c22a:	4621      	mov	r1, r4
 800c22c:	4638      	mov	r0, r7
 800c22e:	f7ff ff13 	bl	800c058 <__multiply>
 800c232:	6020      	str	r0, [r4, #0]
 800c234:	f8c0 9000 	str.w	r9, [r0]
 800c238:	4604      	mov	r4, r0
 800c23a:	e7e4      	b.n	800c206 <__pow5mult+0x6a>
 800c23c:	4630      	mov	r0, r6
 800c23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c242:	bf00      	nop
 800c244:	0800e8c8 	.word	0x0800e8c8
 800c248:	0800e736 	.word	0x0800e736
 800c24c:	0800e7b6 	.word	0x0800e7b6

0800c250 <__lshift>:
 800c250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c254:	460c      	mov	r4, r1
 800c256:	6849      	ldr	r1, [r1, #4]
 800c258:	6923      	ldr	r3, [r4, #16]
 800c25a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c25e:	68a3      	ldr	r3, [r4, #8]
 800c260:	4607      	mov	r7, r0
 800c262:	4691      	mov	r9, r2
 800c264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c268:	f108 0601 	add.w	r6, r8, #1
 800c26c:	42b3      	cmp	r3, r6
 800c26e:	db0b      	blt.n	800c288 <__lshift+0x38>
 800c270:	4638      	mov	r0, r7
 800c272:	f7ff fd9d 	bl	800bdb0 <_Balloc>
 800c276:	4605      	mov	r5, r0
 800c278:	b948      	cbnz	r0, 800c28e <__lshift+0x3e>
 800c27a:	4602      	mov	r2, r0
 800c27c:	4b28      	ldr	r3, [pc, #160]	@ (800c320 <__lshift+0xd0>)
 800c27e:	4829      	ldr	r0, [pc, #164]	@ (800c324 <__lshift+0xd4>)
 800c280:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c284:	f001 fb18 	bl	800d8b8 <__assert_func>
 800c288:	3101      	adds	r1, #1
 800c28a:	005b      	lsls	r3, r3, #1
 800c28c:	e7ee      	b.n	800c26c <__lshift+0x1c>
 800c28e:	2300      	movs	r3, #0
 800c290:	f100 0114 	add.w	r1, r0, #20
 800c294:	f100 0210 	add.w	r2, r0, #16
 800c298:	4618      	mov	r0, r3
 800c29a:	4553      	cmp	r3, sl
 800c29c:	db33      	blt.n	800c306 <__lshift+0xb6>
 800c29e:	6920      	ldr	r0, [r4, #16]
 800c2a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2a4:	f104 0314 	add.w	r3, r4, #20
 800c2a8:	f019 091f 	ands.w	r9, r9, #31
 800c2ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2b4:	d02b      	beq.n	800c30e <__lshift+0xbe>
 800c2b6:	f1c9 0e20 	rsb	lr, r9, #32
 800c2ba:	468a      	mov	sl, r1
 800c2bc:	2200      	movs	r2, #0
 800c2be:	6818      	ldr	r0, [r3, #0]
 800c2c0:	fa00 f009 	lsl.w	r0, r0, r9
 800c2c4:	4310      	orrs	r0, r2
 800c2c6:	f84a 0b04 	str.w	r0, [sl], #4
 800c2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ce:	459c      	cmp	ip, r3
 800c2d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2d4:	d8f3      	bhi.n	800c2be <__lshift+0x6e>
 800c2d6:	ebac 0304 	sub.w	r3, ip, r4
 800c2da:	3b15      	subs	r3, #21
 800c2dc:	f023 0303 	bic.w	r3, r3, #3
 800c2e0:	3304      	adds	r3, #4
 800c2e2:	f104 0015 	add.w	r0, r4, #21
 800c2e6:	4560      	cmp	r0, ip
 800c2e8:	bf88      	it	hi
 800c2ea:	2304      	movhi	r3, #4
 800c2ec:	50ca      	str	r2, [r1, r3]
 800c2ee:	b10a      	cbz	r2, 800c2f4 <__lshift+0xa4>
 800c2f0:	f108 0602 	add.w	r6, r8, #2
 800c2f4:	3e01      	subs	r6, #1
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	612e      	str	r6, [r5, #16]
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	f7ff fd98 	bl	800be30 <_Bfree>
 800c300:	4628      	mov	r0, r5
 800c302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c306:	f842 0f04 	str.w	r0, [r2, #4]!
 800c30a:	3301      	adds	r3, #1
 800c30c:	e7c5      	b.n	800c29a <__lshift+0x4a>
 800c30e:	3904      	subs	r1, #4
 800c310:	f853 2b04 	ldr.w	r2, [r3], #4
 800c314:	f841 2f04 	str.w	r2, [r1, #4]!
 800c318:	459c      	cmp	ip, r3
 800c31a:	d8f9      	bhi.n	800c310 <__lshift+0xc0>
 800c31c:	e7ea      	b.n	800c2f4 <__lshift+0xa4>
 800c31e:	bf00      	nop
 800c320:	0800e7a5 	.word	0x0800e7a5
 800c324:	0800e7b6 	.word	0x0800e7b6

0800c328 <__mcmp>:
 800c328:	690a      	ldr	r2, [r1, #16]
 800c32a:	4603      	mov	r3, r0
 800c32c:	6900      	ldr	r0, [r0, #16]
 800c32e:	1a80      	subs	r0, r0, r2
 800c330:	b530      	push	{r4, r5, lr}
 800c332:	d10e      	bne.n	800c352 <__mcmp+0x2a>
 800c334:	3314      	adds	r3, #20
 800c336:	3114      	adds	r1, #20
 800c338:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c33c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c340:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c348:	4295      	cmp	r5, r2
 800c34a:	d003      	beq.n	800c354 <__mcmp+0x2c>
 800c34c:	d205      	bcs.n	800c35a <__mcmp+0x32>
 800c34e:	f04f 30ff 	mov.w	r0, #4294967295
 800c352:	bd30      	pop	{r4, r5, pc}
 800c354:	42a3      	cmp	r3, r4
 800c356:	d3f3      	bcc.n	800c340 <__mcmp+0x18>
 800c358:	e7fb      	b.n	800c352 <__mcmp+0x2a>
 800c35a:	2001      	movs	r0, #1
 800c35c:	e7f9      	b.n	800c352 <__mcmp+0x2a>
	...

0800c360 <__mdiff>:
 800c360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c364:	4689      	mov	r9, r1
 800c366:	4606      	mov	r6, r0
 800c368:	4611      	mov	r1, r2
 800c36a:	4648      	mov	r0, r9
 800c36c:	4614      	mov	r4, r2
 800c36e:	f7ff ffdb 	bl	800c328 <__mcmp>
 800c372:	1e05      	subs	r5, r0, #0
 800c374:	d112      	bne.n	800c39c <__mdiff+0x3c>
 800c376:	4629      	mov	r1, r5
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff fd19 	bl	800bdb0 <_Balloc>
 800c37e:	4602      	mov	r2, r0
 800c380:	b928      	cbnz	r0, 800c38e <__mdiff+0x2e>
 800c382:	4b3f      	ldr	r3, [pc, #252]	@ (800c480 <__mdiff+0x120>)
 800c384:	f240 2137 	movw	r1, #567	@ 0x237
 800c388:	483e      	ldr	r0, [pc, #248]	@ (800c484 <__mdiff+0x124>)
 800c38a:	f001 fa95 	bl	800d8b8 <__assert_func>
 800c38e:	2301      	movs	r3, #1
 800c390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c394:	4610      	mov	r0, r2
 800c396:	b003      	add	sp, #12
 800c398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c39c:	bfbc      	itt	lt
 800c39e:	464b      	movlt	r3, r9
 800c3a0:	46a1      	movlt	r9, r4
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c3a8:	bfba      	itte	lt
 800c3aa:	461c      	movlt	r4, r3
 800c3ac:	2501      	movlt	r5, #1
 800c3ae:	2500      	movge	r5, #0
 800c3b0:	f7ff fcfe 	bl	800bdb0 <_Balloc>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	b918      	cbnz	r0, 800c3c0 <__mdiff+0x60>
 800c3b8:	4b31      	ldr	r3, [pc, #196]	@ (800c480 <__mdiff+0x120>)
 800c3ba:	f240 2145 	movw	r1, #581	@ 0x245
 800c3be:	e7e3      	b.n	800c388 <__mdiff+0x28>
 800c3c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c3c4:	6926      	ldr	r6, [r4, #16]
 800c3c6:	60c5      	str	r5, [r0, #12]
 800c3c8:	f109 0310 	add.w	r3, r9, #16
 800c3cc:	f109 0514 	add.w	r5, r9, #20
 800c3d0:	f104 0e14 	add.w	lr, r4, #20
 800c3d4:	f100 0b14 	add.w	fp, r0, #20
 800c3d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c3dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c3e0:	9301      	str	r3, [sp, #4]
 800c3e2:	46d9      	mov	r9, fp
 800c3e4:	f04f 0c00 	mov.w	ip, #0
 800c3e8:	9b01      	ldr	r3, [sp, #4]
 800c3ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c3ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c3f2:	9301      	str	r3, [sp, #4]
 800c3f4:	fa1f f38a 	uxth.w	r3, sl
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	b283      	uxth	r3, r0
 800c3fc:	1acb      	subs	r3, r1, r3
 800c3fe:	0c00      	lsrs	r0, r0, #16
 800c400:	4463      	add	r3, ip
 800c402:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c406:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c410:	4576      	cmp	r6, lr
 800c412:	f849 3b04 	str.w	r3, [r9], #4
 800c416:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c41a:	d8e5      	bhi.n	800c3e8 <__mdiff+0x88>
 800c41c:	1b33      	subs	r3, r6, r4
 800c41e:	3b15      	subs	r3, #21
 800c420:	f023 0303 	bic.w	r3, r3, #3
 800c424:	3415      	adds	r4, #21
 800c426:	3304      	adds	r3, #4
 800c428:	42a6      	cmp	r6, r4
 800c42a:	bf38      	it	cc
 800c42c:	2304      	movcc	r3, #4
 800c42e:	441d      	add	r5, r3
 800c430:	445b      	add	r3, fp
 800c432:	461e      	mov	r6, r3
 800c434:	462c      	mov	r4, r5
 800c436:	4544      	cmp	r4, r8
 800c438:	d30e      	bcc.n	800c458 <__mdiff+0xf8>
 800c43a:	f108 0103 	add.w	r1, r8, #3
 800c43e:	1b49      	subs	r1, r1, r5
 800c440:	f021 0103 	bic.w	r1, r1, #3
 800c444:	3d03      	subs	r5, #3
 800c446:	45a8      	cmp	r8, r5
 800c448:	bf38      	it	cc
 800c44a:	2100      	movcc	r1, #0
 800c44c:	440b      	add	r3, r1
 800c44e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c452:	b191      	cbz	r1, 800c47a <__mdiff+0x11a>
 800c454:	6117      	str	r7, [r2, #16]
 800c456:	e79d      	b.n	800c394 <__mdiff+0x34>
 800c458:	f854 1b04 	ldr.w	r1, [r4], #4
 800c45c:	46e6      	mov	lr, ip
 800c45e:	0c08      	lsrs	r0, r1, #16
 800c460:	fa1c fc81 	uxtah	ip, ip, r1
 800c464:	4471      	add	r1, lr
 800c466:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c46a:	b289      	uxth	r1, r1
 800c46c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c470:	f846 1b04 	str.w	r1, [r6], #4
 800c474:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c478:	e7dd      	b.n	800c436 <__mdiff+0xd6>
 800c47a:	3f01      	subs	r7, #1
 800c47c:	e7e7      	b.n	800c44e <__mdiff+0xee>
 800c47e:	bf00      	nop
 800c480:	0800e7a5 	.word	0x0800e7a5
 800c484:	0800e7b6 	.word	0x0800e7b6

0800c488 <__ulp>:
 800c488:	b082      	sub	sp, #8
 800c48a:	ed8d 0b00 	vstr	d0, [sp]
 800c48e:	9a01      	ldr	r2, [sp, #4]
 800c490:	4b0f      	ldr	r3, [pc, #60]	@ (800c4d0 <__ulp+0x48>)
 800c492:	4013      	ands	r3, r2
 800c494:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c498:	2b00      	cmp	r3, #0
 800c49a:	dc08      	bgt.n	800c4ae <__ulp+0x26>
 800c49c:	425b      	negs	r3, r3
 800c49e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c4a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c4a6:	da04      	bge.n	800c4b2 <__ulp+0x2a>
 800c4a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c4ac:	4113      	asrs	r3, r2
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	e008      	b.n	800c4c4 <__ulp+0x3c>
 800c4b2:	f1a2 0314 	sub.w	r3, r2, #20
 800c4b6:	2b1e      	cmp	r3, #30
 800c4b8:	bfda      	itte	le
 800c4ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c4be:	40da      	lsrle	r2, r3
 800c4c0:	2201      	movgt	r2, #1
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	ec41 0b10 	vmov	d0, r0, r1
 800c4cc:	b002      	add	sp, #8
 800c4ce:	4770      	bx	lr
 800c4d0:	7ff00000 	.word	0x7ff00000

0800c4d4 <__b2d>:
 800c4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d8:	6906      	ldr	r6, [r0, #16]
 800c4da:	f100 0814 	add.w	r8, r0, #20
 800c4de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c4e2:	1f37      	subs	r7, r6, #4
 800c4e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	f7ff fd53 	bl	800bf94 <__hi0bits>
 800c4ee:	f1c0 0320 	rsb	r3, r0, #32
 800c4f2:	280a      	cmp	r0, #10
 800c4f4:	600b      	str	r3, [r1, #0]
 800c4f6:	491b      	ldr	r1, [pc, #108]	@ (800c564 <__b2d+0x90>)
 800c4f8:	dc15      	bgt.n	800c526 <__b2d+0x52>
 800c4fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800c4fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800c502:	45b8      	cmp	r8, r7
 800c504:	ea43 0501 	orr.w	r5, r3, r1
 800c508:	bf34      	ite	cc
 800c50a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c50e:	2300      	movcs	r3, #0
 800c510:	3015      	adds	r0, #21
 800c512:	fa02 f000 	lsl.w	r0, r2, r0
 800c516:	fa23 f30c 	lsr.w	r3, r3, ip
 800c51a:	4303      	orrs	r3, r0
 800c51c:	461c      	mov	r4, r3
 800c51e:	ec45 4b10 	vmov	d0, r4, r5
 800c522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c526:	45b8      	cmp	r8, r7
 800c528:	bf3a      	itte	cc
 800c52a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c52e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c532:	2300      	movcs	r3, #0
 800c534:	380b      	subs	r0, #11
 800c536:	d012      	beq.n	800c55e <__b2d+0x8a>
 800c538:	f1c0 0120 	rsb	r1, r0, #32
 800c53c:	fa23 f401 	lsr.w	r4, r3, r1
 800c540:	4082      	lsls	r2, r0
 800c542:	4322      	orrs	r2, r4
 800c544:	4547      	cmp	r7, r8
 800c546:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c54a:	bf8c      	ite	hi
 800c54c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c550:	2200      	movls	r2, #0
 800c552:	4083      	lsls	r3, r0
 800c554:	40ca      	lsrs	r2, r1
 800c556:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c55a:	4313      	orrs	r3, r2
 800c55c:	e7de      	b.n	800c51c <__b2d+0x48>
 800c55e:	ea42 0501 	orr.w	r5, r2, r1
 800c562:	e7db      	b.n	800c51c <__b2d+0x48>
 800c564:	3ff00000 	.word	0x3ff00000

0800c568 <__d2b>:
 800c568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c56c:	460f      	mov	r7, r1
 800c56e:	2101      	movs	r1, #1
 800c570:	ec59 8b10 	vmov	r8, r9, d0
 800c574:	4616      	mov	r6, r2
 800c576:	f7ff fc1b 	bl	800bdb0 <_Balloc>
 800c57a:	4604      	mov	r4, r0
 800c57c:	b930      	cbnz	r0, 800c58c <__d2b+0x24>
 800c57e:	4602      	mov	r2, r0
 800c580:	4b23      	ldr	r3, [pc, #140]	@ (800c610 <__d2b+0xa8>)
 800c582:	4824      	ldr	r0, [pc, #144]	@ (800c614 <__d2b+0xac>)
 800c584:	f240 310f 	movw	r1, #783	@ 0x30f
 800c588:	f001 f996 	bl	800d8b8 <__assert_func>
 800c58c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c594:	b10d      	cbz	r5, 800c59a <__d2b+0x32>
 800c596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	f1b8 0300 	subs.w	r3, r8, #0
 800c5a0:	d023      	beq.n	800c5ea <__d2b+0x82>
 800c5a2:	4668      	mov	r0, sp
 800c5a4:	9300      	str	r3, [sp, #0]
 800c5a6:	f7ff fd14 	bl	800bfd2 <__lo0bits>
 800c5aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5ae:	b1d0      	cbz	r0, 800c5e6 <__d2b+0x7e>
 800c5b0:	f1c0 0320 	rsb	r3, r0, #32
 800c5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b8:	430b      	orrs	r3, r1
 800c5ba:	40c2      	lsrs	r2, r0
 800c5bc:	6163      	str	r3, [r4, #20]
 800c5be:	9201      	str	r2, [sp, #4]
 800c5c0:	9b01      	ldr	r3, [sp, #4]
 800c5c2:	61a3      	str	r3, [r4, #24]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	bf0c      	ite	eq
 800c5c8:	2201      	moveq	r2, #1
 800c5ca:	2202      	movne	r2, #2
 800c5cc:	6122      	str	r2, [r4, #16]
 800c5ce:	b1a5      	cbz	r5, 800c5fa <__d2b+0x92>
 800c5d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c5d4:	4405      	add	r5, r0
 800c5d6:	603d      	str	r5, [r7, #0]
 800c5d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c5dc:	6030      	str	r0, [r6, #0]
 800c5de:	4620      	mov	r0, r4
 800c5e0:	b003      	add	sp, #12
 800c5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5e6:	6161      	str	r1, [r4, #20]
 800c5e8:	e7ea      	b.n	800c5c0 <__d2b+0x58>
 800c5ea:	a801      	add	r0, sp, #4
 800c5ec:	f7ff fcf1 	bl	800bfd2 <__lo0bits>
 800c5f0:	9b01      	ldr	r3, [sp, #4]
 800c5f2:	6163      	str	r3, [r4, #20]
 800c5f4:	3020      	adds	r0, #32
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	e7e8      	b.n	800c5cc <__d2b+0x64>
 800c5fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c602:	6038      	str	r0, [r7, #0]
 800c604:	6918      	ldr	r0, [r3, #16]
 800c606:	f7ff fcc5 	bl	800bf94 <__hi0bits>
 800c60a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c60e:	e7e5      	b.n	800c5dc <__d2b+0x74>
 800c610:	0800e7a5 	.word	0x0800e7a5
 800c614:	0800e7b6 	.word	0x0800e7b6

0800c618 <__ratio>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	b085      	sub	sp, #20
 800c61e:	e9cd 1000 	strd	r1, r0, [sp]
 800c622:	a902      	add	r1, sp, #8
 800c624:	f7ff ff56 	bl	800c4d4 <__b2d>
 800c628:	9800      	ldr	r0, [sp, #0]
 800c62a:	a903      	add	r1, sp, #12
 800c62c:	ec55 4b10 	vmov	r4, r5, d0
 800c630:	f7ff ff50 	bl	800c4d4 <__b2d>
 800c634:	9b01      	ldr	r3, [sp, #4]
 800c636:	6919      	ldr	r1, [r3, #16]
 800c638:	9b00      	ldr	r3, [sp, #0]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	1ac9      	subs	r1, r1, r3
 800c63e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c642:	1a9b      	subs	r3, r3, r2
 800c644:	ec5b ab10 	vmov	sl, fp, d0
 800c648:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	bfce      	itee	gt
 800c650:	462a      	movgt	r2, r5
 800c652:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c656:	465a      	movle	r2, fp
 800c658:	462f      	mov	r7, r5
 800c65a:	46d9      	mov	r9, fp
 800c65c:	bfcc      	ite	gt
 800c65e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c662:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c666:	464b      	mov	r3, r9
 800c668:	4652      	mov	r2, sl
 800c66a:	4620      	mov	r0, r4
 800c66c:	4639      	mov	r1, r7
 800c66e:	f7f4 f8ed 	bl	800084c <__aeabi_ddiv>
 800c672:	ec41 0b10 	vmov	d0, r0, r1
 800c676:	b005      	add	sp, #20
 800c678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c67c <__copybits>:
 800c67c:	3901      	subs	r1, #1
 800c67e:	b570      	push	{r4, r5, r6, lr}
 800c680:	1149      	asrs	r1, r1, #5
 800c682:	6914      	ldr	r4, [r2, #16]
 800c684:	3101      	adds	r1, #1
 800c686:	f102 0314 	add.w	r3, r2, #20
 800c68a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c68e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c692:	1f05      	subs	r5, r0, #4
 800c694:	42a3      	cmp	r3, r4
 800c696:	d30c      	bcc.n	800c6b2 <__copybits+0x36>
 800c698:	1aa3      	subs	r3, r4, r2
 800c69a:	3b11      	subs	r3, #17
 800c69c:	f023 0303 	bic.w	r3, r3, #3
 800c6a0:	3211      	adds	r2, #17
 800c6a2:	42a2      	cmp	r2, r4
 800c6a4:	bf88      	it	hi
 800c6a6:	2300      	movhi	r3, #0
 800c6a8:	4418      	add	r0, r3
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	4288      	cmp	r0, r1
 800c6ae:	d305      	bcc.n	800c6bc <__copybits+0x40>
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
 800c6b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c6b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c6ba:	e7eb      	b.n	800c694 <__copybits+0x18>
 800c6bc:	f840 3b04 	str.w	r3, [r0], #4
 800c6c0:	e7f4      	b.n	800c6ac <__copybits+0x30>

0800c6c2 <__any_on>:
 800c6c2:	f100 0214 	add.w	r2, r0, #20
 800c6c6:	6900      	ldr	r0, [r0, #16]
 800c6c8:	114b      	asrs	r3, r1, #5
 800c6ca:	4298      	cmp	r0, r3
 800c6cc:	b510      	push	{r4, lr}
 800c6ce:	db11      	blt.n	800c6f4 <__any_on+0x32>
 800c6d0:	dd0a      	ble.n	800c6e8 <__any_on+0x26>
 800c6d2:	f011 011f 	ands.w	r1, r1, #31
 800c6d6:	d007      	beq.n	800c6e8 <__any_on+0x26>
 800c6d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c6dc:	fa24 f001 	lsr.w	r0, r4, r1
 800c6e0:	fa00 f101 	lsl.w	r1, r0, r1
 800c6e4:	428c      	cmp	r4, r1
 800c6e6:	d10b      	bne.n	800c700 <__any_on+0x3e>
 800c6e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d803      	bhi.n	800c6f8 <__any_on+0x36>
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	bd10      	pop	{r4, pc}
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	e7f7      	b.n	800c6e8 <__any_on+0x26>
 800c6f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6fc:	2900      	cmp	r1, #0
 800c6fe:	d0f5      	beq.n	800c6ec <__any_on+0x2a>
 800c700:	2001      	movs	r0, #1
 800c702:	e7f6      	b.n	800c6f2 <__any_on+0x30>

0800c704 <sulp>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	4604      	mov	r4, r0
 800c708:	460d      	mov	r5, r1
 800c70a:	ec45 4b10 	vmov	d0, r4, r5
 800c70e:	4616      	mov	r6, r2
 800c710:	f7ff feba 	bl	800c488 <__ulp>
 800c714:	ec51 0b10 	vmov	r0, r1, d0
 800c718:	b17e      	cbz	r6, 800c73a <sulp+0x36>
 800c71a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c71e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c722:	2b00      	cmp	r3, #0
 800c724:	dd09      	ble.n	800c73a <sulp+0x36>
 800c726:	051b      	lsls	r3, r3, #20
 800c728:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c72c:	2400      	movs	r4, #0
 800c72e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c732:	4622      	mov	r2, r4
 800c734:	462b      	mov	r3, r5
 800c736:	f7f3 ff5f 	bl	80005f8 <__aeabi_dmul>
 800c73a:	ec41 0b10 	vmov	d0, r0, r1
 800c73e:	bd70      	pop	{r4, r5, r6, pc}

0800c740 <_strtod_l>:
 800c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	b09f      	sub	sp, #124	@ 0x7c
 800c746:	460c      	mov	r4, r1
 800c748:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c74a:	2200      	movs	r2, #0
 800c74c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c74e:	9005      	str	r0, [sp, #20]
 800c750:	f04f 0a00 	mov.w	sl, #0
 800c754:	f04f 0b00 	mov.w	fp, #0
 800c758:	460a      	mov	r2, r1
 800c75a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c75c:	7811      	ldrb	r1, [r2, #0]
 800c75e:	292b      	cmp	r1, #43	@ 0x2b
 800c760:	d04a      	beq.n	800c7f8 <_strtod_l+0xb8>
 800c762:	d838      	bhi.n	800c7d6 <_strtod_l+0x96>
 800c764:	290d      	cmp	r1, #13
 800c766:	d832      	bhi.n	800c7ce <_strtod_l+0x8e>
 800c768:	2908      	cmp	r1, #8
 800c76a:	d832      	bhi.n	800c7d2 <_strtod_l+0x92>
 800c76c:	2900      	cmp	r1, #0
 800c76e:	d03b      	beq.n	800c7e8 <_strtod_l+0xa8>
 800c770:	2200      	movs	r2, #0
 800c772:	920e      	str	r2, [sp, #56]	@ 0x38
 800c774:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c776:	782a      	ldrb	r2, [r5, #0]
 800c778:	2a30      	cmp	r2, #48	@ 0x30
 800c77a:	f040 80b2 	bne.w	800c8e2 <_strtod_l+0x1a2>
 800c77e:	786a      	ldrb	r2, [r5, #1]
 800c780:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c784:	2a58      	cmp	r2, #88	@ 0x58
 800c786:	d16e      	bne.n	800c866 <_strtod_l+0x126>
 800c788:	9302      	str	r3, [sp, #8]
 800c78a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	4a8f      	ldr	r2, [pc, #572]	@ (800c9d0 <_strtod_l+0x290>)
 800c794:	9805      	ldr	r0, [sp, #20]
 800c796:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c798:	a919      	add	r1, sp, #100	@ 0x64
 800c79a:	f001 f927 	bl	800d9ec <__gethex>
 800c79e:	f010 060f 	ands.w	r6, r0, #15
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	d005      	beq.n	800c7b2 <_strtod_l+0x72>
 800c7a6:	2e06      	cmp	r6, #6
 800c7a8:	d128      	bne.n	800c7fc <_strtod_l+0xbc>
 800c7aa:	3501      	adds	r5, #1
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800c7b0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c7b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f040 858e 	bne.w	800d2d6 <_strtod_l+0xb96>
 800c7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7bc:	b1cb      	cbz	r3, 800c7f2 <_strtod_l+0xb2>
 800c7be:	4652      	mov	r2, sl
 800c7c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c7c4:	ec43 2b10 	vmov	d0, r2, r3
 800c7c8:	b01f      	add	sp, #124	@ 0x7c
 800c7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ce:	2920      	cmp	r1, #32
 800c7d0:	d1ce      	bne.n	800c770 <_strtod_l+0x30>
 800c7d2:	3201      	adds	r2, #1
 800c7d4:	e7c1      	b.n	800c75a <_strtod_l+0x1a>
 800c7d6:	292d      	cmp	r1, #45	@ 0x2d
 800c7d8:	d1ca      	bne.n	800c770 <_strtod_l+0x30>
 800c7da:	2101      	movs	r1, #1
 800c7dc:	910e      	str	r1, [sp, #56]	@ 0x38
 800c7de:	1c51      	adds	r1, r2, #1
 800c7e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c7e2:	7852      	ldrb	r2, [r2, #1]
 800c7e4:	2a00      	cmp	r2, #0
 800c7e6:	d1c5      	bne.n	800c774 <_strtod_l+0x34>
 800c7e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c7ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f040 8570 	bne.w	800d2d2 <_strtod_l+0xb92>
 800c7f2:	4652      	mov	r2, sl
 800c7f4:	465b      	mov	r3, fp
 800c7f6:	e7e5      	b.n	800c7c4 <_strtod_l+0x84>
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	e7ef      	b.n	800c7dc <_strtod_l+0x9c>
 800c7fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c7fe:	b13a      	cbz	r2, 800c810 <_strtod_l+0xd0>
 800c800:	2135      	movs	r1, #53	@ 0x35
 800c802:	a81c      	add	r0, sp, #112	@ 0x70
 800c804:	f7ff ff3a 	bl	800c67c <__copybits>
 800c808:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c80a:	9805      	ldr	r0, [sp, #20]
 800c80c:	f7ff fb10 	bl	800be30 <_Bfree>
 800c810:	3e01      	subs	r6, #1
 800c812:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c814:	2e04      	cmp	r6, #4
 800c816:	d806      	bhi.n	800c826 <_strtod_l+0xe6>
 800c818:	e8df f006 	tbb	[pc, r6]
 800c81c:	201d0314 	.word	0x201d0314
 800c820:	14          	.byte	0x14
 800c821:	00          	.byte	0x00
 800c822:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c826:	05e1      	lsls	r1, r4, #23
 800c828:	bf48      	it	mi
 800c82a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c82e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c832:	0d1b      	lsrs	r3, r3, #20
 800c834:	051b      	lsls	r3, r3, #20
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1bb      	bne.n	800c7b2 <_strtod_l+0x72>
 800c83a:	f7fe fb2b 	bl	800ae94 <__errno>
 800c83e:	2322      	movs	r3, #34	@ 0x22
 800c840:	6003      	str	r3, [r0, #0]
 800c842:	e7b6      	b.n	800c7b2 <_strtod_l+0x72>
 800c844:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c848:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c84c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c850:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c854:	e7e7      	b.n	800c826 <_strtod_l+0xe6>
 800c856:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c9d8 <_strtod_l+0x298>
 800c85a:	e7e4      	b.n	800c826 <_strtod_l+0xe6>
 800c85c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c860:	f04f 3aff 	mov.w	sl, #4294967295
 800c864:	e7df      	b.n	800c826 <_strtod_l+0xe6>
 800c866:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c868:	1c5a      	adds	r2, r3, #1
 800c86a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c86c:	785b      	ldrb	r3, [r3, #1]
 800c86e:	2b30      	cmp	r3, #48	@ 0x30
 800c870:	d0f9      	beq.n	800c866 <_strtod_l+0x126>
 800c872:	2b00      	cmp	r3, #0
 800c874:	d09d      	beq.n	800c7b2 <_strtod_l+0x72>
 800c876:	2301      	movs	r3, #1
 800c878:	2700      	movs	r7, #0
 800c87a:	9308      	str	r3, [sp, #32]
 800c87c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c87e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c880:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c882:	46b9      	mov	r9, r7
 800c884:	220a      	movs	r2, #10
 800c886:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c888:	7805      	ldrb	r5, [r0, #0]
 800c88a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c88e:	b2d9      	uxtb	r1, r3
 800c890:	2909      	cmp	r1, #9
 800c892:	d928      	bls.n	800c8e6 <_strtod_l+0x1a6>
 800c894:	494f      	ldr	r1, [pc, #316]	@ (800c9d4 <_strtod_l+0x294>)
 800c896:	2201      	movs	r2, #1
 800c898:	f000 ffd6 	bl	800d848 <strncmp>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d032      	beq.n	800c906 <_strtod_l+0x1c6>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	462a      	mov	r2, r5
 800c8a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c8a6:	464d      	mov	r5, r9
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2a65      	cmp	r2, #101	@ 0x65
 800c8ac:	d001      	beq.n	800c8b2 <_strtod_l+0x172>
 800c8ae:	2a45      	cmp	r2, #69	@ 0x45
 800c8b0:	d114      	bne.n	800c8dc <_strtod_l+0x19c>
 800c8b2:	b91d      	cbnz	r5, 800c8bc <_strtod_l+0x17c>
 800c8b4:	9a08      	ldr	r2, [sp, #32]
 800c8b6:	4302      	orrs	r2, r0
 800c8b8:	d096      	beq.n	800c7e8 <_strtod_l+0xa8>
 800c8ba:	2500      	movs	r5, #0
 800c8bc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c8be:	1c62      	adds	r2, r4, #1
 800c8c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8c2:	7862      	ldrb	r2, [r4, #1]
 800c8c4:	2a2b      	cmp	r2, #43	@ 0x2b
 800c8c6:	d07a      	beq.n	800c9be <_strtod_l+0x27e>
 800c8c8:	2a2d      	cmp	r2, #45	@ 0x2d
 800c8ca:	d07e      	beq.n	800c9ca <_strtod_l+0x28a>
 800c8cc:	f04f 0c00 	mov.w	ip, #0
 800c8d0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c8d4:	2909      	cmp	r1, #9
 800c8d6:	f240 8085 	bls.w	800c9e4 <_strtod_l+0x2a4>
 800c8da:	9419      	str	r4, [sp, #100]	@ 0x64
 800c8dc:	f04f 0800 	mov.w	r8, #0
 800c8e0:	e0a5      	b.n	800ca2e <_strtod_l+0x2ee>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	e7c8      	b.n	800c878 <_strtod_l+0x138>
 800c8e6:	f1b9 0f08 	cmp.w	r9, #8
 800c8ea:	bfd8      	it	le
 800c8ec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c8ee:	f100 0001 	add.w	r0, r0, #1
 800c8f2:	bfda      	itte	le
 800c8f4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c8f8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c8fa:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c8fe:	f109 0901 	add.w	r9, r9, #1
 800c902:	9019      	str	r0, [sp, #100]	@ 0x64
 800c904:	e7bf      	b.n	800c886 <_strtod_l+0x146>
 800c906:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c90c:	785a      	ldrb	r2, [r3, #1]
 800c90e:	f1b9 0f00 	cmp.w	r9, #0
 800c912:	d03b      	beq.n	800c98c <_strtod_l+0x24c>
 800c914:	900a      	str	r0, [sp, #40]	@ 0x28
 800c916:	464d      	mov	r5, r9
 800c918:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c91c:	2b09      	cmp	r3, #9
 800c91e:	d912      	bls.n	800c946 <_strtod_l+0x206>
 800c920:	2301      	movs	r3, #1
 800c922:	e7c2      	b.n	800c8aa <_strtod_l+0x16a>
 800c924:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	9219      	str	r2, [sp, #100]	@ 0x64
 800c92a:	785a      	ldrb	r2, [r3, #1]
 800c92c:	3001      	adds	r0, #1
 800c92e:	2a30      	cmp	r2, #48	@ 0x30
 800c930:	d0f8      	beq.n	800c924 <_strtod_l+0x1e4>
 800c932:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c936:	2b08      	cmp	r3, #8
 800c938:	f200 84d2 	bhi.w	800d2e0 <_strtod_l+0xba0>
 800c93c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c93e:	900a      	str	r0, [sp, #40]	@ 0x28
 800c940:	2000      	movs	r0, #0
 800c942:	930c      	str	r3, [sp, #48]	@ 0x30
 800c944:	4605      	mov	r5, r0
 800c946:	3a30      	subs	r2, #48	@ 0x30
 800c948:	f100 0301 	add.w	r3, r0, #1
 800c94c:	d018      	beq.n	800c980 <_strtod_l+0x240>
 800c94e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c950:	4419      	add	r1, r3
 800c952:	910a      	str	r1, [sp, #40]	@ 0x28
 800c954:	462e      	mov	r6, r5
 800c956:	f04f 0e0a 	mov.w	lr, #10
 800c95a:	1c71      	adds	r1, r6, #1
 800c95c:	eba1 0c05 	sub.w	ip, r1, r5
 800c960:	4563      	cmp	r3, ip
 800c962:	dc15      	bgt.n	800c990 <_strtod_l+0x250>
 800c964:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c968:	182b      	adds	r3, r5, r0
 800c96a:	2b08      	cmp	r3, #8
 800c96c:	f105 0501 	add.w	r5, r5, #1
 800c970:	4405      	add	r5, r0
 800c972:	dc1a      	bgt.n	800c9aa <_strtod_l+0x26a>
 800c974:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c976:	230a      	movs	r3, #10
 800c978:	fb03 2301 	mla	r3, r3, r1, r2
 800c97c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c97e:	2300      	movs	r3, #0
 800c980:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c982:	1c51      	adds	r1, r2, #1
 800c984:	9119      	str	r1, [sp, #100]	@ 0x64
 800c986:	7852      	ldrb	r2, [r2, #1]
 800c988:	4618      	mov	r0, r3
 800c98a:	e7c5      	b.n	800c918 <_strtod_l+0x1d8>
 800c98c:	4648      	mov	r0, r9
 800c98e:	e7ce      	b.n	800c92e <_strtod_l+0x1ee>
 800c990:	2e08      	cmp	r6, #8
 800c992:	dc05      	bgt.n	800c9a0 <_strtod_l+0x260>
 800c994:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c996:	fb0e f606 	mul.w	r6, lr, r6
 800c99a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c99c:	460e      	mov	r6, r1
 800c99e:	e7dc      	b.n	800c95a <_strtod_l+0x21a>
 800c9a0:	2910      	cmp	r1, #16
 800c9a2:	bfd8      	it	le
 800c9a4:	fb0e f707 	mulle.w	r7, lr, r7
 800c9a8:	e7f8      	b.n	800c99c <_strtod_l+0x25c>
 800c9aa:	2b0f      	cmp	r3, #15
 800c9ac:	bfdc      	itt	le
 800c9ae:	230a      	movle	r3, #10
 800c9b0:	fb03 2707 	mlale	r7, r3, r7, r2
 800c9b4:	e7e3      	b.n	800c97e <_strtod_l+0x23e>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e77a      	b.n	800c8b4 <_strtod_l+0x174>
 800c9be:	f04f 0c00 	mov.w	ip, #0
 800c9c2:	1ca2      	adds	r2, r4, #2
 800c9c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9c6:	78a2      	ldrb	r2, [r4, #2]
 800c9c8:	e782      	b.n	800c8d0 <_strtod_l+0x190>
 800c9ca:	f04f 0c01 	mov.w	ip, #1
 800c9ce:	e7f8      	b.n	800c9c2 <_strtod_l+0x282>
 800c9d0:	0800e9dc 	.word	0x0800e9dc
 800c9d4:	0800e80f 	.word	0x0800e80f
 800c9d8:	7ff00000 	.word	0x7ff00000
 800c9dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9de:	1c51      	adds	r1, r2, #1
 800c9e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c9e2:	7852      	ldrb	r2, [r2, #1]
 800c9e4:	2a30      	cmp	r2, #48	@ 0x30
 800c9e6:	d0f9      	beq.n	800c9dc <_strtod_l+0x29c>
 800c9e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c9ec:	2908      	cmp	r1, #8
 800c9ee:	f63f af75 	bhi.w	800c8dc <_strtod_l+0x19c>
 800c9f2:	3a30      	subs	r2, #48	@ 0x30
 800c9f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c9fa:	f04f 080a 	mov.w	r8, #10
 800c9fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca00:	1c56      	adds	r6, r2, #1
 800ca02:	9619      	str	r6, [sp, #100]	@ 0x64
 800ca04:	7852      	ldrb	r2, [r2, #1]
 800ca06:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ca0a:	f1be 0f09 	cmp.w	lr, #9
 800ca0e:	d939      	bls.n	800ca84 <_strtod_l+0x344>
 800ca10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ca12:	1a76      	subs	r6, r6, r1
 800ca14:	2e08      	cmp	r6, #8
 800ca16:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ca1a:	dc03      	bgt.n	800ca24 <_strtod_l+0x2e4>
 800ca1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca1e:	4588      	cmp	r8, r1
 800ca20:	bfa8      	it	ge
 800ca22:	4688      	movge	r8, r1
 800ca24:	f1bc 0f00 	cmp.w	ip, #0
 800ca28:	d001      	beq.n	800ca2e <_strtod_l+0x2ee>
 800ca2a:	f1c8 0800 	rsb	r8, r8, #0
 800ca2e:	2d00      	cmp	r5, #0
 800ca30:	d14e      	bne.n	800cad0 <_strtod_l+0x390>
 800ca32:	9908      	ldr	r1, [sp, #32]
 800ca34:	4308      	orrs	r0, r1
 800ca36:	f47f aebc 	bne.w	800c7b2 <_strtod_l+0x72>
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f47f aed4 	bne.w	800c7e8 <_strtod_l+0xa8>
 800ca40:	2a69      	cmp	r2, #105	@ 0x69
 800ca42:	d028      	beq.n	800ca96 <_strtod_l+0x356>
 800ca44:	dc25      	bgt.n	800ca92 <_strtod_l+0x352>
 800ca46:	2a49      	cmp	r2, #73	@ 0x49
 800ca48:	d025      	beq.n	800ca96 <_strtod_l+0x356>
 800ca4a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ca4c:	f47f aecc 	bne.w	800c7e8 <_strtod_l+0xa8>
 800ca50:	499a      	ldr	r1, [pc, #616]	@ (800ccbc <_strtod_l+0x57c>)
 800ca52:	a819      	add	r0, sp, #100	@ 0x64
 800ca54:	f001 f9ec 	bl	800de30 <__match>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	f43f aec5 	beq.w	800c7e8 <_strtod_l+0xa8>
 800ca5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b28      	cmp	r3, #40	@ 0x28
 800ca64:	d12e      	bne.n	800cac4 <_strtod_l+0x384>
 800ca66:	4996      	ldr	r1, [pc, #600]	@ (800ccc0 <_strtod_l+0x580>)
 800ca68:	aa1c      	add	r2, sp, #112	@ 0x70
 800ca6a:	a819      	add	r0, sp, #100	@ 0x64
 800ca6c:	f001 f9f4 	bl	800de58 <__hexnan>
 800ca70:	2805      	cmp	r0, #5
 800ca72:	d127      	bne.n	800cac4 <_strtod_l+0x384>
 800ca74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ca76:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ca7a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ca7e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ca82:	e696      	b.n	800c7b2 <_strtod_l+0x72>
 800ca84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca86:	fb08 2101 	mla	r1, r8, r1, r2
 800ca8a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ca8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca90:	e7b5      	b.n	800c9fe <_strtod_l+0x2be>
 800ca92:	2a6e      	cmp	r2, #110	@ 0x6e
 800ca94:	e7da      	b.n	800ca4c <_strtod_l+0x30c>
 800ca96:	498b      	ldr	r1, [pc, #556]	@ (800ccc4 <_strtod_l+0x584>)
 800ca98:	a819      	add	r0, sp, #100	@ 0x64
 800ca9a:	f001 f9c9 	bl	800de30 <__match>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	f43f aea2 	beq.w	800c7e8 <_strtod_l+0xa8>
 800caa4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caa6:	4988      	ldr	r1, [pc, #544]	@ (800ccc8 <_strtod_l+0x588>)
 800caa8:	3b01      	subs	r3, #1
 800caaa:	a819      	add	r0, sp, #100	@ 0x64
 800caac:	9319      	str	r3, [sp, #100]	@ 0x64
 800caae:	f001 f9bf 	bl	800de30 <__match>
 800cab2:	b910      	cbnz	r0, 800caba <_strtod_l+0x37a>
 800cab4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cab6:	3301      	adds	r3, #1
 800cab8:	9319      	str	r3, [sp, #100]	@ 0x64
 800caba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ccd8 <_strtod_l+0x598>
 800cabe:	f04f 0a00 	mov.w	sl, #0
 800cac2:	e676      	b.n	800c7b2 <_strtod_l+0x72>
 800cac4:	4881      	ldr	r0, [pc, #516]	@ (800cccc <_strtod_l+0x58c>)
 800cac6:	f000 feef 	bl	800d8a8 <nan>
 800caca:	ec5b ab10 	vmov	sl, fp, d0
 800cace:	e670      	b.n	800c7b2 <_strtod_l+0x72>
 800cad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cad2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cad4:	eba8 0303 	sub.w	r3, r8, r3
 800cad8:	f1b9 0f00 	cmp.w	r9, #0
 800cadc:	bf08      	it	eq
 800cade:	46a9      	moveq	r9, r5
 800cae0:	2d10      	cmp	r5, #16
 800cae2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cae4:	462c      	mov	r4, r5
 800cae6:	bfa8      	it	ge
 800cae8:	2410      	movge	r4, #16
 800caea:	f7f3 fd0b 	bl	8000504 <__aeabi_ui2d>
 800caee:	2d09      	cmp	r5, #9
 800caf0:	4682      	mov	sl, r0
 800caf2:	468b      	mov	fp, r1
 800caf4:	dc13      	bgt.n	800cb1e <_strtod_l+0x3de>
 800caf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f43f ae5a 	beq.w	800c7b2 <_strtod_l+0x72>
 800cafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb00:	dd78      	ble.n	800cbf4 <_strtod_l+0x4b4>
 800cb02:	2b16      	cmp	r3, #22
 800cb04:	dc5f      	bgt.n	800cbc6 <_strtod_l+0x486>
 800cb06:	4972      	ldr	r1, [pc, #456]	@ (800ccd0 <_strtod_l+0x590>)
 800cb08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb10:	4652      	mov	r2, sl
 800cb12:	465b      	mov	r3, fp
 800cb14:	f7f3 fd70 	bl	80005f8 <__aeabi_dmul>
 800cb18:	4682      	mov	sl, r0
 800cb1a:	468b      	mov	fp, r1
 800cb1c:	e649      	b.n	800c7b2 <_strtod_l+0x72>
 800cb1e:	4b6c      	ldr	r3, [pc, #432]	@ (800ccd0 <_strtod_l+0x590>)
 800cb20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cb28:	f7f3 fd66 	bl	80005f8 <__aeabi_dmul>
 800cb2c:	4682      	mov	sl, r0
 800cb2e:	4638      	mov	r0, r7
 800cb30:	468b      	mov	fp, r1
 800cb32:	f7f3 fce7 	bl	8000504 <__aeabi_ui2d>
 800cb36:	4602      	mov	r2, r0
 800cb38:	460b      	mov	r3, r1
 800cb3a:	4650      	mov	r0, sl
 800cb3c:	4659      	mov	r1, fp
 800cb3e:	f7f3 fba5 	bl	800028c <__adddf3>
 800cb42:	2d0f      	cmp	r5, #15
 800cb44:	4682      	mov	sl, r0
 800cb46:	468b      	mov	fp, r1
 800cb48:	ddd5      	ble.n	800caf6 <_strtod_l+0x3b6>
 800cb4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb4c:	1b2c      	subs	r4, r5, r4
 800cb4e:	441c      	add	r4, r3
 800cb50:	2c00      	cmp	r4, #0
 800cb52:	f340 8093 	ble.w	800cc7c <_strtod_l+0x53c>
 800cb56:	f014 030f 	ands.w	r3, r4, #15
 800cb5a:	d00a      	beq.n	800cb72 <_strtod_l+0x432>
 800cb5c:	495c      	ldr	r1, [pc, #368]	@ (800ccd0 <_strtod_l+0x590>)
 800cb5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb62:	4652      	mov	r2, sl
 800cb64:	465b      	mov	r3, fp
 800cb66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb6a:	f7f3 fd45 	bl	80005f8 <__aeabi_dmul>
 800cb6e:	4682      	mov	sl, r0
 800cb70:	468b      	mov	fp, r1
 800cb72:	f034 040f 	bics.w	r4, r4, #15
 800cb76:	d073      	beq.n	800cc60 <_strtod_l+0x520>
 800cb78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cb7c:	dd49      	ble.n	800cc12 <_strtod_l+0x4d2>
 800cb7e:	2400      	movs	r4, #0
 800cb80:	46a0      	mov	r8, r4
 800cb82:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cb84:	46a1      	mov	r9, r4
 800cb86:	9a05      	ldr	r2, [sp, #20]
 800cb88:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ccd8 <_strtod_l+0x598>
 800cb8c:	2322      	movs	r3, #34	@ 0x22
 800cb8e:	6013      	str	r3, [r2, #0]
 800cb90:	f04f 0a00 	mov.w	sl, #0
 800cb94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f43f ae0b 	beq.w	800c7b2 <_strtod_l+0x72>
 800cb9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb9e:	9805      	ldr	r0, [sp, #20]
 800cba0:	f7ff f946 	bl	800be30 <_Bfree>
 800cba4:	9805      	ldr	r0, [sp, #20]
 800cba6:	4649      	mov	r1, r9
 800cba8:	f7ff f942 	bl	800be30 <_Bfree>
 800cbac:	9805      	ldr	r0, [sp, #20]
 800cbae:	4641      	mov	r1, r8
 800cbb0:	f7ff f93e 	bl	800be30 <_Bfree>
 800cbb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cbb6:	9805      	ldr	r0, [sp, #20]
 800cbb8:	f7ff f93a 	bl	800be30 <_Bfree>
 800cbbc:	9805      	ldr	r0, [sp, #20]
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	f7ff f936 	bl	800be30 <_Bfree>
 800cbc4:	e5f5      	b.n	800c7b2 <_strtod_l+0x72>
 800cbc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	dbbc      	blt.n	800cb4a <_strtod_l+0x40a>
 800cbd0:	4c3f      	ldr	r4, [pc, #252]	@ (800ccd0 <_strtod_l+0x590>)
 800cbd2:	f1c5 050f 	rsb	r5, r5, #15
 800cbd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cbda:	4652      	mov	r2, sl
 800cbdc:	465b      	mov	r3, fp
 800cbde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbe2:	f7f3 fd09 	bl	80005f8 <__aeabi_dmul>
 800cbe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbe8:	1b5d      	subs	r5, r3, r5
 800cbea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cbee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cbf2:	e78f      	b.n	800cb14 <_strtod_l+0x3d4>
 800cbf4:	3316      	adds	r3, #22
 800cbf6:	dba8      	blt.n	800cb4a <_strtod_l+0x40a>
 800cbf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbfa:	eba3 0808 	sub.w	r8, r3, r8
 800cbfe:	4b34      	ldr	r3, [pc, #208]	@ (800ccd0 <_strtod_l+0x590>)
 800cc00:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cc04:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cc08:	4650      	mov	r0, sl
 800cc0a:	4659      	mov	r1, fp
 800cc0c:	f7f3 fe1e 	bl	800084c <__aeabi_ddiv>
 800cc10:	e782      	b.n	800cb18 <_strtod_l+0x3d8>
 800cc12:	2300      	movs	r3, #0
 800cc14:	4f2f      	ldr	r7, [pc, #188]	@ (800ccd4 <_strtod_l+0x594>)
 800cc16:	1124      	asrs	r4, r4, #4
 800cc18:	4650      	mov	r0, sl
 800cc1a:	4659      	mov	r1, fp
 800cc1c:	461e      	mov	r6, r3
 800cc1e:	2c01      	cmp	r4, #1
 800cc20:	dc21      	bgt.n	800cc66 <_strtod_l+0x526>
 800cc22:	b10b      	cbz	r3, 800cc28 <_strtod_l+0x4e8>
 800cc24:	4682      	mov	sl, r0
 800cc26:	468b      	mov	fp, r1
 800cc28:	492a      	ldr	r1, [pc, #168]	@ (800ccd4 <_strtod_l+0x594>)
 800cc2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cc2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cc32:	4652      	mov	r2, sl
 800cc34:	465b      	mov	r3, fp
 800cc36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc3a:	f7f3 fcdd 	bl	80005f8 <__aeabi_dmul>
 800cc3e:	4b26      	ldr	r3, [pc, #152]	@ (800ccd8 <_strtod_l+0x598>)
 800cc40:	460a      	mov	r2, r1
 800cc42:	400b      	ands	r3, r1
 800cc44:	4925      	ldr	r1, [pc, #148]	@ (800ccdc <_strtod_l+0x59c>)
 800cc46:	428b      	cmp	r3, r1
 800cc48:	4682      	mov	sl, r0
 800cc4a:	d898      	bhi.n	800cb7e <_strtod_l+0x43e>
 800cc4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cc50:	428b      	cmp	r3, r1
 800cc52:	bf86      	itte	hi
 800cc54:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800cce0 <_strtod_l+0x5a0>
 800cc58:	f04f 3aff 	movhi.w	sl, #4294967295
 800cc5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cc60:	2300      	movs	r3, #0
 800cc62:	9308      	str	r3, [sp, #32]
 800cc64:	e076      	b.n	800cd54 <_strtod_l+0x614>
 800cc66:	07e2      	lsls	r2, r4, #31
 800cc68:	d504      	bpl.n	800cc74 <_strtod_l+0x534>
 800cc6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc6e:	f7f3 fcc3 	bl	80005f8 <__aeabi_dmul>
 800cc72:	2301      	movs	r3, #1
 800cc74:	3601      	adds	r6, #1
 800cc76:	1064      	asrs	r4, r4, #1
 800cc78:	3708      	adds	r7, #8
 800cc7a:	e7d0      	b.n	800cc1e <_strtod_l+0x4de>
 800cc7c:	d0f0      	beq.n	800cc60 <_strtod_l+0x520>
 800cc7e:	4264      	negs	r4, r4
 800cc80:	f014 020f 	ands.w	r2, r4, #15
 800cc84:	d00a      	beq.n	800cc9c <_strtod_l+0x55c>
 800cc86:	4b12      	ldr	r3, [pc, #72]	@ (800ccd0 <_strtod_l+0x590>)
 800cc88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc8c:	4650      	mov	r0, sl
 800cc8e:	4659      	mov	r1, fp
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	f7f3 fdda 	bl	800084c <__aeabi_ddiv>
 800cc98:	4682      	mov	sl, r0
 800cc9a:	468b      	mov	fp, r1
 800cc9c:	1124      	asrs	r4, r4, #4
 800cc9e:	d0df      	beq.n	800cc60 <_strtod_l+0x520>
 800cca0:	2c1f      	cmp	r4, #31
 800cca2:	dd1f      	ble.n	800cce4 <_strtod_l+0x5a4>
 800cca4:	2400      	movs	r4, #0
 800cca6:	46a0      	mov	r8, r4
 800cca8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ccaa:	46a1      	mov	r9, r4
 800ccac:	9a05      	ldr	r2, [sp, #20]
 800ccae:	2322      	movs	r3, #34	@ 0x22
 800ccb0:	f04f 0a00 	mov.w	sl, #0
 800ccb4:	f04f 0b00 	mov.w	fp, #0
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	e76b      	b.n	800cb94 <_strtod_l+0x454>
 800ccbc:	0800e6fd 	.word	0x0800e6fd
 800ccc0:	0800e9c8 	.word	0x0800e9c8
 800ccc4:	0800e6f5 	.word	0x0800e6f5
 800ccc8:	0800e72c 	.word	0x0800e72c
 800cccc:	0800e865 	.word	0x0800e865
 800ccd0:	0800e900 	.word	0x0800e900
 800ccd4:	0800e8d8 	.word	0x0800e8d8
 800ccd8:	7ff00000 	.word	0x7ff00000
 800ccdc:	7ca00000 	.word	0x7ca00000
 800cce0:	7fefffff 	.word	0x7fefffff
 800cce4:	f014 0310 	ands.w	r3, r4, #16
 800cce8:	bf18      	it	ne
 800ccea:	236a      	movne	r3, #106	@ 0x6a
 800ccec:	4ea9      	ldr	r6, [pc, #676]	@ (800cf94 <_strtod_l+0x854>)
 800ccee:	9308      	str	r3, [sp, #32]
 800ccf0:	4650      	mov	r0, sl
 800ccf2:	4659      	mov	r1, fp
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	07e7      	lsls	r7, r4, #31
 800ccf8:	d504      	bpl.n	800cd04 <_strtod_l+0x5c4>
 800ccfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ccfe:	f7f3 fc7b 	bl	80005f8 <__aeabi_dmul>
 800cd02:	2301      	movs	r3, #1
 800cd04:	1064      	asrs	r4, r4, #1
 800cd06:	f106 0608 	add.w	r6, r6, #8
 800cd0a:	d1f4      	bne.n	800ccf6 <_strtod_l+0x5b6>
 800cd0c:	b10b      	cbz	r3, 800cd12 <_strtod_l+0x5d2>
 800cd0e:	4682      	mov	sl, r0
 800cd10:	468b      	mov	fp, r1
 800cd12:	9b08      	ldr	r3, [sp, #32]
 800cd14:	b1b3      	cbz	r3, 800cd44 <_strtod_l+0x604>
 800cd16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cd1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	4659      	mov	r1, fp
 800cd22:	dd0f      	ble.n	800cd44 <_strtod_l+0x604>
 800cd24:	2b1f      	cmp	r3, #31
 800cd26:	dd56      	ble.n	800cdd6 <_strtod_l+0x696>
 800cd28:	2b34      	cmp	r3, #52	@ 0x34
 800cd2a:	bfde      	ittt	le
 800cd2c:	f04f 33ff 	movle.w	r3, #4294967295
 800cd30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cd34:	4093      	lslle	r3, r2
 800cd36:	f04f 0a00 	mov.w	sl, #0
 800cd3a:	bfcc      	ite	gt
 800cd3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cd40:	ea03 0b01 	andle.w	fp, r3, r1
 800cd44:	2200      	movs	r2, #0
 800cd46:	2300      	movs	r3, #0
 800cd48:	4650      	mov	r0, sl
 800cd4a:	4659      	mov	r1, fp
 800cd4c:	f7f3 febc 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d1a7      	bne.n	800cca4 <_strtod_l+0x564>
 800cd54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cd5a:	9805      	ldr	r0, [sp, #20]
 800cd5c:	462b      	mov	r3, r5
 800cd5e:	464a      	mov	r2, r9
 800cd60:	f7ff f8ce 	bl	800bf00 <__s2b>
 800cd64:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cd66:	2800      	cmp	r0, #0
 800cd68:	f43f af09 	beq.w	800cb7e <_strtod_l+0x43e>
 800cd6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd70:	2a00      	cmp	r2, #0
 800cd72:	eba3 0308 	sub.w	r3, r3, r8
 800cd76:	bfa8      	it	ge
 800cd78:	2300      	movge	r3, #0
 800cd7a:	9312      	str	r3, [sp, #72]	@ 0x48
 800cd7c:	2400      	movs	r4, #0
 800cd7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cd82:	9316      	str	r3, [sp, #88]	@ 0x58
 800cd84:	46a0      	mov	r8, r4
 800cd86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd88:	9805      	ldr	r0, [sp, #20]
 800cd8a:	6859      	ldr	r1, [r3, #4]
 800cd8c:	f7ff f810 	bl	800bdb0 <_Balloc>
 800cd90:	4681      	mov	r9, r0
 800cd92:	2800      	cmp	r0, #0
 800cd94:	f43f aef7 	beq.w	800cb86 <_strtod_l+0x446>
 800cd98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd9a:	691a      	ldr	r2, [r3, #16]
 800cd9c:	3202      	adds	r2, #2
 800cd9e:	f103 010c 	add.w	r1, r3, #12
 800cda2:	0092      	lsls	r2, r2, #2
 800cda4:	300c      	adds	r0, #12
 800cda6:	f000 fd71 	bl	800d88c <memcpy>
 800cdaa:	ec4b ab10 	vmov	d0, sl, fp
 800cdae:	9805      	ldr	r0, [sp, #20]
 800cdb0:	aa1c      	add	r2, sp, #112	@ 0x70
 800cdb2:	a91b      	add	r1, sp, #108	@ 0x6c
 800cdb4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cdb8:	f7ff fbd6 	bl	800c568 <__d2b>
 800cdbc:	901a      	str	r0, [sp, #104]	@ 0x68
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	f43f aee1 	beq.w	800cb86 <_strtod_l+0x446>
 800cdc4:	9805      	ldr	r0, [sp, #20]
 800cdc6:	2101      	movs	r1, #1
 800cdc8:	f7ff f930 	bl	800c02c <__i2b>
 800cdcc:	4680      	mov	r8, r0
 800cdce:	b948      	cbnz	r0, 800cde4 <_strtod_l+0x6a4>
 800cdd0:	f04f 0800 	mov.w	r8, #0
 800cdd4:	e6d7      	b.n	800cb86 <_strtod_l+0x446>
 800cdd6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdda:	fa02 f303 	lsl.w	r3, r2, r3
 800cdde:	ea03 0a0a 	and.w	sl, r3, sl
 800cde2:	e7af      	b.n	800cd44 <_strtod_l+0x604>
 800cde4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cde6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cde8:	2d00      	cmp	r5, #0
 800cdea:	bfab      	itete	ge
 800cdec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cdee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cdf0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cdf2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cdf4:	bfac      	ite	ge
 800cdf6:	18ef      	addge	r7, r5, r3
 800cdf8:	1b5e      	sublt	r6, r3, r5
 800cdfa:	9b08      	ldr	r3, [sp, #32]
 800cdfc:	1aed      	subs	r5, r5, r3
 800cdfe:	4415      	add	r5, r2
 800ce00:	4b65      	ldr	r3, [pc, #404]	@ (800cf98 <_strtod_l+0x858>)
 800ce02:	3d01      	subs	r5, #1
 800ce04:	429d      	cmp	r5, r3
 800ce06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ce0a:	da50      	bge.n	800ceae <_strtod_l+0x76e>
 800ce0c:	1b5b      	subs	r3, r3, r5
 800ce0e:	2b1f      	cmp	r3, #31
 800ce10:	eba2 0203 	sub.w	r2, r2, r3
 800ce14:	f04f 0101 	mov.w	r1, #1
 800ce18:	dc3d      	bgt.n	800ce96 <_strtod_l+0x756>
 800ce1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ce20:	2300      	movs	r3, #0
 800ce22:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce24:	18bd      	adds	r5, r7, r2
 800ce26:	9b08      	ldr	r3, [sp, #32]
 800ce28:	42af      	cmp	r7, r5
 800ce2a:	4416      	add	r6, r2
 800ce2c:	441e      	add	r6, r3
 800ce2e:	463b      	mov	r3, r7
 800ce30:	bfa8      	it	ge
 800ce32:	462b      	movge	r3, r5
 800ce34:	42b3      	cmp	r3, r6
 800ce36:	bfa8      	it	ge
 800ce38:	4633      	movge	r3, r6
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	bfc2      	ittt	gt
 800ce3e:	1aed      	subgt	r5, r5, r3
 800ce40:	1af6      	subgt	r6, r6, r3
 800ce42:	1aff      	subgt	r7, r7, r3
 800ce44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	dd16      	ble.n	800ce78 <_strtod_l+0x738>
 800ce4a:	4641      	mov	r1, r8
 800ce4c:	9805      	ldr	r0, [sp, #20]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	f7ff f9a4 	bl	800c19c <__pow5mult>
 800ce54:	4680      	mov	r8, r0
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d0ba      	beq.n	800cdd0 <_strtod_l+0x690>
 800ce5a:	4601      	mov	r1, r0
 800ce5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ce5e:	9805      	ldr	r0, [sp, #20]
 800ce60:	f7ff f8fa 	bl	800c058 <__multiply>
 800ce64:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce66:	2800      	cmp	r0, #0
 800ce68:	f43f ae8d 	beq.w	800cb86 <_strtod_l+0x446>
 800ce6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce6e:	9805      	ldr	r0, [sp, #20]
 800ce70:	f7fe ffde 	bl	800be30 <_Bfree>
 800ce74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce76:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce78:	2d00      	cmp	r5, #0
 800ce7a:	dc1d      	bgt.n	800ceb8 <_strtod_l+0x778>
 800ce7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	dd23      	ble.n	800ceca <_strtod_l+0x78a>
 800ce82:	4649      	mov	r1, r9
 800ce84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ce86:	9805      	ldr	r0, [sp, #20]
 800ce88:	f7ff f988 	bl	800c19c <__pow5mult>
 800ce8c:	4681      	mov	r9, r0
 800ce8e:	b9e0      	cbnz	r0, 800ceca <_strtod_l+0x78a>
 800ce90:	f04f 0900 	mov.w	r9, #0
 800ce94:	e677      	b.n	800cb86 <_strtod_l+0x446>
 800ce96:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ce9a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ce9e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cea2:	35e2      	adds	r5, #226	@ 0xe2
 800cea4:	fa01 f305 	lsl.w	r3, r1, r5
 800cea8:	9310      	str	r3, [sp, #64]	@ 0x40
 800ceaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ceac:	e7ba      	b.n	800ce24 <_strtod_l+0x6e4>
 800ceae:	2300      	movs	r3, #0
 800ceb0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ceb6:	e7b5      	b.n	800ce24 <_strtod_l+0x6e4>
 800ceb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ceba:	9805      	ldr	r0, [sp, #20]
 800cebc:	462a      	mov	r2, r5
 800cebe:	f7ff f9c7 	bl	800c250 <__lshift>
 800cec2:	901a      	str	r0, [sp, #104]	@ 0x68
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d1d9      	bne.n	800ce7c <_strtod_l+0x73c>
 800cec8:	e65d      	b.n	800cb86 <_strtod_l+0x446>
 800ceca:	2e00      	cmp	r6, #0
 800cecc:	dd07      	ble.n	800cede <_strtod_l+0x79e>
 800cece:	4649      	mov	r1, r9
 800ced0:	9805      	ldr	r0, [sp, #20]
 800ced2:	4632      	mov	r2, r6
 800ced4:	f7ff f9bc 	bl	800c250 <__lshift>
 800ced8:	4681      	mov	r9, r0
 800ceda:	2800      	cmp	r0, #0
 800cedc:	d0d8      	beq.n	800ce90 <_strtod_l+0x750>
 800cede:	2f00      	cmp	r7, #0
 800cee0:	dd08      	ble.n	800cef4 <_strtod_l+0x7b4>
 800cee2:	4641      	mov	r1, r8
 800cee4:	9805      	ldr	r0, [sp, #20]
 800cee6:	463a      	mov	r2, r7
 800cee8:	f7ff f9b2 	bl	800c250 <__lshift>
 800ceec:	4680      	mov	r8, r0
 800ceee:	2800      	cmp	r0, #0
 800cef0:	f43f ae49 	beq.w	800cb86 <_strtod_l+0x446>
 800cef4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cef6:	9805      	ldr	r0, [sp, #20]
 800cef8:	464a      	mov	r2, r9
 800cefa:	f7ff fa31 	bl	800c360 <__mdiff>
 800cefe:	4604      	mov	r4, r0
 800cf00:	2800      	cmp	r0, #0
 800cf02:	f43f ae40 	beq.w	800cb86 <_strtod_l+0x446>
 800cf06:	68c3      	ldr	r3, [r0, #12]
 800cf08:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	60c3      	str	r3, [r0, #12]
 800cf0e:	4641      	mov	r1, r8
 800cf10:	f7ff fa0a 	bl	800c328 <__mcmp>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	da45      	bge.n	800cfa4 <_strtod_l+0x864>
 800cf18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf1a:	ea53 030a 	orrs.w	r3, r3, sl
 800cf1e:	d16b      	bne.n	800cff8 <_strtod_l+0x8b8>
 800cf20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d167      	bne.n	800cff8 <_strtod_l+0x8b8>
 800cf28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf2c:	0d1b      	lsrs	r3, r3, #20
 800cf2e:	051b      	lsls	r3, r3, #20
 800cf30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cf34:	d960      	bls.n	800cff8 <_strtod_l+0x8b8>
 800cf36:	6963      	ldr	r3, [r4, #20]
 800cf38:	b913      	cbnz	r3, 800cf40 <_strtod_l+0x800>
 800cf3a:	6923      	ldr	r3, [r4, #16]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	dd5b      	ble.n	800cff8 <_strtod_l+0x8b8>
 800cf40:	4621      	mov	r1, r4
 800cf42:	2201      	movs	r2, #1
 800cf44:	9805      	ldr	r0, [sp, #20]
 800cf46:	f7ff f983 	bl	800c250 <__lshift>
 800cf4a:	4641      	mov	r1, r8
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	f7ff f9eb 	bl	800c328 <__mcmp>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	dd50      	ble.n	800cff8 <_strtod_l+0x8b8>
 800cf56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf5a:	9a08      	ldr	r2, [sp, #32]
 800cf5c:	0d1b      	lsrs	r3, r3, #20
 800cf5e:	051b      	lsls	r3, r3, #20
 800cf60:	2a00      	cmp	r2, #0
 800cf62:	d06a      	beq.n	800d03a <_strtod_l+0x8fa>
 800cf64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cf68:	d867      	bhi.n	800d03a <_strtod_l+0x8fa>
 800cf6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cf6e:	f67f ae9d 	bls.w	800ccac <_strtod_l+0x56c>
 800cf72:	4b0a      	ldr	r3, [pc, #40]	@ (800cf9c <_strtod_l+0x85c>)
 800cf74:	4650      	mov	r0, sl
 800cf76:	4659      	mov	r1, fp
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f7f3 fb3d 	bl	80005f8 <__aeabi_dmul>
 800cf7e:	4b08      	ldr	r3, [pc, #32]	@ (800cfa0 <_strtod_l+0x860>)
 800cf80:	400b      	ands	r3, r1
 800cf82:	4682      	mov	sl, r0
 800cf84:	468b      	mov	fp, r1
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f47f ae08 	bne.w	800cb9c <_strtod_l+0x45c>
 800cf8c:	9a05      	ldr	r2, [sp, #20]
 800cf8e:	2322      	movs	r3, #34	@ 0x22
 800cf90:	6013      	str	r3, [r2, #0]
 800cf92:	e603      	b.n	800cb9c <_strtod_l+0x45c>
 800cf94:	0800e9f0 	.word	0x0800e9f0
 800cf98:	fffffc02 	.word	0xfffffc02
 800cf9c:	39500000 	.word	0x39500000
 800cfa0:	7ff00000 	.word	0x7ff00000
 800cfa4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cfa8:	d165      	bne.n	800d076 <_strtod_l+0x936>
 800cfaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cfac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfb0:	b35a      	cbz	r2, 800d00a <_strtod_l+0x8ca>
 800cfb2:	4a9f      	ldr	r2, [pc, #636]	@ (800d230 <_strtod_l+0xaf0>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d12b      	bne.n	800d010 <_strtod_l+0x8d0>
 800cfb8:	9b08      	ldr	r3, [sp, #32]
 800cfba:	4651      	mov	r1, sl
 800cfbc:	b303      	cbz	r3, 800d000 <_strtod_l+0x8c0>
 800cfbe:	4b9d      	ldr	r3, [pc, #628]	@ (800d234 <_strtod_l+0xaf4>)
 800cfc0:	465a      	mov	r2, fp
 800cfc2:	4013      	ands	r3, r2
 800cfc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cfc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cfcc:	d81b      	bhi.n	800d006 <_strtod_l+0x8c6>
 800cfce:	0d1b      	lsrs	r3, r3, #20
 800cfd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cfd4:	fa02 f303 	lsl.w	r3, r2, r3
 800cfd8:	4299      	cmp	r1, r3
 800cfda:	d119      	bne.n	800d010 <_strtod_l+0x8d0>
 800cfdc:	4b96      	ldr	r3, [pc, #600]	@ (800d238 <_strtod_l+0xaf8>)
 800cfde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d102      	bne.n	800cfea <_strtod_l+0x8aa>
 800cfe4:	3101      	adds	r1, #1
 800cfe6:	f43f adce 	beq.w	800cb86 <_strtod_l+0x446>
 800cfea:	4b92      	ldr	r3, [pc, #584]	@ (800d234 <_strtod_l+0xaf4>)
 800cfec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cfee:	401a      	ands	r2, r3
 800cff0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cff4:	f04f 0a00 	mov.w	sl, #0
 800cff8:	9b08      	ldr	r3, [sp, #32]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1b9      	bne.n	800cf72 <_strtod_l+0x832>
 800cffe:	e5cd      	b.n	800cb9c <_strtod_l+0x45c>
 800d000:	f04f 33ff 	mov.w	r3, #4294967295
 800d004:	e7e8      	b.n	800cfd8 <_strtod_l+0x898>
 800d006:	4613      	mov	r3, r2
 800d008:	e7e6      	b.n	800cfd8 <_strtod_l+0x898>
 800d00a:	ea53 030a 	orrs.w	r3, r3, sl
 800d00e:	d0a2      	beq.n	800cf56 <_strtod_l+0x816>
 800d010:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d012:	b1db      	cbz	r3, 800d04c <_strtod_l+0x90c>
 800d014:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d016:	4213      	tst	r3, r2
 800d018:	d0ee      	beq.n	800cff8 <_strtod_l+0x8b8>
 800d01a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d01c:	9a08      	ldr	r2, [sp, #32]
 800d01e:	4650      	mov	r0, sl
 800d020:	4659      	mov	r1, fp
 800d022:	b1bb      	cbz	r3, 800d054 <_strtod_l+0x914>
 800d024:	f7ff fb6e 	bl	800c704 <sulp>
 800d028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d02c:	ec53 2b10 	vmov	r2, r3, d0
 800d030:	f7f3 f92c 	bl	800028c <__adddf3>
 800d034:	4682      	mov	sl, r0
 800d036:	468b      	mov	fp, r1
 800d038:	e7de      	b.n	800cff8 <_strtod_l+0x8b8>
 800d03a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d03e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d042:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d046:	f04f 3aff 	mov.w	sl, #4294967295
 800d04a:	e7d5      	b.n	800cff8 <_strtod_l+0x8b8>
 800d04c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d04e:	ea13 0f0a 	tst.w	r3, sl
 800d052:	e7e1      	b.n	800d018 <_strtod_l+0x8d8>
 800d054:	f7ff fb56 	bl	800c704 <sulp>
 800d058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d05c:	ec53 2b10 	vmov	r2, r3, d0
 800d060:	f7f3 f912 	bl	8000288 <__aeabi_dsub>
 800d064:	2200      	movs	r2, #0
 800d066:	2300      	movs	r3, #0
 800d068:	4682      	mov	sl, r0
 800d06a:	468b      	mov	fp, r1
 800d06c:	f7f3 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d070:	2800      	cmp	r0, #0
 800d072:	d0c1      	beq.n	800cff8 <_strtod_l+0x8b8>
 800d074:	e61a      	b.n	800ccac <_strtod_l+0x56c>
 800d076:	4641      	mov	r1, r8
 800d078:	4620      	mov	r0, r4
 800d07a:	f7ff facd 	bl	800c618 <__ratio>
 800d07e:	ec57 6b10 	vmov	r6, r7, d0
 800d082:	2200      	movs	r2, #0
 800d084:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d088:	4630      	mov	r0, r6
 800d08a:	4639      	mov	r1, r7
 800d08c:	f7f3 fd30 	bl	8000af0 <__aeabi_dcmple>
 800d090:	2800      	cmp	r0, #0
 800d092:	d06f      	beq.n	800d174 <_strtod_l+0xa34>
 800d094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d096:	2b00      	cmp	r3, #0
 800d098:	d17a      	bne.n	800d190 <_strtod_l+0xa50>
 800d09a:	f1ba 0f00 	cmp.w	sl, #0
 800d09e:	d158      	bne.n	800d152 <_strtod_l+0xa12>
 800d0a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d15a      	bne.n	800d160 <_strtod_l+0xa20>
 800d0aa:	4b64      	ldr	r3, [pc, #400]	@ (800d23c <_strtod_l+0xafc>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	4639      	mov	r1, r7
 800d0b2:	f7f3 fd13 	bl	8000adc <__aeabi_dcmplt>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d159      	bne.n	800d16e <_strtod_l+0xa2e>
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	4639      	mov	r1, r7
 800d0be:	4b60      	ldr	r3, [pc, #384]	@ (800d240 <_strtod_l+0xb00>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f7f3 fa99 	bl	80005f8 <__aeabi_dmul>
 800d0c6:	4606      	mov	r6, r0
 800d0c8:	460f      	mov	r7, r1
 800d0ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d0ce:	9606      	str	r6, [sp, #24]
 800d0d0:	9307      	str	r3, [sp, #28]
 800d0d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0d6:	4d57      	ldr	r5, [pc, #348]	@ (800d234 <_strtod_l+0xaf4>)
 800d0d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d0dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0de:	401d      	ands	r5, r3
 800d0e0:	4b58      	ldr	r3, [pc, #352]	@ (800d244 <_strtod_l+0xb04>)
 800d0e2:	429d      	cmp	r5, r3
 800d0e4:	f040 80b2 	bne.w	800d24c <_strtod_l+0xb0c>
 800d0e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d0ee:	ec4b ab10 	vmov	d0, sl, fp
 800d0f2:	f7ff f9c9 	bl	800c488 <__ulp>
 800d0f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0fa:	ec51 0b10 	vmov	r0, r1, d0
 800d0fe:	f7f3 fa7b 	bl	80005f8 <__aeabi_dmul>
 800d102:	4652      	mov	r2, sl
 800d104:	465b      	mov	r3, fp
 800d106:	f7f3 f8c1 	bl	800028c <__adddf3>
 800d10a:	460b      	mov	r3, r1
 800d10c:	4949      	ldr	r1, [pc, #292]	@ (800d234 <_strtod_l+0xaf4>)
 800d10e:	4a4e      	ldr	r2, [pc, #312]	@ (800d248 <_strtod_l+0xb08>)
 800d110:	4019      	ands	r1, r3
 800d112:	4291      	cmp	r1, r2
 800d114:	4682      	mov	sl, r0
 800d116:	d942      	bls.n	800d19e <_strtod_l+0xa5e>
 800d118:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d11a:	4b47      	ldr	r3, [pc, #284]	@ (800d238 <_strtod_l+0xaf8>)
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d103      	bne.n	800d128 <_strtod_l+0x9e8>
 800d120:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d122:	3301      	adds	r3, #1
 800d124:	f43f ad2f 	beq.w	800cb86 <_strtod_l+0x446>
 800d128:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d238 <_strtod_l+0xaf8>
 800d12c:	f04f 3aff 	mov.w	sl, #4294967295
 800d130:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d132:	9805      	ldr	r0, [sp, #20]
 800d134:	f7fe fe7c 	bl	800be30 <_Bfree>
 800d138:	9805      	ldr	r0, [sp, #20]
 800d13a:	4649      	mov	r1, r9
 800d13c:	f7fe fe78 	bl	800be30 <_Bfree>
 800d140:	9805      	ldr	r0, [sp, #20]
 800d142:	4641      	mov	r1, r8
 800d144:	f7fe fe74 	bl	800be30 <_Bfree>
 800d148:	9805      	ldr	r0, [sp, #20]
 800d14a:	4621      	mov	r1, r4
 800d14c:	f7fe fe70 	bl	800be30 <_Bfree>
 800d150:	e619      	b.n	800cd86 <_strtod_l+0x646>
 800d152:	f1ba 0f01 	cmp.w	sl, #1
 800d156:	d103      	bne.n	800d160 <_strtod_l+0xa20>
 800d158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f43f ada6 	beq.w	800ccac <_strtod_l+0x56c>
 800d160:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d210 <_strtod_l+0xad0>
 800d164:	4f35      	ldr	r7, [pc, #212]	@ (800d23c <_strtod_l+0xafc>)
 800d166:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d16a:	2600      	movs	r6, #0
 800d16c:	e7b1      	b.n	800d0d2 <_strtod_l+0x992>
 800d16e:	4f34      	ldr	r7, [pc, #208]	@ (800d240 <_strtod_l+0xb00>)
 800d170:	2600      	movs	r6, #0
 800d172:	e7aa      	b.n	800d0ca <_strtod_l+0x98a>
 800d174:	4b32      	ldr	r3, [pc, #200]	@ (800d240 <_strtod_l+0xb00>)
 800d176:	4630      	mov	r0, r6
 800d178:	4639      	mov	r1, r7
 800d17a:	2200      	movs	r2, #0
 800d17c:	f7f3 fa3c 	bl	80005f8 <__aeabi_dmul>
 800d180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d182:	4606      	mov	r6, r0
 800d184:	460f      	mov	r7, r1
 800d186:	2b00      	cmp	r3, #0
 800d188:	d09f      	beq.n	800d0ca <_strtod_l+0x98a>
 800d18a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d18e:	e7a0      	b.n	800d0d2 <_strtod_l+0x992>
 800d190:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d218 <_strtod_l+0xad8>
 800d194:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d198:	ec57 6b17 	vmov	r6, r7, d7
 800d19c:	e799      	b.n	800d0d2 <_strtod_l+0x992>
 800d19e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d1a2:	9b08      	ldr	r3, [sp, #32]
 800d1a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1c1      	bne.n	800d130 <_strtod_l+0x9f0>
 800d1ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d1b0:	0d1b      	lsrs	r3, r3, #20
 800d1b2:	051b      	lsls	r3, r3, #20
 800d1b4:	429d      	cmp	r5, r3
 800d1b6:	d1bb      	bne.n	800d130 <_strtod_l+0x9f0>
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	f7f3 fd7c 	bl	8000cb8 <__aeabi_d2lz>
 800d1c0:	f7f3 f9ec 	bl	800059c <__aeabi_l2d>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	4639      	mov	r1, r7
 800d1cc:	f7f3 f85c 	bl	8000288 <__aeabi_dsub>
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d1d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1de:	ea46 060a 	orr.w	r6, r6, sl
 800d1e2:	431e      	orrs	r6, r3
 800d1e4:	d06f      	beq.n	800d2c6 <_strtod_l+0xb86>
 800d1e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d220 <_strtod_l+0xae0>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	f7f3 fc76 	bl	8000adc <__aeabi_dcmplt>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	f47f acd3 	bne.w	800cb9c <_strtod_l+0x45c>
 800d1f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d228 <_strtod_l+0xae8>)
 800d1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d200:	f7f3 fc8a 	bl	8000b18 <__aeabi_dcmpgt>
 800d204:	2800      	cmp	r0, #0
 800d206:	d093      	beq.n	800d130 <_strtod_l+0x9f0>
 800d208:	e4c8      	b.n	800cb9c <_strtod_l+0x45c>
 800d20a:	bf00      	nop
 800d20c:	f3af 8000 	nop.w
 800d210:	00000000 	.word	0x00000000
 800d214:	bff00000 	.word	0xbff00000
 800d218:	00000000 	.word	0x00000000
 800d21c:	3ff00000 	.word	0x3ff00000
 800d220:	94a03595 	.word	0x94a03595
 800d224:	3fdfffff 	.word	0x3fdfffff
 800d228:	35afe535 	.word	0x35afe535
 800d22c:	3fe00000 	.word	0x3fe00000
 800d230:	000fffff 	.word	0x000fffff
 800d234:	7ff00000 	.word	0x7ff00000
 800d238:	7fefffff 	.word	0x7fefffff
 800d23c:	3ff00000 	.word	0x3ff00000
 800d240:	3fe00000 	.word	0x3fe00000
 800d244:	7fe00000 	.word	0x7fe00000
 800d248:	7c9fffff 	.word	0x7c9fffff
 800d24c:	9b08      	ldr	r3, [sp, #32]
 800d24e:	b323      	cbz	r3, 800d29a <_strtod_l+0xb5a>
 800d250:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d254:	d821      	bhi.n	800d29a <_strtod_l+0xb5a>
 800d256:	a328      	add	r3, pc, #160	@ (adr r3, 800d2f8 <_strtod_l+0xbb8>)
 800d258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25c:	4630      	mov	r0, r6
 800d25e:	4639      	mov	r1, r7
 800d260:	f7f3 fc46 	bl	8000af0 <__aeabi_dcmple>
 800d264:	b1a0      	cbz	r0, 800d290 <_strtod_l+0xb50>
 800d266:	4639      	mov	r1, r7
 800d268:	4630      	mov	r0, r6
 800d26a:	f7f3 fc9d 	bl	8000ba8 <__aeabi_d2uiz>
 800d26e:	2801      	cmp	r0, #1
 800d270:	bf38      	it	cc
 800d272:	2001      	movcc	r0, #1
 800d274:	f7f3 f946 	bl	8000504 <__aeabi_ui2d>
 800d278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d27a:	4606      	mov	r6, r0
 800d27c:	460f      	mov	r7, r1
 800d27e:	b9fb      	cbnz	r3, 800d2c0 <_strtod_l+0xb80>
 800d280:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d284:	9014      	str	r0, [sp, #80]	@ 0x50
 800d286:	9315      	str	r3, [sp, #84]	@ 0x54
 800d288:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d28c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d290:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d292:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d296:	1b5b      	subs	r3, r3, r5
 800d298:	9311      	str	r3, [sp, #68]	@ 0x44
 800d29a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d29e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d2a2:	f7ff f8f1 	bl	800c488 <__ulp>
 800d2a6:	4650      	mov	r0, sl
 800d2a8:	ec53 2b10 	vmov	r2, r3, d0
 800d2ac:	4659      	mov	r1, fp
 800d2ae:	f7f3 f9a3 	bl	80005f8 <__aeabi_dmul>
 800d2b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d2b6:	f7f2 ffe9 	bl	800028c <__adddf3>
 800d2ba:	4682      	mov	sl, r0
 800d2bc:	468b      	mov	fp, r1
 800d2be:	e770      	b.n	800d1a2 <_strtod_l+0xa62>
 800d2c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d2c4:	e7e0      	b.n	800d288 <_strtod_l+0xb48>
 800d2c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d300 <_strtod_l+0xbc0>)
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	f7f3 fc06 	bl	8000adc <__aeabi_dcmplt>
 800d2d0:	e798      	b.n	800d204 <_strtod_l+0xac4>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800d2d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d2d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2da:	6013      	str	r3, [r2, #0]
 800d2dc:	f7ff ba6d 	b.w	800c7ba <_strtod_l+0x7a>
 800d2e0:	2a65      	cmp	r2, #101	@ 0x65
 800d2e2:	f43f ab68 	beq.w	800c9b6 <_strtod_l+0x276>
 800d2e6:	2a45      	cmp	r2, #69	@ 0x45
 800d2e8:	f43f ab65 	beq.w	800c9b6 <_strtod_l+0x276>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	f7ff bba0 	b.w	800ca32 <_strtod_l+0x2f2>
 800d2f2:	bf00      	nop
 800d2f4:	f3af 8000 	nop.w
 800d2f8:	ffc00000 	.word	0xffc00000
 800d2fc:	41dfffff 	.word	0x41dfffff
 800d300:	94a03595 	.word	0x94a03595
 800d304:	3fcfffff 	.word	0x3fcfffff

0800d308 <_strtod_r>:
 800d308:	4b01      	ldr	r3, [pc, #4]	@ (800d310 <_strtod_r+0x8>)
 800d30a:	f7ff ba19 	b.w	800c740 <_strtod_l>
 800d30e:	bf00      	nop
 800d310:	20000158 	.word	0x20000158

0800d314 <_strtol_l.isra.0>:
 800d314:	2b24      	cmp	r3, #36	@ 0x24
 800d316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d31a:	4686      	mov	lr, r0
 800d31c:	4690      	mov	r8, r2
 800d31e:	d801      	bhi.n	800d324 <_strtol_l.isra.0+0x10>
 800d320:	2b01      	cmp	r3, #1
 800d322:	d106      	bne.n	800d332 <_strtol_l.isra.0+0x1e>
 800d324:	f7fd fdb6 	bl	800ae94 <__errno>
 800d328:	2316      	movs	r3, #22
 800d32a:	6003      	str	r3, [r0, #0]
 800d32c:	2000      	movs	r0, #0
 800d32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d332:	4834      	ldr	r0, [pc, #208]	@ (800d404 <_strtol_l.isra.0+0xf0>)
 800d334:	460d      	mov	r5, r1
 800d336:	462a      	mov	r2, r5
 800d338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d33c:	5d06      	ldrb	r6, [r0, r4]
 800d33e:	f016 0608 	ands.w	r6, r6, #8
 800d342:	d1f8      	bne.n	800d336 <_strtol_l.isra.0+0x22>
 800d344:	2c2d      	cmp	r4, #45	@ 0x2d
 800d346:	d110      	bne.n	800d36a <_strtol_l.isra.0+0x56>
 800d348:	782c      	ldrb	r4, [r5, #0]
 800d34a:	2601      	movs	r6, #1
 800d34c:	1c95      	adds	r5, r2, #2
 800d34e:	f033 0210 	bics.w	r2, r3, #16
 800d352:	d115      	bne.n	800d380 <_strtol_l.isra.0+0x6c>
 800d354:	2c30      	cmp	r4, #48	@ 0x30
 800d356:	d10d      	bne.n	800d374 <_strtol_l.isra.0+0x60>
 800d358:	782a      	ldrb	r2, [r5, #0]
 800d35a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d35e:	2a58      	cmp	r2, #88	@ 0x58
 800d360:	d108      	bne.n	800d374 <_strtol_l.isra.0+0x60>
 800d362:	786c      	ldrb	r4, [r5, #1]
 800d364:	3502      	adds	r5, #2
 800d366:	2310      	movs	r3, #16
 800d368:	e00a      	b.n	800d380 <_strtol_l.isra.0+0x6c>
 800d36a:	2c2b      	cmp	r4, #43	@ 0x2b
 800d36c:	bf04      	itt	eq
 800d36e:	782c      	ldrbeq	r4, [r5, #0]
 800d370:	1c95      	addeq	r5, r2, #2
 800d372:	e7ec      	b.n	800d34e <_strtol_l.isra.0+0x3a>
 800d374:	2b00      	cmp	r3, #0
 800d376:	d1f6      	bne.n	800d366 <_strtol_l.isra.0+0x52>
 800d378:	2c30      	cmp	r4, #48	@ 0x30
 800d37a:	bf14      	ite	ne
 800d37c:	230a      	movne	r3, #10
 800d37e:	2308      	moveq	r3, #8
 800d380:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d384:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d388:	2200      	movs	r2, #0
 800d38a:	fbbc f9f3 	udiv	r9, ip, r3
 800d38e:	4610      	mov	r0, r2
 800d390:	fb03 ca19 	mls	sl, r3, r9, ip
 800d394:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d398:	2f09      	cmp	r7, #9
 800d39a:	d80f      	bhi.n	800d3bc <_strtol_l.isra.0+0xa8>
 800d39c:	463c      	mov	r4, r7
 800d39e:	42a3      	cmp	r3, r4
 800d3a0:	dd1b      	ble.n	800d3da <_strtol_l.isra.0+0xc6>
 800d3a2:	1c57      	adds	r7, r2, #1
 800d3a4:	d007      	beq.n	800d3b6 <_strtol_l.isra.0+0xa2>
 800d3a6:	4581      	cmp	r9, r0
 800d3a8:	d314      	bcc.n	800d3d4 <_strtol_l.isra.0+0xc0>
 800d3aa:	d101      	bne.n	800d3b0 <_strtol_l.isra.0+0x9c>
 800d3ac:	45a2      	cmp	sl, r4
 800d3ae:	db11      	blt.n	800d3d4 <_strtol_l.isra.0+0xc0>
 800d3b0:	fb00 4003 	mla	r0, r0, r3, r4
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3ba:	e7eb      	b.n	800d394 <_strtol_l.isra.0+0x80>
 800d3bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d3c0:	2f19      	cmp	r7, #25
 800d3c2:	d801      	bhi.n	800d3c8 <_strtol_l.isra.0+0xb4>
 800d3c4:	3c37      	subs	r4, #55	@ 0x37
 800d3c6:	e7ea      	b.n	800d39e <_strtol_l.isra.0+0x8a>
 800d3c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d3cc:	2f19      	cmp	r7, #25
 800d3ce:	d804      	bhi.n	800d3da <_strtol_l.isra.0+0xc6>
 800d3d0:	3c57      	subs	r4, #87	@ 0x57
 800d3d2:	e7e4      	b.n	800d39e <_strtol_l.isra.0+0x8a>
 800d3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d8:	e7ed      	b.n	800d3b6 <_strtol_l.isra.0+0xa2>
 800d3da:	1c53      	adds	r3, r2, #1
 800d3dc:	d108      	bne.n	800d3f0 <_strtol_l.isra.0+0xdc>
 800d3de:	2322      	movs	r3, #34	@ 0x22
 800d3e0:	f8ce 3000 	str.w	r3, [lr]
 800d3e4:	4660      	mov	r0, ip
 800d3e6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ea:	d0a0      	beq.n	800d32e <_strtol_l.isra.0+0x1a>
 800d3ec:	1e69      	subs	r1, r5, #1
 800d3ee:	e006      	b.n	800d3fe <_strtol_l.isra.0+0xea>
 800d3f0:	b106      	cbz	r6, 800d3f4 <_strtol_l.isra.0+0xe0>
 800d3f2:	4240      	negs	r0, r0
 800d3f4:	f1b8 0f00 	cmp.w	r8, #0
 800d3f8:	d099      	beq.n	800d32e <_strtol_l.isra.0+0x1a>
 800d3fa:	2a00      	cmp	r2, #0
 800d3fc:	d1f6      	bne.n	800d3ec <_strtol_l.isra.0+0xd8>
 800d3fe:	f8c8 1000 	str.w	r1, [r8]
 800d402:	e794      	b.n	800d32e <_strtol_l.isra.0+0x1a>
 800d404:	0800ea19 	.word	0x0800ea19

0800d408 <_strtol_r>:
 800d408:	f7ff bf84 	b.w	800d314 <_strtol_l.isra.0>

0800d40c <__ssputs_r>:
 800d40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d410:	688e      	ldr	r6, [r1, #8]
 800d412:	461f      	mov	r7, r3
 800d414:	42be      	cmp	r6, r7
 800d416:	680b      	ldr	r3, [r1, #0]
 800d418:	4682      	mov	sl, r0
 800d41a:	460c      	mov	r4, r1
 800d41c:	4690      	mov	r8, r2
 800d41e:	d82d      	bhi.n	800d47c <__ssputs_r+0x70>
 800d420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d424:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d428:	d026      	beq.n	800d478 <__ssputs_r+0x6c>
 800d42a:	6965      	ldr	r5, [r4, #20]
 800d42c:	6909      	ldr	r1, [r1, #16]
 800d42e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d432:	eba3 0901 	sub.w	r9, r3, r1
 800d436:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d43a:	1c7b      	adds	r3, r7, #1
 800d43c:	444b      	add	r3, r9
 800d43e:	106d      	asrs	r5, r5, #1
 800d440:	429d      	cmp	r5, r3
 800d442:	bf38      	it	cc
 800d444:	461d      	movcc	r5, r3
 800d446:	0553      	lsls	r3, r2, #21
 800d448:	d527      	bpl.n	800d49a <__ssputs_r+0x8e>
 800d44a:	4629      	mov	r1, r5
 800d44c:	f7fe fc24 	bl	800bc98 <_malloc_r>
 800d450:	4606      	mov	r6, r0
 800d452:	b360      	cbz	r0, 800d4ae <__ssputs_r+0xa2>
 800d454:	6921      	ldr	r1, [r4, #16]
 800d456:	464a      	mov	r2, r9
 800d458:	f000 fa18 	bl	800d88c <memcpy>
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d466:	81a3      	strh	r3, [r4, #12]
 800d468:	6126      	str	r6, [r4, #16]
 800d46a:	6165      	str	r5, [r4, #20]
 800d46c:	444e      	add	r6, r9
 800d46e:	eba5 0509 	sub.w	r5, r5, r9
 800d472:	6026      	str	r6, [r4, #0]
 800d474:	60a5      	str	r5, [r4, #8]
 800d476:	463e      	mov	r6, r7
 800d478:	42be      	cmp	r6, r7
 800d47a:	d900      	bls.n	800d47e <__ssputs_r+0x72>
 800d47c:	463e      	mov	r6, r7
 800d47e:	6820      	ldr	r0, [r4, #0]
 800d480:	4632      	mov	r2, r6
 800d482:	4641      	mov	r1, r8
 800d484:	f000 f9c6 	bl	800d814 <memmove>
 800d488:	68a3      	ldr	r3, [r4, #8]
 800d48a:	1b9b      	subs	r3, r3, r6
 800d48c:	60a3      	str	r3, [r4, #8]
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	4433      	add	r3, r6
 800d492:	6023      	str	r3, [r4, #0]
 800d494:	2000      	movs	r0, #0
 800d496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d49a:	462a      	mov	r2, r5
 800d49c:	f000 fd89 	bl	800dfb2 <_realloc_r>
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	d1e0      	bne.n	800d468 <__ssputs_r+0x5c>
 800d4a6:	6921      	ldr	r1, [r4, #16]
 800d4a8:	4650      	mov	r0, sl
 800d4aa:	f7fe fb81 	bl	800bbb0 <_free_r>
 800d4ae:	230c      	movs	r3, #12
 800d4b0:	f8ca 3000 	str.w	r3, [sl]
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4ba:	81a3      	strh	r3, [r4, #12]
 800d4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c0:	e7e9      	b.n	800d496 <__ssputs_r+0x8a>
	...

0800d4c4 <_svfiprintf_r>:
 800d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c8:	4698      	mov	r8, r3
 800d4ca:	898b      	ldrh	r3, [r1, #12]
 800d4cc:	061b      	lsls	r3, r3, #24
 800d4ce:	b09d      	sub	sp, #116	@ 0x74
 800d4d0:	4607      	mov	r7, r0
 800d4d2:	460d      	mov	r5, r1
 800d4d4:	4614      	mov	r4, r2
 800d4d6:	d510      	bpl.n	800d4fa <_svfiprintf_r+0x36>
 800d4d8:	690b      	ldr	r3, [r1, #16]
 800d4da:	b973      	cbnz	r3, 800d4fa <_svfiprintf_r+0x36>
 800d4dc:	2140      	movs	r1, #64	@ 0x40
 800d4de:	f7fe fbdb 	bl	800bc98 <_malloc_r>
 800d4e2:	6028      	str	r0, [r5, #0]
 800d4e4:	6128      	str	r0, [r5, #16]
 800d4e6:	b930      	cbnz	r0, 800d4f6 <_svfiprintf_r+0x32>
 800d4e8:	230c      	movs	r3, #12
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f0:	b01d      	add	sp, #116	@ 0x74
 800d4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f6:	2340      	movs	r3, #64	@ 0x40
 800d4f8:	616b      	str	r3, [r5, #20]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4fe:	2320      	movs	r3, #32
 800d500:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d504:	f8cd 800c 	str.w	r8, [sp, #12]
 800d508:	2330      	movs	r3, #48	@ 0x30
 800d50a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d6a8 <_svfiprintf_r+0x1e4>
 800d50e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d512:	f04f 0901 	mov.w	r9, #1
 800d516:	4623      	mov	r3, r4
 800d518:	469a      	mov	sl, r3
 800d51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d51e:	b10a      	cbz	r2, 800d524 <_svfiprintf_r+0x60>
 800d520:	2a25      	cmp	r2, #37	@ 0x25
 800d522:	d1f9      	bne.n	800d518 <_svfiprintf_r+0x54>
 800d524:	ebba 0b04 	subs.w	fp, sl, r4
 800d528:	d00b      	beq.n	800d542 <_svfiprintf_r+0x7e>
 800d52a:	465b      	mov	r3, fp
 800d52c:	4622      	mov	r2, r4
 800d52e:	4629      	mov	r1, r5
 800d530:	4638      	mov	r0, r7
 800d532:	f7ff ff6b 	bl	800d40c <__ssputs_r>
 800d536:	3001      	adds	r0, #1
 800d538:	f000 80a7 	beq.w	800d68a <_svfiprintf_r+0x1c6>
 800d53c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d53e:	445a      	add	r2, fp
 800d540:	9209      	str	r2, [sp, #36]	@ 0x24
 800d542:	f89a 3000 	ldrb.w	r3, [sl]
 800d546:	2b00      	cmp	r3, #0
 800d548:	f000 809f 	beq.w	800d68a <_svfiprintf_r+0x1c6>
 800d54c:	2300      	movs	r3, #0
 800d54e:	f04f 32ff 	mov.w	r2, #4294967295
 800d552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d556:	f10a 0a01 	add.w	sl, sl, #1
 800d55a:	9304      	str	r3, [sp, #16]
 800d55c:	9307      	str	r3, [sp, #28]
 800d55e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d562:	931a      	str	r3, [sp, #104]	@ 0x68
 800d564:	4654      	mov	r4, sl
 800d566:	2205      	movs	r2, #5
 800d568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d56c:	484e      	ldr	r0, [pc, #312]	@ (800d6a8 <_svfiprintf_r+0x1e4>)
 800d56e:	f7f2 fe2f 	bl	80001d0 <memchr>
 800d572:	9a04      	ldr	r2, [sp, #16]
 800d574:	b9d8      	cbnz	r0, 800d5ae <_svfiprintf_r+0xea>
 800d576:	06d0      	lsls	r0, r2, #27
 800d578:	bf44      	itt	mi
 800d57a:	2320      	movmi	r3, #32
 800d57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d580:	0711      	lsls	r1, r2, #28
 800d582:	bf44      	itt	mi
 800d584:	232b      	movmi	r3, #43	@ 0x2b
 800d586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d58a:	f89a 3000 	ldrb.w	r3, [sl]
 800d58e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d590:	d015      	beq.n	800d5be <_svfiprintf_r+0xfa>
 800d592:	9a07      	ldr	r2, [sp, #28]
 800d594:	4654      	mov	r4, sl
 800d596:	2000      	movs	r0, #0
 800d598:	f04f 0c0a 	mov.w	ip, #10
 800d59c:	4621      	mov	r1, r4
 800d59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5a2:	3b30      	subs	r3, #48	@ 0x30
 800d5a4:	2b09      	cmp	r3, #9
 800d5a6:	d94b      	bls.n	800d640 <_svfiprintf_r+0x17c>
 800d5a8:	b1b0      	cbz	r0, 800d5d8 <_svfiprintf_r+0x114>
 800d5aa:	9207      	str	r2, [sp, #28]
 800d5ac:	e014      	b.n	800d5d8 <_svfiprintf_r+0x114>
 800d5ae:	eba0 0308 	sub.w	r3, r0, r8
 800d5b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	9304      	str	r3, [sp, #16]
 800d5ba:	46a2      	mov	sl, r4
 800d5bc:	e7d2      	b.n	800d564 <_svfiprintf_r+0xa0>
 800d5be:	9b03      	ldr	r3, [sp, #12]
 800d5c0:	1d19      	adds	r1, r3, #4
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	9103      	str	r1, [sp, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	bfbb      	ittet	lt
 800d5ca:	425b      	neglt	r3, r3
 800d5cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d5d0:	9307      	strge	r3, [sp, #28]
 800d5d2:	9307      	strlt	r3, [sp, #28]
 800d5d4:	bfb8      	it	lt
 800d5d6:	9204      	strlt	r2, [sp, #16]
 800d5d8:	7823      	ldrb	r3, [r4, #0]
 800d5da:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5dc:	d10a      	bne.n	800d5f4 <_svfiprintf_r+0x130>
 800d5de:	7863      	ldrb	r3, [r4, #1]
 800d5e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5e2:	d132      	bne.n	800d64a <_svfiprintf_r+0x186>
 800d5e4:	9b03      	ldr	r3, [sp, #12]
 800d5e6:	1d1a      	adds	r2, r3, #4
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	9203      	str	r2, [sp, #12]
 800d5ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5f0:	3402      	adds	r4, #2
 800d5f2:	9305      	str	r3, [sp, #20]
 800d5f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d6b8 <_svfiprintf_r+0x1f4>
 800d5f8:	7821      	ldrb	r1, [r4, #0]
 800d5fa:	2203      	movs	r2, #3
 800d5fc:	4650      	mov	r0, sl
 800d5fe:	f7f2 fde7 	bl	80001d0 <memchr>
 800d602:	b138      	cbz	r0, 800d614 <_svfiprintf_r+0x150>
 800d604:	9b04      	ldr	r3, [sp, #16]
 800d606:	eba0 000a 	sub.w	r0, r0, sl
 800d60a:	2240      	movs	r2, #64	@ 0x40
 800d60c:	4082      	lsls	r2, r0
 800d60e:	4313      	orrs	r3, r2
 800d610:	3401      	adds	r4, #1
 800d612:	9304      	str	r3, [sp, #16]
 800d614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d618:	4824      	ldr	r0, [pc, #144]	@ (800d6ac <_svfiprintf_r+0x1e8>)
 800d61a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d61e:	2206      	movs	r2, #6
 800d620:	f7f2 fdd6 	bl	80001d0 <memchr>
 800d624:	2800      	cmp	r0, #0
 800d626:	d036      	beq.n	800d696 <_svfiprintf_r+0x1d2>
 800d628:	4b21      	ldr	r3, [pc, #132]	@ (800d6b0 <_svfiprintf_r+0x1ec>)
 800d62a:	bb1b      	cbnz	r3, 800d674 <_svfiprintf_r+0x1b0>
 800d62c:	9b03      	ldr	r3, [sp, #12]
 800d62e:	3307      	adds	r3, #7
 800d630:	f023 0307 	bic.w	r3, r3, #7
 800d634:	3308      	adds	r3, #8
 800d636:	9303      	str	r3, [sp, #12]
 800d638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d63a:	4433      	add	r3, r6
 800d63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d63e:	e76a      	b.n	800d516 <_svfiprintf_r+0x52>
 800d640:	fb0c 3202 	mla	r2, ip, r2, r3
 800d644:	460c      	mov	r4, r1
 800d646:	2001      	movs	r0, #1
 800d648:	e7a8      	b.n	800d59c <_svfiprintf_r+0xd8>
 800d64a:	2300      	movs	r3, #0
 800d64c:	3401      	adds	r4, #1
 800d64e:	9305      	str	r3, [sp, #20]
 800d650:	4619      	mov	r1, r3
 800d652:	f04f 0c0a 	mov.w	ip, #10
 800d656:	4620      	mov	r0, r4
 800d658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d65c:	3a30      	subs	r2, #48	@ 0x30
 800d65e:	2a09      	cmp	r2, #9
 800d660:	d903      	bls.n	800d66a <_svfiprintf_r+0x1a6>
 800d662:	2b00      	cmp	r3, #0
 800d664:	d0c6      	beq.n	800d5f4 <_svfiprintf_r+0x130>
 800d666:	9105      	str	r1, [sp, #20]
 800d668:	e7c4      	b.n	800d5f4 <_svfiprintf_r+0x130>
 800d66a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d66e:	4604      	mov	r4, r0
 800d670:	2301      	movs	r3, #1
 800d672:	e7f0      	b.n	800d656 <_svfiprintf_r+0x192>
 800d674:	ab03      	add	r3, sp, #12
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	462a      	mov	r2, r5
 800d67a:	4b0e      	ldr	r3, [pc, #56]	@ (800d6b4 <_svfiprintf_r+0x1f0>)
 800d67c:	a904      	add	r1, sp, #16
 800d67e:	4638      	mov	r0, r7
 800d680:	f7fc fc82 	bl	8009f88 <_printf_float>
 800d684:	1c42      	adds	r2, r0, #1
 800d686:	4606      	mov	r6, r0
 800d688:	d1d6      	bne.n	800d638 <_svfiprintf_r+0x174>
 800d68a:	89ab      	ldrh	r3, [r5, #12]
 800d68c:	065b      	lsls	r3, r3, #25
 800d68e:	f53f af2d 	bmi.w	800d4ec <_svfiprintf_r+0x28>
 800d692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d694:	e72c      	b.n	800d4f0 <_svfiprintf_r+0x2c>
 800d696:	ab03      	add	r3, sp, #12
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	462a      	mov	r2, r5
 800d69c:	4b05      	ldr	r3, [pc, #20]	@ (800d6b4 <_svfiprintf_r+0x1f0>)
 800d69e:	a904      	add	r1, sp, #16
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	f7fc ff09 	bl	800a4b8 <_printf_i>
 800d6a6:	e7ed      	b.n	800d684 <_svfiprintf_r+0x1c0>
 800d6a8:	0800e811 	.word	0x0800e811
 800d6ac:	0800e81b 	.word	0x0800e81b
 800d6b0:	08009f89 	.word	0x08009f89
 800d6b4:	0800d40d 	.word	0x0800d40d
 800d6b8:	0800e817 	.word	0x0800e817

0800d6bc <__sflush_r>:
 800d6bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c4:	0716      	lsls	r6, r2, #28
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	d454      	bmi.n	800d776 <__sflush_r+0xba>
 800d6cc:	684b      	ldr	r3, [r1, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	dc02      	bgt.n	800d6d8 <__sflush_r+0x1c>
 800d6d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	dd48      	ble.n	800d76a <__sflush_r+0xae>
 800d6d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6da:	2e00      	cmp	r6, #0
 800d6dc:	d045      	beq.n	800d76a <__sflush_r+0xae>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d6e4:	682f      	ldr	r7, [r5, #0]
 800d6e6:	6a21      	ldr	r1, [r4, #32]
 800d6e8:	602b      	str	r3, [r5, #0]
 800d6ea:	d030      	beq.n	800d74e <__sflush_r+0x92>
 800d6ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	0759      	lsls	r1, r3, #29
 800d6f2:	d505      	bpl.n	800d700 <__sflush_r+0x44>
 800d6f4:	6863      	ldr	r3, [r4, #4]
 800d6f6:	1ad2      	subs	r2, r2, r3
 800d6f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d6fa:	b10b      	cbz	r3, 800d700 <__sflush_r+0x44>
 800d6fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d6fe:	1ad2      	subs	r2, r2, r3
 800d700:	2300      	movs	r3, #0
 800d702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d704:	6a21      	ldr	r1, [r4, #32]
 800d706:	4628      	mov	r0, r5
 800d708:	47b0      	blx	r6
 800d70a:	1c43      	adds	r3, r0, #1
 800d70c:	89a3      	ldrh	r3, [r4, #12]
 800d70e:	d106      	bne.n	800d71e <__sflush_r+0x62>
 800d710:	6829      	ldr	r1, [r5, #0]
 800d712:	291d      	cmp	r1, #29
 800d714:	d82b      	bhi.n	800d76e <__sflush_r+0xb2>
 800d716:	4a2a      	ldr	r2, [pc, #168]	@ (800d7c0 <__sflush_r+0x104>)
 800d718:	40ca      	lsrs	r2, r1
 800d71a:	07d6      	lsls	r6, r2, #31
 800d71c:	d527      	bpl.n	800d76e <__sflush_r+0xb2>
 800d71e:	2200      	movs	r2, #0
 800d720:	6062      	str	r2, [r4, #4]
 800d722:	04d9      	lsls	r1, r3, #19
 800d724:	6922      	ldr	r2, [r4, #16]
 800d726:	6022      	str	r2, [r4, #0]
 800d728:	d504      	bpl.n	800d734 <__sflush_r+0x78>
 800d72a:	1c42      	adds	r2, r0, #1
 800d72c:	d101      	bne.n	800d732 <__sflush_r+0x76>
 800d72e:	682b      	ldr	r3, [r5, #0]
 800d730:	b903      	cbnz	r3, 800d734 <__sflush_r+0x78>
 800d732:	6560      	str	r0, [r4, #84]	@ 0x54
 800d734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d736:	602f      	str	r7, [r5, #0]
 800d738:	b1b9      	cbz	r1, 800d76a <__sflush_r+0xae>
 800d73a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d73e:	4299      	cmp	r1, r3
 800d740:	d002      	beq.n	800d748 <__sflush_r+0x8c>
 800d742:	4628      	mov	r0, r5
 800d744:	f7fe fa34 	bl	800bbb0 <_free_r>
 800d748:	2300      	movs	r3, #0
 800d74a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d74c:	e00d      	b.n	800d76a <__sflush_r+0xae>
 800d74e:	2301      	movs	r3, #1
 800d750:	4628      	mov	r0, r5
 800d752:	47b0      	blx	r6
 800d754:	4602      	mov	r2, r0
 800d756:	1c50      	adds	r0, r2, #1
 800d758:	d1c9      	bne.n	800d6ee <__sflush_r+0x32>
 800d75a:	682b      	ldr	r3, [r5, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d0c6      	beq.n	800d6ee <__sflush_r+0x32>
 800d760:	2b1d      	cmp	r3, #29
 800d762:	d001      	beq.n	800d768 <__sflush_r+0xac>
 800d764:	2b16      	cmp	r3, #22
 800d766:	d11e      	bne.n	800d7a6 <__sflush_r+0xea>
 800d768:	602f      	str	r7, [r5, #0]
 800d76a:	2000      	movs	r0, #0
 800d76c:	e022      	b.n	800d7b4 <__sflush_r+0xf8>
 800d76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d772:	b21b      	sxth	r3, r3
 800d774:	e01b      	b.n	800d7ae <__sflush_r+0xf2>
 800d776:	690f      	ldr	r7, [r1, #16]
 800d778:	2f00      	cmp	r7, #0
 800d77a:	d0f6      	beq.n	800d76a <__sflush_r+0xae>
 800d77c:	0793      	lsls	r3, r2, #30
 800d77e:	680e      	ldr	r6, [r1, #0]
 800d780:	bf08      	it	eq
 800d782:	694b      	ldreq	r3, [r1, #20]
 800d784:	600f      	str	r7, [r1, #0]
 800d786:	bf18      	it	ne
 800d788:	2300      	movne	r3, #0
 800d78a:	eba6 0807 	sub.w	r8, r6, r7
 800d78e:	608b      	str	r3, [r1, #8]
 800d790:	f1b8 0f00 	cmp.w	r8, #0
 800d794:	dde9      	ble.n	800d76a <__sflush_r+0xae>
 800d796:	6a21      	ldr	r1, [r4, #32]
 800d798:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d79a:	4643      	mov	r3, r8
 800d79c:	463a      	mov	r2, r7
 800d79e:	4628      	mov	r0, r5
 800d7a0:	47b0      	blx	r6
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	dc08      	bgt.n	800d7b8 <__sflush_r+0xfc>
 800d7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ae:	81a3      	strh	r3, [r4, #12]
 800d7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b8:	4407      	add	r7, r0
 800d7ba:	eba8 0800 	sub.w	r8, r8, r0
 800d7be:	e7e7      	b.n	800d790 <__sflush_r+0xd4>
 800d7c0:	20400001 	.word	0x20400001

0800d7c4 <_fflush_r>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	690b      	ldr	r3, [r1, #16]
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	460c      	mov	r4, r1
 800d7cc:	b913      	cbnz	r3, 800d7d4 <_fflush_r+0x10>
 800d7ce:	2500      	movs	r5, #0
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	bd38      	pop	{r3, r4, r5, pc}
 800d7d4:	b118      	cbz	r0, 800d7de <_fflush_r+0x1a>
 800d7d6:	6a03      	ldr	r3, [r0, #32]
 800d7d8:	b90b      	cbnz	r3, 800d7de <_fflush_r+0x1a>
 800d7da:	f7fd fa25 	bl	800ac28 <__sinit>
 800d7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d0f3      	beq.n	800d7ce <_fflush_r+0xa>
 800d7e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d7e8:	07d0      	lsls	r0, r2, #31
 800d7ea:	d404      	bmi.n	800d7f6 <_fflush_r+0x32>
 800d7ec:	0599      	lsls	r1, r3, #22
 800d7ee:	d402      	bmi.n	800d7f6 <_fflush_r+0x32>
 800d7f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7f2:	f7fd fb7a 	bl	800aeea <__retarget_lock_acquire_recursive>
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	4621      	mov	r1, r4
 800d7fa:	f7ff ff5f 	bl	800d6bc <__sflush_r>
 800d7fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d800:	07da      	lsls	r2, r3, #31
 800d802:	4605      	mov	r5, r0
 800d804:	d4e4      	bmi.n	800d7d0 <_fflush_r+0xc>
 800d806:	89a3      	ldrh	r3, [r4, #12]
 800d808:	059b      	lsls	r3, r3, #22
 800d80a:	d4e1      	bmi.n	800d7d0 <_fflush_r+0xc>
 800d80c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d80e:	f7fd fb6d 	bl	800aeec <__retarget_lock_release_recursive>
 800d812:	e7dd      	b.n	800d7d0 <_fflush_r+0xc>

0800d814 <memmove>:
 800d814:	4288      	cmp	r0, r1
 800d816:	b510      	push	{r4, lr}
 800d818:	eb01 0402 	add.w	r4, r1, r2
 800d81c:	d902      	bls.n	800d824 <memmove+0x10>
 800d81e:	4284      	cmp	r4, r0
 800d820:	4623      	mov	r3, r4
 800d822:	d807      	bhi.n	800d834 <memmove+0x20>
 800d824:	1e43      	subs	r3, r0, #1
 800d826:	42a1      	cmp	r1, r4
 800d828:	d008      	beq.n	800d83c <memmove+0x28>
 800d82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d82e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d832:	e7f8      	b.n	800d826 <memmove+0x12>
 800d834:	4402      	add	r2, r0
 800d836:	4601      	mov	r1, r0
 800d838:	428a      	cmp	r2, r1
 800d83a:	d100      	bne.n	800d83e <memmove+0x2a>
 800d83c:	bd10      	pop	{r4, pc}
 800d83e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d846:	e7f7      	b.n	800d838 <memmove+0x24>

0800d848 <strncmp>:
 800d848:	b510      	push	{r4, lr}
 800d84a:	b16a      	cbz	r2, 800d868 <strncmp+0x20>
 800d84c:	3901      	subs	r1, #1
 800d84e:	1884      	adds	r4, r0, r2
 800d850:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d854:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d858:	429a      	cmp	r2, r3
 800d85a:	d103      	bne.n	800d864 <strncmp+0x1c>
 800d85c:	42a0      	cmp	r0, r4
 800d85e:	d001      	beq.n	800d864 <strncmp+0x1c>
 800d860:	2a00      	cmp	r2, #0
 800d862:	d1f5      	bne.n	800d850 <strncmp+0x8>
 800d864:	1ad0      	subs	r0, r2, r3
 800d866:	bd10      	pop	{r4, pc}
 800d868:	4610      	mov	r0, r2
 800d86a:	e7fc      	b.n	800d866 <strncmp+0x1e>

0800d86c <_sbrk_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	4d06      	ldr	r5, [pc, #24]	@ (800d888 <_sbrk_r+0x1c>)
 800d870:	2300      	movs	r3, #0
 800d872:	4604      	mov	r4, r0
 800d874:	4608      	mov	r0, r1
 800d876:	602b      	str	r3, [r5, #0]
 800d878:	f7f4 f98a 	bl	8001b90 <_sbrk>
 800d87c:	1c43      	adds	r3, r0, #1
 800d87e:	d102      	bne.n	800d886 <_sbrk_r+0x1a>
 800d880:	682b      	ldr	r3, [r5, #0]
 800d882:	b103      	cbz	r3, 800d886 <_sbrk_r+0x1a>
 800d884:	6023      	str	r3, [r4, #0]
 800d886:	bd38      	pop	{r3, r4, r5, pc}
 800d888:	200021a8 	.word	0x200021a8

0800d88c <memcpy>:
 800d88c:	440a      	add	r2, r1
 800d88e:	4291      	cmp	r1, r2
 800d890:	f100 33ff 	add.w	r3, r0, #4294967295
 800d894:	d100      	bne.n	800d898 <memcpy+0xc>
 800d896:	4770      	bx	lr
 800d898:	b510      	push	{r4, lr}
 800d89a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d89e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8a2:	4291      	cmp	r1, r2
 800d8a4:	d1f9      	bne.n	800d89a <memcpy+0xe>
 800d8a6:	bd10      	pop	{r4, pc}

0800d8a8 <nan>:
 800d8a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d8b0 <nan+0x8>
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	00000000 	.word	0x00000000
 800d8b4:	7ff80000 	.word	0x7ff80000

0800d8b8 <__assert_func>:
 800d8b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8ba:	4614      	mov	r4, r2
 800d8bc:	461a      	mov	r2, r3
 800d8be:	4b09      	ldr	r3, [pc, #36]	@ (800d8e4 <__assert_func+0x2c>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	68d8      	ldr	r0, [r3, #12]
 800d8c6:	b14c      	cbz	r4, 800d8dc <__assert_func+0x24>
 800d8c8:	4b07      	ldr	r3, [pc, #28]	@ (800d8e8 <__assert_func+0x30>)
 800d8ca:	9100      	str	r1, [sp, #0]
 800d8cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8d0:	4906      	ldr	r1, [pc, #24]	@ (800d8ec <__assert_func+0x34>)
 800d8d2:	462b      	mov	r3, r5
 800d8d4:	f000 fba8 	bl	800e028 <fiprintf>
 800d8d8:	f000 fbb8 	bl	800e04c <abort>
 800d8dc:	4b04      	ldr	r3, [pc, #16]	@ (800d8f0 <__assert_func+0x38>)
 800d8de:	461c      	mov	r4, r3
 800d8e0:	e7f3      	b.n	800d8ca <__assert_func+0x12>
 800d8e2:	bf00      	nop
 800d8e4:	20000108 	.word	0x20000108
 800d8e8:	0800e82a 	.word	0x0800e82a
 800d8ec:	0800e837 	.word	0x0800e837
 800d8f0:	0800e865 	.word	0x0800e865

0800d8f4 <_calloc_r>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	fba1 5402 	umull	r5, r4, r1, r2
 800d8fa:	b934      	cbnz	r4, 800d90a <_calloc_r+0x16>
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	f7fe f9cb 	bl	800bc98 <_malloc_r>
 800d902:	4606      	mov	r6, r0
 800d904:	b928      	cbnz	r0, 800d912 <_calloc_r+0x1e>
 800d906:	4630      	mov	r0, r6
 800d908:	bd70      	pop	{r4, r5, r6, pc}
 800d90a:	220c      	movs	r2, #12
 800d90c:	6002      	str	r2, [r0, #0]
 800d90e:	2600      	movs	r6, #0
 800d910:	e7f9      	b.n	800d906 <_calloc_r+0x12>
 800d912:	462a      	mov	r2, r5
 800d914:	4621      	mov	r1, r4
 800d916:	f7fd fa58 	bl	800adca <memset>
 800d91a:	e7f4      	b.n	800d906 <_calloc_r+0x12>

0800d91c <rshift>:
 800d91c:	6903      	ldr	r3, [r0, #16]
 800d91e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d922:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d926:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d92a:	f100 0414 	add.w	r4, r0, #20
 800d92e:	dd45      	ble.n	800d9bc <rshift+0xa0>
 800d930:	f011 011f 	ands.w	r1, r1, #31
 800d934:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d938:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d93c:	d10c      	bne.n	800d958 <rshift+0x3c>
 800d93e:	f100 0710 	add.w	r7, r0, #16
 800d942:	4629      	mov	r1, r5
 800d944:	42b1      	cmp	r1, r6
 800d946:	d334      	bcc.n	800d9b2 <rshift+0x96>
 800d948:	1a9b      	subs	r3, r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	1eea      	subs	r2, r5, #3
 800d94e:	4296      	cmp	r6, r2
 800d950:	bf38      	it	cc
 800d952:	2300      	movcc	r3, #0
 800d954:	4423      	add	r3, r4
 800d956:	e015      	b.n	800d984 <rshift+0x68>
 800d958:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d95c:	f1c1 0820 	rsb	r8, r1, #32
 800d960:	40cf      	lsrs	r7, r1
 800d962:	f105 0e04 	add.w	lr, r5, #4
 800d966:	46a1      	mov	r9, r4
 800d968:	4576      	cmp	r6, lr
 800d96a:	46f4      	mov	ip, lr
 800d96c:	d815      	bhi.n	800d99a <rshift+0x7e>
 800d96e:	1a9a      	subs	r2, r3, r2
 800d970:	0092      	lsls	r2, r2, #2
 800d972:	3a04      	subs	r2, #4
 800d974:	3501      	adds	r5, #1
 800d976:	42ae      	cmp	r6, r5
 800d978:	bf38      	it	cc
 800d97a:	2200      	movcc	r2, #0
 800d97c:	18a3      	adds	r3, r4, r2
 800d97e:	50a7      	str	r7, [r4, r2]
 800d980:	b107      	cbz	r7, 800d984 <rshift+0x68>
 800d982:	3304      	adds	r3, #4
 800d984:	1b1a      	subs	r2, r3, r4
 800d986:	42a3      	cmp	r3, r4
 800d988:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d98c:	bf08      	it	eq
 800d98e:	2300      	moveq	r3, #0
 800d990:	6102      	str	r2, [r0, #16]
 800d992:	bf08      	it	eq
 800d994:	6143      	streq	r3, [r0, #20]
 800d996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d99a:	f8dc c000 	ldr.w	ip, [ip]
 800d99e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d9a2:	ea4c 0707 	orr.w	r7, ip, r7
 800d9a6:	f849 7b04 	str.w	r7, [r9], #4
 800d9aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9ae:	40cf      	lsrs	r7, r1
 800d9b0:	e7da      	b.n	800d968 <rshift+0x4c>
 800d9b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d9b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d9ba:	e7c3      	b.n	800d944 <rshift+0x28>
 800d9bc:	4623      	mov	r3, r4
 800d9be:	e7e1      	b.n	800d984 <rshift+0x68>

0800d9c0 <__hexdig_fun>:
 800d9c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d9c4:	2b09      	cmp	r3, #9
 800d9c6:	d802      	bhi.n	800d9ce <__hexdig_fun+0xe>
 800d9c8:	3820      	subs	r0, #32
 800d9ca:	b2c0      	uxtb	r0, r0
 800d9cc:	4770      	bx	lr
 800d9ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d9d2:	2b05      	cmp	r3, #5
 800d9d4:	d801      	bhi.n	800d9da <__hexdig_fun+0x1a>
 800d9d6:	3847      	subs	r0, #71	@ 0x47
 800d9d8:	e7f7      	b.n	800d9ca <__hexdig_fun+0xa>
 800d9da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d9de:	2b05      	cmp	r3, #5
 800d9e0:	d801      	bhi.n	800d9e6 <__hexdig_fun+0x26>
 800d9e2:	3827      	subs	r0, #39	@ 0x27
 800d9e4:	e7f1      	b.n	800d9ca <__hexdig_fun+0xa>
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	4770      	bx	lr
	...

0800d9ec <__gethex>:
 800d9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f0:	b085      	sub	sp, #20
 800d9f2:	468a      	mov	sl, r1
 800d9f4:	9302      	str	r3, [sp, #8]
 800d9f6:	680b      	ldr	r3, [r1, #0]
 800d9f8:	9001      	str	r0, [sp, #4]
 800d9fa:	4690      	mov	r8, r2
 800d9fc:	1c9c      	adds	r4, r3, #2
 800d9fe:	46a1      	mov	r9, r4
 800da00:	f814 0b01 	ldrb.w	r0, [r4], #1
 800da04:	2830      	cmp	r0, #48	@ 0x30
 800da06:	d0fa      	beq.n	800d9fe <__gethex+0x12>
 800da08:	eba9 0303 	sub.w	r3, r9, r3
 800da0c:	f1a3 0b02 	sub.w	fp, r3, #2
 800da10:	f7ff ffd6 	bl	800d9c0 <__hexdig_fun>
 800da14:	4605      	mov	r5, r0
 800da16:	2800      	cmp	r0, #0
 800da18:	d168      	bne.n	800daec <__gethex+0x100>
 800da1a:	49a0      	ldr	r1, [pc, #640]	@ (800dc9c <__gethex+0x2b0>)
 800da1c:	2201      	movs	r2, #1
 800da1e:	4648      	mov	r0, r9
 800da20:	f7ff ff12 	bl	800d848 <strncmp>
 800da24:	4607      	mov	r7, r0
 800da26:	2800      	cmp	r0, #0
 800da28:	d167      	bne.n	800dafa <__gethex+0x10e>
 800da2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800da2e:	4626      	mov	r6, r4
 800da30:	f7ff ffc6 	bl	800d9c0 <__hexdig_fun>
 800da34:	2800      	cmp	r0, #0
 800da36:	d062      	beq.n	800dafe <__gethex+0x112>
 800da38:	4623      	mov	r3, r4
 800da3a:	7818      	ldrb	r0, [r3, #0]
 800da3c:	2830      	cmp	r0, #48	@ 0x30
 800da3e:	4699      	mov	r9, r3
 800da40:	f103 0301 	add.w	r3, r3, #1
 800da44:	d0f9      	beq.n	800da3a <__gethex+0x4e>
 800da46:	f7ff ffbb 	bl	800d9c0 <__hexdig_fun>
 800da4a:	fab0 f580 	clz	r5, r0
 800da4e:	096d      	lsrs	r5, r5, #5
 800da50:	f04f 0b01 	mov.w	fp, #1
 800da54:	464a      	mov	r2, r9
 800da56:	4616      	mov	r6, r2
 800da58:	3201      	adds	r2, #1
 800da5a:	7830      	ldrb	r0, [r6, #0]
 800da5c:	f7ff ffb0 	bl	800d9c0 <__hexdig_fun>
 800da60:	2800      	cmp	r0, #0
 800da62:	d1f8      	bne.n	800da56 <__gethex+0x6a>
 800da64:	498d      	ldr	r1, [pc, #564]	@ (800dc9c <__gethex+0x2b0>)
 800da66:	2201      	movs	r2, #1
 800da68:	4630      	mov	r0, r6
 800da6a:	f7ff feed 	bl	800d848 <strncmp>
 800da6e:	2800      	cmp	r0, #0
 800da70:	d13f      	bne.n	800daf2 <__gethex+0x106>
 800da72:	b944      	cbnz	r4, 800da86 <__gethex+0x9a>
 800da74:	1c74      	adds	r4, r6, #1
 800da76:	4622      	mov	r2, r4
 800da78:	4616      	mov	r6, r2
 800da7a:	3201      	adds	r2, #1
 800da7c:	7830      	ldrb	r0, [r6, #0]
 800da7e:	f7ff ff9f 	bl	800d9c0 <__hexdig_fun>
 800da82:	2800      	cmp	r0, #0
 800da84:	d1f8      	bne.n	800da78 <__gethex+0x8c>
 800da86:	1ba4      	subs	r4, r4, r6
 800da88:	00a7      	lsls	r7, r4, #2
 800da8a:	7833      	ldrb	r3, [r6, #0]
 800da8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800da90:	2b50      	cmp	r3, #80	@ 0x50
 800da92:	d13e      	bne.n	800db12 <__gethex+0x126>
 800da94:	7873      	ldrb	r3, [r6, #1]
 800da96:	2b2b      	cmp	r3, #43	@ 0x2b
 800da98:	d033      	beq.n	800db02 <__gethex+0x116>
 800da9a:	2b2d      	cmp	r3, #45	@ 0x2d
 800da9c:	d034      	beq.n	800db08 <__gethex+0x11c>
 800da9e:	1c71      	adds	r1, r6, #1
 800daa0:	2400      	movs	r4, #0
 800daa2:	7808      	ldrb	r0, [r1, #0]
 800daa4:	f7ff ff8c 	bl	800d9c0 <__hexdig_fun>
 800daa8:	1e43      	subs	r3, r0, #1
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	2b18      	cmp	r3, #24
 800daae:	d830      	bhi.n	800db12 <__gethex+0x126>
 800dab0:	f1a0 0210 	sub.w	r2, r0, #16
 800dab4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dab8:	f7ff ff82 	bl	800d9c0 <__hexdig_fun>
 800dabc:	f100 3cff 	add.w	ip, r0, #4294967295
 800dac0:	fa5f fc8c 	uxtb.w	ip, ip
 800dac4:	f1bc 0f18 	cmp.w	ip, #24
 800dac8:	f04f 030a 	mov.w	r3, #10
 800dacc:	d91e      	bls.n	800db0c <__gethex+0x120>
 800dace:	b104      	cbz	r4, 800dad2 <__gethex+0xe6>
 800dad0:	4252      	negs	r2, r2
 800dad2:	4417      	add	r7, r2
 800dad4:	f8ca 1000 	str.w	r1, [sl]
 800dad8:	b1ed      	cbz	r5, 800db16 <__gethex+0x12a>
 800dada:	f1bb 0f00 	cmp.w	fp, #0
 800dade:	bf0c      	ite	eq
 800dae0:	2506      	moveq	r5, #6
 800dae2:	2500      	movne	r5, #0
 800dae4:	4628      	mov	r0, r5
 800dae6:	b005      	add	sp, #20
 800dae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daec:	2500      	movs	r5, #0
 800daee:	462c      	mov	r4, r5
 800daf0:	e7b0      	b.n	800da54 <__gethex+0x68>
 800daf2:	2c00      	cmp	r4, #0
 800daf4:	d1c7      	bne.n	800da86 <__gethex+0x9a>
 800daf6:	4627      	mov	r7, r4
 800daf8:	e7c7      	b.n	800da8a <__gethex+0x9e>
 800dafa:	464e      	mov	r6, r9
 800dafc:	462f      	mov	r7, r5
 800dafe:	2501      	movs	r5, #1
 800db00:	e7c3      	b.n	800da8a <__gethex+0x9e>
 800db02:	2400      	movs	r4, #0
 800db04:	1cb1      	adds	r1, r6, #2
 800db06:	e7cc      	b.n	800daa2 <__gethex+0xb6>
 800db08:	2401      	movs	r4, #1
 800db0a:	e7fb      	b.n	800db04 <__gethex+0x118>
 800db0c:	fb03 0002 	mla	r0, r3, r2, r0
 800db10:	e7ce      	b.n	800dab0 <__gethex+0xc4>
 800db12:	4631      	mov	r1, r6
 800db14:	e7de      	b.n	800dad4 <__gethex+0xe8>
 800db16:	eba6 0309 	sub.w	r3, r6, r9
 800db1a:	3b01      	subs	r3, #1
 800db1c:	4629      	mov	r1, r5
 800db1e:	2b07      	cmp	r3, #7
 800db20:	dc0a      	bgt.n	800db38 <__gethex+0x14c>
 800db22:	9801      	ldr	r0, [sp, #4]
 800db24:	f7fe f944 	bl	800bdb0 <_Balloc>
 800db28:	4604      	mov	r4, r0
 800db2a:	b940      	cbnz	r0, 800db3e <__gethex+0x152>
 800db2c:	4b5c      	ldr	r3, [pc, #368]	@ (800dca0 <__gethex+0x2b4>)
 800db2e:	4602      	mov	r2, r0
 800db30:	21e4      	movs	r1, #228	@ 0xe4
 800db32:	485c      	ldr	r0, [pc, #368]	@ (800dca4 <__gethex+0x2b8>)
 800db34:	f7ff fec0 	bl	800d8b8 <__assert_func>
 800db38:	3101      	adds	r1, #1
 800db3a:	105b      	asrs	r3, r3, #1
 800db3c:	e7ef      	b.n	800db1e <__gethex+0x132>
 800db3e:	f100 0a14 	add.w	sl, r0, #20
 800db42:	2300      	movs	r3, #0
 800db44:	4655      	mov	r5, sl
 800db46:	469b      	mov	fp, r3
 800db48:	45b1      	cmp	r9, r6
 800db4a:	d337      	bcc.n	800dbbc <__gethex+0x1d0>
 800db4c:	f845 bb04 	str.w	fp, [r5], #4
 800db50:	eba5 050a 	sub.w	r5, r5, sl
 800db54:	10ad      	asrs	r5, r5, #2
 800db56:	6125      	str	r5, [r4, #16]
 800db58:	4658      	mov	r0, fp
 800db5a:	f7fe fa1b 	bl	800bf94 <__hi0bits>
 800db5e:	016d      	lsls	r5, r5, #5
 800db60:	f8d8 6000 	ldr.w	r6, [r8]
 800db64:	1a2d      	subs	r5, r5, r0
 800db66:	42b5      	cmp	r5, r6
 800db68:	dd54      	ble.n	800dc14 <__gethex+0x228>
 800db6a:	1bad      	subs	r5, r5, r6
 800db6c:	4629      	mov	r1, r5
 800db6e:	4620      	mov	r0, r4
 800db70:	f7fe fda7 	bl	800c6c2 <__any_on>
 800db74:	4681      	mov	r9, r0
 800db76:	b178      	cbz	r0, 800db98 <__gethex+0x1ac>
 800db78:	1e6b      	subs	r3, r5, #1
 800db7a:	1159      	asrs	r1, r3, #5
 800db7c:	f003 021f 	and.w	r2, r3, #31
 800db80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800db84:	f04f 0901 	mov.w	r9, #1
 800db88:	fa09 f202 	lsl.w	r2, r9, r2
 800db8c:	420a      	tst	r2, r1
 800db8e:	d003      	beq.n	800db98 <__gethex+0x1ac>
 800db90:	454b      	cmp	r3, r9
 800db92:	dc36      	bgt.n	800dc02 <__gethex+0x216>
 800db94:	f04f 0902 	mov.w	r9, #2
 800db98:	4629      	mov	r1, r5
 800db9a:	4620      	mov	r0, r4
 800db9c:	f7ff febe 	bl	800d91c <rshift>
 800dba0:	442f      	add	r7, r5
 800dba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dba6:	42bb      	cmp	r3, r7
 800dba8:	da42      	bge.n	800dc30 <__gethex+0x244>
 800dbaa:	9801      	ldr	r0, [sp, #4]
 800dbac:	4621      	mov	r1, r4
 800dbae:	f7fe f93f 	bl	800be30 <_Bfree>
 800dbb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	25a3      	movs	r5, #163	@ 0xa3
 800dbba:	e793      	b.n	800dae4 <__gethex+0xf8>
 800dbbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dbc0:	2a2e      	cmp	r2, #46	@ 0x2e
 800dbc2:	d012      	beq.n	800dbea <__gethex+0x1fe>
 800dbc4:	2b20      	cmp	r3, #32
 800dbc6:	d104      	bne.n	800dbd2 <__gethex+0x1e6>
 800dbc8:	f845 bb04 	str.w	fp, [r5], #4
 800dbcc:	f04f 0b00 	mov.w	fp, #0
 800dbd0:	465b      	mov	r3, fp
 800dbd2:	7830      	ldrb	r0, [r6, #0]
 800dbd4:	9303      	str	r3, [sp, #12]
 800dbd6:	f7ff fef3 	bl	800d9c0 <__hexdig_fun>
 800dbda:	9b03      	ldr	r3, [sp, #12]
 800dbdc:	f000 000f 	and.w	r0, r0, #15
 800dbe0:	4098      	lsls	r0, r3
 800dbe2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dbe6:	3304      	adds	r3, #4
 800dbe8:	e7ae      	b.n	800db48 <__gethex+0x15c>
 800dbea:	45b1      	cmp	r9, r6
 800dbec:	d8ea      	bhi.n	800dbc4 <__gethex+0x1d8>
 800dbee:	492b      	ldr	r1, [pc, #172]	@ (800dc9c <__gethex+0x2b0>)
 800dbf0:	9303      	str	r3, [sp, #12]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	4630      	mov	r0, r6
 800dbf6:	f7ff fe27 	bl	800d848 <strncmp>
 800dbfa:	9b03      	ldr	r3, [sp, #12]
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d1e1      	bne.n	800dbc4 <__gethex+0x1d8>
 800dc00:	e7a2      	b.n	800db48 <__gethex+0x15c>
 800dc02:	1ea9      	subs	r1, r5, #2
 800dc04:	4620      	mov	r0, r4
 800dc06:	f7fe fd5c 	bl	800c6c2 <__any_on>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d0c2      	beq.n	800db94 <__gethex+0x1a8>
 800dc0e:	f04f 0903 	mov.w	r9, #3
 800dc12:	e7c1      	b.n	800db98 <__gethex+0x1ac>
 800dc14:	da09      	bge.n	800dc2a <__gethex+0x23e>
 800dc16:	1b75      	subs	r5, r6, r5
 800dc18:	4621      	mov	r1, r4
 800dc1a:	9801      	ldr	r0, [sp, #4]
 800dc1c:	462a      	mov	r2, r5
 800dc1e:	f7fe fb17 	bl	800c250 <__lshift>
 800dc22:	1b7f      	subs	r7, r7, r5
 800dc24:	4604      	mov	r4, r0
 800dc26:	f100 0a14 	add.w	sl, r0, #20
 800dc2a:	f04f 0900 	mov.w	r9, #0
 800dc2e:	e7b8      	b.n	800dba2 <__gethex+0x1b6>
 800dc30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dc34:	42bd      	cmp	r5, r7
 800dc36:	dd6f      	ble.n	800dd18 <__gethex+0x32c>
 800dc38:	1bed      	subs	r5, r5, r7
 800dc3a:	42ae      	cmp	r6, r5
 800dc3c:	dc34      	bgt.n	800dca8 <__gethex+0x2bc>
 800dc3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	d022      	beq.n	800dc8c <__gethex+0x2a0>
 800dc46:	2b03      	cmp	r3, #3
 800dc48:	d024      	beq.n	800dc94 <__gethex+0x2a8>
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d115      	bne.n	800dc7a <__gethex+0x28e>
 800dc4e:	42ae      	cmp	r6, r5
 800dc50:	d113      	bne.n	800dc7a <__gethex+0x28e>
 800dc52:	2e01      	cmp	r6, #1
 800dc54:	d10b      	bne.n	800dc6e <__gethex+0x282>
 800dc56:	9a02      	ldr	r2, [sp, #8]
 800dc58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	2301      	movs	r3, #1
 800dc60:	6123      	str	r3, [r4, #16]
 800dc62:	f8ca 3000 	str.w	r3, [sl]
 800dc66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc68:	2562      	movs	r5, #98	@ 0x62
 800dc6a:	601c      	str	r4, [r3, #0]
 800dc6c:	e73a      	b.n	800dae4 <__gethex+0xf8>
 800dc6e:	1e71      	subs	r1, r6, #1
 800dc70:	4620      	mov	r0, r4
 800dc72:	f7fe fd26 	bl	800c6c2 <__any_on>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d1ed      	bne.n	800dc56 <__gethex+0x26a>
 800dc7a:	9801      	ldr	r0, [sp, #4]
 800dc7c:	4621      	mov	r1, r4
 800dc7e:	f7fe f8d7 	bl	800be30 <_Bfree>
 800dc82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc84:	2300      	movs	r3, #0
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	2550      	movs	r5, #80	@ 0x50
 800dc8a:	e72b      	b.n	800dae4 <__gethex+0xf8>
 800dc8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1f3      	bne.n	800dc7a <__gethex+0x28e>
 800dc92:	e7e0      	b.n	800dc56 <__gethex+0x26a>
 800dc94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1dd      	bne.n	800dc56 <__gethex+0x26a>
 800dc9a:	e7ee      	b.n	800dc7a <__gethex+0x28e>
 800dc9c:	0800e80f 	.word	0x0800e80f
 800dca0:	0800e7a5 	.word	0x0800e7a5
 800dca4:	0800e866 	.word	0x0800e866
 800dca8:	1e6f      	subs	r7, r5, #1
 800dcaa:	f1b9 0f00 	cmp.w	r9, #0
 800dcae:	d130      	bne.n	800dd12 <__gethex+0x326>
 800dcb0:	b127      	cbz	r7, 800dcbc <__gethex+0x2d0>
 800dcb2:	4639      	mov	r1, r7
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f7fe fd04 	bl	800c6c2 <__any_on>
 800dcba:	4681      	mov	r9, r0
 800dcbc:	117a      	asrs	r2, r7, #5
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dcc4:	f007 071f 	and.w	r7, r7, #31
 800dcc8:	40bb      	lsls	r3, r7
 800dcca:	4213      	tst	r3, r2
 800dccc:	4629      	mov	r1, r5
 800dcce:	4620      	mov	r0, r4
 800dcd0:	bf18      	it	ne
 800dcd2:	f049 0902 	orrne.w	r9, r9, #2
 800dcd6:	f7ff fe21 	bl	800d91c <rshift>
 800dcda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dcde:	1b76      	subs	r6, r6, r5
 800dce0:	2502      	movs	r5, #2
 800dce2:	f1b9 0f00 	cmp.w	r9, #0
 800dce6:	d047      	beq.n	800dd78 <__gethex+0x38c>
 800dce8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d015      	beq.n	800dd1c <__gethex+0x330>
 800dcf0:	2b03      	cmp	r3, #3
 800dcf2:	d017      	beq.n	800dd24 <__gethex+0x338>
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d109      	bne.n	800dd0c <__gethex+0x320>
 800dcf8:	f019 0f02 	tst.w	r9, #2
 800dcfc:	d006      	beq.n	800dd0c <__gethex+0x320>
 800dcfe:	f8da 3000 	ldr.w	r3, [sl]
 800dd02:	ea49 0903 	orr.w	r9, r9, r3
 800dd06:	f019 0f01 	tst.w	r9, #1
 800dd0a:	d10e      	bne.n	800dd2a <__gethex+0x33e>
 800dd0c:	f045 0510 	orr.w	r5, r5, #16
 800dd10:	e032      	b.n	800dd78 <__gethex+0x38c>
 800dd12:	f04f 0901 	mov.w	r9, #1
 800dd16:	e7d1      	b.n	800dcbc <__gethex+0x2d0>
 800dd18:	2501      	movs	r5, #1
 800dd1a:	e7e2      	b.n	800dce2 <__gethex+0x2f6>
 800dd1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd1e:	f1c3 0301 	rsb	r3, r3, #1
 800dd22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d0f0      	beq.n	800dd0c <__gethex+0x320>
 800dd2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd2e:	f104 0314 	add.w	r3, r4, #20
 800dd32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dd36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd3a:	f04f 0c00 	mov.w	ip, #0
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd44:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd48:	d01b      	beq.n	800dd82 <__gethex+0x396>
 800dd4a:	3201      	adds	r2, #1
 800dd4c:	6002      	str	r2, [r0, #0]
 800dd4e:	2d02      	cmp	r5, #2
 800dd50:	f104 0314 	add.w	r3, r4, #20
 800dd54:	d13c      	bne.n	800ddd0 <__gethex+0x3e4>
 800dd56:	f8d8 2000 	ldr.w	r2, [r8]
 800dd5a:	3a01      	subs	r2, #1
 800dd5c:	42b2      	cmp	r2, r6
 800dd5e:	d109      	bne.n	800dd74 <__gethex+0x388>
 800dd60:	1171      	asrs	r1, r6, #5
 800dd62:	2201      	movs	r2, #1
 800dd64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd68:	f006 061f 	and.w	r6, r6, #31
 800dd6c:	fa02 f606 	lsl.w	r6, r2, r6
 800dd70:	421e      	tst	r6, r3
 800dd72:	d13a      	bne.n	800ddea <__gethex+0x3fe>
 800dd74:	f045 0520 	orr.w	r5, r5, #32
 800dd78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd7a:	601c      	str	r4, [r3, #0]
 800dd7c:	9b02      	ldr	r3, [sp, #8]
 800dd7e:	601f      	str	r7, [r3, #0]
 800dd80:	e6b0      	b.n	800dae4 <__gethex+0xf8>
 800dd82:	4299      	cmp	r1, r3
 800dd84:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd88:	d8d9      	bhi.n	800dd3e <__gethex+0x352>
 800dd8a:	68a3      	ldr	r3, [r4, #8]
 800dd8c:	459b      	cmp	fp, r3
 800dd8e:	db17      	blt.n	800ddc0 <__gethex+0x3d4>
 800dd90:	6861      	ldr	r1, [r4, #4]
 800dd92:	9801      	ldr	r0, [sp, #4]
 800dd94:	3101      	adds	r1, #1
 800dd96:	f7fe f80b 	bl	800bdb0 <_Balloc>
 800dd9a:	4681      	mov	r9, r0
 800dd9c:	b918      	cbnz	r0, 800dda6 <__gethex+0x3ba>
 800dd9e:	4b1a      	ldr	r3, [pc, #104]	@ (800de08 <__gethex+0x41c>)
 800dda0:	4602      	mov	r2, r0
 800dda2:	2184      	movs	r1, #132	@ 0x84
 800dda4:	e6c5      	b.n	800db32 <__gethex+0x146>
 800dda6:	6922      	ldr	r2, [r4, #16]
 800dda8:	3202      	adds	r2, #2
 800ddaa:	f104 010c 	add.w	r1, r4, #12
 800ddae:	0092      	lsls	r2, r2, #2
 800ddb0:	300c      	adds	r0, #12
 800ddb2:	f7ff fd6b 	bl	800d88c <memcpy>
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	9801      	ldr	r0, [sp, #4]
 800ddba:	f7fe f839 	bl	800be30 <_Bfree>
 800ddbe:	464c      	mov	r4, r9
 800ddc0:	6923      	ldr	r3, [r4, #16]
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ddc8:	6122      	str	r2, [r4, #16]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	615a      	str	r2, [r3, #20]
 800ddce:	e7be      	b.n	800dd4e <__gethex+0x362>
 800ddd0:	6922      	ldr	r2, [r4, #16]
 800ddd2:	455a      	cmp	r2, fp
 800ddd4:	dd0b      	ble.n	800ddee <__gethex+0x402>
 800ddd6:	2101      	movs	r1, #1
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f7ff fd9f 	bl	800d91c <rshift>
 800ddde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dde2:	3701      	adds	r7, #1
 800dde4:	42bb      	cmp	r3, r7
 800dde6:	f6ff aee0 	blt.w	800dbaa <__gethex+0x1be>
 800ddea:	2501      	movs	r5, #1
 800ddec:	e7c2      	b.n	800dd74 <__gethex+0x388>
 800ddee:	f016 061f 	ands.w	r6, r6, #31
 800ddf2:	d0fa      	beq.n	800ddea <__gethex+0x3fe>
 800ddf4:	4453      	add	r3, sl
 800ddf6:	f1c6 0620 	rsb	r6, r6, #32
 800ddfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ddfe:	f7fe f8c9 	bl	800bf94 <__hi0bits>
 800de02:	42b0      	cmp	r0, r6
 800de04:	dbe7      	blt.n	800ddd6 <__gethex+0x3ea>
 800de06:	e7f0      	b.n	800ddea <__gethex+0x3fe>
 800de08:	0800e7a5 	.word	0x0800e7a5

0800de0c <L_shift>:
 800de0c:	f1c2 0208 	rsb	r2, r2, #8
 800de10:	0092      	lsls	r2, r2, #2
 800de12:	b570      	push	{r4, r5, r6, lr}
 800de14:	f1c2 0620 	rsb	r6, r2, #32
 800de18:	6843      	ldr	r3, [r0, #4]
 800de1a:	6804      	ldr	r4, [r0, #0]
 800de1c:	fa03 f506 	lsl.w	r5, r3, r6
 800de20:	432c      	orrs	r4, r5
 800de22:	40d3      	lsrs	r3, r2
 800de24:	6004      	str	r4, [r0, #0]
 800de26:	f840 3f04 	str.w	r3, [r0, #4]!
 800de2a:	4288      	cmp	r0, r1
 800de2c:	d3f4      	bcc.n	800de18 <L_shift+0xc>
 800de2e:	bd70      	pop	{r4, r5, r6, pc}

0800de30 <__match>:
 800de30:	b530      	push	{r4, r5, lr}
 800de32:	6803      	ldr	r3, [r0, #0]
 800de34:	3301      	adds	r3, #1
 800de36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de3a:	b914      	cbnz	r4, 800de42 <__match+0x12>
 800de3c:	6003      	str	r3, [r0, #0]
 800de3e:	2001      	movs	r0, #1
 800de40:	bd30      	pop	{r4, r5, pc}
 800de42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800de4a:	2d19      	cmp	r5, #25
 800de4c:	bf98      	it	ls
 800de4e:	3220      	addls	r2, #32
 800de50:	42a2      	cmp	r2, r4
 800de52:	d0f0      	beq.n	800de36 <__match+0x6>
 800de54:	2000      	movs	r0, #0
 800de56:	e7f3      	b.n	800de40 <__match+0x10>

0800de58 <__hexnan>:
 800de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	680b      	ldr	r3, [r1, #0]
 800de5e:	6801      	ldr	r1, [r0, #0]
 800de60:	115e      	asrs	r6, r3, #5
 800de62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de66:	f013 031f 	ands.w	r3, r3, #31
 800de6a:	b087      	sub	sp, #28
 800de6c:	bf18      	it	ne
 800de6e:	3604      	addne	r6, #4
 800de70:	2500      	movs	r5, #0
 800de72:	1f37      	subs	r7, r6, #4
 800de74:	4682      	mov	sl, r0
 800de76:	4690      	mov	r8, r2
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800de7e:	46b9      	mov	r9, r7
 800de80:	463c      	mov	r4, r7
 800de82:	9502      	str	r5, [sp, #8]
 800de84:	46ab      	mov	fp, r5
 800de86:	784a      	ldrb	r2, [r1, #1]
 800de88:	1c4b      	adds	r3, r1, #1
 800de8a:	9303      	str	r3, [sp, #12]
 800de8c:	b342      	cbz	r2, 800dee0 <__hexnan+0x88>
 800de8e:	4610      	mov	r0, r2
 800de90:	9105      	str	r1, [sp, #20]
 800de92:	9204      	str	r2, [sp, #16]
 800de94:	f7ff fd94 	bl	800d9c0 <__hexdig_fun>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d151      	bne.n	800df40 <__hexnan+0xe8>
 800de9c:	9a04      	ldr	r2, [sp, #16]
 800de9e:	9905      	ldr	r1, [sp, #20]
 800dea0:	2a20      	cmp	r2, #32
 800dea2:	d818      	bhi.n	800ded6 <__hexnan+0x7e>
 800dea4:	9b02      	ldr	r3, [sp, #8]
 800dea6:	459b      	cmp	fp, r3
 800dea8:	dd13      	ble.n	800ded2 <__hexnan+0x7a>
 800deaa:	454c      	cmp	r4, r9
 800deac:	d206      	bcs.n	800debc <__hexnan+0x64>
 800deae:	2d07      	cmp	r5, #7
 800deb0:	dc04      	bgt.n	800debc <__hexnan+0x64>
 800deb2:	462a      	mov	r2, r5
 800deb4:	4649      	mov	r1, r9
 800deb6:	4620      	mov	r0, r4
 800deb8:	f7ff ffa8 	bl	800de0c <L_shift>
 800debc:	4544      	cmp	r4, r8
 800debe:	d952      	bls.n	800df66 <__hexnan+0x10e>
 800dec0:	2300      	movs	r3, #0
 800dec2:	f1a4 0904 	sub.w	r9, r4, #4
 800dec6:	f844 3c04 	str.w	r3, [r4, #-4]
 800deca:	f8cd b008 	str.w	fp, [sp, #8]
 800dece:	464c      	mov	r4, r9
 800ded0:	461d      	mov	r5, r3
 800ded2:	9903      	ldr	r1, [sp, #12]
 800ded4:	e7d7      	b.n	800de86 <__hexnan+0x2e>
 800ded6:	2a29      	cmp	r2, #41	@ 0x29
 800ded8:	d157      	bne.n	800df8a <__hexnan+0x132>
 800deda:	3102      	adds	r1, #2
 800dedc:	f8ca 1000 	str.w	r1, [sl]
 800dee0:	f1bb 0f00 	cmp.w	fp, #0
 800dee4:	d051      	beq.n	800df8a <__hexnan+0x132>
 800dee6:	454c      	cmp	r4, r9
 800dee8:	d206      	bcs.n	800def8 <__hexnan+0xa0>
 800deea:	2d07      	cmp	r5, #7
 800deec:	dc04      	bgt.n	800def8 <__hexnan+0xa0>
 800deee:	462a      	mov	r2, r5
 800def0:	4649      	mov	r1, r9
 800def2:	4620      	mov	r0, r4
 800def4:	f7ff ff8a 	bl	800de0c <L_shift>
 800def8:	4544      	cmp	r4, r8
 800defa:	d936      	bls.n	800df6a <__hexnan+0x112>
 800defc:	f1a8 0204 	sub.w	r2, r8, #4
 800df00:	4623      	mov	r3, r4
 800df02:	f853 1b04 	ldr.w	r1, [r3], #4
 800df06:	f842 1f04 	str.w	r1, [r2, #4]!
 800df0a:	429f      	cmp	r7, r3
 800df0c:	d2f9      	bcs.n	800df02 <__hexnan+0xaa>
 800df0e:	1b3b      	subs	r3, r7, r4
 800df10:	f023 0303 	bic.w	r3, r3, #3
 800df14:	3304      	adds	r3, #4
 800df16:	3401      	adds	r4, #1
 800df18:	3e03      	subs	r6, #3
 800df1a:	42b4      	cmp	r4, r6
 800df1c:	bf88      	it	hi
 800df1e:	2304      	movhi	r3, #4
 800df20:	4443      	add	r3, r8
 800df22:	2200      	movs	r2, #0
 800df24:	f843 2b04 	str.w	r2, [r3], #4
 800df28:	429f      	cmp	r7, r3
 800df2a:	d2fb      	bcs.n	800df24 <__hexnan+0xcc>
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	b91b      	cbnz	r3, 800df38 <__hexnan+0xe0>
 800df30:	4547      	cmp	r7, r8
 800df32:	d128      	bne.n	800df86 <__hexnan+0x12e>
 800df34:	2301      	movs	r3, #1
 800df36:	603b      	str	r3, [r7, #0]
 800df38:	2005      	movs	r0, #5
 800df3a:	b007      	add	sp, #28
 800df3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df40:	3501      	adds	r5, #1
 800df42:	2d08      	cmp	r5, #8
 800df44:	f10b 0b01 	add.w	fp, fp, #1
 800df48:	dd06      	ble.n	800df58 <__hexnan+0x100>
 800df4a:	4544      	cmp	r4, r8
 800df4c:	d9c1      	bls.n	800ded2 <__hexnan+0x7a>
 800df4e:	2300      	movs	r3, #0
 800df50:	f844 3c04 	str.w	r3, [r4, #-4]
 800df54:	2501      	movs	r5, #1
 800df56:	3c04      	subs	r4, #4
 800df58:	6822      	ldr	r2, [r4, #0]
 800df5a:	f000 000f 	and.w	r0, r0, #15
 800df5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df62:	6020      	str	r0, [r4, #0]
 800df64:	e7b5      	b.n	800ded2 <__hexnan+0x7a>
 800df66:	2508      	movs	r5, #8
 800df68:	e7b3      	b.n	800ded2 <__hexnan+0x7a>
 800df6a:	9b01      	ldr	r3, [sp, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d0dd      	beq.n	800df2c <__hexnan+0xd4>
 800df70:	f1c3 0320 	rsb	r3, r3, #32
 800df74:	f04f 32ff 	mov.w	r2, #4294967295
 800df78:	40da      	lsrs	r2, r3
 800df7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800df7e:	4013      	ands	r3, r2
 800df80:	f846 3c04 	str.w	r3, [r6, #-4]
 800df84:	e7d2      	b.n	800df2c <__hexnan+0xd4>
 800df86:	3f04      	subs	r7, #4
 800df88:	e7d0      	b.n	800df2c <__hexnan+0xd4>
 800df8a:	2004      	movs	r0, #4
 800df8c:	e7d5      	b.n	800df3a <__hexnan+0xe2>

0800df8e <__ascii_mbtowc>:
 800df8e:	b082      	sub	sp, #8
 800df90:	b901      	cbnz	r1, 800df94 <__ascii_mbtowc+0x6>
 800df92:	a901      	add	r1, sp, #4
 800df94:	b142      	cbz	r2, 800dfa8 <__ascii_mbtowc+0x1a>
 800df96:	b14b      	cbz	r3, 800dfac <__ascii_mbtowc+0x1e>
 800df98:	7813      	ldrb	r3, [r2, #0]
 800df9a:	600b      	str	r3, [r1, #0]
 800df9c:	7812      	ldrb	r2, [r2, #0]
 800df9e:	1e10      	subs	r0, r2, #0
 800dfa0:	bf18      	it	ne
 800dfa2:	2001      	movne	r0, #1
 800dfa4:	b002      	add	sp, #8
 800dfa6:	4770      	bx	lr
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	e7fb      	b.n	800dfa4 <__ascii_mbtowc+0x16>
 800dfac:	f06f 0001 	mvn.w	r0, #1
 800dfb0:	e7f8      	b.n	800dfa4 <__ascii_mbtowc+0x16>

0800dfb2 <_realloc_r>:
 800dfb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfb6:	4607      	mov	r7, r0
 800dfb8:	4614      	mov	r4, r2
 800dfba:	460d      	mov	r5, r1
 800dfbc:	b921      	cbnz	r1, 800dfc8 <_realloc_r+0x16>
 800dfbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	f7fd be68 	b.w	800bc98 <_malloc_r>
 800dfc8:	b92a      	cbnz	r2, 800dfd6 <_realloc_r+0x24>
 800dfca:	f7fd fdf1 	bl	800bbb0 <_free_r>
 800dfce:	4625      	mov	r5, r4
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd6:	f000 f840 	bl	800e05a <_malloc_usable_size_r>
 800dfda:	4284      	cmp	r4, r0
 800dfdc:	4606      	mov	r6, r0
 800dfde:	d802      	bhi.n	800dfe6 <_realloc_r+0x34>
 800dfe0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfe4:	d8f4      	bhi.n	800dfd0 <_realloc_r+0x1e>
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4638      	mov	r0, r7
 800dfea:	f7fd fe55 	bl	800bc98 <_malloc_r>
 800dfee:	4680      	mov	r8, r0
 800dff0:	b908      	cbnz	r0, 800dff6 <_realloc_r+0x44>
 800dff2:	4645      	mov	r5, r8
 800dff4:	e7ec      	b.n	800dfd0 <_realloc_r+0x1e>
 800dff6:	42b4      	cmp	r4, r6
 800dff8:	4622      	mov	r2, r4
 800dffa:	4629      	mov	r1, r5
 800dffc:	bf28      	it	cs
 800dffe:	4632      	movcs	r2, r6
 800e000:	f7ff fc44 	bl	800d88c <memcpy>
 800e004:	4629      	mov	r1, r5
 800e006:	4638      	mov	r0, r7
 800e008:	f7fd fdd2 	bl	800bbb0 <_free_r>
 800e00c:	e7f1      	b.n	800dff2 <_realloc_r+0x40>

0800e00e <__ascii_wctomb>:
 800e00e:	4603      	mov	r3, r0
 800e010:	4608      	mov	r0, r1
 800e012:	b141      	cbz	r1, 800e026 <__ascii_wctomb+0x18>
 800e014:	2aff      	cmp	r2, #255	@ 0xff
 800e016:	d904      	bls.n	800e022 <__ascii_wctomb+0x14>
 800e018:	228a      	movs	r2, #138	@ 0x8a
 800e01a:	601a      	str	r2, [r3, #0]
 800e01c:	f04f 30ff 	mov.w	r0, #4294967295
 800e020:	4770      	bx	lr
 800e022:	700a      	strb	r2, [r1, #0]
 800e024:	2001      	movs	r0, #1
 800e026:	4770      	bx	lr

0800e028 <fiprintf>:
 800e028:	b40e      	push	{r1, r2, r3}
 800e02a:	b503      	push	{r0, r1, lr}
 800e02c:	4601      	mov	r1, r0
 800e02e:	ab03      	add	r3, sp, #12
 800e030:	4805      	ldr	r0, [pc, #20]	@ (800e048 <fiprintf+0x20>)
 800e032:	f853 2b04 	ldr.w	r2, [r3], #4
 800e036:	6800      	ldr	r0, [r0, #0]
 800e038:	9301      	str	r3, [sp, #4]
 800e03a:	f000 f83f 	bl	800e0bc <_vfiprintf_r>
 800e03e:	b002      	add	sp, #8
 800e040:	f85d eb04 	ldr.w	lr, [sp], #4
 800e044:	b003      	add	sp, #12
 800e046:	4770      	bx	lr
 800e048:	20000108 	.word	0x20000108

0800e04c <abort>:
 800e04c:	b508      	push	{r3, lr}
 800e04e:	2006      	movs	r0, #6
 800e050:	f000 fa08 	bl	800e464 <raise>
 800e054:	2001      	movs	r0, #1
 800e056:	f7f3 fd23 	bl	8001aa0 <_exit>

0800e05a <_malloc_usable_size_r>:
 800e05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e05e:	1f18      	subs	r0, r3, #4
 800e060:	2b00      	cmp	r3, #0
 800e062:	bfbc      	itt	lt
 800e064:	580b      	ldrlt	r3, [r1, r0]
 800e066:	18c0      	addlt	r0, r0, r3
 800e068:	4770      	bx	lr

0800e06a <__sfputc_r>:
 800e06a:	6893      	ldr	r3, [r2, #8]
 800e06c:	3b01      	subs	r3, #1
 800e06e:	2b00      	cmp	r3, #0
 800e070:	b410      	push	{r4}
 800e072:	6093      	str	r3, [r2, #8]
 800e074:	da08      	bge.n	800e088 <__sfputc_r+0x1e>
 800e076:	6994      	ldr	r4, [r2, #24]
 800e078:	42a3      	cmp	r3, r4
 800e07a:	db01      	blt.n	800e080 <__sfputc_r+0x16>
 800e07c:	290a      	cmp	r1, #10
 800e07e:	d103      	bne.n	800e088 <__sfputc_r+0x1e>
 800e080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e084:	f000 b932 	b.w	800e2ec <__swbuf_r>
 800e088:	6813      	ldr	r3, [r2, #0]
 800e08a:	1c58      	adds	r0, r3, #1
 800e08c:	6010      	str	r0, [r2, #0]
 800e08e:	7019      	strb	r1, [r3, #0]
 800e090:	4608      	mov	r0, r1
 800e092:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <__sfputs_r>:
 800e098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09a:	4606      	mov	r6, r0
 800e09c:	460f      	mov	r7, r1
 800e09e:	4614      	mov	r4, r2
 800e0a0:	18d5      	adds	r5, r2, r3
 800e0a2:	42ac      	cmp	r4, r5
 800e0a4:	d101      	bne.n	800e0aa <__sfputs_r+0x12>
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	e007      	b.n	800e0ba <__sfputs_r+0x22>
 800e0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ae:	463a      	mov	r2, r7
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f7ff ffda 	bl	800e06a <__sfputc_r>
 800e0b6:	1c43      	adds	r3, r0, #1
 800e0b8:	d1f3      	bne.n	800e0a2 <__sfputs_r+0xa>
 800e0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0bc <_vfiprintf_r>:
 800e0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c0:	460d      	mov	r5, r1
 800e0c2:	b09d      	sub	sp, #116	@ 0x74
 800e0c4:	4614      	mov	r4, r2
 800e0c6:	4698      	mov	r8, r3
 800e0c8:	4606      	mov	r6, r0
 800e0ca:	b118      	cbz	r0, 800e0d4 <_vfiprintf_r+0x18>
 800e0cc:	6a03      	ldr	r3, [r0, #32]
 800e0ce:	b90b      	cbnz	r3, 800e0d4 <_vfiprintf_r+0x18>
 800e0d0:	f7fc fdaa 	bl	800ac28 <__sinit>
 800e0d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0d6:	07d9      	lsls	r1, r3, #31
 800e0d8:	d405      	bmi.n	800e0e6 <_vfiprintf_r+0x2a>
 800e0da:	89ab      	ldrh	r3, [r5, #12]
 800e0dc:	059a      	lsls	r2, r3, #22
 800e0de:	d402      	bmi.n	800e0e6 <_vfiprintf_r+0x2a>
 800e0e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0e2:	f7fc ff02 	bl	800aeea <__retarget_lock_acquire_recursive>
 800e0e6:	89ab      	ldrh	r3, [r5, #12]
 800e0e8:	071b      	lsls	r3, r3, #28
 800e0ea:	d501      	bpl.n	800e0f0 <_vfiprintf_r+0x34>
 800e0ec:	692b      	ldr	r3, [r5, #16]
 800e0ee:	b99b      	cbnz	r3, 800e118 <_vfiprintf_r+0x5c>
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	f000 f938 	bl	800e368 <__swsetup_r>
 800e0f8:	b170      	cbz	r0, 800e118 <_vfiprintf_r+0x5c>
 800e0fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0fc:	07dc      	lsls	r4, r3, #31
 800e0fe:	d504      	bpl.n	800e10a <_vfiprintf_r+0x4e>
 800e100:	f04f 30ff 	mov.w	r0, #4294967295
 800e104:	b01d      	add	sp, #116	@ 0x74
 800e106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10a:	89ab      	ldrh	r3, [r5, #12]
 800e10c:	0598      	lsls	r0, r3, #22
 800e10e:	d4f7      	bmi.n	800e100 <_vfiprintf_r+0x44>
 800e110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e112:	f7fc feeb 	bl	800aeec <__retarget_lock_release_recursive>
 800e116:	e7f3      	b.n	800e100 <_vfiprintf_r+0x44>
 800e118:	2300      	movs	r3, #0
 800e11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e11c:	2320      	movs	r3, #32
 800e11e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e122:	f8cd 800c 	str.w	r8, [sp, #12]
 800e126:	2330      	movs	r3, #48	@ 0x30
 800e128:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2d8 <_vfiprintf_r+0x21c>
 800e12c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e130:	f04f 0901 	mov.w	r9, #1
 800e134:	4623      	mov	r3, r4
 800e136:	469a      	mov	sl, r3
 800e138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e13c:	b10a      	cbz	r2, 800e142 <_vfiprintf_r+0x86>
 800e13e:	2a25      	cmp	r2, #37	@ 0x25
 800e140:	d1f9      	bne.n	800e136 <_vfiprintf_r+0x7a>
 800e142:	ebba 0b04 	subs.w	fp, sl, r4
 800e146:	d00b      	beq.n	800e160 <_vfiprintf_r+0xa4>
 800e148:	465b      	mov	r3, fp
 800e14a:	4622      	mov	r2, r4
 800e14c:	4629      	mov	r1, r5
 800e14e:	4630      	mov	r0, r6
 800e150:	f7ff ffa2 	bl	800e098 <__sfputs_r>
 800e154:	3001      	adds	r0, #1
 800e156:	f000 80a7 	beq.w	800e2a8 <_vfiprintf_r+0x1ec>
 800e15a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e15c:	445a      	add	r2, fp
 800e15e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e160:	f89a 3000 	ldrb.w	r3, [sl]
 800e164:	2b00      	cmp	r3, #0
 800e166:	f000 809f 	beq.w	800e2a8 <_vfiprintf_r+0x1ec>
 800e16a:	2300      	movs	r3, #0
 800e16c:	f04f 32ff 	mov.w	r2, #4294967295
 800e170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e174:	f10a 0a01 	add.w	sl, sl, #1
 800e178:	9304      	str	r3, [sp, #16]
 800e17a:	9307      	str	r3, [sp, #28]
 800e17c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e180:	931a      	str	r3, [sp, #104]	@ 0x68
 800e182:	4654      	mov	r4, sl
 800e184:	2205      	movs	r2, #5
 800e186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e18a:	4853      	ldr	r0, [pc, #332]	@ (800e2d8 <_vfiprintf_r+0x21c>)
 800e18c:	f7f2 f820 	bl	80001d0 <memchr>
 800e190:	9a04      	ldr	r2, [sp, #16]
 800e192:	b9d8      	cbnz	r0, 800e1cc <_vfiprintf_r+0x110>
 800e194:	06d1      	lsls	r1, r2, #27
 800e196:	bf44      	itt	mi
 800e198:	2320      	movmi	r3, #32
 800e19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e19e:	0713      	lsls	r3, r2, #28
 800e1a0:	bf44      	itt	mi
 800e1a2:	232b      	movmi	r3, #43	@ 0x2b
 800e1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1ae:	d015      	beq.n	800e1dc <_vfiprintf_r+0x120>
 800e1b0:	9a07      	ldr	r2, [sp, #28]
 800e1b2:	4654      	mov	r4, sl
 800e1b4:	2000      	movs	r0, #0
 800e1b6:	f04f 0c0a 	mov.w	ip, #10
 800e1ba:	4621      	mov	r1, r4
 800e1bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1c0:	3b30      	subs	r3, #48	@ 0x30
 800e1c2:	2b09      	cmp	r3, #9
 800e1c4:	d94b      	bls.n	800e25e <_vfiprintf_r+0x1a2>
 800e1c6:	b1b0      	cbz	r0, 800e1f6 <_vfiprintf_r+0x13a>
 800e1c8:	9207      	str	r2, [sp, #28]
 800e1ca:	e014      	b.n	800e1f6 <_vfiprintf_r+0x13a>
 800e1cc:	eba0 0308 	sub.w	r3, r0, r8
 800e1d0:	fa09 f303 	lsl.w	r3, r9, r3
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	9304      	str	r3, [sp, #16]
 800e1d8:	46a2      	mov	sl, r4
 800e1da:	e7d2      	b.n	800e182 <_vfiprintf_r+0xc6>
 800e1dc:	9b03      	ldr	r3, [sp, #12]
 800e1de:	1d19      	adds	r1, r3, #4
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	9103      	str	r1, [sp, #12]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	bfbb      	ittet	lt
 800e1e8:	425b      	neglt	r3, r3
 800e1ea:	f042 0202 	orrlt.w	r2, r2, #2
 800e1ee:	9307      	strge	r3, [sp, #28]
 800e1f0:	9307      	strlt	r3, [sp, #28]
 800e1f2:	bfb8      	it	lt
 800e1f4:	9204      	strlt	r2, [sp, #16]
 800e1f6:	7823      	ldrb	r3, [r4, #0]
 800e1f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1fa:	d10a      	bne.n	800e212 <_vfiprintf_r+0x156>
 800e1fc:	7863      	ldrb	r3, [r4, #1]
 800e1fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800e200:	d132      	bne.n	800e268 <_vfiprintf_r+0x1ac>
 800e202:	9b03      	ldr	r3, [sp, #12]
 800e204:	1d1a      	adds	r2, r3, #4
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	9203      	str	r2, [sp, #12]
 800e20a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e20e:	3402      	adds	r4, #2
 800e210:	9305      	str	r3, [sp, #20]
 800e212:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2e8 <_vfiprintf_r+0x22c>
 800e216:	7821      	ldrb	r1, [r4, #0]
 800e218:	2203      	movs	r2, #3
 800e21a:	4650      	mov	r0, sl
 800e21c:	f7f1 ffd8 	bl	80001d0 <memchr>
 800e220:	b138      	cbz	r0, 800e232 <_vfiprintf_r+0x176>
 800e222:	9b04      	ldr	r3, [sp, #16]
 800e224:	eba0 000a 	sub.w	r0, r0, sl
 800e228:	2240      	movs	r2, #64	@ 0x40
 800e22a:	4082      	lsls	r2, r0
 800e22c:	4313      	orrs	r3, r2
 800e22e:	3401      	adds	r4, #1
 800e230:	9304      	str	r3, [sp, #16]
 800e232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e236:	4829      	ldr	r0, [pc, #164]	@ (800e2dc <_vfiprintf_r+0x220>)
 800e238:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e23c:	2206      	movs	r2, #6
 800e23e:	f7f1 ffc7 	bl	80001d0 <memchr>
 800e242:	2800      	cmp	r0, #0
 800e244:	d03f      	beq.n	800e2c6 <_vfiprintf_r+0x20a>
 800e246:	4b26      	ldr	r3, [pc, #152]	@ (800e2e0 <_vfiprintf_r+0x224>)
 800e248:	bb1b      	cbnz	r3, 800e292 <_vfiprintf_r+0x1d6>
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	3307      	adds	r3, #7
 800e24e:	f023 0307 	bic.w	r3, r3, #7
 800e252:	3308      	adds	r3, #8
 800e254:	9303      	str	r3, [sp, #12]
 800e256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e258:	443b      	add	r3, r7
 800e25a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e25c:	e76a      	b.n	800e134 <_vfiprintf_r+0x78>
 800e25e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e262:	460c      	mov	r4, r1
 800e264:	2001      	movs	r0, #1
 800e266:	e7a8      	b.n	800e1ba <_vfiprintf_r+0xfe>
 800e268:	2300      	movs	r3, #0
 800e26a:	3401      	adds	r4, #1
 800e26c:	9305      	str	r3, [sp, #20]
 800e26e:	4619      	mov	r1, r3
 800e270:	f04f 0c0a 	mov.w	ip, #10
 800e274:	4620      	mov	r0, r4
 800e276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e27a:	3a30      	subs	r2, #48	@ 0x30
 800e27c:	2a09      	cmp	r2, #9
 800e27e:	d903      	bls.n	800e288 <_vfiprintf_r+0x1cc>
 800e280:	2b00      	cmp	r3, #0
 800e282:	d0c6      	beq.n	800e212 <_vfiprintf_r+0x156>
 800e284:	9105      	str	r1, [sp, #20]
 800e286:	e7c4      	b.n	800e212 <_vfiprintf_r+0x156>
 800e288:	fb0c 2101 	mla	r1, ip, r1, r2
 800e28c:	4604      	mov	r4, r0
 800e28e:	2301      	movs	r3, #1
 800e290:	e7f0      	b.n	800e274 <_vfiprintf_r+0x1b8>
 800e292:	ab03      	add	r3, sp, #12
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	462a      	mov	r2, r5
 800e298:	4b12      	ldr	r3, [pc, #72]	@ (800e2e4 <_vfiprintf_r+0x228>)
 800e29a:	a904      	add	r1, sp, #16
 800e29c:	4630      	mov	r0, r6
 800e29e:	f7fb fe73 	bl	8009f88 <_printf_float>
 800e2a2:	4607      	mov	r7, r0
 800e2a4:	1c78      	adds	r0, r7, #1
 800e2a6:	d1d6      	bne.n	800e256 <_vfiprintf_r+0x19a>
 800e2a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2aa:	07d9      	lsls	r1, r3, #31
 800e2ac:	d405      	bmi.n	800e2ba <_vfiprintf_r+0x1fe>
 800e2ae:	89ab      	ldrh	r3, [r5, #12]
 800e2b0:	059a      	lsls	r2, r3, #22
 800e2b2:	d402      	bmi.n	800e2ba <_vfiprintf_r+0x1fe>
 800e2b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2b6:	f7fc fe19 	bl	800aeec <__retarget_lock_release_recursive>
 800e2ba:	89ab      	ldrh	r3, [r5, #12]
 800e2bc:	065b      	lsls	r3, r3, #25
 800e2be:	f53f af1f 	bmi.w	800e100 <_vfiprintf_r+0x44>
 800e2c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2c4:	e71e      	b.n	800e104 <_vfiprintf_r+0x48>
 800e2c6:	ab03      	add	r3, sp, #12
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	462a      	mov	r2, r5
 800e2cc:	4b05      	ldr	r3, [pc, #20]	@ (800e2e4 <_vfiprintf_r+0x228>)
 800e2ce:	a904      	add	r1, sp, #16
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	f7fc f8f1 	bl	800a4b8 <_printf_i>
 800e2d6:	e7e4      	b.n	800e2a2 <_vfiprintf_r+0x1e6>
 800e2d8:	0800e811 	.word	0x0800e811
 800e2dc:	0800e81b 	.word	0x0800e81b
 800e2e0:	08009f89 	.word	0x08009f89
 800e2e4:	0800e099 	.word	0x0800e099
 800e2e8:	0800e817 	.word	0x0800e817

0800e2ec <__swbuf_r>:
 800e2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ee:	460e      	mov	r6, r1
 800e2f0:	4614      	mov	r4, r2
 800e2f2:	4605      	mov	r5, r0
 800e2f4:	b118      	cbz	r0, 800e2fe <__swbuf_r+0x12>
 800e2f6:	6a03      	ldr	r3, [r0, #32]
 800e2f8:	b90b      	cbnz	r3, 800e2fe <__swbuf_r+0x12>
 800e2fa:	f7fc fc95 	bl	800ac28 <__sinit>
 800e2fe:	69a3      	ldr	r3, [r4, #24]
 800e300:	60a3      	str	r3, [r4, #8]
 800e302:	89a3      	ldrh	r3, [r4, #12]
 800e304:	071a      	lsls	r2, r3, #28
 800e306:	d501      	bpl.n	800e30c <__swbuf_r+0x20>
 800e308:	6923      	ldr	r3, [r4, #16]
 800e30a:	b943      	cbnz	r3, 800e31e <__swbuf_r+0x32>
 800e30c:	4621      	mov	r1, r4
 800e30e:	4628      	mov	r0, r5
 800e310:	f000 f82a 	bl	800e368 <__swsetup_r>
 800e314:	b118      	cbz	r0, 800e31e <__swbuf_r+0x32>
 800e316:	f04f 37ff 	mov.w	r7, #4294967295
 800e31a:	4638      	mov	r0, r7
 800e31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	6922      	ldr	r2, [r4, #16]
 800e322:	1a98      	subs	r0, r3, r2
 800e324:	6963      	ldr	r3, [r4, #20]
 800e326:	b2f6      	uxtb	r6, r6
 800e328:	4283      	cmp	r3, r0
 800e32a:	4637      	mov	r7, r6
 800e32c:	dc05      	bgt.n	800e33a <__swbuf_r+0x4e>
 800e32e:	4621      	mov	r1, r4
 800e330:	4628      	mov	r0, r5
 800e332:	f7ff fa47 	bl	800d7c4 <_fflush_r>
 800e336:	2800      	cmp	r0, #0
 800e338:	d1ed      	bne.n	800e316 <__swbuf_r+0x2a>
 800e33a:	68a3      	ldr	r3, [r4, #8]
 800e33c:	3b01      	subs	r3, #1
 800e33e:	60a3      	str	r3, [r4, #8]
 800e340:	6823      	ldr	r3, [r4, #0]
 800e342:	1c5a      	adds	r2, r3, #1
 800e344:	6022      	str	r2, [r4, #0]
 800e346:	701e      	strb	r6, [r3, #0]
 800e348:	6962      	ldr	r2, [r4, #20]
 800e34a:	1c43      	adds	r3, r0, #1
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d004      	beq.n	800e35a <__swbuf_r+0x6e>
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	07db      	lsls	r3, r3, #31
 800e354:	d5e1      	bpl.n	800e31a <__swbuf_r+0x2e>
 800e356:	2e0a      	cmp	r6, #10
 800e358:	d1df      	bne.n	800e31a <__swbuf_r+0x2e>
 800e35a:	4621      	mov	r1, r4
 800e35c:	4628      	mov	r0, r5
 800e35e:	f7ff fa31 	bl	800d7c4 <_fflush_r>
 800e362:	2800      	cmp	r0, #0
 800e364:	d0d9      	beq.n	800e31a <__swbuf_r+0x2e>
 800e366:	e7d6      	b.n	800e316 <__swbuf_r+0x2a>

0800e368 <__swsetup_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	4b29      	ldr	r3, [pc, #164]	@ (800e410 <__swsetup_r+0xa8>)
 800e36c:	4605      	mov	r5, r0
 800e36e:	6818      	ldr	r0, [r3, #0]
 800e370:	460c      	mov	r4, r1
 800e372:	b118      	cbz	r0, 800e37c <__swsetup_r+0x14>
 800e374:	6a03      	ldr	r3, [r0, #32]
 800e376:	b90b      	cbnz	r3, 800e37c <__swsetup_r+0x14>
 800e378:	f7fc fc56 	bl	800ac28 <__sinit>
 800e37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e380:	0719      	lsls	r1, r3, #28
 800e382:	d422      	bmi.n	800e3ca <__swsetup_r+0x62>
 800e384:	06da      	lsls	r2, r3, #27
 800e386:	d407      	bmi.n	800e398 <__swsetup_r+0x30>
 800e388:	2209      	movs	r2, #9
 800e38a:	602a      	str	r2, [r5, #0]
 800e38c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e390:	81a3      	strh	r3, [r4, #12]
 800e392:	f04f 30ff 	mov.w	r0, #4294967295
 800e396:	e033      	b.n	800e400 <__swsetup_r+0x98>
 800e398:	0758      	lsls	r0, r3, #29
 800e39a:	d512      	bpl.n	800e3c2 <__swsetup_r+0x5a>
 800e39c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e39e:	b141      	cbz	r1, 800e3b2 <__swsetup_r+0x4a>
 800e3a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3a4:	4299      	cmp	r1, r3
 800e3a6:	d002      	beq.n	800e3ae <__swsetup_r+0x46>
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	f7fd fc01 	bl	800bbb0 <_free_r>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3b2:	89a3      	ldrh	r3, [r4, #12]
 800e3b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e3b8:	81a3      	strh	r3, [r4, #12]
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	6063      	str	r3, [r4, #4]
 800e3be:	6923      	ldr	r3, [r4, #16]
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	f043 0308 	orr.w	r3, r3, #8
 800e3c8:	81a3      	strh	r3, [r4, #12]
 800e3ca:	6923      	ldr	r3, [r4, #16]
 800e3cc:	b94b      	cbnz	r3, 800e3e2 <__swsetup_r+0x7a>
 800e3ce:	89a3      	ldrh	r3, [r4, #12]
 800e3d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e3d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3d8:	d003      	beq.n	800e3e2 <__swsetup_r+0x7a>
 800e3da:	4621      	mov	r1, r4
 800e3dc:	4628      	mov	r0, r5
 800e3de:	f000 f883 	bl	800e4e8 <__smakebuf_r>
 800e3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3e6:	f013 0201 	ands.w	r2, r3, #1
 800e3ea:	d00a      	beq.n	800e402 <__swsetup_r+0x9a>
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	60a2      	str	r2, [r4, #8]
 800e3f0:	6962      	ldr	r2, [r4, #20]
 800e3f2:	4252      	negs	r2, r2
 800e3f4:	61a2      	str	r2, [r4, #24]
 800e3f6:	6922      	ldr	r2, [r4, #16]
 800e3f8:	b942      	cbnz	r2, 800e40c <__swsetup_r+0xa4>
 800e3fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e3fe:	d1c5      	bne.n	800e38c <__swsetup_r+0x24>
 800e400:	bd38      	pop	{r3, r4, r5, pc}
 800e402:	0799      	lsls	r1, r3, #30
 800e404:	bf58      	it	pl
 800e406:	6962      	ldrpl	r2, [r4, #20]
 800e408:	60a2      	str	r2, [r4, #8]
 800e40a:	e7f4      	b.n	800e3f6 <__swsetup_r+0x8e>
 800e40c:	2000      	movs	r0, #0
 800e40e:	e7f7      	b.n	800e400 <__swsetup_r+0x98>
 800e410:	20000108 	.word	0x20000108

0800e414 <_raise_r>:
 800e414:	291f      	cmp	r1, #31
 800e416:	b538      	push	{r3, r4, r5, lr}
 800e418:	4605      	mov	r5, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	d904      	bls.n	800e428 <_raise_r+0x14>
 800e41e:	2316      	movs	r3, #22
 800e420:	6003      	str	r3, [r0, #0]
 800e422:	f04f 30ff 	mov.w	r0, #4294967295
 800e426:	bd38      	pop	{r3, r4, r5, pc}
 800e428:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e42a:	b112      	cbz	r2, 800e432 <_raise_r+0x1e>
 800e42c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e430:	b94b      	cbnz	r3, 800e446 <_raise_r+0x32>
 800e432:	4628      	mov	r0, r5
 800e434:	f000 f830 	bl	800e498 <_getpid_r>
 800e438:	4622      	mov	r2, r4
 800e43a:	4601      	mov	r1, r0
 800e43c:	4628      	mov	r0, r5
 800e43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e442:	f000 b817 	b.w	800e474 <_kill_r>
 800e446:	2b01      	cmp	r3, #1
 800e448:	d00a      	beq.n	800e460 <_raise_r+0x4c>
 800e44a:	1c59      	adds	r1, r3, #1
 800e44c:	d103      	bne.n	800e456 <_raise_r+0x42>
 800e44e:	2316      	movs	r3, #22
 800e450:	6003      	str	r3, [r0, #0]
 800e452:	2001      	movs	r0, #1
 800e454:	e7e7      	b.n	800e426 <_raise_r+0x12>
 800e456:	2100      	movs	r1, #0
 800e458:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e45c:	4620      	mov	r0, r4
 800e45e:	4798      	blx	r3
 800e460:	2000      	movs	r0, #0
 800e462:	e7e0      	b.n	800e426 <_raise_r+0x12>

0800e464 <raise>:
 800e464:	4b02      	ldr	r3, [pc, #8]	@ (800e470 <raise+0xc>)
 800e466:	4601      	mov	r1, r0
 800e468:	6818      	ldr	r0, [r3, #0]
 800e46a:	f7ff bfd3 	b.w	800e414 <_raise_r>
 800e46e:	bf00      	nop
 800e470:	20000108 	.word	0x20000108

0800e474 <_kill_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	4d07      	ldr	r5, [pc, #28]	@ (800e494 <_kill_r+0x20>)
 800e478:	2300      	movs	r3, #0
 800e47a:	4604      	mov	r4, r0
 800e47c:	4608      	mov	r0, r1
 800e47e:	4611      	mov	r1, r2
 800e480:	602b      	str	r3, [r5, #0]
 800e482:	f7f3 fafd 	bl	8001a80 <_kill>
 800e486:	1c43      	adds	r3, r0, #1
 800e488:	d102      	bne.n	800e490 <_kill_r+0x1c>
 800e48a:	682b      	ldr	r3, [r5, #0]
 800e48c:	b103      	cbz	r3, 800e490 <_kill_r+0x1c>
 800e48e:	6023      	str	r3, [r4, #0]
 800e490:	bd38      	pop	{r3, r4, r5, pc}
 800e492:	bf00      	nop
 800e494:	200021a8 	.word	0x200021a8

0800e498 <_getpid_r>:
 800e498:	f7f3 baea 	b.w	8001a70 <_getpid>

0800e49c <__swhatbuf_r>:
 800e49c:	b570      	push	{r4, r5, r6, lr}
 800e49e:	460c      	mov	r4, r1
 800e4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4a4:	2900      	cmp	r1, #0
 800e4a6:	b096      	sub	sp, #88	@ 0x58
 800e4a8:	4615      	mov	r5, r2
 800e4aa:	461e      	mov	r6, r3
 800e4ac:	da0d      	bge.n	800e4ca <__swhatbuf_r+0x2e>
 800e4ae:	89a3      	ldrh	r3, [r4, #12]
 800e4b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e4b4:	f04f 0100 	mov.w	r1, #0
 800e4b8:	bf14      	ite	ne
 800e4ba:	2340      	movne	r3, #64	@ 0x40
 800e4bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	6031      	str	r1, [r6, #0]
 800e4c4:	602b      	str	r3, [r5, #0]
 800e4c6:	b016      	add	sp, #88	@ 0x58
 800e4c8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ca:	466a      	mov	r2, sp
 800e4cc:	f000 f848 	bl	800e560 <_fstat_r>
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	dbec      	blt.n	800e4ae <__swhatbuf_r+0x12>
 800e4d4:	9901      	ldr	r1, [sp, #4]
 800e4d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4de:	4259      	negs	r1, r3
 800e4e0:	4159      	adcs	r1, r3
 800e4e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4e6:	e7eb      	b.n	800e4c0 <__swhatbuf_r+0x24>

0800e4e8 <__smakebuf_r>:
 800e4e8:	898b      	ldrh	r3, [r1, #12]
 800e4ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4ec:	079d      	lsls	r5, r3, #30
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	460c      	mov	r4, r1
 800e4f2:	d507      	bpl.n	800e504 <__smakebuf_r+0x1c>
 800e4f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e4f8:	6023      	str	r3, [r4, #0]
 800e4fa:	6123      	str	r3, [r4, #16]
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	6163      	str	r3, [r4, #20]
 800e500:	b003      	add	sp, #12
 800e502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e504:	ab01      	add	r3, sp, #4
 800e506:	466a      	mov	r2, sp
 800e508:	f7ff ffc8 	bl	800e49c <__swhatbuf_r>
 800e50c:	9f00      	ldr	r7, [sp, #0]
 800e50e:	4605      	mov	r5, r0
 800e510:	4639      	mov	r1, r7
 800e512:	4630      	mov	r0, r6
 800e514:	f7fd fbc0 	bl	800bc98 <_malloc_r>
 800e518:	b948      	cbnz	r0, 800e52e <__smakebuf_r+0x46>
 800e51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e51e:	059a      	lsls	r2, r3, #22
 800e520:	d4ee      	bmi.n	800e500 <__smakebuf_r+0x18>
 800e522:	f023 0303 	bic.w	r3, r3, #3
 800e526:	f043 0302 	orr.w	r3, r3, #2
 800e52a:	81a3      	strh	r3, [r4, #12]
 800e52c:	e7e2      	b.n	800e4f4 <__smakebuf_r+0xc>
 800e52e:	89a3      	ldrh	r3, [r4, #12]
 800e530:	6020      	str	r0, [r4, #0]
 800e532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e536:	81a3      	strh	r3, [r4, #12]
 800e538:	9b01      	ldr	r3, [sp, #4]
 800e53a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e53e:	b15b      	cbz	r3, 800e558 <__smakebuf_r+0x70>
 800e540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e544:	4630      	mov	r0, r6
 800e546:	f000 f81d 	bl	800e584 <_isatty_r>
 800e54a:	b128      	cbz	r0, 800e558 <__smakebuf_r+0x70>
 800e54c:	89a3      	ldrh	r3, [r4, #12]
 800e54e:	f023 0303 	bic.w	r3, r3, #3
 800e552:	f043 0301 	orr.w	r3, r3, #1
 800e556:	81a3      	strh	r3, [r4, #12]
 800e558:	89a3      	ldrh	r3, [r4, #12]
 800e55a:	431d      	orrs	r5, r3
 800e55c:	81a5      	strh	r5, [r4, #12]
 800e55e:	e7cf      	b.n	800e500 <__smakebuf_r+0x18>

0800e560 <_fstat_r>:
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	4d07      	ldr	r5, [pc, #28]	@ (800e580 <_fstat_r+0x20>)
 800e564:	2300      	movs	r3, #0
 800e566:	4604      	mov	r4, r0
 800e568:	4608      	mov	r0, r1
 800e56a:	4611      	mov	r1, r2
 800e56c:	602b      	str	r3, [r5, #0]
 800e56e:	f7f3 fae7 	bl	8001b40 <_fstat>
 800e572:	1c43      	adds	r3, r0, #1
 800e574:	d102      	bne.n	800e57c <_fstat_r+0x1c>
 800e576:	682b      	ldr	r3, [r5, #0]
 800e578:	b103      	cbz	r3, 800e57c <_fstat_r+0x1c>
 800e57a:	6023      	str	r3, [r4, #0]
 800e57c:	bd38      	pop	{r3, r4, r5, pc}
 800e57e:	bf00      	nop
 800e580:	200021a8 	.word	0x200021a8

0800e584 <_isatty_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4d06      	ldr	r5, [pc, #24]	@ (800e5a0 <_isatty_r+0x1c>)
 800e588:	2300      	movs	r3, #0
 800e58a:	4604      	mov	r4, r0
 800e58c:	4608      	mov	r0, r1
 800e58e:	602b      	str	r3, [r5, #0]
 800e590:	f7f3 fae6 	bl	8001b60 <_isatty>
 800e594:	1c43      	adds	r3, r0, #1
 800e596:	d102      	bne.n	800e59e <_isatty_r+0x1a>
 800e598:	682b      	ldr	r3, [r5, #0]
 800e59a:	b103      	cbz	r3, 800e59e <_isatty_r+0x1a>
 800e59c:	6023      	str	r3, [r4, #0]
 800e59e:	bd38      	pop	{r3, r4, r5, pc}
 800e5a0:	200021a8 	.word	0x200021a8

0800e5a4 <_init>:
 800e5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a6:	bf00      	nop
 800e5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5aa:	bc08      	pop	{r3}
 800e5ac:	469e      	mov	lr, r3
 800e5ae:	4770      	bx	lr

0800e5b0 <_fini>:
 800e5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b2:	bf00      	nop
 800e5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5b6:	bc08      	pop	{r3}
 800e5b8:	469e      	mov	lr, r3
 800e5ba:	4770      	bx	lr
