
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012854  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005630  080129e8  080129e8  000139e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018018  08018018  0001a2d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018018  08018018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018020  08018020  0001a2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018020  08018020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018024  08018024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  08018028  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001a2d0  2**0
                  CONTENTS
 10 .bss          0001ee64  200002d0  200002d0  0001a2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001f134  2001f134  0001a2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001a2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025c31  00000000  00000000  0001a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c0c  00000000  00000000  0003ff31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e58  00000000  00000000  00045b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016b7  00000000  00000000  00047998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026141  00000000  00000000  0004904f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024ba6  00000000  00000000  0006f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c76  00000000  00000000  00093d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  001679ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097bc  00000000  00000000  00167a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00171224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  00171294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  001720d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080129cc 	.word	0x080129cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	080129cc 	.word	0x080129cc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
    if (USB_CONNECTED()) {
 8001048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104c:	4810      	ldr	r0, [pc, #64]	@ (8001090 <SendUSBDebugMessage+0x50>)
 800104e:	f003 fab5 	bl	80045bc <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d017      	beq.n	8001088 <SendUSBDebugMessage+0x48>
        snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 8001058:	f002 fcca 	bl	80039f0 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4613      	mov	r3, r2
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <SendUSBDebugMessage+0x54>)
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	480b      	ldr	r0, [pc, #44]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800106c:	f00e f9d6 	bl	800f41c <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <SendUSBDebugMessage+0x58>)
 8001072:	f7ff f90d 	bl	8000290 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29b      	uxth	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800107e:	f00b fd71 	bl	800cb64 <CDC_Transmit_FS>
        HAL_Delay(10); // Задержка для стабильной работы USB
 8001082:	200a      	movs	r0, #10
 8001084:	f002 fcc0 	bl	8003a08 <HAL_Delay>
    }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020000 	.word	0x40020000
 8001094:	080129e8 	.word	0x080129e8
 8001098:	20000438 	.word	0x20000438

0800109c <GenerateStartPulse>:

/**
  * @brief Генерация стартового импульса для ПЛИС
  * @note Импульс длительностью 200 нс на пине PD6
  */
void GenerateStartPulse(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
    // Устанавливаем высокий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	@ 0x40
 80010a6:	4812      	ldr	r0, [pc, #72]	@ (80010f0 <GenerateStartPulse+0x54>)
 80010a8:	f003 faa0 	bl	80045ec <HAL_GPIO_WritePin>

    // Задержка для формирования импульса 200 нс
    for(volatile int i = 0; i < 34; i++);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	e002      	b.n	80010b8 <GenerateStartPulse+0x1c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b21      	cmp	r3, #33	@ 0x21
 80010bc:	ddf9      	ble.n	80010b2 <GenerateStartPulse+0x16>

    // Устанавливаем низкий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2140      	movs	r1, #64	@ 0x40
 80010c2:	480b      	ldr	r0, [pc, #44]	@ (80010f0 <GenerateStartPulse+0x54>)
 80010c4:	f003 fa92 	bl	80045ec <HAL_GPIO_WritePin>

    // Загружаем параметры из памяти и запускаем расчет
    if (!parameters_initialized) {
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <GenerateStartPulse+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	f083 0301 	eor.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <GenerateStartPulse+0x3e>
        LoadParametersFromFlash();
 80010d6:	f001 fef9 	bl	8002ecc <LoadParametersFromFlash>
    }
    calculate_thickness_requested = true;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <GenerateStartPulse+0x5c>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]

    SendUSBDebugMessage("Start pulse generated and calculation requested");
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <GenerateStartPulse+0x60>)
 80010e2:	f7ff ffad 	bl	8001040 <SendUSBDebugMessage>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	20000a64 	.word	0x20000a64
 80010f8:	20000a65 	.word	0x20000a65
 80010fc:	080129f4 	.word	0x080129f4

08001100 <ProcessUSBCommand>:

/**
  * @brief Обработка команд от USB
  * @param cmd Полученная команда
  */
void ProcessUSBCommand(uint8_t cmd) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b31      	cmp	r3, #49	@ 0x31
 800110e:	d102      	bne.n	8001116 <ProcessUSBCommand+0x16>
        case '1': // Стартовая команда
            GenerateStartPulse();
 8001110:	f7ff ffc4 	bl	800109c <GenerateStartPulse>
            break;
 8001114:	e003      	b.n	800111e <ProcessUSBCommand+0x1e>

        default:
            // Неизвестная команда
            SendUSBDebugMessage("Unknown command received");
 8001116:	4804      	ldr	r0, [pc, #16]	@ (8001128 <ProcessUSBCommand+0x28>)
 8001118:	f7ff ff92 	bl	8001040 <SendUSBDebugMessage>
            break;
 800111c:	bf00      	nop
    }
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08012a24 	.word	0x08012a24

0800112c <ParseParameters>:

/**
  * @brief Парсинг параметров из строки
  * @param params_str Строка с параметрами (после "SETPARAMS=")
  */
void ParseParameters(const char* params_str) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b0d2      	sub	sp, #328	@ 0x148
 8001130:	af00      	add	r7, sp, #0
 8001132:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001136:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800113a:	6018      	str	r0, [r3, #0]
    char buffer[USB_RX_BUFFER_SIZE];
    strncpy(buffer, params_str, sizeof(buffer) - 1);
 800113c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001140:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001144:	f107 000c 	add.w	r0, r7, #12
 8001148:	f240 122b 	movw	r2, #299	@ 0x12b
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	f00e fa55 	bl	800f5fc <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 8001152:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001156:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800115a:	2200      	movs	r2, #0
 800115c:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b

    // Загружаем текущие параметры (если еще не инициализированы)
    if (!parameters_initialized) {
 8001160:	4bbc      	ldr	r3, [pc, #752]	@ (8001454 <ParseParameters+0x328>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f083 0301 	eor.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <ParseParameters+0x46>
        LoadParametersFromFlash();
 800116e:	f001 fead 	bl	8002ecc <LoadParametersFromFlash>
    }

    char* token = strtok(buffer, "|");
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	49b8      	ldr	r1, [pc, #736]	@ (8001458 <ParseParameters+0x32c>)
 8001178:	4618      	mov	r0, r3
 800117a:	f00e fa53 	bl	800f624 <strtok>
 800117e:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

    while (token != NULL) {
 8001182:	e152      	b.n	800142a <ParseParameters+0x2fe>
        char* equals_sign = strchr(token, '=');
 8001184:	213d      	movs	r1, #61	@ 0x3d
 8001186:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 800118a:	f00e fa18 	bl	800f5be <strchr>
 800118e:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
        if (equals_sign != NULL) {
 8001192:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8141 	beq.w	800141e <ParseParameters+0x2f2>
            *equals_sign = '\0'; // Разделяем на имя и значение
 800119c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 80011a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80011a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            char* param_value = equals_sign + 1;
 80011ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80011b0:	3301      	adds	r3, #1
 80011b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

            // Парсим параметры
            if (strcmp(param_name, "wave_speed") == 0) {
 80011b6:	49a9      	ldr	r1, [pc, #676]	@ (800145c <ParseParameters+0x330>)
 80011b8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80011bc:	f7ff f808 	bl	80001d0 <strcmp>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10d      	bne.n	80011e2 <ParseParameters+0xb6>
                params.wave_speed = atof(param_value);
 80011c6:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80011ca:	f00c faf3 	bl	800d7b4 <atof>
 80011ce:	ec53 2b10 	vmov	r2, r3, d0
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fd17 	bl	8000c08 <__aeabi_d2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	4aa0      	ldr	r2, [pc, #640]	@ (8001460 <ParseParameters+0x334>)
 80011de:	6053      	str	r3, [r2, #4]
 80011e0:	e11d      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold") == 0) {
 80011e2:	49a0      	ldr	r1, [pc, #640]	@ (8001464 <ParseParameters+0x338>)
 80011e4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80011e8:	f7fe fff2 	bl	80001d0 <strcmp>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10d      	bne.n	800120e <ParseParameters+0xe2>
                params.threshold = atof(param_value);
 80011f2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80011f6:	f00c fadd 	bl	800d7b4 <atof>
 80011fa:	ec53 2b10 	vmov	r2, r3, d0
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fd01 	bl	8000c08 <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	4a95      	ldr	r2, [pc, #596]	@ (8001460 <ParseParameters+0x334>)
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	e107      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold_zero_crossing") == 0) {
 800120e:	4996      	ldr	r1, [pc, #600]	@ (8001468 <ParseParameters+0x33c>)
 8001210:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001214:	f7fe ffdc 	bl	80001d0 <strcmp>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10d      	bne.n	800123a <ParseParameters+0x10e>
                params.threshold_zero_crossing = atof(param_value);
 800121e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001222:	f00c fac7 	bl	800d7b4 <atof>
 8001226:	ec53 2b10 	vmov	r2, r3, d0
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fceb 	bl	8000c08 <__aeabi_d2f>
 8001232:	4603      	mov	r3, r0
 8001234:	4a8a      	ldr	r2, [pc, #552]	@ (8001460 <ParseParameters+0x334>)
 8001236:	61d3      	str	r3, [r2, #28]
 8001238:	e0f1      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_index") == 0) {
 800123a:	498c      	ldr	r1, [pc, #560]	@ (800146c <ParseParameters+0x340>)
 800123c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001240:	f7fe ffc6 	bl	80001d0 <strcmp>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d108      	bne.n	800125c <ParseParameters+0x130>
                params.start_index = atoi(param_value);
 800124a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800124e:	f00c fab4 	bl	800d7ba <atoi>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b82      	ldr	r3, [pc, #520]	@ (8001460 <ParseParameters+0x334>)
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e0e0      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "probe_length") == 0) {
 800125c:	4984      	ldr	r1, [pc, #528]	@ (8001470 <ParseParameters+0x344>)
 800125e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001262:	f7fe ffb5 	bl	80001d0 <strcmp>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d108      	bne.n	800127e <ParseParameters+0x152>
                params.probe_length = atoi(param_value);
 800126c:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001270:	f00c faa3 	bl	800d7ba <atoi>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b79      	ldr	r3, [pc, #484]	@ (8001460 <ParseParameters+0x334>)
 800127a:	621a      	str	r2, [r3, #32]
 800127c:	e0cf      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left1") == 0) {
 800127e:	497d      	ldr	r1, [pc, #500]	@ (8001474 <ParseParameters+0x348>)
 8001280:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001284:	f7fe ffa4 	bl	80001d0 <strcmp>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d108      	bne.n	80012a0 <ParseParameters+0x174>
                params.first_left_strobe = atoi(param_value);
 800128e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001292:	f00c fa92 	bl	800d7ba <atoi>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b71      	ldr	r3, [pc, #452]	@ (8001460 <ParseParameters+0x334>)
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e0be      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right1") == 0) {
 80012a0:	4975      	ldr	r1, [pc, #468]	@ (8001478 <ParseParameters+0x34c>)
 80012a2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012a6:	f7fe ff93 	bl	80001d0 <strcmp>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d108      	bne.n	80012c2 <ParseParameters+0x196>
                params.first_right_strobe = atoi(param_value);
 80012b0:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012b4:	f00c fa81 	bl	800d7ba <atoi>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b68      	ldr	r3, [pc, #416]	@ (8001460 <ParseParameters+0x334>)
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	e0ad      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left2") == 0) {
 80012c2:	496e      	ldr	r1, [pc, #440]	@ (800147c <ParseParameters+0x350>)
 80012c4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012c8:	f7fe ff82 	bl	80001d0 <strcmp>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d108      	bne.n	80012e4 <ParseParameters+0x1b8>
                params.second_left_strobe = atoi(param_value);
 80012d2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012d6:	f00c fa70 	bl	800d7ba <atoi>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b60      	ldr	r3, [pc, #384]	@ (8001460 <ParseParameters+0x334>)
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	e09c      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right2") == 0) {
 80012e4:	4966      	ldr	r1, [pc, #408]	@ (8001480 <ParseParameters+0x354>)
 80012e6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012ea:	f7fe ff71 	bl	80001d0 <strcmp>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d108      	bne.n	8001306 <ParseParameters+0x1da>
                params.second_right_strobe = atoi(param_value);
 80012f4:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012f8:	f00c fa5f 	bl	800d7ba <atoi>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b57      	ldr	r3, [pc, #348]	@ (8001460 <ParseParameters+0x334>)
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	e08b      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "method") == 0) {
 8001306:	495f      	ldr	r1, [pc, #380]	@ (8001484 <ParseParameters+0x358>)
 8001308:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800130c:	f7fe ff60 	bl	80001d0 <strcmp>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d108      	bne.n	8001328 <ParseParameters+0x1fc>
                params.method = atoi(param_value);
 8001316:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800131a:	f00c fa4e 	bl	800d7ba <atoi>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b4f      	ldr	r3, [pc, #316]	@ (8001460 <ParseParameters+0x334>)
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
 8001326:	e07a      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "end_index") == 0) {
 8001328:	4957      	ldr	r1, [pc, #348]	@ (8001488 <ParseParameters+0x35c>)
 800132a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800132e:	f7fe ff4f 	bl	80001d0 <strcmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d108      	bne.n	800134a <ParseParameters+0x21e>
                params.end_index = atoi(param_value);
 8001338:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800133c:	f00c fa3d 	bl	800d7ba <atoi>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b46      	ldr	r3, [pc, #280]	@ (8001460 <ParseParameters+0x334>)
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
 8001348:	e069      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "cycle_number") == 0) {
 800134a:	4950      	ldr	r1, [pc, #320]	@ (800148c <ParseParameters+0x360>)
 800134c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001350:	f7fe ff3e 	bl	80001d0 <strcmp>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d108      	bne.n	800136c <ParseParameters+0x240>
                params.cycle_number = atoi(param_value);
 800135a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800135e:	f00c fa2c 	bl	800d7ba <atoi>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b3e      	ldr	r3, [pc, #248]	@ (8001460 <ParseParameters+0x334>)
 8001368:	62da      	str	r2, [r3, #44]	@ 0x2c
 800136a:	e058      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "sensor_number") == 0) {
 800136c:	4948      	ldr	r1, [pc, #288]	@ (8001490 <ParseParameters+0x364>)
 800136e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001372:	f7fe ff2d 	bl	80001d0 <strcmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10a      	bne.n	8001392 <ParseParameters+0x266>
                strncpy(params.sensor_number, param_value, sizeof(params.sensor_number) - 1);
 800137c:	2204      	movs	r2, #4
 800137e:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8001382:	4844      	ldr	r0, [pc, #272]	@ (8001494 <ParseParameters+0x368>)
 8001384:	f00e f93a 	bl	800f5fc <strncpy>
                params.sensor_number[sizeof(params.sensor_number) - 1] = '\0';
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <ParseParameters+0x334>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001390:	e045      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "gain") == 0) {
 8001392:	4941      	ldr	r1, [pc, #260]	@ (8001498 <ParseParameters+0x36c>)
 8001394:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001398:	f7fe ff1a 	bl	80001d0 <strcmp>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10d      	bne.n	80013be <ParseParameters+0x292>
                params.gain = atof(param_value);
 80013a2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013a6:	f00c fa05 	bl	800d7b4 <atof>
 80013aa:	ec53 2b10 	vmov	r2, r3, d0
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fc29 	bl	8000c08 <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <ParseParameters+0x334>)
 80013ba:	6393      	str	r3, [r2, #56]	@ 0x38
 80013bc:	e02f      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_date") == 0) {
 80013be:	4937      	ldr	r1, [pc, #220]	@ (800149c <ParseParameters+0x370>)
 80013c0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013c4:	f7fe ff04 	bl	80001d0 <strcmp>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <ParseParameters+0x2bc>
                // Сохраняем start_date во временную переменную (НЕ во Flash)
                strncpy(start_date, param_value, sizeof(start_date) - 1);
 80013ce:	2213      	movs	r2, #19
 80013d0:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80013d4:	4832      	ldr	r0, [pc, #200]	@ (80014a0 <ParseParameters+0x374>)
 80013d6:	f00e f911 	bl	800f5fc <strncpy>
                start_date[sizeof(start_date) - 1] = '\0';
 80013da:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <ParseParameters+0x374>)
 80013dc:	2200      	movs	r2, #0
 80013de:	74da      	strb	r2, [r3, #19]
                SendUSBDebugMessage("Start date parsed (not saved to Flash)");
 80013e0:	4830      	ldr	r0, [pc, #192]	@ (80014a4 <ParseParameters+0x378>)
 80013e2:	f7ff fe2d 	bl	8001040 <SendUSBDebugMessage>
 80013e6:	e01a      	b.n	800141e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "period") == 0) {
 80013e8:	492f      	ldr	r1, [pc, #188]	@ (80014a8 <ParseParameters+0x37c>)
 80013ea:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013ee:	f7fe feef 	bl	80001d0 <strcmp>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d112      	bne.n	800141e <ParseParameters+0x2f2>
                // Сохраняем period во временную переменную (НЕ во Flash)
                period = atoi(param_value);
 80013f8:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013fc:	f00c f9dd 	bl	800d7ba <atoi>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <ParseParameters+0x380>)
 8001406:	601a      	str	r2, [r3, #0]
                snprintf(usb_msg, sizeof(usb_msg), "Period parsed: %lu (not saved to Flash)", period);
 8001408:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <ParseParameters+0x380>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a28      	ldr	r2, [pc, #160]	@ (80014b0 <ParseParameters+0x384>)
 800140e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001412:	4828      	ldr	r0, [pc, #160]	@ (80014b4 <ParseParameters+0x388>)
 8001414:	f00e f802 	bl	800f41c <sniprintf>
                SendUSBDebugMessage(usb_msg);
 8001418:	4826      	ldr	r0, [pc, #152]	@ (80014b4 <ParseParameters+0x388>)
 800141a:	f7ff fe11 	bl	8001040 <SendUSBDebugMessage>
            }
        }
        token = strtok(NULL, "|");
 800141e:	490e      	ldr	r1, [pc, #56]	@ (8001458 <ParseParameters+0x32c>)
 8001420:	2000      	movs	r0, #0
 8001422:	f00e f8ff 	bl	800f624 <strtok>
 8001426:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    while (token != NULL) {
 800142a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800142e:	2b00      	cmp	r3, #0
 8001430:	f47f aea8 	bne.w	8001184 <ParseParameters+0x58>
    }

    // Сохраняем обновленные параметры в Flash (без start_date и period)
    SaveParametersToFlash();
 8001434:	f001 fd82 	bl	8002f3c <SaveParametersToFlash>

    // ОТПРАВЛЯЕМ ДАННЫЕ НА ДЕЖУРНЫЙ МК ПО UART
    SendDateTimeToBackupMCU();
 8001438:	f000 f8cc 	bl	80015d4 <SendDateTimeToBackupMCU>

    // Устанавливаем флаг для запуска расчета
    calculate_thickness_requested = true;
 800143c:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <ParseParameters+0x38c>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("Parameters parsed and saved successfully - calculation requested");
 8001442:	481e      	ldr	r0, [pc, #120]	@ (80014bc <ParseParameters+0x390>)
 8001444:	f7ff fdfc 	bl	8001040 <SendUSBDebugMessage>
}
 8001448:	bf00      	nop
 800144a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000a64 	.word	0x20000a64
 8001458:	08012a40 	.word	0x08012a40
 800145c:	08012a44 	.word	0x08012a44
 8001460:	20000a24 	.word	0x20000a24
 8001464:	08012a50 	.word	0x08012a50
 8001468:	08012a5c 	.word	0x08012a5c
 800146c:	08012a74 	.word	0x08012a74
 8001470:	08012a80 	.word	0x08012a80
 8001474:	08012a90 	.word	0x08012a90
 8001478:	08012aa0 	.word	0x08012aa0
 800147c:	08012ab0 	.word	0x08012ab0
 8001480:	08012ac0 	.word	0x08012ac0
 8001484:	08012ad0 	.word	0x08012ad0
 8001488:	08012ad8 	.word	0x08012ad8
 800148c:	08012ae4 	.word	0x08012ae4
 8001490:	08012af4 	.word	0x08012af4
 8001494:	20000a54 	.word	0x20000a54
 8001498:	08012b04 	.word	0x08012b04
 800149c:	08012b0c 	.word	0x08012b0c
 80014a0:	20000838 	.word	0x20000838
 80014a4:	08012b18 	.word	0x08012b18
 80014a8:	08012b40 	.word	0x08012b40
 80014ac:	2000084c 	.word	0x2000084c
 80014b0:	08012b48 	.word	0x08012b48
 80014b4:	20000438 	.word	0x20000438
 80014b8:	20000a65 	.word	0x20000a65
 80014bc:	08012b70 	.word	0x08012b70

080014c0 <SendParametersResponse>:

/**
  * @brief Отправка текущих параметров обратно в приложение
  */
void SendParametersResponse(void) {
 80014c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014c4:	b09d      	sub	sp, #116	@ 0x74
 80014c6:	af14      	add	r7, sp, #80	@ 0x50
    if (!parameters_initialized) {
 80014c8:	4b3a      	ldr	r3, [pc, #232]	@ (80015b4 <SendParametersResponse+0xf4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	f083 0301 	eor.w	r3, r3, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <SendParametersResponse+0x1e>
        SendUSBDebugMessage("Parameters not initialized yet");
 80014d6:	4838      	ldr	r0, [pc, #224]	@ (80015b8 <SendParametersResponse+0xf8>)
 80014d8:	f7ff fdb2 	bl	8001040 <SendUSBDebugMessage>
        return;
 80014dc:	e065      	b.n	80015aa <SendParametersResponse+0xea>
    snprintf(usb_msg, sizeof(usb_msg),
        "wave_speed=%.1f|threshold=%.1f|threshold_zero_crossing=%.1f|"
        "start_index=%lu|probe_length=%lu|strobe_left1=%lu|strobe_right1=%lu|"
        "strobe_left2=%lu|strobe_right2=%lu|method=%lu|end_index=%lu|cycle_number=%lu|"
        "sensor_number=%s|gain=%.1f|start_date=%s|period=%lu\r\n",
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014de:	4b37      	ldr	r3, [pc, #220]	@ (80015bc <SendParametersResponse+0xfc>)
 80014e0:	685b      	ldr	r3, [r3, #4]
    snprintf(usb_msg, sizeof(usb_msg),
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f840 	bl	8000568 <__aeabi_f2d>
 80014e8:	4604      	mov	r4, r0
 80014ea:	460d      	mov	r5, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014ec:	4b33      	ldr	r3, [pc, #204]	@ (80015bc <SendParametersResponse+0xfc>)
 80014ee:	699b      	ldr	r3, [r3, #24]
    snprintf(usb_msg, sizeof(usb_msg),
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f839 	bl	8000568 <__aeabi_f2d>
 80014f6:	4680      	mov	r8, r0
 80014f8:	4689      	mov	r9, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014fa:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <SendParametersResponse+0xfc>)
 80014fc:	69db      	ldr	r3, [r3, #28]
    snprintf(usb_msg, sizeof(usb_msg),
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f832 	bl	8000568 <__aeabi_f2d>
 8001504:	4682      	mov	sl, r0
 8001506:	468b      	mov	fp, r1
 8001508:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <SendParametersResponse+0xfc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	4b2b      	ldr	r3, [pc, #172]	@ (80015bc <SendParametersResponse+0xfc>)
 8001510:	6a1a      	ldr	r2, [r3, #32]
 8001512:	61ba      	str	r2, [r7, #24]
 8001514:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <SendParametersResponse+0xfc>)
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	6179      	str	r1, [r7, #20]
 800151a:	4b28      	ldr	r3, [pc, #160]	@ (80015bc <SendParametersResponse+0xfc>)
 800151c:	68d8      	ldr	r0, [r3, #12]
 800151e:	6138      	str	r0, [r7, #16]
 8001520:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <SendParametersResponse+0xfc>)
 8001522:	691e      	ldr	r6, [r3, #16]
 8001524:	60fe      	str	r6, [r7, #12]
 8001526:	4b25      	ldr	r3, [pc, #148]	@ (80015bc <SendParametersResponse+0xfc>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <SendParametersResponse+0xfc>)
 800152e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <SendParametersResponse+0xfc>)
 8001534:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001536:	6039      	str	r1, [r7, #0]
 8001538:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <SendParametersResponse+0xfc>)
 800153a:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
        params.start_index, params.probe_length, params.first_left_strobe, params.first_right_strobe,
        params.second_left_strobe, params.second_right_strobe, params.method, params.end_index, params.cycle_number,
        params.sensor_number, params.gain, start_date, period);
 800153c:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <SendParametersResponse+0xfc>)
 800153e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    snprintf(usb_msg, sizeof(usb_msg),
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f811 	bl	8000568 <__aeabi_f2d>
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <SendParametersResponse+0x100>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <SendParametersResponse+0x104>)
 800154e:	9312      	str	r3, [sp, #72]	@ 0x48
 8001550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8001554:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <SendParametersResponse+0x108>)
 8001556:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001558:	960e      	str	r6, [sp, #56]	@ 0x38
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	910d      	str	r1, [sp, #52]	@ 0x34
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	920c      	str	r2, [sp, #48]	@ 0x30
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001566:	68fe      	ldr	r6, [r7, #12]
 8001568:	960a      	str	r6, [sp, #40]	@ 0x28
 800156a:	6938      	ldr	r0, [r7, #16]
 800156c:	9009      	str	r0, [sp, #36]	@ 0x24
 800156e:	6979      	ldr	r1, [r7, #20]
 8001570:	9108      	str	r1, [sp, #32]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	9207      	str	r2, [sp, #28]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	9306      	str	r3, [sp, #24]
 800157a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800157e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001582:	e9cd 4500 	strd	r4, r5, [sp]
 8001586:	4a11      	ldr	r2, [pc, #68]	@ (80015cc <SendParametersResponse+0x10c>)
 8001588:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800158c:	4810      	ldr	r0, [pc, #64]	@ (80015d0 <SendParametersResponse+0x110>)
 800158e:	f00d ff45 	bl	800f41c <sniprintf>

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001592:	480f      	ldr	r0, [pc, #60]	@ (80015d0 <SendParametersResponse+0x110>)
 8001594:	f7fe fe7c 	bl	8000290 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	b29b      	uxth	r3, r3
 800159c:	4619      	mov	r1, r3
 800159e:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <SendParametersResponse+0x110>)
 80015a0:	f00b fae0 	bl	800cb64 <CDC_Transmit_FS>
    HAL_Delay(10);
 80015a4:	200a      	movs	r0, #10
 80015a6:	f002 fa2f 	bl	8003a08 <HAL_Delay>
}
 80015aa:	3724      	adds	r7, #36	@ 0x24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b2:	bf00      	nop
 80015b4:	20000a64 	.word	0x20000a64
 80015b8:	08012bb4 	.word	0x08012bb4
 80015bc:	20000a24 	.word	0x20000a24
 80015c0:	2000084c 	.word	0x2000084c
 80015c4:	20000838 	.word	0x20000838
 80015c8:	20000a54 	.word	0x20000a54
 80015cc:	08012bd4 	.word	0x08012bd4
 80015d0:	20000438 	.word	0x20000438

080015d4 <SendDateTimeToBackupMCU>:

/**
  * @brief Отправка даты/времени и периода на дежурный МК по UART
  */
void SendDateTimeToBackupMCU(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af02      	add	r7, sp, #8
    // Проверяем что данные не пустые
    if (strlen(start_date) > 0 && period > 0) {
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <SendDateTimeToBackupMCU+0x64>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d023      	beq.n	800162a <SendDateTimeToBackupMCU+0x56>
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <SendDateTimeToBackupMCU+0x68>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01f      	beq.n	800162a <SendDateTimeToBackupMCU+0x56>
        // Формируем сообщение в формате: "DATE:YYYY-MM-DD;TIME:HH:MM:SS;PERIOD:XXXXX"
        snprintf(uart_tx_buf, UART_TX_BUF_SIZE,
 80015ea:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <SendDateTimeToBackupMCU+0x6c>)
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <SendDateTimeToBackupMCU+0x68>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	9200      	str	r2, [sp, #0]
 80015f4:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <SendDateTimeToBackupMCU+0x64>)
 80015f6:	4a13      	ldr	r2, [pc, #76]	@ (8001644 <SendDateTimeToBackupMCU+0x70>)
 80015f8:	2180      	movs	r1, #128	@ 0x80
 80015fa:	4813      	ldr	r0, [pc, #76]	@ (8001648 <SendDateTimeToBackupMCU+0x74>)
 80015fc:	f00d ff0e 	bl	800f41c <sniprintf>
                 "DATE:%.10s;TIME:%.8s;PERIOD:%lu\r\n",
                 start_date, start_date + 11, period);

        // Отправляем по UART
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx_buf, strlen(uart_tx_buf), 100);
 8001600:	4811      	ldr	r0, [pc, #68]	@ (8001648 <SendDateTimeToBackupMCU+0x74>)
 8001602:	f7fe fe45 	bl	8000290 <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	2364      	movs	r3, #100	@ 0x64
 800160c:	490e      	ldr	r1, [pc, #56]	@ (8001648 <SendDateTimeToBackupMCU+0x74>)
 800160e:	480f      	ldr	r0, [pc, #60]	@ (800164c <SendDateTimeToBackupMCU+0x78>)
 8001610:	f006 f96a 	bl	80078e8 <HAL_UART_Transmit>

        // Отладочное сообщение по USB
        snprintf(usb_msg, sizeof(usb_msg), "Sent to backup MCU: %s", uart_tx_buf);
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <SendDateTimeToBackupMCU+0x74>)
 8001616:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <SendDateTimeToBackupMCU+0x7c>)
 8001618:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800161c:	480d      	ldr	r0, [pc, #52]	@ (8001654 <SendDateTimeToBackupMCU+0x80>)
 800161e:	f00d fefd 	bl	800f41c <sniprintf>
        SendUSBDebugMessage(usb_msg);
 8001622:	480c      	ldr	r0, [pc, #48]	@ (8001654 <SendDateTimeToBackupMCU+0x80>)
 8001624:	f7ff fd0c 	bl	8001040 <SendUSBDebugMessage>
 8001628:	e003      	b.n	8001632 <SendDateTimeToBackupMCU+0x5e>
    } else {
        SendUSBDebugMessage("No date/time data to send to backup MCU");
 800162a:	480b      	ldr	r0, [pc, #44]	@ (8001658 <SendDateTimeToBackupMCU+0x84>)
 800162c:	f7ff fd08 	bl	8001040 <SendUSBDebugMessage>
    }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000838 	.word	0x20000838
 800163c:	2000084c 	.word	0x2000084c
 8001640:	20000843 	.word	0x20000843
 8001644:	08012cd8 	.word	0x08012cd8
 8001648:	20000850 	.word	0x20000850
 800164c:	200003a0 	.word	0x200003a0
 8001650:	08012cfc 	.word	0x08012cfc
 8001654:	20000438 	.word	0x20000438
 8001658:	08012d14 	.word	0x08012d14

0800165c <ProcessUARTCommand>:
/**
  * @brief Обработка команды от дежурного МК через UART
  * @param data Данные для обработки
  * @param len Длина данных
  */
void ProcessUARTCommand(uint8_t* data, uint8_t len) {
 800165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001660:	b0c1      	sub	sp, #260	@ 0x104
 8001662:	af1e      	add	r7, sp, #120	@ 0x78
 8001664:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8001666:	460b      	mov	r3, r1
 8001668:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    // Немедленно отправляем ACK о получении данных
    SendUARTResponse(ACK_STRING);
 800166c:	489d      	ldr	r0, [pc, #628]	@ (80018e4 <ProcessUARTCommand+0x288>)
 800166e:	f000 fd45 	bl	80020fc <SendUARTResponse>
    // Поиск всех параметров в данных
    char* date_ptr = strstr((char*)data, "DATE:");
 8001672:	499d      	ldr	r1, [pc, #628]	@ (80018e8 <ProcessUARTCommand+0x28c>)
 8001674:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001676:	f00e f831 	bl	800f6dc <strstr>
 800167a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char* time_ptr = strstr((char*)data, ";TIME:");
 800167e:	499b      	ldr	r1, [pc, #620]	@ (80018ec <ProcessUARTCommand+0x290>)
 8001680:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001682:	f00e f82b 	bl	800f6dc <strstr>
 8001686:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 800168a:	4999      	ldr	r1, [pc, #612]	@ (80018f0 <ProcessUARTCommand+0x294>)
 800168c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800168e:	f00e f825 	bl	800f6dc <strstr>
 8001692:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char* voltage_ptr = strstr((char*)data, ";VOLTAGE:");
 8001694:	4997      	ldr	r1, [pc, #604]	@ (80018f4 <ProcessUARTCommand+0x298>)
 8001696:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001698:	f00e f820 	bl	800f6dc <strstr>
 800169c:	67b8      	str	r0, [r7, #120]	@ 0x78
    char* temp_ptr = strstr((char*)data, ";TEMP:");
 800169e:	4996      	ldr	r1, [pc, #600]	@ (80018f8 <ProcessUARTCommand+0x29c>)
 80016a0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016a2:	f00e f81b 	bl	800f6dc <strstr>
 80016a6:	6778      	str	r0, [r7, #116]	@ 0x74

    // Инициализация значений по умолчанию
    int year = 0, month = 0, day = 0, hour = 0, min = 0, sec = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016ac:	2300      	movs	r3, #0
 80016ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016b0:	2300      	movs	r3, #0
 80016b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80016b4:	2300      	movs	r3, #0
 80016b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80016b8:	2300      	movs	r3, #0
 80016ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016bc:	2300      	movs	r3, #0
 80016be:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t received_period = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	657b      	str	r3, [r7, #84]	@ 0x54
    received_voltage = 0.0f;
 80016c4:	4b8d      	ldr	r3, [pc, #564]	@ (80018fc <ProcessUARTCommand+0x2a0>)
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
    received_temp = 0.0f;
 80016cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001900 <ProcessUARTCommand+0x2a4>)
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

    // Парсинг доступных параметров
    if(date_ptr) sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day);
 80016d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00c      	beq.n	80016f6 <ProcessUARTCommand+0x9a>
 80016dc:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80016e0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80016e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	460b      	mov	r3, r1
 80016ec:	4985      	ldr	r1, [pc, #532]	@ (8001904 <ProcessUARTCommand+0x2a8>)
 80016ee:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80016f2:	f00d feeb 	bl	800f4cc <siscanf>
    if(time_ptr) sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec);
 80016f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00c      	beq.n	8001718 <ProcessUARTCommand+0xbc>
 80016fe:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001702:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001706:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	460b      	mov	r3, r1
 800170e:	497e      	ldr	r1, [pc, #504]	@ (8001908 <ProcessUARTCommand+0x2ac>)
 8001710:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001714:	f00d feda 	bl	800f4cc <siscanf>
    if(period_ptr) sscanf(period_ptr, ";PERIOD:%lu", &received_period);
 8001718:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <ProcessUARTCommand+0xd0>
 800171e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001722:	461a      	mov	r2, r3
 8001724:	4979      	ldr	r1, [pc, #484]	@ (800190c <ProcessUARTCommand+0x2b0>)
 8001726:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001728:	f00d fed0 	bl	800f4cc <siscanf>
    if(voltage_ptr) sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage);
 800172c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <ProcessUARTCommand+0xe0>
 8001732:	4a72      	ldr	r2, [pc, #456]	@ (80018fc <ProcessUARTCommand+0x2a0>)
 8001734:	4976      	ldr	r1, [pc, #472]	@ (8001910 <ProcessUARTCommand+0x2b4>)
 8001736:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001738:	f00d fec8 	bl	800f4cc <siscanf>
    if(temp_ptr) sscanf(temp_ptr, ";TEMP:%f", &received_temp);
 800173c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <ProcessUARTCommand+0xf0>
 8001742:	4a6f      	ldr	r2, [pc, #444]	@ (8001900 <ProcessUARTCommand+0x2a4>)
 8001744:	4973      	ldr	r1, [pc, #460]	@ (8001914 <ProcessUARTCommand+0x2b8>)
 8001746:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001748:	f00d fec0 	bl	800f4cc <siscanf>

    // Формируем строку даты
    snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 800174c:	6efd      	ldr	r5, [r7, #108]	@ 0x6c
 800174e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001750:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001752:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001754:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001756:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8001758:	9404      	str	r4, [sp, #16]
 800175a:	9003      	str	r0, [sp, #12]
 800175c:	9102      	str	r1, [sp, #8]
 800175e:	9201      	str	r2, [sp, #4]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	462b      	mov	r3, r5
 8001764:	4a6c      	ldr	r2, [pc, #432]	@ (8001918 <ProcessUARTCommand+0x2bc>)
 8001766:	2114      	movs	r1, #20
 8001768:	486c      	ldr	r0, [pc, #432]	@ (800191c <ProcessUARTCommand+0x2c0>)
 800176a:	f00d fe57 	bl	800f41c <sniprintf>
            year, month, day, hour, min, sec);
    period = received_period;
 800176e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001770:	4a6b      	ldr	r2, [pc, #428]	@ (8001920 <ProcessUARTCommand+0x2c4>)
 8001772:	6013      	str	r3, [r2, #0]

    // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
    thermocouple_temperature = Get_Thermocouple_Temperature();
 8001774:	f001 fb44 	bl	8002e00 <Get_Thermocouple_Temperature>
 8001778:	eef0 7a40 	vmov.f32	s15, s0
 800177c:	4b69      	ldr	r3, [pc, #420]	@ (8001924 <ProcessUARTCommand+0x2c8>)
 800177e:	edc3 7a00 	vstr	s15, [r3]

    // ВЫЧИСЛЯЕМ ТОЛЩИНУ (если еще не вычислена)
    if (thickness_value == 0.0f && parameters_initialized) {
 8001782:	4b69      	ldr	r3, [pc, #420]	@ (8001928 <ProcessUARTCommand+0x2cc>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eef5 7a40 	vcmp.f32	s15, #0.0
 800178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001790:	d123      	bne.n	80017da <ProcessUARTCommand+0x17e>
 8001792:	4b66      	ldr	r3, [pc, #408]	@ (800192c <ProcessUARTCommand+0x2d0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01f      	beq.n	80017da <ProcessUARTCommand+0x17e>
        calculate_thickness_requested = true;
 800179a:	4b65      	ldr	r3, [pc, #404]	@ (8001930 <ProcessUARTCommand+0x2d4>)
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]

        uint32_t start_time = HAL_GetTick();
 80017a0:	f002 f926 	bl	80039f0 <HAL_GetTick>
 80017a4:	6738      	str	r0, [r7, #112]	@ 0x70
        while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 80017a6:	e00b      	b.n	80017c0 <ProcessUARTCommand+0x164>
            if (calculate_thickness_requested) {
 80017a8:	4b61      	ldr	r3, [pc, #388]	@ (8001930 <ProcessUARTCommand+0x2d4>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <ProcessUARTCommand+0x15e>
                calculate_thickness_requested = false;
 80017b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001930 <ProcessUARTCommand+0x2d4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
                ProcessDataByMethod();
 80017b6:	f002 f829 	bl	800380c <ProcessDataByMethod>
            }
            HAL_Delay(10);
 80017ba:	200a      	movs	r0, #10
 80017bc:	f002 f924 	bl	8003a08 <HAL_Delay>
        while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 80017c0:	4b5b      	ldr	r3, [pc, #364]	@ (8001930 <ProcessUARTCommand+0x2d4>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <ProcessUARTCommand+0x17e>
 80017c8:	f002 f912 	bl	80039f0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d9e6      	bls.n	80017a8 <ProcessUARTCommand+0x14c>
        }
    }

    // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB
    if(thermocouple_error) {
 80017da:	4b56      	ldr	r3, [pc, #344]	@ (8001934 <ProcessUARTCommand+0x2d8>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80b2 	beq.w	8001948 <ProcessUARTCommand+0x2ec>
        snprintf(usb_msg, sizeof(usb_msg),
 80017e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001920 <ProcessUARTCommand+0x2c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80017ea:	4b44      	ldr	r3, [pc, #272]	@ (80018fc <ProcessUARTCommand+0x2a0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe feba 	bl	8000568 <__aeabi_f2d>
 80017f4:	4682      	mov	sl, r0
 80017f6:	468b      	mov	fp, r1
 80017f8:	4b41      	ldr	r3, [pc, #260]	@ (8001900 <ProcessUARTCommand+0x2a4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe feb3 	bl	8000568 <__aeabi_f2d>
 8001802:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001806:	4b48      	ldr	r3, [pc, #288]	@ (8001928 <ProcessUARTCommand+0x2cc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe feac 	bl	8000568 <__aeabi_f2d>
 8001810:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                "%s|%lu|%.4f|%.2f|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                start_date, period, received_voltage, received_temp, thickness_value,
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001814:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 8001816:	685b      	ldr	r3, [r3, #4]
        snprintf(usb_msg, sizeof(usb_msg),
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fea5 	bl	8000568 <__aeabi_f2d>
 800181e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001822:	4b45      	ldr	r3, [pc, #276]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 8001824:	699b      	ldr	r3, [r3, #24]
        snprintf(usb_msg, sizeof(usb_msg),
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe9e 	bl	8000568 <__aeabi_f2d>
 800182c:	e9c7 0108 	strd	r0, r1, [r7, #32]
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001830:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 8001832:	69db      	ldr	r3, [r3, #28]
        snprintf(usb_msg, sizeof(usb_msg),
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe97 	bl	8000568 <__aeabi_f2d>
 800183a:	4680      	mov	r8, r0
 800183c:	4689      	mov	r9, r1
 800183e:	4b3e      	ldr	r3, [pc, #248]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	61ba      	str	r2, [r7, #24]
 8001844:	4b3c      	ldr	r3, [pc, #240]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 8001846:	6a19      	ldr	r1, [r3, #32]
 8001848:	6439      	str	r1, [r7, #64]	@ 0x40
 800184a:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 800184c:	689c      	ldr	r4, [r3, #8]
 800184e:	617c      	str	r4, [r7, #20]
 8001850:	4b39      	ldr	r3, [pc, #228]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 8001852:	68dd      	ldr	r5, [r3, #12]
 8001854:	613d      	str	r5, [r7, #16]
 8001856:	4b38      	ldr	r3, [pc, #224]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 8001858:	691e      	ldr	r6, [r3, #16]
 800185a:	60fe      	str	r6, [r7, #12]
 800185c:	4b36      	ldr	r3, [pc, #216]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b35      	ldr	r3, [pc, #212]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 8001864:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8001866:	4b34      	ldr	r3, [pc, #208]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 8001868:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800186a:	4b33      	ldr	r3, [pc, #204]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 800186c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                params.start_index, params.probe_length, params.first_left_strobe,
                params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                params.method, params.end_index, params.cycle_number, params.sensor_number,
                params.gain, start_date, period);
 800186e:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <ProcessUARTCommand+0x2dc>)
 8001870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        snprintf(usb_msg, sizeof(usb_msg),
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe78 	bl	8000568 <__aeabi_f2d>
 8001878:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <ProcessUARTCommand+0x2c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800187e:	4b27      	ldr	r3, [pc, #156]	@ (800191c <ProcessUARTCommand+0x2c0>)
 8001880:	931a      	str	r3, [sp, #104]	@ 0x68
 8001882:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 8001886:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <ProcessUARTCommand+0x2e0>)
 8001888:	9317      	str	r3, [sp, #92]	@ 0x5c
 800188a:	9416      	str	r4, [sp, #88]	@ 0x58
 800188c:	9515      	str	r5, [sp, #84]	@ 0x54
 800188e:	9614      	str	r6, [sp, #80]	@ 0x50
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001894:	68fe      	ldr	r6, [r7, #12]
 8001896:	9612      	str	r6, [sp, #72]	@ 0x48
 8001898:	693d      	ldr	r5, [r7, #16]
 800189a:	9511      	str	r5, [sp, #68]	@ 0x44
 800189c:	697c      	ldr	r4, [r7, #20]
 800189e:	9410      	str	r4, [sp, #64]	@ 0x40
 80018a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80018a2:	910f      	str	r1, [sp, #60]	@ 0x3c
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80018a8:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80018ac:	ed97 7b08 	vldr	d7, [r7, #32]
 80018b0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80018b4:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80018b8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80018bc:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80018c0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80018c4:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80018c8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80018cc:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80018d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <ProcessUARTCommand+0x2c0>)
 80018d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001940 <ProcessUARTCommand+0x2e4>)
 80018d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018dc:	4819      	ldr	r0, [pc, #100]	@ (8001944 <ProcessUARTCommand+0x2e8>)
 80018de:	f00d fd9d 	bl	800f41c <sniprintf>
 80018e2:	e0bb      	b.n	8001a5c <ProcessUARTCommand+0x400>
 80018e4:	08012d3c 	.word	0x08012d3c
 80018e8:	08012d44 	.word	0x08012d44
 80018ec:	08012d4c 	.word	0x08012d4c
 80018f0:	08012d54 	.word	0x08012d54
 80018f4:	08012d60 	.word	0x08012d60
 80018f8:	08012d6c 	.word	0x08012d6c
 80018fc:	20000a0c 	.word	0x20000a0c
 8001900:	20000a10 	.word	0x20000a10
 8001904:	08012d74 	.word	0x08012d74
 8001908:	08012d84 	.word	0x08012d84
 800190c:	08012d94 	.word	0x08012d94
 8001910:	08012da0 	.word	0x08012da0
 8001914:	08012dac 	.word	0x08012dac
 8001918:	08012db8 	.word	0x08012db8
 800191c:	20000838 	.word	0x20000838
 8001920:	2000084c 	.word	0x2000084c
 8001924:	20000a1c 	.word	0x20000a1c
 8001928:	20000a68 	.word	0x20000a68
 800192c:	20000a64 	.word	0x20000a64
 8001930:	20000a65 	.word	0x20000a65
 8001934:	20000a20 	.word	0x20000a20
 8001938:	20000a24 	.word	0x20000a24
 800193c:	20000a54 	.word	0x20000a54
 8001940:	08012dd8 	.word	0x08012dd8
 8001944:	20000438 	.word	0x20000438
    } else {
        snprintf(usb_msg, sizeof(usb_msg),
 8001948:	4b4f      	ldr	r3, [pc, #316]	@ (8001a88 <ProcessUARTCommand+0x42c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	647b      	str	r3, [r7, #68]	@ 0x44
 800194e:	4b4f      	ldr	r3, [pc, #316]	@ (8001a8c <ProcessUARTCommand+0x430>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe08 	bl	8000568 <__aeabi_f2d>
 8001958:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 800195c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a90 <ProcessUARTCommand+0x434>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fe01 	bl	8000568 <__aeabi_f2d>
 8001966:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 800196a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <ProcessUARTCommand+0x438>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fdfa 	bl	8000568 <__aeabi_f2d>
 8001974:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001978:	4b47      	ldr	r3, [pc, #284]	@ (8001a98 <ProcessUARTCommand+0x43c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdf3 	bl	8000568 <__aeabi_f2d>
 8001982:	e9c7 0108 	strd	r0, r1, [r7, #32]
                "%s|%lu|%.4f|%.2f|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                start_date, period, received_voltage, received_temp, thermocouple_temperature,
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001986:	4b45      	ldr	r3, [pc, #276]	@ (8001a9c <ProcessUARTCommand+0x440>)
 8001988:	685b      	ldr	r3, [r3, #4]
        snprintf(usb_msg, sizeof(usb_msg),
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fdec 	bl	8000568 <__aeabi_f2d>
 8001990:	e9c7 0106 	strd	r0, r1, [r7, #24]
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001994:	4b41      	ldr	r3, [pc, #260]	@ (8001a9c <ProcessUARTCommand+0x440>)
 8001996:	699b      	ldr	r3, [r3, #24]
        snprintf(usb_msg, sizeof(usb_msg),
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fde5 	bl	8000568 <__aeabi_f2d>
 800199e:	4682      	mov	sl, r0
 80019a0:	468b      	mov	fp, r1
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019a2:	4b3e      	ldr	r3, [pc, #248]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019a4:	69db      	ldr	r3, [r3, #28]
        snprintf(usb_msg, sizeof(usb_msg),
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdde 	bl	8000568 <__aeabi_f2d>
 80019ac:	4680      	mov	r8, r0
 80019ae:	4689      	mov	r9, r1
 80019b0:	4b3a      	ldr	r3, [pc, #232]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80019b6:	4b39      	ldr	r3, [pc, #228]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019b8:	6a19      	ldr	r1, [r3, #32]
 80019ba:	6179      	str	r1, [r7, #20]
 80019bc:	4b37      	ldr	r3, [pc, #220]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019be:	689c      	ldr	r4, [r3, #8]
 80019c0:	613c      	str	r4, [r7, #16]
 80019c2:	4b36      	ldr	r3, [pc, #216]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019c4:	68dd      	ldr	r5, [r3, #12]
 80019c6:	60fd      	str	r5, [r7, #12]
 80019c8:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019ca:	691e      	ldr	r6, [r3, #16]
 80019cc:	60be      	str	r6, [r7, #8]
 80019ce:	4b33      	ldr	r3, [pc, #204]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019d6:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 80019d8:	4b30      	ldr	r3, [pc, #192]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019da:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80019dc:	4b2f      	ldr	r3, [pc, #188]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019de:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                params.start_index, params.probe_length, params.first_left_strobe,
                params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                params.method, params.end_index, params.cycle_number, params.sensor_number,
                params.gain, start_date, period);
 80019e0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a9c <ProcessUARTCommand+0x440>)
 80019e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        snprintf(usb_msg, sizeof(usb_msg),
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdbf 	bl	8000568 <__aeabi_f2d>
 80019ea:	4b27      	ldr	r3, [pc, #156]	@ (8001a88 <ProcessUARTCommand+0x42c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	931d      	str	r3, [sp, #116]	@ 0x74
 80019f0:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <ProcessUARTCommand+0x444>)
 80019f2:	931c      	str	r3, [sp, #112]	@ 0x70
 80019f4:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 80019f8:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <ProcessUARTCommand+0x448>)
 80019fa:	9319      	str	r3, [sp, #100]	@ 0x64
 80019fc:	9418      	str	r4, [sp, #96]	@ 0x60
 80019fe:	9517      	str	r5, [sp, #92]	@ 0x5c
 8001a00:	9616      	str	r6, [sp, #88]	@ 0x58
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	9315      	str	r3, [sp, #84]	@ 0x54
 8001a06:	68be      	ldr	r6, [r7, #8]
 8001a08:	9614      	str	r6, [sp, #80]	@ 0x50
 8001a0a:	68fd      	ldr	r5, [r7, #12]
 8001a0c:	9513      	str	r5, [sp, #76]	@ 0x4c
 8001a0e:	693c      	ldr	r4, [r7, #16]
 8001a10:	9412      	str	r4, [sp, #72]	@ 0x48
 8001a12:	6979      	ldr	r1, [r7, #20]
 8001a14:	9111      	str	r1, [sp, #68]	@ 0x44
 8001a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a18:	9210      	str	r2, [sp, #64]	@ 0x40
 8001a1a:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001a1e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8001a22:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a26:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001a2a:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a32:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001a36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a3a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001a3e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a42:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001a46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <ProcessUARTCommand+0x444>)
 8001a50:	4a15      	ldr	r2, [pc, #84]	@ (8001aa8 <ProcessUARTCommand+0x44c>)
 8001a52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a56:	4815      	ldr	r0, [pc, #84]	@ (8001aac <ProcessUARTCommand+0x450>)
 8001a58:	f00d fce0 	bl	800f41c <sniprintf>
    }

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001a5c:	4813      	ldr	r0, [pc, #76]	@ (8001aac <ProcessUARTCommand+0x450>)
 8001a5e:	f7fe fc17 	bl	8000290 <strlen>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4619      	mov	r1, r3
 8001a68:	4810      	ldr	r0, [pc, #64]	@ (8001aac <ProcessUARTCommand+0x450>)
 8001a6a:	f00b f87b 	bl	800cb64 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001a6e:	200a      	movs	r0, #10
 8001a70:	f001 ffca 	bl	8003a08 <HAL_Delay>

    SendMeasurementDataViaLoRa();
 8001a74:	f000 f81e 	bl	8001ab4 <SendMeasurementDataViaLoRa>
    // После завершения всех операций отправляем COMPLETE
    SendUARTResponse(COMPLETE_STRING);
 8001a78:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <ProcessUARTCommand+0x454>)
 8001a7a:	f000 fb3f 	bl	80020fc <SendUARTResponse>

}
 8001a7e:	bf00      	nop
 8001a80:	378c      	adds	r7, #140	@ 0x8c
 8001a82:	46bd      	mov	sp, r7
 8001a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a88:	2000084c 	.word	0x2000084c
 8001a8c:	20000a0c 	.word	0x20000a0c
 8001a90:	20000a10 	.word	0x20000a10
 8001a94:	20000a1c 	.word	0x20000a1c
 8001a98:	20000a68 	.word	0x20000a68
 8001a9c:	20000a24 	.word	0x20000a24
 8001aa0:	20000838 	.word	0x20000838
 8001aa4:	20000a54 	.word	0x20000a54
 8001aa8:	08012e34 	.word	0x08012e34
 8001aac:	20000438 	.word	0x20000438
 8001ab0:	08012e90 	.word	0x08012e90

08001ab4 <SendMeasurementDataViaLoRa>:
/**
  * @brief Отправка данных измерений через LoRa
  */
void SendMeasurementDataViaLoRa(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b0b0      	sub	sp, #192	@ 0xc0
 8001ab8:	af00      	add	r7, sp, #0
    // Проверяем инициализацию LoRa
    if (!lora_initialized) {
 8001aba:	4bc6      	ldr	r3, [pc, #792]	@ (8001dd4 <SendMeasurementDataViaLoRa+0x320>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	f083 0301 	eor.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00b      	beq.n	8001ae0 <SendMeasurementDataViaLoRa+0x2c>
        if (!InitializeLoRa()) {
 8001ac8:	f000 fa24 	bl	8001f14 <InitializeLoRa>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f083 0301 	eor.w	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <SendMeasurementDataViaLoRa+0x2c>
            SendUSBDebugMessage("LoRa initialization failed for measurement data send");
 8001ad8:	48bf      	ldr	r0, [pc, #764]	@ (8001dd8 <SendMeasurementDataViaLoRa+0x324>)
 8001ada:	f7ff fab1 	bl	8001040 <SendUSBDebugMessage>
            return;
 8001ade:	e1b1      	b.n	8001e44 <SendMeasurementDataViaLoRa+0x390>
        }
    }

    // Формируем данные для отправки
    uint8_t lora_data[128] = {0};
 8001ae0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ae4:	2280      	movs	r2, #128	@ 0x80
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f00d fd60 	bl	800f5ae <memset>
    uint8_t data_index = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем period (4 байта) - временная переменная
    memcpy(&lora_data[data_index], &period, sizeof(uint32_t));
 8001af4:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001af8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001afc:	4413      	add	r3, r2
 8001afe:	4ab7      	ldr	r2, [pc, #732]	@ (8001ddc <SendMeasurementDataViaLoRa+0x328>)
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001b04:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b08:	3304      	adds	r3, #4
 8001b0a:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем received_voltage (4 байта) - из ProcessUARTCommand
    float voltage = received_voltage;
 8001b0e:	4bb4      	ldr	r3, [pc, #720]	@ (8001de0 <SendMeasurementDataViaLoRa+0x32c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	63bb      	str	r3, [r7, #56]	@ 0x38
    memcpy(&lora_data[data_index], &voltage, sizeof(float));
 8001b14:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b18:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b1c:	4413      	add	r3, r2
 8001b1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b20:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b22:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b26:	3304      	adds	r3, #4
 8001b28:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем received_temp (4 байта) - из ProcessUARTCommand
    float temp = received_temp;
 8001b2c:	4bad      	ldr	r3, [pc, #692]	@ (8001de4 <SendMeasurementDataViaLoRa+0x330>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(&lora_data[data_index], &temp, sizeof(float));
 8001b32:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b36:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b3a:	4413      	add	r3, r2
 8001b3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b3e:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b40:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b44:	3304      	adds	r3, #4
 8001b46:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем thermocouple_temperature (4 байта) - глобальная переменная
    memcpy(&lora_data[data_index], &thermocouple_temperature, sizeof(float));
 8001b4a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b4e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b52:	4413      	add	r3, r2
 8001b54:	4aa4      	ldr	r2, [pc, #656]	@ (8001de8 <SendMeasurementDataViaLoRa+0x334>)
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b5a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b5e:	3304      	adds	r3, #4
 8001b60:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем thickness_value (4 байта) - расчетная переменная
    memcpy(&lora_data[data_index], &thickness_value, sizeof(float));
 8001b64:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b68:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a9f      	ldr	r2, [pc, #636]	@ (8001dec <SendMeasurementDataViaLoRa+0x338>)
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b74:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b78:	3304      	adds	r3, #4
 8001b7a:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем wave_speed (4 байта) - из параметров
    float wave_speed = params.wave_speed;
 8001b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
    memcpy(&lora_data[data_index], &wave_speed, sizeof(float));
 8001b84:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b88:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b8c:	4413      	add	r3, r2
 8001b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b90:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b92:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b96:	3304      	adds	r3, #4
 8001b98:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем threshold (4 байта) - из параметров
    float threshold = params.threshold;
 8001b9c:	4b94      	ldr	r3, [pc, #592]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(&lora_data[data_index], &threshold, sizeof(float));
 8001ba2:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001ba6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001baa:	4413      	add	r3, r2
 8001bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bae:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001bb0:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем threshold_zero_crossing (4 байта) - из параметров
    float threshold_zero = params.threshold_zero_crossing;
 8001bba:	4b8d      	ldr	r3, [pc, #564]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    memcpy(&lora_data[data_index], &threshold_zero, sizeof(float));
 8001bc0:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bc4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001bc8:	4413      	add	r3, r2
 8001bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bcc:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001bce:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем start_index (4 байта) - из параметров
    uint32_t start_idx = params.start_index;
 8001bd8:	4b85      	ldr	r3, [pc, #532]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    memcpy(&lora_data[data_index], &start_idx, sizeof(uint32_t));
 8001bde:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001be2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001be6:	4413      	add	r3, r2
 8001be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bea:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001bec:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем probe_length (4 байта) - из параметров
    uint32_t probe_len = params.probe_length;
 8001bf6:	4b7e      	ldr	r3, [pc, #504]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	623b      	str	r3, [r7, #32]
    memcpy(&lora_data[data_index], &probe_len, sizeof(uint32_t));
 8001bfc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c00:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c04:	4413      	add	r3, r2
 8001c06:	6a3a      	ldr	r2, [r7, #32]
 8001c08:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c0a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c0e:	3304      	adds	r3, #4
 8001c10:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем first_left_strobe (4 байта) - из параметров
    uint32_t strobe_l1 = params.first_left_strobe;
 8001c14:	4b76      	ldr	r3, [pc, #472]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	61fb      	str	r3, [r7, #28]
    memcpy(&lora_data[data_index], &strobe_l1, sizeof(uint32_t));
 8001c1a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c1e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c22:	4413      	add	r3, r2
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c28:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем first_right_strobe (4 байта) - из параметров
    uint32_t strobe_r1 = params.first_right_strobe;
 8001c32:	4b6f      	ldr	r3, [pc, #444]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	61bb      	str	r3, [r7, #24]
    memcpy(&lora_data[data_index], &strobe_r1, sizeof(uint32_t));
 8001c38:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c3c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c40:	4413      	add	r3, r2
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c46:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем second_left_strobe (4 байта) - из параметров
    uint32_t strobe_l2 = params.second_left_strobe;
 8001c50:	4b67      	ldr	r3, [pc, #412]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	617b      	str	r3, [r7, #20]
    memcpy(&lora_data[data_index], &strobe_l2, sizeof(uint32_t));
 8001c56:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c5a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c5e:	4413      	add	r3, r2
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c64:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c68:	3304      	adds	r3, #4
 8001c6a:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем second_right_strobe (4 байта) - из параметров
    uint32_t strobe_r2 = params.second_right_strobe;
 8001c6e:	4b60      	ldr	r3, [pc, #384]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	613b      	str	r3, [r7, #16]
    memcpy(&lora_data[data_index], &strobe_r2, sizeof(uint32_t));
 8001c74:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c78:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c82:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c86:	3304      	adds	r3, #4
 8001c88:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем method (4 байта) - из параметров
    uint32_t method = params.method;
 8001c8c:	4b58      	ldr	r3, [pc, #352]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c90:	60fb      	str	r3, [r7, #12]
    memcpy(&lora_data[data_index], &method, sizeof(uint32_t));
 8001c92:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c96:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c9a:	4413      	add	r3, r2
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001ca0:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем end_index (4 байта) - из параметров
    uint32_t end_idx = params.end_index;
 8001caa:	4b51      	ldr	r3, [pc, #324]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cae:	60bb      	str	r3, [r7, #8]
    memcpy(&lora_data[data_index], &end_idx, sizeof(uint32_t));
 8001cb0:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cb4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001cb8:	4413      	add	r3, r2
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001cbe:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем cycle_number (4 байта) - из параметров
    uint32_t cycle_num = params.cycle_number;
 8001cc8:	4b49      	ldr	r3, [pc, #292]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ccc:	607b      	str	r3, [r7, #4]
    memcpy(&lora_data[data_index], &cycle_num, sizeof(uint32_t));
 8001cce:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cd2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001cdc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем sensor_number (максимум 16 байт) - из параметров
    uint8_t sensor_len = strlen(params.sensor_number);
 8001ce6:	4843      	ldr	r0, [pc, #268]	@ (8001df4 <SendMeasurementDataViaLoRa+0x340>)
 8001ce8:	f7fe fad2 	bl	8000290 <strlen>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    if (sensor_len > 15) sensor_len = 15;
 8001cf2:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	d902      	bls.n	8001d00 <SendMeasurementDataViaLoRa+0x24c>
 8001cfa:	230f      	movs	r3, #15
 8001cfc:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    lora_data[data_index++] = sensor_len;
 8001d00:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	f887 20be 	strb.w	r2, [r7, #190]	@ 0xbe
 8001d0a:	33c0      	adds	r3, #192	@ 0xc0
 8001d0c:	443b      	add	r3, r7
 8001d0e:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001d12:	f803 2c84 	strb.w	r2, [r3, #-132]
    memcpy(&lora_data[data_index], params.sensor_number, sensor_len);
 8001d16:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d1a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d1e:	4413      	add	r3, r2
 8001d20:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001d24:	4933      	ldr	r1, [pc, #204]	@ (8001df4 <SendMeasurementDataViaLoRa+0x340>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00d fd65 	bl	800f7f6 <memcpy>
    data_index += sensor_len;
 8001d2c:	f897 20be 	ldrb.w	r2, [r7, #190]	@ 0xbe
 8001d30:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001d34:	4413      	add	r3, r2
 8001d36:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем gain (4 байта) - из параметров
    float gain = params.gain;
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001df0 <SendMeasurementDataViaLoRa+0x33c>)
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3e:	603b      	str	r3, [r7, #0]
    memcpy(&lora_data[data_index], &gain, sizeof(float));
 8001d40:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d44:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d48:	4413      	add	r3, r2
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001d4e:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d52:	3304      	adds	r3, #4
 8001d54:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Общая длина данных
    uint8_t total_length = data_index;
 8001d58:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d5c:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd

    // Настройка параметров передачи LoRa
    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_200_US);
 8001d60:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <SendMeasurementDataViaLoRa+0x344>)
 8001d62:	f993 3000 	ldrsb.w	r3, [r3]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4824      	ldr	r0, [pc, #144]	@ (8001dfc <SendMeasurementDataViaLoRa+0x348>)
 8001d6c:	f008 fbab 	bl	800a4c6 <sx126x_set_tx_params>

    // Ожидаем, пока модуль освободится
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 8001d70:	e002      	b.n	8001d78 <SendMeasurementDataViaLoRa+0x2c4>
        HAL_Delay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f001 fe48 	bl	8003a08 <HAL_Delay>
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 8001d78:	2110      	movs	r1, #16
 8001d7a:	4821      	ldr	r0, [pc, #132]	@ (8001e00 <SendMeasurementDataViaLoRa+0x34c>)
 8001d7c:	f002 fc1e 	bl	80045bc <HAL_GPIO_ReadPin>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d0f5      	beq.n	8001d72 <SendMeasurementDataViaLoRa+0x2be>
    }

    // Записываем данные в буфер модуля LoRa
    sx126x_status_t status = sx126x_write_buffer(&radio, 0, lora_data, total_length);
 8001d86:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001d8a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d8e:	2100      	movs	r1, #0
 8001d90:	481a      	ldr	r0, [pc, #104]	@ (8001dfc <SendMeasurementDataViaLoRa+0x348>)
 8001d92:	f008 facc 	bl	800a32e <sx126x_write_buffer>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001d9c:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <SendMeasurementDataViaLoRa+0x2f8>
        SendUSBDebugMessage("LoRa write buffer failed for measurement data");
 8001da4:	4817      	ldr	r0, [pc, #92]	@ (8001e04 <SendMeasurementDataViaLoRa+0x350>)
 8001da6:	f7ff f94b 	bl	8001040 <SendUSBDebugMessage>
        return;
 8001daa:	e04b      	b.n	8001e44 <SendMeasurementDataViaLoRa+0x390>
    }

    // Обновляем параметры пакета с актуальной длиной
    pkt_params.pld_len_in_bytes = total_length;
 8001dac:	4a16      	ldr	r2, [pc, #88]	@ (8001e08 <SendMeasurementDataViaLoRa+0x354>)
 8001dae:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001db2:	70d3      	strb	r3, [r2, #3]
    status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 8001db4:	4914      	ldr	r1, [pc, #80]	@ (8001e08 <SendMeasurementDataViaLoRa+0x354>)
 8001db6:	4811      	ldr	r0, [pc, #68]	@ (8001dfc <SendMeasurementDataViaLoRa+0x348>)
 8001db8:	f008 fbd3 	bl	800a562 <sx126x_set_lora_pkt_params>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001dc2:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d022      	beq.n	8001e10 <SendMeasurementDataViaLoRa+0x35c>
        SendUSBDebugMessage("LoRa set packet params failed");
 8001dca:	4810      	ldr	r0, [pc, #64]	@ (8001e0c <SendMeasurementDataViaLoRa+0x358>)
 8001dcc:	f7ff f938 	bl	8001040 <SendUSBDebugMessage>
        return;
 8001dd0:	e038      	b.n	8001e44 <SendMeasurementDataViaLoRa+0x390>
 8001dd2:	bf00      	nop
 8001dd4:	20000a08 	.word	0x20000a08
 8001dd8:	08012e9c 	.word	0x08012e9c
 8001ddc:	2000084c 	.word	0x2000084c
 8001de0:	20000a0c 	.word	0x20000a0c
 8001de4:	20000a10 	.word	0x20000a10
 8001de8:	20000a1c 	.word	0x20000a1c
 8001dec:	20000a68 	.word	0x20000a68
 8001df0:	20000a24 	.word	0x20000a24
 8001df4:	20000a54 	.word	0x20000a54
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	200009dc 	.word	0x200009dc
 8001e00:	40020800 	.word	0x40020800
 8001e04:	08012ed4 	.word	0x08012ed4
 8001e08:	200009fc 	.word	0x200009fc
 8001e0c:	08012f04 	.word	0x08012f04
    }

    // Запускаем передачу
    status = sx126x_set_tx(&radio, SX126X_MAX_TIMEOUT_IN_MS);
 8001e10:	490e      	ldr	r1, [pc, #56]	@ (8001e4c <SendMeasurementDataViaLoRa+0x398>)
 8001e12:	480f      	ldr	r0, [pc, #60]	@ (8001e50 <SendMeasurementDataViaLoRa+0x39c>)
 8001e14:	f008 f9ba 	bl	800a18c <sx126x_set_tx>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001e1e:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <SendMeasurementDataViaLoRa+0x37a>
        SendUSBDebugMessage("LoRa transmission failed for measurement data");
 8001e26:	480b      	ldr	r0, [pc, #44]	@ (8001e54 <SendMeasurementDataViaLoRa+0x3a0>)
 8001e28:	f7ff f90a 	bl	8001040 <SendUSBDebugMessage>
 8001e2c:	e00a      	b.n	8001e44 <SendMeasurementDataViaLoRa+0x390>
    } else {
        snprintf(usb_msg, sizeof(usb_msg), "LoRa measurement data sent (%d bytes)", total_length);
 8001e2e:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001e32:	4a09      	ldr	r2, [pc, #36]	@ (8001e58 <SendMeasurementDataViaLoRa+0x3a4>)
 8001e34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e38:	4808      	ldr	r0, [pc, #32]	@ (8001e5c <SendMeasurementDataViaLoRa+0x3a8>)
 8001e3a:	f00d faef 	bl	800f41c <sniprintf>
        SendUSBDebugMessage(usb_msg);
 8001e3e:	4807      	ldr	r0, [pc, #28]	@ (8001e5c <SendMeasurementDataViaLoRa+0x3a8>)
 8001e40:	f7ff f8fe 	bl	8001040 <SendUSBDebugMessage>
    }
}
 8001e44:	37c0      	adds	r7, #192	@ 0xc0
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	0003ffff 	.word	0x0003ffff
 8001e50:	200009dc 	.word	0x200009dc
 8001e54:	08012f24 	.word	0x08012f24
 8001e58:	08012f54 	.word	0x08012f54
 8001e5c:	20000438 	.word	0x20000438

08001e60 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <HAL_UART_RxCpltCallback+0x94>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d13b      	bne.n	8001eea <HAL_UART_RxCpltCallback+0x8a>
        uart_last_rx_time = HAL_GetTick();
 8001e72:	f001 fdbd 	bl	80039f0 <HAL_GetTick>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef8 <HAL_UART_RxCpltCallback+0x98>)
 8001e7a:	6013      	str	r3, [r2, #0]

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= UART_RX_BUF_SIZE-1) {
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <HAL_UART_RxCpltCallback+0x9c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <HAL_UART_RxCpltCallback+0xa0>)
 8001e84:	5c9b      	ldrb	r3, [r3, r2]
 8001e86:	2b0a      	cmp	r3, #10
 8001e88:	d003      	beq.n	8001e92 <HAL_UART_RxCpltCallback+0x32>
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <HAL_UART_RxCpltCallback+0x9c>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e90:	d91b      	bls.n	8001eca <HAL_UART_RxCpltCallback+0x6a>
            // Копируем данные в буфер для обработки
            memcpy((void*)uart_rx_data, uart_rx_buf, uart_rx_pos);
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_UART_RxCpltCallback+0x9c>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4919      	ldr	r1, [pc, #100]	@ (8001f00 <HAL_UART_RxCpltCallback+0xa0>)
 8001e9a:	481a      	ldr	r0, [pc, #104]	@ (8001f04 <HAL_UART_RxCpltCallback+0xa4>)
 8001e9c:	f00d fcab 	bl	800f7f6 <memcpy>
            uart_rx_len = uart_rx_pos;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <HAL_UART_RxCpltCallback+0x9c>)
 8001ea2:	781a      	ldrb	r2, [r3, #0]
 8001ea4:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <HAL_UART_RxCpltCallback+0xa8>)
 8001ea6:	701a      	strb	r2, [r3, #0]
            uart_message_received = 1;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <HAL_UART_RxCpltCallback+0xac>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]

            uart_rx_pos = 0;
 8001eae:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <HAL_UART_RxCpltCallback+0x9c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001eb4:	2280      	movs	r2, #128	@ 0x80
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4811      	ldr	r0, [pc, #68]	@ (8001f00 <HAL_UART_RxCpltCallback+0xa0>)
 8001eba:	f00d fb78 	bl	800f5ae <memset>

            // Немедленно запускаем прием следующего байта
            HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	490f      	ldr	r1, [pc, #60]	@ (8001f00 <HAL_UART_RxCpltCallback+0xa0>)
 8001ec2:	4813      	ldr	r0, [pc, #76]	@ (8001f10 <HAL_UART_RxCpltCallback+0xb0>)
 8001ec4:	f005 fd9b 	bl	80079fe <HAL_UART_Receive_IT>
        } else {
            uart_rx_pos++;
            HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
        }
    }
}
 8001ec8:	e00f      	b.n	8001eea <HAL_UART_RxCpltCallback+0x8a>
            uart_rx_pos++;
 8001eca:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <HAL_UART_RxCpltCallback+0x9c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <HAL_UART_RxCpltCallback+0x9c>)
 8001ed4:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_UART_RxCpltCallback+0x9c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <HAL_UART_RxCpltCallback+0xa0>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480a      	ldr	r0, [pc, #40]	@ (8001f10 <HAL_UART_RxCpltCallback+0xb0>)
 8001ee6:	f005 fd8a 	bl	80079fe <HAL_UART_Receive_IT>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40011000 	.word	0x40011000
 8001ef8:	20000954 	.word	0x20000954
 8001efc:	20000950 	.word	0x20000950
 8001f00:	200008d0 	.word	0x200008d0
 8001f04:	20000958 	.word	0x20000958
 8001f08:	200009d8 	.word	0x200009d8
 8001f0c:	200009d9 	.word	0x200009d9
 8001f10:	200003a0 	.word	0x200003a0

08001f14 <InitializeLoRa>:

/**
  * @brief Инициализация модуля LoRa
  */
bool InitializeLoRa(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af02      	add	r7, sp, #8
    // Initialize radio context
    radio.cs_port = sx1262_cs_port;
 8001f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001f1c:	4a6d      	ldr	r2, [pc, #436]	@ (80020d4 <InitializeLoRa+0x1c0>)
 8001f1e:	601a      	str	r2, [r3, #0]
    radio.cs_pin = sx1262_cs_pin;
 8001f20:	4b6b      	ldr	r3, [pc, #428]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001f22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f26:	809a      	strh	r2, [r3, #4]
    radio.busy_port = sx1262_busy_port;
 8001f28:	4b69      	ldr	r3, [pc, #420]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001f2a:	4a6b      	ldr	r2, [pc, #428]	@ (80020d8 <InitializeLoRa+0x1c4>)
 8001f2c:	609a      	str	r2, [r3, #8]
    radio.busy_pin = sx1262_busy_pin;
 8001f2e:	4b68      	ldr	r3, [pc, #416]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001f30:	2210      	movs	r2, #16
 8001f32:	819a      	strh	r2, [r3, #12]
    radio.reset_port = sx1262_reset_port;
 8001f34:	4b66      	ldr	r3, [pc, #408]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001f36:	4a68      	ldr	r2, [pc, #416]	@ (80020d8 <InitializeLoRa+0x1c4>)
 8001f38:	611a      	str	r2, [r3, #16]
    radio.reset_pin = sx1262_reset_pin;
 8001f3a:	4b65      	ldr	r3, [pc, #404]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001f3c:	2280      	movs	r2, #128	@ 0x80
 8001f3e:	829a      	strh	r2, [r3, #20]
    radio.hspi = &hspi2;
 8001f40:	4b63      	ldr	r3, [pc, #396]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001f42:	4a66      	ldr	r2, [pc, #408]	@ (80020dc <InitializeLoRa+0x1c8>)
 8001f44:	619a      	str	r2, [r3, #24]

    // Initialize LoRa parameters
    lora_params.sf = SX126X_LORA_SF12;
 8001f46:	4b66      	ldr	r3, [pc, #408]	@ (80020e0 <InitializeLoRa+0x1cc>)
 8001f48:	220c      	movs	r2, #12
 8001f4a:	701a      	strb	r2, [r3, #0]
    lora_params.bw = SX126X_LORA_BW_125;
 8001f4c:	4b64      	ldr	r3, [pc, #400]	@ (80020e0 <InitializeLoRa+0x1cc>)
 8001f4e:	2204      	movs	r2, #4
 8001f50:	705a      	strb	r2, [r3, #1]
    lora_params.cr = SX126X_LORA_CR_4_7;
 8001f52:	4b63      	ldr	r3, [pc, #396]	@ (80020e0 <InitializeLoRa+0x1cc>)
 8001f54:	2203      	movs	r2, #3
 8001f56:	709a      	strb	r2, [r3, #2]
    lora_params.ldro = 0;
 8001f58:	4b61      	ldr	r3, [pc, #388]	@ (80020e0 <InitializeLoRa+0x1cc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	70da      	strb	r2, [r3, #3]

    pkt_params.preamble_len_in_symb = 12;
 8001f5e:	4b61      	ldr	r3, [pc, #388]	@ (80020e4 <InitializeLoRa+0x1d0>)
 8001f60:	220c      	movs	r2, #12
 8001f62:	801a      	strh	r2, [r3, #0]
    pkt_params.header_type = SX126X_LORA_PKT_EXPLICIT;
 8001f64:	4b5f      	ldr	r3, [pc, #380]	@ (80020e4 <InitializeLoRa+0x1d0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	709a      	strb	r2, [r3, #2]
    pkt_params.pld_len_in_bytes = 128;
 8001f6a:	4b5e      	ldr	r3, [pc, #376]	@ (80020e4 <InitializeLoRa+0x1d0>)
 8001f6c:	2280      	movs	r2, #128	@ 0x80
 8001f6e:	70da      	strb	r2, [r3, #3]
    pkt_params.crc_is_on = false;
 8001f70:	4b5c      	ldr	r3, [pc, #368]	@ (80020e4 <InitializeLoRa+0x1d0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	711a      	strb	r2, [r3, #4]
    pkt_params.invert_iq_is_on = false;
 8001f76:	4b5b      	ldr	r3, [pc, #364]	@ (80020e4 <InitializeLoRa+0x1d0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	715a      	strb	r2, [r3, #5]

    pa_params.pa_duty_cycle = 0x04;
 8001f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80020e8 <InitializeLoRa+0x1d4>)
 8001f7e:	2204      	movs	r2, #4
 8001f80:	701a      	strb	r2, [r3, #0]
    pa_params.hp_max = 0x07;
 8001f82:	4b59      	ldr	r3, [pc, #356]	@ (80020e8 <InitializeLoRa+0x1d4>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	705a      	strb	r2, [r3, #1]
    pa_params.device_sel = 0x00;
 8001f88:	4b57      	ldr	r3, [pc, #348]	@ (80020e8 <InitializeLoRa+0x1d4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	709a      	strb	r2, [r3, #2]
    pa_params.pa_lut = 0x01;
 8001f8e:	4b56      	ldr	r3, [pc, #344]	@ (80020e8 <InitializeLoRa+0x1d4>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	70da      	strb	r2, [r3, #3]

    // Initialize LoRa module
    sx126x_status_t status = sx126x_hal_reset(&radio);
 8001f94:	484e      	ldr	r0, [pc, #312]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001f96:	f008 fcad 	bl	800a8f4 <sx126x_hal_reset>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <InitializeLoRa+0x9a>
        SendUSBDebugMessage("LoRa reset failed");
 8001fa4:	4851      	ldr	r0, [pc, #324]	@ (80020ec <InitializeLoRa+0x1d8>)
 8001fa6:	f7ff f84b 	bl	8001040 <SendUSBDebugMessage>
        return false;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e08c      	b.n	80020c8 <InitializeLoRa+0x1b4>
    }
    HAL_Delay(250);
 8001fae:	20fa      	movs	r0, #250	@ 0xfa
 8001fb0:	f001 fd2a 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4846      	ldr	r0, [pc, #280]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001fb8:	f008 f8d0 	bl	800a15c <sx126x_set_standby>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8001fc0:	20fa      	movs	r0, #250	@ 0xfa
 8001fc2:	f001 fd21 	bl	8003a08 <HAL_Delay>

    status = sx126x_hal_wakeup(&radio);
 8001fc6:	4842      	ldr	r0, [pc, #264]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001fc8:	f008 fcb8 	bl	800a93c <sx126x_hal_wakeup>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8001fd0:	20fa      	movs	r0, #250	@ 0xfa
 8001fd2:	f001 fd19 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_reg_mode(&radio, SX126X_REG_MODE_LDO);
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	483d      	ldr	r0, [pc, #244]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001fda:	f008 f90f 	bl	800a1fc <sx126x_set_reg_mode>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8001fe2:	20fa      	movs	r0, #250	@ 0xfa
 8001fe4:	f001 fd10 	bl	8003a08 <HAL_Delay>

    status = sx126x_cal(&radio, SX126X_CAL_ALL);
 8001fe8:	217f      	movs	r1, #127	@ 0x7f
 8001fea:	4839      	ldr	r0, [pc, #228]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001fec:	f008 f91e 	bl	800a22c <sx126x_cal>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8001ff4:	20fa      	movs	r0, #250	@ 0xfa
 8001ff6:	f001 fd07 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4834      	ldr	r0, [pc, #208]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8001ffe:	f008 f8ad 	bl	800a15c <sx126x_set_standby>
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002006:	20fa      	movs	r0, #250	@ 0xfa
 8002008:	f001 fcfe 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_reg_mode(&radio, SX126X_REG_MODE_LDO);
 800200c:	2100      	movs	r1, #0
 800200e:	4830      	ldr	r0, [pc, #192]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8002010:	f008 f8f4 	bl	800a1fc <sx126x_set_reg_mode>
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002018:	20fa      	movs	r0, #250	@ 0xfa
 800201a:	f001 fcf5 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_pkt_type(&radio, SX126X_PKT_TYPE_LORA);
 800201e:	2101      	movs	r1, #1
 8002020:	482b      	ldr	r0, [pc, #172]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8002022:	f008 fa38 	bl	800a496 <sx126x_set_pkt_type>
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800202a:	20fa      	movs	r0, #250	@ 0xfa
 800202c:	f001 fcec 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_lora_mod_params(&radio, &lora_params);
 8002030:	492b      	ldr	r1, [pc, #172]	@ (80020e0 <InitializeLoRa+0x1cc>)
 8002032:	4827      	ldr	r0, [pc, #156]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8002034:	f008 fa63 	bl	800a4fe <sx126x_set_lora_mod_params>
 8002038:	4603      	mov	r3, r0
 800203a:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800203c:	20fa      	movs	r0, #250	@ 0xfa
 800203e:	f001 fce3 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 8002042:	4928      	ldr	r1, [pc, #160]	@ (80020e4 <InitializeLoRa+0x1d0>)
 8002044:	4822      	ldr	r0, [pc, #136]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8002046:	f008 fa8c 	bl	800a562 <sx126x_set_lora_pkt_params>
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800204e:	20fa      	movs	r0, #250	@ 0xfa
 8002050:	f001 fcda 	bl	8003a08 <HAL_Delay>

    sx126x_set_dio3_as_tcxo_ctrl(&radio, SX126X_TCXO_CTRL_2_4V, 5000);
 8002054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002058:	2104      	movs	r1, #4
 800205a:	481d      	ldr	r0, [pc, #116]	@ (80020d0 <InitializeLoRa+0x1bc>)
 800205c:	f008 f9c1 	bl	800a3e2 <sx126x_set_dio3_as_tcxo_ctrl>
    HAL_Delay(250);
 8002060:	20fa      	movs	r0, #250	@ 0xfa
 8002062:	f001 fcd1 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_lora_sync_word(&radio, 0x12);
 8002066:	2112      	movs	r1, #18
 8002068:	4819      	ldr	r0, [pc, #100]	@ (80020d0 <InitializeLoRa+0x1bc>)
 800206a:	f008 fb0f 	bl	800a68c <sx126x_set_lora_sync_word>
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002072:	20fa      	movs	r0, #250	@ 0xfa
 8002074:	f001 fcc8 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_rf_freq(&radio, frequency);
 8002078:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <InitializeLoRa+0x1dc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	4814      	ldr	r0, [pc, #80]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8002080:	f008 f9d3 	bl	800a42a <sx126x_set_rf_freq>
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 8002088:	20fa      	movs	r0, #250	@ 0xfa
 800208a:	f001 fcbd 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_pa_cfg(&radio, &pa_params);
 800208e:	4916      	ldr	r1, [pc, #88]	@ (80020e8 <InitializeLoRa+0x1d4>)
 8002090:	480f      	ldr	r0, [pc, #60]	@ (80020d0 <InitializeLoRa+0x1bc>)
 8002092:	f008 f8e3 	bl	800a25c <sx126x_set_pa_cfg>
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 800209a:	20fa      	movs	r0, #250	@ 0xfa
 800209c:	f001 fcb4 	bl	8003a08 <HAL_Delay>

    status = sx126x_set_dio_irq_params(&radio,
 80020a0:	2300      	movs	r3, #0
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2300      	movs	r3, #0
 80020a6:	2203      	movs	r2, #3
 80020a8:	2103      	movs	r1, #3
 80020aa:	4809      	ldr	r0, [pc, #36]	@ (80020d0 <InitializeLoRa+0x1bc>)
 80020ac:	f008 f95c 	bl	800a368 <sx126x_set_dio_irq_params>
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE,
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE, SX126X_IRQ_NONE,
            SX126X_IRQ_NONE);
    HAL_Delay(100);
 80020b4:	2064      	movs	r0, #100	@ 0x64
 80020b6:	f001 fca7 	bl	8003a08 <HAL_Delay>

    lora_initialized = true;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <InitializeLoRa+0x1e0>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("LoRa module initialized successfully");
 80020c0:	480d      	ldr	r0, [pc, #52]	@ (80020f8 <InitializeLoRa+0x1e4>)
 80020c2:	f7fe ffbd 	bl	8001040 <SendUSBDebugMessage>
    return true;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200009dc 	.word	0x200009dc
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40020800 	.word	0x40020800
 80020dc:	20000300 	.word	0x20000300
 80020e0:	200009f8 	.word	0x200009f8
 80020e4:	200009fc 	.word	0x200009fc
 80020e8:	20000a04 	.word	0x20000a04
 80020ec:	08012f7c 	.word	0x08012f7c
 80020f0:	20000004 	.word	0x20000004
 80020f4:	20000a08 	.word	0x20000a08
 80020f8:	08012f90 	.word	0x08012f90

080020fc <SendUARTResponse>:

/**
  * @brief Отправка ответа по UART
  */
void SendUARTResponse(const char* response)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), 100);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7fe f8c3 	bl	8000290 <strlen>
 800210a:	4603      	mov	r3, r0
 800210c:	b29a      	uxth	r2, r3
 800210e:	2364      	movs	r3, #100	@ 0x64
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4805      	ldr	r0, [pc, #20]	@ (8002128 <SendUARTResponse+0x2c>)
 8002114:	f005 fbe8 	bl	80078e8 <HAL_UART_Transmit>
    HAL_Delay(10);
 8002118:	200a      	movs	r0, #10
 800211a:	f001 fc75 	bl	8003a08 <HAL_Delay>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200003a0 	.word	0x200003a0

0800212c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	  /* USER CODE END 1 */

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8002130:	f001 fbf8 	bl	8003924 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 8002134:	f000 f8b4 	bl	80022a0 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8002138:	f000 f9f4 	bl	8002524 <MX_GPIO_Init>
	  MX_USART1_UART_Init();
 800213c:	f000 f9c8 	bl	80024d0 <MX_USART1_UART_Init>
	  MX_USB_DEVICE_Init();
 8002140:	f00a fc16 	bl	800c970 <MX_USB_DEVICE_Init>
	  MX_DAC_Init();
 8002144:	f000 f916 	bl	8002374 <MX_DAC_Init>
	  MX_TIM3_Init();
 8002148:	f000 f974 	bl	8002434 <MX_TIM3_Init>
	  MX_FSMC_Init();
 800214c:	f000 fac4 	bl	80026d8 <MX_FSMC_Init>
	  MX_SPI2_Init();
 8002150:	f000 f93a 	bl	80023c8 <MX_SPI2_Init>
	  /* USER CODE BEGIN 2 */
	  HAL_TIM_Base_Start(&htim3);
 8002154:	4841      	ldr	r0, [pc, #260]	@ (800225c <main+0x130>)
 8002156:	f004 ff55 	bl	8007004 <HAL_TIM_Base_Start>
	  srand(HAL_GetTick());
 800215a:	f001 fc49 	bl	80039f0 <HAL_GetTick>
 800215e:	4603      	mov	r3, r0
 8002160:	4618      	mov	r0, r3
 8002162:	f00b fb2f 	bl	800d7c4 <srand>

	  HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 8002166:	2201      	movs	r2, #1
 8002168:	493d      	ldr	r1, [pc, #244]	@ (8002260 <main+0x134>)
 800216a:	483e      	ldr	r0, [pc, #248]	@ (8002264 <main+0x138>)
 800216c:	f005 fc47 	bl	80079fe <HAL_UART_Receive_IT>


	  // Загружаем параметры из энергонезависимой памяти при старте
	  HAL_Delay(1000);
 8002170:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002174:	f001 fc48 	bl	8003a08 <HAL_Delay>
	  LoadParametersFromFlash();
 8002178:	f000 fea8 	bl	8002ecc <LoadParametersFromFlash>
	  HAL_Delay(1000);
 800217c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002180:	f001 fc42 	bl	8003a08 <HAL_Delay>


	  InitializeLoRa();
 8002184:	f7ff fec6 	bl	8001f14 <InitializeLoRa>
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1) {


	      if (new_data_received) {
 8002188:	4b37      	ldr	r3, [pc, #220]	@ (8002268 <main+0x13c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d028      	beq.n	80021e4 <main+0xb8>

	          uart_message_received = 0;
 8002192:	4b36      	ldr	r3, [pc, #216]	@ (800226c <main+0x140>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]

	          if (strncmp((char*)usb_rx_buffer, "SETPARAMS=", 10) == 0) {
 8002198:	220a      	movs	r2, #10
 800219a:	4935      	ldr	r1, [pc, #212]	@ (8002270 <main+0x144>)
 800219c:	4835      	ldr	r0, [pc, #212]	@ (8002274 <main+0x148>)
 800219e:	f00d fa1b 	bl	800f5d8 <strncmp>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <main+0x8a>
	              ParseParameters((char*)usb_rx_buffer + 10);
 80021a8:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <main+0x14c>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe ffbe 	bl	800112c <ParseParameters>
	              SendParametersResponse();
 80021b0:	f7ff f986 	bl	80014c0 <SendParametersResponse>
 80021b4:	e00a      	b.n	80021cc <main+0xa0>
	          }
	          else if (strncmp((char*)usb_rx_buffer, "1", 1) == 0) {
 80021b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <main+0x148>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b2f      	ldr	r3, [pc, #188]	@ (800227c <main+0x150>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <main+0xa0>
	              ProcessUSBCommand('1');
 80021c6:	2031      	movs	r0, #49	@ 0x31
 80021c8:	f7fe ff9a 	bl	8001100 <ProcessUSBCommand>
	          }
	          memset((void*)usb_rx_buffer, 0, USB_RX_BUFFER_SIZE);
 80021cc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021d0:	2100      	movs	r1, #0
 80021d2:	4828      	ldr	r0, [pc, #160]	@ (8002274 <main+0x148>)
 80021d4:	f00d f9eb 	bl	800f5ae <memset>
	          usb_rx_index = 0;
 80021d8:	4b29      	ldr	r3, [pc, #164]	@ (8002280 <main+0x154>)
 80021da:	2200      	movs	r2, #0
 80021dc:	801a      	strh	r2, [r3, #0]
	          new_data_received = 0;
 80021de:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <main+0x13c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
	      }

	      // Проверяем, нужно ли выполнить расчет толщины
	      if (calculate_thickness_requested && parameters_initialized) {
 80021e4:	4b27      	ldr	r3, [pc, #156]	@ (8002284 <main+0x158>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00b      	beq.n	8002204 <main+0xd8>
 80021ec:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <main+0x15c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <main+0xd8>
	          calculate_thickness_requested = false;
 80021f4:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <main+0x158>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
	          ProcessDataByMethod();
 80021fa:	f001 fb07 	bl	800380c <ProcessDataByMethod>
	          SendUSBDebugMessage("Thickness calculation completed");
 80021fe:	4823      	ldr	r0, [pc, #140]	@ (800228c <main+0x160>)
 8002200:	f7fe ff1e 	bl	8001040 <SendUSBDebugMessage>
	      }

	      // Обработка UART от дежурного МК
	      if(uart_message_received) {
 8002204:	4b19      	ldr	r3, [pc, #100]	@ (800226c <main+0x140>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <main+0xf6>


	          uart_message_received = 0;
 800220e:	4b17      	ldr	r3, [pc, #92]	@ (800226c <main+0x140>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
	          ProcessUARTCommand((uint8_t*)uart_rx_data, uart_rx_len);
 8002214:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <main+0x164>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	4619      	mov	r1, r3
 800221c:	481d      	ldr	r0, [pc, #116]	@ (8002294 <main+0x168>)
 800221e:	f7ff fa1d 	bl	800165c <ProcessUARTCommand>
	      }

	      // Таймаут UART приема
	      if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_RX_TIMEOUT_MS) {
 8002222:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <main+0x16c>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d014      	beq.n	8002254 <main+0x128>
 800222a:	f001 fbe1 	bl	80039f0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <main+0x170>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	@ 0x64
 8002238:	d90c      	bls.n	8002254 <main+0x128>
	          uart_rx_pos = 0;
 800223a:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <main+0x16c>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
	          memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8002240:	2280      	movs	r2, #128	@ 0x80
 8002242:	2100      	movs	r1, #0
 8002244:	4806      	ldr	r0, [pc, #24]	@ (8002260 <main+0x134>)
 8002246:	f00d f9b2 	bl	800f5ae <memset>
	          HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 800224a:	2201      	movs	r2, #1
 800224c:	4904      	ldr	r1, [pc, #16]	@ (8002260 <main+0x134>)
 800224e:	4805      	ldr	r0, [pc, #20]	@ (8002264 <main+0x138>)
 8002250:	f005 fbd5 	bl	80079fe <HAL_UART_Receive_IT>
	      }

	      HAL_Delay(10);
 8002254:	200a      	movs	r0, #10
 8002256:	f001 fbd7 	bl	8003a08 <HAL_Delay>
	      if (new_data_received) {
 800225a:	e795      	b.n	8002188 <main+0x5c>
 800225c:	20000358 	.word	0x20000358
 8002260:	200008d0 	.word	0x200008d0
 8002264:	200003a0 	.word	0x200003a0
 8002268:	2001d6e2 	.word	0x2001d6e2
 800226c:	200009d9 	.word	0x200009d9
 8002270:	08013044 	.word	0x08013044
 8002274:	2001d5b4 	.word	0x2001d5b4
 8002278:	2001d5be 	.word	0x2001d5be
 800227c:	08013050 	.word	0x08013050
 8002280:	2001d6e0 	.word	0x2001d6e0
 8002284:	20000a65 	.word	0x20000a65
 8002288:	20000a64 	.word	0x20000a64
 800228c:	08013054 	.word	0x08013054
 8002290:	200009d8 	.word	0x200009d8
 8002294:	20000958 	.word	0x20000958
 8002298:	20000950 	.word	0x20000950
 800229c:	20000954 	.word	0x20000954

080022a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b094      	sub	sp, #80	@ 0x50
 80022a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	2230      	movs	r2, #48	@ 0x30
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f00d f97d 	bl	800f5ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	4b28      	ldr	r3, [pc, #160]	@ (800236c <SystemClock_Config+0xcc>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	4a27      	ldr	r2, [pc, #156]	@ (800236c <SystemClock_Config+0xcc>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d4:	4b25      	ldr	r3, [pc, #148]	@ (800236c <SystemClock_Config+0xcc>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e0:	2300      	movs	r3, #0
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <SystemClock_Config+0xd0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a21      	ldr	r2, [pc, #132]	@ (8002370 <SystemClock_Config+0xd0>)
 80022ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <SystemClock_Config+0xd0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002300:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002306:	2302      	movs	r3, #2
 8002308:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800230a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002310:	2308      	movs	r3, #8
 8002312:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002314:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002318:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800231a:	2302      	movs	r3, #2
 800231c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800231e:	2307      	movs	r3, #7
 8002320:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002322:	f107 0320 	add.w	r3, r7, #32
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fbcc 	bl	8005ac4 <HAL_RCC_OscConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002332:	f000 fa31 	bl	8002798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002336:	230f      	movs	r3, #15
 8002338:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800233a:	2302      	movs	r3, #2
 800233c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002342:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002346:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800234c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	2105      	movs	r1, #5
 8002354:	4618      	mov	r0, r3
 8002356:	f003 fe2d 	bl	8005fb4 <HAL_RCC_ClockConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002360:	f000 fa1a 	bl	8002798 <Error_Handler>
  }
}
 8002364:	bf00      	nop
 8002366:	3750      	adds	r7, #80	@ 0x50
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	40007000 	.word	0x40007000

08002374 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800237a:	463b      	mov	r3, r7
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002382:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <MX_DAC_Init+0x4c>)
 8002384:	4a0f      	ldr	r2, [pc, #60]	@ (80023c4 <MX_DAC_Init+0x50>)
 8002386:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002388:	480d      	ldr	r0, [pc, #52]	@ (80023c0 <MX_DAC_Init+0x4c>)
 800238a:	f001 fc72 	bl	8003c72 <HAL_DAC_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002394:	f000 fa00 	bl	8002798 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002398:	2300      	movs	r3, #0
 800239a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80023a0:	463b      	mov	r3, r7
 80023a2:	2200      	movs	r2, #0
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	@ (80023c0 <MX_DAC_Init+0x4c>)
 80023a8:	f001 fc85 	bl	8003cb6 <HAL_DAC_ConfigChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80023b2:	f000 f9f1 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200002ec 	.word	0x200002ec
 80023c4:	40007400 	.word	0x40007400

080023c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80023cc:	4b17      	ldr	r3, [pc, #92]	@ (800242c <MX_SPI2_Init+0x64>)
 80023ce:	4a18      	ldr	r2, [pc, #96]	@ (8002430 <MX_SPI2_Init+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023d2:	4b16      	ldr	r3, [pc, #88]	@ (800242c <MX_SPI2_Init+0x64>)
 80023d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023da:	4b14      	ldr	r3, [pc, #80]	@ (800242c <MX_SPI2_Init+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e0:	4b12      	ldr	r3, [pc, #72]	@ (800242c <MX_SPI2_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e6:	4b11      	ldr	r3, [pc, #68]	@ (800242c <MX_SPI2_Init+0x64>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <MX_SPI2_Init+0x64>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <MX_SPI2_Init+0x64>)
 80023f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <MX_SPI2_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002400:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <MX_SPI2_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <MX_SPI2_Init+0x64>)
 8002408:	2200      	movs	r2, #0
 800240a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800240c:	4b07      	ldr	r3, [pc, #28]	@ (800242c <MX_SPI2_Init+0x64>)
 800240e:	2200      	movs	r2, #0
 8002410:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <MX_SPI2_Init+0x64>)
 8002414:	220a      	movs	r2, #10
 8002416:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002418:	4804      	ldr	r0, [pc, #16]	@ (800242c <MX_SPI2_Init+0x64>)
 800241a:	f003 ffeb 	bl	80063f4 <HAL_SPI_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002424:	f000 f9b8 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000300 	.word	0x20000300
 8002430:	40003800 	.word	0x40003800

08002434 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002448:	463b      	mov	r3, r7
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002450:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <MX_TIM3_Init+0x94>)
 8002452:	4a1e      	ldr	r2, [pc, #120]	@ (80024cc <MX_TIM3_Init+0x98>)
 8002454:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002456:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <MX_TIM3_Init+0x94>)
 8002458:	22a7      	movs	r2, #167	@ 0xa7
 800245a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <MX_TIM3_Init+0x94>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <MX_TIM3_Init+0x94>)
 8002464:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002468:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246a:	4b17      	ldr	r3, [pc, #92]	@ (80024c8 <MX_TIM3_Init+0x94>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002470:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <MX_TIM3_Init+0x94>)
 8002472:	2280      	movs	r2, #128	@ 0x80
 8002474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002476:	4814      	ldr	r0, [pc, #80]	@ (80024c8 <MX_TIM3_Init+0x94>)
 8002478:	f004 fd74 	bl	8006f64 <HAL_TIM_Base_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002482:	f000 f989 	bl	8002798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002486:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800248a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	4619      	mov	r1, r3
 8002492:	480d      	ldr	r0, [pc, #52]	@ (80024c8 <MX_TIM3_Init+0x94>)
 8002494:	f004 ff0e 	bl	80072b4 <HAL_TIM_ConfigClockSource>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800249e:	f000 f97b 	bl	8002798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024aa:	463b      	mov	r3, r7
 80024ac:	4619      	mov	r1, r3
 80024ae:	4806      	ldr	r0, [pc, #24]	@ (80024c8 <MX_TIM3_Init+0x94>)
 80024b0:	f005 f93a 	bl	8007728 <HAL_TIMEx_MasterConfigSynchronization>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80024ba:	f000 f96d 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000358 	.word	0x20000358
 80024cc:	40000400 	.word	0x40000400

080024d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <MX_USART1_UART_Init+0x4c>)
 80024d6:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <MX_USART1_UART_Init+0x50>)
 80024d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <MX_USART1_UART_Init+0x4c>)
 80024dc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80024e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <MX_USART1_UART_Init+0x4c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <MX_USART1_UART_Init+0x4c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <MX_USART1_UART_Init+0x4c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <MX_USART1_UART_Init+0x4c>)
 80024f6:	220c      	movs	r2, #12
 80024f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <MX_USART1_UART_Init+0x4c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <MX_USART1_UART_Init+0x4c>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002506:	4805      	ldr	r0, [pc, #20]	@ (800251c <MX_USART1_UART_Init+0x4c>)
 8002508:	f005 f99e 	bl	8007848 <HAL_UART_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002512:	f000 f941 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200003a0 	.word	0x200003a0
 8002520:	40011000 	.word	0x40011000

08002524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08c      	sub	sp, #48	@ 0x30
 8002528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252a:	f107 031c 	add.w	r3, r7, #28
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	4b60      	ldr	r3, [pc, #384]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a5f      	ldr	r2, [pc, #380]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 8002544:	f043 0310 	orr.w	r3, r3, #16
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b5d      	ldr	r3, [pc, #372]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	4b59      	ldr	r3, [pc, #356]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a58      	ldr	r2, [pc, #352]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 8002560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b56      	ldr	r3, [pc, #344]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b52      	ldr	r3, [pc, #328]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	4a51      	ldr	r2, [pc, #324]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6313      	str	r3, [r2, #48]	@ 0x30
 8002582:	4b4f      	ldr	r3, [pc, #316]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b4b      	ldr	r3, [pc, #300]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	4a4a      	ldr	r2, [pc, #296]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	6313      	str	r3, [r2, #48]	@ 0x30
 800259e:	4b48      	ldr	r3, [pc, #288]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	4b44      	ldr	r3, [pc, #272]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	4a43      	ldr	r2, [pc, #268]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ba:	4b41      	ldr	r3, [pc, #260]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	4b3d      	ldr	r3, [pc, #244]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	4a3c      	ldr	r2, [pc, #240]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 80025d0:	f043 0308 	orr.w	r3, r3, #8
 80025d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d6:	4b3a      	ldr	r3, [pc, #232]	@ (80026c0 <MX_GPIO_Init+0x19c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	f248 0120 	movw	r1, #32800	@ 0x8020
 80025e8:	4836      	ldr	r0, [pc, #216]	@ (80026c4 <MX_GPIO_Init+0x1a0>)
 80025ea:	f001 ffff 	bl	80045ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80025ee:	2200      	movs	r2, #0
 80025f0:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 80025f4:	4834      	ldr	r0, [pc, #208]	@ (80026c8 <MX_GPIO_Init+0x1a4>)
 80025f6:	f001 fff9 	bl	80045ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80025fa:	2200      	movs	r2, #0
 80025fc:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 8002600:	4832      	ldr	r0, [pc, #200]	@ (80026cc <MX_GPIO_Init+0x1a8>)
 8002602:	f001 fff3 	bl	80045ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8002606:	2200      	movs	r2, #0
 8002608:	2140      	movs	r1, #64	@ 0x40
 800260a:	4831      	ldr	r0, [pc, #196]	@ (80026d0 <MX_GPIO_Init+0x1ac>)
 800260c:	f001 ffee 	bl	80045ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8002610:	2306      	movs	r3, #6
 8002612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	4619      	mov	r1, r3
 8002622:	482c      	ldr	r0, [pc, #176]	@ (80026d4 <MX_GPIO_Init+0x1b0>)
 8002624:	f001 fe2e 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8002628:	f248 0320 	movw	r3, #32800	@ 0x8020
 800262c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	4820      	ldr	r0, [pc, #128]	@ (80026c4 <MX_GPIO_Init+0x1a0>)
 8002642:	f001 fe1f 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002646:	2310      	movs	r3, #16
 8002648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	4619      	mov	r1, r3
 8002658:	481c      	ldr	r0, [pc, #112]	@ (80026cc <MX_GPIO_Init+0x1a8>)
 800265a:	f001 fe13 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 800265e:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8002662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002664:	2301      	movs	r3, #1
 8002666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	4814      	ldr	r0, [pc, #80]	@ (80026c8 <MX_GPIO_Init+0x1a4>)
 8002678:	f001 fe04 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800267c:	f44f 637c 	mov.w	r3, #4032	@ 0xfc0
 8002680:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002682:	2301      	movs	r3, #1
 8002684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	4619      	mov	r1, r3
 8002694:	480d      	ldr	r0, [pc, #52]	@ (80026cc <MX_GPIO_Init+0x1a8>)
 8002696:	f001 fdf5 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800269a:	2340      	movs	r3, #64	@ 0x40
 800269c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269e:	2301      	movs	r3, #1
 80026a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	4619      	mov	r1, r3
 80026b0:	4807      	ldr	r0, [pc, #28]	@ (80026d0 <MX_GPIO_Init+0x1ac>)
 80026b2:	f001 fde7 	bl	8004284 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80026b6:	bf00      	nop
 80026b8:	3730      	adds	r7, #48	@ 0x30
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40021000 	.word	0x40021000

080026d8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
 80026ec:	615a      	str	r2, [r3, #20]
 80026ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80026f0:	4b27      	ldr	r3, [pc, #156]	@ (8002790 <MX_FSMC_Init+0xb8>)
 80026f2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80026f6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80026f8:	4b25      	ldr	r3, [pc, #148]	@ (8002790 <MX_FSMC_Init+0xb8>)
 80026fa:	4a26      	ldr	r2, [pc, #152]	@ (8002794 <MX_FSMC_Init+0xbc>)
 80026fc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <MX_FSMC_Init+0xb8>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8002704:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <MX_FSMC_Init+0xb8>)
 8002706:	2202      	movs	r2, #2
 8002708:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 800270a:	4b21      	ldr	r3, [pc, #132]	@ (8002790 <MX_FSMC_Init+0xb8>)
 800270c:	2204      	movs	r2, #4
 800270e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002710:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <MX_FSMC_Init+0xb8>)
 8002712:	2210      	movs	r2, #16
 8002714:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002716:	4b1e      	ldr	r3, [pc, #120]	@ (8002790 <MX_FSMC_Init+0xb8>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800271c:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <MX_FSMC_Init+0xb8>)
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002722:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <MX_FSMC_Init+0xb8>)
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002728:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <MX_FSMC_Init+0xb8>)
 800272a:	2200      	movs	r2, #0
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800272e:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <MX_FSMC_Init+0xb8>)
 8002730:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002734:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002736:	4b16      	ldr	r3, [pc, #88]	@ (8002790 <MX_FSMC_Init+0xb8>)
 8002738:	2200      	movs	r2, #0
 800273a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800273c:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <MX_FSMC_Init+0xb8>)
 800273e:	2200      	movs	r2, #0
 8002740:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002742:	4b13      	ldr	r3, [pc, #76]	@ (8002790 <MX_FSMC_Init+0xb8>)
 8002744:	2200      	movs	r2, #0
 8002746:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <MX_FSMC_Init+0xb8>)
 800274a:	2200      	movs	r2, #0
 800274c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <MX_FSMC_Init+0xb8>)
 8002750:	2200      	movs	r2, #0
 8002752:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002754:	230f      	movs	r3, #15
 8002756:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002758:	230f      	movs	r3, #15
 800275a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800275c:	23ff      	movs	r3, #255	@ 0xff
 800275e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002760:	230f      	movs	r3, #15
 8002762:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002764:	2310      	movs	r3, #16
 8002766:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002768:	2311      	movs	r3, #17
 800276a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2200      	movs	r2, #0
 8002774:	4619      	mov	r1, r3
 8002776:	4806      	ldr	r0, [pc, #24]	@ (8002790 <MX_FSMC_Init+0xb8>)
 8002778:	f004 fbac 	bl	8006ed4 <HAL_SRAM_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002782:	f000 f809 	bl	8002798 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002786:	bf00      	nop
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200003e8 	.word	0x200003e8
 8002794:	a0000104 	.word	0xa0000104

08002798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <Error_Handler+0x4>

080027a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <HAL_MspInit+0x4c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	4a0f      	ldr	r2, [pc, #60]	@ (80027ec <HAL_MspInit+0x4c>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b6:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <HAL_MspInit+0x4c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_MspInit+0x4c>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a08      	ldr	r2, [pc, #32]	@ (80027ec <HAL_MspInit+0x4c>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_MspInit+0x4c>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800

080027f0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	@ 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a17      	ldr	r2, [pc, #92]	@ (800286c <HAL_DAC_MspInit+0x7c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d127      	bne.n	8002862 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	4b16      	ldr	r3, [pc, #88]	@ (8002870 <HAL_DAC_MspInit+0x80>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <HAL_DAC_MspInit+0x80>)
 800281c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002820:	6413      	str	r3, [r2, #64]	@ 0x40
 8002822:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <HAL_DAC_MspInit+0x80>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <HAL_DAC_MspInit+0x80>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	4a0e      	ldr	r2, [pc, #56]	@ (8002870 <HAL_DAC_MspInit+0x80>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	@ 0x30
 800283e:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <HAL_DAC_MspInit+0x80>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800284a:	2310      	movs	r3, #16
 800284c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800284e:	2303      	movs	r3, #3
 8002850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4619      	mov	r1, r3
 800285c:	4805      	ldr	r0, [pc, #20]	@ (8002874 <HAL_DAC_MspInit+0x84>)
 800285e:	f001 fd11 	bl	8004284 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8002862:	bf00      	nop
 8002864:	3728      	adds	r7, #40	@ 0x28
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40007400 	.word	0x40007400
 8002870:	40023800 	.word	0x40023800
 8002874:	40020000 	.word	0x40020000

08002878 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	@ 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1d      	ldr	r2, [pc, #116]	@ (800290c <HAL_SPI_MspInit+0x94>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d134      	bne.n	8002904 <HAL_SPI_MspInit+0x8c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	4b1c      	ldr	r3, [pc, #112]	@ (8002910 <HAL_SPI_MspInit+0x98>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002910 <HAL_SPI_MspInit+0x98>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028aa:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <HAL_SPI_MspInit+0x98>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_SPI_MspInit+0x98>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a14      	ldr	r2, [pc, #80]	@ (8002910 <HAL_SPI_MspInit+0x98>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <HAL_SPI_MspInit+0x98>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028d2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2303      	movs	r3, #3
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028e4:	2305      	movs	r3, #5
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4809      	ldr	r0, [pc, #36]	@ (8002914 <HAL_SPI_MspInit+0x9c>)
 80028f0:	f001 fcc8 	bl	8004284 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2100      	movs	r1, #0
 80028f8:	2024      	movs	r0, #36	@ 0x24
 80028fa:	f001 f984 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80028fe:	2024      	movs	r0, #36	@ 0x24
 8002900:	f001 f99d 	bl	8003c3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002904:	bf00      	nop
 8002906:	3728      	adds	r7, #40	@ 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40003800 	.word	0x40003800
 8002910:	40023800 	.word	0x40023800
 8002914:	40020400 	.word	0x40020400

08002918 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0e      	ldr	r2, [pc, #56]	@ (8002960 <HAL_TIM_Base_MspInit+0x48>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d115      	bne.n	8002956 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_TIM_Base_MspInit+0x4c>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	4a0c      	ldr	r2, [pc, #48]	@ (8002964 <HAL_TIM_Base_MspInit+0x4c>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	6413      	str	r3, [r2, #64]	@ 0x40
 800293a:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <HAL_TIM_Base_MspInit+0x4c>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2100      	movs	r1, #0
 800294a:	201d      	movs	r0, #29
 800294c:	f001 f95b 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002950:	201d      	movs	r0, #29
 8002952:	f001 f974 	bl	8003c3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40000400 	.word	0x40000400
 8002964:	40023800 	.word	0x40023800

08002968 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	@ 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <HAL_UART_MspInit+0x94>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d133      	bne.n	80029f2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a00 <HAL_UART_MspInit+0x98>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	4a1b      	ldr	r2, [pc, #108]	@ (8002a00 <HAL_UART_MspInit+0x98>)
 8002994:	f043 0310 	orr.w	r3, r3, #16
 8002998:	6453      	str	r3, [r2, #68]	@ 0x44
 800299a:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <HAL_UART_MspInit+0x98>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <HAL_UART_MspInit+0x98>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a14      	ldr	r2, [pc, #80]	@ (8002a00 <HAL_UART_MspInit+0x98>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_UART_MspInit+0x98>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029c2:	23c0      	movs	r3, #192	@ 0xc0
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029d2:	2307      	movs	r3, #7
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	4809      	ldr	r0, [pc, #36]	@ (8002a04 <HAL_UART_MspInit+0x9c>)
 80029de:	f001 fc51 	bl	8004284 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	2025      	movs	r0, #37	@ 0x25
 80029e8:	f001 f90d 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029ec:	2025      	movs	r0, #37	@ 0x25
 80029ee:	f001 f926 	bl	8003c3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80029f2:	bf00      	nop
 80029f4:	3728      	adds	r7, #40	@ 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40011000 	.word	0x40011000
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40020400 	.word	0x40020400

08002a08 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a90 <HAL_FSMC_MspInit+0x88>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d131      	bne.n	8002a88 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002a24:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <HAL_FSMC_MspInit+0x88>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <HAL_FSMC_MspInit+0x8c>)
 8002a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a32:	4a18      	ldr	r2, [pc, #96]	@ (8002a94 <HAL_FSMC_MspInit+0x8c>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a3a:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <HAL_FSMC_MspInit+0x8c>)
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002a46:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002a4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a58:	230c      	movs	r3, #12
 8002a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	480d      	ldr	r0, [pc, #52]	@ (8002a98 <HAL_FSMC_MspInit+0x90>)
 8002a62:	f001 fc0f 	bl	8004284 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002a66:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 8002a6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a78:	230c      	movs	r3, #12
 8002a7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4806      	ldr	r0, [pc, #24]	@ (8002a9c <HAL_FSMC_MspInit+0x94>)
 8002a82:	f001 fbff 	bl	8004284 <HAL_GPIO_Init>
 8002a86:	e000      	b.n	8002a8a <HAL_FSMC_MspInit+0x82>
    return;
 8002a88:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000a14 	.word	0x20000a14
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40020c00 	.word	0x40020c00

08002aa0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002aa8:	f7ff ffae 	bl	8002a08 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <NMI_Handler+0x4>

08002abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <HardFault_Handler+0x4>

08002ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <MemManage_Handler+0x4>

08002acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <BusFault_Handler+0x4>

08002ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <UsageFault_Handler+0x4>

08002adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b0a:	f000 ff5d 	bl	80039c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b18:	4802      	ldr	r0, [pc, #8]	@ (8002b24 <TIM3_IRQHandler+0x10>)
 8002b1a:	f004 fadb 	bl	80070d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000358 	.word	0x20000358

08002b28 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002b2c:	4802      	ldr	r0, [pc, #8]	@ (8002b38 <SPI2_IRQHandler+0x10>)
 8002b2e:	f003 ffd7 	bl	8006ae0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000300 	.word	0x20000300

08002b3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b40:	4802      	ldr	r0, [pc, #8]	@ (8002b4c <USART1_IRQHandler+0x10>)
 8002b42:	f004 ff81 	bl	8007a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200003a0 	.word	0x200003a0

08002b50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b54:	4802      	ldr	r0, [pc, #8]	@ (8002b60 <OTG_FS_IRQHandler+0x10>)
 8002b56:	f001 fea6 	bl	80048a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	2001e8e4 	.word	0x2001e8e4

08002b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return 1;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_kill>:

int _kill(int pid, int sig)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b7e:	f00c fe0d 	bl	800f79c <__errno>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2216      	movs	r2, #22
 8002b86:	601a      	str	r2, [r3, #0]
  return -1;
 8002b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_exit>:

void _exit (int status)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ffe7 	bl	8002b74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ba6:	bf00      	nop
 8002ba8:	e7fd      	b.n	8002ba6 <_exit+0x12>

08002baa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	e00a      	b.n	8002bd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	4601      	mov	r1, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	60ba      	str	r2, [r7, #8]
 8002bc8:	b2ca      	uxtb	r2, r1
 8002bca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	dbf0      	blt.n	8002bbc <_read+0x12>
  }

  return len;
 8002bda:	687b      	ldr	r3, [r7, #4]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	e009      	b.n	8002c0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	60ba      	str	r2, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	dbf1      	blt.n	8002bf6 <_write+0x12>
  }
  return len;
 8002c12:	687b      	ldr	r3, [r7, #4]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_close>:

int _close(int file)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c44:	605a      	str	r2, [r3, #4]
  return 0;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <_isatty>:

int _isatty(int file)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c5c:	2301      	movs	r3, #1
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <_sbrk+0x5c>)
 8002c8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <_sbrk+0x60>)
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <_sbrk+0x64>)
 8002ca2:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <_sbrk+0x68>)
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <_sbrk+0x64>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d207      	bcs.n	8002cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb4:	f00c fd72 	bl	800f79c <__errno>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	220c      	movs	r2, #12
 8002cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e009      	b.n	8002cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cca:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a05      	ldr	r2, [pc, #20]	@ (8002ce8 <_sbrk+0x64>)
 8002cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20020000 	.word	0x20020000
 8002ce4:	00000400 	.word	0x00000400
 8002ce8:	20000a18 	.word	0x20000a18
 8002cec:	2001f138 	.word	0x2001f138

08002cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <SystemInit+0x20>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfa:	4a05      	ldr	r2, [pc, #20]	@ (8002d10 <SystemInit+0x20>)
 8002cfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <Read_Thermocouple_Temperature>:
bool thermocouple_error = false;

/**
  * @brief Чтение сырых данных с термопары
  */
uint16_t Read_Thermocouple_Temperature(void) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	@ 0x28
 8002d18:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1a:	f107 0310 	add.w	r3, r7, #16
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	60da      	str	r2, [r3, #12]
 8002d28:	611a      	str	r2, [r3, #16]
    uint16_t raw_data = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Настройка PC11 (DATA) как входа
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3c:	f107 0310 	add.w	r3, r7, #16
 8002d40:	4619      	mov	r1, r3
 8002d42:	482e      	ldr	r0, [pc, #184]	@ (8002dfc <Read_Thermocouple_Temperature+0xe8>)
 8002d44:	f001 fa9e 	bl	8004284 <HAL_GPIO_Init>

    // Активация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d4e:	482b      	ldr	r0, [pc, #172]	@ (8002dfc <Read_Thermocouple_Temperature+0xe8>)
 8002d50:	f001 fc4c 	bl	80045ec <HAL_GPIO_WritePin>

    for(volatile int i = 0; i < 10; i++);
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e002      	b.n	8002d60 <Read_Thermocouple_Temperature+0x4c>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b09      	cmp	r3, #9
 8002d64:	ddf9      	ble.n	8002d5a <Read_Thermocouple_Temperature+0x46>

    // Чтение 16 бит данных
    for(uint8_t i = 0; i < 16; i++) {
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002d6c:	e037      	b.n	8002dde <Read_Thermocouple_Temperature+0xca>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d74:	4821      	ldr	r0, [pc, #132]	@ (8002dfc <Read_Thermocouple_Temperature+0xe8>)
 8002d76:	f001 fc39 	bl	80045ec <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	e002      	b.n	8002d86 <Read_Thermocouple_Temperature+0x72>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	3301      	adds	r3, #1
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	ddf9      	ble.n	8002d80 <Read_Thermocouple_Temperature+0x6c>

        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) {
 8002d8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d90:	481a      	ldr	r0, [pc, #104]	@ (8002dfc <Read_Thermocouple_Temperature+0xe8>)
 8002d92:	f001 fc13 	bl	80045bc <HAL_GPIO_ReadPin>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00c      	beq.n	8002db6 <Read_Thermocouple_Temperature+0xa2>
            raw_data |= (1 << (15 - i));
 8002d9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002da0:	f1c3 030f 	rsb	r3, r3, #15
 8002da4:	2201      	movs	r2, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002db0:	4313      	orrs	r3, r2
 8002db2:	b21b      	sxth	r3, r3
 8002db4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002db6:	2200      	movs	r2, #0
 8002db8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002dbc:	480f      	ldr	r0, [pc, #60]	@ (8002dfc <Read_Thermocouple_Temperature+0xe8>)
 8002dbe:	f001 fc15 	bl	80045ec <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	e002      	b.n	8002dce <Read_Thermocouple_Temperature+0xba>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	ddf9      	ble.n	8002dc8 <Read_Thermocouple_Temperature+0xb4>
    for(uint8_t i = 0; i < 16; i++) {
 8002dd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002dde:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	d9c3      	bls.n	8002d6e <Read_Thermocouple_Temperature+0x5a>
    }

    // Деактивация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002de6:	2201      	movs	r2, #1
 8002de8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dec:	4803      	ldr	r0, [pc, #12]	@ (8002dfc <Read_Thermocouple_Temperature+0xe8>)
 8002dee:	f001 fbfd 	bl	80045ec <HAL_GPIO_WritePin>

    return raw_data;
 8002df2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3728      	adds	r7, #40	@ 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40020800 	.word	0x40020800

08002e00 <Get_Thermocouple_Temperature>:

/**
  * @brief Получение температуры термопары в градусах Цельсия
  */
float Get_Thermocouple_Temperature(void) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
    uint16_t raw_data = Read_Thermocouple_Temperature();
 8002e06:	f7ff ff85 	bl	8002d14 <Read_Thermocouple_Temperature>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80fb      	strh	r3, [r7, #6]

    // Проверка на разомкнутую цепь
    if(raw_data & 0x04) {
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <Get_Thermocouple_Temperature+0x24>
        thermocouple_error = true;
 8002e18:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <Get_Thermocouple_Temperature+0x54>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
        return -999.0f;
 8002e1e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002e58 <Get_Thermocouple_Temperature+0x58>
 8002e22:	e012      	b.n	8002e4a <Get_Thermocouple_Temperature+0x4a>
    }

    thermocouple_error = false;
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <Get_Thermocouple_Temperature+0x54>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]

    // Извлечение 12-битного значения температуры
    raw_data >>= 3;
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	08db      	lsrs	r3, r3, #3
 8002e2e:	80fb      	strh	r3, [r7, #6]
    raw_data &= 0x0FFF;
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e36:	80fb      	strh	r3, [r7, #6]

    // Конверсия в градусы
    return (float)raw_data * 0.25f;
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e42:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8002e46:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000a20 	.word	0x20000a20
 8002e58:	c479c000 	.word	0xc479c000

08002e5c <CalculateCRC32>:


/**
  * @brief Расчет CRC32 для проверки целостности данных
  */
uint32_t CalculateCRC32(const uint8_t *data, size_t length) {
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++) {
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	e01d      	b.n	8002eae <CalculateCRC32+0x52>
        crc ^= data[i];
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	4053      	eors	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	e00c      	b.n	8002ea2 <CalculateCRC32+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	085a      	lsrs	r2, r3, #1
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	4259      	negs	r1, r3
 8002e94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec8 <CalculateCRC32+0x6c>)
 8002e96:	400b      	ands	r3, r1
 8002e98:	4053      	eors	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b07      	cmp	r3, #7
 8002ea6:	ddef      	ble.n	8002e88 <CalculateCRC32+0x2c>
    for (size_t i = 0; i < length; i++) {
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d3dd      	bcc.n	8002e72 <CalculateCRC32+0x16>
        }
    }
    return ~crc;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	43db      	mvns	r3, r3
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	edb88320 	.word	0xedb88320

08002ecc <LoadParametersFromFlash>:

/**
  * @brief Загрузка параметров из Flash памяти
  */
void LoadParametersFromFlash(void) {
 8002ecc:	b5b0      	push	{r4, r5, r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
    Parameters_t* flash_params = (Parameters_t*)PARAMS_FLASH_ADDRESS;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	@ (8002f28 <LoadParametersFromFlash+0x5c>)
 8002ed4:	607b      	str	r3, [r7, #4]
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)flash_params, sizeof(Parameters_t) - sizeof(uint32_t));
 8002ed6:	213c      	movs	r1, #60	@ 0x3c
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ffbf 	bl	8002e5c <CalculateCRC32>
 8002ede:	6038      	str	r0, [r7, #0]

    if (flash_params->crc == calculated_crc) {
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d114      	bne.n	8002f14 <LoadParametersFromFlash+0x48>
        params = *flash_params;
 8002eea:	4a10      	ldr	r2, [pc, #64]	@ (8002f2c <LoadParametersFromFlash+0x60>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4614      	mov	r4, r2
 8002ef0:	461d      	mov	r5, r3
 8002ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002efe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        parameters_initialized = true;
 8002f06:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <LoadParametersFromFlash+0x64>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
        SendUSBDebugMessage("Parameters loaded from Flash memory");
 8002f0c:	4809      	ldr	r0, [pc, #36]	@ (8002f34 <LoadParametersFromFlash+0x68>)
 8002f0e:	f7fe f897 	bl	8001040 <SendUSBDebugMessage>
    } else {
        InitializeParameters();
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
    }
}
 8002f12:	e004      	b.n	8002f1e <LoadParametersFromFlash+0x52>
        InitializeParameters();
 8002f14:	f000 f852 	bl	8002fbc <InitializeParameters>
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
 8002f18:	4807      	ldr	r0, [pc, #28]	@ (8002f38 <LoadParametersFromFlash+0x6c>)
 8002f1a:	f7fe f891 	bl	8001040 <SendUSBDebugMessage>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bdb0      	pop	{r4, r5, r7, pc}
 8002f26:	bf00      	nop
 8002f28:	08080000 	.word	0x08080000
 8002f2c:	20000a24 	.word	0x20000a24
 8002f30:	20000a64 	.word	0x20000a64
 8002f34:	08013074 	.word	0x08013074
 8002f38:	08013098 	.word	0x08013098

08002f3c <SaveParametersToFlash>:

/**
  * @brief Сохранение параметров в Flash память
  */
void SaveParametersToFlash(void) {
 8002f3c:	b5b0      	push	{r4, r5, r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8002f42:	f000 fff5 	bl	8003f30 <HAL_FLASH_Unlock>
    params.crc = CalculateCRC32((uint8_t*)&params, sizeof(Parameters_t) - sizeof(uint32_t));
 8002f46:	213c      	movs	r1, #60	@ 0x3c
 8002f48:	4819      	ldr	r0, [pc, #100]	@ (8002fb0 <SaveParametersToFlash+0x74>)
 8002f4a:	f7ff ff87 	bl	8002e5c <CalculateCRC32>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4a17      	ldr	r2, [pc, #92]	@ (8002fb0 <SaveParametersToFlash+0x74>)
 8002f52:	63d3      	str	r3, [r2, #60]	@ 0x3c

    FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 8002f54:	2102      	movs	r1, #2
 8002f56:	200b      	movs	r0, #11
 8002f58:	f001 f94c 	bl	80041f4 <FLASH_Erase_Sector>

    uint32_t* source = (uint32_t*)&params;
 8002f5c:	4b14      	ldr	r3, [pc, #80]	@ (8002fb0 <SaveParametersToFlash+0x74>)
 8002f5e:	60fb      	str	r3, [r7, #12]
    uint32_t* destination = (uint32_t*)PARAMS_FLASH_ADDRESS;
 8002f60:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <SaveParametersToFlash+0x78>)
 8002f62:	60bb      	str	r3, [r7, #8]
    uint32_t words = sizeof(Parameters_t) / sizeof(uint32_t);
 8002f64:	2310      	movs	r3, #16
 8002f66:	603b      	str	r3, [r7, #0]

    for (uint32_t i = 0; i < words; i++) {
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	e013      	b.n	8002f96 <SaveParametersToFlash+0x5a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)destination, *source);
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2200      	movs	r2, #0
 8002f76:	461c      	mov	r4, r3
 8002f78:	4615      	mov	r5, r2
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f000 ff84 	bl	8003e8c <HAL_FLASH_Program>
        source++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3304      	adds	r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
        destination++;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < words; i++) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3301      	adds	r3, #1
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3e7      	bcc.n	8002f6e <SaveParametersToFlash+0x32>
    }

    HAL_FLASH_Lock();
 8002f9e:	f000 ffe9 	bl	8003f74 <HAL_FLASH_Lock>
    SendUSBDebugMessage("Parameters saved to Flash memory");
 8002fa2:	4805      	ldr	r0, [pc, #20]	@ (8002fb8 <SaveParametersToFlash+0x7c>)
 8002fa4:	f7fe f84c 	bl	8001040 <SendUSBDebugMessage>
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb0:	20000a24 	.word	0x20000a24
 8002fb4:	08080000 	.word	0x08080000
 8002fb8:	080130c8 	.word	0x080130c8

08002fbc <InitializeParameters>:

/**
  * @brief Инициализация параметров значениями по умолчанию
  */
void InitializeParameters(void) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
    params.start_index = 100;
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003034 <InitializeParameters+0x78>)
 8002fc2:	2264      	movs	r2, #100	@ 0x64
 8002fc4:	601a      	str	r2, [r3, #0]
    params.wave_speed = 3200.0f;
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <InitializeParameters+0x78>)
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <InitializeParameters+0x7c>)
 8002fca:	605a      	str	r2, [r3, #4]
    params.first_left_strobe = 20;
 8002fcc:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <InitializeParameters+0x78>)
 8002fce:	2214      	movs	r2, #20
 8002fd0:	609a      	str	r2, [r3, #8]
    params.first_right_strobe = 120;
 8002fd2:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <InitializeParameters+0x78>)
 8002fd4:	2278      	movs	r2, #120	@ 0x78
 8002fd6:	60da      	str	r2, [r3, #12]
    params.second_left_strobe = 140;
 8002fd8:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <InitializeParameters+0x78>)
 8002fda:	228c      	movs	r2, #140	@ 0x8c
 8002fdc:	611a      	str	r2, [r3, #16]
    params.second_right_strobe = 240;
 8002fde:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <InitializeParameters+0x78>)
 8002fe0:	22f0      	movs	r2, #240	@ 0xf0
 8002fe2:	615a      	str	r2, [r3, #20]
    params.threshold = 2080.0f;
 8002fe4:	4b13      	ldr	r3, [pc, #76]	@ (8003034 <InitializeParameters+0x78>)
 8002fe6:	4a15      	ldr	r2, [pc, #84]	@ (800303c <InitializeParameters+0x80>)
 8002fe8:	619a      	str	r2, [r3, #24]
    params.threshold_zero_crossing = 600.0f;
 8002fea:	4b12      	ldr	r3, [pc, #72]	@ (8003034 <InitializeParameters+0x78>)
 8002fec:	4a14      	ldr	r2, [pc, #80]	@ (8003040 <InitializeParameters+0x84>)
 8002fee:	61da      	str	r2, [r3, #28]
    params.probe_length = 400;
 8002ff0:	4b10      	ldr	r3, [pc, #64]	@ (8003034 <InitializeParameters+0x78>)
 8002ff2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002ff6:	621a      	str	r2, [r3, #32]
    params.method = 1;
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <InitializeParameters+0x78>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    params.end_index = 400;
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <InitializeParameters+0x78>)
 8003000:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003004:	629a      	str	r2, [r3, #40]	@ 0x28
    params.cycle_number = 10;
 8003006:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <InitializeParameters+0x78>)
 8003008:	220a      	movs	r2, #10
 800300a:	62da      	str	r2, [r3, #44]	@ 0x2c
    strncpy(params.sensor_number, "0001", sizeof(params.sensor_number));
 800300c:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <InitializeParameters+0x78>)
 800300e:	4a0d      	ldr	r2, [pc, #52]	@ (8003044 <InitializeParameters+0x88>)
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    params.gain = 1.0f;
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <InitializeParameters+0x78>)
 800301a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800301e:	639a      	str	r2, [r3, #56]	@ 0x38

    parameters_initialized = true;
 8003020:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <InitializeParameters+0x8c>)
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
    SaveParametersToFlash();
 8003026:	f7ff ff89 	bl	8002f3c <SaveParametersToFlash>
    SendUSBDebugMessage("Parameters initialized with defaults and saved to Flash");
 800302a:	4808      	ldr	r0, [pc, #32]	@ (800304c <InitializeParameters+0x90>)
 800302c:	f7fe f808 	bl	8001040 <SendUSBDebugMessage>
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000a24 	.word	0x20000a24
 8003038:	45480000 	.word	0x45480000
 800303c:	45020000 	.word	0x45020000
 8003040:	44160000 	.word	0x44160000
 8003044:	31303030 	.word	0x31303030
 8003048:	20000a64 	.word	0x20000a64
 800304c:	080130ec 	.word	0x080130ec

08003050 <AddRandomNoiseAndExtend>:

/**
  * @brief Добавление случайного шума и расширение массива до 10000 точек
  */
void AddRandomNoiseAndExtend(const float32_t* src, float32_t* dest, uint32_t dest_size) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	e02a      	b.n	80030b8 <AddRandomNoiseAndExtend+0x68>
        float noise = (rand() % 100 - 50) / 100.0f;
 8003062:	f00a fbdd 	bl	800d820 <rand>
 8003066:	4602      	mov	r2, r0
 8003068:	4b2d      	ldr	r3, [pc, #180]	@ (8003120 <AddRandomNoiseAndExtend+0xd0>)
 800306a:	fb83 1302 	smull	r1, r3, r3, r2
 800306e:	1159      	asrs	r1, r3, #5
 8003070:	17d3      	asrs	r3, r2, #31
 8003072:	1acb      	subs	r3, r1, r3
 8003074:	2164      	movs	r1, #100	@ 0x64
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	3b32      	subs	r3, #50	@ 0x32
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003086:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8003124 <AddRandomNoiseAndExtend+0xd4>
 800308a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800308e:	edc7 7a05 	vstr	s15, [r7, #20]
        dest[i] = src[i] + noise;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	ed93 7a00 	vldr	s14, [r3]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	4413      	add	r3, r2
 80030a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ae:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3301      	adds	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 80030be:	4293      	cmp	r3, r2
 80030c0:	d9cf      	bls.n	8003062 <AddRandomNoiseAndExtend+0x12>
    }

    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 80030c2:	f241 13f8 	movw	r3, #4600	@ 0x11f8
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e020      	b.n	800310c <AddRandomNoiseAndExtend+0xbc>
        dest[i] = (rand() % 2000 - 1000) / 10.0f;
 80030ca:	f00a fba9 	bl	800d820 <rand>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4b15      	ldr	r3, [pc, #84]	@ (8003128 <AddRandomNoiseAndExtend+0xd8>)
 80030d2:	fb83 1302 	smull	r1, r3, r3, r2
 80030d6:	11d9      	asrs	r1, r3, #7
 80030d8:	17d3      	asrs	r3, r2, #31
 80030da:	1acb      	subs	r3, r1, r3
 80030dc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4413      	add	r3, r2
 80030fa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003102:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3301      	adds	r3, #1
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d3da      	bcc.n	80030ca <AddRandomNoiseAndExtend+0x7a>
    }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	51eb851f 	.word	0x51eb851f
 8003124:	42c80000 	.word	0x42c80000
 8003128:	10624dd3 	.word	0x10624dd3

0800312c <CheckThreshold>:

/**
  * @brief Проверка данных на превышение threshold
  */
bool CheckThreshold(const float32_t* data, uint32_t size) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
    if (!parameters_initialized) {
 8003136:	4b16      	ldr	r3, [pc, #88]	@ (8003190 <CheckThreshold+0x64>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	f083 0301 	eor.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <CheckThreshold+0x22>
        SendUSBDebugMessage("Threshold parameter not initialized");
 8003144:	4813      	ldr	r0, [pc, #76]	@ (8003194 <CheckThreshold+0x68>)
 8003146:	f7fd ff7b 	bl	8001040 <SendUSBDebugMessage>
        return false;
 800314a:	2300      	movs	r3, #0
 800314c:	e01c      	b.n	8003188 <CheckThreshold+0x5c>
    }

    for (uint32_t i = 0; i < size; i++) {
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e014      	b.n	800317e <CheckThreshold+0x52>
        if (fabsf(data[i]) > params.threshold) {
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	eeb0 7ae7 	vabs.f32	s14, s15
 8003164:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <CheckThreshold+0x6c>)
 8003166:	edd3 7a06 	vldr	s15, [r3, #24]
 800316a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	dd01      	ble.n	8003178 <CheckThreshold+0x4c>
            return false;
 8003174:	2300      	movs	r3, #0
 8003176:	e007      	b.n	8003188 <CheckThreshold+0x5c>
    for (uint32_t i = 0; i < size; i++) {
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d3e6      	bcc.n	8003154 <CheckThreshold+0x28>
        }
    }
    return true;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000a64 	.word	0x20000a64
 8003194:	08013124 	.word	0x08013124
 8003198:	20000a24 	.word	0x20000a24

0800319c <ProcessCycle>:

/**
  * @brief Обработка одного цикла
  */
bool ProcessCycle(uint32_t cycle_num) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    AddRandomNoiseAndExtend(measurement_data, temp_data, FINAL_DATA_SIZE);
 80031a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80031a8:	4933      	ldr	r1, [pc, #204]	@ (8003278 <ProcessCycle+0xdc>)
 80031aa:	4834      	ldr	r0, [pc, #208]	@ (800327c <ProcessCycle+0xe0>)
 80031ac:	f7ff ff50 	bl	8003050 <AddRandomNoiseAndExtend>

    if (params.gain != 1.0f) {
 80031b0:	4b33      	ldr	r3, [pc, #204]	@ (8003280 <ProcessCycle+0xe4>)
 80031b2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80031b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031ba:	eef4 7a47 	vcmp.f32	s15, s14
 80031be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c2:	d00a      	beq.n	80031da <ProcessCycle+0x3e>
        arm_scale_f32(temp_data, params.gain, temp_data, FINAL_DATA_SIZE);
 80031c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003280 <ProcessCycle+0xe4>)
 80031c6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80031ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80031ce:	492a      	ldr	r1, [pc, #168]	@ (8003278 <ProcessCycle+0xdc>)
 80031d0:	eeb0 0a67 	vmov.f32	s0, s15
 80031d4:	4828      	ldr	r0, [pc, #160]	@ (8003278 <ProcessCycle+0xdc>)
 80031d6:	f00a f9b3 	bl	800d540 <arm_scale_f32>
    }

    bool below_threshold = CheckThreshold(temp_data, FINAL_DATA_SIZE);
 80031da:	f242 7110 	movw	r1, #10000	@ 0x2710
 80031de:	4826      	ldr	r0, [pc, #152]	@ (8003278 <ProcessCycle+0xdc>)
 80031e0:	f7ff ffa4 	bl	800312c <CheckThreshold>
 80031e4:	4603      	mov	r3, r0
 80031e6:	72fb      	strb	r3, [r7, #11]

    if (below_threshold) {
 80031e8:	7afb      	ldrb	r3, [r7, #11]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d03f      	beq.n	800326e <ProcessCycle+0xd2>
        if (successful_cycles == 0) {
 80031ee:	4b25      	ldr	r3, [pc, #148]	@ (8003284 <ProcessCycle+0xe8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <ProcessCycle+0x68>
            arm_copy_f32(temp_data, final_data, FINAL_DATA_SIZE);
 80031f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80031fa:	4923      	ldr	r1, [pc, #140]	@ (8003288 <ProcessCycle+0xec>)
 80031fc:	481e      	ldr	r0, [pc, #120]	@ (8003278 <ProcessCycle+0xdc>)
 80031fe:	f00a f90d 	bl	800d41c <arm_copy_f32>
 8003202:	e02f      	b.n	8003264 <ProcessCycle+0xc8>
        } else {
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e027      	b.n	800325a <ProcessCycle+0xbe>
                final_data[i] = (final_data[i] * successful_cycles + temp_data[i]) / (successful_cycles + 1);
 800320a:	4a1f      	ldr	r2, [pc, #124]	@ (8003288 <ProcessCycle+0xec>)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	ed93 7a00 	vldr	s14, [r3]
 8003216:	4b1b      	ldr	r3, [pc, #108]	@ (8003284 <ProcessCycle+0xe8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003226:	4a14      	ldr	r2, [pc, #80]	@ (8003278 <ProcessCycle+0xdc>)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <ProcessCycle+0xe8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3301      	adds	r3, #1
 800323c:	ee07 3a90 	vmov	s15, r3
 8003240:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003248:	4a0f      	ldr	r2, [pc, #60]	@ (8003288 <ProcessCycle+0xec>)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	edc3 7a00 	vstr	s15, [r3]
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003260:	4293      	cmp	r3, r2
 8003262:	d9d2      	bls.n	800320a <ProcessCycle+0x6e>
            }
        }
        successful_cycles++;
 8003264:	4b07      	ldr	r3, [pc, #28]	@ (8003284 <ProcessCycle+0xe8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	4a06      	ldr	r2, [pc, #24]	@ (8003284 <ProcessCycle+0xe8>)
 800326c:	6013      	str	r3, [r2, #0]
    }

    return below_threshold;
 800326e:	7afb      	ldrb	r3, [r7, #11]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20009a2c 	.word	0x20009a2c
 800327c:	08013328 	.word	0x08013328
 8003280:	20000a24 	.word	0x20000a24
 8003284:	2001d2ac 	.word	0x2001d2ac
 8003288:	2001366c 	.word	0x2001366c

0800328c <NormalizeData>:

/**
  * @brief Нормализация данных
  */
void NormalizeData(void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 8003292:	b09a      	sub	sp, #104	@ 0x68
 8003294:	af00      	add	r7, sp, #0
    float32_t mean, std_dev;
    float32_t subtracted_mean[DATA_VALUES_COUNT];

    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 8003296:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 800329a:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800329e:	461a      	mov	r2, r3
 80032a0:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80032a4:	4828      	ldr	r0, [pc, #160]	@ (8003348 <NormalizeData+0xbc>)
 80032a6:	f00a f90d 	bl	800d4c4 <arm_mean_f32>
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 80032aa:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80032ae:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eef1 7a67 	vneg.f32	s15, s15
 80032ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80032be:	3b68      	subs	r3, #104	@ 0x68
 80032c0:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80032c4:	4619      	mov	r1, r3
 80032c6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ca:	481f      	ldr	r0, [pc, #124]	@ (8003348 <NormalizeData+0xbc>)
 80032cc:	f00a f97e 	bl	800d5cc <arm_offset_f32>
    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 80032d0:	f507 428f 	add.w	r2, r7, #18304	@ 0x4780
 80032d4:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80032d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80032dc:	3b68      	subs	r3, #104	@ 0x68
 80032de:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80032e2:	4618      	mov	r0, r3
 80032e4:	f00a f8cc 	bl	800d480 <arm_std_f32>

    if (std_dev != 0.0f) {
 80032e8:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80032ec:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fc:	d015      	beq.n	800332a <NormalizeData+0x9e>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 80032fe:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 8003302:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003312:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003316:	3b68      	subs	r3, #104	@ 0x68
 8003318:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 800331c:	490a      	ldr	r1, [pc, #40]	@ (8003348 <NormalizeData+0xbc>)
 800331e:	eeb0 0a47 	vmov.f32	s0, s14
 8003322:	4618      	mov	r0, r3
 8003324:	f00a f90c 	bl	800d540 <arm_scale_f32>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
    }
}
 8003328:	e008      	b.n	800333c <NormalizeData+0xb0>
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 800332a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800332e:	3b68      	subs	r3, #104	@ 0x68
 8003330:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003334:	4904      	ldr	r1, [pc, #16]	@ (8003348 <NormalizeData+0xbc>)
 8003336:	4618      	mov	r0, r3
 8003338:	f00a f870 	bl	800d41c <arm_copy_f32>
}
 800333c:	bf00      	nop
 800333e:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 8003342:	3768      	adds	r7, #104	@ 0x68
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000a6c 	.word	0x20000a6c

0800334c <CalculateAutocorrelation>:

/**
  * @brief Расчет автокорреляционной функции
  */
void CalculateAutocorrelation(void) {
 800334c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e053      	b.n	8003402 <CalculateAutocorrelation+0xb6>
        double sum = 0.0;
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	e9c7 2302 	strd	r2, r3, [r7, #8]
        uint32_t count = DATA_VALUES_COUNT - lag;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 800336c:	3318      	adds	r3, #24
 800336e:	603b      	str	r3, [r7, #0]

        for (uint32_t i = 0; i < count; i++) {
 8003370:	2300      	movs	r3, #0
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	e026      	b.n	80033c4 <CalculateAutocorrelation+0x78>
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 8003376:	4a28      	ldr	r2, [pc, #160]	@ (8003418 <CalculateAutocorrelation+0xcc>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd f8f1 	bl	8000568 <__aeabi_f2d>
 8003386:	4680      	mov	r8, r0
 8003388:	4689      	mov	r9, r1
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4413      	add	r3, r2
 8003390:	4a21      	ldr	r2, [pc, #132]	@ (8003418 <CalculateAutocorrelation+0xcc>)
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd f8e5 	bl	8000568 <__aeabi_f2d>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4640      	mov	r0, r8
 80033a4:	4649      	mov	r1, r9
 80033a6:	f7fd f937 	bl	8000618 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033b2:	f7fc ff7b 	bl	80002ac <__adddf3>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t i = 0; i < count; i++) {
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3301      	adds	r3, #1
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d3d4      	bcc.n	8003376 <CalculateAutocorrelation+0x2a>
        }

        autocorrelation_result[lag] = (float32_t)fabs(sum / count);
 80033cc:	6838      	ldr	r0, [r7, #0]
 80033ce:	f7fd f8a9 	bl	8000524 <__aeabi_ui2d>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033da:	f7fd fa47 	bl	800086c <__aeabi_ddiv>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4614      	mov	r4, r2
 80033e4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80033e8:	4620      	mov	r0, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	f7fd fc0c 	bl	8000c08 <__aeabi_d2f>
 80033f0:	4602      	mov	r2, r0
 80033f2:	490a      	ldr	r1, [pc, #40]	@ (800341c <CalculateAutocorrelation+0xd0>)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	3301      	adds	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003408:	4293      	cmp	r3, r2
 800340a:	d9a6      	bls.n	800335a <CalculateAutocorrelation+0xe>
    }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003418:	20000a6c 	.word	0x20000a6c
 800341c:	2000524c 	.word	0x2000524c

08003420 <FindMaxAutocorrelationIndex>:

/**
  * @brief Поиск индекса максимальной автокорреляции
  */
uint32_t FindMaxAutocorrelationIndex(void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003426:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <FindMaxAutocorrelationIndex+0x84>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	f083 0301 	eor.w	r3, r3, #1
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <FindMaxAutocorrelationIndex+0x1e>
        SendUSBDebugMessage("Parameters not initialized for ACF");
 8003434:	481c      	ldr	r0, [pc, #112]	@ (80034a8 <FindMaxAutocorrelationIndex+0x88>)
 8003436:	f7fd fe03 	bl	8001040 <SendUSBDebugMessage>
        return 0;
 800343a:	2300      	movs	r3, #0
 800343c:	e02e      	b.n	800349c <FindMaxAutocorrelationIndex+0x7c>
    }

    float32_t max_value = 0.0f;
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
    uint32_t max_idx = params.start_index;
 8003444:	4b19      	ldr	r3, [pc, #100]	@ (80034ac <FindMaxAutocorrelationIndex+0x8c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60bb      	str	r3, [r7, #8]
    uint32_t search_end = (params.end_index < DATA_VALUES_COUNT) ? params.end_index : DATA_VALUES_COUNT - 1;
 800344a:	4b18      	ldr	r3, [pc, #96]	@ (80034ac <FindMaxAutocorrelationIndex+0x8c>)
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003452:	4293      	cmp	r3, r2
 8003454:	bf28      	it	cs
 8003456:	4613      	movcs	r3, r2
 8003458:	603b      	str	r3, [r7, #0]

    for (uint32_t i = params.start_index; i < search_end; i++) {
 800345a:	4b14      	ldr	r3, [pc, #80]	@ (80034ac <FindMaxAutocorrelationIndex+0x8c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	e017      	b.n	8003492 <FindMaxAutocorrelationIndex+0x72>
        if (autocorrelation_result[i] > max_value) {
 8003462:	4a13      	ldr	r2, [pc, #76]	@ (80034b0 <FindMaxAutocorrelationIndex+0x90>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	d507      	bpl.n	800348c <FindMaxAutocorrelationIndex+0x6c>
            max_value = autocorrelation_result[i];
 800347c:	4a0c      	ldr	r2, [pc, #48]	@ (80034b0 <FindMaxAutocorrelationIndex+0x90>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60fb      	str	r3, [r7, #12]
            max_idx = i;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = params.start_index; i < search_end; i++) {
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3301      	adds	r3, #1
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d3e3      	bcc.n	8003462 <FindMaxAutocorrelationIndex+0x42>
        }
    }

    return max_idx;
 800349a:	68bb      	ldr	r3, [r7, #8]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000a64 	.word	0x20000a64
 80034a8:	08013148 	.word	0x08013148
 80034ac:	20000a24 	.word	0x20000a24
 80034b0:	2000524c 	.word	0x2000524c

080034b4 <CalculateZeroCrossingThickness>:

/**
  * @brief Расчет толщины методом перехода через ноль
  */
void CalculateZeroCrossingThickness(const float32_t* data) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	@ 0x28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 80034bc:	4b4f      	ldr	r3, [pc, #316]	@ (80035fc <CalculateZeroCrossingThickness+0x148>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	f083 0301 	eor.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <CalculateZeroCrossingThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for zero crossing");
 80034ca:	484d      	ldr	r0, [pc, #308]	@ (8003600 <CalculateZeroCrossingThickness+0x14c>)
 80034cc:	f7fd fdb8 	bl	8001040 <SendUSBDebugMessage>
        return;
 80034d0:	e090      	b.n	80035f4 <CalculateZeroCrossingThickness+0x140>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 80034d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003604 <CalculateZeroCrossingThickness+0x150>)
 80034d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80034d8:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003608 <CalculateZeroCrossingThickness+0x154>
 80034dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034e0:	4b4a      	ldr	r3, [pc, #296]	@ (800360c <CalculateZeroCrossingThickness+0x158>)
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f2:	edc7 7a04 	vstr	s15, [r7, #16]
    uint32_t first_above_threshold_index = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t zero_crossing_index = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
    bool found_threshold = false;
 80034fe:	2300      	movs	r3, #0
 8003500:	77fb      	strb	r3, [r7, #31]

    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	e015      	b.n	8003534 <CalculateZeroCrossingThickness+0x80>
        if (data[i] >= params.threshold_zero_crossing) {
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	ed93 7a00 	vldr	s14, [r3]
 8003514:	4b3b      	ldr	r3, [pc, #236]	@ (8003604 <CalculateZeroCrossingThickness+0x150>)
 8003516:	edd3 7a07 	vldr	s15, [r3, #28]
 800351a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003522:	db04      	blt.n	800352e <CalculateZeroCrossingThickness+0x7a>
            first_above_threshold_index = i;
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
            found_threshold = true;
 8003528:	2301      	movs	r3, #1
 800352a:	77fb      	strb	r3, [r7, #31]
            break;
 800352c:	e007      	b.n	800353e <CalculateZeroCrossingThickness+0x8a>
    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	3301      	adds	r3, #1
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f242 720f 	movw	r2, #9999	@ 0x270f
 800353a:	4293      	cmp	r3, r2
 800353c:	d9e4      	bls.n	8003508 <CalculateZeroCrossingThickness+0x54>
        }
    }

    if (!found_threshold) {
 800353e:	7ffb      	ldrb	r3, [r7, #31]
 8003540:	f083 0301 	eor.w	r3, r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <CalculateZeroCrossingThickness+0xa6>
        SendUSBDebugMessage("Zero crossing: threshold not found");
 800354a:	4831      	ldr	r0, [pc, #196]	@ (8003610 <CalculateZeroCrossingThickness+0x15c>)
 800354c:	f7fd fd78 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 8003550:	4b30      	ldr	r3, [pc, #192]	@ (8003614 <CalculateZeroCrossingThickness+0x160>)
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
        return;
 8003558:	e04c      	b.n	80035f4 <CalculateZeroCrossingThickness+0x140>
    }

    bool sign_positive = (data[first_above_threshold_index] >= 0);
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800356a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356e:	bfac      	ite	ge
 8003570:	2301      	movge	r3, #1
 8003572:	2300      	movlt	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	3301      	adds	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e017      	b.n	80035ae <CalculateZeroCrossingThickness+0xfa>
        bool current_sign_positive = (data[i] >= 0);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003592:	bfac      	ite	ge
 8003594:	2301      	movge	r3, #1
 8003596:	2300      	movlt	r3, #0
 8003598:	73bb      	strb	r3, [r7, #14]
        if (current_sign_positive != sign_positive) {
 800359a:	7bba      	ldrb	r2, [r7, #14]
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d002      	beq.n	80035a8 <CalculateZeroCrossingThickness+0xf4>
            zero_crossing_index = i;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	623b      	str	r3, [r7, #32]
            break;
 80035a6:	e007      	b.n	80035b8 <CalculateZeroCrossingThickness+0x104>
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3301      	adds	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d9e2      	bls.n	800357e <CalculateZeroCrossingThickness+0xca>
        }
    }

    if (zero_crossing_index == 0) {
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <CalculateZeroCrossingThickness+0x11a>
        SendUSBDebugMessage("Zero crossing: zero crossing not found");
 80035be:	4816      	ldr	r0, [pc, #88]	@ (8003618 <CalculateZeroCrossingThickness+0x164>)
 80035c0:	f7fd fd3e 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 80035c4:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <CalculateZeroCrossingThickness+0x160>)
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
        return;
 80035cc:	e012      	b.n	80035f4 <CalculateZeroCrossingThickness+0x140>
    }

    uint32_t final_index = zero_crossing_index + params.probe_length;
 80035ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003604 <CalculateZeroCrossingThickness+0x150>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	4413      	add	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]
    thickness_value = final_index / (2.0f * one_point_mm);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80035e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80035ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ee:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <CalculateZeroCrossingThickness+0x160>)
 80035f0:	edc3 7a00 	vstr	s15, [r3]
}
 80035f4:	3728      	adds	r7, #40	@ 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000a64 	.word	0x20000a64
 8003600:	0801316c 	.word	0x0801316c
 8003604:	20000a24 	.word	0x20000a24
 8003608:	447a0000 	.word	0x447a0000
 800360c:	2000000c 	.word	0x2000000c
 8003610:	0801319c 	.word	0x0801319c
 8003614:	20000a68 	.word	0x20000a68
 8003618:	080131c0 	.word	0x080131c0

0800361c <CalculateStrobeThickness>:

/**
  * @brief Расчет толщины методом по стробам
  */
void CalculateStrobeThickness(const float32_t* data) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	@ 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 8003624:	4b51      	ldr	r3, [pc, #324]	@ (800376c <CalculateStrobeThickness+0x150>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	f083 0301 	eor.w	r3, r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <CalculateStrobeThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for strobe method");
 8003632:	484f      	ldr	r0, [pc, #316]	@ (8003770 <CalculateStrobeThickness+0x154>)
 8003634:	f7fd fd04 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003638:	e095      	b.n	8003766 <CalculateStrobeThickness+0x14a>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 800363a:	4b4e      	ldr	r3, [pc, #312]	@ (8003774 <CalculateStrobeThickness+0x158>)
 800363c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003640:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003778 <CalculateStrobeThickness+0x15c>
 8003644:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003648:	4b4c      	ldr	r3, [pc, #304]	@ (800377c <CalculateStrobeThickness+0x160>)
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365a:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t max_value_first = -FLT_MAX;
 800365e:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index_first = params.first_left_strobe;
 8003664:	4b43      	ldr	r3, [pc, #268]	@ (8003774 <CalculateStrobeThickness+0x158>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	623b      	str	r3, [r7, #32]
    float32_t max_value_second = -FLT_MAX;
 800366a:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 800366e:	61fb      	str	r3, [r7, #28]
    uint32_t max_index_second = params.second_left_strobe;
 8003670:	4b40      	ldr	r3, [pc, #256]	@ (8003774 <CalculateStrobeThickness+0x158>)
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8003676:	4b3f      	ldr	r3, [pc, #252]	@ (8003774 <CalculateStrobeThickness+0x158>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e01c      	b.n	80036b8 <CalculateStrobeThickness+0x9c>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_first) {
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003684:	4293      	cmp	r3, r2
 8003686:	d814      	bhi.n	80036b2 <CalculateStrobeThickness+0x96>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	edd3 7a00 	vldr	s15, [r3]
 8003694:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800369c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a0:	d507      	bpl.n	80036b2 <CalculateStrobeThickness+0x96>
            max_value_first = data[i];
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index_first = i;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	623b      	str	r3, [r7, #32]
    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	3301      	adds	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003774 <CalculateStrobeThickness+0x158>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d9dd      	bls.n	800367e <CalculateStrobeThickness+0x62>
        }
    }

    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 80036c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003774 <CalculateStrobeThickness+0x158>)
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	e01c      	b.n	8003704 <CalculateStrobeThickness+0xe8>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_second) {
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d814      	bhi.n	80036fe <CalculateStrobeThickness+0xe2>
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80036e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	d507      	bpl.n	80036fe <CalculateStrobeThickness+0xe2>
            max_value_second = data[i];
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61fb      	str	r3, [r7, #28]
            max_index_second = i;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	3301      	adds	r3, #1
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	4b1b      	ldr	r3, [pc, #108]	@ (8003774 <CalculateStrobeThickness+0x158>)
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	429a      	cmp	r2, r3
 800370c:	d9dd      	bls.n	80036ca <CalculateStrobeThickness+0xae>
        }
    }

    if (max_value_first == -FLT_MAX || max_value_second == -FLT_MAX) {
 800370e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003712:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003780 <CalculateStrobeThickness+0x164>
 8003716:	eef4 7a47 	vcmp.f32	s15, s14
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	d008      	beq.n	8003732 <CalculateStrobeThickness+0x116>
 8003720:	edd7 7a07 	vldr	s15, [r7, #28]
 8003724:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003780 <CalculateStrobeThickness+0x164>
 8003728:	eef4 7a47 	vcmp.f32	s15, s14
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	d107      	bne.n	8003742 <CalculateStrobeThickness+0x126>
        SendUSBDebugMessage("Strobe method: max values not found");
 8003732:	4814      	ldr	r0, [pc, #80]	@ (8003784 <CalculateStrobeThickness+0x168>)
 8003734:	f7fd fc84 	bl	8001040 <SendUSBDebugMessage>
        thickness_value = 0.0f;
 8003738:	4b13      	ldr	r3, [pc, #76]	@ (8003788 <CalculateStrobeThickness+0x16c>)
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
        return;
 8003740:	e011      	b.n	8003766 <CalculateStrobeThickness+0x14a>
    }

    uint32_t index_difference = max_index_second - max_index_first;
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	60bb      	str	r3, [r7, #8]
    thickness_value = index_difference / (2.0f * one_point_mm);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	ee07 3a90 	vmov	s15, r3
 8003750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003754:	edd7 7a03 	vldr	s15, [r7, #12]
 8003758:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800375c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003760:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <CalculateStrobeThickness+0x16c>)
 8003762:	edc3 7a00 	vstr	s15, [r3]
}
 8003766:	3728      	adds	r7, #40	@ 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000a64 	.word	0x20000a64
 8003770:	080131e8 	.word	0x080131e8
 8003774:	20000a24 	.word	0x20000a24
 8003778:	447a0000 	.word	0x447a0000
 800377c:	2000000c 	.word	0x2000000c
 8003780:	ff7fffff 	.word	0xff7fffff
 8003784:	08013218 	.word	0x08013218
 8003788:	20000a68 	.word	0x20000a68

0800378c <CalculateAndSendACFThickness>:

/**
  * @brief Расчет толщины автокорреляционным методом
  */
void CalculateAndSendACFThickness(void) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003792:	4b18      	ldr	r3, [pc, #96]	@ (80037f4 <CalculateAndSendACFThickness+0x68>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	f083 0301 	eor.w	r3, r3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <CalculateAndSendACFThickness+0x1c>
        SendUSBDebugMessage("Parameters not initialized for ACF thickness calculation");
 80037a0:	4815      	ldr	r0, [pc, #84]	@ (80037f8 <CalculateAndSendACFThickness+0x6c>)
 80037a2:	f7fd fc4d 	bl	8001040 <SendUSBDebugMessage>
        return;
 80037a6:	e022      	b.n	80037ee <CalculateAndSendACFThickness+0x62>
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 80037a8:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <CalculateAndSendACFThickness+0x70>)
 80037aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80037ae:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003800 <CalculateAndSendACFThickness+0x74>
 80037b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80037b6:	4b13      	ldr	r3, [pc, #76]	@ (8003804 <CalculateAndSendACFThickness+0x78>)
 80037b8:	edd3 7a00 	vldr	s15, [r3]
 80037bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c8:	edc7 7a01 	vstr	s15, [r7, #4]
    uint32_t max_index = FindMaxAutocorrelationIndex();
 80037cc:	f7ff fe28 	bl	8003420 <FindMaxAutocorrelationIndex>
 80037d0:	6038      	str	r0, [r7, #0]
    thickness_value = max_index / (2.0f * one_point_mm);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80037e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80037e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e8:	4b07      	ldr	r3, [pc, #28]	@ (8003808 <CalculateAndSendACFThickness+0x7c>)
 80037ea:	edc3 7a00 	vstr	s15, [r3]
}
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000a64 	.word	0x20000a64
 80037f8:	0801323c 	.word	0x0801323c
 80037fc:	20000a24 	.word	0x20000a24
 8003800:	447a0000 	.word	0x447a0000
 8003804:	2000000c 	.word	0x2000000c
 8003808:	20000a68 	.word	0x20000a68

0800380c <ProcessDataByMethod>:

/**
  * @brief Обработка данных в зависимости от выбранного метода
  */
void ProcessDataByMethod(void) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003812:	4b27      	ldr	r3, [pc, #156]	@ (80038b0 <ProcessDataByMethod+0xa4>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	f083 0301 	eor.w	r3, r3, #1
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <ProcessDataByMethod+0x1c>
        SendUSBDebugMessage("Parameters not initialized");
 8003820:	4824      	ldr	r0, [pc, #144]	@ (80038b4 <ProcessDataByMethod+0xa8>)
 8003822:	f7fd fc0d 	bl	8001040 <SendUSBDebugMessage>
        return;
 8003826:	e03f      	b.n	80038a8 <ProcessDataByMethod+0x9c>
    }

    successful_cycles = 0;
 8003828:	4b23      	ldr	r3, [pc, #140]	@ (80038b8 <ProcessDataByMethod+0xac>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 800382e:	2301      	movs	r3, #1
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	e008      	b.n	8003846 <ProcessDataByMethod+0x3a>
        ProcessCycle(cycle);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff fcb1 	bl	800319c <ProcessCycle>
        HAL_Delay(10);
 800383a:	200a      	movs	r0, #10
 800383c:	f000 f8e4 	bl	8003a08 <HAL_Delay>
    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3301      	adds	r3, #1
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <ProcessDataByMethod+0xb0>)
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d9f1      	bls.n	8003834 <ProcessDataByMethod+0x28>
    }

    if (successful_cycles == 0) {
 8003850:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <ProcessDataByMethod+0xac>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <ProcessDataByMethod+0x54>
        SendUSBDebugMessage("No cycles passed threshold check");
 8003858:	4819      	ldr	r0, [pc, #100]	@ (80038c0 <ProcessDataByMethod+0xb4>)
 800385a:	f7fd fbf1 	bl	8001040 <SendUSBDebugMessage>
        return;
 800385e:	e023      	b.n	80038a8 <ProcessDataByMethod+0x9c>
    }

    switch (params.method) {
 8003860:	4b16      	ldr	r3, [pc, #88]	@ (80038bc <ProcessDataByMethod+0xb0>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	2b02      	cmp	r3, #2
 8003866:	d017      	beq.n	8003898 <ProcessDataByMethod+0x8c>
 8003868:	2b02      	cmp	r3, #2
 800386a:	d819      	bhi.n	80038a0 <ProcessDataByMethod+0x94>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <ProcessDataByMethod+0x6a>
 8003870:	2b01      	cmp	r3, #1
 8003872:	d00d      	beq.n	8003890 <ProcessDataByMethod+0x84>
 8003874:	e014      	b.n	80038a0 <ProcessDataByMethod+0x94>
        case 0:
            arm_copy_f32(final_data, normalized_data, DATA_VALUES_COUNT);
 8003876:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 800387a:	4912      	ldr	r1, [pc, #72]	@ (80038c4 <ProcessDataByMethod+0xb8>)
 800387c:	4812      	ldr	r0, [pc, #72]	@ (80038c8 <ProcessDataByMethod+0xbc>)
 800387e:	f009 fdcd 	bl	800d41c <arm_copy_f32>
            NormalizeData();
 8003882:	f7ff fd03 	bl	800328c <NormalizeData>
            CalculateAutocorrelation();
 8003886:	f7ff fd61 	bl	800334c <CalculateAutocorrelation>
            CalculateAndSendACFThickness();
 800388a:	f7ff ff7f 	bl	800378c <CalculateAndSendACFThickness>
            break;
 800388e:	e00b      	b.n	80038a8 <ProcessDataByMethod+0x9c>

        case 1:
            CalculateZeroCrossingThickness(final_data);
 8003890:	480d      	ldr	r0, [pc, #52]	@ (80038c8 <ProcessDataByMethod+0xbc>)
 8003892:	f7ff fe0f 	bl	80034b4 <CalculateZeroCrossingThickness>
            break;
 8003896:	e007      	b.n	80038a8 <ProcessDataByMethod+0x9c>

        case 2:
            CalculateStrobeThickness(final_data);
 8003898:	480b      	ldr	r0, [pc, #44]	@ (80038c8 <ProcessDataByMethod+0xbc>)
 800389a:	f7ff febf 	bl	800361c <CalculateStrobeThickness>
            break;
 800389e:	e003      	b.n	80038a8 <ProcessDataByMethod+0x9c>

        default:
            SendUSBDebugMessage("Unknown method specified");
 80038a0:	480a      	ldr	r0, [pc, #40]	@ (80038cc <ProcessDataByMethod+0xc0>)
 80038a2:	f7fd fbcd 	bl	8001040 <SendUSBDebugMessage>
            break;
 80038a6:	bf00      	nop
    }
}
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000a64 	.word	0x20000a64
 80038b4:	08013278 	.word	0x08013278
 80038b8:	2001d2ac 	.word	0x2001d2ac
 80038bc:	20000a24 	.word	0x20000a24
 80038c0:	08013294 	.word	0x08013294
 80038c4:	20000a6c 	.word	0x20000a6c
 80038c8:	2001366c 	.word	0x2001366c
 80038cc:	080132b8 	.word	0x080132b8

080038d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003908 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80038d4:	f7ff fa0c 	bl	8002cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038d8:	480c      	ldr	r0, [pc, #48]	@ (800390c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038da:	490d      	ldr	r1, [pc, #52]	@ (8003910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038e0:	e002      	b.n	80038e8 <LoopCopyDataInit>

080038e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038e6:	3304      	adds	r3, #4

080038e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038ec:	d3f9      	bcc.n	80038e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038f0:	4c0a      	ldr	r4, [pc, #40]	@ (800391c <LoopFillZerobss+0x22>)
  movs r3, #0
 80038f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f4:	e001      	b.n	80038fa <LoopFillZerobss>

080038f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f8:	3204      	adds	r2, #4

080038fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038fc:	d3fb      	bcc.n	80038f6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80038fe:	f00b ff53 	bl	800f7a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003902:	f7fe fc13 	bl	800212c <main>
  bx  lr    
 8003906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800390c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003910:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8003914:	08018028 	.word	0x08018028
  ldr r2, =_sbss
 8003918:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800391c:	2001f134 	.word	0x2001f134

08003920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003920:	e7fe      	b.n	8003920 <ADC_IRQHandler>
	...

08003924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003928:	4b0e      	ldr	r3, [pc, #56]	@ (8003964 <HAL_Init+0x40>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a0d      	ldr	r2, [pc, #52]	@ (8003964 <HAL_Init+0x40>)
 800392e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003934:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <HAL_Init+0x40>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0a      	ldr	r2, [pc, #40]	@ (8003964 <HAL_Init+0x40>)
 800393a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800393e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003940:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <HAL_Init+0x40>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a07      	ldr	r2, [pc, #28]	@ (8003964 <HAL_Init+0x40>)
 8003946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800394a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800394c:	2003      	movs	r0, #3
 800394e:	f000 f94f 	bl	8003bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003952:	200f      	movs	r0, #15
 8003954:	f000 f808 	bl	8003968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003958:	f7fe ff22 	bl	80027a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023c00 	.word	0x40023c00

08003968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003970:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <HAL_InitTick+0x54>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <HAL_InitTick+0x58>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	4619      	mov	r1, r3
 800397a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800397e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f967 	bl	8003c5a <HAL_SYSTICK_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e00e      	b.n	80039b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b0f      	cmp	r3, #15
 800399a:	d80a      	bhi.n	80039b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800399c:	2200      	movs	r2, #0
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	f000 f92f 	bl	8003c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039a8:	4a06      	ldr	r2, [pc, #24]	@ (80039c4 <HAL_InitTick+0x5c>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000008 	.word	0x20000008
 80039c0:	20000014 	.word	0x20000014
 80039c4:	20000010 	.word	0x20000010

080039c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039cc:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_IncTick+0x20>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_IncTick+0x24>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	4a04      	ldr	r2, [pc, #16]	@ (80039ec <HAL_IncTick+0x24>)
 80039da:	6013      	str	r3, [r2, #0]
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000014 	.word	0x20000014
 80039ec:	2001d2b0 	.word	0x2001d2b0

080039f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return uwTick;
 80039f4:	4b03      	ldr	r3, [pc, #12]	@ (8003a04 <HAL_GetTick+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	2001d2b0 	.word	0x2001d2b0

08003a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a10:	f7ff ffee 	bl	80039f0 <HAL_GetTick>
 8003a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d005      	beq.n	8003a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a22:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <HAL_Delay+0x44>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a2e:	bf00      	nop
 8003a30:	f7ff ffde 	bl	80039f0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d8f7      	bhi.n	8003a30 <HAL_Delay+0x28>
  {
  }
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000014 	.word	0x20000014

08003a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a60:	4b0c      	ldr	r3, [pc, #48]	@ (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a82:	4a04      	ldr	r2, [pc, #16]	@ (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a9c:	4b04      	ldr	r3, [pc, #16]	@ (8003ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0307 	and.w	r3, r3, #7
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	db0b      	blt.n	8003ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	4907      	ldr	r1, [pc, #28]	@ (8003aec <__NVIC_EnableIRQ+0x38>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000e100 	.word	0xe000e100

08003af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	db0a      	blt.n	8003b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	490c      	ldr	r1, [pc, #48]	@ (8003b3c <__NVIC_SetPriority+0x4c>)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	0112      	lsls	r2, r2, #4
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	440b      	add	r3, r1
 8003b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b18:	e00a      	b.n	8003b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4908      	ldr	r1, [pc, #32]	@ (8003b40 <__NVIC_SetPriority+0x50>)
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	3b04      	subs	r3, #4
 8003b28:	0112      	lsls	r2, r2, #4
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	761a      	strb	r2, [r3, #24]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000e100 	.word	0xe000e100
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b089      	sub	sp, #36	@ 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f1c3 0307 	rsb	r3, r3, #7
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	bf28      	it	cs
 8003b62:	2304      	movcs	r3, #4
 8003b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2b06      	cmp	r3, #6
 8003b6c:	d902      	bls.n	8003b74 <NVIC_EncodePriority+0x30>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3b03      	subs	r3, #3
 8003b72:	e000      	b.n	8003b76 <NVIC_EncodePriority+0x32>
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b78:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43da      	mvns	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	401a      	ands	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	43d9      	mvns	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b9c:	4313      	orrs	r3, r2
         );
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3724      	adds	r7, #36	@ 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bbc:	d301      	bcc.n	8003bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00f      	b.n	8003be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <SysTick_Config+0x40>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bca:	210f      	movs	r1, #15
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	f7ff ff8e 	bl	8003af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd4:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <SysTick_Config+0x40>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bda:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <SysTick_Config+0x40>)
 8003bdc:	2207      	movs	r2, #7
 8003bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	e000e010 	.word	0xe000e010

08003bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff29 	bl	8003a50 <__NVIC_SetPriorityGrouping>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c18:	f7ff ff3e 	bl	8003a98 <__NVIC_GetPriorityGrouping>
 8003c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	6978      	ldr	r0, [r7, #20]
 8003c24:	f7ff ff8e 	bl	8003b44 <NVIC_EncodePriority>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff5d 	bl	8003af0 <__NVIC_SetPriority>
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff31 	bl	8003ab4 <__NVIC_EnableIRQ>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ffa2 	bl	8003bac <SysTick_Config>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e014      	b.n	8003cae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	791b      	ldrb	r3, [r3, #4]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d105      	bne.n	8003c9a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fe fdab 	bl	80027f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b089      	sub	sp, #36	@ 0x24
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_DAC_ConfigChannel+0x1c>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e042      	b.n	8003d5c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	795b      	ldrb	r3, [r3, #5]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_DAC_ConfigChannel+0x2c>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e03c      	b.n	8003d5c <HAL_DAC_ConfigChannel+0xa6>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2202      	movs	r2, #2
 8003cec:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	22c0      	movs	r2, #192	@ 0xc0
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43da      	mvns	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3724      	adds	r7, #36	@ 0x24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d76:	f7ff fe3b 	bl	80039f0 <HAL_GetTick>
 8003d7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d008      	beq.n	8003d9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2280      	movs	r2, #128	@ 0x80
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e052      	b.n	8003e40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0216 	bic.w	r2, r2, #22
 8003da8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003db8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_DMA_Abort+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0208 	bic.w	r2, r2, #8
 8003dd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dea:	e013      	b.n	8003e14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dec:	f7ff fe00 	bl	80039f0 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d90c      	bls.n	8003e14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2203      	movs	r2, #3
 8003e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e015      	b.n	8003e40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e4      	bne.n	8003dec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e26:	223f      	movs	r2, #63	@ 0x3f
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d004      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2280      	movs	r2, #128	@ 0x80
 8003e60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00c      	b.n	8003e80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2205      	movs	r2, #5
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e9a:	4b23      	ldr	r3, [pc, #140]	@ (8003f28 <HAL_FLASH_Program+0x9c>)
 8003e9c:	7e1b      	ldrb	r3, [r3, #24]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_FLASH_Program+0x1a>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e03b      	b.n	8003f1e <HAL_FLASH_Program+0x92>
 8003ea6:	4b20      	ldr	r3, [pc, #128]	@ (8003f28 <HAL_FLASH_Program+0x9c>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003eac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003eb0:	f000 f870 	bl	8003f94 <FLASH_WaitForLastOperation>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d12b      	bne.n	8003f16 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003ec4:	783b      	ldrb	r3, [r7, #0]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	68b8      	ldr	r0, [r7, #8]
 8003eca:	f000 f91b 	bl	8004104 <FLASH_Program_Byte>
 8003ece:	e016      	b.n	8003efe <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003ed6:	883b      	ldrh	r3, [r7, #0]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	68b8      	ldr	r0, [r7, #8]
 8003edc:	f000 f8ee 	bl	80040bc <FLASH_Program_HalfWord>
 8003ee0:	e00d      	b.n	8003efe <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d105      	bne.n	8003ef4 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	4619      	mov	r1, r3
 8003eec:	68b8      	ldr	r0, [r7, #8]
 8003eee:	f000 f8c3 	bl	8004078 <FLASH_Program_Word>
 8003ef2:	e004      	b.n	8003efe <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ef8:	68b8      	ldr	r0, [r7, #8]
 8003efa:	f000 f88b 	bl	8004014 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003efe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f02:	f000 f847 	bl	8003f94 <FLASH_WaitForLastOperation>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003f0a:	4b08      	ldr	r3, [pc, #32]	@ (8003f2c <HAL_FLASH_Program+0xa0>)
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	4a07      	ldr	r2, [pc, #28]	@ (8003f2c <HAL_FLASH_Program+0xa0>)
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f16:	4b04      	ldr	r3, [pc, #16]	@ (8003f28 <HAL_FLASH_Program+0x9c>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	761a      	strb	r2, [r3, #24]

  return status;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	2001d2b4 	.word	0x2001d2b4
 8003f2c:	40023c00 	.word	0x40023c00

08003f30 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <HAL_FLASH_Unlock+0x38>)
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	da0b      	bge.n	8003f5a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003f42:	4b09      	ldr	r3, [pc, #36]	@ (8003f68 <HAL_FLASH_Unlock+0x38>)
 8003f44:	4a09      	ldr	r2, [pc, #36]	@ (8003f6c <HAL_FLASH_Unlock+0x3c>)
 8003f46:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f48:	4b07      	ldr	r3, [pc, #28]	@ (8003f68 <HAL_FLASH_Unlock+0x38>)
 8003f4a:	4a09      	ldr	r2, [pc, #36]	@ (8003f70 <HAL_FLASH_Unlock+0x40>)
 8003f4c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <HAL_FLASH_Unlock+0x38>)
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	da01      	bge.n	8003f5a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40023c00 	.word	0x40023c00
 8003f6c:	45670123 	.word	0x45670123
 8003f70:	cdef89ab 	.word	0xcdef89ab

08003f74 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <HAL_FLASH_Lock+0x1c>)
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	4a04      	ldr	r2, [pc, #16]	@ (8003f90 <HAL_FLASH_Lock+0x1c>)
 8003f7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f82:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40023c00 	.word	0x40023c00

08003f94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800400c <FLASH_WaitForLastOperation+0x78>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003fa6:	f7ff fd23 	bl	80039f0 <HAL_GetTick>
 8003faa:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003fac:	e010      	b.n	8003fd0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d00c      	beq.n	8003fd0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <FLASH_WaitForLastOperation+0x38>
 8003fbc:	f7ff fd18 	bl	80039f0 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d201      	bcs.n	8003fd0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e019      	b.n	8004004 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <FLASH_WaitForLastOperation+0x7c>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e8      	bne.n	8003fae <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <FLASH_WaitForLastOperation+0x7c>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003fe8:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <FLASH_WaitForLastOperation+0x7c>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003fee:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <FLASH_WaitForLastOperation+0x7c>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003ffa:	f000 f8a5 	bl	8004148 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004002:	2300      	movs	r3, #0

}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	2001d2b4 	.word	0x2001d2b4
 8004010:	40023c00 	.word	0x40023c00

08004014 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004020:	4b14      	ldr	r3, [pc, #80]	@ (8004074 <FLASH_Program_DoubleWord+0x60>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	4a13      	ldr	r2, [pc, #76]	@ (8004074 <FLASH_Program_DoubleWord+0x60>)
 8004026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800402c:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <FLASH_Program_DoubleWord+0x60>)
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	4a10      	ldr	r2, [pc, #64]	@ (8004074 <FLASH_Program_DoubleWord+0x60>)
 8004032:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004036:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004038:	4b0e      	ldr	r3, [pc, #56]	@ (8004074 <FLASH_Program_DoubleWord+0x60>)
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	4a0d      	ldr	r2, [pc, #52]	@ (8004074 <FLASH_Program_DoubleWord+0x60>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800404a:	f3bf 8f6f 	isb	sy
}
 800404e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8004050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	000a      	movs	r2, r1
 800405e:	2300      	movs	r3, #0
 8004060:	68f9      	ldr	r1, [r7, #12]
 8004062:	3104      	adds	r1, #4
 8004064:	4613      	mov	r3, r2
 8004066:	600b      	str	r3, [r1, #0]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40023c00 	.word	0x40023c00

08004078 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004082:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <FLASH_Program_Word+0x40>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	4a0c      	ldr	r2, [pc, #48]	@ (80040b8 <FLASH_Program_Word+0x40>)
 8004088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800408c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800408e:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <FLASH_Program_Word+0x40>)
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	4a09      	ldr	r2, [pc, #36]	@ (80040b8 <FLASH_Program_Word+0x40>)
 8004094:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004098:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800409a:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <FLASH_Program_Word+0x40>)
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	4a06      	ldr	r2, [pc, #24]	@ (80040b8 <FLASH_Program_Word+0x40>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	601a      	str	r2, [r3, #0]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40023c00 	.word	0x40023c00

080040bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <FLASH_Program_HalfWord+0x44>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004100 <FLASH_Program_HalfWord+0x44>)
 80040ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80040d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <FLASH_Program_HalfWord+0x44>)
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	4a09      	ldr	r2, [pc, #36]	@ (8004100 <FLASH_Program_HalfWord+0x44>)
 80040da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040e0:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <FLASH_Program_HalfWord+0x44>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	4a06      	ldr	r2, [pc, #24]	@ (8004100 <FLASH_Program_HalfWord+0x44>)
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	801a      	strh	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40023c00 	.word	0x40023c00

08004104 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004110:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <FLASH_Program_Byte+0x40>)
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	4a0b      	ldr	r2, [pc, #44]	@ (8004144 <FLASH_Program_Byte+0x40>)
 8004116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800411a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <FLASH_Program_Byte+0x40>)
 800411e:	4a09      	ldr	r2, [pc, #36]	@ (8004144 <FLASH_Program_Byte+0x40>)
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004124:	4b07      	ldr	r3, [pc, #28]	@ (8004144 <FLASH_Program_Byte+0x40>)
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	4a06      	ldr	r2, [pc, #24]	@ (8004144 <FLASH_Program_Byte+0x40>)
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	701a      	strb	r2, [r3, #0]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40023c00 	.word	0x40023c00

08004148 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800414c:	4b27      	ldr	r3, [pc, #156]	@ (80041ec <FLASH_SetErrorCode+0xa4>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004158:	4b25      	ldr	r3, [pc, #148]	@ (80041f0 <FLASH_SetErrorCode+0xa8>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f043 0310 	orr.w	r3, r3, #16
 8004160:	4a23      	ldr	r2, [pc, #140]	@ (80041f0 <FLASH_SetErrorCode+0xa8>)
 8004162:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004164:	4b21      	ldr	r3, [pc, #132]	@ (80041ec <FLASH_SetErrorCode+0xa4>)
 8004166:	2210      	movs	r2, #16
 8004168:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800416a:	4b20      	ldr	r3, [pc, #128]	@ (80041ec <FLASH_SetErrorCode+0xa4>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004176:	4b1e      	ldr	r3, [pc, #120]	@ (80041f0 <FLASH_SetErrorCode+0xa8>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f043 0308 	orr.w	r3, r3, #8
 800417e:	4a1c      	ldr	r2, [pc, #112]	@ (80041f0 <FLASH_SetErrorCode+0xa8>)
 8004180:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004182:	4b1a      	ldr	r3, [pc, #104]	@ (80041ec <FLASH_SetErrorCode+0xa4>)
 8004184:	2220      	movs	r2, #32
 8004186:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004188:	4b18      	ldr	r3, [pc, #96]	@ (80041ec <FLASH_SetErrorCode+0xa4>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004194:	4b16      	ldr	r3, [pc, #88]	@ (80041f0 <FLASH_SetErrorCode+0xa8>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f043 0304 	orr.w	r3, r3, #4
 800419c:	4a14      	ldr	r2, [pc, #80]	@ (80041f0 <FLASH_SetErrorCode+0xa8>)
 800419e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80041a0:	4b12      	ldr	r3, [pc, #72]	@ (80041ec <FLASH_SetErrorCode+0xa4>)
 80041a2:	2240      	movs	r2, #64	@ 0x40
 80041a4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80041a6:	4b11      	ldr	r3, [pc, #68]	@ (80041ec <FLASH_SetErrorCode+0xa4>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80041b2:	4b0f      	ldr	r3, [pc, #60]	@ (80041f0 <FLASH_SetErrorCode+0xa8>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f043 0302 	orr.w	r3, r3, #2
 80041ba:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <FLASH_SetErrorCode+0xa8>)
 80041bc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80041be:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <FLASH_SetErrorCode+0xa4>)
 80041c0:	2280      	movs	r2, #128	@ 0x80
 80041c2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80041c4:	4b09      	ldr	r3, [pc, #36]	@ (80041ec <FLASH_SetErrorCode+0xa4>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80041d0:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <FLASH_SetErrorCode+0xa8>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f043 0320 	orr.w	r3, r3, #32
 80041d8:	4a05      	ldr	r2, [pc, #20]	@ (80041f0 <FLASH_SetErrorCode+0xa8>)
 80041da:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80041dc:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <FLASH_SetErrorCode+0xa4>)
 80041de:	2202      	movs	r2, #2
 80041e0:	60da      	str	r2, [r3, #12]
  }
}
 80041e2:	bf00      	nop
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40023c00 	.word	0x40023c00
 80041f0:	2001d2b4 	.word	0x2001d2b4

080041f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e010      	b.n	8004232 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d103      	bne.n	800421e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004216:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e009      	b.n	8004232 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d103      	bne.n	800422c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004224:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e002      	b.n	8004232 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800422c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004230:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004232:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <FLASH_Erase_Sector+0x8c>)
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <FLASH_Erase_Sector+0x8c>)
 8004238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800423c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800423e:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <FLASH_Erase_Sector+0x8c>)
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	490f      	ldr	r1, [pc, #60]	@ (8004280 <FLASH_Erase_Sector+0x8c>)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <FLASH_Erase_Sector+0x8c>)
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	4a0c      	ldr	r2, [pc, #48]	@ (8004280 <FLASH_Erase_Sector+0x8c>)
 8004250:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8004254:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <FLASH_Erase_Sector+0x8c>)
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4313      	orrs	r3, r2
 8004260:	4a07      	ldr	r2, [pc, #28]	@ (8004280 <FLASH_Erase_Sector+0x8c>)
 8004262:	f043 0302 	orr.w	r3, r3, #2
 8004266:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004268:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <FLASH_Erase_Sector+0x8c>)
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	4a04      	ldr	r2, [pc, #16]	@ (8004280 <FLASH_Erase_Sector+0x8c>)
 800426e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004272:	6113      	str	r3, [r2, #16]
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40023c00 	.word	0x40023c00

08004284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	@ 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e16b      	b.n	8004578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042a0:	2201      	movs	r2, #1
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	f040 815a 	bne.w	8004572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d005      	beq.n	80042d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d130      	bne.n	8004338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	2203      	movs	r2, #3
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4013      	ands	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800430c:	2201      	movs	r2, #1
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 0201 	and.w	r2, r3, #1
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b03      	cmp	r3, #3
 8004342:	d017      	beq.n	8004374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	2203      	movs	r2, #3
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d123      	bne.n	80043c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	08da      	lsrs	r2, r3, #3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3208      	adds	r2, #8
 8004388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	220f      	movs	r2, #15
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	08da      	lsrs	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3208      	adds	r2, #8
 80043c2:	69b9      	ldr	r1, [r7, #24]
 80043c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	2203      	movs	r2, #3
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0203 	and.w	r2, r3, #3
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80b4 	beq.w	8004572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	4b60      	ldr	r3, [pc, #384]	@ (8004590 <HAL_GPIO_Init+0x30c>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	4a5f      	ldr	r2, [pc, #380]	@ (8004590 <HAL_GPIO_Init+0x30c>)
 8004414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004418:	6453      	str	r3, [r2, #68]	@ 0x44
 800441a:	4b5d      	ldr	r3, [pc, #372]	@ (8004590 <HAL_GPIO_Init+0x30c>)
 800441c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004426:	4a5b      	ldr	r2, [pc, #364]	@ (8004594 <HAL_GPIO_Init+0x310>)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	3302      	adds	r3, #2
 800442e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a52      	ldr	r2, [pc, #328]	@ (8004598 <HAL_GPIO_Init+0x314>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d02b      	beq.n	80044aa <HAL_GPIO_Init+0x226>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a51      	ldr	r2, [pc, #324]	@ (800459c <HAL_GPIO_Init+0x318>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d025      	beq.n	80044a6 <HAL_GPIO_Init+0x222>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a50      	ldr	r2, [pc, #320]	@ (80045a0 <HAL_GPIO_Init+0x31c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01f      	beq.n	80044a2 <HAL_GPIO_Init+0x21e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a4f      	ldr	r2, [pc, #316]	@ (80045a4 <HAL_GPIO_Init+0x320>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d019      	beq.n	800449e <HAL_GPIO_Init+0x21a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a4e      	ldr	r2, [pc, #312]	@ (80045a8 <HAL_GPIO_Init+0x324>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_GPIO_Init+0x216>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a4d      	ldr	r2, [pc, #308]	@ (80045ac <HAL_GPIO_Init+0x328>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00d      	beq.n	8004496 <HAL_GPIO_Init+0x212>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a4c      	ldr	r2, [pc, #304]	@ (80045b0 <HAL_GPIO_Init+0x32c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d007      	beq.n	8004492 <HAL_GPIO_Init+0x20e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a4b      	ldr	r2, [pc, #300]	@ (80045b4 <HAL_GPIO_Init+0x330>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d101      	bne.n	800448e <HAL_GPIO_Init+0x20a>
 800448a:	2307      	movs	r3, #7
 800448c:	e00e      	b.n	80044ac <HAL_GPIO_Init+0x228>
 800448e:	2308      	movs	r3, #8
 8004490:	e00c      	b.n	80044ac <HAL_GPIO_Init+0x228>
 8004492:	2306      	movs	r3, #6
 8004494:	e00a      	b.n	80044ac <HAL_GPIO_Init+0x228>
 8004496:	2305      	movs	r3, #5
 8004498:	e008      	b.n	80044ac <HAL_GPIO_Init+0x228>
 800449a:	2304      	movs	r3, #4
 800449c:	e006      	b.n	80044ac <HAL_GPIO_Init+0x228>
 800449e:	2303      	movs	r3, #3
 80044a0:	e004      	b.n	80044ac <HAL_GPIO_Init+0x228>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e002      	b.n	80044ac <HAL_GPIO_Init+0x228>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <HAL_GPIO_Init+0x228>
 80044aa:	2300      	movs	r3, #0
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	f002 0203 	and.w	r2, r2, #3
 80044b2:	0092      	lsls	r2, r2, #2
 80044b4:	4093      	lsls	r3, r2
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044bc:	4935      	ldr	r1, [pc, #212]	@ (8004594 <HAL_GPIO_Init+0x310>)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	089b      	lsrs	r3, r3, #2
 80044c2:	3302      	adds	r3, #2
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ca:	4b3b      	ldr	r3, [pc, #236]	@ (80045b8 <HAL_GPIO_Init+0x334>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ee:	4a32      	ldr	r2, [pc, #200]	@ (80045b8 <HAL_GPIO_Init+0x334>)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044f4:	4b30      	ldr	r3, [pc, #192]	@ (80045b8 <HAL_GPIO_Init+0x334>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004518:	4a27      	ldr	r2, [pc, #156]	@ (80045b8 <HAL_GPIO_Init+0x334>)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800451e:	4b26      	ldr	r3, [pc, #152]	@ (80045b8 <HAL_GPIO_Init+0x334>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004542:	4a1d      	ldr	r2, [pc, #116]	@ (80045b8 <HAL_GPIO_Init+0x334>)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004548:	4b1b      	ldr	r3, [pc, #108]	@ (80045b8 <HAL_GPIO_Init+0x334>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800456c:	4a12      	ldr	r2, [pc, #72]	@ (80045b8 <HAL_GPIO_Init+0x334>)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3301      	adds	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b0f      	cmp	r3, #15
 800457c:	f67f ae90 	bls.w	80042a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	3724      	adds	r7, #36	@ 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800
 8004594:	40013800 	.word	0x40013800
 8004598:	40020000 	.word	0x40020000
 800459c:	40020400 	.word	0x40020400
 80045a0:	40020800 	.word	0x40020800
 80045a4:	40020c00 	.word	0x40020c00
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40021400 	.word	0x40021400
 80045b0:	40021800 	.word	0x40021800
 80045b4:	40021c00 	.word	0x40021c00
 80045b8:	40013c00 	.word	0x40013c00

080045bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	887b      	ldrh	r3, [r7, #2]
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e001      	b.n	80045de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045de:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	807b      	strh	r3, [r7, #2]
 80045f8:	4613      	mov	r3, r2
 80045fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045fc:	787b      	ldrb	r3, [r7, #1]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004602:	887a      	ldrh	r2, [r7, #2]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004608:	e003      	b.n	8004612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800460a:	887b      	ldrh	r3, [r7, #2]
 800460c:	041a      	lsls	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	619a      	str	r2, [r3, #24]
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af02      	add	r7, sp, #8
 8004624:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e101      	b.n	8004834 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f008 fbd2 	bl	800cdf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2203      	movs	r2, #3
 8004654:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800465e:	d102      	bne.n	8004666 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f004 fb3f 	bl	8008cee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7c1a      	ldrb	r2, [r3, #16]
 8004678:	f88d 2000 	strb.w	r2, [sp]
 800467c:	3304      	adds	r3, #4
 800467e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004680:	f004 fa1e 	bl	8008ac0 <USB_CoreInit>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e0ce      	b.n	8004834 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f004 fb37 	bl	8008d10 <USB_SetCurrentMode>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0bf      	b.n	8004834 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]
 80046b8:	e04a      	b.n	8004750 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046ba:	7bfa      	ldrb	r2, [r7, #15]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	3315      	adds	r3, #21
 80046ca:	2201      	movs	r2, #1
 80046cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046ce:	7bfa      	ldrb	r2, [r7, #15]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	3314      	adds	r3, #20
 80046de:	7bfa      	ldrb	r2, [r7, #15]
 80046e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	b298      	uxth	r0, r3
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	332e      	adds	r3, #46	@ 0x2e
 80046f6:	4602      	mov	r2, r0
 80046f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	3318      	adds	r3, #24
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800470e:	7bfa      	ldrb	r2, [r7, #15]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	331c      	adds	r3, #28
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004722:	7bfa      	ldrb	r2, [r7, #15]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	3320      	adds	r3, #32
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004736:	7bfa      	ldrb	r2, [r7, #15]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	3324      	adds	r3, #36	@ 0x24
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	3301      	adds	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	791b      	ldrb	r3, [r3, #4]
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	429a      	cmp	r2, r3
 8004758:	d3af      	bcc.n	80046ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	e044      	b.n	80047ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004776:	7bfa      	ldrb	r2, [r7, #15]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004788:	7bfa      	ldrb	r2, [r7, #15]
 800478a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800478c:	7bfa      	ldrb	r2, [r7, #15]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047b8:	7bfa      	ldrb	r2, [r7, #15]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	3301      	adds	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	791b      	ldrb	r3, [r3, #4]
 80047ee:	7bfa      	ldrb	r2, [r7, #15]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d3b5      	bcc.n	8004760 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	7c1a      	ldrb	r2, [r3, #16]
 80047fc:	f88d 2000 	strb.w	r2, [sp]
 8004800:	3304      	adds	r3, #4
 8004802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004804:	f004 fad0 	bl	8008da8 <USB_DevInit>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2202      	movs	r2, #2
 8004812:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e00c      	b.n	8004834 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f005 fb1a 	bl	8009e66 <USB_DevDisconnect>

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_PCD_Start+0x1c>
 8004854:	2302      	movs	r3, #2
 8004856:	e022      	b.n	800489e <HAL_PCD_Start+0x62>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d009      	beq.n	8004880 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004870:	2b01      	cmp	r3, #1
 8004872:	d105      	bne.n	8004880 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f004 fa21 	bl	8008ccc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f005 fac8 	bl	8009e24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048a6:	b590      	push	{r4, r7, lr}
 80048a8:	b08d      	sub	sp, #52	@ 0x34
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f005 fb86 	bl	8009fce <USB_GetMode>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f040 848c 	bne.w	80051e2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f005 faea 	bl	8009ea8 <USB_ReadInterrupts>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8482 	beq.w	80051e0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	0a1b      	lsrs	r3, r3, #8
 80048e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f005 fad7 	bl	8009ea8 <USB_ReadInterrupts>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d107      	bne.n	8004914 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f002 0202 	and.w	r2, r2, #2
 8004912:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f005 fac5 	bl	8009ea8 <USB_ReadInterrupts>
 800491e:	4603      	mov	r3, r0
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b10      	cmp	r3, #16
 8004926:	d161      	bne.n	80049ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0210 	bic.w	r2, r2, #16
 8004936:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	f003 020f 	and.w	r2, r3, #15
 8004944:	4613      	mov	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	4413      	add	r3, r2
 8004954:	3304      	adds	r3, #4
 8004956:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800495e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004962:	d124      	bne.n	80049ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d035      	beq.n	80049dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800497a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800497e:	b29b      	uxth	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	6a38      	ldr	r0, [r7, #32]
 8004984:	f005 f8fc 	bl	8009b80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004994:	441a      	add	r2, r3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049a6:	441a      	add	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	615a      	str	r2, [r3, #20]
 80049ac:	e016      	b.n	80049dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80049b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049b8:	d110      	bne.n	80049dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80049c0:	2208      	movs	r2, #8
 80049c2:	4619      	mov	r1, r3
 80049c4:	6a38      	ldr	r0, [r7, #32]
 80049c6:	f005 f8db 	bl	8009b80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049d6:	441a      	add	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0210 	orr.w	r2, r2, #16
 80049ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f005 fa59 	bl	8009ea8 <USB_ReadInterrupts>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a00:	f040 80a7 	bne.w	8004b52 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f005 fa5e 	bl	8009ece <USB_ReadDevAllOutEpInterrupt>
 8004a12:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004a14:	e099      	b.n	8004b4a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 808e 	beq.w	8004b3e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f005 fa82 	bl	8009f36 <USB_ReadDevOutEPInterrupt>
 8004a32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00c      	beq.n	8004a58 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fea4 	bl	80057a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00c      	beq.n	8004a7c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2308      	movs	r3, #8
 8004a72:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 ff7a 	bl	8005970 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d008      	beq.n	8004a98 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	2310      	movs	r3, #16
 8004a96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d030      	beq.n	8004b04 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aaa:	2b80      	cmp	r3, #128	@ 0x80
 8004aac:	d109      	bne.n	8004ac2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004abc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ac0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	78db      	ldrb	r3, [r3, #3]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d108      	bne.n	8004af2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f008 fa87 	bl	800d000 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afe:	461a      	mov	r2, r3
 8004b00:	2302      	movs	r3, #2
 8004b02:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b36:	461a      	mov	r2, r3
 8004b38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b3c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	3301      	adds	r3, #1
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f47f af62 	bne.w	8004a16 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f005 f9a6 	bl	8009ea8 <USB_ReadInterrupts>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b66:	f040 80db 	bne.w	8004d20 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f005 f9c7 	bl	8009f02 <USB_ReadDevAllInEpInterrupt>
 8004b74:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004b7a:	e0cd      	b.n	8004d18 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80c2 	beq.w	8004d0c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f005 f9ed 	bl	8009f72 <USB_ReadDevInEPInterrupt>
 8004b98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d057      	beq.n	8004c54 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	2201      	movs	r2, #1
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69f9      	ldr	r1, [r7, #28]
 8004bc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	799b      	ldrb	r3, [r3, #6]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d132      	bne.n	8004c48 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	3320      	adds	r3, #32
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4403      	add	r3, r0
 8004c02:	331c      	adds	r3, #28
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4419      	add	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4403      	add	r3, r0
 8004c16:	3320      	adds	r3, #32
 8004c18:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d113      	bne.n	8004c48 <HAL_PCD_IRQHandler+0x3a2>
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3324      	adds	r3, #36	@ 0x24
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d108      	bne.n	8004c48 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c40:	461a      	mov	r2, r3
 8004c42:	2101      	movs	r1, #1
 8004c44:	f005 f9f4 	bl	800a030 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f008 f951 	bl	800cef6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d008      	beq.n	8004c70 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c86:	461a      	mov	r2, r3
 8004c88:	2310      	movs	r3, #16
 8004c8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2340      	movs	r3, #64	@ 0x40
 8004ca6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d023      	beq.n	8004cfa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004cb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cb4:	6a38      	ldr	r0, [r7, #32]
 8004cb6:	f004 f9db 	bl	8009070 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	3310      	adds	r3, #16
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4413      	add	r3, r2
 8004cca:	3304      	adds	r3, #4
 8004ccc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	78db      	ldrb	r3, [r3, #3]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d108      	bne.n	8004ce8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f008 f99e 	bl	800d024 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004d04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fcbd 	bl	8005686 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	3301      	adds	r3, #1
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f47f af2e 	bne.w	8004b7c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f005 f8bf 	bl	8009ea8 <USB_ReadInterrupts>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d34:	d122      	bne.n	8004d7c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d108      	bne.n	8004d66 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fea4 	bl	8005aac <HAL_PCDEx_LPM_Callback>
 8004d64:	e002      	b.n	8004d6c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f008 f93c 	bl	800cfe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695a      	ldr	r2, [r3, #20]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f005 f891 	bl	8009ea8 <USB_ReadInterrupts>
 8004d86:	4603      	mov	r3, r0
 8004d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d90:	d112      	bne.n	8004db8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d102      	bne.n	8004da8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f008 f8f8 	bl	800cf98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004db6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f005 f873 	bl	8009ea8 <USB_ReadInterrupts>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dcc:	f040 80b7 	bne.w	8004f3e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2110      	movs	r1, #16
 8004dea:	4618      	mov	r0, r3
 8004dec:	f004 f940 	bl	8009070 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df0:	2300      	movs	r3, #0
 8004df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df4:	e046      	b.n	8004e84 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e02:	461a      	mov	r2, r3
 8004e04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e1a:	0151      	lsls	r1, r2, #5
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	440a      	add	r2, r1
 8004e20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e36:	461a      	mov	r2, r3
 8004e38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e4e:	0151      	lsls	r1, r2, #5
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	440a      	add	r2, r1
 8004e54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e80:	3301      	adds	r3, #1
 8004e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	791b      	ldrb	r3, [r3, #4]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d3b2      	bcc.n	8004df6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e9e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004ea2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	7bdb      	ldrb	r3, [r3, #15]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d016      	beq.n	8004eda <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ebc:	f043 030b 	orr.w	r3, r3, #11
 8004ec0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ed2:	f043 030b 	orr.w	r3, r3, #11
 8004ed6:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ed8:	e015      	b.n	8004f06 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ee8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004eec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004ef0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f00:	f043 030b 	orr.w	r3, r3, #11
 8004f04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f14:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004f18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f005 f881 	bl	800a030 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f004 ffb0 	bl	8009ea8 <USB_ReadInterrupts>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f52:	d123      	bne.n	8004f9c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f005 f846 	bl	8009fea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f004 f8fd 	bl	8009162 <USB_GetDevSpeed>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681c      	ldr	r4, [r3, #0]
 8004f74:	f001 fa0a 	bl	800638c <HAL_RCC_GetHCLKFreq>
 8004f78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4620      	mov	r0, r4
 8004f82:	f003 fe01 	bl	8008b88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f007 ffdd 	bl	800cf46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f004 ff81 	bl	8009ea8 <USB_ReadInterrupts>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d10a      	bne.n	8004fc6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f007 ffba 	bl	800cf2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695a      	ldr	r2, [r3, #20]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f002 0208 	and.w	r2, r2, #8
 8004fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f004 ff6c 	bl	8009ea8 <USB_ReadInterrupts>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd6:	2b80      	cmp	r3, #128	@ 0x80
 8004fd8:	d123      	bne.n	8005022 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fea:	e014      	b.n	8005016 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d105      	bne.n	8005010 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	b2db      	uxtb	r3, r3
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fb0a 	bl	8005624 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	3301      	adds	r3, #1
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	791b      	ldrb	r3, [r3, #4]
 800501a:	461a      	mov	r2, r3
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	4293      	cmp	r3, r2
 8005020:	d3e4      	bcc.n	8004fec <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f004 ff3e 	bl	8009ea8 <USB_ReadInterrupts>
 800502c:	4603      	mov	r3, r0
 800502e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005036:	d13c      	bne.n	80050b2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005038:	2301      	movs	r3, #1
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
 800503c:	e02b      	b.n	8005096 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005052:	4613      	mov	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	3318      	adds	r3, #24
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d115      	bne.n	8005090 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005064:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005066:	2b00      	cmp	r3, #0
 8005068:	da12      	bge.n	8005090 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	3317      	adds	r3, #23
 800507a:	2201      	movs	r2, #1
 800507c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005086:	b2db      	uxtb	r3, r3
 8005088:	4619      	mov	r1, r3
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 faca 	bl	8005624 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	3301      	adds	r3, #1
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	791b      	ldrb	r3, [r3, #4]
 800509a:	461a      	mov	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	4293      	cmp	r3, r2
 80050a0:	d3cd      	bcc.n	800503e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80050b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f004 fef6 	bl	8009ea8 <USB_ReadInterrupts>
 80050bc:	4603      	mov	r3, r0
 80050be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050c6:	d156      	bne.n	8005176 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050c8:	2301      	movs	r3, #1
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80050cc:	e045      	b.n	800515a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d12e      	bne.n	8005154 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80050f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	da2b      	bge.n	8005154 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	0c1a      	lsrs	r2, r3, #16
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005106:	4053      	eors	r3, r2
 8005108:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800510c:	2b00      	cmp	r3, #0
 800510e:	d121      	bne.n	8005154 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800514c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005150:	6053      	str	r3, [r2, #4]
            break;
 8005152:	e008      	b.n	8005166 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	3301      	adds	r3, #1
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	791b      	ldrb	r3, [r3, #4]
 800515e:	461a      	mov	r2, r3
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	4293      	cmp	r3, r2
 8005164:	d3b3      	bcc.n	80050ce <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f004 fe94 	bl	8009ea8 <USB_ReadInterrupts>
 8005180:	4603      	mov	r3, r0
 8005182:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518a:	d10a      	bne.n	80051a2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f007 ff5b 	bl	800d048 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80051a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f004 fe7e 	bl	8009ea8 <USB_ReadInterrupts>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d115      	bne.n	80051e2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f007 ff4b 	bl	800d064 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	e000      	b.n	80051e2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80051e0:	bf00      	nop
    }
  }
}
 80051e2:	3734      	adds	r7, #52	@ 0x34
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd90      	pop	{r4, r7, pc}

080051e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_PCD_SetAddress+0x1a>
 80051fe:	2302      	movs	r3, #2
 8005200:	e012      	b.n	8005228 <HAL_PCD_SetAddress+0x40>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	4611      	mov	r1, r2
 8005218:	4618      	mov	r0, r3
 800521a:	f004 fddd 	bl	8009dd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	4608      	mov	r0, r1
 800523a:	4611      	mov	r1, r2
 800523c:	461a      	mov	r2, r3
 800523e:	4603      	mov	r3, r0
 8005240:	70fb      	strb	r3, [r7, #3]
 8005242:	460b      	mov	r3, r1
 8005244:	803b      	strh	r3, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800524e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005252:	2b00      	cmp	r3, #0
 8005254:	da0f      	bge.n	8005276 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	f003 020f 	and.w	r2, r3, #15
 800525c:	4613      	mov	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	3310      	adds	r3, #16
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4413      	add	r3, r2
 800526a:	3304      	adds	r3, #4
 800526c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	705a      	strb	r2, [r3, #1]
 8005274:	e00f      	b.n	8005296 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 020f 	and.w	r2, r3, #15
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4413      	add	r3, r2
 800528c:	3304      	adds	r3, #4
 800528e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	b2da      	uxtb	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80052a2:	883b      	ldrh	r3, [r7, #0]
 80052a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	78ba      	ldrb	r2, [r7, #2]
 80052b0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d004      	beq.n	80052c4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052c4:	78bb      	ldrb	r3, [r7, #2]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d102      	bne.n	80052d0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_PCD_EP_Open+0xae>
 80052da:	2302      	movs	r3, #2
 80052dc:	e00e      	b.n	80052fc <HAL_PCD_EP_Open+0xcc>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68f9      	ldr	r1, [r7, #12]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f003 ff5d 	bl	80091ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80052fa:	7afb      	ldrb	r3, [r7, #11]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005314:	2b00      	cmp	r3, #0
 8005316:	da0f      	bge.n	8005338 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	f003 020f 	and.w	r2, r3, #15
 800531e:	4613      	mov	r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	3310      	adds	r3, #16
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	4413      	add	r3, r2
 800532c:	3304      	adds	r3, #4
 800532e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	705a      	strb	r2, [r3, #1]
 8005336:	e00f      	b.n	8005358 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	f003 020f 	and.w	r2, r3, #15
 800533e:	4613      	mov	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	4413      	add	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	3304      	adds	r3, #4
 8005350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	b2da      	uxtb	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_PCD_EP_Close+0x6e>
 800536e:	2302      	movs	r3, #2
 8005370:	e00e      	b.n	8005390 <HAL_PCD_EP_Close+0x8c>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68f9      	ldr	r1, [r7, #12]
 8005380:	4618      	mov	r0, r3
 8005382:	f003 ff9b 	bl	80092bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	607a      	str	r2, [r7, #4]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	460b      	mov	r3, r1
 80053a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053a8:	7afb      	ldrb	r3, [r7, #11]
 80053aa:	f003 020f 	and.w	r2, r3, #15
 80053ae:	4613      	mov	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	3304      	adds	r3, #4
 80053c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2200      	movs	r2, #0
 80053d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053da:	7afb      	ldrb	r3, [r7, #11]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	799b      	ldrb	r3, [r3, #6]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d102      	bne.n	80053f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	799b      	ldrb	r3, [r3, #6]
 80053fc:	461a      	mov	r2, r3
 80053fe:	6979      	ldr	r1, [r7, #20]
 8005400:	f004 f838 	bl	8009474 <USB_EPStartXfer>

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 020f 	and.w	r2, r3, #15
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005430:	681b      	ldr	r3, [r3, #0]
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b086      	sub	sp, #24
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
 800544a:	460b      	mov	r3, r1
 800544c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800544e:	7afb      	ldrb	r3, [r7, #11]
 8005450:	f003 020f 	and.w	r2, r3, #15
 8005454:	4613      	mov	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	3310      	adds	r3, #16
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	3304      	adds	r3, #4
 8005464:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2200      	movs	r2, #0
 8005476:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2201      	movs	r2, #1
 800547c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800547e:	7afb      	ldrb	r3, [r7, #11]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	b2da      	uxtb	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	799b      	ldrb	r3, [r3, #6]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d102      	bne.n	8005498 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	799b      	ldrb	r3, [r3, #6]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6979      	ldr	r1, [r7, #20]
 80054a4:	f003 ffe6 	bl	8009474 <USB_EPStartXfer>

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	7912      	ldrb	r2, [r2, #4]
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d901      	bls.n	80054d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e04f      	b.n	8005570 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	da0f      	bge.n	80054f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	f003 020f 	and.w	r2, r3, #15
 80054de:	4613      	mov	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	3310      	adds	r3, #16
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	3304      	adds	r3, #4
 80054ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	705a      	strb	r2, [r3, #1]
 80054f6:	e00d      	b.n	8005514 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	3304      	adds	r3, #4
 800550c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_PCD_EP_SetStall+0x82>
 8005530:	2302      	movs	r3, #2
 8005532:	e01d      	b.n	8005570 <HAL_PCD_EP_SetStall+0xbe>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	4618      	mov	r0, r3
 8005544:	f004 fb74 	bl	8009c30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	7999      	ldrb	r1, [r3, #6]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005560:	461a      	mov	r2, r3
 8005562:	f004 fd65 	bl	800a030 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	7912      	ldrb	r2, [r2, #4]
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e042      	b.n	800561c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800559a:	2b00      	cmp	r3, #0
 800559c:	da0f      	bge.n	80055be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	f003 020f 	and.w	r2, r3, #15
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	3310      	adds	r3, #16
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	4413      	add	r3, r2
 80055b2:	3304      	adds	r3, #4
 80055b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	705a      	strb	r2, [r3, #1]
 80055bc:	e00f      	b.n	80055de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	f003 020f 	and.w	r2, r3, #15
 80055c4:	4613      	mov	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	4413      	add	r3, r2
 80055d4:	3304      	adds	r3, #4
 80055d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_PCD_EP_ClrStall+0x86>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e00e      	b.n	800561c <HAL_PCD_EP_ClrStall+0xa4>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	4618      	mov	r0, r3
 800560e:	f004 fb7d 	bl	8009d0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005634:	2b00      	cmp	r3, #0
 8005636:	da0c      	bge.n	8005652 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	f003 020f 	and.w	r2, r3, #15
 800563e:	4613      	mov	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	3310      	adds	r3, #16
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4413      	add	r3, r2
 800564c:	3304      	adds	r3, #4
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e00c      	b.n	800566c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005652:	78fb      	ldrb	r3, [r7, #3]
 8005654:	f003 020f 	and.w	r2, r3, #15
 8005658:	4613      	mov	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4413      	add	r3, r2
 8005668:	3304      	adds	r3, #4
 800566a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68f9      	ldr	r1, [r7, #12]
 8005672:	4618      	mov	r0, r3
 8005674:	f004 f99c 	bl	80099b0 <USB_EPStopXfer>
 8005678:	4603      	mov	r3, r0
 800567a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800567c:	7afb      	ldrb	r3, [r7, #11]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b08a      	sub	sp, #40	@ 0x28
 800568a:	af02      	add	r7, sp, #8
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	3310      	adds	r3, #16
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	4413      	add	r3, r2
 80056aa:	3304      	adds	r3, #4
 80056ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d901      	bls.n	80056be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e06b      	b.n	8005796 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d902      	bls.n	80056da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	3303      	adds	r3, #3
 80056de:	089b      	lsrs	r3, r3, #2
 80056e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056e2:	e02a      	b.n	800573a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d902      	bls.n	8005700 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	3303      	adds	r3, #3
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	68d9      	ldr	r1, [r3, #12]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	b2da      	uxtb	r2, r3
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	4603      	mov	r3, r0
 800571c:	6978      	ldr	r0, [r7, #20]
 800571e:	f004 f9f1 	bl	8009b04 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	441a      	add	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	441a      	add	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	429a      	cmp	r2, r3
 800574e:	d809      	bhi.n	8005764 <PCD_WriteEmptyTxFifo+0xde>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005758:	429a      	cmp	r2, r3
 800575a:	d203      	bcs.n	8005764 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1bf      	bne.n	80056e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	429a      	cmp	r2, r3
 800576e:	d811      	bhi.n	8005794 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	2201      	movs	r2, #1
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	43db      	mvns	r3, r3
 800578a:	6939      	ldr	r1, [r7, #16]
 800578c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005790:	4013      	ands	r3, r2
 8005792:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	333c      	adds	r3, #60	@ 0x3c
 80057b8:	3304      	adds	r3, #4
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	799b      	ldrb	r3, [r3, #6]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d17b      	bne.n	80058ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d015      	beq.n	800580c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	4a61      	ldr	r2, [pc, #388]	@ (8005968 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	f240 80b9 	bls.w	800595c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80b3 	beq.w	800595c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005802:	461a      	mov	r2, r3
 8005804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005808:	6093      	str	r3, [r2, #8]
 800580a:	e0a7      	b.n	800595c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005822:	461a      	mov	r2, r3
 8005824:	2320      	movs	r3, #32
 8005826:	6093      	str	r3, [r2, #8]
 8005828:	e098      	b.n	800595c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	f040 8093 	bne.w	800595c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4a4b      	ldr	r2, [pc, #300]	@ (8005968 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d90f      	bls.n	800585e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005854:	461a      	mov	r2, r3
 8005856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585a:	6093      	str	r3, [r2, #8]
 800585c:	e07e      	b.n	800595c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	4413      	add	r3, r2
 8005870:	3304      	adds	r3, #4
 8005872:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	0159      	lsls	r1, r3, #5
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	440b      	add	r3, r1
 8005880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d114      	bne.n	80058c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058a8:	461a      	mov	r2, r3
 80058aa:	2101      	movs	r1, #1
 80058ac:	f004 fbc0 	bl	800a030 <USB_EP0_OutStart>
 80058b0:	e006      	b.n	80058c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	441a      	add	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f007 fafa 	bl	800cec0 <HAL_PCD_DataOutStageCallback>
 80058cc:	e046      	b.n	800595c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	4a26      	ldr	r2, [pc, #152]	@ (800596c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d124      	bne.n	8005920 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ec:	461a      	mov	r2, r3
 80058ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058f2:	6093      	str	r3, [r2, #8]
 80058f4:	e032      	b.n	800595c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590c:	461a      	mov	r2, r3
 800590e:	2320      	movs	r3, #32
 8005910:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f007 fad1 	bl	800cec0 <HAL_PCD_DataOutStageCallback>
 800591e:	e01d      	b.n	800595c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d114      	bne.n	8005950 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	4613      	mov	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d108      	bne.n	8005950 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005948:	461a      	mov	r2, r3
 800594a:	2100      	movs	r1, #0
 800594c:	f004 fb70 	bl	800a030 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f007 fab2 	bl	800cec0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3720      	adds	r7, #32
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	4f54300a 	.word	0x4f54300a
 800596c:	4f54310a 	.word	0x4f54310a

08005970 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	333c      	adds	r3, #60	@ 0x3c
 8005988:	3304      	adds	r3, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4a15      	ldr	r2, [pc, #84]	@ (80059f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d90e      	bls.n	80059c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d009      	beq.n	80059c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059bc:	461a      	mov	r2, r3
 80059be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f007 fa69 	bl	800ce9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4a0a      	ldr	r2, [pc, #40]	@ (80059f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d90c      	bls.n	80059ec <PCD_EP_OutSetupPacket_int+0x7c>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	799b      	ldrb	r3, [r3, #6]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d108      	bne.n	80059ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059e4:	461a      	mov	r2, r3
 80059e6:	2101      	movs	r1, #1
 80059e8:	f004 fb22 	bl	800a030 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	4f54300a 	.word	0x4f54300a

080059fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d107      	bne.n	8005a2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005a1a:	883b      	ldrh	r3, [r7, #0]
 8005a1c:	0419      	lsls	r1, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a28:	e028      	b.n	8005a7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4413      	add	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	73fb      	strb	r3, [r7, #15]
 8005a3c:	e00d      	b.n	8005a5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	3340      	adds	r3, #64	@ 0x40
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	0c1b      	lsrs	r3, r3, #16
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	4413      	add	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	3301      	adds	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
 8005a5a:	7bfa      	ldrb	r2, [r7, #15]
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d3ec      	bcc.n	8005a3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a64:	883b      	ldrh	r3, [r7, #0]
 8005a66:	0418      	lsls	r0, r3, #16
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6819      	ldr	r1, [r3, #0]
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	4302      	orrs	r2, r0
 8005a74:	3340      	adds	r3, #64	@ 0x40
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e267      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d075      	beq.n	8005bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ae2:	4b88      	ldr	r3, [pc, #544]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 030c 	and.w	r3, r3, #12
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d00c      	beq.n	8005b08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aee:	4b85      	ldr	r3, [pc, #532]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d112      	bne.n	8005b20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005afa:	4b82      	ldr	r3, [pc, #520]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b06:	d10b      	bne.n	8005b20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b08:	4b7e      	ldr	r3, [pc, #504]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d05b      	beq.n	8005bcc <HAL_RCC_OscConfig+0x108>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d157      	bne.n	8005bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e242      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b28:	d106      	bne.n	8005b38 <HAL_RCC_OscConfig+0x74>
 8005b2a:	4b76      	ldr	r3, [pc, #472]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a75      	ldr	r2, [pc, #468]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e01d      	b.n	8005b74 <HAL_RCC_OscConfig+0xb0>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b40:	d10c      	bne.n	8005b5c <HAL_RCC_OscConfig+0x98>
 8005b42:	4b70      	ldr	r3, [pc, #448]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6f      	ldr	r2, [pc, #444]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a6c      	ldr	r2, [pc, #432]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	e00b      	b.n	8005b74 <HAL_RCC_OscConfig+0xb0>
 8005b5c:	4b69      	ldr	r3, [pc, #420]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a68      	ldr	r2, [pc, #416]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	4b66      	ldr	r3, [pc, #408]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a65      	ldr	r2, [pc, #404]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d013      	beq.n	8005ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7c:	f7fd ff38 	bl	80039f0 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b84:	f7fd ff34 	bl	80039f0 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b64      	cmp	r3, #100	@ 0x64
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e207      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b96:	4b5b      	ldr	r3, [pc, #364]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f0      	beq.n	8005b84 <HAL_RCC_OscConfig+0xc0>
 8005ba2:	e014      	b.n	8005bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba4:	f7fd ff24 	bl	80039f0 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bac:	f7fd ff20 	bl	80039f0 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b64      	cmp	r3, #100	@ 0x64
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e1f3      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bbe:	4b51      	ldr	r3, [pc, #324]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f0      	bne.n	8005bac <HAL_RCC_OscConfig+0xe8>
 8005bca:	e000      	b.n	8005bce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d063      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005bda:	4b4a      	ldr	r3, [pc, #296]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 030c 	and.w	r3, r3, #12
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005be6:	4b47      	ldr	r3, [pc, #284]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d11c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bf2:	4b44      	ldr	r3, [pc, #272]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d116      	bne.n	8005c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bfe:	4b41      	ldr	r3, [pc, #260]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_RCC_OscConfig+0x152>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d001      	beq.n	8005c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e1c7      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c16:	4b3b      	ldr	r3, [pc, #236]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4937      	ldr	r1, [pc, #220]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c2a:	e03a      	b.n	8005ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d020      	beq.n	8005c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c34:	4b34      	ldr	r3, [pc, #208]	@ (8005d08 <HAL_RCC_OscConfig+0x244>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3a:	f7fd fed9 	bl	80039f0 <HAL_GetTick>
 8005c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c40:	e008      	b.n	8005c54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c42:	f7fd fed5 	bl	80039f0 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e1a8      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c54:	4b2b      	ldr	r3, [pc, #172]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0f0      	beq.n	8005c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c60:	4b28      	ldr	r3, [pc, #160]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4925      	ldr	r1, [pc, #148]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	600b      	str	r3, [r1, #0]
 8005c74:	e015      	b.n	8005ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c76:	4b24      	ldr	r3, [pc, #144]	@ (8005d08 <HAL_RCC_OscConfig+0x244>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7c:	f7fd feb8 	bl	80039f0 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c84:	f7fd feb4 	bl	80039f0 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e187      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c96:	4b1b      	ldr	r3, [pc, #108]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d036      	beq.n	8005d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cb6:	4b15      	ldr	r3, [pc, #84]	@ (8005d0c <HAL_RCC_OscConfig+0x248>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbc:	f7fd fe98 	bl	80039f0 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc4:	f7fd fe94 	bl	80039f0 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e167      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <HAL_RCC_OscConfig+0x240>)
 8005cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x200>
 8005ce2:	e01b      	b.n	8005d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ce4:	4b09      	ldr	r3, [pc, #36]	@ (8005d0c <HAL_RCC_OscConfig+0x248>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cea:	f7fd fe81 	bl	80039f0 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf0:	e00e      	b.n	8005d10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf2:	f7fd fe7d 	bl	80039f0 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d907      	bls.n	8005d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e150      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
 8005d04:	40023800 	.word	0x40023800
 8005d08:	42470000 	.word	0x42470000
 8005d0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d10:	4b88      	ldr	r3, [pc, #544]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1ea      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8097 	beq.w	8005e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d2e:	4b81      	ldr	r3, [pc, #516]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10f      	bne.n	8005d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]
 8005d3e:	4b7d      	ldr	r3, [pc, #500]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	4a7c      	ldr	r2, [pc, #496]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d52:	60bb      	str	r3, [r7, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d56:	2301      	movs	r3, #1
 8005d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d5a:	4b77      	ldr	r3, [pc, #476]	@ (8005f38 <HAL_RCC_OscConfig+0x474>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d118      	bne.n	8005d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d66:	4b74      	ldr	r3, [pc, #464]	@ (8005f38 <HAL_RCC_OscConfig+0x474>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a73      	ldr	r2, [pc, #460]	@ (8005f38 <HAL_RCC_OscConfig+0x474>)
 8005d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d72:	f7fd fe3d 	bl	80039f0 <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7a:	f7fd fe39 	bl	80039f0 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e10c      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8005f38 <HAL_RCC_OscConfig+0x474>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0f0      	beq.n	8005d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d106      	bne.n	8005dae <HAL_RCC_OscConfig+0x2ea>
 8005da0:	4b64      	ldr	r3, [pc, #400]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da4:	4a63      	ldr	r2, [pc, #396]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dac:	e01c      	b.n	8005de8 <HAL_RCC_OscConfig+0x324>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b05      	cmp	r3, #5
 8005db4:	d10c      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x30c>
 8005db6:	4b5f      	ldr	r3, [pc, #380]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dba:	4a5e      	ldr	r2, [pc, #376]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005dbc:	f043 0304 	orr.w	r3, r3, #4
 8005dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc6:	4a5b      	ldr	r2, [pc, #364]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dce:	e00b      	b.n	8005de8 <HAL_RCC_OscConfig+0x324>
 8005dd0:	4b58      	ldr	r3, [pc, #352]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd4:	4a57      	ldr	r2, [pc, #348]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ddc:	4b55      	ldr	r3, [pc, #340]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de0:	4a54      	ldr	r2, [pc, #336]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005de2:	f023 0304 	bic.w	r3, r3, #4
 8005de6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d015      	beq.n	8005e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df0:	f7fd fdfe 	bl	80039f0 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df6:	e00a      	b.n	8005e0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df8:	f7fd fdfa 	bl	80039f0 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e0cb      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0e:	4b49      	ldr	r3, [pc, #292]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0ee      	beq.n	8005df8 <HAL_RCC_OscConfig+0x334>
 8005e1a:	e014      	b.n	8005e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e1c:	f7fd fde8 	bl	80039f0 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e22:	e00a      	b.n	8005e3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e24:	f7fd fde4 	bl	80039f0 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e0b5      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1ee      	bne.n	8005e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d105      	bne.n	8005e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e4c:	4b39      	ldr	r3, [pc, #228]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e50:	4a38      	ldr	r2, [pc, #224]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80a1 	beq.w	8005fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e62:	4b34      	ldr	r3, [pc, #208]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 030c 	and.w	r3, r3, #12
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d05c      	beq.n	8005f28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d141      	bne.n	8005efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e76:	4b31      	ldr	r3, [pc, #196]	@ (8005f3c <HAL_RCC_OscConfig+0x478>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7c:	f7fd fdb8 	bl	80039f0 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e84:	f7fd fdb4 	bl	80039f0 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e087      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e96:	4b27      	ldr	r3, [pc, #156]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f0      	bne.n	8005e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69da      	ldr	r2, [r3, #28]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	019b      	lsls	r3, r3, #6
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	041b      	lsls	r3, r3, #16
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	061b      	lsls	r3, r3, #24
 8005ec6:	491b      	ldr	r1, [pc, #108]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8005f3c <HAL_RCC_OscConfig+0x478>)
 8005ece:	2201      	movs	r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed2:	f7fd fd8d 	bl	80039f0 <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eda:	f7fd fd89 	bl	80039f0 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e05c      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eec:	4b11      	ldr	r3, [pc, #68]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f0      	beq.n	8005eda <HAL_RCC_OscConfig+0x416>
 8005ef8:	e054      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efa:	4b10      	ldr	r3, [pc, #64]	@ (8005f3c <HAL_RCC_OscConfig+0x478>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f00:	f7fd fd76 	bl	80039f0 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f08:	f7fd fd72 	bl	80039f0 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e045      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f1a:	4b06      	ldr	r3, [pc, #24]	@ (8005f34 <HAL_RCC_OscConfig+0x470>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f0      	bne.n	8005f08 <HAL_RCC_OscConfig+0x444>
 8005f26:	e03d      	b.n	8005fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d107      	bne.n	8005f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e038      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
 8005f34:	40023800 	.word	0x40023800
 8005f38:	40007000 	.word	0x40007000
 8005f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f40:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb0 <HAL_RCC_OscConfig+0x4ec>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d028      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d121      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d11a      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f70:	4013      	ands	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d111      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d107      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d001      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40023800 	.word	0x40023800

08005fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e0cc      	b.n	8006162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc8:	4b68      	ldr	r3, [pc, #416]	@ (800616c <HAL_RCC_ClockConfig+0x1b8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d90c      	bls.n	8005ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd6:	4b65      	ldr	r3, [pc, #404]	@ (800616c <HAL_RCC_ClockConfig+0x1b8>)
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fde:	4b63      	ldr	r3, [pc, #396]	@ (800616c <HAL_RCC_ClockConfig+0x1b8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d001      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0b8      	b.n	8006162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d020      	beq.n	800603e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006008:	4b59      	ldr	r3, [pc, #356]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	4a58      	ldr	r2, [pc, #352]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006012:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006020:	4b53      	ldr	r3, [pc, #332]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	4a52      	ldr	r2, [pc, #328]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 8006026:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800602a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800602c:	4b50      	ldr	r3, [pc, #320]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	494d      	ldr	r1, [pc, #308]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 800603a:	4313      	orrs	r3, r2
 800603c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d044      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d107      	bne.n	8006062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006052:	4b47      	ldr	r3, [pc, #284]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d119      	bne.n	8006092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e07f      	b.n	8006162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d003      	beq.n	8006072 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800606e:	2b03      	cmp	r3, #3
 8006070:	d107      	bne.n	8006082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006072:	4b3f      	ldr	r3, [pc, #252]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e06f      	b.n	8006162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006082:	4b3b      	ldr	r3, [pc, #236]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e067      	b.n	8006162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006092:	4b37      	ldr	r3, [pc, #220]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f023 0203 	bic.w	r2, r3, #3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4934      	ldr	r1, [pc, #208]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060a4:	f7fd fca4 	bl	80039f0 <HAL_GetTick>
 80060a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060aa:	e00a      	b.n	80060c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ac:	f7fd fca0 	bl	80039f0 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e04f      	b.n	8006162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 020c 	and.w	r2, r3, #12
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d1eb      	bne.n	80060ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060d4:	4b25      	ldr	r3, [pc, #148]	@ (800616c <HAL_RCC_ClockConfig+0x1b8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d20c      	bcs.n	80060fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e2:	4b22      	ldr	r3, [pc, #136]	@ (800616c <HAL_RCC_ClockConfig+0x1b8>)
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ea:	4b20      	ldr	r3, [pc, #128]	@ (800616c <HAL_RCC_ClockConfig+0x1b8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d001      	beq.n	80060fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e032      	b.n	8006162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006108:	4b19      	ldr	r3, [pc, #100]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4916      	ldr	r1, [pc, #88]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	4313      	orrs	r3, r2
 8006118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006126:	4b12      	ldr	r3, [pc, #72]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	490e      	ldr	r1, [pc, #56]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	4313      	orrs	r3, r2
 8006138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800613a:	f000 f821 	bl	8006180 <HAL_RCC_GetSysClockFreq>
 800613e:	4602      	mov	r2, r0
 8006140:	4b0b      	ldr	r3, [pc, #44]	@ (8006170 <HAL_RCC_ClockConfig+0x1bc>)
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	490a      	ldr	r1, [pc, #40]	@ (8006174 <HAL_RCC_ClockConfig+0x1c0>)
 800614c:	5ccb      	ldrb	r3, [r1, r3]
 800614e:	fa22 f303 	lsr.w	r3, r2, r3
 8006152:	4a09      	ldr	r2, [pc, #36]	@ (8006178 <HAL_RCC_ClockConfig+0x1c4>)
 8006154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006156:	4b09      	ldr	r3, [pc, #36]	@ (800617c <HAL_RCC_ClockConfig+0x1c8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f7fd fc04 	bl	8003968 <HAL_InitTick>

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40023c00 	.word	0x40023c00
 8006170:	40023800 	.word	0x40023800
 8006174:	08017b08 	.word	0x08017b08
 8006178:	20000008 	.word	0x20000008
 800617c:	20000010 	.word	0x20000010

08006180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006184:	b094      	sub	sp, #80	@ 0x50
 8006186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006198:	4b79      	ldr	r3, [pc, #484]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x200>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 030c 	and.w	r3, r3, #12
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d00d      	beq.n	80061c0 <HAL_RCC_GetSysClockFreq+0x40>
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	f200 80e1 	bhi.w	800636c <HAL_RCC_GetSysClockFreq+0x1ec>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_RCC_GetSysClockFreq+0x34>
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d003      	beq.n	80061ba <HAL_RCC_GetSysClockFreq+0x3a>
 80061b2:	e0db      	b.n	800636c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061b4:	4b73      	ldr	r3, [pc, #460]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x204>)
 80061b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061b8:	e0db      	b.n	8006372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061ba:	4b73      	ldr	r3, [pc, #460]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x208>)
 80061bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061be:	e0d8      	b.n	8006372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x200>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x200>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d063      	beq.n	800629e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x200>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	099b      	lsrs	r3, r3, #6
 80061dc:	2200      	movs	r2, #0
 80061de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80061e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ea:	2300      	movs	r3, #0
 80061ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80061f2:	4622      	mov	r2, r4
 80061f4:	462b      	mov	r3, r5
 80061f6:	f04f 0000 	mov.w	r0, #0
 80061fa:	f04f 0100 	mov.w	r1, #0
 80061fe:	0159      	lsls	r1, r3, #5
 8006200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006204:	0150      	lsls	r0, r2, #5
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4621      	mov	r1, r4
 800620c:	1a51      	subs	r1, r2, r1
 800620e:	6139      	str	r1, [r7, #16]
 8006210:	4629      	mov	r1, r5
 8006212:	eb63 0301 	sbc.w	r3, r3, r1
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006224:	4659      	mov	r1, fp
 8006226:	018b      	lsls	r3, r1, #6
 8006228:	4651      	mov	r1, sl
 800622a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800622e:	4651      	mov	r1, sl
 8006230:	018a      	lsls	r2, r1, #6
 8006232:	4651      	mov	r1, sl
 8006234:	ebb2 0801 	subs.w	r8, r2, r1
 8006238:	4659      	mov	r1, fp
 800623a:	eb63 0901 	sbc.w	r9, r3, r1
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	f04f 0300 	mov.w	r3, #0
 8006246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800624a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800624e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006252:	4690      	mov	r8, r2
 8006254:	4699      	mov	r9, r3
 8006256:	4623      	mov	r3, r4
 8006258:	eb18 0303 	adds.w	r3, r8, r3
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	462b      	mov	r3, r5
 8006260:	eb49 0303 	adc.w	r3, r9, r3
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006272:	4629      	mov	r1, r5
 8006274:	024b      	lsls	r3, r1, #9
 8006276:	4621      	mov	r1, r4
 8006278:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800627c:	4621      	mov	r1, r4
 800627e:	024a      	lsls	r2, r1, #9
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006286:	2200      	movs	r2, #0
 8006288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800628a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800628c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006290:	f7fa fd0a 	bl	8000ca8 <__aeabi_uldivmod>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4613      	mov	r3, r2
 800629a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800629c:	e058      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800629e:	4b38      	ldr	r3, [pc, #224]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	099b      	lsrs	r3, r3, #6
 80062a4:	2200      	movs	r2, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	4611      	mov	r1, r2
 80062aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062ae:	623b      	str	r3, [r7, #32]
 80062b0:	2300      	movs	r3, #0
 80062b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80062b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062b8:	4642      	mov	r2, r8
 80062ba:	464b      	mov	r3, r9
 80062bc:	f04f 0000 	mov.w	r0, #0
 80062c0:	f04f 0100 	mov.w	r1, #0
 80062c4:	0159      	lsls	r1, r3, #5
 80062c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062ca:	0150      	lsls	r0, r2, #5
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4641      	mov	r1, r8
 80062d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80062d6:	4649      	mov	r1, r9
 80062d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062f0:	ebb2 040a 	subs.w	r4, r2, sl
 80062f4:	eb63 050b 	sbc.w	r5, r3, fp
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	00eb      	lsls	r3, r5, #3
 8006302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006306:	00e2      	lsls	r2, r4, #3
 8006308:	4614      	mov	r4, r2
 800630a:	461d      	mov	r5, r3
 800630c:	4643      	mov	r3, r8
 800630e:	18e3      	adds	r3, r4, r3
 8006310:	603b      	str	r3, [r7, #0]
 8006312:	464b      	mov	r3, r9
 8006314:	eb45 0303 	adc.w	r3, r5, r3
 8006318:	607b      	str	r3, [r7, #4]
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006326:	4629      	mov	r1, r5
 8006328:	028b      	lsls	r3, r1, #10
 800632a:	4621      	mov	r1, r4
 800632c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006330:	4621      	mov	r1, r4
 8006332:	028a      	lsls	r2, r1, #10
 8006334:	4610      	mov	r0, r2
 8006336:	4619      	mov	r1, r3
 8006338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800633a:	2200      	movs	r2, #0
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	61fa      	str	r2, [r7, #28]
 8006340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006344:	f7fa fcb0 	bl	8000ca8 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4613      	mov	r3, r2
 800634e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006350:	4b0b      	ldr	r3, [pc, #44]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x200>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	0c1b      	lsrs	r3, r3, #16
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	3301      	adds	r3, #1
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006360:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006364:	fbb2 f3f3 	udiv	r3, r2, r3
 8006368:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800636a:	e002      	b.n	8006372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x204>)
 800636e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006374:	4618      	mov	r0, r3
 8006376:	3750      	adds	r7, #80	@ 0x50
 8006378:	46bd      	mov	sp, r7
 800637a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800637e:	bf00      	nop
 8006380:	40023800 	.word	0x40023800
 8006384:	00f42400 	.word	0x00f42400
 8006388:	007a1200 	.word	0x007a1200

0800638c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006390:	4b03      	ldr	r3, [pc, #12]	@ (80063a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006392:	681b      	ldr	r3, [r3, #0]
}
 8006394:	4618      	mov	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000008 	.word	0x20000008

080063a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063a8:	f7ff fff0 	bl	800638c <HAL_RCC_GetHCLKFreq>
 80063ac:	4602      	mov	r2, r0
 80063ae:	4b05      	ldr	r3, [pc, #20]	@ (80063c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	0a9b      	lsrs	r3, r3, #10
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	4903      	ldr	r1, [pc, #12]	@ (80063c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ba:	5ccb      	ldrb	r3, [r1, r3]
 80063bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40023800 	.word	0x40023800
 80063c8:	08017b18 	.word	0x08017b18

080063cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063d0:	f7ff ffdc 	bl	800638c <HAL_RCC_GetHCLKFreq>
 80063d4:	4602      	mov	r2, r0
 80063d6:	4b05      	ldr	r3, [pc, #20]	@ (80063ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	0b5b      	lsrs	r3, r3, #13
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	4903      	ldr	r1, [pc, #12]	@ (80063f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063e2:	5ccb      	ldrb	r3, [r1, r3]
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40023800 	.word	0x40023800
 80063f0:	08017b18 	.word	0x08017b18

080063f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e07b      	b.n	80064fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	d108      	bne.n	8006420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006416:	d009      	beq.n	800642c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	61da      	str	r2, [r3, #28]
 800641e:	e005      	b.n	800642c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fc fa16 	bl	8002878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006462:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006474:	431a      	orrs	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b0:	ea42 0103 	orr.w	r1, r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	0c1b      	lsrs	r3, r3, #16
 80064ca:	f003 0104 	and.w	r1, r3, #4
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	f003 0210 	and.w	r2, r3, #16
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b088      	sub	sp, #32
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	603b      	str	r3, [r7, #0]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006516:	f7fd fa6b 	bl	80039f0 <HAL_GetTick>
 800651a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b01      	cmp	r3, #1
 800652a:	d001      	beq.n	8006530 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800652c:	2302      	movs	r3, #2
 800652e:	e12a      	b.n	8006786 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_SPI_Transmit+0x36>
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e122      	b.n	8006786 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_SPI_Transmit+0x48>
 800654a:	2302      	movs	r3, #2
 800654c:	e11b      	b.n	8006786 <HAL_SPI_Transmit+0x280>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2203      	movs	r2, #3
 800655a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	88fa      	ldrh	r2, [r7, #6]
 800656e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800659c:	d10f      	bne.n	80065be <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c8:	2b40      	cmp	r3, #64	@ 0x40
 80065ca:	d007      	beq.n	80065dc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e4:	d152      	bne.n	800668c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_SPI_Transmit+0xee>
 80065ee:	8b7b      	ldrh	r3, [r7, #26]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d145      	bne.n	8006680 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	881a      	ldrh	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006604:	1c9a      	adds	r2, r3, #2
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006618:	e032      	b.n	8006680 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b02      	cmp	r3, #2
 8006626:	d112      	bne.n	800664e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662c:	881a      	ldrh	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800664c:	e018      	b.n	8006680 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800664e:	f7fd f9cf 	bl	80039f0 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d803      	bhi.n	8006666 <HAL_SPI_Transmit+0x160>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d102      	bne.n	800666c <HAL_SPI_Transmit+0x166>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d109      	bne.n	8006680 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e082      	b.n	8006786 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1c7      	bne.n	800661a <HAL_SPI_Transmit+0x114>
 800668a:	e053      	b.n	8006734 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <HAL_SPI_Transmit+0x194>
 8006694:	8b7b      	ldrh	r3, [r7, #26]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d147      	bne.n	800672a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	330c      	adds	r3, #12
 80066a4:	7812      	ldrb	r2, [r2, #0]
 80066a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066c0:	e033      	b.n	800672a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d113      	bne.n	80066f8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	7812      	ldrb	r2, [r2, #0]
 80066dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066f6:	e018      	b.n	800672a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066f8:	f7fd f97a 	bl	80039f0 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	429a      	cmp	r2, r3
 8006706:	d803      	bhi.n	8006710 <HAL_SPI_Transmit+0x20a>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670e:	d102      	bne.n	8006716 <HAL_SPI_Transmit+0x210>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e02d      	b.n	8006786 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1c6      	bne.n	80066c2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 fb77 	bl	8006e2c <SPI_EndRxTxTransaction>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006784:	2300      	movs	r3, #0
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	3720      	adds	r7, #32
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b08a      	sub	sp, #40	@ 0x28
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800679c:	2301      	movs	r3, #1
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a0:	f7fd f926 	bl	80039f0 <HAL_GetTick>
 80067a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80067b4:	887b      	ldrh	r3, [r7, #2]
 80067b6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067b8:	7ffb      	ldrb	r3, [r7, #31]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d00c      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x4a>
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067c4:	d106      	bne.n	80067d4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <HAL_SPI_TransmitReceive+0x46>
 80067ce:	7ffb      	ldrb	r3, [r7, #31]
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d001      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80067d4:	2302      	movs	r3, #2
 80067d6:	e17f      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x5c>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x5c>
 80067e4:	887b      	ldrh	r3, [r7, #2]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e174      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x6e>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e16d      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x34a>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b04      	cmp	r3, #4
 800680e:	d003      	beq.n	8006818 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2205      	movs	r2, #5
 8006814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	887a      	ldrh	r2, [r7, #2]
 8006828:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	887a      	ldrh	r2, [r7, #2]
 800682e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	887a      	ldrh	r2, [r7, #2]
 800683a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	887a      	ldrh	r2, [r7, #2]
 8006840:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006858:	2b40      	cmp	r3, #64	@ 0x40
 800685a:	d007      	beq.n	800686c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800686a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006874:	d17e      	bne.n	8006974 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_SPI_TransmitReceive+0xf6>
 800687e:	8afb      	ldrh	r3, [r7, #22]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d16c      	bne.n	800695e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006888:	881a      	ldrh	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006894:	1c9a      	adds	r2, r3, #2
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068a8:	e059      	b.n	800695e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d11b      	bne.n	80068f0 <HAL_SPI_TransmitReceive+0x162>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d016      	beq.n	80068f0 <HAL_SPI_TransmitReceive+0x162>
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d113      	bne.n	80068f0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068cc:	881a      	ldrh	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d8:	1c9a      	adds	r2, r3, #2
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d119      	bne.n	8006932 <HAL_SPI_TransmitReceive+0x1a4>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006902:	b29b      	uxth	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d014      	beq.n	8006932 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	b292      	uxth	r2, r2
 8006914:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691a:	1c9a      	adds	r2, r3, #2
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800692e:	2301      	movs	r3, #1
 8006930:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006932:	f7fd f85d 	bl	80039f0 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800693e:	429a      	cmp	r2, r3
 8006940:	d80d      	bhi.n	800695e <HAL_SPI_TransmitReceive+0x1d0>
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006948:	d009      	beq.n	800695e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e0bc      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1a0      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x11c>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d19b      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x11c>
 8006972:	e082      	b.n	8006a7a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_SPI_TransmitReceive+0x1f4>
 800697c:	8afb      	ldrh	r3, [r7, #22]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d171      	bne.n	8006a66 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	330c      	adds	r3, #12
 800698c:	7812      	ldrb	r2, [r2, #0]
 800698e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a8:	e05d      	b.n	8006a66 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d11c      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x264>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d017      	beq.n	80069f2 <HAL_SPI_TransmitReceive+0x264>
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d114      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d119      	bne.n	8006a34 <HAL_SPI_TransmitReceive+0x2a6>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d014      	beq.n	8006a34 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a30:	2301      	movs	r3, #1
 8006a32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a34:	f7fc ffdc 	bl	80039f0 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d803      	bhi.n	8006a4c <HAL_SPI_TransmitReceive+0x2be>
 8006a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d102      	bne.n	8006a52 <HAL_SPI_TransmitReceive+0x2c4>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e038      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d19c      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x21c>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d197      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a7a:	6a3a      	ldr	r2, [r7, #32]
 8006a7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f9d4 	bl	8006e2c <SPI_EndRxTxTransaction>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d008      	beq.n	8006a9c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e01d      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
  }
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3728      	adds	r7, #40	@ 0x28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	099b      	lsrs	r3, r3, #6
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10f      	bne.n	8006b24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	099b      	lsrs	r3, r3, #6
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d004      	beq.n	8006b24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	4798      	blx	r3
    return;
 8006b22:	e0d7      	b.n	8006cd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <HAL_SPI_IRQHandler+0x66>
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	09db      	lsrs	r3, r3, #7
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
    return;
 8006b44:	e0c6      	b.n	8006cd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	095b      	lsrs	r3, r3, #5
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10c      	bne.n	8006b6c <HAL_SPI_IRQHandler+0x8c>
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	099b      	lsrs	r3, r3, #6
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	0a1b      	lsrs	r3, r3, #8
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80b4 	beq.w	8006cd4 <HAL_SPI_IRQHandler+0x1f4>
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	095b      	lsrs	r3, r3, #5
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80ad 	beq.w	8006cd4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	099b      	lsrs	r3, r3, #6
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d023      	beq.n	8006bce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d011      	beq.n	8006bb6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b96:	f043 0204 	orr.w	r2, r3, #4
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	e00b      	b.n	8006bce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	693b      	ldr	r3, [r7, #16]
        return;
 8006bcc:	e082      	b.n	8006cd4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	095b      	lsrs	r3, r3, #5
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d014      	beq.n	8006c04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bde:	f043 0201 	orr.w	r2, r3, #1
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	0a1b      	lsrs	r3, r3, #8
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00c      	beq.n	8006c2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c14:	f043 0208 	orr.w	r2, r3, #8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	60bb      	str	r3, [r7, #8]
 8006c28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d04f      	beq.n	8006cd2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <HAL_SPI_IRQHandler+0x17e>
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d034      	beq.n	8006cc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0203 	bic.w	r2, r2, #3
 8006c6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d011      	beq.n	8006c9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c7a:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <HAL_SPI_IRQHandler+0x1fc>)
 8006c7c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fd f8e0 	bl	8003e48 <HAL_DMA_Abort_IT>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d016      	beq.n	8006cd0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8006cdc <HAL_SPI_IRQHandler+0x1fc>)
 8006ca8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fd f8ca 	bl	8003e48 <HAL_DMA_Abort_IT>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006cc6:	e003      	b.n	8006cd0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f809 	bl	8006ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006cce:	e000      	b.n	8006cd2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006cd0:	bf00      	nop
    return;
 8006cd2:	bf00      	nop
  }
}
 8006cd4:	3720      	adds	r7, #32
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	08006cf5 	.word	0x08006cf5

08006ce0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7ff ffe6 	bl	8006ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d2c:	f7fc fe60 	bl	80039f0 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	4413      	add	r3, r2
 8006d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d3c:	f7fc fe58 	bl	80039f0 <HAL_GetTick>
 8006d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d42:	4b39      	ldr	r3, [pc, #228]	@ (8006e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	015b      	lsls	r3, r3, #5
 8006d48:	0d1b      	lsrs	r3, r3, #20
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
 8006d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d52:	e055      	b.n	8006e00 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5a:	d051      	beq.n	8006e00 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d5c:	f7fc fe48 	bl	80039f0 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d902      	bls.n	8006d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d13d      	bne.n	8006dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d8a:	d111      	bne.n	8006db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d94:	d004      	beq.n	8006da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d9e:	d107      	bne.n	8006db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db8:	d10f      	bne.n	8006dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e018      	b.n	8006e20 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	e002      	b.n	8006e00 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	bf0c      	ite	eq
 8006e10:	2301      	moveq	r3, #1
 8006e12:	2300      	movne	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d19a      	bne.n	8006d54 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20000008 	.word	0x20000008

08006e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	2102      	movs	r1, #2
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff ff6a 	bl	8006d1c <SPI_WaitFlagStateUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e52:	f043 0220 	orr.w	r2, r3, #32
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e032      	b.n	8006ec4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ecc <SPI_EndRxTxTransaction+0xa0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed0 <SPI_EndRxTxTransaction+0xa4>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	0d5b      	lsrs	r3, r3, #21
 8006e6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e6e:	fb02 f303 	mul.w	r3, r2, r3
 8006e72:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e7c:	d112      	bne.n	8006ea4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2180      	movs	r1, #128	@ 0x80
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff ff47 	bl	8006d1c <SPI_WaitFlagStateUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d016      	beq.n	8006ec2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e98:	f043 0220 	orr.w	r2, r3, #32
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e00f      	b.n	8006ec4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eba:	2b80      	cmp	r3, #128	@ 0x80
 8006ebc:	d0f2      	beq.n	8006ea4 <SPI_EndRxTxTransaction+0x78>
 8006ebe:	e000      	b.n	8006ec2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006ec0:	bf00      	nop
  }

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000008 	.word	0x20000008
 8006ed0:	165e9f81 	.word	0x165e9f81

08006ed4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e038      	b.n	8006f5c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d106      	bne.n	8006f04 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7fb fdce 	bl	8002aa0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f001 fd06 	bl	8008920 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6818      	ldr	r0, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	f001 fd68 	bl	80089f4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6858      	ldr	r0, [r3, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	f001 fd8d 	bl	8008a50 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	6892      	ldr	r2, [r2, #8]
 8006f3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	6892      	ldr	r2, [r2, #8]
 8006f4a:	f041 0101 	orr.w	r1, r1, #1
 8006f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e041      	b.n	8006ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fb fcc4 	bl	8002918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f000 fa80 	bl	80074a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d001      	beq.n	800701c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e046      	b.n	80070aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a23      	ldr	r2, [pc, #140]	@ (80070b8 <HAL_TIM_Base_Start+0xb4>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d022      	beq.n	8007074 <HAL_TIM_Base_Start+0x70>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007036:	d01d      	beq.n	8007074 <HAL_TIM_Base_Start+0x70>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1f      	ldr	r2, [pc, #124]	@ (80070bc <HAL_TIM_Base_Start+0xb8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d018      	beq.n	8007074 <HAL_TIM_Base_Start+0x70>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1e      	ldr	r2, [pc, #120]	@ (80070c0 <HAL_TIM_Base_Start+0xbc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d013      	beq.n	8007074 <HAL_TIM_Base_Start+0x70>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1c      	ldr	r2, [pc, #112]	@ (80070c4 <HAL_TIM_Base_Start+0xc0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00e      	beq.n	8007074 <HAL_TIM_Base_Start+0x70>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1b      	ldr	r2, [pc, #108]	@ (80070c8 <HAL_TIM_Base_Start+0xc4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d009      	beq.n	8007074 <HAL_TIM_Base_Start+0x70>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a19      	ldr	r2, [pc, #100]	@ (80070cc <HAL_TIM_Base_Start+0xc8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d004      	beq.n	8007074 <HAL_TIM_Base_Start+0x70>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a18      	ldr	r2, [pc, #96]	@ (80070d0 <HAL_TIM_Base_Start+0xcc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d111      	bne.n	8007098 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b06      	cmp	r3, #6
 8007084:	d010      	beq.n	80070a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0201 	orr.w	r2, r2, #1
 8007094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007096:	e007      	b.n	80070a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40010000 	.word	0x40010000
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40000800 	.word	0x40000800
 80070c4:	40000c00 	.word	0x40000c00
 80070c8:	40010400 	.word	0x40010400
 80070cc:	40014000 	.word	0x40014000
 80070d0:	40001800 	.word	0x40001800

080070d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d020      	beq.n	8007138 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01b      	beq.n	8007138 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0202 	mvn.w	r2, #2
 8007108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9a3 	bl	800746a <HAL_TIM_IC_CaptureCallback>
 8007124:	e005      	b.n	8007132 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f995 	bl	8007456 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f9a6 	bl	800747e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	d020      	beq.n	8007184 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01b      	beq.n	8007184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0204 	mvn.w	r2, #4
 8007154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2202      	movs	r2, #2
 800715a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f97d 	bl	800746a <HAL_TIM_IC_CaptureCallback>
 8007170:	e005      	b.n	800717e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f96f 	bl	8007456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f980 	bl	800747e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f003 0308 	and.w	r3, r3, #8
 800718a:	2b00      	cmp	r3, #0
 800718c:	d020      	beq.n	80071d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01b      	beq.n	80071d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f06f 0208 	mvn.w	r2, #8
 80071a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2204      	movs	r2, #4
 80071a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f957 	bl	800746a <HAL_TIM_IC_CaptureCallback>
 80071bc:	e005      	b.n	80071ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f949 	bl	8007456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f95a 	bl	800747e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f003 0310 	and.w	r3, r3, #16
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d020      	beq.n	800721c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01b      	beq.n	800721c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f06f 0210 	mvn.w	r2, #16
 80071ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2208      	movs	r2, #8
 80071f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f931 	bl	800746a <HAL_TIM_IC_CaptureCallback>
 8007208:	e005      	b.n	8007216 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f923 	bl	8007456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f934 	bl	800747e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00c      	beq.n	8007240 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0201 	mvn.w	r2, #1
 8007238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f901 	bl	8007442 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00c      	beq.n	8007264 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800725c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fae8 	bl	8007834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00c      	beq.n	8007288 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d007      	beq.n	8007288 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f905 	bl	8007492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00c      	beq.n	80072ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b00      	cmp	r3, #0
 800729a:	d007      	beq.n	80072ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0220 	mvn.w	r2, #32
 80072a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 faba 	bl	8007820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <HAL_TIM_ConfigClockSource+0x1c>
 80072cc:	2302      	movs	r3, #2
 80072ce:	e0b4      	b.n	800743a <HAL_TIM_ConfigClockSource+0x186>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007308:	d03e      	beq.n	8007388 <HAL_TIM_ConfigClockSource+0xd4>
 800730a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800730e:	f200 8087 	bhi.w	8007420 <HAL_TIM_ConfigClockSource+0x16c>
 8007312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007316:	f000 8086 	beq.w	8007426 <HAL_TIM_ConfigClockSource+0x172>
 800731a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800731e:	d87f      	bhi.n	8007420 <HAL_TIM_ConfigClockSource+0x16c>
 8007320:	2b70      	cmp	r3, #112	@ 0x70
 8007322:	d01a      	beq.n	800735a <HAL_TIM_ConfigClockSource+0xa6>
 8007324:	2b70      	cmp	r3, #112	@ 0x70
 8007326:	d87b      	bhi.n	8007420 <HAL_TIM_ConfigClockSource+0x16c>
 8007328:	2b60      	cmp	r3, #96	@ 0x60
 800732a:	d050      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x11a>
 800732c:	2b60      	cmp	r3, #96	@ 0x60
 800732e:	d877      	bhi.n	8007420 <HAL_TIM_ConfigClockSource+0x16c>
 8007330:	2b50      	cmp	r3, #80	@ 0x50
 8007332:	d03c      	beq.n	80073ae <HAL_TIM_ConfigClockSource+0xfa>
 8007334:	2b50      	cmp	r3, #80	@ 0x50
 8007336:	d873      	bhi.n	8007420 <HAL_TIM_ConfigClockSource+0x16c>
 8007338:	2b40      	cmp	r3, #64	@ 0x40
 800733a:	d058      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x13a>
 800733c:	2b40      	cmp	r3, #64	@ 0x40
 800733e:	d86f      	bhi.n	8007420 <HAL_TIM_ConfigClockSource+0x16c>
 8007340:	2b30      	cmp	r3, #48	@ 0x30
 8007342:	d064      	beq.n	800740e <HAL_TIM_ConfigClockSource+0x15a>
 8007344:	2b30      	cmp	r3, #48	@ 0x30
 8007346:	d86b      	bhi.n	8007420 <HAL_TIM_ConfigClockSource+0x16c>
 8007348:	2b20      	cmp	r3, #32
 800734a:	d060      	beq.n	800740e <HAL_TIM_ConfigClockSource+0x15a>
 800734c:	2b20      	cmp	r3, #32
 800734e:	d867      	bhi.n	8007420 <HAL_TIM_ConfigClockSource+0x16c>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d05c      	beq.n	800740e <HAL_TIM_ConfigClockSource+0x15a>
 8007354:	2b10      	cmp	r3, #16
 8007356:	d05a      	beq.n	800740e <HAL_TIM_ConfigClockSource+0x15a>
 8007358:	e062      	b.n	8007420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800736a:	f000 f9bd 	bl	80076e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800737c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	609a      	str	r2, [r3, #8]
      break;
 8007386:	e04f      	b.n	8007428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007398:	f000 f9a6 	bl	80076e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073aa:	609a      	str	r2, [r3, #8]
      break;
 80073ac:	e03c      	b.n	8007428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ba:	461a      	mov	r2, r3
 80073bc:	f000 f91a 	bl	80075f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2150      	movs	r1, #80	@ 0x50
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 f973 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 80073cc:	e02c      	b.n	8007428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073da:	461a      	mov	r2, r3
 80073dc:	f000 f939 	bl	8007652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2160      	movs	r1, #96	@ 0x60
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 f963 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 80073ec:	e01c      	b.n	8007428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073fa:	461a      	mov	r2, r3
 80073fc:	f000 f8fa 	bl	80075f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2140      	movs	r1, #64	@ 0x40
 8007406:	4618      	mov	r0, r3
 8007408:	f000 f953 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 800740c:	e00c      	b.n	8007428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4619      	mov	r1, r3
 8007418:	4610      	mov	r0, r2
 800741a:	f000 f94a 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 800741e:	e003      	b.n	8007428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
      break;
 8007424:	e000      	b.n	8007428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a43      	ldr	r2, [pc, #268]	@ (80075c8 <TIM_Base_SetConfig+0x120>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c6:	d00f      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a40      	ldr	r2, [pc, #256]	@ (80075cc <TIM_Base_SetConfig+0x124>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00b      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a3f      	ldr	r2, [pc, #252]	@ (80075d0 <TIM_Base_SetConfig+0x128>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d007      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a3e      	ldr	r2, [pc, #248]	@ (80075d4 <TIM_Base_SetConfig+0x12c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d003      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a3d      	ldr	r2, [pc, #244]	@ (80075d8 <TIM_Base_SetConfig+0x130>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a32      	ldr	r2, [pc, #200]	@ (80075c8 <TIM_Base_SetConfig+0x120>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d02b      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007508:	d027      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a2f      	ldr	r2, [pc, #188]	@ (80075cc <TIM_Base_SetConfig+0x124>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d023      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a2e      	ldr	r2, [pc, #184]	@ (80075d0 <TIM_Base_SetConfig+0x128>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d01f      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2d      	ldr	r2, [pc, #180]	@ (80075d4 <TIM_Base_SetConfig+0x12c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d01b      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a2c      	ldr	r2, [pc, #176]	@ (80075d8 <TIM_Base_SetConfig+0x130>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d017      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a2b      	ldr	r2, [pc, #172]	@ (80075dc <TIM_Base_SetConfig+0x134>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2a      	ldr	r2, [pc, #168]	@ (80075e0 <TIM_Base_SetConfig+0x138>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00f      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a29      	ldr	r2, [pc, #164]	@ (80075e4 <TIM_Base_SetConfig+0x13c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00b      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a28      	ldr	r2, [pc, #160]	@ (80075e8 <TIM_Base_SetConfig+0x140>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d007      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a27      	ldr	r2, [pc, #156]	@ (80075ec <TIM_Base_SetConfig+0x144>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d003      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a26      	ldr	r2, [pc, #152]	@ (80075f0 <TIM_Base_SetConfig+0x148>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d108      	bne.n	800756c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a0e      	ldr	r2, [pc, #56]	@ (80075c8 <TIM_Base_SetConfig+0x120>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d003      	beq.n	800759a <TIM_Base_SetConfig+0xf2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a10      	ldr	r2, [pc, #64]	@ (80075d8 <TIM_Base_SetConfig+0x130>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d103      	bne.n	80075a2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f043 0204 	orr.w	r2, r3, #4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40010000 	.word	0x40010000
 80075cc:	40000400 	.word	0x40000400
 80075d0:	40000800 	.word	0x40000800
 80075d4:	40000c00 	.word	0x40000c00
 80075d8:	40010400 	.word	0x40010400
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40014400 	.word	0x40014400
 80075e4:	40014800 	.word	0x40014800
 80075e8:	40001800 	.word	0x40001800
 80075ec:	40001c00 	.word	0x40001c00
 80075f0:	40002000 	.word	0x40002000

080075f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f023 0201 	bic.w	r2, r3, #1
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800761e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f023 030a 	bic.w	r3, r3, #10
 8007630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	621a      	str	r2, [r3, #32]
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007652:	b480      	push	{r7}
 8007654:	b087      	sub	sp, #28
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	f023 0210 	bic.w	r2, r3, #16
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800767c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	031b      	lsls	r3, r3, #12
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	4313      	orrs	r3, r2
 8007686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800768e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f043 0307 	orr.w	r3, r3, #7
 80076d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	609a      	str	r2, [r3, #8]
}
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	021a      	lsls	r2, r3, #8
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	431a      	orrs	r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4313      	orrs	r3, r2
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	609a      	str	r2, [r3, #8]
}
 800771c:	bf00      	nop
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800773c:	2302      	movs	r3, #2
 800773e:	e05a      	b.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a21      	ldr	r2, [pc, #132]	@ (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d022      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800778c:	d01d      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1d      	ldr	r2, [pc, #116]	@ (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d018      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a1b      	ldr	r2, [pc, #108]	@ (800780c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d013      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00e      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a18      	ldr	r2, [pc, #96]	@ (8007814 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d009      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a17      	ldr	r2, [pc, #92]	@ (8007818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a15      	ldr	r2, [pc, #84]	@ (800781c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d10c      	bne.n	80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4313      	orrs	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40010000 	.word	0x40010000
 8007808:	40000400 	.word	0x40000400
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00
 8007814:	40010400 	.word	0x40010400
 8007818:	40014000 	.word	0x40014000
 800781c:	40001800 	.word	0x40001800

08007820 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e042      	b.n	80078e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fb f87a 	bl	8002968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2224      	movs	r2, #36	@ 0x24
 8007878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800788a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fdd3 	bl	8008438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695a      	ldr	r2, [r3, #20]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	@ 0x28
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b20      	cmp	r3, #32
 8007906:	d175      	bne.n	80079f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <HAL_UART_Transmit+0x2c>
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e06e      	b.n	80079f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2221      	movs	r2, #33	@ 0x21
 8007922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007926:	f7fc f863 	bl	80039f0 <HAL_GetTick>
 800792a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	88fa      	ldrh	r2, [r7, #6]
 8007930:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007940:	d108      	bne.n	8007954 <HAL_UART_Transmit+0x6c>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d104      	bne.n	8007954 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	e003      	b.n	800795c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007958:	2300      	movs	r3, #0
 800795a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800795c:	e02e      	b.n	80079bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2200      	movs	r2, #0
 8007966:	2180      	movs	r1, #128	@ 0x80
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 fb37 	bl	8007fdc <UART_WaitOnFlagUntilTimeout>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e03a      	b.n	80079f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	3302      	adds	r3, #2
 800799a:	61bb      	str	r3, [r7, #24]
 800799c:	e007      	b.n	80079ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	781a      	ldrb	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	3301      	adds	r3, #1
 80079ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1cb      	bne.n	800795e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2200      	movs	r2, #0
 80079ce:	2140      	movs	r1, #64	@ 0x40
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 fb03 	bl	8007fdc <UART_WaitOnFlagUntilTimeout>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e006      	b.n	80079f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e000      	b.n	80079f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80079f4:	2302      	movs	r3, #2
  }
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	d112      	bne.n	8007a3e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <HAL_UART_Receive_IT+0x26>
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e00b      	b.n	8007a40 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	461a      	mov	r2, r3
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 fb2a 	bl	800808e <UART_Start_Receive_IT>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	e000      	b.n	8007a40 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007a3e:	2302      	movs	r3, #2
  }
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b0ba      	sub	sp, #232	@ 0xe8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10f      	bne.n	8007aae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <HAL_UART_IRQHandler+0x66>
 8007a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fc07 	bl	80082ba <UART_Receive_IT>
      return;
 8007aac:	e273      	b.n	8007f96 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 80de 	beq.w	8007c74 <HAL_UART_IRQHandler+0x22c>
 8007ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d106      	bne.n	8007ad2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 80d1 	beq.w	8007c74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <HAL_UART_IRQHandler+0xae>
 8007ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d005      	beq.n	8007af6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aee:	f043 0201 	orr.w	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <HAL_UART_IRQHandler+0xd2>
 8007b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b12:	f043 0202 	orr.w	r2, r3, #2
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00b      	beq.n	8007b3e <HAL_UART_IRQHandler+0xf6>
 8007b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b36:	f043 0204 	orr.w	r2, r3, #4
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d011      	beq.n	8007b6e <HAL_UART_IRQHandler+0x126>
 8007b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d105      	bne.n	8007b62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b66:	f043 0208 	orr.w	r2, r3, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 820a 	beq.w	8007f8c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <HAL_UART_IRQHandler+0x14e>
 8007b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fb92 	bl	80082ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba0:	2b40      	cmp	r3, #64	@ 0x40
 8007ba2:	bf0c      	ite	eq
 8007ba4:	2301      	moveq	r3, #1
 8007ba6:	2300      	movne	r3, #0
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d103      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x17a>
 8007bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d04f      	beq.n	8007c62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa9d 	bl	8008102 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd2:	2b40      	cmp	r3, #64	@ 0x40
 8007bd4:	d141      	bne.n	8007c5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3314      	adds	r3, #20
 8007bdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3314      	adds	r3, #20
 8007bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1d9      	bne.n	8007bd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d013      	beq.n	8007c52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c2e:	4a8a      	ldr	r2, [pc, #552]	@ (8007e58 <HAL_UART_IRQHandler+0x410>)
 8007c30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fc f906 	bl	8003e48 <HAL_DMA_Abort_IT>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d016      	beq.n	8007c70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c50:	e00e      	b.n	8007c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f9ac 	bl	8007fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	e00a      	b.n	8007c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f9a8 	bl	8007fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c60:	e006      	b.n	8007c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f9a4 	bl	8007fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007c6e:	e18d      	b.n	8007f8c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c70:	bf00      	nop
    return;
 8007c72:	e18b      	b.n	8007f8c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	f040 8167 	bne.w	8007f4c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c82:	f003 0310 	and.w	r3, r3, #16
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 8160 	beq.w	8007f4c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c90:	f003 0310 	and.w	r3, r3, #16
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 8159 	beq.w	8007f4c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60bb      	str	r3, [r7, #8]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	60bb      	str	r3, [r7, #8]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	60bb      	str	r3, [r7, #8]
 8007cae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cba:	2b40      	cmp	r3, #64	@ 0x40
 8007cbc:	f040 80ce 	bne.w	8007e5c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ccc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 80a9 	beq.w	8007e28 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	f080 80a2 	bcs.w	8007e28 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cf6:	f000 8088 	beq.w	8007e0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	330c      	adds	r3, #12
 8007d00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	330c      	adds	r3, #12
 8007d22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1d9      	bne.n	8007cfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3314      	adds	r3, #20
 8007d4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d58:	f023 0301 	bic.w	r3, r3, #1
 8007d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3314      	adds	r3, #20
 8007d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e1      	bne.n	8007d46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3314      	adds	r3, #20
 8007d88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3314      	adds	r3, #20
 8007da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007da6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007da8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007dac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007db4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e3      	bne.n	8007d82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	330c      	adds	r3, #12
 8007dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dda:	f023 0310 	bic.w	r3, r3, #16
 8007dde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	330c      	adds	r3, #12
 8007de8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007dec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007dee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e3      	bne.n	8007dc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fb ffaf 	bl	8003d68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f8cf 	bl	8007fc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007e26:	e0b3      	b.n	8007f90 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e30:	429a      	cmp	r2, r3
 8007e32:	f040 80ad 	bne.w	8007f90 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e40:	f040 80a6 	bne.w	8007f90 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f8b7 	bl	8007fc4 <HAL_UARTEx_RxEventCallback>
      return;
 8007e56:	e09b      	b.n	8007f90 <HAL_UART_IRQHandler+0x548>
 8007e58:	080081c9 	.word	0x080081c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 808e 	beq.w	8007f94 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8089 	beq.w	8007f94 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	330c      	adds	r3, #12
 8007e88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	330c      	adds	r3, #12
 8007ea2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007ea6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ea8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007eac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1e3      	bne.n	8007e82 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3314      	adds	r3, #20
 8007ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	f023 0301 	bic.w	r3, r3, #1
 8007ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3314      	adds	r3, #20
 8007eda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ede:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e3      	bne.n	8007eba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	330c      	adds	r3, #12
 8007f06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	e853 3f00 	ldrex	r3, [r3]
 8007f0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 0310 	bic.w	r3, r3, #16
 8007f16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	330c      	adds	r3, #12
 8007f20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007f24:	61fa      	str	r2, [r7, #28]
 8007f26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	69b9      	ldr	r1, [r7, #24]
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	617b      	str	r3, [r7, #20]
   return(result);
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e3      	bne.n	8007f00 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f83d 	bl	8007fc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f4a:	e023      	b.n	8007f94 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d009      	beq.n	8007f6c <HAL_UART_IRQHandler+0x524>
 8007f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f940 	bl	80081ea <UART_Transmit_IT>
    return;
 8007f6a:	e014      	b.n	8007f96 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00e      	beq.n	8007f96 <HAL_UART_IRQHandler+0x54e>
 8007f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d008      	beq.n	8007f96 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f980 	bl	800828a <UART_EndTransmit_IT>
    return;
 8007f8a:	e004      	b.n	8007f96 <HAL_UART_IRQHandler+0x54e>
    return;
 8007f8c:	bf00      	nop
 8007f8e:	e002      	b.n	8007f96 <HAL_UART_IRQHandler+0x54e>
      return;
 8007f90:	bf00      	nop
 8007f92:	e000      	b.n	8007f96 <HAL_UART_IRQHandler+0x54e>
      return;
 8007f94:	bf00      	nop
  }
}
 8007f96:	37e8      	adds	r7, #232	@ 0xe8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fec:	e03b      	b.n	8008066 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff4:	d037      	beq.n	8008066 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ff6:	f7fb fcfb 	bl	80039f0 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	6a3a      	ldr	r2, [r7, #32]
 8008002:	429a      	cmp	r2, r3
 8008004:	d302      	bcc.n	800800c <UART_WaitOnFlagUntilTimeout+0x30>
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e03a      	b.n	8008086 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f003 0304 	and.w	r3, r3, #4
 800801a:	2b00      	cmp	r3, #0
 800801c:	d023      	beq.n	8008066 <UART_WaitOnFlagUntilTimeout+0x8a>
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b80      	cmp	r3, #128	@ 0x80
 8008022:	d020      	beq.n	8008066 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2b40      	cmp	r3, #64	@ 0x40
 8008028:	d01d      	beq.n	8008066 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b08      	cmp	r3, #8
 8008036:	d116      	bne.n	8008066 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 f857 	bl	8008102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2208      	movs	r2, #8
 8008058:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e00f      	b.n	8008086 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4013      	ands	r3, r2
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	429a      	cmp	r2, r3
 8008074:	bf0c      	ite	eq
 8008076:	2301      	moveq	r3, #1
 8008078:	2300      	movne	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	461a      	mov	r2, r3
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	429a      	cmp	r2, r3
 8008082:	d0b4      	beq.n	8007fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800808e:	b480      	push	{r7}
 8008090:	b085      	sub	sp, #20
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	4613      	mov	r3, r2
 800809a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	88fa      	ldrh	r2, [r7, #6]
 80080a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	88fa      	ldrh	r2, [r7, #6]
 80080ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2222      	movs	r2, #34	@ 0x22
 80080b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	695a      	ldr	r2, [r3, #20]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0201 	orr.w	r2, r2, #1
 80080e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f042 0220 	orr.w	r2, r2, #32
 80080f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008102:	b480      	push	{r7}
 8008104:	b095      	sub	sp, #84	@ 0x54
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	330c      	adds	r3, #12
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008120:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	330c      	adds	r3, #12
 8008128:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800812a:	643a      	str	r2, [r7, #64]	@ 0x40
 800812c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008130:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e5      	bne.n	800810a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3314      	adds	r3, #20
 8008144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	61fb      	str	r3, [r7, #28]
   return(result);
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	f023 0301 	bic.w	r3, r3, #1
 8008154:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3314      	adds	r3, #20
 800815c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800815e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008160:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800816c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e5      	bne.n	800813e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008176:	2b01      	cmp	r3, #1
 8008178:	d119      	bne.n	80081ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	330c      	adds	r3, #12
 8008180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	60bb      	str	r3, [r7, #8]
   return(result);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f023 0310 	bic.w	r3, r3, #16
 8008190:	647b      	str	r3, [r7, #68]	@ 0x44
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	330c      	adds	r3, #12
 8008198:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800819a:	61ba      	str	r2, [r7, #24]
 800819c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	6979      	ldr	r1, [r7, #20]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	613b      	str	r3, [r7, #16]
   return(result);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e5      	bne.n	800817a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081bc:	bf00      	nop
 80081be:	3754      	adds	r7, #84	@ 0x54
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff fee7 	bl	8007fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b21      	cmp	r3, #33	@ 0x21
 80081fc:	d13e      	bne.n	800827c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008206:	d114      	bne.n	8008232 <UART_Transmit_IT+0x48>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d110      	bne.n	8008232 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008224:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	1c9a      	adds	r2, r3, #2
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	621a      	str	r2, [r3, #32]
 8008230:	e008      	b.n	8008244 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	1c59      	adds	r1, r3, #1
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6211      	str	r1, [r2, #32]
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	b29b      	uxth	r3, r3
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	4619      	mov	r1, r3
 8008252:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10f      	bne.n	8008278 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008266:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008276:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	e000      	b.n	800827e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800827c:	2302      	movs	r3, #2
  }
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fe76 	bl	8007f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b08c      	sub	sp, #48	@ 0x30
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b22      	cmp	r3, #34	@ 0x22
 80082d4:	f040 80aa 	bne.w	800842c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e0:	d115      	bne.n	800830e <UART_Receive_IT+0x54>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d111      	bne.n	800830e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008300:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008306:	1c9a      	adds	r2, r3, #2
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	629a      	str	r2, [r3, #40]	@ 0x28
 800830c:	e024      	b.n	8008358 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008312:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800831c:	d007      	beq.n	800832e <UART_Receive_IT+0x74>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10a      	bne.n	800833c <UART_Receive_IT+0x82>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	b2da      	uxtb	r2, r3
 8008336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008338:	701a      	strb	r2, [r3, #0]
 800833a:	e008      	b.n	800834e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	b2db      	uxtb	r3, r3
 8008344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008348:	b2da      	uxtb	r2, r3
 800834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	b29b      	uxth	r3, r3
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	4619      	mov	r1, r3
 8008366:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008368:	2b00      	cmp	r3, #0
 800836a:	d15d      	bne.n	8008428 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0220 	bic.w	r2, r2, #32
 800837a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800838a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695a      	ldr	r2, [r3, #20]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0201 	bic.w	r2, r2, #1
 800839a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2220      	movs	r2, #32
 80083a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d135      	bne.n	800841e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	330c      	adds	r3, #12
 80083be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	613b      	str	r3, [r7, #16]
   return(result);
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f023 0310 	bic.w	r3, r3, #16
 80083ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	330c      	adds	r3, #12
 80083d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083d8:	623a      	str	r2, [r7, #32]
 80083da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	69f9      	ldr	r1, [r7, #28]
 80083de:	6a3a      	ldr	r2, [r7, #32]
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e5      	bne.n	80083b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	2b10      	cmp	r3, #16
 80083f8:	d10a      	bne.n	8008410 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff fdd4 	bl	8007fc4 <HAL_UARTEx_RxEventCallback>
 800841c:	e002      	b.n	8008424 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7f9 fd1e 	bl	8001e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	e002      	b.n	800842e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	e000      	b.n	800842e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800842c:	2302      	movs	r3, #2
  }
}
 800842e:	4618      	mov	r0, r3
 8008430:	3730      	adds	r7, #48	@ 0x30
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800843c:	b0c0      	sub	sp, #256	@ 0x100
 800843e:	af00      	add	r7, sp, #0
 8008440:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008454:	68d9      	ldr	r1, [r3, #12]
 8008456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	ea40 0301 	orr.w	r3, r0, r1
 8008460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	431a      	orrs	r2, r3
 8008470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	431a      	orrs	r2, r3
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	4313      	orrs	r3, r2
 8008480:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008490:	f021 010c 	bic.w	r1, r1, #12
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800849e:	430b      	orrs	r3, r1
 80084a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80084ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b2:	6999      	ldr	r1, [r3, #24]
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	ea40 0301 	orr.w	r3, r0, r1
 80084be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	4b8f      	ldr	r3, [pc, #572]	@ (8008704 <UART_SetConfig+0x2cc>)
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d005      	beq.n	80084d8 <UART_SetConfig+0xa0>
 80084cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008708 <UART_SetConfig+0x2d0>)
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d104      	bne.n	80084e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084d8:	f7fd ff78 	bl	80063cc <HAL_RCC_GetPCLK2Freq>
 80084dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80084e0:	e003      	b.n	80084ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084e2:	f7fd ff5f 	bl	80063a4 <HAL_RCC_GetPCLK1Freq>
 80084e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084f4:	f040 810c 	bne.w	8008710 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008502:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800850a:	4622      	mov	r2, r4
 800850c:	462b      	mov	r3, r5
 800850e:	1891      	adds	r1, r2, r2
 8008510:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008512:	415b      	adcs	r3, r3
 8008514:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008516:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800851a:	4621      	mov	r1, r4
 800851c:	eb12 0801 	adds.w	r8, r2, r1
 8008520:	4629      	mov	r1, r5
 8008522:	eb43 0901 	adc.w	r9, r3, r1
 8008526:	f04f 0200 	mov.w	r2, #0
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800853a:	4690      	mov	r8, r2
 800853c:	4699      	mov	r9, r3
 800853e:	4623      	mov	r3, r4
 8008540:	eb18 0303 	adds.w	r3, r8, r3
 8008544:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008548:	462b      	mov	r3, r5
 800854a:	eb49 0303 	adc.w	r3, r9, r3
 800854e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800855e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008566:	460b      	mov	r3, r1
 8008568:	18db      	adds	r3, r3, r3
 800856a:	653b      	str	r3, [r7, #80]	@ 0x50
 800856c:	4613      	mov	r3, r2
 800856e:	eb42 0303 	adc.w	r3, r2, r3
 8008572:	657b      	str	r3, [r7, #84]	@ 0x54
 8008574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008578:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800857c:	f7f8 fb94 	bl	8000ca8 <__aeabi_uldivmod>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	4b61      	ldr	r3, [pc, #388]	@ (800870c <UART_SetConfig+0x2d4>)
 8008586:	fba3 2302 	umull	r2, r3, r3, r2
 800858a:	095b      	lsrs	r3, r3, #5
 800858c:	011c      	lsls	r4, r3, #4
 800858e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008592:	2200      	movs	r2, #0
 8008594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008598:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800859c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80085a0:	4642      	mov	r2, r8
 80085a2:	464b      	mov	r3, r9
 80085a4:	1891      	adds	r1, r2, r2
 80085a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085a8:	415b      	adcs	r3, r3
 80085aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085b0:	4641      	mov	r1, r8
 80085b2:	eb12 0a01 	adds.w	sl, r2, r1
 80085b6:	4649      	mov	r1, r9
 80085b8:	eb43 0b01 	adc.w	fp, r3, r1
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085d0:	4692      	mov	sl, r2
 80085d2:	469b      	mov	fp, r3
 80085d4:	4643      	mov	r3, r8
 80085d6:	eb1a 0303 	adds.w	r3, sl, r3
 80085da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085de:	464b      	mov	r3, r9
 80085e0:	eb4b 0303 	adc.w	r3, fp, r3
 80085e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80085f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80085fc:	460b      	mov	r3, r1
 80085fe:	18db      	adds	r3, r3, r3
 8008600:	643b      	str	r3, [r7, #64]	@ 0x40
 8008602:	4613      	mov	r3, r2
 8008604:	eb42 0303 	adc.w	r3, r2, r3
 8008608:	647b      	str	r3, [r7, #68]	@ 0x44
 800860a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800860e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008612:	f7f8 fb49 	bl	8000ca8 <__aeabi_uldivmod>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4611      	mov	r1, r2
 800861c:	4b3b      	ldr	r3, [pc, #236]	@ (800870c <UART_SetConfig+0x2d4>)
 800861e:	fba3 2301 	umull	r2, r3, r3, r1
 8008622:	095b      	lsrs	r3, r3, #5
 8008624:	2264      	movs	r2, #100	@ 0x64
 8008626:	fb02 f303 	mul.w	r3, r2, r3
 800862a:	1acb      	subs	r3, r1, r3
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008632:	4b36      	ldr	r3, [pc, #216]	@ (800870c <UART_SetConfig+0x2d4>)
 8008634:	fba3 2302 	umull	r2, r3, r3, r2
 8008638:	095b      	lsrs	r3, r3, #5
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008640:	441c      	add	r4, r3
 8008642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008646:	2200      	movs	r2, #0
 8008648:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800864c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008650:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008654:	4642      	mov	r2, r8
 8008656:	464b      	mov	r3, r9
 8008658:	1891      	adds	r1, r2, r2
 800865a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800865c:	415b      	adcs	r3, r3
 800865e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008664:	4641      	mov	r1, r8
 8008666:	1851      	adds	r1, r2, r1
 8008668:	6339      	str	r1, [r7, #48]	@ 0x30
 800866a:	4649      	mov	r1, r9
 800866c:	414b      	adcs	r3, r1
 800866e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008670:	f04f 0200 	mov.w	r2, #0
 8008674:	f04f 0300 	mov.w	r3, #0
 8008678:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800867c:	4659      	mov	r1, fp
 800867e:	00cb      	lsls	r3, r1, #3
 8008680:	4651      	mov	r1, sl
 8008682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008686:	4651      	mov	r1, sl
 8008688:	00ca      	lsls	r2, r1, #3
 800868a:	4610      	mov	r0, r2
 800868c:	4619      	mov	r1, r3
 800868e:	4603      	mov	r3, r0
 8008690:	4642      	mov	r2, r8
 8008692:	189b      	adds	r3, r3, r2
 8008694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008698:	464b      	mov	r3, r9
 800869a:	460a      	mov	r2, r1
 800869c:	eb42 0303 	adc.w	r3, r2, r3
 80086a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80086b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086b8:	460b      	mov	r3, r1
 80086ba:	18db      	adds	r3, r3, r3
 80086bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086be:	4613      	mov	r3, r2
 80086c0:	eb42 0303 	adc.w	r3, r2, r3
 80086c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80086ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80086ce:	f7f8 faeb 	bl	8000ca8 <__aeabi_uldivmod>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4b0d      	ldr	r3, [pc, #52]	@ (800870c <UART_SetConfig+0x2d4>)
 80086d8:	fba3 1302 	umull	r1, r3, r3, r2
 80086dc:	095b      	lsrs	r3, r3, #5
 80086de:	2164      	movs	r1, #100	@ 0x64
 80086e0:	fb01 f303 	mul.w	r3, r1, r3
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	3332      	adds	r3, #50	@ 0x32
 80086ea:	4a08      	ldr	r2, [pc, #32]	@ (800870c <UART_SetConfig+0x2d4>)
 80086ec:	fba2 2303 	umull	r2, r3, r2, r3
 80086f0:	095b      	lsrs	r3, r3, #5
 80086f2:	f003 0207 	and.w	r2, r3, #7
 80086f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4422      	add	r2, r4
 80086fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008700:	e106      	b.n	8008910 <UART_SetConfig+0x4d8>
 8008702:	bf00      	nop
 8008704:	40011000 	.word	0x40011000
 8008708:	40011400 	.word	0x40011400
 800870c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008714:	2200      	movs	r2, #0
 8008716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800871a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800871e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008722:	4642      	mov	r2, r8
 8008724:	464b      	mov	r3, r9
 8008726:	1891      	adds	r1, r2, r2
 8008728:	6239      	str	r1, [r7, #32]
 800872a:	415b      	adcs	r3, r3
 800872c:	627b      	str	r3, [r7, #36]	@ 0x24
 800872e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008732:	4641      	mov	r1, r8
 8008734:	1854      	adds	r4, r2, r1
 8008736:	4649      	mov	r1, r9
 8008738:	eb43 0501 	adc.w	r5, r3, r1
 800873c:	f04f 0200 	mov.w	r2, #0
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	00eb      	lsls	r3, r5, #3
 8008746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800874a:	00e2      	lsls	r2, r4, #3
 800874c:	4614      	mov	r4, r2
 800874e:	461d      	mov	r5, r3
 8008750:	4643      	mov	r3, r8
 8008752:	18e3      	adds	r3, r4, r3
 8008754:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008758:	464b      	mov	r3, r9
 800875a:	eb45 0303 	adc.w	r3, r5, r3
 800875e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800876e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008772:	f04f 0200 	mov.w	r2, #0
 8008776:	f04f 0300 	mov.w	r3, #0
 800877a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800877e:	4629      	mov	r1, r5
 8008780:	008b      	lsls	r3, r1, #2
 8008782:	4621      	mov	r1, r4
 8008784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008788:	4621      	mov	r1, r4
 800878a:	008a      	lsls	r2, r1, #2
 800878c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008790:	f7f8 fa8a 	bl	8000ca8 <__aeabi_uldivmod>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4b60      	ldr	r3, [pc, #384]	@ (800891c <UART_SetConfig+0x4e4>)
 800879a:	fba3 2302 	umull	r2, r3, r3, r2
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	011c      	lsls	r4, r3, #4
 80087a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80087b4:	4642      	mov	r2, r8
 80087b6:	464b      	mov	r3, r9
 80087b8:	1891      	adds	r1, r2, r2
 80087ba:	61b9      	str	r1, [r7, #24]
 80087bc:	415b      	adcs	r3, r3
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087c4:	4641      	mov	r1, r8
 80087c6:	1851      	adds	r1, r2, r1
 80087c8:	6139      	str	r1, [r7, #16]
 80087ca:	4649      	mov	r1, r9
 80087cc:	414b      	adcs	r3, r1
 80087ce:	617b      	str	r3, [r7, #20]
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087dc:	4659      	mov	r1, fp
 80087de:	00cb      	lsls	r3, r1, #3
 80087e0:	4651      	mov	r1, sl
 80087e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087e6:	4651      	mov	r1, sl
 80087e8:	00ca      	lsls	r2, r1, #3
 80087ea:	4610      	mov	r0, r2
 80087ec:	4619      	mov	r1, r3
 80087ee:	4603      	mov	r3, r0
 80087f0:	4642      	mov	r2, r8
 80087f2:	189b      	adds	r3, r3, r2
 80087f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087f8:	464b      	mov	r3, r9
 80087fa:	460a      	mov	r2, r1
 80087fc:	eb42 0303 	adc.w	r3, r2, r3
 8008800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800880e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	f04f 0300 	mov.w	r3, #0
 8008818:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800881c:	4649      	mov	r1, r9
 800881e:	008b      	lsls	r3, r1, #2
 8008820:	4641      	mov	r1, r8
 8008822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008826:	4641      	mov	r1, r8
 8008828:	008a      	lsls	r2, r1, #2
 800882a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800882e:	f7f8 fa3b 	bl	8000ca8 <__aeabi_uldivmod>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4611      	mov	r1, r2
 8008838:	4b38      	ldr	r3, [pc, #224]	@ (800891c <UART_SetConfig+0x4e4>)
 800883a:	fba3 2301 	umull	r2, r3, r3, r1
 800883e:	095b      	lsrs	r3, r3, #5
 8008840:	2264      	movs	r2, #100	@ 0x64
 8008842:	fb02 f303 	mul.w	r3, r2, r3
 8008846:	1acb      	subs	r3, r1, r3
 8008848:	011b      	lsls	r3, r3, #4
 800884a:	3332      	adds	r3, #50	@ 0x32
 800884c:	4a33      	ldr	r2, [pc, #204]	@ (800891c <UART_SetConfig+0x4e4>)
 800884e:	fba2 2303 	umull	r2, r3, r2, r3
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008858:	441c      	add	r4, r3
 800885a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800885e:	2200      	movs	r2, #0
 8008860:	673b      	str	r3, [r7, #112]	@ 0x70
 8008862:	677a      	str	r2, [r7, #116]	@ 0x74
 8008864:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008868:	4642      	mov	r2, r8
 800886a:	464b      	mov	r3, r9
 800886c:	1891      	adds	r1, r2, r2
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	415b      	adcs	r3, r3
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008878:	4641      	mov	r1, r8
 800887a:	1851      	adds	r1, r2, r1
 800887c:	6039      	str	r1, [r7, #0]
 800887e:	4649      	mov	r1, r9
 8008880:	414b      	adcs	r3, r1
 8008882:	607b      	str	r3, [r7, #4]
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	f04f 0300 	mov.w	r3, #0
 800888c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008890:	4659      	mov	r1, fp
 8008892:	00cb      	lsls	r3, r1, #3
 8008894:	4651      	mov	r1, sl
 8008896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800889a:	4651      	mov	r1, sl
 800889c:	00ca      	lsls	r2, r1, #3
 800889e:	4610      	mov	r0, r2
 80088a0:	4619      	mov	r1, r3
 80088a2:	4603      	mov	r3, r0
 80088a4:	4642      	mov	r2, r8
 80088a6:	189b      	adds	r3, r3, r2
 80088a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088aa:	464b      	mov	r3, r9
 80088ac:	460a      	mov	r2, r1
 80088ae:	eb42 0303 	adc.w	r3, r2, r3
 80088b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80088be:	667a      	str	r2, [r7, #100]	@ 0x64
 80088c0:	f04f 0200 	mov.w	r2, #0
 80088c4:	f04f 0300 	mov.w	r3, #0
 80088c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80088cc:	4649      	mov	r1, r9
 80088ce:	008b      	lsls	r3, r1, #2
 80088d0:	4641      	mov	r1, r8
 80088d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088d6:	4641      	mov	r1, r8
 80088d8:	008a      	lsls	r2, r1, #2
 80088da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80088de:	f7f8 f9e3 	bl	8000ca8 <__aeabi_uldivmod>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4b0d      	ldr	r3, [pc, #52]	@ (800891c <UART_SetConfig+0x4e4>)
 80088e8:	fba3 1302 	umull	r1, r3, r3, r2
 80088ec:	095b      	lsrs	r3, r3, #5
 80088ee:	2164      	movs	r1, #100	@ 0x64
 80088f0:	fb01 f303 	mul.w	r3, r1, r3
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	011b      	lsls	r3, r3, #4
 80088f8:	3332      	adds	r3, #50	@ 0x32
 80088fa:	4a08      	ldr	r2, [pc, #32]	@ (800891c <UART_SetConfig+0x4e4>)
 80088fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008900:	095b      	lsrs	r3, r3, #5
 8008902:	f003 020f 	and.w	r2, r3, #15
 8008906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4422      	add	r2, r4
 800890e:	609a      	str	r2, [r3, #8]
}
 8008910:	bf00      	nop
 8008912:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008916:	46bd      	mov	sp, r7
 8008918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800891c:	51eb851f 	.word	0x51eb851f

08008920 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	f023 0101 	bic.w	r1, r3, #1
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2b08      	cmp	r3, #8
 8008948:	d102      	bne.n	8008950 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800894a:	2340      	movs	r3, #64	@ 0x40
 800894c:	617b      	str	r3, [r7, #20]
 800894e:	e001      	b.n	8008954 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008950:	2300      	movs	r3, #0
 8008952:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008960:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008966:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800896c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008972:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008978:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800897e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008984:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800898a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008990:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8008996:	4313      	orrs	r3, r2
 8008998:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80089ae:	4b10      	ldr	r3, [pc, #64]	@ (80089f0 <FSMC_NORSRAM_Init+0xd0>)
 80089b0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80089b8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80089c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	43db      	mvns	r3, r3
 80089d0:	ea02 0103 	and.w	r1, r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	4319      	orrs	r1, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	371c      	adds	r7, #28
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	0008fb7f 	.word	0x0008fb7f

080089f4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008a0a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008a12:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008a1a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008a24:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	3b02      	subs	r3, #2
 8008a2c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008a2e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008a3a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a64:	d11d      	bne.n	8008aa2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a6e:	4b13      	ldr	r3, [pc, #76]	@ (8008abc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	6811      	ldr	r1, [r2, #0]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	6852      	ldr	r2, [r2, #4]
 8008a7a:	0112      	lsls	r2, r2, #4
 8008a7c:	4311      	orrs	r1, r2
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	6892      	ldr	r2, [r2, #8]
 8008a82:	0212      	lsls	r2, r2, #8
 8008a84:	4311      	orrs	r1, r2
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	6992      	ldr	r2, [r2, #24]
 8008a8a:	4311      	orrs	r1, r2
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	68d2      	ldr	r2, [r2, #12]
 8008a90:	0412      	lsls	r2, r2, #16
 8008a92:	430a      	orrs	r2, r1
 8008a94:	ea43 0102 	orr.w	r1, r3, r2
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008aa0:	e005      	b.n	8008aae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	cff00000 	.word	0xcff00000

08008ac0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	f107 001c 	add.w	r0, r7, #28
 8008ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ad2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d123      	bne.n	8008b22 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ade:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d105      	bne.n	8008b16 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fae8 	bl	800a0ec <USB_CoreReset>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73fb      	strb	r3, [r7, #15]
 8008b20:	e01b      	b.n	8008b5a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 fadc 	bl	800a0ec <USB_CoreReset>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d106      	bne.n	8008b4e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b4c:	e005      	b.n	8008b5a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b5a:	7fbb      	ldrb	r3, [r7, #30]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d10b      	bne.n	8008b78 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f043 0206 	orr.w	r2, r3, #6
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f043 0220 	orr.w	r2, r3, #32
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b84:	b004      	add	sp, #16
 8008b86:	4770      	bx	lr

08008b88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d165      	bne.n	8008c68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4a41      	ldr	r2, [pc, #260]	@ (8008ca4 <USB_SetTurnaroundTime+0x11c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d906      	bls.n	8008bb2 <USB_SetTurnaroundTime+0x2a>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4a40      	ldr	r2, [pc, #256]	@ (8008ca8 <USB_SetTurnaroundTime+0x120>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d202      	bcs.n	8008bb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008bac:	230f      	movs	r3, #15
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	e062      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8008ca8 <USB_SetTurnaroundTime+0x120>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d306      	bcc.n	8008bc8 <USB_SetTurnaroundTime+0x40>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8008cac <USB_SetTurnaroundTime+0x124>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d202      	bcs.n	8008bc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008bc2:	230e      	movs	r3, #14
 8008bc4:	617b      	str	r3, [r7, #20]
 8008bc6:	e057      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	4a38      	ldr	r2, [pc, #224]	@ (8008cac <USB_SetTurnaroundTime+0x124>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d306      	bcc.n	8008bde <USB_SetTurnaroundTime+0x56>
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4a37      	ldr	r2, [pc, #220]	@ (8008cb0 <USB_SetTurnaroundTime+0x128>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d202      	bcs.n	8008bde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008bd8:	230d      	movs	r3, #13
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	e04c      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	4a33      	ldr	r2, [pc, #204]	@ (8008cb0 <USB_SetTurnaroundTime+0x128>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d306      	bcc.n	8008bf4 <USB_SetTurnaroundTime+0x6c>
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	4a32      	ldr	r2, [pc, #200]	@ (8008cb4 <USB_SetTurnaroundTime+0x12c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d802      	bhi.n	8008bf4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008bee:	230c      	movs	r3, #12
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	e041      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8008cb4 <USB_SetTurnaroundTime+0x12c>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d906      	bls.n	8008c0a <USB_SetTurnaroundTime+0x82>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8008cb8 <USB_SetTurnaroundTime+0x130>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d802      	bhi.n	8008c0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008c04:	230b      	movs	r3, #11
 8008c06:	617b      	str	r3, [r7, #20]
 8008c08:	e036      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8008cb8 <USB_SetTurnaroundTime+0x130>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d906      	bls.n	8008c20 <USB_SetTurnaroundTime+0x98>
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	4a29      	ldr	r2, [pc, #164]	@ (8008cbc <USB_SetTurnaroundTime+0x134>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d802      	bhi.n	8008c20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008c1a:	230a      	movs	r3, #10
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	e02b      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4a26      	ldr	r2, [pc, #152]	@ (8008cbc <USB_SetTurnaroundTime+0x134>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d906      	bls.n	8008c36 <USB_SetTurnaroundTime+0xae>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4a25      	ldr	r2, [pc, #148]	@ (8008cc0 <USB_SetTurnaroundTime+0x138>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d202      	bcs.n	8008c36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008c30:	2309      	movs	r3, #9
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	e020      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	4a21      	ldr	r2, [pc, #132]	@ (8008cc0 <USB_SetTurnaroundTime+0x138>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d306      	bcc.n	8008c4c <USB_SetTurnaroundTime+0xc4>
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	4a20      	ldr	r2, [pc, #128]	@ (8008cc4 <USB_SetTurnaroundTime+0x13c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d802      	bhi.n	8008c4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c46:	2308      	movs	r3, #8
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	e015      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8008cc4 <USB_SetTurnaroundTime+0x13c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d906      	bls.n	8008c62 <USB_SetTurnaroundTime+0xda>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	4a1c      	ldr	r2, [pc, #112]	@ (8008cc8 <USB_SetTurnaroundTime+0x140>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d202      	bcs.n	8008c62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c5c:	2307      	movs	r3, #7
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	e00a      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c62:	2306      	movs	r3, #6
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e007      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008c6e:	2309      	movs	r3, #9
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	e001      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008c74:	2309      	movs	r3, #9
 8008c76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	029b      	lsls	r3, r3, #10
 8008c8c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008c90:	431a      	orrs	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	371c      	adds	r7, #28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	00d8acbf 	.word	0x00d8acbf
 8008ca8:	00e4e1c0 	.word	0x00e4e1c0
 8008cac:	00f42400 	.word	0x00f42400
 8008cb0:	01067380 	.word	0x01067380
 8008cb4:	011a499f 	.word	0x011a499f
 8008cb8:	01312cff 	.word	0x01312cff
 8008cbc:	014ca43f 	.word	0x014ca43f
 8008cc0:	016e3600 	.word	0x016e3600
 8008cc4:	01a6ab1f 	.word	0x01a6ab1f
 8008cc8:	01e84800 	.word	0x01e84800

08008ccc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f043 0201 	orr.w	r2, r3, #1
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b083      	sub	sp, #12
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f023 0201 	bic.w	r2, r3, #1
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d2c:	78fb      	ldrb	r3, [r7, #3]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d115      	bne.n	8008d5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d3e:	200a      	movs	r0, #10
 8008d40:	f7fa fe62 	bl	8003a08 <HAL_Delay>
      ms += 10U;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	330a      	adds	r3, #10
 8008d48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 f93f 	bl	8009fce <USB_GetMode>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d01e      	beq.n	8008d94 <USB_SetCurrentMode+0x84>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d5a:	d9f0      	bls.n	8008d3e <USB_SetCurrentMode+0x2e>
 8008d5c:	e01a      	b.n	8008d94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d115      	bne.n	8008d90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d70:	200a      	movs	r0, #10
 8008d72:	f7fa fe49 	bl	8003a08 <HAL_Delay>
      ms += 10U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	330a      	adds	r3, #10
 8008d7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 f926 	bl	8009fce <USB_GetMode>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <USB_SetCurrentMode+0x84>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d8c:	d9f0      	bls.n	8008d70 <USB_SetCurrentMode+0x60>
 8008d8e:	e001      	b.n	8008d94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e005      	b.n	8008da0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2bc8      	cmp	r3, #200	@ 0xc8
 8008d98:	d101      	bne.n	8008d9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e000      	b.n	8008da0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008da8:	b084      	sub	sp, #16
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b086      	sub	sp, #24
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	613b      	str	r3, [r7, #16]
 8008dc6:	e009      	b.n	8008ddc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	3340      	adds	r3, #64	@ 0x40
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	613b      	str	r3, [r7, #16]
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2b0e      	cmp	r3, #14
 8008de0:	d9f2      	bls.n	8008dc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008de2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d11c      	bne.n	8008e24 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008df8:	f043 0302 	orr.w	r3, r3, #2
 8008dfc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e22:	e00b      	b.n	8008e3c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e28:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e34:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e42:	461a      	mov	r2, r3
 8008e44:	2300      	movs	r3, #0
 8008e46:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e48:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d10d      	bne.n	8008e6c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d104      	bne.n	8008e62 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e58:	2100      	movs	r1, #0
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f968 	bl	8009130 <USB_SetDevSpeed>
 8008e60:	e008      	b.n	8008e74 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e62:	2101      	movs	r1, #1
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f963 	bl	8009130 <USB_SetDevSpeed>
 8008e6a:	e003      	b.n	8008e74 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e6c:	2103      	movs	r1, #3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f95e 	bl	8009130 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e74:	2110      	movs	r1, #16
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f8fa 	bl	8009070 <USB_FlushTxFifo>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f924 	bl	80090d4 <USB_FlushRxFifo>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	2300      	movs	r3, #0
 8008eac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eba:	2300      	movs	r3, #0
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	e043      	b.n	8008f48 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ed6:	d118      	bne.n	8008f0a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eea:	461a      	mov	r2, r3
 8008eec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	e013      	b.n	8008f1c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f00:	461a      	mov	r2, r3
 8008f02:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	e008      	b.n	8008f1c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f16:	461a      	mov	r2, r3
 8008f18:	2300      	movs	r3, #0
 8008f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f28:	461a      	mov	r2, r3
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008f40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3301      	adds	r3, #1
 8008f46:	613b      	str	r3, [r7, #16]
 8008f48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d3b5      	bcc.n	8008ec0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f54:	2300      	movs	r3, #0
 8008f56:	613b      	str	r3, [r7, #16]
 8008f58:	e043      	b.n	8008fe2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f70:	d118      	bne.n	8008fa4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10a      	bne.n	8008f8e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f84:	461a      	mov	r2, r3
 8008f86:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	e013      	b.n	8008fb6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	e008      	b.n	8008fb6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	015a      	lsls	r2, r3, #5
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008fda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	613b      	str	r3, [r7, #16]
 8008fe2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d3b5      	bcc.n	8008f5a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009000:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800900e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009010:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009014:	2b00      	cmp	r3, #0
 8009016:	d105      	bne.n	8009024 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	f043 0210 	orr.w	r2, r3, #16
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	699a      	ldr	r2, [r3, #24]
 8009028:	4b10      	ldr	r3, [pc, #64]	@ (800906c <USB_DevInit+0x2c4>)
 800902a:	4313      	orrs	r3, r2
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009030:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	f043 0208 	orr.w	r2, r3, #8
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009044:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009048:	2b01      	cmp	r3, #1
 800904a:	d107      	bne.n	800905c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009054:	f043 0304 	orr.w	r3, r3, #4
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800905c:	7dfb      	ldrb	r3, [r7, #23]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009068:	b004      	add	sp, #16
 800906a:	4770      	bx	lr
 800906c:	803c3800 	.word	0x803c3800

08009070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3301      	adds	r3, #1
 8009082:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800908a:	d901      	bls.n	8009090 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e01b      	b.n	80090c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	daf2      	bge.n	800907e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	019b      	lsls	r3, r3, #6
 80090a0:	f043 0220 	orr.w	r2, r3, #32
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090b4:	d901      	bls.n	80090ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e006      	b.n	80090c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	f003 0320 	and.w	r3, r3, #32
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d0f0      	beq.n	80090a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3301      	adds	r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090ec:	d901      	bls.n	80090f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e018      	b.n	8009124 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	daf2      	bge.n	80090e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2210      	movs	r2, #16
 8009102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3301      	adds	r3, #1
 8009108:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009110:	d901      	bls.n	8009116 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e006      	b.n	8009124 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	f003 0310 	and.w	r3, r3, #16
 800911e:	2b10      	cmp	r3, #16
 8009120:	d0f0      	beq.n	8009104 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009150:	4313      	orrs	r3, r2
 8009152:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009162:	b480      	push	{r7}
 8009164:	b087      	sub	sp, #28
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f003 0306 	and.w	r3, r3, #6
 800917a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d102      	bne.n	8009188 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009182:	2300      	movs	r3, #0
 8009184:	75fb      	strb	r3, [r7, #23]
 8009186:	e00a      	b.n	800919e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b02      	cmp	r3, #2
 800918c:	d002      	beq.n	8009194 <USB_GetDevSpeed+0x32>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b06      	cmp	r3, #6
 8009192:	d102      	bne.n	800919a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009194:	2302      	movs	r3, #2
 8009196:	75fb      	strb	r3, [r7, #23]
 8009198:	e001      	b.n	800919e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800919a:	230f      	movs	r3, #15
 800919c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800919e:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	371c      	adds	r7, #28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d13a      	bne.n	800923e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091ce:	69da      	ldr	r2, [r3, #28]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 030f 	and.w	r3, r3, #15
 80091d8:	2101      	movs	r1, #1
 80091da:	fa01 f303 	lsl.w	r3, r1, r3
 80091de:	b29b      	uxth	r3, r3
 80091e0:	68f9      	ldr	r1, [r7, #12]
 80091e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091e6:	4313      	orrs	r3, r2
 80091e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d155      	bne.n	80092ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	791b      	ldrb	r3, [r3, #4]
 800921a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800921c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	059b      	lsls	r3, r3, #22
 8009222:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009224:	4313      	orrs	r3, r2
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	0151      	lsls	r1, r2, #5
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	440a      	add	r2, r1
 800922e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	e036      	b.n	80092ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009244:	69da      	ldr	r2, [r3, #28]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	2101      	movs	r1, #1
 8009250:	fa01 f303 	lsl.w	r3, r1, r3
 8009254:	041b      	lsls	r3, r3, #16
 8009256:	68f9      	ldr	r1, [r7, #12]
 8009258:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800925c:	4313      	orrs	r3, r2
 800925e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d11a      	bne.n	80092ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	791b      	ldrb	r3, [r3, #4]
 8009290:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009292:	430b      	orrs	r3, r1
 8009294:	4313      	orrs	r3, r2
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	0151      	lsls	r1, r2, #5
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	440a      	add	r2, r1
 800929e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
	...

080092bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	785b      	ldrb	r3, [r3, #1]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d161      	bne.n	800939c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092ee:	d11f      	bne.n	8009330 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	0151      	lsls	r1, r2, #5
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	440a      	add	r2, r1
 8009306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800930a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800930e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4413      	add	r3, r2
 8009318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	0151      	lsls	r1, r2, #5
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	440a      	add	r2, r1
 8009326:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800932a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800932e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f003 030f 	and.w	r3, r3, #15
 8009340:	2101      	movs	r1, #1
 8009342:	fa01 f303 	lsl.w	r3, r1, r3
 8009346:	b29b      	uxth	r3, r3
 8009348:	43db      	mvns	r3, r3
 800934a:	68f9      	ldr	r1, [r7, #12]
 800934c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009350:	4013      	ands	r3, r2
 8009352:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800935a:	69da      	ldr	r2, [r3, #28]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	2101      	movs	r1, #1
 8009366:	fa01 f303 	lsl.w	r3, r1, r3
 800936a:	b29b      	uxth	r3, r3
 800936c:	43db      	mvns	r3, r3
 800936e:	68f9      	ldr	r1, [r7, #12]
 8009370:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009374:	4013      	ands	r3, r2
 8009376:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	0159      	lsls	r1, r3, #5
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	440b      	add	r3, r1
 800938e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009392:	4619      	mov	r1, r3
 8009394:	4b35      	ldr	r3, [pc, #212]	@ (800946c <USB_DeactivateEndpoint+0x1b0>)
 8009396:	4013      	ands	r3, r2
 8009398:	600b      	str	r3, [r1, #0]
 800939a:	e060      	b.n	800945e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093b2:	d11f      	bne.n	80093f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	0151      	lsls	r1, r2, #5
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	440a      	add	r2, r1
 80093ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	0151      	lsls	r1, r2, #5
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	440a      	add	r2, r1
 80093ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	2101      	movs	r1, #1
 8009406:	fa01 f303 	lsl.w	r3, r1, r3
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	43db      	mvns	r3, r3
 800940e:	68f9      	ldr	r1, [r7, #12]
 8009410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009414:	4013      	ands	r3, r2
 8009416:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800941e:	69da      	ldr	r2, [r3, #28]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	f003 030f 	and.w	r3, r3, #15
 8009428:	2101      	movs	r1, #1
 800942a:	fa01 f303 	lsl.w	r3, r1, r3
 800942e:	041b      	lsls	r3, r3, #16
 8009430:	43db      	mvns	r3, r3
 8009432:	68f9      	ldr	r1, [r7, #12]
 8009434:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009438:	4013      	ands	r3, r2
 800943a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	0159      	lsls	r1, r3, #5
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	440b      	add	r3, r1
 8009452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009456:	4619      	mov	r1, r3
 8009458:	4b05      	ldr	r3, [pc, #20]	@ (8009470 <USB_DeactivateEndpoint+0x1b4>)
 800945a:	4013      	ands	r3, r2
 800945c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	ec337800 	.word	0xec337800
 8009470:	eff37800 	.word	0xeff37800

08009474 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b08a      	sub	sp, #40	@ 0x28
 8009478:	af02      	add	r7, sp, #8
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	4613      	mov	r3, r2
 8009480:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	785b      	ldrb	r3, [r3, #1]
 8009490:	2b01      	cmp	r3, #1
 8009492:	f040 817f 	bne.w	8009794 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d132      	bne.n	8009504 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80094bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80094c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094fc:	0cdb      	lsrs	r3, r3, #19
 80094fe:	04db      	lsls	r3, r3, #19
 8009500:	6113      	str	r3, [r2, #16]
 8009502:	e097      	b.n	8009634 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	69fa      	ldr	r2, [r7, #28]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800951e:	0cdb      	lsrs	r3, r3, #19
 8009520:	04db      	lsls	r3, r3, #19
 8009522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	440a      	add	r2, r1
 800953a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800953e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009542:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009546:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d11a      	bne.n	8009584 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	429a      	cmp	r2, r3
 8009558:	d903      	bls.n	8009562 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	689a      	ldr	r2, [r3, #8]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	0151      	lsls	r1, r2, #5
 8009574:	69fa      	ldr	r2, [r7, #28]
 8009576:	440a      	add	r2, r1
 8009578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800957c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009580:	6113      	str	r3, [r2, #16]
 8009582:	e044      	b.n	800960e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	691a      	ldr	r2, [r3, #16]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	4413      	add	r3, r2
 800958e:	1e5a      	subs	r2, r3, #1
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	fbb2 f3f3 	udiv	r3, r2, r3
 8009598:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a6:	691a      	ldr	r2, [r3, #16]
 80095a8:	8afb      	ldrh	r3, [r7, #22]
 80095aa:	04d9      	lsls	r1, r3, #19
 80095ac:	4ba4      	ldr	r3, [pc, #656]	@ (8009840 <USB_EPStartXfer+0x3cc>)
 80095ae:	400b      	ands	r3, r1
 80095b0:	69b9      	ldr	r1, [r7, #24]
 80095b2:	0148      	lsls	r0, r1, #5
 80095b4:	69f9      	ldr	r1, [r7, #28]
 80095b6:	4401      	add	r1, r0
 80095b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80095bc:	4313      	orrs	r3, r2
 80095be:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	791b      	ldrb	r3, [r3, #4]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d122      	bne.n	800960e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	0151      	lsls	r1, r2, #5
 80095da:	69fa      	ldr	r2, [r7, #28]
 80095dc:	440a      	add	r2, r1
 80095de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095e2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80095e6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095f4:	691a      	ldr	r2, [r3, #16]
 80095f6:	8afb      	ldrh	r3, [r7, #22]
 80095f8:	075b      	lsls	r3, r3, #29
 80095fa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80095fe:	69b9      	ldr	r1, [r7, #24]
 8009600:	0148      	lsls	r0, r1, #5
 8009602:	69f9      	ldr	r1, [r7, #28]
 8009604:	4401      	add	r1, r0
 8009606:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800960a:	4313      	orrs	r3, r2
 800960c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800961a:	691a      	ldr	r2, [r3, #16]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009624:	69b9      	ldr	r1, [r7, #24]
 8009626:	0148      	lsls	r0, r1, #5
 8009628:	69f9      	ldr	r1, [r7, #28]
 800962a:	4401      	add	r1, r0
 800962c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009630:	4313      	orrs	r3, r2
 8009632:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d14b      	bne.n	80096d2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	4413      	add	r3, r2
 800964a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800964e:	461a      	mov	r2, r3
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	791b      	ldrb	r3, [r3, #4]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d128      	bne.n	80096b0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800966a:	2b00      	cmp	r3, #0
 800966c:	d110      	bne.n	8009690 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	0151      	lsls	r1, r2, #5
 8009680:	69fa      	ldr	r2, [r7, #28]
 8009682:	440a      	add	r2, r1
 8009684:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009688:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	e00f      	b.n	80096b0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	0151      	lsls	r1, r2, #5
 80096a2:	69fa      	ldr	r2, [r7, #28]
 80096a4:	440a      	add	r2, r1
 80096a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096ae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	69fa      	ldr	r2, [r7, #28]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	e166      	b.n	80099a0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096f0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	791b      	ldrb	r3, [r3, #4]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d015      	beq.n	8009726 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 814e 	beq.w	80099a0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800970a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	f003 030f 	and.w	r3, r3, #15
 8009714:	2101      	movs	r1, #1
 8009716:	fa01 f303 	lsl.w	r3, r1, r3
 800971a:	69f9      	ldr	r1, [r7, #28]
 800971c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009720:	4313      	orrs	r3, r2
 8009722:	634b      	str	r3, [r1, #52]	@ 0x34
 8009724:	e13c      	b.n	80099a0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009732:	2b00      	cmp	r3, #0
 8009734:	d110      	bne.n	8009758 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	0151      	lsls	r1, r2, #5
 8009748:	69fa      	ldr	r2, [r7, #28]
 800974a:	440a      	add	r2, r1
 800974c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009750:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009754:	6013      	str	r3, [r2, #0]
 8009756:	e00f      	b.n	8009778 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	0151      	lsls	r1, r2, #5
 800976a:	69fa      	ldr	r2, [r7, #28]
 800976c:	440a      	add	r2, r1
 800976e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009776:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	68d9      	ldr	r1, [r3, #12]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	781a      	ldrb	r2, [r3, #0]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	b298      	uxth	r0, r3
 8009786:	79fb      	ldrb	r3, [r7, #7]
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	4603      	mov	r3, r0
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f9b9 	bl	8009b04 <USB_WritePacket>
 8009792:	e105      	b.n	80099a0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097ae:	0cdb      	lsrs	r3, r3, #19
 80097b0:	04db      	lsls	r3, r3, #19
 80097b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80097d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80097d6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d132      	bne.n	8009844 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	689a      	ldr	r2, [r3, #8]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800980c:	69b9      	ldr	r1, [r7, #24]
 800980e:	0148      	lsls	r0, r1, #5
 8009810:	69f9      	ldr	r1, [r7, #28]
 8009812:	4401      	add	r1, r0
 8009814:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009818:	4313      	orrs	r3, r2
 800981a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	4413      	add	r3, r2
 8009824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	0151      	lsls	r1, r2, #5
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	440a      	add	r2, r1
 8009832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009836:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800983a:	6113      	str	r3, [r2, #16]
 800983c:	e062      	b.n	8009904 <USB_EPStartXfer+0x490>
 800983e:	bf00      	nop
 8009840:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d123      	bne.n	8009894 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009858:	691a      	ldr	r2, [r3, #16]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009862:	69b9      	ldr	r1, [r7, #24]
 8009864:	0148      	lsls	r0, r1, #5
 8009866:	69f9      	ldr	r1, [r7, #28]
 8009868:	4401      	add	r1, r0
 800986a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800986e:	4313      	orrs	r3, r2
 8009870:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	69fa      	ldr	r2, [r7, #28]
 8009886:	440a      	add	r2, r1
 8009888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800988c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009890:	6113      	str	r3, [r2, #16]
 8009892:	e037      	b.n	8009904 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	691a      	ldr	r2, [r3, #16]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	4413      	add	r3, r2
 800989e:	1e5a      	subs	r2, r3, #1
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	8afa      	ldrh	r2, [r7, #22]
 80098b0:	fb03 f202 	mul.w	r2, r3, r2
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c4:	691a      	ldr	r2, [r3, #16]
 80098c6:	8afb      	ldrh	r3, [r7, #22]
 80098c8:	04d9      	lsls	r1, r3, #19
 80098ca:	4b38      	ldr	r3, [pc, #224]	@ (80099ac <USB_EPStartXfer+0x538>)
 80098cc:	400b      	ands	r3, r1
 80098ce:	69b9      	ldr	r1, [r7, #24]
 80098d0:	0148      	lsls	r0, r1, #5
 80098d2:	69f9      	ldr	r1, [r7, #28]
 80098d4:	4401      	add	r1, r0
 80098d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80098da:	4313      	orrs	r3, r2
 80098dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098f4:	69b9      	ldr	r1, [r7, #24]
 80098f6:	0148      	lsls	r0, r1, #5
 80098f8:	69f9      	ldr	r1, [r7, #28]
 80098fa:	4401      	add	r1, r0
 80098fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009900:	4313      	orrs	r3, r2
 8009902:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d10d      	bne.n	8009926 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d009      	beq.n	8009926 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	68d9      	ldr	r1, [r3, #12]
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009922:	460a      	mov	r2, r1
 8009924:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	791b      	ldrb	r3, [r3, #4]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d128      	bne.n	8009980 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800993a:	2b00      	cmp	r3, #0
 800993c:	d110      	bne.n	8009960 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	0151      	lsls	r1, r2, #5
 8009950:	69fa      	ldr	r2, [r7, #28]
 8009952:	440a      	add	r2, r1
 8009954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009958:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	e00f      	b.n	8009980 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	4413      	add	r3, r2
 8009968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	0151      	lsls	r1, r2, #5
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	440a      	add	r2, r1
 8009976:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800997a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800997e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	0151      	lsls	r1, r2, #5
 8009992:	69fa      	ldr	r2, [r7, #28]
 8009994:	440a      	add	r2, r1
 8009996:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800999a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800999e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3720      	adds	r7, #32
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	1ff80000 	.word	0x1ff80000

080099b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d14a      	bne.n	8009a64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099e6:	f040 8086 	bne.w	8009af6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	7812      	ldrb	r2, [r2, #0]
 80099fe:	0151      	lsls	r1, r2, #5
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	440a      	add	r2, r1
 8009a04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	7812      	ldrb	r2, [r2, #0]
 8009a22:	0151      	lsls	r1, r2, #5
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	440a      	add	r2, r1
 8009a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3301      	adds	r3, #1
 8009a36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d902      	bls.n	8009a48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	75fb      	strb	r3, [r7, #23]
          break;
 8009a46:	e056      	b.n	8009af6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a60:	d0e7      	beq.n	8009a32 <USB_EPStopXfer+0x82>
 8009a62:	e048      	b.n	8009af6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a7c:	d13b      	bne.n	8009af6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	7812      	ldrb	r2, [r2, #0]
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009aa0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	7812      	ldrb	r2, [r2, #0]
 8009ab6:	0151      	lsls	r1, r2, #5
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	440a      	add	r2, r1
 8009abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d902      	bls.n	8009adc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8009ada:	e00c      	b.n	8009af6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009af0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009af4:	d0e7      	beq.n	8009ac6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	371c      	adds	r7, #28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b089      	sub	sp, #36	@ 0x24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	4611      	mov	r1, r2
 8009b10:	461a      	mov	r2, r3
 8009b12:	460b      	mov	r3, r1
 8009b14:	71fb      	strb	r3, [r7, #7]
 8009b16:	4613      	mov	r3, r2
 8009b18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d123      	bne.n	8009b72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b2a:	88bb      	ldrh	r3, [r7, #4]
 8009b2c:	3303      	adds	r3, #3
 8009b2e:	089b      	lsrs	r3, r3, #2
 8009b30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b32:	2300      	movs	r3, #0
 8009b34:	61bb      	str	r3, [r7, #24]
 8009b36:	e018      	b.n	8009b6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b38:	79fb      	ldrb	r3, [r7, #7]
 8009b3a:	031a      	lsls	r2, r3, #12
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b44:	461a      	mov	r2, r3
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	3301      	adds	r3, #1
 8009b56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	3301      	adds	r3, #1
 8009b62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	3301      	adds	r3, #1
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d3e2      	bcc.n	8009b38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3724      	adds	r7, #36	@ 0x24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b08b      	sub	sp, #44	@ 0x2c
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b96:	88fb      	ldrh	r3, [r7, #6]
 8009b98:	089b      	lsrs	r3, r3, #2
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	623b      	str	r3, [r7, #32]
 8009baa:	e014      	b.n	8009bd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	3301      	adds	r3, #1
 8009bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bcc:	3301      	adds	r3, #1
 8009bce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	623b      	str	r3, [r7, #32]
 8009bd6:	6a3a      	ldr	r2, [r7, #32]
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d3e6      	bcc.n	8009bac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009bde:	8bfb      	ldrh	r3, [r7, #30]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d01e      	beq.n	8009c22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f107 0310 	add.w	r3, r7, #16
 8009bf4:	6812      	ldr	r2, [r2, #0]
 8009bf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	fa22 f303 	lsr.w	r3, r2, r3
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	701a      	strb	r2, [r3, #0]
      i++;
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c12:	3301      	adds	r3, #1
 8009c14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009c16:	8bfb      	ldrh	r3, [r7, #30]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c1c:	8bfb      	ldrh	r3, [r7, #30]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1ea      	bne.n	8009bf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	372c      	adds	r7, #44	@ 0x2c
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d12c      	bne.n	8009ca6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	db12      	blt.n	8009c84 <USB_EPSetStall+0x54>
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00f      	beq.n	8009c84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	0151      	lsls	r1, r2, #5
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	440a      	add	r2, r1
 8009c7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009c82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	0151      	lsls	r1, r2, #5
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	440a      	add	r2, r1
 8009c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	e02b      	b.n	8009cfe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	015a      	lsls	r2, r3, #5
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4413      	add	r3, r2
 8009cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	db12      	blt.n	8009cde <USB_EPSetStall+0xae>
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00f      	beq.n	8009cde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	015a      	lsls	r2, r3, #5
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	0151      	lsls	r1, r2, #5
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	440a      	add	r2, r1
 8009cd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009cdc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	0151      	lsls	r1, r2, #5
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	440a      	add	r2, r1
 8009cf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009cfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	785b      	ldrb	r3, [r3, #1]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d128      	bne.n	8009d7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	0151      	lsls	r1, r2, #5
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	440a      	add	r2, r1
 8009d3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	791b      	ldrb	r3, [r3, #4]
 8009d4c:	2b03      	cmp	r3, #3
 8009d4e:	d003      	beq.n	8009d58 <USB_EPClearStall+0x4c>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	791b      	ldrb	r3, [r3, #4]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d138      	bne.n	8009dca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	0151      	lsls	r1, r2, #5
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	440a      	add	r2, r1
 8009d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d76:	6013      	str	r3, [r2, #0]
 8009d78:	e027      	b.n	8009dca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	015a      	lsls	r2, r3, #5
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4413      	add	r3, r2
 8009d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	0151      	lsls	r1, r2, #5
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	440a      	add	r2, r1
 8009d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	791b      	ldrb	r3, [r3, #4]
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d003      	beq.n	8009daa <USB_EPClearStall+0x9e>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	791b      	ldrb	r3, [r3, #4]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d10f      	bne.n	8009dca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009df6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009dfa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	78fb      	ldrb	r3, [r7, #3]
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009e0c:	68f9      	ldr	r1, [r7, #12]
 8009e0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e12:	4313      	orrs	r3, r2
 8009e14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e3e:	f023 0303 	bic.w	r3, r3, #3
 8009e42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e52:	f023 0302 	bic.w	r3, r3, #2
 8009e56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e80:	f023 0303 	bic.w	r3, r3, #3
 8009e84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e94:	f043 0302 	orr.w	r3, r3, #2
 8009e98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b085      	sub	sp, #20
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eea:	69db      	ldr	r3, [r3, #28]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	4013      	ands	r3, r2
 8009ef0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	0c1b      	lsrs	r3, r3, #16
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b085      	sub	sp, #20
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f1e:	69db      	ldr	r3, [r3, #28]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	4013      	ands	r3, r2
 8009f24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	b29b      	uxth	r3, r3
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b085      	sub	sp, #20
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f46:	78fb      	ldrb	r3, [r7, #3]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	4013      	ands	r3, r2
 8009f62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f64:	68bb      	ldr	r3, [r7, #8]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b087      	sub	sp, #28
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f96:	78fb      	ldrb	r3, [r7, #3]
 8009f98:	f003 030f 	and.w	r3, r3, #15
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa2:	01db      	lsls	r3, r3, #7
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b083      	sub	sp, #12
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	f003 0301 	and.w	r3, r3, #1
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b085      	sub	sp, #20
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a004:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a008:	f023 0307 	bic.w	r3, r3, #7
 800a00c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a01c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a020:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a030:	b480      	push	{r7}
 800a032:	b087      	sub	sp, #28
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	460b      	mov	r3, r1
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	333c      	adds	r3, #60	@ 0x3c
 800a046:	3304      	adds	r3, #4
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	4a26      	ldr	r2, [pc, #152]	@ (800a0e8 <USB_EP0_OutStart+0xb8>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d90a      	bls.n	800a06a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a060:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a064:	d101      	bne.n	800a06a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	e037      	b.n	800a0da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a070:	461a      	mov	r2, r3
 800a072:	2300      	movs	r3, #0
 800a074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a084:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a098:	f043 0318 	orr.w	r3, r3, #24
 800a09c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a0b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a0b2:	7afb      	ldrb	r3, [r7, #11]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d10f      	bne.n	800a0d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0be:	461a      	mov	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a0d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	4f54300a 	.word	0x4f54300a

0800a0ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a104:	d901      	bls.n	800a10a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a106:	2303      	movs	r3, #3
 800a108:	e022      	b.n	800a150 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	daf2      	bge.n	800a0f8 <USB_CoreReset+0xc>

  count = 10U;
 800a112:	230a      	movs	r3, #10
 800a114:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a116:	e002      	b.n	800a11e <USB_CoreReset+0x32>
  {
    count--;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1f9      	bne.n	800a118 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	f043 0201 	orr.w	r2, r3, #1
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	3301      	adds	r3, #1
 800a134:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a13c:	d901      	bls.n	800a142 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e006      	b.n	800a150 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d0f0      	beq.n	800a130 <USB_CoreReset+0x44>

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af02      	add	r7, sp, #8
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	460b      	mov	r3, r1
 800a166:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 800a168:	2380      	movs	r3, #128	@ 0x80
 800a16a:	733b      	strb	r3, [r7, #12]
 800a16c:	78fb      	ldrb	r3, [r7, #3]
 800a16e:	737b      	strb	r3, [r7, #13]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800a170:	f107 010c 	add.w	r1, r7, #12
 800a174:	2300      	movs	r3, #0
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	2300      	movs	r3, #0
 800a17a:	2202      	movs	r2, #2
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fafe 	bl	800a77e <sx126x_hal_write>
 800a182:	4603      	mov	r3, r0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a19c:	d301      	bcc.n	800a1a2 <sx126x_set_tx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800a19e:	2302      	movs	r3, #2
 800a1a0:	e008      	b.n	800a1b4 <sx126x_set_tx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800a1a2:	6838      	ldr	r0, [r7, #0]
 800a1a4:	f000 fa66 	bl	800a674 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800a1a8:	60f8      	str	r0, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800a1aa:	68f9      	ldr	r1, [r7, #12]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f805 	bl	800a1bc <sx126x_set_tx_with_timeout_in_rtc_step>
 800a1b2:	4603      	mov	r3, r0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af02      	add	r7, sp, #8
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a1c6:	2383      	movs	r3, #131	@ 0x83
 800a1c8:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	0c1b      	lsrs	r3, r3, #16
 800a1ce:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a1d0:	737b      	strb	r3, [r7, #13]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	0a1b      	lsrs	r3, r3, #8
 800a1d6:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a1d8:	73bb      	strb	r3, [r7, #14]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a1de:	73fb      	strb	r3, [r7, #15]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800a1e0:	f107 010c 	add.w	r1, r7, #12
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	2204      	movs	r2, #4
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fac6 	bl	800a77e <sx126x_hal_write>
 800a1f2:	4603      	mov	r3, r0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af02      	add	r7, sp, #8
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 800a208:	2396      	movs	r3, #150	@ 0x96
 800a20a:	733b      	strb	r3, [r7, #12]
 800a20c:	78fb      	ldrb	r3, [r7, #3]
 800a20e:	737b      	strb	r3, [r7, #13]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800a210:	f107 010c 	add.w	r1, r7, #12
 800a214:	2300      	movs	r3, #0
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	2300      	movs	r3, #0
 800a21a:	2202      	movs	r2, #2
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 faae 	bl	800a77e <sx126x_hal_write>
 800a222:	4603      	mov	r3, r0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af02      	add	r7, sp, #8
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	460b      	mov	r3, r1
 800a236:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 800a238:	2389      	movs	r3, #137	@ 0x89
 800a23a:	733b      	strb	r3, [r7, #12]
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	737b      	strb	r3, [r7, #13]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800a240:	f107 010c 	add.w	r1, r7, #12
 800a244:	2300      	movs	r3, #0
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	2300      	movs	r3, #0
 800a24a:	2202      	movs	r2, #2
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fa96 	bl	800a77e <sx126x_hal_write>
 800a252:	4603      	mov	r3, r0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af02      	add	r7, sp, #8
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a266:	2395      	movs	r3, #149	@ 0x95
 800a268:	723b      	strb	r3, [r7, #8]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a26e:	727b      	strb	r3, [r7, #9]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a274:	72bb      	strb	r3, [r7, #10]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a27a:	72fb      	strb	r3, [r7, #11]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a280:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800a282:	f107 0108 	add.w	r1, r7, #8
 800a286:	2300      	movs	r3, #0
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	2300      	movs	r3, #0
 800a28c:	2205      	movs	r2, #5
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 fa75 	bl	800a77e <sx126x_hal_write>
 800a294:	4603      	mov	r3, r0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b088      	sub	sp, #32
 800a2a2:	af02      	add	r7, sp, #8
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	607a      	str	r2, [r7, #4]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	817b      	strh	r3, [r7, #10]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a2b2:	230d      	movs	r3, #13
 800a2b4:	753b      	strb	r3, [r7, #20]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a2b6:	897b      	ldrh	r3, [r7, #10]
 800a2b8:	0a1b      	lsrs	r3, r3, #8
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a2be:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a2c0:	897b      	ldrh	r3, [r7, #10]
 800a2c2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a2c4:	75bb      	strb	r3, [r7, #22]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800a2c6:	7a7b      	ldrb	r3, [r7, #9]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	f107 0114 	add.w	r1, r7, #20
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2203      	movs	r2, #3
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 fa52 	bl	800a77e <sx126x_hal_write>
 800a2da:	4603      	mov	r3, r0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af02      	add	r7, sp, #8
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	607a      	str	r2, [r7, #4]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	817b      	strh	r3, [r7, #10]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a2f8:	231d      	movs	r3, #29
 800a2fa:	753b      	strb	r3, [r7, #20]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a2fc:	897b      	ldrh	r3, [r7, #10]
 800a2fe:	0a1b      	lsrs	r3, r3, #8
 800a300:	b29b      	uxth	r3, r3
 800a302:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a304:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a306:	897b      	ldrh	r3, [r7, #10]
 800a308:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a30a:	75bb      	strb	r3, [r7, #22]
 800a30c:	2300      	movs	r3, #0
 800a30e:	75fb      	strb	r3, [r7, #23]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800a310:	7a7b      	ldrb	r3, [r7, #9]
 800a312:	b29b      	uxth	r3, r3
 800a314:	f107 0114 	add.w	r1, r7, #20
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2204      	movs	r2, #4
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 fa88 	bl	800a834 <sx126x_hal_read>
 800a324:	4603      	mov	r3, r0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b088      	sub	sp, #32
 800a332:	af02      	add	r7, sp, #8
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	461a      	mov	r2, r3
 800a33a:	460b      	mov	r3, r1
 800a33c:	72fb      	strb	r3, [r7, #11]
 800a33e:	4613      	mov	r3, r2
 800a340:	72bb      	strb	r3, [r7, #10]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 800a342:	230e      	movs	r3, #14
 800a344:	753b      	strb	r3, [r7, #20]
 800a346:	7afb      	ldrb	r3, [r7, #11]
 800a348:	757b      	strb	r3, [r7, #21]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800a34a:	7abb      	ldrb	r3, [r7, #10]
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	f107 0114 	add.w	r1, r7, #20
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 fa10 	bl	800a77e <sx126x_hal_write>
 800a35e:	4603      	mov	r3, r0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08a      	sub	sp, #40	@ 0x28
 800a36c:	af02      	add	r7, sp, #8
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	461a      	mov	r2, r3
 800a376:	4603      	mov	r3, r0
 800a378:	817b      	strh	r3, [r7, #10]
 800a37a:	460b      	mov	r3, r1
 800a37c:	813b      	strh	r3, [r7, #8]
 800a37e:	4613      	mov	r3, r2
 800a380:	80fb      	strh	r3, [r7, #6]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a382:	2308      	movs	r3, #8
 800a384:	753b      	strb	r3, [r7, #20]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a386:	897b      	ldrh	r3, [r7, #10]
 800a388:	0a1b      	lsrs	r3, r3, #8
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a38e:	757b      	strb	r3, [r7, #21]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a390:	897b      	ldrh	r3, [r7, #10]
 800a392:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a394:	75bb      	strb	r3, [r7, #22]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a396:	893b      	ldrh	r3, [r7, #8]
 800a398:	0a1b      	lsrs	r3, r3, #8
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a39e:	75fb      	strb	r3, [r7, #23]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a3a0:	893b      	ldrh	r3, [r7, #8]
 800a3a2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a3a4:	763b      	strb	r3, [r7, #24]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a3a6:	88fb      	ldrh	r3, [r7, #6]
 800a3a8:	0a1b      	lsrs	r3, r3, #8
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a3ae:	767b      	strb	r3, [r7, #25]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a3b0:	88fb      	ldrh	r3, [r7, #6]
 800a3b2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a3b4:	76bb      	strb	r3, [r7, #26]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a3b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a3b8:	0a1b      	lsrs	r3, r3, #8
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a3be:	76fb      	strb	r3, [r7, #27]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a3c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a3c2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a3c4:	773b      	strb	r3, [r7, #28]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800a3c6:	f107 0114 	add.w	r1, r7, #20
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	2209      	movs	r2, #9
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 f9d3 	bl	800a77e <sx126x_hal_write>
 800a3d8:	4603      	mov	r3, r0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3720      	adds	r7, #32
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <sx126x_set_dio3_as_tcxo_ctrl>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
}

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b088      	sub	sp, #32
 800a3e6:	af02      	add	r7, sp, #8
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	607a      	str	r2, [r7, #4]
 800a3ee:	72fb      	strb	r3, [r7, #11]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a3f0:	2397      	movs	r3, #151	@ 0x97
 800a3f2:	743b      	strb	r3, [r7, #16]
 800a3f4:	7afb      	ldrb	r3, [r7, #11]
 800a3f6:	747b      	strb	r3, [r7, #17]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	0c1b      	lsrs	r3, r3, #16
 800a3fc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a3fe:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	0a1b      	lsrs	r3, r3, #8
 800a404:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a406:	74fb      	strb	r3, [r7, #19]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a40c:	753b      	strb	r3, [r7, #20]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800a40e:	f107 0110 	add.w	r1, r7, #16
 800a412:	2300      	movs	r3, #0
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	2300      	movs	r3, #0
 800a418:	2205      	movs	r2, #5
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f000 f9af 	bl	800a77e <sx126x_hal_write>
 800a420:	4603      	mov	r3, r0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800a434:	6838      	ldr	r0, [r7, #0]
 800a436:	f000 f8f7 	bl	800a628 <sx126x_convert_freq_in_hz_to_pll_step>
 800a43a:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800a43c:	68f9      	ldr	r1, [r7, #12]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f805 	bl	800a44e <sx126x_set_rf_freq_in_pll_steps>
 800a444:	4603      	mov	r3, r0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b086      	sub	sp, #24
 800a452:	af02      	add	r7, sp, #8
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a458:	2386      	movs	r3, #134	@ 0x86
 800a45a:	723b      	strb	r3, [r7, #8]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	0e1b      	lsrs	r3, r3, #24
 800a460:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a462:	727b      	strb	r3, [r7, #9]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	0c1b      	lsrs	r3, r3, #16
 800a468:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a46a:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	0a1b      	lsrs	r3, r3, #8
 800a470:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a472:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a478:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800a47a:	f107 0108 	add.w	r1, r7, #8
 800a47e:	2300      	movs	r3, #0
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	2300      	movs	r3, #0
 800a484:	2205      	movs	r2, #5
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f979 	bl	800a77e <sx126x_hal_write>
 800a48c:	4603      	mov	r3, r0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b086      	sub	sp, #24
 800a49a:	af02      	add	r7, sp, #8
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 800a4a2:	238a      	movs	r3, #138	@ 0x8a
 800a4a4:	733b      	strb	r3, [r7, #12]
 800a4a6:	78fb      	ldrb	r3, [r7, #3]
 800a4a8:	737b      	strb	r3, [r7, #13]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800a4aa:	f107 010c 	add.w	r1, r7, #12
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f961 	bl	800a77e <sx126x_hal_write>
 800a4bc:	4603      	mov	r3, r0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b086      	sub	sp, #24
 800a4ca:	af02      	add	r7, sp, #8
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	70fb      	strb	r3, [r7, #3]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a4d6:	238e      	movs	r3, #142	@ 0x8e
 800a4d8:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 800a4da:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a4dc:	737b      	strb	r3, [r7, #13]
 800a4de:	78bb      	ldrb	r3, [r7, #2]
 800a4e0:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800a4e2:	f107 010c 	add.w	r1, r7, #12
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f945 	bl	800a77e <sx126x_hal_write>
 800a4f4:	4603      	mov	r3, r0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b086      	sub	sp, #24
 800a502:	af02      	add	r7, sp, #8
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a508:	238b      	movs	r3, #139	@ 0x8b
 800a50a:	723b      	strb	r3, [r7, #8]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a510:	727b      	strb	r3, [r7, #9]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a516:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a51c:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	78db      	ldrb	r3, [r3, #3]
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a528:	733b      	strb	r3, [r7, #12]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800a52a:	f107 0108 	add.w	r1, r7, #8
 800a52e:	2300      	movs	r3, #0
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	2300      	movs	r3, #0
 800a534:	2205      	movs	r2, #5
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f921 	bl	800a77e <sx126x_hal_write>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d108      	bne.n	800a558 <sx126x_set_lora_mod_params+0x5a>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	785b      	ldrb	r3, [r3, #1]
 800a54a:	461a      	mov	r2, r3
 800a54c:	2101      	movs	r1, #1
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f8d8 	bl	800a704 <sx126x_tx_modulation_workaround>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]
        // WORKAROUND END
    }

    return status;
 800a558:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b088      	sub	sp, #32
 800a566:	af02      	add	r7, sp, #8
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a56c:	238c      	movs	r3, #140	@ 0x8c
 800a56e:	743b      	strb	r3, [r7, #16]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	0a1b      	lsrs	r3, r3, #8
 800a576:	b29b      	uxth	r3, r3
 800a578:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a57a:	747b      	strb	r3, [r7, #17]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	881b      	ldrh	r3, [r3, #0]
 800a580:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a582:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( params->header_type ),
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a588:	74fb      	strb	r3, [r7, #19]
        params->pld_len_in_bytes,
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a58e:	753b      	strb	r3, [r7, #20]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	791b      	ldrb	r3, [r3, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <sx126x_set_lora_pkt_params+0x3a>
 800a598:	2301      	movs	r3, #1
 800a59a:	e000      	b.n	800a59e <sx126x_set_lora_pkt_params+0x3c>
 800a59c:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a59e:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	795b      	ldrb	r3, [r3, #5]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <sx126x_set_lora_pkt_params+0x4a>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e000      	b.n	800a5ae <sx126x_set_lora_pkt_params+0x4c>
 800a5ac:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a5ae:	75bb      	strb	r3, [r7, #22]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800a5b0:	f107 0110 	add.w	r1, r7, #16
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	2207      	movs	r2, #7
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f8de 	bl	800a77e <sx126x_hal_write>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d127      	bne.n	800a61c <sx126x_set_lora_pkt_params+0xba>
    {
        uint8_t reg_value = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800a5d0:	f107 020f 	add.w	r2, r7, #15
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	f240 7136 	movw	r1, #1846	@ 0x736
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff fe82 	bl	800a2e4 <sx126x_read_register>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d118      	bne.n	800a61c <sx126x_set_lora_pkt_params+0xba>
        {
            if( params->invert_iq_is_on == true )
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	795b      	ldrb	r3, [r3, #5]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d005      	beq.n	800a5fe <sx126x_set_lora_pkt_params+0x9c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	f023 0304 	bic.w	r3, r3, #4
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	73fb      	strb	r3, [r7, #15]
 800a5fc:	e004      	b.n	800a608 <sx126x_set_lora_pkt_params+0xa6>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
 800a600:	f043 0304 	orr.w	r3, r3, #4
 800a604:	b2db      	uxtb	r3, r3
 800a606:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800a608:	f107 020f 	add.w	r2, r7, #15
 800a60c:	2301      	movs	r3, #1
 800a60e:	f240 7136 	movw	r1, #1846	@ 0x736
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff fe43 	bl	800a29e <sx126x_write_register>
 800a618:	4603      	mov	r3, r0
 800a61a:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a0f      	ldr	r2, [pc, #60]	@ (800a670 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a634:	fba2 2303 	umull	r2, r3, r2, r3
 800a638:	0b1b      	lsrs	r3, r3, #12
 800a63a:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f643 5209 	movw	r2, #15625	@ 0x3d09
 800a642:	fb02 f303 	mul.w	r3, r2, r3
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	039b      	lsls	r3, r3, #14
 800a654:	f503 53f4 	add.w	r3, r3, #7808	@ 0x1e80
 800a658:	3304      	adds	r3, #4
 800a65a:	4905      	ldr	r1, [pc, #20]	@ (800a670 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a65c:	fba1 1303 	umull	r1, r3, r1, r3
 800a660:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a662:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	431bde83 	.word	0x431bde83

0800a674 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	019b      	lsls	r3, r3, #6
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	70fb      	strb	r3, [r7, #3]
    uint8_t buffer[2] = { 0x00 };
 800a698:	2300      	movs	r3, #0
 800a69a:	81bb      	strh	r3, [r7, #12]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800a69c:	f107 020c 	add.w	r2, r7, #12
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7ff fe1c 	bl	800a2e4 <sx126x_read_register>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d121      	bne.n	800a6fa <sx126x_set_lora_sync_word+0x6e>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 800a6b6:	7b3b      	ldrb	r3, [r7, #12]
 800a6b8:	b25b      	sxtb	r3, r3
 800a6ba:	f003 030f 	and.w	r3, r3, #15
 800a6be:	b25a      	sxtb	r2, r3
 800a6c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6c4:	f023 030f 	bic.w	r3, r3, #15
 800a6c8:	b25b      	sxtb	r3, r3
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	b25b      	sxtb	r3, r3
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	733b      	strb	r3, [r7, #12]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 800a6d2:	7b7b      	ldrb	r3, [r7, #13]
 800a6d4:	f003 030f 	and.w	r3, r3, #15
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	011b      	lsls	r3, r3, #4
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	4413      	add	r3, r2
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	737b      	strb	r3, [r7, #13]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800a6e6:	f107 020c 	add.w	r2, r7, #12
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7ff fdd4 	bl	800a29e <sx126x_write_register>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	70fb      	strb	r3, [r7, #3]
 800a710:	4613      	mov	r3, r2
 800a712:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_value = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	73bb      	strb	r3, [r7, #14]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800a718:	f107 020e 	add.w	r2, r7, #14
 800a71c:	2301      	movs	r3, #1
 800a71e:	f640 0189 	movw	r1, #2185	@ 0x889
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff fdde 	bl	800a2e4 <sx126x_read_register>
 800a728:	4603      	mov	r3, r0
 800a72a:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d120      	bne.n	800a774 <sx126x_tx_modulation_workaround+0x70>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800a732:	78fb      	ldrb	r3, [r7, #3]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d10e      	bne.n	800a756 <sx126x_tx_modulation_workaround+0x52>
        {
            if( bw == SX126X_LORA_BW_500 )
 800a738:	78bb      	ldrb	r3, [r7, #2]
 800a73a:	2b06      	cmp	r3, #6
 800a73c:	d105      	bne.n	800a74a <sx126x_tx_modulation_workaround+0x46>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800a73e:	7bbb      	ldrb	r3, [r7, #14]
 800a740:	f023 0304 	bic.w	r3, r3, #4
 800a744:	b2db      	uxtb	r3, r3
 800a746:	73bb      	strb	r3, [r7, #14]
 800a748:	e00a      	b.n	800a760 <sx126x_tx_modulation_workaround+0x5c>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	f043 0304 	orr.w	r3, r3, #4
 800a750:	b2db      	uxtb	r3, r3
 800a752:	73bb      	strb	r3, [r7, #14]
 800a754:	e004      	b.n	800a760 <sx126x_tx_modulation_workaround+0x5c>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 800a756:	7bbb      	ldrb	r3, [r7, #14]
 800a758:	f043 0304 	orr.w	r3, r3, #4
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	73bb      	strb	r3, [r7, #14]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800a760:	f107 020e 	add.w	r2, r7, #14
 800a764:	2301      	movs	r3, #1
 800a766:	f640 0189 	movw	r1, #2185	@ 0x889
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff fd97 	bl	800a29e <sx126x_write_register>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 800a774:	7bfb      	ldrb	r3, [r7, #15]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <sx126x_hal_write>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_write(const void *context,
		const uint8_t *command, const uint16_t command_length,
		const uint8_t *data, const uint16_t data_length) {
 800a77e:	b580      	push	{r7, lr}
 800a780:	b086      	sub	sp, #24
 800a782:	af00      	add	r7, sp, #0
 800a784:	60f8      	str	r0, [r7, #12]
 800a786:	60b9      	str	r1, [r7, #8]
 800a788:	603b      	str	r3, [r7, #0]
 800a78a:	4613      	mov	r3, r2
 800a78c:	80fb      	strh	r3, [r7, #6]
	// Cast context
	sx126x_context *ctx = (sx126x_context*) context;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	617b      	str	r3, [r7, #20]

	//Poll the tranmsitters busy pin (active high)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800a792:	bf00      	nop
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	899b      	ldrh	r3, [r3, #12]
 800a79c:	4619      	mov	r1, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7f9 ff0c 	bl	80045bc <HAL_GPIO_ReadPin>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d0f4      	beq.n	800a794 <sx126x_hal_write+0x16>
	}

	// Activate chip select (active low)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	889b      	ldrh	r3, [r3, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	f7f9 ff19 	bl	80045ec <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	6998      	ldr	r0, [r3, #24]
 800a7be:	88fa      	ldrh	r2, [r7, #6]
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c4:	68b9      	ldr	r1, [r7, #8]
 800a7c6:	f7fb fe9e 	bl	8006506 <HAL_SPI_Transmit>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d009      	beq.n	800a7e4 <sx126x_hal_write+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	6818      	ldr	r0, [r3, #0]
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	889b      	ldrh	r3, [r3, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	4619      	mov	r1, r3
 800a7dc:	f7f9 ff06 	bl	80045ec <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e023      	b.n	800a82c <sx126x_hal_write+0xae>
	}

	// Transmit data
	if (data != NULL && data_length > 0) {
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d017      	beq.n	800a81a <sx126x_hal_write+0x9c>
 800a7ea:	8c3b      	ldrh	r3, [r7, #32]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d014      	beq.n	800a81a <sx126x_hal_write+0x9c>
		if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) data, data_length,
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	6998      	ldr	r0, [r3, #24]
 800a7f4:	8c3a      	ldrh	r2, [r7, #32]
 800a7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	f7fb fe83 	bl	8006506 <HAL_SPI_Transmit>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d009      	beq.n	800a81a <sx126x_hal_write+0x9c>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	6818      	ldr	r0, [r3, #0]
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	889b      	ldrh	r3, [r3, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	4619      	mov	r1, r3
 800a812:	f7f9 feeb 	bl	80045ec <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800a816:	2303      	movs	r3, #3
 800a818:	e008      	b.n	800a82c <sx126x_hal_write+0xae>
		}
	}

	// Deactivate chip select
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	889b      	ldrh	r3, [r3, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	4619      	mov	r1, r3
 800a826:	f7f9 fee1 	bl	80045ec <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800a82a:	2300      	movs	r3, #0

}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <sx126x_hal_read>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read(const void *context, const uint8_t *command,
		const uint16_t command_length, uint8_t *data,
		const uint16_t data_length) {
 800a834:	b580      	push	{r7, lr}
 800a836:	b088      	sub	sp, #32
 800a838:	af02      	add	r7, sp, #8
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	603b      	str	r3, [r7, #0]
 800a840:	4613      	mov	r3, r2
 800a842:	80fb      	strh	r3, [r7, #6]

	// Cast context to the struct type
	sx126x_context *ctx = (sx126x_context*) context;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	617b      	str	r3, [r7, #20]

	// Activate chip select (active low)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800a848:	bf00      	nop
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	899b      	ldrh	r3, [r3, #12]
 800a852:	4619      	mov	r1, r3
 800a854:	4610      	mov	r0, r2
 800a856:	f7f9 feb1 	bl	80045bc <HAL_GPIO_ReadPin>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d0f4      	beq.n	800a84a <sx126x_hal_read+0x16>
	}

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	6818      	ldr	r0, [r3, #0]
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	889b      	ldrh	r3, [r3, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	4619      	mov	r1, r3
 800a86c:	f7f9 febe 	bl	80045ec <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	6998      	ldr	r0, [r3, #24]
 800a874:	88fa      	ldrh	r2, [r7, #6]
 800a876:	f04f 33ff 	mov.w	r3, #4294967295
 800a87a:	68b9      	ldr	r1, [r7, #8]
 800a87c:	f7fb fe43 	bl	8006506 <HAL_SPI_Transmit>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d009      	beq.n	800a89a <sx126x_hal_read+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	889b      	ldrh	r3, [r3, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	4619      	mov	r1, r3
 800a892:	f7f9 feab 	bl	80045ec <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800a896:	2303      	movs	r3, #3
 800a898:	e028      	b.n	800a8ec <sx126x_hal_read+0xb8>
	}

	// Receive data
	if (data != NULL && data_length > 0) {
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d01c      	beq.n	800a8da <sx126x_hal_read+0xa6>
 800a8a0:	8c3b      	ldrh	r3, [r7, #32]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d019      	beq.n	800a8da <sx126x_hal_read+0xa6>
		uint8_t dummy_byte = SX126X_NOP;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	74fb      	strb	r3, [r7, #19]
		if (HAL_SPI_TransmitReceive(ctx->hspi, &dummy_byte, data, data_length,
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	6998      	ldr	r0, [r3, #24]
 800a8ae:	8c3b      	ldrh	r3, [r7, #32]
 800a8b0:	f107 0113 	add.w	r1, r7, #19
 800a8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b8:	9200      	str	r2, [sp, #0]
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	f7fb ff67 	bl	800678e <HAL_SPI_TransmitReceive>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d009      	beq.n	800a8da <sx126x_hal_read+0xa6>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	6818      	ldr	r0, [r3, #0]
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	889b      	ldrh	r3, [r3, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f7f9 fe8b 	bl	80045ec <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e008      	b.n	800a8ec <sx126x_hal_read+0xb8>
		}
	}

	// Deactivate chip select (active high)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	6818      	ldr	r0, [r3, #0]
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	889b      	ldrh	r3, [r3, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	f7f9 fe81 	bl	80045ec <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3718      	adds	r7, #24
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <sx126x_hal_reset>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_reset(const void *context) {
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	60fb      	str	r3, [r7, #12]

	HAL_Delay(10U);
 800a900:	200a      	movs	r0, #10
 800a902:	f7f9 f881 	bl	8003a08 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_RESET);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6918      	ldr	r0, [r3, #16]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	8a9b      	ldrh	r3, [r3, #20]
 800a90e:	2200      	movs	r2, #0
 800a910:	4619      	mov	r1, r3
 800a912:	f7f9 fe6b 	bl	80045ec <HAL_GPIO_WritePin>
	HAL_Delay(20U);
 800a916:	2014      	movs	r0, #20
 800a918:	f7f9 f876 	bl	8003a08 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_SET);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6918      	ldr	r0, [r3, #16]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	8a9b      	ldrh	r3, [r3, #20]
 800a924:	2201      	movs	r2, #1
 800a926:	4619      	mov	r1, r3
 800a928:	f7f9 fe60 	bl	80045ec <HAL_GPIO_WritePin>
	HAL_Delay(10U);
 800a92c:	200a      	movs	r0, #10
 800a92e:	f7f9 f86b 	bl	8003a08 <HAL_Delay>

	return SX126X_HAL_STATUS_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <sx126x_hal_wakeup>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_wakeup(const void *context) {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6818      	ldr	r0, [r3, #0]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	889b      	ldrh	r3, [r3, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	4619      	mov	r1, r3
 800a954:	f7f9 fe4a 	bl	80045ec <HAL_GPIO_WritePin>

	uint8_t nop_cmd = 0x00;
 800a958:	2300      	movs	r3, #0
 800a95a:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(ctx->hspi, &nop_cmd, 1, HAL_MAX_DELAY);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6998      	ldr	r0, [r3, #24]
 800a960:	f107 010b 	add.w	r1, r7, #11
 800a964:	f04f 33ff 	mov.w	r3, #4294967295
 800a968:	2201      	movs	r2, #1
 800a96a:	f7fb fdcc 	bl	8006506 <HAL_SPI_Transmit>

	HAL_Delay(3500);
 800a96e:	f640 50ac 	movw	r0, #3500	@ 0xdac
 800a972:	f7f9 f849 	bl	8003a08 <HAL_Delay>

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	889b      	ldrh	r3, [r3, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	4619      	mov	r1, r3
 800a982:	f7f9 fe33 	bl	80045ec <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a99c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a9a0:	f002 fcf8 	bl	800d394 <USBD_static_malloc>
 800a9a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d109      	bne.n	800a9c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	32b0      	adds	r2, #176	@ 0xb0
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	e0d4      	b.n	800ab6a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a9c0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f004 fdf1 	bl	800f5ae <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	32b0      	adds	r2, #176	@ 0xb0
 800a9d6:	68f9      	ldr	r1, [r7, #12]
 800a9d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	32b0      	adds	r2, #176	@ 0xb0
 800a9e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	7c1b      	ldrb	r3, [r3, #16]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d138      	bne.n	800aa6a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a9f8:	4b5e      	ldr	r3, [pc, #376]	@ (800ab74 <USBD_CDC_Init+0x1e4>)
 800a9fa:	7819      	ldrb	r1, [r3, #0]
 800a9fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa00:	2202      	movs	r2, #2
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f002 fba3 	bl	800d14e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa08:	4b5a      	ldr	r3, [pc, #360]	@ (800ab74 <USBD_CDC_Init+0x1e4>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	f003 020f 	and.w	r2, r3, #15
 800aa10:	6879      	ldr	r1, [r7, #4]
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	440b      	add	r3, r1
 800aa1c:	3323      	adds	r3, #35	@ 0x23
 800aa1e:	2201      	movs	r2, #1
 800aa20:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa22:	4b55      	ldr	r3, [pc, #340]	@ (800ab78 <USBD_CDC_Init+0x1e8>)
 800aa24:	7819      	ldrb	r1, [r3, #0]
 800aa26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f002 fb8e 	bl	800d14e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aa32:	4b51      	ldr	r3, [pc, #324]	@ (800ab78 <USBD_CDC_Init+0x1e8>)
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	f003 020f 	and.w	r2, r3, #15
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	440b      	add	r3, r1
 800aa46:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aa4e:	4b4b      	ldr	r3, [pc, #300]	@ (800ab7c <USBD_CDC_Init+0x1ec>)
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	f003 020f 	and.w	r2, r3, #15
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	440b      	add	r3, r1
 800aa62:	331c      	adds	r3, #28
 800aa64:	2210      	movs	r2, #16
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	e035      	b.n	800aad6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa6a:	4b42      	ldr	r3, [pc, #264]	@ (800ab74 <USBD_CDC_Init+0x1e4>)
 800aa6c:	7819      	ldrb	r1, [r3, #0]
 800aa6e:	2340      	movs	r3, #64	@ 0x40
 800aa70:	2202      	movs	r2, #2
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f002 fb6b 	bl	800d14e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa78:	4b3e      	ldr	r3, [pc, #248]	@ (800ab74 <USBD_CDC_Init+0x1e4>)
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	f003 020f 	and.w	r2, r3, #15
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	4613      	mov	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	440b      	add	r3, r1
 800aa8c:	3323      	adds	r3, #35	@ 0x23
 800aa8e:	2201      	movs	r2, #1
 800aa90:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa92:	4b39      	ldr	r3, [pc, #228]	@ (800ab78 <USBD_CDC_Init+0x1e8>)
 800aa94:	7819      	ldrb	r1, [r3, #0]
 800aa96:	2340      	movs	r3, #64	@ 0x40
 800aa98:	2202      	movs	r2, #2
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f002 fb57 	bl	800d14e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aaa0:	4b35      	ldr	r3, [pc, #212]	@ (800ab78 <USBD_CDC_Init+0x1e8>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	f003 020f 	and.w	r2, r3, #15
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	440b      	add	r3, r1
 800aab4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800aab8:	2201      	movs	r2, #1
 800aaba:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aabc:	4b2f      	ldr	r3, [pc, #188]	@ (800ab7c <USBD_CDC_Init+0x1ec>)
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	f003 020f 	and.w	r2, r3, #15
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	440b      	add	r3, r1
 800aad0:	331c      	adds	r3, #28
 800aad2:	2210      	movs	r2, #16
 800aad4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aad6:	4b29      	ldr	r3, [pc, #164]	@ (800ab7c <USBD_CDC_Init+0x1ec>)
 800aad8:	7819      	ldrb	r1, [r3, #0]
 800aada:	2308      	movs	r3, #8
 800aadc:	2203      	movs	r2, #3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f002 fb35 	bl	800d14e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aae4:	4b25      	ldr	r3, [pc, #148]	@ (800ab7c <USBD_CDC_Init+0x1ec>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	f003 020f 	and.w	r2, r3, #15
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	440b      	add	r3, r1
 800aaf8:	3323      	adds	r3, #35	@ 0x23
 800aafa:	2201      	movs	r2, #1
 800aafc:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	33b0      	adds	r3, #176	@ 0xb0
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4413      	add	r3, r2
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ab34:	2302      	movs	r3, #2
 800ab36:	e018      	b.n	800ab6a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	7c1b      	ldrb	r3, [r3, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab40:	4b0d      	ldr	r3, [pc, #52]	@ (800ab78 <USBD_CDC_Init+0x1e8>)
 800ab42:	7819      	ldrb	r1, [r3, #0]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f002 fbec 	bl	800d32c <USBD_LL_PrepareReceive>
 800ab54:	e008      	b.n	800ab68 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab56:	4b08      	ldr	r3, [pc, #32]	@ (800ab78 <USBD_CDC_Init+0x1e8>)
 800ab58:	7819      	ldrb	r1, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab60:	2340      	movs	r3, #64	@ 0x40
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f002 fbe2 	bl	800d32c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	2000009f 	.word	0x2000009f
 800ab78:	200000a0 	.word	0x200000a0
 800ab7c:	200000a1 	.word	0x200000a1

0800ab80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ab8c:	4b3a      	ldr	r3, [pc, #232]	@ (800ac78 <USBD_CDC_DeInit+0xf8>)
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f002 fb01 	bl	800d19a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ab98:	4b37      	ldr	r3, [pc, #220]	@ (800ac78 <USBD_CDC_DeInit+0xf8>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	f003 020f 	and.w	r2, r3, #15
 800aba0:	6879      	ldr	r1, [r7, #4]
 800aba2:	4613      	mov	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	440b      	add	r3, r1
 800abac:	3323      	adds	r3, #35	@ 0x23
 800abae:	2200      	movs	r2, #0
 800abb0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800abb2:	4b32      	ldr	r3, [pc, #200]	@ (800ac7c <USBD_CDC_DeInit+0xfc>)
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f002 faee 	bl	800d19a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800abbe:	4b2f      	ldr	r3, [pc, #188]	@ (800ac7c <USBD_CDC_DeInit+0xfc>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	f003 020f 	and.w	r2, r3, #15
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	4613      	mov	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	440b      	add	r3, r1
 800abd2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800abd6:	2200      	movs	r2, #0
 800abd8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800abda:	4b29      	ldr	r3, [pc, #164]	@ (800ac80 <USBD_CDC_DeInit+0x100>)
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f002 fada 	bl	800d19a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800abe6:	4b26      	ldr	r3, [pc, #152]	@ (800ac80 <USBD_CDC_DeInit+0x100>)
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	f003 020f 	and.w	r2, r3, #15
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	440b      	add	r3, r1
 800abfa:	3323      	adds	r3, #35	@ 0x23
 800abfc:	2200      	movs	r2, #0
 800abfe:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ac00:	4b1f      	ldr	r3, [pc, #124]	@ (800ac80 <USBD_CDC_DeInit+0x100>)
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	f003 020f 	and.w	r2, r3, #15
 800ac08:	6879      	ldr	r1, [r7, #4]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	440b      	add	r3, r1
 800ac14:	331c      	adds	r3, #28
 800ac16:	2200      	movs	r2, #0
 800ac18:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	32b0      	adds	r2, #176	@ 0xb0
 800ac24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01f      	beq.n	800ac6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	33b0      	adds	r3, #176	@ 0xb0
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	32b0      	adds	r2, #176	@ 0xb0
 800ac4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f002 fbae 	bl	800d3b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	32b0      	adds	r2, #176	@ 0xb0
 800ac5e:	2100      	movs	r1, #0
 800ac60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	2000009f 	.word	0x2000009f
 800ac7c:	200000a0 	.word	0x200000a0
 800ac80:	200000a1 	.word	0x200000a1

0800ac84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	32b0      	adds	r2, #176	@ 0xb0
 800ac98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e0bf      	b.n	800ae34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d050      	beq.n	800ad62 <USBD_CDC_Setup+0xde>
 800acc0:	2b20      	cmp	r3, #32
 800acc2:	f040 80af 	bne.w	800ae24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	88db      	ldrh	r3, [r3, #6]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d03a      	beq.n	800ad44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	b25b      	sxtb	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	da1b      	bge.n	800ad10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	33b0      	adds	r3, #176	@ 0xb0
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800acee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	88d2      	ldrh	r2, [r2, #6]
 800acf4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	88db      	ldrh	r3, [r3, #6]
 800acfa:	2b07      	cmp	r3, #7
 800acfc:	bf28      	it	cs
 800acfe:	2307      	movcs	r3, #7
 800ad00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	89fa      	ldrh	r2, [r7, #14]
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 fda9 	bl	800c860 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ad0e:	e090      	b.n	800ae32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	785a      	ldrb	r2, [r3, #1]
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	88db      	ldrh	r3, [r3, #6]
 800ad1e:	2b3f      	cmp	r3, #63	@ 0x3f
 800ad20:	d803      	bhi.n	800ad2a <USBD_CDC_Setup+0xa6>
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	88db      	ldrh	r3, [r3, #6]
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	e000      	b.n	800ad2c <USBD_CDC_Setup+0xa8>
 800ad2a:	2240      	movs	r2, #64	@ 0x40
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ad32:	6939      	ldr	r1, [r7, #16]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f001 fdbe 	bl	800c8be <USBD_CtlPrepareRx>
      break;
 800ad42:	e076      	b.n	800ae32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	33b0      	adds	r3, #176	@ 0xb0
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	7850      	ldrb	r0, [r2, #1]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	4798      	blx	r3
      break;
 800ad60:	e067      	b.n	800ae32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	785b      	ldrb	r3, [r3, #1]
 800ad66:	2b0b      	cmp	r3, #11
 800ad68:	d851      	bhi.n	800ae0e <USBD_CDC_Setup+0x18a>
 800ad6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad70 <USBD_CDC_Setup+0xec>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800ada1 	.word	0x0800ada1
 800ad74:	0800ae1d 	.word	0x0800ae1d
 800ad78:	0800ae0f 	.word	0x0800ae0f
 800ad7c:	0800ae0f 	.word	0x0800ae0f
 800ad80:	0800ae0f 	.word	0x0800ae0f
 800ad84:	0800ae0f 	.word	0x0800ae0f
 800ad88:	0800ae0f 	.word	0x0800ae0f
 800ad8c:	0800ae0f 	.word	0x0800ae0f
 800ad90:	0800ae0f 	.word	0x0800ae0f
 800ad94:	0800ae0f 	.word	0x0800ae0f
 800ad98:	0800adcb 	.word	0x0800adcb
 800ad9c:	0800adf5 	.word	0x0800adf5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b03      	cmp	r3, #3
 800adaa:	d107      	bne.n	800adbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800adac:	f107 030a 	add.w	r3, r7, #10
 800adb0:	2202      	movs	r2, #2
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 fd53 	bl	800c860 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800adba:	e032      	b.n	800ae22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f001 fcd1 	bl	800c766 <USBD_CtlError>
            ret = USBD_FAIL;
 800adc4:	2303      	movs	r3, #3
 800adc6:	75fb      	strb	r3, [r7, #23]
          break;
 800adc8:	e02b      	b.n	800ae22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b03      	cmp	r3, #3
 800add4:	d107      	bne.n	800ade6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800add6:	f107 030d 	add.w	r3, r7, #13
 800adda:	2201      	movs	r2, #1
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f001 fd3e 	bl	800c860 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ade4:	e01d      	b.n	800ae22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 fcbc 	bl	800c766 <USBD_CtlError>
            ret = USBD_FAIL;
 800adee:	2303      	movs	r3, #3
 800adf0:	75fb      	strb	r3, [r7, #23]
          break;
 800adf2:	e016      	b.n	800ae22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d00f      	beq.n	800ae20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f001 fcaf 	bl	800c766 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae0c:	e008      	b.n	800ae20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f001 fca8 	bl	800c766 <USBD_CtlError>
          ret = USBD_FAIL;
 800ae16:	2303      	movs	r3, #3
 800ae18:	75fb      	strb	r3, [r7, #23]
          break;
 800ae1a:	e002      	b.n	800ae22 <USBD_CDC_Setup+0x19e>
          break;
 800ae1c:	bf00      	nop
 800ae1e:	e008      	b.n	800ae32 <USBD_CDC_Setup+0x1ae>
          break;
 800ae20:	bf00      	nop
      }
      break;
 800ae22:	e006      	b.n	800ae32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f001 fc9d 	bl	800c766 <USBD_CtlError>
      ret = USBD_FAIL;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae30:	bf00      	nop
  }

  return (uint8_t)ret;
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	32b0      	adds	r2, #176	@ 0xb0
 800ae5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e065      	b.n	800af32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	32b0      	adds	r2, #176	@ 0xb0
 800ae70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ae76:	78fb      	ldrb	r3, [r7, #3]
 800ae78:	f003 020f 	and.w	r2, r3, #15
 800ae7c:	6879      	ldr	r1, [r7, #4]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	440b      	add	r3, r1
 800ae88:	3314      	adds	r3, #20
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d02f      	beq.n	800aef0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	f003 020f 	and.w	r2, r3, #15
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	440b      	add	r3, r1
 800aea2:	3314      	adds	r3, #20
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	78fb      	ldrb	r3, [r7, #3]
 800aea8:	f003 010f 	and.w	r1, r3, #15
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	00db      	lsls	r3, r3, #3
 800aeb2:	440b      	add	r3, r1
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4403      	add	r3, r0
 800aeb8:	331c      	adds	r3, #28
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	fbb2 f1f3 	udiv	r1, r2, r3
 800aec0:	fb01 f303 	mul.w	r3, r1, r3
 800aec4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d112      	bne.n	800aef0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aeca:	78fb      	ldrb	r3, [r7, #3]
 800aecc:	f003 020f 	and.w	r2, r3, #15
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	4613      	mov	r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	440b      	add	r3, r1
 800aedc:	3314      	adds	r3, #20
 800aede:	2200      	movs	r2, #0
 800aee0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aee2:	78f9      	ldrb	r1, [r7, #3]
 800aee4:	2300      	movs	r3, #0
 800aee6:	2200      	movs	r2, #0
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f002 f9fe 	bl	800d2ea <USBD_LL_Transmit>
 800aeee:	e01f      	b.n	800af30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	33b0      	adds	r3, #176	@ 0xb0
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d010      	beq.n	800af30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	33b0      	adds	r3, #176	@ 0xb0
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800af2c:	78fa      	ldrb	r2, [r7, #3]
 800af2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b084      	sub	sp, #16
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	460b      	mov	r3, r1
 800af44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	32b0      	adds	r2, #176	@ 0xb0
 800af50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	32b0      	adds	r2, #176	@ 0xb0
 800af60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800af68:	2303      	movs	r3, #3
 800af6a:	e01a      	b.n	800afa2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800af6c:	78fb      	ldrb	r3, [r7, #3]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f002 f9fc 	bl	800d36e <USBD_LL_GetRxDataSize>
 800af76:	4602      	mov	r2, r0
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	33b0      	adds	r3, #176	@ 0xb0
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800af9c:	4611      	mov	r1, r2
 800af9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b084      	sub	sp, #16
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	32b0      	adds	r2, #176	@ 0xb0
 800afbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800afc8:	2303      	movs	r3, #3
 800afca:	e024      	b.n	800b016 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	33b0      	adds	r3, #176	@ 0xb0
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d019      	beq.n	800b014 <USBD_CDC_EP0_RxReady+0x6a>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800afe6:	2bff      	cmp	r3, #255	@ 0xff
 800afe8:	d014      	beq.n	800b014 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	33b0      	adds	r3, #176	@ 0xb0
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b002:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b00a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	22ff      	movs	r2, #255	@ 0xff
 800b010:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b028:	2182      	movs	r1, #130	@ 0x82
 800b02a:	4818      	ldr	r0, [pc, #96]	@ (800b08c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b02c:	f000 fd62 	bl	800baf4 <USBD_GetEpDesc>
 800b030:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b032:	2101      	movs	r1, #1
 800b034:	4815      	ldr	r0, [pc, #84]	@ (800b08c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b036:	f000 fd5d 	bl	800baf4 <USBD_GetEpDesc>
 800b03a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b03c:	2181      	movs	r1, #129	@ 0x81
 800b03e:	4813      	ldr	r0, [pc, #76]	@ (800b08c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b040:	f000 fd58 	bl	800baf4 <USBD_GetEpDesc>
 800b044:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	2210      	movs	r2, #16
 800b050:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d006      	beq.n	800b066 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b060:	711a      	strb	r2, [r3, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d006      	beq.n	800b07a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b074:	711a      	strb	r2, [r3, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2243      	movs	r2, #67	@ 0x43
 800b07e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b080:	4b02      	ldr	r3, [pc, #8]	@ (800b08c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b082:	4618      	mov	r0, r3
 800b084:	3718      	adds	r7, #24
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	2000005c 	.word	0x2000005c

0800b090 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b098:	2182      	movs	r1, #130	@ 0x82
 800b09a:	4818      	ldr	r0, [pc, #96]	@ (800b0fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b09c:	f000 fd2a 	bl	800baf4 <USBD_GetEpDesc>
 800b0a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	4815      	ldr	r0, [pc, #84]	@ (800b0fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0a6:	f000 fd25 	bl	800baf4 <USBD_GetEpDesc>
 800b0aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0ac:	2181      	movs	r1, #129	@ 0x81
 800b0ae:	4813      	ldr	r0, [pc, #76]	@ (800b0fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0b0:	f000 fd20 	bl	800baf4 <USBD_GetEpDesc>
 800b0b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2210      	movs	r2, #16
 800b0c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d006      	beq.n	800b0d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	711a      	strb	r2, [r3, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f042 0202 	orr.w	r2, r2, #2
 800b0d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d006      	beq.n	800b0ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	711a      	strb	r2, [r3, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f042 0202 	orr.w	r2, r2, #2
 800b0e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2243      	movs	r2, #67	@ 0x43
 800b0ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0f0:	4b02      	ldr	r3, [pc, #8]	@ (800b0fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	2000005c 	.word	0x2000005c

0800b100 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b108:	2182      	movs	r1, #130	@ 0x82
 800b10a:	4818      	ldr	r0, [pc, #96]	@ (800b16c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b10c:	f000 fcf2 	bl	800baf4 <USBD_GetEpDesc>
 800b110:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b112:	2101      	movs	r1, #1
 800b114:	4815      	ldr	r0, [pc, #84]	@ (800b16c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b116:	f000 fced 	bl	800baf4 <USBD_GetEpDesc>
 800b11a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b11c:	2181      	movs	r1, #129	@ 0x81
 800b11e:	4813      	ldr	r0, [pc, #76]	@ (800b16c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b120:	f000 fce8 	bl	800baf4 <USBD_GetEpDesc>
 800b124:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	2210      	movs	r2, #16
 800b130:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d006      	beq.n	800b146 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b140:	711a      	strb	r2, [r3, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d006      	beq.n	800b15a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b154:	711a      	strb	r2, [r3, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2243      	movs	r2, #67	@ 0x43
 800b15e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b160:	4b02      	ldr	r3, [pc, #8]	@ (800b16c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b162:	4618      	mov	r0, r3
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	2000005c 	.word	0x2000005c

0800b170 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	220a      	movs	r2, #10
 800b17c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b17e:	4b03      	ldr	r3, [pc, #12]	@ (800b18c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b180:	4618      	mov	r0, r3
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	20000018 	.word	0x20000018

0800b190 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	e009      	b.n	800b1b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	33b0      	adds	r3, #176	@ 0xb0
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	32b0      	adds	r2, #176	@ 0xb0
 800b1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e008      	b.n	800b1fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	371c      	adds	r7, #28
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	32b0      	adds	r2, #176	@ 0xb0
 800b21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b220:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b228:	2303      	movs	r3, #3
 800b22a:	e004      	b.n	800b236 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
	...

0800b244 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	32b0      	adds	r2, #176	@ 0xb0
 800b256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b25a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b25c:	2301      	movs	r3, #1
 800b25e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b266:	2303      	movs	r3, #3
 800b268:	e025      	b.n	800b2b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b270:	2b00      	cmp	r3, #0
 800b272:	d11f      	bne.n	800b2b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2201      	movs	r2, #1
 800b278:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b27c:	4b10      	ldr	r3, [pc, #64]	@ (800b2c0 <USBD_CDC_TransmitPacket+0x7c>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	f003 020f 	and.w	r2, r3, #15
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	4613      	mov	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4403      	add	r3, r0
 800b296:	3314      	adds	r3, #20
 800b298:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b29a:	4b09      	ldr	r3, [pc, #36]	@ (800b2c0 <USBD_CDC_TransmitPacket+0x7c>)
 800b29c:	7819      	ldrb	r1, [r3, #0]
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f002 f81d 	bl	800d2ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	2000009f 	.word	0x2000009f

0800b2c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	32b0      	adds	r2, #176	@ 0xb0
 800b2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	32b0      	adds	r2, #176	@ 0xb0
 800b2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e018      	b.n	800b324 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	7c1b      	ldrb	r3, [r3, #16]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10a      	bne.n	800b310 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b32c <USBD_CDC_ReceivePacket+0x68>)
 800b2fc:	7819      	ldrb	r1, [r3, #0]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b304:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f002 f80f 	bl	800d32c <USBD_LL_PrepareReceive>
 800b30e:	e008      	b.n	800b322 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b310:	4b06      	ldr	r3, [pc, #24]	@ (800b32c <USBD_CDC_ReceivePacket+0x68>)
 800b312:	7819      	ldrb	r1, [r3, #0]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b31a:	2340      	movs	r3, #64	@ 0x40
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f002 f805 	bl	800d32c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	200000a0 	.word	0x200000a0

0800b330 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	4613      	mov	r3, r2
 800b33c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b344:	2303      	movs	r3, #3
 800b346:	e01f      	b.n	800b388 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2201      	movs	r2, #1
 800b372:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	79fa      	ldrb	r2, [r7, #7]
 800b37a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f001 fe7f 	bl	800d080 <USBD_LL_Init>
 800b382:	4603      	mov	r3, r0
 800b384:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b386:	7dfb      	ldrb	r3, [r7, #23]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b39a:	2300      	movs	r3, #0
 800b39c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e025      	b.n	800b3f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	32ae      	adds	r2, #174	@ 0xae
 800b3ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00f      	beq.n	800b3e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	32ae      	adds	r2, #174	@ 0xae
 800b3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d4:	f107 020e 	add.w	r2, r7, #14
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
 800b3dc:	4602      	mov	r2, r0
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f001 fe87 	bl	800d118 <USBD_LL_Start>
 800b40a:	4603      	mov	r3, r0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b41c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b41e:	4618      	mov	r0, r3
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	460b      	mov	r3, r1
 800b434:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b440:	2b00      	cmp	r3, #0
 800b442:	d009      	beq.n	800b458 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	78fa      	ldrb	r2, [r7, #3]
 800b44e:	4611      	mov	r1, r2
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	4798      	blx	r3
 800b454:	4603      	mov	r3, r0
 800b456:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b458:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b084      	sub	sp, #16
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	460b      	mov	r3, r1
 800b46c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	78fa      	ldrb	r2, [r7, #3]
 800b47c:	4611      	mov	r1, r2
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	4798      	blx	r3
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b488:	2303      	movs	r3, #3
 800b48a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4a6:	6839      	ldr	r1, [r7, #0]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f001 f922 	bl	800c6f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b4bc:	461a      	mov	r2, r3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b4ca:	f003 031f 	and.w	r3, r3, #31
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d01a      	beq.n	800b508 <USBD_LL_SetupStage+0x72>
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d822      	bhi.n	800b51c <USBD_LL_SetupStage+0x86>
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d002      	beq.n	800b4e0 <USBD_LL_SetupStage+0x4a>
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d00a      	beq.n	800b4f4 <USBD_LL_SetupStage+0x5e>
 800b4de:	e01d      	b.n	800b51c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fb77 	bl	800bbdc <USBD_StdDevReq>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b4f2:	e020      	b.n	800b536 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fbdf 	bl	800bcc0 <USBD_StdItfReq>
 800b502:	4603      	mov	r3, r0
 800b504:	73fb      	strb	r3, [r7, #15]
      break;
 800b506:	e016      	b.n	800b536 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fc41 	bl	800bd98 <USBD_StdEPReq>
 800b516:	4603      	mov	r3, r0
 800b518:	73fb      	strb	r3, [r7, #15]
      break;
 800b51a:	e00c      	b.n	800b536 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b522:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b526:	b2db      	uxtb	r3, r3
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f001 fe54 	bl	800d1d8 <USBD_LL_StallEP>
 800b530:	4603      	mov	r3, r0
 800b532:	73fb      	strb	r3, [r7, #15]
      break;
 800b534:	bf00      	nop
  }

  return ret;
 800b536:	7bfb      	ldrb	r3, [r7, #15]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	460b      	mov	r3, r1
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b552:	7afb      	ldrb	r3, [r7, #11]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d177      	bne.n	800b648 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b55e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b566:	2b03      	cmp	r3, #3
 800b568:	f040 80a1 	bne.w	800b6ae <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	8992      	ldrh	r2, [r2, #12]
 800b574:	4293      	cmp	r3, r2
 800b576:	d91c      	bls.n	800b5b2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	8992      	ldrh	r2, [r2, #12]
 800b580:	1a9a      	subs	r2, r3, r2
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	8992      	ldrh	r2, [r2, #12]
 800b58e:	441a      	add	r2, r3
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	6919      	ldr	r1, [r3, #16]
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	899b      	ldrh	r3, [r3, #12]
 800b59c:	461a      	mov	r2, r3
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	bf38      	it	cc
 800b5a6:	4613      	movcc	r3, r2
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f001 f9a8 	bl	800c900 <USBD_CtlContinueRx>
 800b5b0:	e07d      	b.n	800b6ae <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b5b8:	f003 031f 	and.w	r3, r3, #31
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d014      	beq.n	800b5ea <USBD_LL_DataOutStage+0xaa>
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d81d      	bhi.n	800b600 <USBD_LL_DataOutStage+0xc0>
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <USBD_LL_DataOutStage+0x8e>
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d003      	beq.n	800b5d4 <USBD_LL_DataOutStage+0x94>
 800b5cc:	e018      	b.n	800b600 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	75bb      	strb	r3, [r7, #22]
            break;
 800b5d2:	e018      	b.n	800b606 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	4619      	mov	r1, r3
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f000 fa6e 	bl	800bac0 <USBD_CoreFindIF>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	75bb      	strb	r3, [r7, #22]
            break;
 800b5e8:	e00d      	b.n	800b606 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f000 fa70 	bl	800bada <USBD_CoreFindEP>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75bb      	strb	r3, [r7, #22]
            break;
 800b5fe:	e002      	b.n	800b606 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b600:	2300      	movs	r3, #0
 800b602:	75bb      	strb	r3, [r7, #22]
            break;
 800b604:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b606:	7dbb      	ldrb	r3, [r7, #22]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d119      	bne.n	800b640 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b03      	cmp	r3, #3
 800b616:	d113      	bne.n	800b640 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b618:	7dba      	ldrb	r2, [r7, #22]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	32ae      	adds	r2, #174	@ 0xae
 800b61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00b      	beq.n	800b640 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800b628:	7dba      	ldrb	r2, [r7, #22]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b630:	7dba      	ldrb	r2, [r7, #22]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	32ae      	adds	r2, #174	@ 0xae
 800b636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f001 f96e 	bl	800c922 <USBD_CtlSendStatus>
 800b646:	e032      	b.n	800b6ae <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b648:	7afb      	ldrb	r3, [r7, #11]
 800b64a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	4619      	mov	r1, r3
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 fa41 	bl	800bada <USBD_CoreFindEP>
 800b658:	4603      	mov	r3, r0
 800b65a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b65c:	7dbb      	ldrb	r3, [r7, #22]
 800b65e:	2bff      	cmp	r3, #255	@ 0xff
 800b660:	d025      	beq.n	800b6ae <USBD_LL_DataOutStage+0x16e>
 800b662:	7dbb      	ldrb	r3, [r7, #22]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d122      	bne.n	800b6ae <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b03      	cmp	r3, #3
 800b672:	d117      	bne.n	800b6a4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b674:	7dba      	ldrb	r2, [r7, #22]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	32ae      	adds	r2, #174	@ 0xae
 800b67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b67e:	699b      	ldr	r3, [r3, #24]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00f      	beq.n	800b6a4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800b684:	7dba      	ldrb	r2, [r7, #22]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b68c:	7dba      	ldrb	r2, [r7, #22]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	32ae      	adds	r2, #174	@ 0xae
 800b692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	7afa      	ldrb	r2, [r7, #11]
 800b69a:	4611      	mov	r1, r2
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	4798      	blx	r3
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b6a4:	7dfb      	ldrb	r3, [r7, #23]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	e000      	b.n	800b6b0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3718      	adds	r7, #24
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b6c6:	7afb      	ldrb	r3, [r7, #11]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d178      	bne.n	800b7be <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3314      	adds	r3, #20
 800b6d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d163      	bne.n	800b7a4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	8992      	ldrh	r2, [r2, #12]
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d91c      	bls.n	800b722 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	8992      	ldrh	r2, [r2, #12]
 800b6f0:	1a9a      	subs	r2, r3, r2
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	8992      	ldrh	r2, [r2, #12]
 800b6fe:	441a      	add	r2, r3
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	6919      	ldr	r1, [r3, #16]
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	461a      	mov	r2, r3
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f001 f8c4 	bl	800c89c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b714:	2300      	movs	r3, #0
 800b716:	2200      	movs	r2, #0
 800b718:	2100      	movs	r1, #0
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f001 fe06 	bl	800d32c <USBD_LL_PrepareReceive>
 800b720:	e040      	b.n	800b7a4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	899b      	ldrh	r3, [r3, #12]
 800b726:	461a      	mov	r2, r3
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d11c      	bne.n	800b76a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b738:	4293      	cmp	r3, r2
 800b73a:	d316      	bcc.n	800b76a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b746:	429a      	cmp	r2, r3
 800b748:	d20f      	bcs.n	800b76a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b74a:	2200      	movs	r2, #0
 800b74c:	2100      	movs	r1, #0
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f001 f8a4 	bl	800c89c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b75c:	2300      	movs	r3, #0
 800b75e:	2200      	movs	r2, #0
 800b760:	2100      	movs	r1, #0
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f001 fde2 	bl	800d32c <USBD_LL_PrepareReceive>
 800b768:	e01c      	b.n	800b7a4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b770:	b2db      	uxtb	r3, r3
 800b772:	2b03      	cmp	r3, #3
 800b774:	d10f      	bne.n	800b796 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d009      	beq.n	800b796 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b796:	2180      	movs	r1, #128	@ 0x80
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f001 fd1d 	bl	800d1d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f001 f8d2 	bl	800c948 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d03a      	beq.n	800b824 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7ff fe30 	bl	800b414 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b7bc:	e032      	b.n	800b824 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b7be:	7afb      	ldrb	r3, [r7, #11]
 800b7c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 f986 	bl	800bada <USBD_CoreFindEP>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
 800b7d4:	2bff      	cmp	r3, #255	@ 0xff
 800b7d6:	d025      	beq.n	800b824 <USBD_LL_DataInStage+0x16c>
 800b7d8:	7dfb      	ldrb	r3, [r7, #23]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d122      	bne.n	800b824 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	d11c      	bne.n	800b824 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b7ea:	7dfa      	ldrb	r2, [r7, #23]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	32ae      	adds	r2, #174	@ 0xae
 800b7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d014      	beq.n	800b824 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800b7fa:	7dfa      	ldrb	r2, [r7, #23]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b802:	7dfa      	ldrb	r2, [r7, #23]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	32ae      	adds	r2, #174	@ 0xae
 800b808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	7afa      	ldrb	r2, [r7, #11]
 800b810:	4611      	mov	r1, r2
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	4798      	blx	r3
 800b816:	4603      	mov	r3, r0
 800b818:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b81a:	7dbb      	ldrb	r3, [r7, #22]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800b820:	7dbb      	ldrb	r3, [r7, #22]
 800b822:	e000      	b.n	800b826 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b866:	2b00      	cmp	r3, #0
 800b868:	d014      	beq.n	800b894 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00e      	beq.n	800b894 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	6852      	ldr	r2, [r2, #4]
 800b882:	b2d2      	uxtb	r2, r2
 800b884:	4611      	mov	r1, r2
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	4798      	blx	r3
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b890:	2303      	movs	r3, #3
 800b892:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b894:	2340      	movs	r3, #64	@ 0x40
 800b896:	2200      	movs	r2, #0
 800b898:	2100      	movs	r1, #0
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f001 fc57 	bl	800d14e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2240      	movs	r2, #64	@ 0x40
 800b8ac:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8b0:	2340      	movs	r3, #64	@ 0x40
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	2180      	movs	r1, #128	@ 0x80
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f001 fc49 	bl	800d14e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2240      	movs	r2, #64	@ 0x40
 800b8c8:	841a      	strh	r2, [r3, #32]

  return ret;
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	78fa      	ldrb	r2, [r7, #3]
 800b8e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b04      	cmp	r3, #4
 800b906:	d006      	beq.n	800b916 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2204      	movs	r2, #4
 800b91a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	2b04      	cmp	r3, #4
 800b93e:	d106      	bne.n	800b94e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b946:	b2da      	uxtb	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	2b03      	cmp	r3, #3
 800b96e:	d110      	bne.n	800b992 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00b      	beq.n	800b992 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b980:	69db      	ldr	r3, [r3, #28]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d005      	beq.n	800b992 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b98c:	69db      	ldr	r3, [r3, #28]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	32ae      	adds	r2, #174	@ 0xae
 800b9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d101      	bne.n	800b9be <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	e01c      	b.n	800b9f8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b03      	cmp	r3, #3
 800b9c8:	d115      	bne.n	800b9f6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	32ae      	adds	r2, #174	@ 0xae
 800b9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00b      	beq.n	800b9f6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	32ae      	adds	r2, #174	@ 0xae
 800b9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	78fa      	ldrb	r2, [r7, #3]
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	32ae      	adds	r2, #174	@ 0xae
 800ba16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e01c      	b.n	800ba5c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d115      	bne.n	800ba5a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	32ae      	adds	r2, #174	@ 0xae
 800ba38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00b      	beq.n	800ba5a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	32ae      	adds	r2, #174	@ 0xae
 800ba4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba52:	78fa      	ldrb	r2, [r7, #3]
 800ba54:	4611      	mov	r1, r2
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00e      	beq.n	800bab6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	6852      	ldr	r2, [r2, #4]
 800baa4:	b2d2      	uxtb	r2, r2
 800baa6:	4611      	mov	r1, r2
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	4798      	blx	r3
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d001      	beq.n	800bab6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bab2:	2303      	movs	r3, #3
 800bab4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bacc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bace:	4618      	mov	r0, r3
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	460b      	mov	r3, r1
 800bae4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bae6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bae8:	4618      	mov	r0, r3
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	885b      	ldrh	r3, [r3, #2]
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	7812      	ldrb	r2, [r2, #0]
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d91f      	bls.n	800bb5a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bb20:	e013      	b.n	800bb4a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bb22:	f107 030a 	add.w	r3, r7, #10
 800bb26:	4619      	mov	r1, r3
 800bb28:	6978      	ldr	r0, [r7, #20]
 800bb2a:	f000 f81b 	bl	800bb64 <USBD_GetNextDesc>
 800bb2e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	785b      	ldrb	r3, [r3, #1]
 800bb34:	2b05      	cmp	r3, #5
 800bb36:	d108      	bne.n	800bb4a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	789b      	ldrb	r3, [r3, #2]
 800bb40:	78fa      	ldrb	r2, [r7, #3]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d008      	beq.n	800bb58 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bb46:	2300      	movs	r3, #0
 800bb48:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	885b      	ldrh	r3, [r3, #2]
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	897b      	ldrh	r3, [r7, #10]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d8e5      	bhi.n	800bb22 <USBD_GetEpDesc+0x2e>
 800bb56:	e000      	b.n	800bb5a <USBD_GetEpDesc+0x66>
          break;
 800bb58:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bb5a:	693b      	ldr	r3, [r7, #16]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	7812      	ldrb	r2, [r2, #0]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bbba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bbbe:	021b      	lsls	r3, r3, #8
 800bbc0:	b21a      	sxth	r2, r3
 800bbc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	b21b      	sxth	r3, r3
 800bbca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bbcc:	89fb      	ldrh	r3, [r7, #14]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
	...

0800bbdc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbf2:	2b40      	cmp	r3, #64	@ 0x40
 800bbf4:	d005      	beq.n	800bc02 <USBD_StdDevReq+0x26>
 800bbf6:	2b40      	cmp	r3, #64	@ 0x40
 800bbf8:	d857      	bhi.n	800bcaa <USBD_StdDevReq+0xce>
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00f      	beq.n	800bc1e <USBD_StdDevReq+0x42>
 800bbfe:	2b20      	cmp	r3, #32
 800bc00:	d153      	bne.n	800bcaa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	32ae      	adds	r2, #174	@ 0xae
 800bc0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	4798      	blx	r3
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73fb      	strb	r3, [r7, #15]
      break;
 800bc1c:	e04a      	b.n	800bcb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	785b      	ldrb	r3, [r3, #1]
 800bc22:	2b09      	cmp	r3, #9
 800bc24:	d83b      	bhi.n	800bc9e <USBD_StdDevReq+0xc2>
 800bc26:	a201      	add	r2, pc, #4	@ (adr r2, 800bc2c <USBD_StdDevReq+0x50>)
 800bc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2c:	0800bc81 	.word	0x0800bc81
 800bc30:	0800bc95 	.word	0x0800bc95
 800bc34:	0800bc9f 	.word	0x0800bc9f
 800bc38:	0800bc8b 	.word	0x0800bc8b
 800bc3c:	0800bc9f 	.word	0x0800bc9f
 800bc40:	0800bc5f 	.word	0x0800bc5f
 800bc44:	0800bc55 	.word	0x0800bc55
 800bc48:	0800bc9f 	.word	0x0800bc9f
 800bc4c:	0800bc77 	.word	0x0800bc77
 800bc50:	0800bc69 	.word	0x0800bc69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fa3e 	bl	800c0d8 <USBD_GetDescriptor>
          break;
 800bc5c:	e024      	b.n	800bca8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fba3 	bl	800c3ac <USBD_SetAddress>
          break;
 800bc66:	e01f      	b.n	800bca8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bc68:	6839      	ldr	r1, [r7, #0]
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 fbe2 	bl	800c434 <USBD_SetConfig>
 800bc70:	4603      	mov	r3, r0
 800bc72:	73fb      	strb	r3, [r7, #15]
          break;
 800bc74:	e018      	b.n	800bca8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 fc85 	bl	800c588 <USBD_GetConfig>
          break;
 800bc7e:	e013      	b.n	800bca8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 fcb6 	bl	800c5f4 <USBD_GetStatus>
          break;
 800bc88:	e00e      	b.n	800bca8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc8a:	6839      	ldr	r1, [r7, #0]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fce5 	bl	800c65c <USBD_SetFeature>
          break;
 800bc92:	e009      	b.n	800bca8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fd09 	bl	800c6ae <USBD_ClrFeature>
          break;
 800bc9c:	e004      	b.n	800bca8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 fd60 	bl	800c766 <USBD_CtlError>
          break;
 800bca6:	bf00      	nop
      }
      break;
 800bca8:	e004      	b.n	800bcb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 fd5a 	bl	800c766 <USBD_CtlError>
      break;
 800bcb2:	bf00      	nop
  }

  return ret;
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop

0800bcc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bcd6:	2b40      	cmp	r3, #64	@ 0x40
 800bcd8:	d005      	beq.n	800bce6 <USBD_StdItfReq+0x26>
 800bcda:	2b40      	cmp	r3, #64	@ 0x40
 800bcdc:	d852      	bhi.n	800bd84 <USBD_StdItfReq+0xc4>
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <USBD_StdItfReq+0x26>
 800bce2:	2b20      	cmp	r3, #32
 800bce4:	d14e      	bne.n	800bd84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d840      	bhi.n	800bd76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	889b      	ldrh	r3, [r3, #4]
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d836      	bhi.n	800bd6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	889b      	ldrh	r3, [r3, #4]
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	4619      	mov	r1, r3
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7ff feda 	bl	800bac0 <USBD_CoreFindIF>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd10:	7bbb      	ldrb	r3, [r7, #14]
 800bd12:	2bff      	cmp	r3, #255	@ 0xff
 800bd14:	d01d      	beq.n	800bd52 <USBD_StdItfReq+0x92>
 800bd16:	7bbb      	ldrb	r3, [r7, #14]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d11a      	bne.n	800bd52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bd1c:	7bba      	ldrb	r2, [r7, #14]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	32ae      	adds	r2, #174	@ 0xae
 800bd22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00f      	beq.n	800bd4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bd2c:	7bba      	ldrb	r2, [r7, #14]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd34:	7bba      	ldrb	r2, [r7, #14]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	32ae      	adds	r2, #174	@ 0xae
 800bd3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	4798      	blx	r3
 800bd46:	4603      	mov	r3, r0
 800bd48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd4a:	e004      	b.n	800bd56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd50:	e001      	b.n	800bd56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bd52:	2303      	movs	r3, #3
 800bd54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	88db      	ldrh	r3, [r3, #6]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d110      	bne.n	800bd80 <USBD_StdItfReq+0xc0>
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10d      	bne.n	800bd80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fddc 	bl	800c922 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd6a:	e009      	b.n	800bd80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fcf9 	bl	800c766 <USBD_CtlError>
          break;
 800bd74:	e004      	b.n	800bd80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fcf4 	bl	800c766 <USBD_CtlError>
          break;
 800bd7e:	e000      	b.n	800bd82 <USBD_StdItfReq+0xc2>
          break;
 800bd80:	bf00      	nop
      }
      break;
 800bd82:	e004      	b.n	800bd8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fced 	bl	800c766 <USBD_CtlError>
      break;
 800bd8c:	bf00      	nop
  }

  return ret;
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bda2:	2300      	movs	r3, #0
 800bda4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	889b      	ldrh	r3, [r3, #4]
 800bdaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdb4:	2b40      	cmp	r3, #64	@ 0x40
 800bdb6:	d007      	beq.n	800bdc8 <USBD_StdEPReq+0x30>
 800bdb8:	2b40      	cmp	r3, #64	@ 0x40
 800bdba:	f200 8181 	bhi.w	800c0c0 <USBD_StdEPReq+0x328>
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d02a      	beq.n	800be18 <USBD_StdEPReq+0x80>
 800bdc2:	2b20      	cmp	r3, #32
 800bdc4:	f040 817c 	bne.w	800c0c0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7ff fe84 	bl	800bada <USBD_CoreFindEP>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdd6:	7b7b      	ldrb	r3, [r7, #13]
 800bdd8:	2bff      	cmp	r3, #255	@ 0xff
 800bdda:	f000 8176 	beq.w	800c0ca <USBD_StdEPReq+0x332>
 800bdde:	7b7b      	ldrb	r3, [r7, #13]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f040 8172 	bne.w	800c0ca <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800bde6:	7b7a      	ldrb	r2, [r7, #13]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bdee:	7b7a      	ldrb	r2, [r7, #13]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	32ae      	adds	r2, #174	@ 0xae
 800bdf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 8165 	beq.w	800c0ca <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800be00:	7b7a      	ldrb	r2, [r7, #13]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	32ae      	adds	r2, #174	@ 0xae
 800be06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	4798      	blx	r3
 800be12:	4603      	mov	r3, r0
 800be14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800be16:	e158      	b.n	800c0ca <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	785b      	ldrb	r3, [r3, #1]
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d008      	beq.n	800be32 <USBD_StdEPReq+0x9a>
 800be20:	2b03      	cmp	r3, #3
 800be22:	f300 8147 	bgt.w	800c0b4 <USBD_StdEPReq+0x31c>
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 809b 	beq.w	800bf62 <USBD_StdEPReq+0x1ca>
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d03c      	beq.n	800beaa <USBD_StdEPReq+0x112>
 800be30:	e140      	b.n	800c0b4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d002      	beq.n	800be44 <USBD_StdEPReq+0xac>
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d016      	beq.n	800be70 <USBD_StdEPReq+0xd8>
 800be42:	e02c      	b.n	800be9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be44:	7bbb      	ldrb	r3, [r7, #14]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00d      	beq.n	800be66 <USBD_StdEPReq+0xce>
 800be4a:	7bbb      	ldrb	r3, [r7, #14]
 800be4c:	2b80      	cmp	r3, #128	@ 0x80
 800be4e:	d00a      	beq.n	800be66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be50:	7bbb      	ldrb	r3, [r7, #14]
 800be52:	4619      	mov	r1, r3
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f001 f9bf 	bl	800d1d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be5a:	2180      	movs	r1, #128	@ 0x80
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f001 f9bb 	bl	800d1d8 <USBD_LL_StallEP>
 800be62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be64:	e020      	b.n	800bea8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fc7c 	bl	800c766 <USBD_CtlError>
              break;
 800be6e:	e01b      	b.n	800bea8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	885b      	ldrh	r3, [r3, #2]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10e      	bne.n	800be96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be78:	7bbb      	ldrb	r3, [r7, #14]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00b      	beq.n	800be96 <USBD_StdEPReq+0xfe>
 800be7e:	7bbb      	ldrb	r3, [r7, #14]
 800be80:	2b80      	cmp	r3, #128	@ 0x80
 800be82:	d008      	beq.n	800be96 <USBD_StdEPReq+0xfe>
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	88db      	ldrh	r3, [r3, #6]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d104      	bne.n	800be96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800be8c:	7bbb      	ldrb	r3, [r7, #14]
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f001 f9a1 	bl	800d1d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fd43 	bl	800c922 <USBD_CtlSendStatus>

              break;
 800be9c:	e004      	b.n	800bea8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fc60 	bl	800c766 <USBD_CtlError>
              break;
 800bea6:	bf00      	nop
          }
          break;
 800bea8:	e109      	b.n	800c0be <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	d002      	beq.n	800bebc <USBD_StdEPReq+0x124>
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d016      	beq.n	800bee8 <USBD_StdEPReq+0x150>
 800beba:	e04b      	b.n	800bf54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bebc:	7bbb      	ldrb	r3, [r7, #14]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00d      	beq.n	800bede <USBD_StdEPReq+0x146>
 800bec2:	7bbb      	ldrb	r3, [r7, #14]
 800bec4:	2b80      	cmp	r3, #128	@ 0x80
 800bec6:	d00a      	beq.n	800bede <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
 800beca:	4619      	mov	r1, r3
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f001 f983 	bl	800d1d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bed2:	2180      	movs	r1, #128	@ 0x80
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f001 f97f 	bl	800d1d8 <USBD_LL_StallEP>
 800beda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bedc:	e040      	b.n	800bf60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fc40 	bl	800c766 <USBD_CtlError>
              break;
 800bee6:	e03b      	b.n	800bf60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	885b      	ldrh	r3, [r3, #2]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d136      	bne.n	800bf5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d004      	beq.n	800bf04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800befa:	7bbb      	ldrb	r3, [r7, #14]
 800befc:	4619      	mov	r1, r3
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f001 f989 	bl	800d216 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fd0c 	bl	800c922 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf0a:	7bbb      	ldrb	r3, [r7, #14]
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7ff fde3 	bl	800bada <USBD_CoreFindEP>
 800bf14:	4603      	mov	r3, r0
 800bf16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf18:	7b7b      	ldrb	r3, [r7, #13]
 800bf1a:	2bff      	cmp	r3, #255	@ 0xff
 800bf1c:	d01f      	beq.n	800bf5e <USBD_StdEPReq+0x1c6>
 800bf1e:	7b7b      	ldrb	r3, [r7, #13]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d11c      	bne.n	800bf5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bf24:	7b7a      	ldrb	r2, [r7, #13]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bf2c:	7b7a      	ldrb	r2, [r7, #13]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	32ae      	adds	r2, #174	@ 0xae
 800bf32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d010      	beq.n	800bf5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf3c:	7b7a      	ldrb	r2, [r7, #13]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	32ae      	adds	r2, #174	@ 0xae
 800bf42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	4798      	blx	r3
 800bf4e:	4603      	mov	r3, r0
 800bf50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bf52:	e004      	b.n	800bf5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fc05 	bl	800c766 <USBD_CtlError>
              break;
 800bf5c:	e000      	b.n	800bf60 <USBD_StdEPReq+0x1c8>
              break;
 800bf5e:	bf00      	nop
          }
          break;
 800bf60:	e0ad      	b.n	800c0be <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d002      	beq.n	800bf74 <USBD_StdEPReq+0x1dc>
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d033      	beq.n	800bfda <USBD_StdEPReq+0x242>
 800bf72:	e099      	b.n	800c0a8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf74:	7bbb      	ldrb	r3, [r7, #14]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d007      	beq.n	800bf8a <USBD_StdEPReq+0x1f2>
 800bf7a:	7bbb      	ldrb	r3, [r7, #14]
 800bf7c:	2b80      	cmp	r3, #128	@ 0x80
 800bf7e:	d004      	beq.n	800bf8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fbef 	bl	800c766 <USBD_CtlError>
                break;
 800bf88:	e093      	b.n	800c0b2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	da0b      	bge.n	800bfaa <USBD_StdEPReq+0x212>
 800bf92:	7bbb      	ldrb	r3, [r7, #14]
 800bf94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf98:	4613      	mov	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	4413      	add	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	3310      	adds	r3, #16
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	3304      	adds	r3, #4
 800bfa8:	e00b      	b.n	800bfc2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bfaa:	7bbb      	ldrb	r3, [r7, #14]
 800bfac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4413      	add	r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	330e      	adds	r3, #14
 800bfce:	2202      	movs	r2, #2
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fc44 	bl	800c860 <USBD_CtlSendData>
              break;
 800bfd8:	e06b      	b.n	800c0b2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bfda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	da11      	bge.n	800c006 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bfe2:	7bbb      	ldrb	r3, [r7, #14]
 800bfe4:	f003 020f 	and.w	r2, r3, #15
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	4613      	mov	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4413      	add	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	440b      	add	r3, r1
 800bff4:	3323      	adds	r3, #35	@ 0x23
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d117      	bne.n	800c02c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fbb1 	bl	800c766 <USBD_CtlError>
                  break;
 800c004:	e055      	b.n	800c0b2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	f003 020f 	and.w	r2, r3, #15
 800c00c:	6879      	ldr	r1, [r7, #4]
 800c00e:	4613      	mov	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4413      	add	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	440b      	add	r3, r1
 800c018:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d104      	bne.n	800c02c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fb9e 	bl	800c766 <USBD_CtlError>
                  break;
 800c02a:	e042      	b.n	800c0b2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c02c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c030:	2b00      	cmp	r3, #0
 800c032:	da0b      	bge.n	800c04c <USBD_StdEPReq+0x2b4>
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c03a:	4613      	mov	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4413      	add	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	3310      	adds	r3, #16
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	4413      	add	r3, r2
 800c048:	3304      	adds	r3, #4
 800c04a:	e00b      	b.n	800c064 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c052:	4613      	mov	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4413      	add	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	4413      	add	r3, r2
 800c062:	3304      	adds	r3, #4
 800c064:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c066:	7bbb      	ldrb	r3, [r7, #14]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d002      	beq.n	800c072 <USBD_StdEPReq+0x2da>
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
 800c06e:	2b80      	cmp	r3, #128	@ 0x80
 800c070:	d103      	bne.n	800c07a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	2200      	movs	r2, #0
 800c076:	739a      	strb	r2, [r3, #14]
 800c078:	e00e      	b.n	800c098 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c07a:	7bbb      	ldrb	r3, [r7, #14]
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 f8e8 	bl	800d254 <USBD_LL_IsStallEP>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d003      	beq.n	800c092 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	2201      	movs	r2, #1
 800c08e:	739a      	strb	r2, [r3, #14]
 800c090:	e002      	b.n	800c098 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	2200      	movs	r2, #0
 800c096:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	330e      	adds	r3, #14
 800c09c:	2202      	movs	r2, #2
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fbdd 	bl	800c860 <USBD_CtlSendData>
              break;
 800c0a6:	e004      	b.n	800c0b2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fb5b 	bl	800c766 <USBD_CtlError>
              break;
 800c0b0:	bf00      	nop
          }
          break;
 800c0b2:	e004      	b.n	800c0be <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fb55 	bl	800c766 <USBD_CtlError>
          break;
 800c0bc:	bf00      	nop
      }
      break;
 800c0be:	e005      	b.n	800c0cc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c0c0:	6839      	ldr	r1, [r7, #0]
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 fb4f 	bl	800c766 <USBD_CtlError>
      break;
 800c0c8:	e000      	b.n	800c0cc <USBD_StdEPReq+0x334>
      break;
 800c0ca:	bf00      	nop
  }

  return ret;
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
	...

0800c0d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	885b      	ldrh	r3, [r3, #2]
 800c0f2:	0a1b      	lsrs	r3, r3, #8
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	2b06      	cmp	r3, #6
 800c0fa:	f200 8128 	bhi.w	800c34e <USBD_GetDescriptor+0x276>
 800c0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c104 <USBD_GetDescriptor+0x2c>)
 800c100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c104:	0800c121 	.word	0x0800c121
 800c108:	0800c139 	.word	0x0800c139
 800c10c:	0800c179 	.word	0x0800c179
 800c110:	0800c34f 	.word	0x0800c34f
 800c114:	0800c34f 	.word	0x0800c34f
 800c118:	0800c2ef 	.word	0x0800c2ef
 800c11c:	0800c31b 	.word	0x0800c31b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	7c12      	ldrb	r2, [r2, #16]
 800c12c:	f107 0108 	add.w	r1, r7, #8
 800c130:	4610      	mov	r0, r2
 800c132:	4798      	blx	r3
 800c134:	60f8      	str	r0, [r7, #12]
      break;
 800c136:	e112      	b.n	800c35e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	7c1b      	ldrb	r3, [r3, #16]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10d      	bne.n	800c15c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c148:	f107 0208 	add.w	r2, r7, #8
 800c14c:	4610      	mov	r0, r2
 800c14e:	4798      	blx	r3
 800c150:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3301      	adds	r3, #1
 800c156:	2202      	movs	r2, #2
 800c158:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c15a:	e100      	b.n	800c35e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c164:	f107 0208 	add.w	r2, r7, #8
 800c168:	4610      	mov	r0, r2
 800c16a:	4798      	blx	r3
 800c16c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3301      	adds	r3, #1
 800c172:	2202      	movs	r2, #2
 800c174:	701a      	strb	r2, [r3, #0]
      break;
 800c176:	e0f2      	b.n	800c35e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	885b      	ldrh	r3, [r3, #2]
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b05      	cmp	r3, #5
 800c180:	f200 80ac 	bhi.w	800c2dc <USBD_GetDescriptor+0x204>
 800c184:	a201      	add	r2, pc, #4	@ (adr r2, 800c18c <USBD_GetDescriptor+0xb4>)
 800c186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18a:	bf00      	nop
 800c18c:	0800c1a5 	.word	0x0800c1a5
 800c190:	0800c1d9 	.word	0x0800c1d9
 800c194:	0800c20d 	.word	0x0800c20d
 800c198:	0800c241 	.word	0x0800c241
 800c19c:	0800c275 	.word	0x0800c275
 800c1a0:	0800c2a9 	.word	0x0800c2a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00b      	beq.n	800c1c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	7c12      	ldrb	r2, [r2, #16]
 800c1bc:	f107 0108 	add.w	r1, r7, #8
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	4798      	blx	r3
 800c1c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1c6:	e091      	b.n	800c2ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 facb 	bl	800c766 <USBD_CtlError>
            err++;
 800c1d0:	7afb      	ldrb	r3, [r7, #11]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c1d6:	e089      	b.n	800c2ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00b      	beq.n	800c1fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	7c12      	ldrb	r2, [r2, #16]
 800c1f0:	f107 0108 	add.w	r1, r7, #8
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	4798      	blx	r3
 800c1f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1fa:	e077      	b.n	800c2ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fab1 	bl	800c766 <USBD_CtlError>
            err++;
 800c204:	7afb      	ldrb	r3, [r7, #11]
 800c206:	3301      	adds	r3, #1
 800c208:	72fb      	strb	r3, [r7, #11]
          break;
 800c20a:	e06f      	b.n	800c2ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00b      	beq.n	800c230 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	7c12      	ldrb	r2, [r2, #16]
 800c224:	f107 0108 	add.w	r1, r7, #8
 800c228:	4610      	mov	r0, r2
 800c22a:	4798      	blx	r3
 800c22c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c22e:	e05d      	b.n	800c2ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fa97 	bl	800c766 <USBD_CtlError>
            err++;
 800c238:	7afb      	ldrb	r3, [r7, #11]
 800c23a:	3301      	adds	r3, #1
 800c23c:	72fb      	strb	r3, [r7, #11]
          break;
 800c23e:	e055      	b.n	800c2ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00b      	beq.n	800c264 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	7c12      	ldrb	r2, [r2, #16]
 800c258:	f107 0108 	add.w	r1, r7, #8
 800c25c:	4610      	mov	r0, r2
 800c25e:	4798      	blx	r3
 800c260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c262:	e043      	b.n	800c2ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fa7d 	bl	800c766 <USBD_CtlError>
            err++;
 800c26c:	7afb      	ldrb	r3, [r7, #11]
 800c26e:	3301      	adds	r3, #1
 800c270:	72fb      	strb	r3, [r7, #11]
          break;
 800c272:	e03b      	b.n	800c2ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c27a:	695b      	ldr	r3, [r3, #20]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00b      	beq.n	800c298 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	7c12      	ldrb	r2, [r2, #16]
 800c28c:	f107 0108 	add.w	r1, r7, #8
 800c290:	4610      	mov	r0, r2
 800c292:	4798      	blx	r3
 800c294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c296:	e029      	b.n	800c2ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fa63 	bl	800c766 <USBD_CtlError>
            err++;
 800c2a0:	7afb      	ldrb	r3, [r7, #11]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2a6:	e021      	b.n	800c2ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00b      	beq.n	800c2cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	7c12      	ldrb	r2, [r2, #16]
 800c2c0:	f107 0108 	add.w	r1, r7, #8
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	4798      	blx	r3
 800c2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ca:	e00f      	b.n	800c2ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fa49 	bl	800c766 <USBD_CtlError>
            err++;
 800c2d4:	7afb      	ldrb	r3, [r7, #11]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2da:	e007      	b.n	800c2ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fa41 	bl	800c766 <USBD_CtlError>
          err++;
 800c2e4:	7afb      	ldrb	r3, [r7, #11]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c2ea:	bf00      	nop
      }
      break;
 800c2ec:	e037      	b.n	800c35e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	7c1b      	ldrb	r3, [r3, #16]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d109      	bne.n	800c30a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2fe:	f107 0208 	add.w	r2, r7, #8
 800c302:	4610      	mov	r0, r2
 800c304:	4798      	blx	r3
 800c306:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c308:	e029      	b.n	800c35e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fa2a 	bl	800c766 <USBD_CtlError>
        err++;
 800c312:	7afb      	ldrb	r3, [r7, #11]
 800c314:	3301      	adds	r3, #1
 800c316:	72fb      	strb	r3, [r7, #11]
      break;
 800c318:	e021      	b.n	800c35e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	7c1b      	ldrb	r3, [r3, #16]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10d      	bne.n	800c33e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c32a:	f107 0208 	add.w	r2, r7, #8
 800c32e:	4610      	mov	r0, r2
 800c330:	4798      	blx	r3
 800c332:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	3301      	adds	r3, #1
 800c338:	2207      	movs	r2, #7
 800c33a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c33c:	e00f      	b.n	800c35e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fa10 	bl	800c766 <USBD_CtlError>
        err++;
 800c346:	7afb      	ldrb	r3, [r7, #11]
 800c348:	3301      	adds	r3, #1
 800c34a:	72fb      	strb	r3, [r7, #11]
      break;
 800c34c:	e007      	b.n	800c35e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fa08 	bl	800c766 <USBD_CtlError>
      err++;
 800c356:	7afb      	ldrb	r3, [r7, #11]
 800c358:	3301      	adds	r3, #1
 800c35a:	72fb      	strb	r3, [r7, #11]
      break;
 800c35c:	bf00      	nop
  }

  if (err != 0U)
 800c35e:	7afb      	ldrb	r3, [r7, #11]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d11e      	bne.n	800c3a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	88db      	ldrh	r3, [r3, #6]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d016      	beq.n	800c39a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c36c:	893b      	ldrh	r3, [r7, #8]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00e      	beq.n	800c390 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	88da      	ldrh	r2, [r3, #6]
 800c376:	893b      	ldrh	r3, [r7, #8]
 800c378:	4293      	cmp	r3, r2
 800c37a:	bf28      	it	cs
 800c37c:	4613      	movcs	r3, r2
 800c37e:	b29b      	uxth	r3, r3
 800c380:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c382:	893b      	ldrh	r3, [r7, #8]
 800c384:	461a      	mov	r2, r3
 800c386:	68f9      	ldr	r1, [r7, #12]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fa69 	bl	800c860 <USBD_CtlSendData>
 800c38e:	e009      	b.n	800c3a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f9e7 	bl	800c766 <USBD_CtlError>
 800c398:	e004      	b.n	800c3a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fac1 	bl	800c922 <USBD_CtlSendStatus>
 800c3a0:	e000      	b.n	800c3a4 <USBD_GetDescriptor+0x2cc>
    return;
 800c3a2:	bf00      	nop
  }
}
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop

0800c3ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	889b      	ldrh	r3, [r3, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d131      	bne.n	800c422 <USBD_SetAddress+0x76>
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	88db      	ldrh	r3, [r3, #6]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d12d      	bne.n	800c422 <USBD_SetAddress+0x76>
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	885b      	ldrh	r3, [r3, #2]
 800c3ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3cc:	d829      	bhi.n	800c422 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	885b      	ldrh	r3, [r3, #2]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	d104      	bne.n	800c3f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f9bc 	bl	800c766 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ee:	e01d      	b.n	800c42c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	7bfa      	ldrb	r2, [r7, #15]
 800c3f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 ff55 	bl	800d2ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fa8d 	bl	800c922 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d004      	beq.n	800c418 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2202      	movs	r2, #2
 800c412:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c416:	e009      	b.n	800c42c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c420:	e004      	b.n	800c42c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f99e 	bl	800c766 <USBD_CtlError>
  }
}
 800c42a:	bf00      	nop
 800c42c:	bf00      	nop
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c43e:	2300      	movs	r3, #0
 800c440:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	885b      	ldrh	r3, [r3, #2]
 800c446:	b2da      	uxtb	r2, r3
 800c448:	4b4e      	ldr	r3, [pc, #312]	@ (800c584 <USBD_SetConfig+0x150>)
 800c44a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c44c:	4b4d      	ldr	r3, [pc, #308]	@ (800c584 <USBD_SetConfig+0x150>)
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d905      	bls.n	800c460 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f985 	bl	800c766 <USBD_CtlError>
    return USBD_FAIL;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e08c      	b.n	800c57a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d002      	beq.n	800c472 <USBD_SetConfig+0x3e>
 800c46c:	2b03      	cmp	r3, #3
 800c46e:	d029      	beq.n	800c4c4 <USBD_SetConfig+0x90>
 800c470:	e075      	b.n	800c55e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c472:	4b44      	ldr	r3, [pc, #272]	@ (800c584 <USBD_SetConfig+0x150>)
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d020      	beq.n	800c4bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c47a:	4b42      	ldr	r3, [pc, #264]	@ (800c584 <USBD_SetConfig+0x150>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	461a      	mov	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c484:	4b3f      	ldr	r3, [pc, #252]	@ (800c584 <USBD_SetConfig+0x150>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7fe ffcd 	bl	800b42a <USBD_SetClassConfig>
 800c490:	4603      	mov	r3, r0
 800c492:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c494:	7bfb      	ldrb	r3, [r7, #15]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d008      	beq.n	800c4ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f962 	bl	800c766 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2202      	movs	r2, #2
 800c4a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4aa:	e065      	b.n	800c578 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fa38 	bl	800c922 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2203      	movs	r2, #3
 800c4b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c4ba:	e05d      	b.n	800c578 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fa30 	bl	800c922 <USBD_CtlSendStatus>
      break;
 800c4c2:	e059      	b.n	800c578 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c4c4:	4b2f      	ldr	r3, [pc, #188]	@ (800c584 <USBD_SetConfig+0x150>)
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d112      	bne.n	800c4f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c4d4:	4b2b      	ldr	r3, [pc, #172]	@ (800c584 <USBD_SetConfig+0x150>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4de:	4b29      	ldr	r3, [pc, #164]	@ (800c584 <USBD_SetConfig+0x150>)
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7fe ffbc 	bl	800b462 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fa19 	bl	800c922 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4f0:	e042      	b.n	800c578 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c4f2:	4b24      	ldr	r3, [pc, #144]	@ (800c584 <USBD_SetConfig+0x150>)
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d02a      	beq.n	800c556 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	b2db      	uxtb	r3, r3
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7fe ffaa 	bl	800b462 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c50e:	4b1d      	ldr	r3, [pc, #116]	@ (800c584 <USBD_SetConfig+0x150>)
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	461a      	mov	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c518:	4b1a      	ldr	r3, [pc, #104]	@ (800c584 <USBD_SetConfig+0x150>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	4619      	mov	r1, r3
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7fe ff83 	bl	800b42a <USBD_SetClassConfig>
 800c524:	4603      	mov	r3, r0
 800c526:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00f      	beq.n	800c54e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f918 	bl	800c766 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	4619      	mov	r1, r3
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7fe ff8f 	bl	800b462 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2202      	movs	r2, #2
 800c548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c54c:	e014      	b.n	800c578 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f9e7 	bl	800c922 <USBD_CtlSendStatus>
      break;
 800c554:	e010      	b.n	800c578 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 f9e3 	bl	800c922 <USBD_CtlSendStatus>
      break;
 800c55c:	e00c      	b.n	800c578 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c55e:	6839      	ldr	r1, [r7, #0]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f900 	bl	800c766 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c566:	4b07      	ldr	r3, [pc, #28]	@ (800c584 <USBD_SetConfig+0x150>)
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	4619      	mov	r1, r3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7fe ff78 	bl	800b462 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c572:	2303      	movs	r3, #3
 800c574:	73fb      	strb	r3, [r7, #15]
      break;
 800c576:	bf00      	nop
  }

  return ret;
 800c578:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	2001d2d4 	.word	0x2001d2d4

0800c588 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	88db      	ldrh	r3, [r3, #6]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d004      	beq.n	800c5a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f8e2 	bl	800c766 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5a2:	e023      	b.n	800c5ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	dc02      	bgt.n	800c5b6 <USBD_GetConfig+0x2e>
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dc03      	bgt.n	800c5bc <USBD_GetConfig+0x34>
 800c5b4:	e015      	b.n	800c5e2 <USBD_GetConfig+0x5a>
 800c5b6:	2b03      	cmp	r3, #3
 800c5b8:	d00b      	beq.n	800c5d2 <USBD_GetConfig+0x4a>
 800c5ba:	e012      	b.n	800c5e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 f948 	bl	800c860 <USBD_CtlSendData>
        break;
 800c5d0:	e00c      	b.n	800c5ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	3304      	adds	r3, #4
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f940 	bl	800c860 <USBD_CtlSendData>
        break;
 800c5e0:	e004      	b.n	800c5ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c5e2:	6839      	ldr	r1, [r7, #0]
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 f8be 	bl	800c766 <USBD_CtlError>
        break;
 800c5ea:	bf00      	nop
}
 800c5ec:	bf00      	nop
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c604:	b2db      	uxtb	r3, r3
 800c606:	3b01      	subs	r3, #1
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d81e      	bhi.n	800c64a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	88db      	ldrh	r3, [r3, #6]
 800c610:	2b02      	cmp	r3, #2
 800c612:	d004      	beq.n	800c61e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 f8a5 	bl	800c766 <USBD_CtlError>
        break;
 800c61c:	e01a      	b.n	800c654 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d005      	beq.n	800c63a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	f043 0202 	orr.w	r2, r3, #2
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	330c      	adds	r3, #12
 800c63e:	2202      	movs	r2, #2
 800c640:	4619      	mov	r1, r3
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f90c 	bl	800c860 <USBD_CtlSendData>
      break;
 800c648:	e004      	b.n	800c654 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f88a 	bl	800c766 <USBD_CtlError>
      break;
 800c652:	bf00      	nop
  }
}
 800c654:	bf00      	nop
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	885b      	ldrh	r3, [r3, #2]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d107      	bne.n	800c67e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2201      	movs	r2, #1
 800c672:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f953 	bl	800c922 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c67c:	e013      	b.n	800c6a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	885b      	ldrh	r3, [r3, #2]
 800c682:	2b02      	cmp	r3, #2
 800c684:	d10b      	bne.n	800c69e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	889b      	ldrh	r3, [r3, #4]
 800c68a:	0a1b      	lsrs	r3, r3, #8
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f943 	bl	800c922 <USBD_CtlSendStatus>
}
 800c69c:	e003      	b.n	800c6a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 f860 	bl	800c766 <USBD_CtlError>
}
 800c6a6:	bf00      	nop
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b082      	sub	sp, #8
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d80b      	bhi.n	800c6de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	885b      	ldrh	r3, [r3, #2]
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d10c      	bne.n	800c6e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f923 	bl	800c922 <USBD_CtlSendStatus>
      }
      break;
 800c6dc:	e004      	b.n	800c6e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c6de:	6839      	ldr	r1, [r7, #0]
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f840 	bl	800c766 <USBD_CtlError>
      break;
 800c6e6:	e000      	b.n	800c6ea <USBD_ClrFeature+0x3c>
      break;
 800c6e8:	bf00      	nop
  }
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	781a      	ldrb	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	3301      	adds	r3, #1
 800c70c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	781a      	ldrb	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3301      	adds	r3, #1
 800c71a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f7ff fa3d 	bl	800bb9c <SWAPBYTE>
 800c722:	4603      	mov	r3, r0
 800c724:	461a      	mov	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3301      	adds	r3, #1
 800c72e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	3301      	adds	r3, #1
 800c734:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	f7ff fa30 	bl	800bb9c <SWAPBYTE>
 800c73c:	4603      	mov	r3, r0
 800c73e:	461a      	mov	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	3301      	adds	r3, #1
 800c748:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3301      	adds	r3, #1
 800c74e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f7ff fa23 	bl	800bb9c <SWAPBYTE>
 800c756:	4603      	mov	r3, r0
 800c758:	461a      	mov	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	80da      	strh	r2, [r3, #6]
}
 800c75e:	bf00      	nop
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b082      	sub	sp, #8
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c770:	2180      	movs	r1, #128	@ 0x80
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fd30 	bl	800d1d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c778:	2100      	movs	r1, #0
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fd2c 	bl	800d1d8 <USBD_LL_StallEP>
}
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c794:	2300      	movs	r3, #0
 800c796:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d042      	beq.n	800c824 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c7a2:	6938      	ldr	r0, [r7, #16]
 800c7a4:	f000 f842 	bl	800c82c <USBD_GetLen>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7b2:	d808      	bhi.n	800c7c6 <USBD_GetString+0x3e>
 800c7b4:	6938      	ldr	r0, [r7, #16]
 800c7b6:	f000 f839 	bl	800c82c <USBD_GetLen>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	3301      	adds	r3, #1
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	005b      	lsls	r3, r3, #1
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	e001      	b.n	800c7ca <USBD_GetString+0x42>
 800c7c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c7ce:	7dfb      	ldrb	r3, [r7, #23]
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	7812      	ldrb	r2, [r2, #0]
 800c7d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	2203      	movs	r2, #3
 800c7e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7ea:	7dfb      	ldrb	r3, [r7, #23]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c7f0:	e013      	b.n	800c81a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c7f2:	7dfb      	ldrb	r3, [r7, #23]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	693a      	ldr	r2, [r7, #16]
 800c7fa:	7812      	ldrb	r2, [r2, #0]
 800c7fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	3301      	adds	r3, #1
 800c802:	613b      	str	r3, [r7, #16]
    idx++;
 800c804:	7dfb      	ldrb	r3, [r7, #23]
 800c806:	3301      	adds	r3, #1
 800c808:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	4413      	add	r3, r2
 800c810:	2200      	movs	r2, #0
 800c812:	701a      	strb	r2, [r3, #0]
    idx++;
 800c814:	7dfb      	ldrb	r3, [r7, #23]
 800c816:	3301      	adds	r3, #1
 800c818:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1e7      	bne.n	800c7f2 <USBD_GetString+0x6a>
 800c822:	e000      	b.n	800c826 <USBD_GetString+0x9e>
    return;
 800c824:	bf00      	nop
  }
}
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c834:	2300      	movs	r3, #0
 800c836:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c83c:	e005      	b.n	800c84a <USBD_GetLen+0x1e>
  {
    len++;
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
 800c840:	3301      	adds	r3, #1
 800c842:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	3301      	adds	r3, #1
 800c848:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1f5      	bne.n	800c83e <USBD_GetLen+0x12>
  }

  return len;
 800c852:	7bfb      	ldrb	r3, [r7, #15]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2202      	movs	r2, #2
 800c870:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	2100      	movs	r1, #0
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f000 fd2c 	bl	800d2ea <USBD_LL_Transmit>

  return USBD_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f000 fd1b 	bl	800d2ea <USBD_LL_Transmit>

  return USBD_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b084      	sub	sp, #16
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	60f8      	str	r0, [r7, #12]
 800c8c6:	60b9      	str	r1, [r7, #8]
 800c8c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2203      	movs	r2, #3
 800c8ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 fd1b 	bl	800d32c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	2100      	movs	r1, #0
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f000 fd0a 	bl	800d32c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b082      	sub	sp, #8
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2204      	movs	r2, #4
 800c92e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c932:	2300      	movs	r3, #0
 800c934:	2200      	movs	r2, #0
 800c936:	2100      	movs	r1, #0
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fcd6 	bl	800d2ea <USBD_LL_Transmit>

  return USBD_OK;
 800c93e:	2300      	movs	r3, #0
}
 800c940:	4618      	mov	r0, r3
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2205      	movs	r2, #5
 800c954:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c958:	2300      	movs	r3, #0
 800c95a:	2200      	movs	r2, #0
 800c95c:	2100      	movs	r1, #0
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fce4 	bl	800d32c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
	...

0800c970 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c974:	2200      	movs	r2, #0
 800c976:	4912      	ldr	r1, [pc, #72]	@ (800c9c0 <MX_USB_DEVICE_Init+0x50>)
 800c978:	4812      	ldr	r0, [pc, #72]	@ (800c9c4 <MX_USB_DEVICE_Init+0x54>)
 800c97a:	f7fe fcd9 	bl	800b330 <USBD_Init>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d001      	beq.n	800c988 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c984:	f7f5 ff08 	bl	8002798 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c988:	490f      	ldr	r1, [pc, #60]	@ (800c9c8 <MX_USB_DEVICE_Init+0x58>)
 800c98a:	480e      	ldr	r0, [pc, #56]	@ (800c9c4 <MX_USB_DEVICE_Init+0x54>)
 800c98c:	f7fe fd00 	bl	800b390 <USBD_RegisterClass>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c996:	f7f5 feff 	bl	8002798 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c99a:	490c      	ldr	r1, [pc, #48]	@ (800c9cc <MX_USB_DEVICE_Init+0x5c>)
 800c99c:	4809      	ldr	r0, [pc, #36]	@ (800c9c4 <MX_USB_DEVICE_Init+0x54>)
 800c99e:	f7fe fbf7 	bl	800b190 <USBD_CDC_RegisterInterface>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d001      	beq.n	800c9ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9a8:	f7f5 fef6 	bl	8002798 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9ac:	4805      	ldr	r0, [pc, #20]	@ (800c9c4 <MX_USB_DEVICE_Init+0x54>)
 800c9ae:	f7fe fd25 	bl	800b3fc <USBD_Start>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d001      	beq.n	800c9bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c9b8:	f7f5 feee 	bl	8002798 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c9bc:	bf00      	nop
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	200000b8 	.word	0x200000b8
 800c9c4:	2001d2d8 	.word	0x2001d2d8
 800c9c8:	20000024 	.word	0x20000024
 800c9cc:	200000a4 	.word	0x200000a4

0800c9d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	4905      	ldr	r1, [pc, #20]	@ (800c9ec <CDC_Init_FS+0x1c>)
 800c9d8:	4805      	ldr	r0, [pc, #20]	@ (800c9f0 <CDC_Init_FS+0x20>)
 800c9da:	f7fe fbf3 	bl	800b1c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c9de:	4905      	ldr	r1, [pc, #20]	@ (800c9f4 <CDC_Init_FS+0x24>)
 800c9e0:	4803      	ldr	r0, [pc, #12]	@ (800c9f0 <CDC_Init_FS+0x20>)
 800c9e2:	f7fe fc11 	bl	800b208 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c9e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	2001dee4 	.word	0x2001dee4
 800c9f0:	2001d2d8 	.word	0x2001d2d8
 800c9f4:	2001d6e4 	.word	0x2001d6e4

0800c9f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c9fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	6039      	str	r1, [r7, #0]
 800ca12:	71fb      	strb	r3, [r7, #7]
 800ca14:	4613      	mov	r3, r2
 800ca16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca18:	79fb      	ldrb	r3, [r7, #7]
 800ca1a:	2b23      	cmp	r3, #35	@ 0x23
 800ca1c:	d84a      	bhi.n	800cab4 <CDC_Control_FS+0xac>
 800ca1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ca24 <CDC_Control_FS+0x1c>)
 800ca20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca24:	0800cab5 	.word	0x0800cab5
 800ca28:	0800cab5 	.word	0x0800cab5
 800ca2c:	0800cab5 	.word	0x0800cab5
 800ca30:	0800cab5 	.word	0x0800cab5
 800ca34:	0800cab5 	.word	0x0800cab5
 800ca38:	0800cab5 	.word	0x0800cab5
 800ca3c:	0800cab5 	.word	0x0800cab5
 800ca40:	0800cab5 	.word	0x0800cab5
 800ca44:	0800cab5 	.word	0x0800cab5
 800ca48:	0800cab5 	.word	0x0800cab5
 800ca4c:	0800cab5 	.word	0x0800cab5
 800ca50:	0800cab5 	.word	0x0800cab5
 800ca54:	0800cab5 	.word	0x0800cab5
 800ca58:	0800cab5 	.word	0x0800cab5
 800ca5c:	0800cab5 	.word	0x0800cab5
 800ca60:	0800cab5 	.word	0x0800cab5
 800ca64:	0800cab5 	.word	0x0800cab5
 800ca68:	0800cab5 	.word	0x0800cab5
 800ca6c:	0800cab5 	.word	0x0800cab5
 800ca70:	0800cab5 	.word	0x0800cab5
 800ca74:	0800cab5 	.word	0x0800cab5
 800ca78:	0800cab5 	.word	0x0800cab5
 800ca7c:	0800cab5 	.word	0x0800cab5
 800ca80:	0800cab5 	.word	0x0800cab5
 800ca84:	0800cab5 	.word	0x0800cab5
 800ca88:	0800cab5 	.word	0x0800cab5
 800ca8c:	0800cab5 	.word	0x0800cab5
 800ca90:	0800cab5 	.word	0x0800cab5
 800ca94:	0800cab5 	.word	0x0800cab5
 800ca98:	0800cab5 	.word	0x0800cab5
 800ca9c:	0800cab5 	.word	0x0800cab5
 800caa0:	0800cab5 	.word	0x0800cab5
 800caa4:	0800cab5 	.word	0x0800cab5
 800caa8:	0800cab5 	.word	0x0800cab5
 800caac:	0800cab5 	.word	0x0800cab5
 800cab0:	0800cab5 	.word	0x0800cab5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cab4:	bf00      	nop
  }

  return (USBD_OK);
 800cab6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cab8:	4618      	mov	r0, r3
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a20      	ldr	r2, [pc, #128]	@ (800cb54 <CDC_Receive_FS+0x90>)
 800cad4:	8812      	ldrh	r2, [r2, #0]
 800cad6:	b292      	uxth	r2, r2
 800cad8:	f5c2 7296 	rsb	r2, r2, #300	@ 0x12c
                            (USB_RX_BUFFER_SIZE - usb_rx_index) : *Len;
 800cadc:	4293      	cmp	r3, r2
 800cade:	d905      	bls.n	800caec <CDC_Receive_FS+0x28>
 800cae0:	4b1c      	ldr	r3, [pc, #112]	@ (800cb54 <CDC_Receive_FS+0x90>)
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 800caea:	e001      	b.n	800caf0 <CDC_Receive_FS+0x2c>
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800caf0:	60fb      	str	r3, [r7, #12]

    memcpy((void*)&usb_rx_buffer[usb_rx_index], Buf, bytes_to_copy);
 800caf2:	4b18      	ldr	r3, [pc, #96]	@ (800cb54 <CDC_Receive_FS+0x90>)
 800caf4:	881b      	ldrh	r3, [r3, #0]
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	461a      	mov	r2, r3
 800cafa:	4b17      	ldr	r3, [pc, #92]	@ (800cb58 <CDC_Receive_FS+0x94>)
 800cafc:	4413      	add	r3, r2
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	6879      	ldr	r1, [r7, #4]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f002 fe77 	bl	800f7f6 <memcpy>
    usb_rx_index += bytes_to_copy;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	4b11      	ldr	r3, [pc, #68]	@ (800cb54 <CDC_Receive_FS+0x90>)
 800cb0e:	881b      	ldrh	r3, [r3, #0]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	4413      	add	r3, r2
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	4b0f      	ldr	r3, [pc, #60]	@ (800cb54 <CDC_Receive_FS+0x90>)
 800cb18:	801a      	strh	r2, [r3, #0]

    // Проверяем наличие завершающего символа
    if (usb_rx_index > 0 && usb_rx_buffer[usb_rx_index - 1] == '\n') {
 800cb1a:	4b0e      	ldr	r3, [pc, #56]	@ (800cb54 <CDC_Receive_FS+0x90>)
 800cb1c:	881b      	ldrh	r3, [r3, #0]
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00b      	beq.n	800cb3c <CDC_Receive_FS+0x78>
 800cb24:	4b0b      	ldr	r3, [pc, #44]	@ (800cb54 <CDC_Receive_FS+0x90>)
 800cb26:	881b      	ldrh	r3, [r3, #0]
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	4a0a      	ldr	r2, [pc, #40]	@ (800cb58 <CDC_Receive_FS+0x94>)
 800cb2e:	5cd3      	ldrb	r3, [r2, r3]
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b0a      	cmp	r3, #10
 800cb34:	d102      	bne.n	800cb3c <CDC_Receive_FS+0x78>
        new_data_received = 1;
 800cb36:	4b09      	ldr	r3, [pc, #36]	@ (800cb5c <CDC_Receive_FS+0x98>)
 800cb38:	2201      	movs	r2, #1
 800cb3a:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb3c:	6879      	ldr	r1, [r7, #4]
 800cb3e:	4808      	ldr	r0, [pc, #32]	@ (800cb60 <CDC_Receive_FS+0x9c>)
 800cb40:	f7fe fb62 	bl	800b208 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb44:	4806      	ldr	r0, [pc, #24]	@ (800cb60 <CDC_Receive_FS+0x9c>)
 800cb46:	f7fe fbbd 	bl	800b2c4 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3710      	adds	r7, #16
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	2001d6e0 	.word	0x2001d6e0
 800cb58:	2001d5b4 	.word	0x2001d5b4
 800cb5c:	2001d6e2 	.word	0x2001d6e2
 800cb60:	2001d2d8 	.word	0x2001d2d8

0800cb64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb74:	4b0d      	ldr	r3, [pc, #52]	@ (800cbac <CDC_Transmit_FS+0x48>)
 800cb76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cb7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cb86:	2301      	movs	r3, #1
 800cb88:	e00b      	b.n	800cba2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb8a:	887b      	ldrh	r3, [r7, #2]
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	6879      	ldr	r1, [r7, #4]
 800cb90:	4806      	ldr	r0, [pc, #24]	@ (800cbac <CDC_Transmit_FS+0x48>)
 800cb92:	f7fe fb17 	bl	800b1c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb96:	4805      	ldr	r0, [pc, #20]	@ (800cbac <CDC_Transmit_FS+0x48>)
 800cb98:	f7fe fb54 	bl	800b244 <USBD_CDC_TransmitPacket>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	2001d2d8 	.word	0x2001d2d8

0800cbb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b087      	sub	sp, #28
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cbc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	371c      	adds	r7, #28
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
	...

0800cbd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	6039      	str	r1, [r7, #0]
 800cbde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	2212      	movs	r2, #18
 800cbe4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbe6:	4b03      	ldr	r3, [pc, #12]	@ (800cbf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	370c      	adds	r7, #12
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr
 800cbf4:	200000d4 	.word	0x200000d4

0800cbf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	4603      	mov	r3, r0
 800cc00:	6039      	str	r1, [r7, #0]
 800cc02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	2204      	movs	r2, #4
 800cc08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc0a:	4b03      	ldr	r3, [pc, #12]	@ (800cc18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr
 800cc18:	200000e8 	.word	0x200000e8

0800cc1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	4603      	mov	r3, r0
 800cc24:	6039      	str	r1, [r7, #0]
 800cc26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc28:	79fb      	ldrb	r3, [r7, #7]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d105      	bne.n	800cc3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	4907      	ldr	r1, [pc, #28]	@ (800cc50 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc32:	4808      	ldr	r0, [pc, #32]	@ (800cc54 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc34:	f7ff fda8 	bl	800c788 <USBD_GetString>
 800cc38:	e004      	b.n	800cc44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	4904      	ldr	r1, [pc, #16]	@ (800cc50 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc3e:	4805      	ldr	r0, [pc, #20]	@ (800cc54 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc40:	f7ff fda2 	bl	800c788 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc44:	4b02      	ldr	r3, [pc, #8]	@ (800cc50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	2001e6e4 	.word	0x2001e6e4
 800cc54:	080132d4 	.word	0x080132d4

0800cc58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	4603      	mov	r3, r0
 800cc60:	6039      	str	r1, [r7, #0]
 800cc62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	4904      	ldr	r1, [pc, #16]	@ (800cc78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc68:	4804      	ldr	r0, [pc, #16]	@ (800cc7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc6a:	f7ff fd8d 	bl	800c788 <USBD_GetString>
  return USBD_StrDesc;
 800cc6e:	4b02      	ldr	r3, [pc, #8]	@ (800cc78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	2001e6e4 	.word	0x2001e6e4
 800cc7c:	080132ec 	.word	0x080132ec

0800cc80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	6039      	str	r1, [r7, #0]
 800cc8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	221a      	movs	r2, #26
 800cc90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc92:	f000 f843 	bl	800cd1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc96:	4b02      	ldr	r3, [pc, #8]	@ (800cca0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	200000ec 	.word	0x200000ec

0800cca4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	6039      	str	r1, [r7, #0]
 800ccae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ccb0:	79fb      	ldrb	r3, [r7, #7]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d105      	bne.n	800ccc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	4907      	ldr	r1, [pc, #28]	@ (800ccd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccba:	4808      	ldr	r0, [pc, #32]	@ (800ccdc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccbc:	f7ff fd64 	bl	800c788 <USBD_GetString>
 800ccc0:	e004      	b.n	800cccc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	4904      	ldr	r1, [pc, #16]	@ (800ccd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccc6:	4805      	ldr	r0, [pc, #20]	@ (800ccdc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccc8:	f7ff fd5e 	bl	800c788 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cccc:	4b02      	ldr	r3, [pc, #8]	@ (800ccd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	2001e6e4 	.word	0x2001e6e4
 800ccdc:	08013300 	.word	0x08013300

0800cce0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	4603      	mov	r3, r0
 800cce8:	6039      	str	r1, [r7, #0]
 800ccea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d105      	bne.n	800ccfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccf2:	683a      	ldr	r2, [r7, #0]
 800ccf4:	4907      	ldr	r1, [pc, #28]	@ (800cd14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccf6:	4808      	ldr	r0, [pc, #32]	@ (800cd18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccf8:	f7ff fd46 	bl	800c788 <USBD_GetString>
 800ccfc:	e004      	b.n	800cd08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	4904      	ldr	r1, [pc, #16]	@ (800cd14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd02:	4805      	ldr	r0, [pc, #20]	@ (800cd18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd04:	f7ff fd40 	bl	800c788 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd08:	4b02      	ldr	r3, [pc, #8]	@ (800cd14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	2001e6e4 	.word	0x2001e6e4
 800cd18:	0801330c 	.word	0x0801330c

0800cd1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd22:	4b0f      	ldr	r3, [pc, #60]	@ (800cd60 <Get_SerialNum+0x44>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd28:	4b0e      	ldr	r3, [pc, #56]	@ (800cd64 <Get_SerialNum+0x48>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cd68 <Get_SerialNum+0x4c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4413      	add	r3, r2
 800cd3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d009      	beq.n	800cd56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd42:	2208      	movs	r2, #8
 800cd44:	4909      	ldr	r1, [pc, #36]	@ (800cd6c <Get_SerialNum+0x50>)
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f000 f814 	bl	800cd74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd4c:	2204      	movs	r2, #4
 800cd4e:	4908      	ldr	r1, [pc, #32]	@ (800cd70 <Get_SerialNum+0x54>)
 800cd50:	68b8      	ldr	r0, [r7, #8]
 800cd52:	f000 f80f 	bl	800cd74 <IntToUnicode>
  }
}
 800cd56:	bf00      	nop
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	1fff7a10 	.word	0x1fff7a10
 800cd64:	1fff7a14 	.word	0x1fff7a14
 800cd68:	1fff7a18 	.word	0x1fff7a18
 800cd6c:	200000ee 	.word	0x200000ee
 800cd70:	200000fe 	.word	0x200000fe

0800cd74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd82:	2300      	movs	r3, #0
 800cd84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd86:	2300      	movs	r3, #0
 800cd88:	75fb      	strb	r3, [r7, #23]
 800cd8a:	e027      	b.n	800cddc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	0f1b      	lsrs	r3, r3, #28
 800cd90:	2b09      	cmp	r3, #9
 800cd92:	d80b      	bhi.n	800cdac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	0f1b      	lsrs	r3, r3, #28
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	005b      	lsls	r3, r3, #1
 800cd9e:	4619      	mov	r1, r3
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	440b      	add	r3, r1
 800cda4:	3230      	adds	r2, #48	@ 0x30
 800cda6:	b2d2      	uxtb	r2, r2
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	e00a      	b.n	800cdc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	0f1b      	lsrs	r3, r3, #28
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	7dfb      	ldrb	r3, [r7, #23]
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	440b      	add	r3, r1
 800cdbc:	3237      	adds	r2, #55	@ 0x37
 800cdbe:	b2d2      	uxtb	r2, r2
 800cdc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	011b      	lsls	r3, r3, #4
 800cdc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdc8:	7dfb      	ldrb	r3, [r7, #23]
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	3301      	adds	r3, #1
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	75fb      	strb	r3, [r7, #23]
 800cddc:	7dfa      	ldrb	r2, [r7, #23]
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d3d3      	bcc.n	800cd8c <IntToUnicode+0x18>
  }
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop
 800cde8:	371c      	adds	r7, #28
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
	...

0800cdf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b08a      	sub	sp, #40	@ 0x28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdfc:	f107 0314 	add.w	r3, r7, #20
 800ce00:	2200      	movs	r2, #0
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	605a      	str	r2, [r3, #4]
 800ce06:	609a      	str	r2, [r3, #8]
 800ce08:	60da      	str	r2, [r3, #12]
 800ce0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce14:	d13a      	bne.n	800ce8c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce16:	2300      	movs	r3, #0
 800ce18:	613b      	str	r3, [r7, #16]
 800ce1a:	4b1e      	ldr	r3, [pc, #120]	@ (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce1e:	4a1d      	ldr	r2, [pc, #116]	@ (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce20:	f043 0301 	orr.w	r3, r3, #1
 800ce24:	6313      	str	r3, [r2, #48]	@ 0x30
 800ce26:	4b1b      	ldr	r3, [pc, #108]	@ (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	613b      	str	r3, [r7, #16]
 800ce30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ce36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce38:	2302      	movs	r3, #2
 800ce3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce40:	2303      	movs	r3, #3
 800ce42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce44:	230a      	movs	r3, #10
 800ce46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce48:	f107 0314 	add.w	r3, r7, #20
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4812      	ldr	r0, [pc, #72]	@ (800ce98 <HAL_PCD_MspInit+0xa4>)
 800ce50:	f7f7 fa18 	bl	8004284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce54:	4b0f      	ldr	r3, [pc, #60]	@ (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce58:	4a0e      	ldr	r2, [pc, #56]	@ (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce5e:	6353      	str	r3, [r2, #52]	@ 0x34
 800ce60:	2300      	movs	r3, #0
 800ce62:	60fb      	str	r3, [r7, #12]
 800ce64:	4b0b      	ldr	r3, [pc, #44]	@ (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce68:	4a0a      	ldr	r2, [pc, #40]	@ (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ce6e:	6453      	str	r3, [r2, #68]	@ 0x44
 800ce70:	4b08      	ldr	r3, [pc, #32]	@ (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce78:	60fb      	str	r3, [r7, #12]
 800ce7a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	2100      	movs	r1, #0
 800ce80:	2043      	movs	r0, #67	@ 0x43
 800ce82:	f7f6 fec0 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce86:	2043      	movs	r0, #67	@ 0x43
 800ce88:	f7f6 fed9 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce8c:	bf00      	nop
 800ce8e:	3728      	adds	r7, #40	@ 0x28
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	40023800 	.word	0x40023800
 800ce98:	40020000 	.word	0x40020000

0800ce9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	f7fe faef 	bl	800b496 <USBD_LL_SetupStage>
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ced2:	78fa      	ldrb	r2, [r7, #3]
 800ced4:	6879      	ldr	r1, [r7, #4]
 800ced6:	4613      	mov	r3, r2
 800ced8:	00db      	lsls	r3, r3, #3
 800ceda:	4413      	add	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	440b      	add	r3, r1
 800cee0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	78fb      	ldrb	r3, [r7, #3]
 800cee8:	4619      	mov	r1, r3
 800ceea:	f7fe fb29 	bl	800b540 <USBD_LL_DataOutStage>
}
 800ceee:	bf00      	nop
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b082      	sub	sp, #8
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	460b      	mov	r3, r1
 800cf00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cf08:	78fa      	ldrb	r2, [r7, #3]
 800cf0a:	6879      	ldr	r1, [r7, #4]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	4413      	add	r3, r2
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	440b      	add	r3, r1
 800cf16:	3320      	adds	r3, #32
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	78fb      	ldrb	r3, [r7, #3]
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	f7fe fbcb 	bl	800b6b8 <USBD_LL_DataInStage>
}
 800cf22:	bf00      	nop
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fe fd0f 	bl	800b95c <USBD_LL_SOF>
}
 800cf3e:	bf00      	nop
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	79db      	ldrb	r3, [r3, #7]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d102      	bne.n	800cf60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	73fb      	strb	r3, [r7, #15]
 800cf5e:	e008      	b.n	800cf72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	79db      	ldrb	r3, [r3, #7]
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d102      	bne.n	800cf6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	73fb      	strb	r3, [r7, #15]
 800cf6c:	e001      	b.n	800cf72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cf6e:	f7f5 fc13 	bl	8002798 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf78:	7bfa      	ldrb	r2, [r7, #15]
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe fca9 	bl	800b8d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7fe fc50 	bl	800b82e <USBD_LL_Reset>
}
 800cf8e:	bf00      	nop
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
	...

0800cf98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe fca4 	bl	800b8f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	6812      	ldr	r2, [r2, #0]
 800cfba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cfbe:	f043 0301 	orr.w	r3, r3, #1
 800cfc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	7adb      	ldrb	r3, [r3, #11]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d005      	beq.n	800cfd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfcc:	4b04      	ldr	r3, [pc, #16]	@ (800cfe0 <HAL_PCD_SuspendCallback+0x48>)
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	4a03      	ldr	r2, [pc, #12]	@ (800cfe0 <HAL_PCD_SuspendCallback+0x48>)
 800cfd2:	f043 0306 	orr.w	r3, r3, #6
 800cfd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cfd8:	bf00      	nop
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	e000ed00 	.word	0xe000ed00

0800cfe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe fc9a 	bl	800b92c <USBD_LL_Resume>
}
 800cff8:	bf00      	nop
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	460b      	mov	r3, r1
 800d00a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d012:	78fa      	ldrb	r2, [r7, #3]
 800d014:	4611      	mov	r1, r2
 800d016:	4618      	mov	r0, r3
 800d018:	f7fe fcf2 	bl	800ba00 <USBD_LL_IsoOUTIncomplete>
}
 800d01c:	bf00      	nop
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	460b      	mov	r3, r1
 800d02e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d036:	78fa      	ldrb	r2, [r7, #3]
 800d038:	4611      	mov	r1, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe fcae 	bl	800b99c <USBD_LL_IsoINIncomplete>
}
 800d040:	bf00      	nop
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d056:	4618      	mov	r0, r3
 800d058:	f7fe fd04 	bl	800ba64 <USBD_LL_DevConnected>
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe fd01 	bl	800ba7a <USBD_LL_DevDisconnected>
}
 800d078:	bf00      	nop
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d13c      	bne.n	800d10a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d090:	4a20      	ldr	r2, [pc, #128]	@ (800d114 <USBD_LL_Init+0x94>)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a1e      	ldr	r2, [pc, #120]	@ (800d114 <USBD_LL_Init+0x94>)
 800d09c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d0a0:	4b1c      	ldr	r3, [pc, #112]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d0a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d0a8:	4b1a      	ldr	r3, [pc, #104]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0aa:	2204      	movs	r2, #4
 800d0ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d0ae:	4b19      	ldr	r3, [pc, #100]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d0b4:	4b17      	ldr	r3, [pc, #92]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d0ba:	4b16      	ldr	r3, [pc, #88]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0bc:	2202      	movs	r2, #2
 800d0be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d0c0:	4b14      	ldr	r3, [pc, #80]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d0c6:	4b13      	ldr	r3, [pc, #76]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d0cc:	4b11      	ldr	r3, [pc, #68]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d0d2:	4b10      	ldr	r3, [pc, #64]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d0d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d0de:	480d      	ldr	r0, [pc, #52]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0e0:	f7f7 fa9d 	bl	800461e <HAL_PCD_Init>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d0ea:	f7f5 fb55 	bl	8002798 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d0ee:	2180      	movs	r1, #128	@ 0x80
 800d0f0:	4808      	ldr	r0, [pc, #32]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0f2:	f7f8 fcca 	bl	8005a8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d0f6:	2240      	movs	r2, #64	@ 0x40
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	4806      	ldr	r0, [pc, #24]	@ (800d114 <USBD_LL_Init+0x94>)
 800d0fc:	f7f8 fc7e 	bl	80059fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d100:	2280      	movs	r2, #128	@ 0x80
 800d102:	2101      	movs	r1, #1
 800d104:	4803      	ldr	r0, [pc, #12]	@ (800d114 <USBD_LL_Init+0x94>)
 800d106:	f7f8 fc79 	bl	80059fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	2001e8e4 	.word	0x2001e8e4

0800d118 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d12e:	4618      	mov	r0, r3
 800d130:	f7f7 fb84 	bl	800483c <HAL_PCD_Start>
 800d134:	4603      	mov	r3, r0
 800d136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d138:	7bfb      	ldrb	r3, [r7, #15]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 f942 	bl	800d3c4 <USBD_Get_USB_Status>
 800d140:	4603      	mov	r3, r0
 800d142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d144:	7bbb      	ldrb	r3, [r7, #14]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b084      	sub	sp, #16
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	4608      	mov	r0, r1
 800d158:	4611      	mov	r1, r2
 800d15a:	461a      	mov	r2, r3
 800d15c:	4603      	mov	r3, r0
 800d15e:	70fb      	strb	r3, [r7, #3]
 800d160:	460b      	mov	r3, r1
 800d162:	70bb      	strb	r3, [r7, #2]
 800d164:	4613      	mov	r3, r2
 800d166:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d168:	2300      	movs	r3, #0
 800d16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d176:	78bb      	ldrb	r3, [r7, #2]
 800d178:	883a      	ldrh	r2, [r7, #0]
 800d17a:	78f9      	ldrb	r1, [r7, #3]
 800d17c:	f7f8 f858 	bl	8005230 <HAL_PCD_EP_Open>
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	4618      	mov	r0, r3
 800d188:	f000 f91c 	bl	800d3c4 <USBD_Get_USB_Status>
 800d18c:	4603      	mov	r3, r0
 800d18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d190:	7bbb      	ldrb	r3, [r7, #14]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b084      	sub	sp, #16
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1b4:	78fa      	ldrb	r2, [r7, #3]
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7f8 f8a3 	bl	8005304 <HAL_PCD_EP_Close>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 f8fd 	bl	800d3c4 <USBD_Get_USB_Status>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1f2:	78fa      	ldrb	r2, [r7, #3]
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f8 f95b 	bl	80054b2 <HAL_PCD_EP_SetStall>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	4618      	mov	r0, r3
 800d204:	f000 f8de 	bl	800d3c4 <USBD_Get_USB_Status>
 800d208:	4603      	mov	r3, r0
 800d20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
 800d21e:	460b      	mov	r3, r1
 800d220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d222:	2300      	movs	r3, #0
 800d224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d230:	78fa      	ldrb	r2, [r7, #3]
 800d232:	4611      	mov	r1, r2
 800d234:	4618      	mov	r0, r3
 800d236:	f7f8 f99f 	bl	8005578 <HAL_PCD_EP_ClrStall>
 800d23a:	4603      	mov	r3, r0
 800d23c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	4618      	mov	r0, r3
 800d242:	f000 f8bf 	bl	800d3c4 <USBD_Get_USB_Status>
 800d246:	4603      	mov	r3, r0
 800d248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d254:	b480      	push	{r7}
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d266:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	da0b      	bge.n	800d288 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d270:	78fb      	ldrb	r3, [r7, #3]
 800d272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d276:	68f9      	ldr	r1, [r7, #12]
 800d278:	4613      	mov	r3, r2
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	4413      	add	r3, r2
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	440b      	add	r3, r1
 800d282:	3316      	adds	r3, #22
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	e00b      	b.n	800d2a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d288:	78fb      	ldrb	r3, [r7, #3]
 800d28a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d28e:	68f9      	ldr	r1, [r7, #12]
 800d290:	4613      	mov	r3, r2
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	4413      	add	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	440b      	add	r3, r1
 800d29a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d29e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3714      	adds	r7, #20
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d2c6:	78fa      	ldrb	r2, [r7, #3]
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7f7 ff8c 	bl	80051e8 <HAL_PCD_SetAddress>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d4:	7bfb      	ldrb	r3, [r7, #15]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 f874 	bl	800d3c4 <USBD_Get_USB_Status>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b086      	sub	sp, #24
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	603b      	str	r3, [r7, #0]
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d308:	7af9      	ldrb	r1, [r7, #11]
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	f7f8 f896 	bl	800543e <HAL_PCD_EP_Transmit>
 800d312:	4603      	mov	r3, r0
 800d314:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d316:	7dfb      	ldrb	r3, [r7, #23]
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 f853 	bl	800d3c4 <USBD_Get_USB_Status>
 800d31e:	4603      	mov	r3, r0
 800d320:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d322:	7dbb      	ldrb	r3, [r7, #22]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	607a      	str	r2, [r7, #4]
 800d336:	603b      	str	r3, [r7, #0]
 800d338:	460b      	mov	r3, r1
 800d33a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d33c:	2300      	movs	r3, #0
 800d33e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d34a:	7af9      	ldrb	r1, [r7, #11]
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	f7f8 f822 	bl	8005398 <HAL_PCD_EP_Receive>
 800d354:	4603      	mov	r3, r0
 800d356:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d358:	7dfb      	ldrb	r3, [r7, #23]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f000 f832 	bl	800d3c4 <USBD_Get_USB_Status>
 800d360:	4603      	mov	r3, r0
 800d362:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d364:	7dbb      	ldrb	r3, [r7, #22]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b082      	sub	sp, #8
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	460b      	mov	r3, r1
 800d378:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d380:	78fa      	ldrb	r2, [r7, #3]
 800d382:	4611      	mov	r1, r2
 800d384:	4618      	mov	r0, r3
 800d386:	f7f8 f842 	bl	800540e <HAL_PCD_EP_GetRxCount>
 800d38a:	4603      	mov	r3, r0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d39c:	4b03      	ldr	r3, [pc, #12]	@ (800d3ac <USBD_static_malloc+0x18>)
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	370c      	adds	r7, #12
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	2001edc8 	.word	0x2001edc8

0800d3b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]

}
 800d3b8:	bf00      	nop
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3d2:	79fb      	ldrb	r3, [r7, #7]
 800d3d4:	2b03      	cmp	r3, #3
 800d3d6:	d817      	bhi.n	800d408 <USBD_Get_USB_Status+0x44>
 800d3d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e0 <USBD_Get_USB_Status+0x1c>)
 800d3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3de:	bf00      	nop
 800d3e0:	0800d3f1 	.word	0x0800d3f1
 800d3e4:	0800d3f7 	.word	0x0800d3f7
 800d3e8:	0800d3fd 	.word	0x0800d3fd
 800d3ec:	0800d403 	.word	0x0800d403
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f4:	e00b      	b.n	800d40e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3f6:	2303      	movs	r3, #3
 800d3f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d3fa:	e008      	b.n	800d40e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d400:	e005      	b.n	800d40e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d402:	2303      	movs	r3, #3
 800d404:	73fb      	strb	r3, [r7, #15]
    break;
 800d406:	e002      	b.n	800d40e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d408:	2303      	movs	r3, #3
 800d40a:	73fb      	strb	r3, [r7, #15]
    break;
 800d40c:	bf00      	nop
  }
  return usb_status;
 800d40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <arm_copy_f32>:
 800d41c:	b4f0      	push	{r4, r5, r6, r7}
 800d41e:	0897      	lsrs	r7, r2, #2
 800d420:	d01e      	beq.n	800d460 <arm_copy_f32+0x44>
 800d422:	f100 0410 	add.w	r4, r0, #16
 800d426:	f101 0310 	add.w	r3, r1, #16
 800d42a:	463d      	mov	r5, r7
 800d42c:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800d430:	f843 6c10 	str.w	r6, [r3, #-16]
 800d434:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800d438:	f843 6c0c 	str.w	r6, [r3, #-12]
 800d43c:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800d440:	f843 6c08 	str.w	r6, [r3, #-8]
 800d444:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800d448:	f843 6c04 	str.w	r6, [r3, #-4]
 800d44c:	3d01      	subs	r5, #1
 800d44e:	f104 0410 	add.w	r4, r4, #16
 800d452:	f103 0310 	add.w	r3, r3, #16
 800d456:	d1e9      	bne.n	800d42c <arm_copy_f32+0x10>
 800d458:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800d45c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800d460:	f012 0203 	ands.w	r2, r2, #3
 800d464:	d009      	beq.n	800d47a <arm_copy_f32+0x5e>
 800d466:	6803      	ldr	r3, [r0, #0]
 800d468:	600b      	str	r3, [r1, #0]
 800d46a:	3a01      	subs	r2, #1
 800d46c:	d005      	beq.n	800d47a <arm_copy_f32+0x5e>
 800d46e:	6843      	ldr	r3, [r0, #4]
 800d470:	604b      	str	r3, [r1, #4]
 800d472:	2a01      	cmp	r2, #1
 800d474:	bf1c      	itt	ne
 800d476:	6883      	ldrne	r3, [r0, #8]
 800d478:	608b      	strne	r3, [r1, #8]
 800d47a:	bcf0      	pop	{r4, r5, r6, r7}
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop

0800d480 <arm_std_f32>:
 800d480:	b510      	push	{r4, lr}
 800d482:	ed2d 8b02 	vpush	{d8}
 800d486:	b082      	sub	sp, #8
 800d488:	4614      	mov	r4, r2
 800d48a:	aa01      	add	r2, sp, #4
 800d48c:	f000 f8e4 	bl	800d658 <arm_var_f32>
 800d490:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d494:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d49c:	db0c      	blt.n	800d4b8 <arm_std_f32+0x38>
 800d49e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d4aa:	d408      	bmi.n	800d4be <arm_std_f32+0x3e>
 800d4ac:	ed84 8a00 	vstr	s16, [r4]
 800d4b0:	b002      	add	sp, #8
 800d4b2:	ecbd 8b02 	vpop	{d8}
 800d4b6:	bd10      	pop	{r4, pc}
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	6023      	str	r3, [r4, #0]
 800d4bc:	e7f8      	b.n	800d4b0 <arm_std_f32+0x30>
 800d4be:	f005 fa63 	bl	8012988 <sqrtf>
 800d4c2:	e7f3      	b.n	800d4ac <arm_std_f32+0x2c>

0800d4c4 <arm_mean_f32>:
 800d4c4:	b430      	push	{r4, r5}
 800d4c6:	088d      	lsrs	r5, r1, #2
 800d4c8:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800d53c <arm_mean_f32+0x78>
 800d4cc:	d018      	beq.n	800d500 <arm_mean_f32+0x3c>
 800d4ce:	f100 0310 	add.w	r3, r0, #16
 800d4d2:	462c      	mov	r4, r5
 800d4d4:	ed53 5a04 	vldr	s11, [r3, #-16]
 800d4d8:	ed13 6a03 	vldr	s12, [r3, #-12]
 800d4dc:	ed53 6a02 	vldr	s13, [r3, #-8]
 800d4e0:	ed13 7a01 	vldr	s14, [r3, #-4]
 800d4e4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d4e8:	3c01      	subs	r4, #1
 800d4ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d4ee:	f103 0310 	add.w	r3, r3, #16
 800d4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4fa:	d1eb      	bne.n	800d4d4 <arm_mean_f32+0x10>
 800d4fc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800d500:	f011 0303 	ands.w	r3, r1, #3
 800d504:	d00f      	beq.n	800d526 <arm_mean_f32+0x62>
 800d506:	ed90 7a00 	vldr	s14, [r0]
 800d50a:	3b01      	subs	r3, #1
 800d50c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d510:	d009      	beq.n	800d526 <arm_mean_f32+0x62>
 800d512:	ed90 7a01 	vldr	s14, [r0, #4]
 800d516:	2b01      	cmp	r3, #1
 800d518:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d51c:	bf1c      	itt	ne
 800d51e:	ed90 7a02 	vldrne	s14, [r0, #8]
 800d522:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800d526:	ee07 1a10 	vmov	s14, r1
 800d52a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d52e:	bc30      	pop	{r4, r5}
 800d530:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d534:	edc2 6a00 	vstr	s13, [r2]
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	00000000 	.word	0x00000000

0800d540 <arm_scale_f32>:
 800d540:	b470      	push	{r4, r5, r6}
 800d542:	0896      	lsrs	r6, r2, #2
 800d544:	d026      	beq.n	800d594 <arm_scale_f32+0x54>
 800d546:	f100 0410 	add.w	r4, r0, #16
 800d54a:	f101 0310 	add.w	r3, r1, #16
 800d54e:	4635      	mov	r5, r6
 800d550:	ed14 6a03 	vldr	s12, [r4, #-12]
 800d554:	ed54 6a02 	vldr	s13, [r4, #-8]
 800d558:	ed14 7a01 	vldr	s14, [r4, #-4]
 800d55c:	ed54 7a04 	vldr	s15, [r4, #-16]
 800d560:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d564:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d568:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d56c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d570:	3d01      	subs	r5, #1
 800d572:	ed03 6a03 	vstr	s12, [r3, #-12]
 800d576:	ed43 6a02 	vstr	s13, [r3, #-8]
 800d57a:	ed03 7a01 	vstr	s14, [r3, #-4]
 800d57e:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d582:	f104 0410 	add.w	r4, r4, #16
 800d586:	f103 0310 	add.w	r3, r3, #16
 800d58a:	d1e1      	bne.n	800d550 <arm_scale_f32+0x10>
 800d58c:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800d590:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800d594:	f012 0203 	ands.w	r2, r2, #3
 800d598:	d015      	beq.n	800d5c6 <arm_scale_f32+0x86>
 800d59a:	edd0 7a00 	vldr	s15, [r0]
 800d59e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d5a2:	3a01      	subs	r2, #1
 800d5a4:	edc1 7a00 	vstr	s15, [r1]
 800d5a8:	d00d      	beq.n	800d5c6 <arm_scale_f32+0x86>
 800d5aa:	edd0 7a01 	vldr	s15, [r0, #4]
 800d5ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d5b2:	2a01      	cmp	r2, #1
 800d5b4:	edc1 7a01 	vstr	s15, [r1, #4]
 800d5b8:	d005      	beq.n	800d5c6 <arm_scale_f32+0x86>
 800d5ba:	edd0 7a02 	vldr	s15, [r0, #8]
 800d5be:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d5c2:	ed81 0a02 	vstr	s0, [r1, #8]
 800d5c6:	bc70      	pop	{r4, r5, r6}
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop

0800d5cc <arm_offset_f32>:
 800d5cc:	b470      	push	{r4, r5, r6}
 800d5ce:	0896      	lsrs	r6, r2, #2
 800d5d0:	d026      	beq.n	800d620 <arm_offset_f32+0x54>
 800d5d2:	f100 0410 	add.w	r4, r0, #16
 800d5d6:	f101 0310 	add.w	r3, r1, #16
 800d5da:	4635      	mov	r5, r6
 800d5dc:	ed54 7a04 	vldr	s15, [r4, #-16]
 800d5e0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d5e4:	3d01      	subs	r5, #1
 800d5e6:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d5ea:	ed54 7a03 	vldr	s15, [r4, #-12]
 800d5ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d5f2:	f104 0410 	add.w	r4, r4, #16
 800d5f6:	ed43 7a03 	vstr	s15, [r3, #-12]
 800d5fa:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800d5fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d602:	f103 0310 	add.w	r3, r3, #16
 800d606:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800d60a:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800d60e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d612:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800d616:	d1e1      	bne.n	800d5dc <arm_offset_f32+0x10>
 800d618:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800d61c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800d620:	f012 0203 	ands.w	r2, r2, #3
 800d624:	d015      	beq.n	800d652 <arm_offset_f32+0x86>
 800d626:	edd0 7a00 	vldr	s15, [r0]
 800d62a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d62e:	3a01      	subs	r2, #1
 800d630:	edc1 7a00 	vstr	s15, [r1]
 800d634:	d00d      	beq.n	800d652 <arm_offset_f32+0x86>
 800d636:	edd0 7a01 	vldr	s15, [r0, #4]
 800d63a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d63e:	2a01      	cmp	r2, #1
 800d640:	edc1 7a01 	vstr	s15, [r1, #4]
 800d644:	d005      	beq.n	800d652 <arm_offset_f32+0x86>
 800d646:	edd0 7a02 	vldr	s15, [r0, #8]
 800d64a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d64e:	ed81 0a02 	vstr	s0, [r1, #8]
 800d652:	bc70      	pop	{r4, r5, r6}
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop

0800d658 <arm_var_f32>:
 800d658:	2901      	cmp	r1, #1
 800d65a:	f240 809a 	bls.w	800d792 <arm_var_f32+0x13a>
 800d65e:	b4f0      	push	{r4, r5, r6, r7}
 800d660:	088d      	lsrs	r5, r1, #2
 800d662:	f000 80a0 	beq.w	800d7a6 <arm_var_f32+0x14e>
 800d666:	f100 0310 	add.w	r3, r0, #16
 800d66a:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800d7b0 <arm_var_f32+0x158>
 800d66e:	461c      	mov	r4, r3
 800d670:	462e      	mov	r6, r5
 800d672:	ed54 5a04 	vldr	s11, [r4, #-16]
 800d676:	ed14 6a03 	vldr	s12, [r4, #-12]
 800d67a:	ed54 6a02 	vldr	s13, [r4, #-8]
 800d67e:	ed14 7a01 	vldr	s14, [r4, #-4]
 800d682:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d686:	3e01      	subs	r6, #1
 800d688:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d68c:	f104 0410 	add.w	r4, r4, #16
 800d690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d694:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d698:	d1eb      	bne.n	800d672 <arm_var_f32+0x1a>
 800d69a:	f011 0403 	ands.w	r4, r1, #3
 800d69e:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800d6a2:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800d6a6:	d077      	beq.n	800d798 <arm_var_f32+0x140>
 800d6a8:	ed96 7a00 	vldr	s14, [r6]
 800d6ac:	1e63      	subs	r3, r4, #1
 800d6ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6b2:	d063      	beq.n	800d77c <arm_var_f32+0x124>
 800d6b4:	ed96 7a01 	vldr	s14, [r6, #4]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6be:	d05d      	beq.n	800d77c <arm_var_f32+0x124>
 800d6c0:	ed96 7a02 	vldr	s14, [r6, #8]
 800d6c4:	ee06 1a90 	vmov	s13, r1
 800d6c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6cc:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800d6d0:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d6d4:	2d00      	cmp	r5, #0
 800d6d6:	d059      	beq.n	800d78c <arm_var_f32+0x134>
 800d6d8:	f100 0310 	add.w	r3, r0, #16
 800d6dc:	012f      	lsls	r7, r5, #4
 800d6de:	4629      	mov	r1, r5
 800d6e0:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800d7b0 <arm_var_f32+0x158>
 800d6e4:	ed13 6a04 	vldr	s12, [r3, #-16]
 800d6e8:	ed53 6a03 	vldr	s13, [r3, #-12]
 800d6ec:	ed13 7a02 	vldr	s14, [r3, #-8]
 800d6f0:	ed53 5a01 	vldr	s11, [r3, #-4]
 800d6f4:	ee36 6a45 	vsub.f32	s12, s12, s10
 800d6f8:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d6fc:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d700:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d704:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d708:	ee77 7a45 	vsub.f32	s15, s14, s10
 800d70c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d710:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d714:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800d718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d71c:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d720:	3901      	subs	r1, #1
 800d722:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d726:	f103 0310 	add.w	r3, r3, #16
 800d72a:	d1db      	bne.n	800d6e4 <arm_var_f32+0x8c>
 800d72c:	4438      	add	r0, r7
 800d72e:	b1dc      	cbz	r4, 800d768 <arm_var_f32+0x110>
 800d730:	1e63      	subs	r3, r4, #1
 800d732:	ed90 7a00 	vldr	s14, [r0]
 800d736:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d73a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d73e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d742:	b18b      	cbz	r3, 800d768 <arm_var_f32+0x110>
 800d744:	ed90 7a01 	vldr	s14, [r0, #4]
 800d748:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d752:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d756:	d007      	beq.n	800d768 <arm_var_f32+0x110>
 800d758:	ed90 7a02 	vldr	s14, [r0, #8]
 800d75c:	ee37 5a45 	vsub.f32	s10, s14, s10
 800d760:	ee25 5a05 	vmul.f32	s10, s10, s10
 800d764:	ee77 7a85 	vadd.f32	s15, s15, s10
 800d768:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d76c:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800d770:	bcf0      	pop	{r4, r5, r6, r7}
 800d772:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d776:	ed82 7a00 	vstr	s14, [r2]
 800d77a:	4770      	bx	lr
 800d77c:	ee07 1a10 	vmov	s14, r1
 800d780:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800d784:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d788:	2d00      	cmp	r5, #0
 800d78a:	d1a5      	bne.n	800d6d8 <arm_var_f32+0x80>
 800d78c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d7b0 <arm_var_f32+0x158>
 800d790:	e7cf      	b.n	800d732 <arm_var_f32+0xda>
 800d792:	2300      	movs	r3, #0
 800d794:	6013      	str	r3, [r2, #0]
 800d796:	4770      	bx	lr
 800d798:	ee07 1a10 	vmov	s14, r1
 800d79c:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800d7a0:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d7a4:	e79b      	b.n	800d6de <arm_var_f32+0x86>
 800d7a6:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800d7b0 <arm_var_f32+0x158>
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	460c      	mov	r4, r1
 800d7ae:	e77b      	b.n	800d6a8 <arm_var_f32+0x50>
 800d7b0:	00000000 	.word	0x00000000

0800d7b4 <atof>:
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	f000 be79 	b.w	800e4ac <strtod>

0800d7ba <atoi>:
 800d7ba:	220a      	movs	r2, #10
 800d7bc:	2100      	movs	r1, #0
 800d7be:	f000 befd 	b.w	800e5bc <strtol>
	...

0800d7c4 <srand>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	4b10      	ldr	r3, [pc, #64]	@ (800d808 <srand+0x44>)
 800d7c8:	681d      	ldr	r5, [r3, #0]
 800d7ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	b9b3      	cbnz	r3, 800d7fe <srand+0x3a>
 800d7d0:	2018      	movs	r0, #24
 800d7d2:	f003 fa29 	bl	8010c28 <malloc>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	6328      	str	r0, [r5, #48]	@ 0x30
 800d7da:	b920      	cbnz	r0, 800d7e6 <srand+0x22>
 800d7dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d80c <srand+0x48>)
 800d7de:	480c      	ldr	r0, [pc, #48]	@ (800d810 <srand+0x4c>)
 800d7e0:	2146      	movs	r1, #70	@ 0x46
 800d7e2:	f002 f827 	bl	800f834 <__assert_func>
 800d7e6:	490b      	ldr	r1, [pc, #44]	@ (800d814 <srand+0x50>)
 800d7e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d818 <srand+0x54>)
 800d7ea:	e9c0 1300 	strd	r1, r3, [r0]
 800d7ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d81c <srand+0x58>)
 800d7f0:	6083      	str	r3, [r0, #8]
 800d7f2:	230b      	movs	r3, #11
 800d7f4:	8183      	strh	r3, [r0, #12]
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	2001      	movs	r0, #1
 800d7fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d7fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d800:	2200      	movs	r2, #0
 800d802:	611c      	str	r4, [r3, #16]
 800d804:	615a      	str	r2, [r3, #20]
 800d806:	bd38      	pop	{r3, r4, r5, pc}
 800d808:	20000280 	.word	0x20000280
 800d80c:	08017b20 	.word	0x08017b20
 800d810:	08017b37 	.word	0x08017b37
 800d814:	abcd330e 	.word	0xabcd330e
 800d818:	e66d1234 	.word	0xe66d1234
 800d81c:	0005deec 	.word	0x0005deec

0800d820 <rand>:
 800d820:	4b16      	ldr	r3, [pc, #88]	@ (800d87c <rand+0x5c>)
 800d822:	b510      	push	{r4, lr}
 800d824:	681c      	ldr	r4, [r3, #0]
 800d826:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d828:	b9b3      	cbnz	r3, 800d858 <rand+0x38>
 800d82a:	2018      	movs	r0, #24
 800d82c:	f003 f9fc 	bl	8010c28 <malloc>
 800d830:	4602      	mov	r2, r0
 800d832:	6320      	str	r0, [r4, #48]	@ 0x30
 800d834:	b920      	cbnz	r0, 800d840 <rand+0x20>
 800d836:	4b12      	ldr	r3, [pc, #72]	@ (800d880 <rand+0x60>)
 800d838:	4812      	ldr	r0, [pc, #72]	@ (800d884 <rand+0x64>)
 800d83a:	2152      	movs	r1, #82	@ 0x52
 800d83c:	f001 fffa 	bl	800f834 <__assert_func>
 800d840:	4911      	ldr	r1, [pc, #68]	@ (800d888 <rand+0x68>)
 800d842:	4b12      	ldr	r3, [pc, #72]	@ (800d88c <rand+0x6c>)
 800d844:	e9c0 1300 	strd	r1, r3, [r0]
 800d848:	4b11      	ldr	r3, [pc, #68]	@ (800d890 <rand+0x70>)
 800d84a:	6083      	str	r3, [r0, #8]
 800d84c:	230b      	movs	r3, #11
 800d84e:	8183      	strh	r3, [r0, #12]
 800d850:	2100      	movs	r1, #0
 800d852:	2001      	movs	r0, #1
 800d854:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d858:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d85a:	480e      	ldr	r0, [pc, #56]	@ (800d894 <rand+0x74>)
 800d85c:	690b      	ldr	r3, [r1, #16]
 800d85e:	694c      	ldr	r4, [r1, #20]
 800d860:	4a0d      	ldr	r2, [pc, #52]	@ (800d898 <rand+0x78>)
 800d862:	4358      	muls	r0, r3
 800d864:	fb02 0004 	mla	r0, r2, r4, r0
 800d868:	fba3 3202 	umull	r3, r2, r3, r2
 800d86c:	3301      	adds	r3, #1
 800d86e:	eb40 0002 	adc.w	r0, r0, r2
 800d872:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d876:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d87a:	bd10      	pop	{r4, pc}
 800d87c:	20000280 	.word	0x20000280
 800d880:	08017b20 	.word	0x08017b20
 800d884:	08017b37 	.word	0x08017b37
 800d888:	abcd330e 	.word	0xabcd330e
 800d88c:	e66d1234 	.word	0xe66d1234
 800d890:	0005deec 	.word	0x0005deec
 800d894:	5851f42d 	.word	0x5851f42d
 800d898:	4c957f2d 	.word	0x4c957f2d

0800d89c <sulp>:
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	4604      	mov	r4, r0
 800d8a0:	460d      	mov	r5, r1
 800d8a2:	ec45 4b10 	vmov	d0, r4, r5
 800d8a6:	4616      	mov	r6, r2
 800d8a8:	f003 fdf2 	bl	8011490 <__ulp>
 800d8ac:	ec51 0b10 	vmov	r0, r1, d0
 800d8b0:	b17e      	cbz	r6, 800d8d2 <sulp+0x36>
 800d8b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d8b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	dd09      	ble.n	800d8d2 <sulp+0x36>
 800d8be:	051b      	lsls	r3, r3, #20
 800d8c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d8c4:	2400      	movs	r4, #0
 800d8c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d8ca:	4622      	mov	r2, r4
 800d8cc:	462b      	mov	r3, r5
 800d8ce:	f7f2 fea3 	bl	8000618 <__aeabi_dmul>
 800d8d2:	ec41 0b10 	vmov	d0, r0, r1
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}

0800d8d8 <_strtod_l>:
 800d8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8dc:	b09f      	sub	sp, #124	@ 0x7c
 800d8de:	460c      	mov	r4, r1
 800d8e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	921a      	str	r2, [sp, #104]	@ 0x68
 800d8e6:	9005      	str	r0, [sp, #20]
 800d8e8:	f04f 0a00 	mov.w	sl, #0
 800d8ec:	f04f 0b00 	mov.w	fp, #0
 800d8f0:	460a      	mov	r2, r1
 800d8f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8f4:	7811      	ldrb	r1, [r2, #0]
 800d8f6:	292b      	cmp	r1, #43	@ 0x2b
 800d8f8:	d04a      	beq.n	800d990 <_strtod_l+0xb8>
 800d8fa:	d838      	bhi.n	800d96e <_strtod_l+0x96>
 800d8fc:	290d      	cmp	r1, #13
 800d8fe:	d832      	bhi.n	800d966 <_strtod_l+0x8e>
 800d900:	2908      	cmp	r1, #8
 800d902:	d832      	bhi.n	800d96a <_strtod_l+0x92>
 800d904:	2900      	cmp	r1, #0
 800d906:	d03b      	beq.n	800d980 <_strtod_l+0xa8>
 800d908:	2200      	movs	r2, #0
 800d90a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d90c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d90e:	782a      	ldrb	r2, [r5, #0]
 800d910:	2a30      	cmp	r2, #48	@ 0x30
 800d912:	f040 80b2 	bne.w	800da7a <_strtod_l+0x1a2>
 800d916:	786a      	ldrb	r2, [r5, #1]
 800d918:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d91c:	2a58      	cmp	r2, #88	@ 0x58
 800d91e:	d16e      	bne.n	800d9fe <_strtod_l+0x126>
 800d920:	9302      	str	r3, [sp, #8]
 800d922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d924:	9301      	str	r3, [sp, #4]
 800d926:	ab1a      	add	r3, sp, #104	@ 0x68
 800d928:	9300      	str	r3, [sp, #0]
 800d92a:	4a8f      	ldr	r2, [pc, #572]	@ (800db68 <_strtod_l+0x290>)
 800d92c:	9805      	ldr	r0, [sp, #20]
 800d92e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d930:	a919      	add	r1, sp, #100	@ 0x64
 800d932:	f002 fea7 	bl	8010684 <__gethex>
 800d936:	f010 060f 	ands.w	r6, r0, #15
 800d93a:	4604      	mov	r4, r0
 800d93c:	d005      	beq.n	800d94a <_strtod_l+0x72>
 800d93e:	2e06      	cmp	r6, #6
 800d940:	d128      	bne.n	800d994 <_strtod_l+0xbc>
 800d942:	3501      	adds	r5, #1
 800d944:	2300      	movs	r3, #0
 800d946:	9519      	str	r5, [sp, #100]	@ 0x64
 800d948:	930e      	str	r3, [sp, #56]	@ 0x38
 800d94a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f040 858e 	bne.w	800e46e <_strtod_l+0xb96>
 800d952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d954:	b1cb      	cbz	r3, 800d98a <_strtod_l+0xb2>
 800d956:	4652      	mov	r2, sl
 800d958:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d95c:	ec43 2b10 	vmov	d0, r2, r3
 800d960:	b01f      	add	sp, #124	@ 0x7c
 800d962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d966:	2920      	cmp	r1, #32
 800d968:	d1ce      	bne.n	800d908 <_strtod_l+0x30>
 800d96a:	3201      	adds	r2, #1
 800d96c:	e7c1      	b.n	800d8f2 <_strtod_l+0x1a>
 800d96e:	292d      	cmp	r1, #45	@ 0x2d
 800d970:	d1ca      	bne.n	800d908 <_strtod_l+0x30>
 800d972:	2101      	movs	r1, #1
 800d974:	910e      	str	r1, [sp, #56]	@ 0x38
 800d976:	1c51      	adds	r1, r2, #1
 800d978:	9119      	str	r1, [sp, #100]	@ 0x64
 800d97a:	7852      	ldrb	r2, [r2, #1]
 800d97c:	2a00      	cmp	r2, #0
 800d97e:	d1c5      	bne.n	800d90c <_strtod_l+0x34>
 800d980:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d982:	9419      	str	r4, [sp, #100]	@ 0x64
 800d984:	2b00      	cmp	r3, #0
 800d986:	f040 8570 	bne.w	800e46a <_strtod_l+0xb92>
 800d98a:	4652      	mov	r2, sl
 800d98c:	465b      	mov	r3, fp
 800d98e:	e7e5      	b.n	800d95c <_strtod_l+0x84>
 800d990:	2100      	movs	r1, #0
 800d992:	e7ef      	b.n	800d974 <_strtod_l+0x9c>
 800d994:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d996:	b13a      	cbz	r2, 800d9a8 <_strtod_l+0xd0>
 800d998:	2135      	movs	r1, #53	@ 0x35
 800d99a:	a81c      	add	r0, sp, #112	@ 0x70
 800d99c:	f003 fe72 	bl	8011684 <__copybits>
 800d9a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d9a2:	9805      	ldr	r0, [sp, #20]
 800d9a4:	f003 fa48 	bl	8010e38 <_Bfree>
 800d9a8:	3e01      	subs	r6, #1
 800d9aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d9ac:	2e04      	cmp	r6, #4
 800d9ae:	d806      	bhi.n	800d9be <_strtod_l+0xe6>
 800d9b0:	e8df f006 	tbb	[pc, r6]
 800d9b4:	201d0314 	.word	0x201d0314
 800d9b8:	14          	.byte	0x14
 800d9b9:	00          	.byte	0x00
 800d9ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d9be:	05e1      	lsls	r1, r4, #23
 800d9c0:	bf48      	it	mi
 800d9c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d9c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d9ca:	0d1b      	lsrs	r3, r3, #20
 800d9cc:	051b      	lsls	r3, r3, #20
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1bb      	bne.n	800d94a <_strtod_l+0x72>
 800d9d2:	f001 fee3 	bl	800f79c <__errno>
 800d9d6:	2322      	movs	r3, #34	@ 0x22
 800d9d8:	6003      	str	r3, [r0, #0]
 800d9da:	e7b6      	b.n	800d94a <_strtod_l+0x72>
 800d9dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d9e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d9e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d9e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d9ec:	e7e7      	b.n	800d9be <_strtod_l+0xe6>
 800d9ee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800db70 <_strtod_l+0x298>
 800d9f2:	e7e4      	b.n	800d9be <_strtod_l+0xe6>
 800d9f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d9f8:	f04f 3aff 	mov.w	sl, #4294967295
 800d9fc:	e7df      	b.n	800d9be <_strtod_l+0xe6>
 800d9fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da00:	1c5a      	adds	r2, r3, #1
 800da02:	9219      	str	r2, [sp, #100]	@ 0x64
 800da04:	785b      	ldrb	r3, [r3, #1]
 800da06:	2b30      	cmp	r3, #48	@ 0x30
 800da08:	d0f9      	beq.n	800d9fe <_strtod_l+0x126>
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d09d      	beq.n	800d94a <_strtod_l+0x72>
 800da0e:	2301      	movs	r3, #1
 800da10:	2700      	movs	r7, #0
 800da12:	9308      	str	r3, [sp, #32]
 800da14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da16:	930c      	str	r3, [sp, #48]	@ 0x30
 800da18:	970b      	str	r7, [sp, #44]	@ 0x2c
 800da1a:	46b9      	mov	r9, r7
 800da1c:	220a      	movs	r2, #10
 800da1e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800da20:	7805      	ldrb	r5, [r0, #0]
 800da22:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800da26:	b2d9      	uxtb	r1, r3
 800da28:	2909      	cmp	r1, #9
 800da2a:	d928      	bls.n	800da7e <_strtod_l+0x1a6>
 800da2c:	494f      	ldr	r1, [pc, #316]	@ (800db6c <_strtod_l+0x294>)
 800da2e:	2201      	movs	r2, #1
 800da30:	f001 fdd2 	bl	800f5d8 <strncmp>
 800da34:	2800      	cmp	r0, #0
 800da36:	d032      	beq.n	800da9e <_strtod_l+0x1c6>
 800da38:	2000      	movs	r0, #0
 800da3a:	462a      	mov	r2, r5
 800da3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800da3e:	464d      	mov	r5, r9
 800da40:	4603      	mov	r3, r0
 800da42:	2a65      	cmp	r2, #101	@ 0x65
 800da44:	d001      	beq.n	800da4a <_strtod_l+0x172>
 800da46:	2a45      	cmp	r2, #69	@ 0x45
 800da48:	d114      	bne.n	800da74 <_strtod_l+0x19c>
 800da4a:	b91d      	cbnz	r5, 800da54 <_strtod_l+0x17c>
 800da4c:	9a08      	ldr	r2, [sp, #32]
 800da4e:	4302      	orrs	r2, r0
 800da50:	d096      	beq.n	800d980 <_strtod_l+0xa8>
 800da52:	2500      	movs	r5, #0
 800da54:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800da56:	1c62      	adds	r2, r4, #1
 800da58:	9219      	str	r2, [sp, #100]	@ 0x64
 800da5a:	7862      	ldrb	r2, [r4, #1]
 800da5c:	2a2b      	cmp	r2, #43	@ 0x2b
 800da5e:	d07a      	beq.n	800db56 <_strtod_l+0x27e>
 800da60:	2a2d      	cmp	r2, #45	@ 0x2d
 800da62:	d07e      	beq.n	800db62 <_strtod_l+0x28a>
 800da64:	f04f 0c00 	mov.w	ip, #0
 800da68:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800da6c:	2909      	cmp	r1, #9
 800da6e:	f240 8085 	bls.w	800db7c <_strtod_l+0x2a4>
 800da72:	9419      	str	r4, [sp, #100]	@ 0x64
 800da74:	f04f 0800 	mov.w	r8, #0
 800da78:	e0a5      	b.n	800dbc6 <_strtod_l+0x2ee>
 800da7a:	2300      	movs	r3, #0
 800da7c:	e7c8      	b.n	800da10 <_strtod_l+0x138>
 800da7e:	f1b9 0f08 	cmp.w	r9, #8
 800da82:	bfd8      	it	le
 800da84:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800da86:	f100 0001 	add.w	r0, r0, #1
 800da8a:	bfda      	itte	le
 800da8c:	fb02 3301 	mlale	r3, r2, r1, r3
 800da90:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800da92:	fb02 3707 	mlagt	r7, r2, r7, r3
 800da96:	f109 0901 	add.w	r9, r9, #1
 800da9a:	9019      	str	r0, [sp, #100]	@ 0x64
 800da9c:	e7bf      	b.n	800da1e <_strtod_l+0x146>
 800da9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800daa0:	1c5a      	adds	r2, r3, #1
 800daa2:	9219      	str	r2, [sp, #100]	@ 0x64
 800daa4:	785a      	ldrb	r2, [r3, #1]
 800daa6:	f1b9 0f00 	cmp.w	r9, #0
 800daaa:	d03b      	beq.n	800db24 <_strtod_l+0x24c>
 800daac:	900a      	str	r0, [sp, #40]	@ 0x28
 800daae:	464d      	mov	r5, r9
 800dab0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dab4:	2b09      	cmp	r3, #9
 800dab6:	d912      	bls.n	800dade <_strtod_l+0x206>
 800dab8:	2301      	movs	r3, #1
 800daba:	e7c2      	b.n	800da42 <_strtod_l+0x16a>
 800dabc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dabe:	1c5a      	adds	r2, r3, #1
 800dac0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dac2:	785a      	ldrb	r2, [r3, #1]
 800dac4:	3001      	adds	r0, #1
 800dac6:	2a30      	cmp	r2, #48	@ 0x30
 800dac8:	d0f8      	beq.n	800dabc <_strtod_l+0x1e4>
 800daca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dace:	2b08      	cmp	r3, #8
 800dad0:	f200 84d2 	bhi.w	800e478 <_strtod_l+0xba0>
 800dad4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dad6:	900a      	str	r0, [sp, #40]	@ 0x28
 800dad8:	2000      	movs	r0, #0
 800dada:	930c      	str	r3, [sp, #48]	@ 0x30
 800dadc:	4605      	mov	r5, r0
 800dade:	3a30      	subs	r2, #48	@ 0x30
 800dae0:	f100 0301 	add.w	r3, r0, #1
 800dae4:	d018      	beq.n	800db18 <_strtod_l+0x240>
 800dae6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dae8:	4419      	add	r1, r3
 800daea:	910a      	str	r1, [sp, #40]	@ 0x28
 800daec:	462e      	mov	r6, r5
 800daee:	f04f 0e0a 	mov.w	lr, #10
 800daf2:	1c71      	adds	r1, r6, #1
 800daf4:	eba1 0c05 	sub.w	ip, r1, r5
 800daf8:	4563      	cmp	r3, ip
 800dafa:	dc15      	bgt.n	800db28 <_strtod_l+0x250>
 800dafc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800db00:	182b      	adds	r3, r5, r0
 800db02:	2b08      	cmp	r3, #8
 800db04:	f105 0501 	add.w	r5, r5, #1
 800db08:	4405      	add	r5, r0
 800db0a:	dc1a      	bgt.n	800db42 <_strtod_l+0x26a>
 800db0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db0e:	230a      	movs	r3, #10
 800db10:	fb03 2301 	mla	r3, r3, r1, r2
 800db14:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db16:	2300      	movs	r3, #0
 800db18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db1a:	1c51      	adds	r1, r2, #1
 800db1c:	9119      	str	r1, [sp, #100]	@ 0x64
 800db1e:	7852      	ldrb	r2, [r2, #1]
 800db20:	4618      	mov	r0, r3
 800db22:	e7c5      	b.n	800dab0 <_strtod_l+0x1d8>
 800db24:	4648      	mov	r0, r9
 800db26:	e7ce      	b.n	800dac6 <_strtod_l+0x1ee>
 800db28:	2e08      	cmp	r6, #8
 800db2a:	dc05      	bgt.n	800db38 <_strtod_l+0x260>
 800db2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800db2e:	fb0e f606 	mul.w	r6, lr, r6
 800db32:	960b      	str	r6, [sp, #44]	@ 0x2c
 800db34:	460e      	mov	r6, r1
 800db36:	e7dc      	b.n	800daf2 <_strtod_l+0x21a>
 800db38:	2910      	cmp	r1, #16
 800db3a:	bfd8      	it	le
 800db3c:	fb0e f707 	mulle.w	r7, lr, r7
 800db40:	e7f8      	b.n	800db34 <_strtod_l+0x25c>
 800db42:	2b0f      	cmp	r3, #15
 800db44:	bfdc      	itt	le
 800db46:	230a      	movle	r3, #10
 800db48:	fb03 2707 	mlale	r7, r3, r7, r2
 800db4c:	e7e3      	b.n	800db16 <_strtod_l+0x23e>
 800db4e:	2300      	movs	r3, #0
 800db50:	930a      	str	r3, [sp, #40]	@ 0x28
 800db52:	2301      	movs	r3, #1
 800db54:	e77a      	b.n	800da4c <_strtod_l+0x174>
 800db56:	f04f 0c00 	mov.w	ip, #0
 800db5a:	1ca2      	adds	r2, r4, #2
 800db5c:	9219      	str	r2, [sp, #100]	@ 0x64
 800db5e:	78a2      	ldrb	r2, [r4, #2]
 800db60:	e782      	b.n	800da68 <_strtod_l+0x190>
 800db62:	f04f 0c01 	mov.w	ip, #1
 800db66:	e7f8      	b.n	800db5a <_strtod_l+0x282>
 800db68:	08017dd8 	.word	0x08017dd8
 800db6c:	08017b8f 	.word	0x08017b8f
 800db70:	7ff00000 	.word	0x7ff00000
 800db74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db76:	1c51      	adds	r1, r2, #1
 800db78:	9119      	str	r1, [sp, #100]	@ 0x64
 800db7a:	7852      	ldrb	r2, [r2, #1]
 800db7c:	2a30      	cmp	r2, #48	@ 0x30
 800db7e:	d0f9      	beq.n	800db74 <_strtod_l+0x29c>
 800db80:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800db84:	2908      	cmp	r1, #8
 800db86:	f63f af75 	bhi.w	800da74 <_strtod_l+0x19c>
 800db8a:	3a30      	subs	r2, #48	@ 0x30
 800db8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800db8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db90:	920f      	str	r2, [sp, #60]	@ 0x3c
 800db92:	f04f 080a 	mov.w	r8, #10
 800db96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db98:	1c56      	adds	r6, r2, #1
 800db9a:	9619      	str	r6, [sp, #100]	@ 0x64
 800db9c:	7852      	ldrb	r2, [r2, #1]
 800db9e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dba2:	f1be 0f09 	cmp.w	lr, #9
 800dba6:	d939      	bls.n	800dc1c <_strtod_l+0x344>
 800dba8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dbaa:	1a76      	subs	r6, r6, r1
 800dbac:	2e08      	cmp	r6, #8
 800dbae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dbb2:	dc03      	bgt.n	800dbbc <_strtod_l+0x2e4>
 800dbb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbb6:	4588      	cmp	r8, r1
 800dbb8:	bfa8      	it	ge
 800dbba:	4688      	movge	r8, r1
 800dbbc:	f1bc 0f00 	cmp.w	ip, #0
 800dbc0:	d001      	beq.n	800dbc6 <_strtod_l+0x2ee>
 800dbc2:	f1c8 0800 	rsb	r8, r8, #0
 800dbc6:	2d00      	cmp	r5, #0
 800dbc8:	d14e      	bne.n	800dc68 <_strtod_l+0x390>
 800dbca:	9908      	ldr	r1, [sp, #32]
 800dbcc:	4308      	orrs	r0, r1
 800dbce:	f47f aebc 	bne.w	800d94a <_strtod_l+0x72>
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f47f aed4 	bne.w	800d980 <_strtod_l+0xa8>
 800dbd8:	2a69      	cmp	r2, #105	@ 0x69
 800dbda:	d028      	beq.n	800dc2e <_strtod_l+0x356>
 800dbdc:	dc25      	bgt.n	800dc2a <_strtod_l+0x352>
 800dbde:	2a49      	cmp	r2, #73	@ 0x49
 800dbe0:	d025      	beq.n	800dc2e <_strtod_l+0x356>
 800dbe2:	2a4e      	cmp	r2, #78	@ 0x4e
 800dbe4:	f47f aecc 	bne.w	800d980 <_strtod_l+0xa8>
 800dbe8:	499a      	ldr	r1, [pc, #616]	@ (800de54 <_strtod_l+0x57c>)
 800dbea:	a819      	add	r0, sp, #100	@ 0x64
 800dbec:	f002 ff6c 	bl	8010ac8 <__match>
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	f43f aec5 	beq.w	800d980 <_strtod_l+0xa8>
 800dbf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2b28      	cmp	r3, #40	@ 0x28
 800dbfc:	d12e      	bne.n	800dc5c <_strtod_l+0x384>
 800dbfe:	4996      	ldr	r1, [pc, #600]	@ (800de58 <_strtod_l+0x580>)
 800dc00:	aa1c      	add	r2, sp, #112	@ 0x70
 800dc02:	a819      	add	r0, sp, #100	@ 0x64
 800dc04:	f002 ff74 	bl	8010af0 <__hexnan>
 800dc08:	2805      	cmp	r0, #5
 800dc0a:	d127      	bne.n	800dc5c <_strtod_l+0x384>
 800dc0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc0e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dc12:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dc16:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dc1a:	e696      	b.n	800d94a <_strtod_l+0x72>
 800dc1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc1e:	fb08 2101 	mla	r1, r8, r1, r2
 800dc22:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dc26:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc28:	e7b5      	b.n	800db96 <_strtod_l+0x2be>
 800dc2a:	2a6e      	cmp	r2, #110	@ 0x6e
 800dc2c:	e7da      	b.n	800dbe4 <_strtod_l+0x30c>
 800dc2e:	498b      	ldr	r1, [pc, #556]	@ (800de5c <_strtod_l+0x584>)
 800dc30:	a819      	add	r0, sp, #100	@ 0x64
 800dc32:	f002 ff49 	bl	8010ac8 <__match>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	f43f aea2 	beq.w	800d980 <_strtod_l+0xa8>
 800dc3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc3e:	4988      	ldr	r1, [pc, #544]	@ (800de60 <_strtod_l+0x588>)
 800dc40:	3b01      	subs	r3, #1
 800dc42:	a819      	add	r0, sp, #100	@ 0x64
 800dc44:	9319      	str	r3, [sp, #100]	@ 0x64
 800dc46:	f002 ff3f 	bl	8010ac8 <__match>
 800dc4a:	b910      	cbnz	r0, 800dc52 <_strtod_l+0x37a>
 800dc4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc4e:	3301      	adds	r3, #1
 800dc50:	9319      	str	r3, [sp, #100]	@ 0x64
 800dc52:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800de70 <_strtod_l+0x598>
 800dc56:	f04f 0a00 	mov.w	sl, #0
 800dc5a:	e676      	b.n	800d94a <_strtod_l+0x72>
 800dc5c:	4881      	ldr	r0, [pc, #516]	@ (800de64 <_strtod_l+0x58c>)
 800dc5e:	f001 fddb 	bl	800f818 <nan>
 800dc62:	ec5b ab10 	vmov	sl, fp, d0
 800dc66:	e670      	b.n	800d94a <_strtod_l+0x72>
 800dc68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800dc6c:	eba8 0303 	sub.w	r3, r8, r3
 800dc70:	f1b9 0f00 	cmp.w	r9, #0
 800dc74:	bf08      	it	eq
 800dc76:	46a9      	moveq	r9, r5
 800dc78:	2d10      	cmp	r5, #16
 800dc7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc7c:	462c      	mov	r4, r5
 800dc7e:	bfa8      	it	ge
 800dc80:	2410      	movge	r4, #16
 800dc82:	f7f2 fc4f 	bl	8000524 <__aeabi_ui2d>
 800dc86:	2d09      	cmp	r5, #9
 800dc88:	4682      	mov	sl, r0
 800dc8a:	468b      	mov	fp, r1
 800dc8c:	dc13      	bgt.n	800dcb6 <_strtod_l+0x3de>
 800dc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f43f ae5a 	beq.w	800d94a <_strtod_l+0x72>
 800dc96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc98:	dd78      	ble.n	800dd8c <_strtod_l+0x4b4>
 800dc9a:	2b16      	cmp	r3, #22
 800dc9c:	dc5f      	bgt.n	800dd5e <_strtod_l+0x486>
 800dc9e:	4972      	ldr	r1, [pc, #456]	@ (800de68 <_strtod_l+0x590>)
 800dca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dca8:	4652      	mov	r2, sl
 800dcaa:	465b      	mov	r3, fp
 800dcac:	f7f2 fcb4 	bl	8000618 <__aeabi_dmul>
 800dcb0:	4682      	mov	sl, r0
 800dcb2:	468b      	mov	fp, r1
 800dcb4:	e649      	b.n	800d94a <_strtod_l+0x72>
 800dcb6:	4b6c      	ldr	r3, [pc, #432]	@ (800de68 <_strtod_l+0x590>)
 800dcb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dcbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dcc0:	f7f2 fcaa 	bl	8000618 <__aeabi_dmul>
 800dcc4:	4682      	mov	sl, r0
 800dcc6:	4638      	mov	r0, r7
 800dcc8:	468b      	mov	fp, r1
 800dcca:	f7f2 fc2b 	bl	8000524 <__aeabi_ui2d>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	4650      	mov	r0, sl
 800dcd4:	4659      	mov	r1, fp
 800dcd6:	f7f2 fae9 	bl	80002ac <__adddf3>
 800dcda:	2d0f      	cmp	r5, #15
 800dcdc:	4682      	mov	sl, r0
 800dcde:	468b      	mov	fp, r1
 800dce0:	ddd5      	ble.n	800dc8e <_strtod_l+0x3b6>
 800dce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dce4:	1b2c      	subs	r4, r5, r4
 800dce6:	441c      	add	r4, r3
 800dce8:	2c00      	cmp	r4, #0
 800dcea:	f340 8093 	ble.w	800de14 <_strtod_l+0x53c>
 800dcee:	f014 030f 	ands.w	r3, r4, #15
 800dcf2:	d00a      	beq.n	800dd0a <_strtod_l+0x432>
 800dcf4:	495c      	ldr	r1, [pc, #368]	@ (800de68 <_strtod_l+0x590>)
 800dcf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dcfa:	4652      	mov	r2, sl
 800dcfc:	465b      	mov	r3, fp
 800dcfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd02:	f7f2 fc89 	bl	8000618 <__aeabi_dmul>
 800dd06:	4682      	mov	sl, r0
 800dd08:	468b      	mov	fp, r1
 800dd0a:	f034 040f 	bics.w	r4, r4, #15
 800dd0e:	d073      	beq.n	800ddf8 <_strtod_l+0x520>
 800dd10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dd14:	dd49      	ble.n	800ddaa <_strtod_l+0x4d2>
 800dd16:	2400      	movs	r4, #0
 800dd18:	46a0      	mov	r8, r4
 800dd1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dd1c:	46a1      	mov	r9, r4
 800dd1e:	9a05      	ldr	r2, [sp, #20]
 800dd20:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800de70 <_strtod_l+0x598>
 800dd24:	2322      	movs	r3, #34	@ 0x22
 800dd26:	6013      	str	r3, [r2, #0]
 800dd28:	f04f 0a00 	mov.w	sl, #0
 800dd2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f43f ae0b 	beq.w	800d94a <_strtod_l+0x72>
 800dd34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd36:	9805      	ldr	r0, [sp, #20]
 800dd38:	f003 f87e 	bl	8010e38 <_Bfree>
 800dd3c:	9805      	ldr	r0, [sp, #20]
 800dd3e:	4649      	mov	r1, r9
 800dd40:	f003 f87a 	bl	8010e38 <_Bfree>
 800dd44:	9805      	ldr	r0, [sp, #20]
 800dd46:	4641      	mov	r1, r8
 800dd48:	f003 f876 	bl	8010e38 <_Bfree>
 800dd4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd4e:	9805      	ldr	r0, [sp, #20]
 800dd50:	f003 f872 	bl	8010e38 <_Bfree>
 800dd54:	9805      	ldr	r0, [sp, #20]
 800dd56:	4621      	mov	r1, r4
 800dd58:	f003 f86e 	bl	8010e38 <_Bfree>
 800dd5c:	e5f5      	b.n	800d94a <_strtod_l+0x72>
 800dd5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dd64:	4293      	cmp	r3, r2
 800dd66:	dbbc      	blt.n	800dce2 <_strtod_l+0x40a>
 800dd68:	4c3f      	ldr	r4, [pc, #252]	@ (800de68 <_strtod_l+0x590>)
 800dd6a:	f1c5 050f 	rsb	r5, r5, #15
 800dd6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dd72:	4652      	mov	r2, sl
 800dd74:	465b      	mov	r3, fp
 800dd76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd7a:	f7f2 fc4d 	bl	8000618 <__aeabi_dmul>
 800dd7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd80:	1b5d      	subs	r5, r3, r5
 800dd82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dd86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dd8a:	e78f      	b.n	800dcac <_strtod_l+0x3d4>
 800dd8c:	3316      	adds	r3, #22
 800dd8e:	dba8      	blt.n	800dce2 <_strtod_l+0x40a>
 800dd90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd92:	eba3 0808 	sub.w	r8, r3, r8
 800dd96:	4b34      	ldr	r3, [pc, #208]	@ (800de68 <_strtod_l+0x590>)
 800dd98:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dd9c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dda0:	4650      	mov	r0, sl
 800dda2:	4659      	mov	r1, fp
 800dda4:	f7f2 fd62 	bl	800086c <__aeabi_ddiv>
 800dda8:	e782      	b.n	800dcb0 <_strtod_l+0x3d8>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	4f2f      	ldr	r7, [pc, #188]	@ (800de6c <_strtod_l+0x594>)
 800ddae:	1124      	asrs	r4, r4, #4
 800ddb0:	4650      	mov	r0, sl
 800ddb2:	4659      	mov	r1, fp
 800ddb4:	461e      	mov	r6, r3
 800ddb6:	2c01      	cmp	r4, #1
 800ddb8:	dc21      	bgt.n	800ddfe <_strtod_l+0x526>
 800ddba:	b10b      	cbz	r3, 800ddc0 <_strtod_l+0x4e8>
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	468b      	mov	fp, r1
 800ddc0:	492a      	ldr	r1, [pc, #168]	@ (800de6c <_strtod_l+0x594>)
 800ddc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ddc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ddca:	4652      	mov	r2, sl
 800ddcc:	465b      	mov	r3, fp
 800ddce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddd2:	f7f2 fc21 	bl	8000618 <__aeabi_dmul>
 800ddd6:	4b26      	ldr	r3, [pc, #152]	@ (800de70 <_strtod_l+0x598>)
 800ddd8:	460a      	mov	r2, r1
 800ddda:	400b      	ands	r3, r1
 800dddc:	4925      	ldr	r1, [pc, #148]	@ (800de74 <_strtod_l+0x59c>)
 800ddde:	428b      	cmp	r3, r1
 800dde0:	4682      	mov	sl, r0
 800dde2:	d898      	bhi.n	800dd16 <_strtod_l+0x43e>
 800dde4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dde8:	428b      	cmp	r3, r1
 800ddea:	bf86      	itte	hi
 800ddec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800de78 <_strtod_l+0x5a0>
 800ddf0:	f04f 3aff 	movhi.w	sl, #4294967295
 800ddf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	9308      	str	r3, [sp, #32]
 800ddfc:	e076      	b.n	800deec <_strtod_l+0x614>
 800ddfe:	07e2      	lsls	r2, r4, #31
 800de00:	d504      	bpl.n	800de0c <_strtod_l+0x534>
 800de02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de06:	f7f2 fc07 	bl	8000618 <__aeabi_dmul>
 800de0a:	2301      	movs	r3, #1
 800de0c:	3601      	adds	r6, #1
 800de0e:	1064      	asrs	r4, r4, #1
 800de10:	3708      	adds	r7, #8
 800de12:	e7d0      	b.n	800ddb6 <_strtod_l+0x4de>
 800de14:	d0f0      	beq.n	800ddf8 <_strtod_l+0x520>
 800de16:	4264      	negs	r4, r4
 800de18:	f014 020f 	ands.w	r2, r4, #15
 800de1c:	d00a      	beq.n	800de34 <_strtod_l+0x55c>
 800de1e:	4b12      	ldr	r3, [pc, #72]	@ (800de68 <_strtod_l+0x590>)
 800de20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de24:	4650      	mov	r0, sl
 800de26:	4659      	mov	r1, fp
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	f7f2 fd1e 	bl	800086c <__aeabi_ddiv>
 800de30:	4682      	mov	sl, r0
 800de32:	468b      	mov	fp, r1
 800de34:	1124      	asrs	r4, r4, #4
 800de36:	d0df      	beq.n	800ddf8 <_strtod_l+0x520>
 800de38:	2c1f      	cmp	r4, #31
 800de3a:	dd1f      	ble.n	800de7c <_strtod_l+0x5a4>
 800de3c:	2400      	movs	r4, #0
 800de3e:	46a0      	mov	r8, r4
 800de40:	940b      	str	r4, [sp, #44]	@ 0x2c
 800de42:	46a1      	mov	r9, r4
 800de44:	9a05      	ldr	r2, [sp, #20]
 800de46:	2322      	movs	r3, #34	@ 0x22
 800de48:	f04f 0a00 	mov.w	sl, #0
 800de4c:	f04f 0b00 	mov.w	fp, #0
 800de50:	6013      	str	r3, [r2, #0]
 800de52:	e76b      	b.n	800dd2c <_strtod_l+0x454>
 800de54:	08017b9e 	.word	0x08017b9e
 800de58:	08017dc4 	.word	0x08017dc4
 800de5c:	08017b96 	.word	0x08017b96
 800de60:	08017c69 	.word	0x08017c69
 800de64:	08017c65 	.word	0x08017c65
 800de68:	08017f50 	.word	0x08017f50
 800de6c:	08017f28 	.word	0x08017f28
 800de70:	7ff00000 	.word	0x7ff00000
 800de74:	7ca00000 	.word	0x7ca00000
 800de78:	7fefffff 	.word	0x7fefffff
 800de7c:	f014 0310 	ands.w	r3, r4, #16
 800de80:	bf18      	it	ne
 800de82:	236a      	movne	r3, #106	@ 0x6a
 800de84:	4ea9      	ldr	r6, [pc, #676]	@ (800e12c <_strtod_l+0x854>)
 800de86:	9308      	str	r3, [sp, #32]
 800de88:	4650      	mov	r0, sl
 800de8a:	4659      	mov	r1, fp
 800de8c:	2300      	movs	r3, #0
 800de8e:	07e7      	lsls	r7, r4, #31
 800de90:	d504      	bpl.n	800de9c <_strtod_l+0x5c4>
 800de92:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de96:	f7f2 fbbf 	bl	8000618 <__aeabi_dmul>
 800de9a:	2301      	movs	r3, #1
 800de9c:	1064      	asrs	r4, r4, #1
 800de9e:	f106 0608 	add.w	r6, r6, #8
 800dea2:	d1f4      	bne.n	800de8e <_strtod_l+0x5b6>
 800dea4:	b10b      	cbz	r3, 800deaa <_strtod_l+0x5d2>
 800dea6:	4682      	mov	sl, r0
 800dea8:	468b      	mov	fp, r1
 800deaa:	9b08      	ldr	r3, [sp, #32]
 800deac:	b1b3      	cbz	r3, 800dedc <_strtod_l+0x604>
 800deae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800deb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	4659      	mov	r1, fp
 800deba:	dd0f      	ble.n	800dedc <_strtod_l+0x604>
 800debc:	2b1f      	cmp	r3, #31
 800debe:	dd56      	ble.n	800df6e <_strtod_l+0x696>
 800dec0:	2b34      	cmp	r3, #52	@ 0x34
 800dec2:	bfde      	ittt	le
 800dec4:	f04f 33ff 	movle.w	r3, #4294967295
 800dec8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800decc:	4093      	lslle	r3, r2
 800dece:	f04f 0a00 	mov.w	sl, #0
 800ded2:	bfcc      	ite	gt
 800ded4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ded8:	ea03 0b01 	andle.w	fp, r3, r1
 800dedc:	2200      	movs	r2, #0
 800dede:	2300      	movs	r3, #0
 800dee0:	4650      	mov	r0, sl
 800dee2:	4659      	mov	r1, fp
 800dee4:	f7f2 fe00 	bl	8000ae8 <__aeabi_dcmpeq>
 800dee8:	2800      	cmp	r0, #0
 800deea:	d1a7      	bne.n	800de3c <_strtod_l+0x564>
 800deec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800def2:	9805      	ldr	r0, [sp, #20]
 800def4:	462b      	mov	r3, r5
 800def6:	464a      	mov	r2, r9
 800def8:	f003 f806 	bl	8010f08 <__s2b>
 800defc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800defe:	2800      	cmp	r0, #0
 800df00:	f43f af09 	beq.w	800dd16 <_strtod_l+0x43e>
 800df04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df08:	2a00      	cmp	r2, #0
 800df0a:	eba3 0308 	sub.w	r3, r3, r8
 800df0e:	bfa8      	it	ge
 800df10:	2300      	movge	r3, #0
 800df12:	9312      	str	r3, [sp, #72]	@ 0x48
 800df14:	2400      	movs	r4, #0
 800df16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800df1a:	9316      	str	r3, [sp, #88]	@ 0x58
 800df1c:	46a0      	mov	r8, r4
 800df1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df20:	9805      	ldr	r0, [sp, #20]
 800df22:	6859      	ldr	r1, [r3, #4]
 800df24:	f002 ff48 	bl	8010db8 <_Balloc>
 800df28:	4681      	mov	r9, r0
 800df2a:	2800      	cmp	r0, #0
 800df2c:	f43f aef7 	beq.w	800dd1e <_strtod_l+0x446>
 800df30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df32:	691a      	ldr	r2, [r3, #16]
 800df34:	3202      	adds	r2, #2
 800df36:	f103 010c 	add.w	r1, r3, #12
 800df3a:	0092      	lsls	r2, r2, #2
 800df3c:	300c      	adds	r0, #12
 800df3e:	f001 fc5a 	bl	800f7f6 <memcpy>
 800df42:	ec4b ab10 	vmov	d0, sl, fp
 800df46:	9805      	ldr	r0, [sp, #20]
 800df48:	aa1c      	add	r2, sp, #112	@ 0x70
 800df4a:	a91b      	add	r1, sp, #108	@ 0x6c
 800df4c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800df50:	f003 fb0e 	bl	8011570 <__d2b>
 800df54:	901a      	str	r0, [sp, #104]	@ 0x68
 800df56:	2800      	cmp	r0, #0
 800df58:	f43f aee1 	beq.w	800dd1e <_strtod_l+0x446>
 800df5c:	9805      	ldr	r0, [sp, #20]
 800df5e:	2101      	movs	r1, #1
 800df60:	f003 f868 	bl	8011034 <__i2b>
 800df64:	4680      	mov	r8, r0
 800df66:	b948      	cbnz	r0, 800df7c <_strtod_l+0x6a4>
 800df68:	f04f 0800 	mov.w	r8, #0
 800df6c:	e6d7      	b.n	800dd1e <_strtod_l+0x446>
 800df6e:	f04f 32ff 	mov.w	r2, #4294967295
 800df72:	fa02 f303 	lsl.w	r3, r2, r3
 800df76:	ea03 0a0a 	and.w	sl, r3, sl
 800df7a:	e7af      	b.n	800dedc <_strtod_l+0x604>
 800df7c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800df7e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800df80:	2d00      	cmp	r5, #0
 800df82:	bfab      	itete	ge
 800df84:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800df86:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800df88:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800df8a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800df8c:	bfac      	ite	ge
 800df8e:	18ef      	addge	r7, r5, r3
 800df90:	1b5e      	sublt	r6, r3, r5
 800df92:	9b08      	ldr	r3, [sp, #32]
 800df94:	1aed      	subs	r5, r5, r3
 800df96:	4415      	add	r5, r2
 800df98:	4b65      	ldr	r3, [pc, #404]	@ (800e130 <_strtod_l+0x858>)
 800df9a:	3d01      	subs	r5, #1
 800df9c:	429d      	cmp	r5, r3
 800df9e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dfa2:	da50      	bge.n	800e046 <_strtod_l+0x76e>
 800dfa4:	1b5b      	subs	r3, r3, r5
 800dfa6:	2b1f      	cmp	r3, #31
 800dfa8:	eba2 0203 	sub.w	r2, r2, r3
 800dfac:	f04f 0101 	mov.w	r1, #1
 800dfb0:	dc3d      	bgt.n	800e02e <_strtod_l+0x756>
 800dfb2:	fa01 f303 	lsl.w	r3, r1, r3
 800dfb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dfb8:	2300      	movs	r3, #0
 800dfba:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfbc:	18bd      	adds	r5, r7, r2
 800dfbe:	9b08      	ldr	r3, [sp, #32]
 800dfc0:	42af      	cmp	r7, r5
 800dfc2:	4416      	add	r6, r2
 800dfc4:	441e      	add	r6, r3
 800dfc6:	463b      	mov	r3, r7
 800dfc8:	bfa8      	it	ge
 800dfca:	462b      	movge	r3, r5
 800dfcc:	42b3      	cmp	r3, r6
 800dfce:	bfa8      	it	ge
 800dfd0:	4633      	movge	r3, r6
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	bfc2      	ittt	gt
 800dfd6:	1aed      	subgt	r5, r5, r3
 800dfd8:	1af6      	subgt	r6, r6, r3
 800dfda:	1aff      	subgt	r7, r7, r3
 800dfdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	dd16      	ble.n	800e010 <_strtod_l+0x738>
 800dfe2:	4641      	mov	r1, r8
 800dfe4:	9805      	ldr	r0, [sp, #20]
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	f003 f8dc 	bl	80111a4 <__pow5mult>
 800dfec:	4680      	mov	r8, r0
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d0ba      	beq.n	800df68 <_strtod_l+0x690>
 800dff2:	4601      	mov	r1, r0
 800dff4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dff6:	9805      	ldr	r0, [sp, #20]
 800dff8:	f003 f832 	bl	8011060 <__multiply>
 800dffc:	900a      	str	r0, [sp, #40]	@ 0x28
 800dffe:	2800      	cmp	r0, #0
 800e000:	f43f ae8d 	beq.w	800dd1e <_strtod_l+0x446>
 800e004:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e006:	9805      	ldr	r0, [sp, #20]
 800e008:	f002 ff16 	bl	8010e38 <_Bfree>
 800e00c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e00e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e010:	2d00      	cmp	r5, #0
 800e012:	dc1d      	bgt.n	800e050 <_strtod_l+0x778>
 800e014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e016:	2b00      	cmp	r3, #0
 800e018:	dd23      	ble.n	800e062 <_strtod_l+0x78a>
 800e01a:	4649      	mov	r1, r9
 800e01c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e01e:	9805      	ldr	r0, [sp, #20]
 800e020:	f003 f8c0 	bl	80111a4 <__pow5mult>
 800e024:	4681      	mov	r9, r0
 800e026:	b9e0      	cbnz	r0, 800e062 <_strtod_l+0x78a>
 800e028:	f04f 0900 	mov.w	r9, #0
 800e02c:	e677      	b.n	800dd1e <_strtod_l+0x446>
 800e02e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e032:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e036:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e03a:	35e2      	adds	r5, #226	@ 0xe2
 800e03c:	fa01 f305 	lsl.w	r3, r1, r5
 800e040:	9310      	str	r3, [sp, #64]	@ 0x40
 800e042:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e044:	e7ba      	b.n	800dfbc <_strtod_l+0x6e4>
 800e046:	2300      	movs	r3, #0
 800e048:	9310      	str	r3, [sp, #64]	@ 0x40
 800e04a:	2301      	movs	r3, #1
 800e04c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e04e:	e7b5      	b.n	800dfbc <_strtod_l+0x6e4>
 800e050:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e052:	9805      	ldr	r0, [sp, #20]
 800e054:	462a      	mov	r2, r5
 800e056:	f003 f8ff 	bl	8011258 <__lshift>
 800e05a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d1d9      	bne.n	800e014 <_strtod_l+0x73c>
 800e060:	e65d      	b.n	800dd1e <_strtod_l+0x446>
 800e062:	2e00      	cmp	r6, #0
 800e064:	dd07      	ble.n	800e076 <_strtod_l+0x79e>
 800e066:	4649      	mov	r1, r9
 800e068:	9805      	ldr	r0, [sp, #20]
 800e06a:	4632      	mov	r2, r6
 800e06c:	f003 f8f4 	bl	8011258 <__lshift>
 800e070:	4681      	mov	r9, r0
 800e072:	2800      	cmp	r0, #0
 800e074:	d0d8      	beq.n	800e028 <_strtod_l+0x750>
 800e076:	2f00      	cmp	r7, #0
 800e078:	dd08      	ble.n	800e08c <_strtod_l+0x7b4>
 800e07a:	4641      	mov	r1, r8
 800e07c:	9805      	ldr	r0, [sp, #20]
 800e07e:	463a      	mov	r2, r7
 800e080:	f003 f8ea 	bl	8011258 <__lshift>
 800e084:	4680      	mov	r8, r0
 800e086:	2800      	cmp	r0, #0
 800e088:	f43f ae49 	beq.w	800dd1e <_strtod_l+0x446>
 800e08c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e08e:	9805      	ldr	r0, [sp, #20]
 800e090:	464a      	mov	r2, r9
 800e092:	f003 f969 	bl	8011368 <__mdiff>
 800e096:	4604      	mov	r4, r0
 800e098:	2800      	cmp	r0, #0
 800e09a:	f43f ae40 	beq.w	800dd1e <_strtod_l+0x446>
 800e09e:	68c3      	ldr	r3, [r0, #12]
 800e0a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	60c3      	str	r3, [r0, #12]
 800e0a6:	4641      	mov	r1, r8
 800e0a8:	f003 f942 	bl	8011330 <__mcmp>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	da45      	bge.n	800e13c <_strtod_l+0x864>
 800e0b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0b2:	ea53 030a 	orrs.w	r3, r3, sl
 800e0b6:	d16b      	bne.n	800e190 <_strtod_l+0x8b8>
 800e0b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d167      	bne.n	800e190 <_strtod_l+0x8b8>
 800e0c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0c4:	0d1b      	lsrs	r3, r3, #20
 800e0c6:	051b      	lsls	r3, r3, #20
 800e0c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e0cc:	d960      	bls.n	800e190 <_strtod_l+0x8b8>
 800e0ce:	6963      	ldr	r3, [r4, #20]
 800e0d0:	b913      	cbnz	r3, 800e0d8 <_strtod_l+0x800>
 800e0d2:	6923      	ldr	r3, [r4, #16]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	dd5b      	ble.n	800e190 <_strtod_l+0x8b8>
 800e0d8:	4621      	mov	r1, r4
 800e0da:	2201      	movs	r2, #1
 800e0dc:	9805      	ldr	r0, [sp, #20]
 800e0de:	f003 f8bb 	bl	8011258 <__lshift>
 800e0e2:	4641      	mov	r1, r8
 800e0e4:	4604      	mov	r4, r0
 800e0e6:	f003 f923 	bl	8011330 <__mcmp>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	dd50      	ble.n	800e190 <_strtod_l+0x8b8>
 800e0ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0f2:	9a08      	ldr	r2, [sp, #32]
 800e0f4:	0d1b      	lsrs	r3, r3, #20
 800e0f6:	051b      	lsls	r3, r3, #20
 800e0f8:	2a00      	cmp	r2, #0
 800e0fa:	d06a      	beq.n	800e1d2 <_strtod_l+0x8fa>
 800e0fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e100:	d867      	bhi.n	800e1d2 <_strtod_l+0x8fa>
 800e102:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e106:	f67f ae9d 	bls.w	800de44 <_strtod_l+0x56c>
 800e10a:	4b0a      	ldr	r3, [pc, #40]	@ (800e134 <_strtod_l+0x85c>)
 800e10c:	4650      	mov	r0, sl
 800e10e:	4659      	mov	r1, fp
 800e110:	2200      	movs	r2, #0
 800e112:	f7f2 fa81 	bl	8000618 <__aeabi_dmul>
 800e116:	4b08      	ldr	r3, [pc, #32]	@ (800e138 <_strtod_l+0x860>)
 800e118:	400b      	ands	r3, r1
 800e11a:	4682      	mov	sl, r0
 800e11c:	468b      	mov	fp, r1
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f47f ae08 	bne.w	800dd34 <_strtod_l+0x45c>
 800e124:	9a05      	ldr	r2, [sp, #20]
 800e126:	2322      	movs	r3, #34	@ 0x22
 800e128:	6013      	str	r3, [r2, #0]
 800e12a:	e603      	b.n	800dd34 <_strtod_l+0x45c>
 800e12c:	08017df0 	.word	0x08017df0
 800e130:	fffffc02 	.word	0xfffffc02
 800e134:	39500000 	.word	0x39500000
 800e138:	7ff00000 	.word	0x7ff00000
 800e13c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e140:	d165      	bne.n	800e20e <_strtod_l+0x936>
 800e142:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e144:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e148:	b35a      	cbz	r2, 800e1a2 <_strtod_l+0x8ca>
 800e14a:	4a9f      	ldr	r2, [pc, #636]	@ (800e3c8 <_strtod_l+0xaf0>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d12b      	bne.n	800e1a8 <_strtod_l+0x8d0>
 800e150:	9b08      	ldr	r3, [sp, #32]
 800e152:	4651      	mov	r1, sl
 800e154:	b303      	cbz	r3, 800e198 <_strtod_l+0x8c0>
 800e156:	4b9d      	ldr	r3, [pc, #628]	@ (800e3cc <_strtod_l+0xaf4>)
 800e158:	465a      	mov	r2, fp
 800e15a:	4013      	ands	r3, r2
 800e15c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e160:	f04f 32ff 	mov.w	r2, #4294967295
 800e164:	d81b      	bhi.n	800e19e <_strtod_l+0x8c6>
 800e166:	0d1b      	lsrs	r3, r3, #20
 800e168:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e16c:	fa02 f303 	lsl.w	r3, r2, r3
 800e170:	4299      	cmp	r1, r3
 800e172:	d119      	bne.n	800e1a8 <_strtod_l+0x8d0>
 800e174:	4b96      	ldr	r3, [pc, #600]	@ (800e3d0 <_strtod_l+0xaf8>)
 800e176:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e178:	429a      	cmp	r2, r3
 800e17a:	d102      	bne.n	800e182 <_strtod_l+0x8aa>
 800e17c:	3101      	adds	r1, #1
 800e17e:	f43f adce 	beq.w	800dd1e <_strtod_l+0x446>
 800e182:	4b92      	ldr	r3, [pc, #584]	@ (800e3cc <_strtod_l+0xaf4>)
 800e184:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e186:	401a      	ands	r2, r3
 800e188:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e18c:	f04f 0a00 	mov.w	sl, #0
 800e190:	9b08      	ldr	r3, [sp, #32]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d1b9      	bne.n	800e10a <_strtod_l+0x832>
 800e196:	e5cd      	b.n	800dd34 <_strtod_l+0x45c>
 800e198:	f04f 33ff 	mov.w	r3, #4294967295
 800e19c:	e7e8      	b.n	800e170 <_strtod_l+0x898>
 800e19e:	4613      	mov	r3, r2
 800e1a0:	e7e6      	b.n	800e170 <_strtod_l+0x898>
 800e1a2:	ea53 030a 	orrs.w	r3, r3, sl
 800e1a6:	d0a2      	beq.n	800e0ee <_strtod_l+0x816>
 800e1a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e1aa:	b1db      	cbz	r3, 800e1e4 <_strtod_l+0x90c>
 800e1ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1ae:	4213      	tst	r3, r2
 800e1b0:	d0ee      	beq.n	800e190 <_strtod_l+0x8b8>
 800e1b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1b4:	9a08      	ldr	r2, [sp, #32]
 800e1b6:	4650      	mov	r0, sl
 800e1b8:	4659      	mov	r1, fp
 800e1ba:	b1bb      	cbz	r3, 800e1ec <_strtod_l+0x914>
 800e1bc:	f7ff fb6e 	bl	800d89c <sulp>
 800e1c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1c4:	ec53 2b10 	vmov	r2, r3, d0
 800e1c8:	f7f2 f870 	bl	80002ac <__adddf3>
 800e1cc:	4682      	mov	sl, r0
 800e1ce:	468b      	mov	fp, r1
 800e1d0:	e7de      	b.n	800e190 <_strtod_l+0x8b8>
 800e1d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e1d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e1da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e1de:	f04f 3aff 	mov.w	sl, #4294967295
 800e1e2:	e7d5      	b.n	800e190 <_strtod_l+0x8b8>
 800e1e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e1e6:	ea13 0f0a 	tst.w	r3, sl
 800e1ea:	e7e1      	b.n	800e1b0 <_strtod_l+0x8d8>
 800e1ec:	f7ff fb56 	bl	800d89c <sulp>
 800e1f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1f4:	ec53 2b10 	vmov	r2, r3, d0
 800e1f8:	f7f2 f856 	bl	80002a8 <__aeabi_dsub>
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	2300      	movs	r3, #0
 800e200:	4682      	mov	sl, r0
 800e202:	468b      	mov	fp, r1
 800e204:	f7f2 fc70 	bl	8000ae8 <__aeabi_dcmpeq>
 800e208:	2800      	cmp	r0, #0
 800e20a:	d0c1      	beq.n	800e190 <_strtod_l+0x8b8>
 800e20c:	e61a      	b.n	800de44 <_strtod_l+0x56c>
 800e20e:	4641      	mov	r1, r8
 800e210:	4620      	mov	r0, r4
 800e212:	f003 fa05 	bl	8011620 <__ratio>
 800e216:	ec57 6b10 	vmov	r6, r7, d0
 800e21a:	2200      	movs	r2, #0
 800e21c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e220:	4630      	mov	r0, r6
 800e222:	4639      	mov	r1, r7
 800e224:	f7f2 fc74 	bl	8000b10 <__aeabi_dcmple>
 800e228:	2800      	cmp	r0, #0
 800e22a:	d06f      	beq.n	800e30c <_strtod_l+0xa34>
 800e22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d17a      	bne.n	800e328 <_strtod_l+0xa50>
 800e232:	f1ba 0f00 	cmp.w	sl, #0
 800e236:	d158      	bne.n	800e2ea <_strtod_l+0xa12>
 800e238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e23a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d15a      	bne.n	800e2f8 <_strtod_l+0xa20>
 800e242:	4b64      	ldr	r3, [pc, #400]	@ (800e3d4 <_strtod_l+0xafc>)
 800e244:	2200      	movs	r2, #0
 800e246:	4630      	mov	r0, r6
 800e248:	4639      	mov	r1, r7
 800e24a:	f7f2 fc57 	bl	8000afc <__aeabi_dcmplt>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d159      	bne.n	800e306 <_strtod_l+0xa2e>
 800e252:	4630      	mov	r0, r6
 800e254:	4639      	mov	r1, r7
 800e256:	4b60      	ldr	r3, [pc, #384]	@ (800e3d8 <_strtod_l+0xb00>)
 800e258:	2200      	movs	r2, #0
 800e25a:	f7f2 f9dd 	bl	8000618 <__aeabi_dmul>
 800e25e:	4606      	mov	r6, r0
 800e260:	460f      	mov	r7, r1
 800e262:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e266:	9606      	str	r6, [sp, #24]
 800e268:	9307      	str	r3, [sp, #28]
 800e26a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e26e:	4d57      	ldr	r5, [pc, #348]	@ (800e3cc <_strtod_l+0xaf4>)
 800e270:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e276:	401d      	ands	r5, r3
 800e278:	4b58      	ldr	r3, [pc, #352]	@ (800e3dc <_strtod_l+0xb04>)
 800e27a:	429d      	cmp	r5, r3
 800e27c:	f040 80b2 	bne.w	800e3e4 <_strtod_l+0xb0c>
 800e280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e282:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e286:	ec4b ab10 	vmov	d0, sl, fp
 800e28a:	f003 f901 	bl	8011490 <__ulp>
 800e28e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e292:	ec51 0b10 	vmov	r0, r1, d0
 800e296:	f7f2 f9bf 	bl	8000618 <__aeabi_dmul>
 800e29a:	4652      	mov	r2, sl
 800e29c:	465b      	mov	r3, fp
 800e29e:	f7f2 f805 	bl	80002ac <__adddf3>
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	4949      	ldr	r1, [pc, #292]	@ (800e3cc <_strtod_l+0xaf4>)
 800e2a6:	4a4e      	ldr	r2, [pc, #312]	@ (800e3e0 <_strtod_l+0xb08>)
 800e2a8:	4019      	ands	r1, r3
 800e2aa:	4291      	cmp	r1, r2
 800e2ac:	4682      	mov	sl, r0
 800e2ae:	d942      	bls.n	800e336 <_strtod_l+0xa5e>
 800e2b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e2b2:	4b47      	ldr	r3, [pc, #284]	@ (800e3d0 <_strtod_l+0xaf8>)
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d103      	bne.n	800e2c0 <_strtod_l+0x9e8>
 800e2b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	f43f ad2f 	beq.w	800dd1e <_strtod_l+0x446>
 800e2c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e3d0 <_strtod_l+0xaf8>
 800e2c4:	f04f 3aff 	mov.w	sl, #4294967295
 800e2c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e2ca:	9805      	ldr	r0, [sp, #20]
 800e2cc:	f002 fdb4 	bl	8010e38 <_Bfree>
 800e2d0:	9805      	ldr	r0, [sp, #20]
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	f002 fdb0 	bl	8010e38 <_Bfree>
 800e2d8:	9805      	ldr	r0, [sp, #20]
 800e2da:	4641      	mov	r1, r8
 800e2dc:	f002 fdac 	bl	8010e38 <_Bfree>
 800e2e0:	9805      	ldr	r0, [sp, #20]
 800e2e2:	4621      	mov	r1, r4
 800e2e4:	f002 fda8 	bl	8010e38 <_Bfree>
 800e2e8:	e619      	b.n	800df1e <_strtod_l+0x646>
 800e2ea:	f1ba 0f01 	cmp.w	sl, #1
 800e2ee:	d103      	bne.n	800e2f8 <_strtod_l+0xa20>
 800e2f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f43f ada6 	beq.w	800de44 <_strtod_l+0x56c>
 800e2f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e3a8 <_strtod_l+0xad0>
 800e2fc:	4f35      	ldr	r7, [pc, #212]	@ (800e3d4 <_strtod_l+0xafc>)
 800e2fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e302:	2600      	movs	r6, #0
 800e304:	e7b1      	b.n	800e26a <_strtod_l+0x992>
 800e306:	4f34      	ldr	r7, [pc, #208]	@ (800e3d8 <_strtod_l+0xb00>)
 800e308:	2600      	movs	r6, #0
 800e30a:	e7aa      	b.n	800e262 <_strtod_l+0x98a>
 800e30c:	4b32      	ldr	r3, [pc, #200]	@ (800e3d8 <_strtod_l+0xb00>)
 800e30e:	4630      	mov	r0, r6
 800e310:	4639      	mov	r1, r7
 800e312:	2200      	movs	r2, #0
 800e314:	f7f2 f980 	bl	8000618 <__aeabi_dmul>
 800e318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e31a:	4606      	mov	r6, r0
 800e31c:	460f      	mov	r7, r1
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d09f      	beq.n	800e262 <_strtod_l+0x98a>
 800e322:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e326:	e7a0      	b.n	800e26a <_strtod_l+0x992>
 800e328:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e3b0 <_strtod_l+0xad8>
 800e32c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e330:	ec57 6b17 	vmov	r6, r7, d7
 800e334:	e799      	b.n	800e26a <_strtod_l+0x992>
 800e336:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e33a:	9b08      	ldr	r3, [sp, #32]
 800e33c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e340:	2b00      	cmp	r3, #0
 800e342:	d1c1      	bne.n	800e2c8 <_strtod_l+0x9f0>
 800e344:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e348:	0d1b      	lsrs	r3, r3, #20
 800e34a:	051b      	lsls	r3, r3, #20
 800e34c:	429d      	cmp	r5, r3
 800e34e:	d1bb      	bne.n	800e2c8 <_strtod_l+0x9f0>
 800e350:	4630      	mov	r0, r6
 800e352:	4639      	mov	r1, r7
 800e354:	f7f2 fcc0 	bl	8000cd8 <__aeabi_d2lz>
 800e358:	f7f2 f930 	bl	80005bc <__aeabi_l2d>
 800e35c:	4602      	mov	r2, r0
 800e35e:	460b      	mov	r3, r1
 800e360:	4630      	mov	r0, r6
 800e362:	4639      	mov	r1, r7
 800e364:	f7f1 ffa0 	bl	80002a8 <__aeabi_dsub>
 800e368:	460b      	mov	r3, r1
 800e36a:	4602      	mov	r2, r0
 800e36c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e370:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e376:	ea46 060a 	orr.w	r6, r6, sl
 800e37a:	431e      	orrs	r6, r3
 800e37c:	d06f      	beq.n	800e45e <_strtod_l+0xb86>
 800e37e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e3b8 <_strtod_l+0xae0>)
 800e380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e384:	f7f2 fbba 	bl	8000afc <__aeabi_dcmplt>
 800e388:	2800      	cmp	r0, #0
 800e38a:	f47f acd3 	bne.w	800dd34 <_strtod_l+0x45c>
 800e38e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e3c0 <_strtod_l+0xae8>)
 800e390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e398:	f7f2 fbce 	bl	8000b38 <__aeabi_dcmpgt>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d093      	beq.n	800e2c8 <_strtod_l+0x9f0>
 800e3a0:	e4c8      	b.n	800dd34 <_strtod_l+0x45c>
 800e3a2:	bf00      	nop
 800e3a4:	f3af 8000 	nop.w
 800e3a8:	00000000 	.word	0x00000000
 800e3ac:	bff00000 	.word	0xbff00000
 800e3b0:	00000000 	.word	0x00000000
 800e3b4:	3ff00000 	.word	0x3ff00000
 800e3b8:	94a03595 	.word	0x94a03595
 800e3bc:	3fdfffff 	.word	0x3fdfffff
 800e3c0:	35afe535 	.word	0x35afe535
 800e3c4:	3fe00000 	.word	0x3fe00000
 800e3c8:	000fffff 	.word	0x000fffff
 800e3cc:	7ff00000 	.word	0x7ff00000
 800e3d0:	7fefffff 	.word	0x7fefffff
 800e3d4:	3ff00000 	.word	0x3ff00000
 800e3d8:	3fe00000 	.word	0x3fe00000
 800e3dc:	7fe00000 	.word	0x7fe00000
 800e3e0:	7c9fffff 	.word	0x7c9fffff
 800e3e4:	9b08      	ldr	r3, [sp, #32]
 800e3e6:	b323      	cbz	r3, 800e432 <_strtod_l+0xb5a>
 800e3e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e3ec:	d821      	bhi.n	800e432 <_strtod_l+0xb5a>
 800e3ee:	a328      	add	r3, pc, #160	@ (adr r3, 800e490 <_strtod_l+0xbb8>)
 800e3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	4639      	mov	r1, r7
 800e3f8:	f7f2 fb8a 	bl	8000b10 <__aeabi_dcmple>
 800e3fc:	b1a0      	cbz	r0, 800e428 <_strtod_l+0xb50>
 800e3fe:	4639      	mov	r1, r7
 800e400:	4630      	mov	r0, r6
 800e402:	f7f2 fbe1 	bl	8000bc8 <__aeabi_d2uiz>
 800e406:	2801      	cmp	r0, #1
 800e408:	bf38      	it	cc
 800e40a:	2001      	movcc	r0, #1
 800e40c:	f7f2 f88a 	bl	8000524 <__aeabi_ui2d>
 800e410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e412:	4606      	mov	r6, r0
 800e414:	460f      	mov	r7, r1
 800e416:	b9fb      	cbnz	r3, 800e458 <_strtod_l+0xb80>
 800e418:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e41c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e41e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e420:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e424:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e428:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e42a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e42e:	1b5b      	subs	r3, r3, r5
 800e430:	9311      	str	r3, [sp, #68]	@ 0x44
 800e432:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e436:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e43a:	f003 f829 	bl	8011490 <__ulp>
 800e43e:	4650      	mov	r0, sl
 800e440:	ec53 2b10 	vmov	r2, r3, d0
 800e444:	4659      	mov	r1, fp
 800e446:	f7f2 f8e7 	bl	8000618 <__aeabi_dmul>
 800e44a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e44e:	f7f1 ff2d 	bl	80002ac <__adddf3>
 800e452:	4682      	mov	sl, r0
 800e454:	468b      	mov	fp, r1
 800e456:	e770      	b.n	800e33a <_strtod_l+0xa62>
 800e458:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e45c:	e7e0      	b.n	800e420 <_strtod_l+0xb48>
 800e45e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e498 <_strtod_l+0xbc0>)
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	f7f2 fb4a 	bl	8000afc <__aeabi_dcmplt>
 800e468:	e798      	b.n	800e39c <_strtod_l+0xac4>
 800e46a:	2300      	movs	r3, #0
 800e46c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e46e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e470:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e472:	6013      	str	r3, [r2, #0]
 800e474:	f7ff ba6d 	b.w	800d952 <_strtod_l+0x7a>
 800e478:	2a65      	cmp	r2, #101	@ 0x65
 800e47a:	f43f ab68 	beq.w	800db4e <_strtod_l+0x276>
 800e47e:	2a45      	cmp	r2, #69	@ 0x45
 800e480:	f43f ab65 	beq.w	800db4e <_strtod_l+0x276>
 800e484:	2301      	movs	r3, #1
 800e486:	f7ff bba0 	b.w	800dbca <_strtod_l+0x2f2>
 800e48a:	bf00      	nop
 800e48c:	f3af 8000 	nop.w
 800e490:	ffc00000 	.word	0xffc00000
 800e494:	41dfffff 	.word	0x41dfffff
 800e498:	94a03595 	.word	0x94a03595
 800e49c:	3fcfffff 	.word	0x3fcfffff

0800e4a0 <_strtod_r>:
 800e4a0:	4b01      	ldr	r3, [pc, #4]	@ (800e4a8 <_strtod_r+0x8>)
 800e4a2:	f7ff ba19 	b.w	800d8d8 <_strtod_l>
 800e4a6:	bf00      	nop
 800e4a8:	20000114 	.word	0x20000114

0800e4ac <strtod>:
 800e4ac:	460a      	mov	r2, r1
 800e4ae:	4601      	mov	r1, r0
 800e4b0:	4802      	ldr	r0, [pc, #8]	@ (800e4bc <strtod+0x10>)
 800e4b2:	4b03      	ldr	r3, [pc, #12]	@ (800e4c0 <strtod+0x14>)
 800e4b4:	6800      	ldr	r0, [r0, #0]
 800e4b6:	f7ff ba0f 	b.w	800d8d8 <_strtod_l>
 800e4ba:	bf00      	nop
 800e4bc:	20000280 	.word	0x20000280
 800e4c0:	20000114 	.word	0x20000114

0800e4c4 <_strtol_l.isra.0>:
 800e4c4:	2b24      	cmp	r3, #36	@ 0x24
 800e4c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ca:	4686      	mov	lr, r0
 800e4cc:	4690      	mov	r8, r2
 800e4ce:	d801      	bhi.n	800e4d4 <_strtol_l.isra.0+0x10>
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d106      	bne.n	800e4e2 <_strtol_l.isra.0+0x1e>
 800e4d4:	f001 f962 	bl	800f79c <__errno>
 800e4d8:	2316      	movs	r3, #22
 800e4da:	6003      	str	r3, [r0, #0]
 800e4dc:	2000      	movs	r0, #0
 800e4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4e2:	4834      	ldr	r0, [pc, #208]	@ (800e5b4 <_strtol_l.isra.0+0xf0>)
 800e4e4:	460d      	mov	r5, r1
 800e4e6:	462a      	mov	r2, r5
 800e4e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4ec:	5d06      	ldrb	r6, [r0, r4]
 800e4ee:	f016 0608 	ands.w	r6, r6, #8
 800e4f2:	d1f8      	bne.n	800e4e6 <_strtol_l.isra.0+0x22>
 800e4f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e4f6:	d110      	bne.n	800e51a <_strtol_l.isra.0+0x56>
 800e4f8:	782c      	ldrb	r4, [r5, #0]
 800e4fa:	2601      	movs	r6, #1
 800e4fc:	1c95      	adds	r5, r2, #2
 800e4fe:	f033 0210 	bics.w	r2, r3, #16
 800e502:	d115      	bne.n	800e530 <_strtol_l.isra.0+0x6c>
 800e504:	2c30      	cmp	r4, #48	@ 0x30
 800e506:	d10d      	bne.n	800e524 <_strtol_l.isra.0+0x60>
 800e508:	782a      	ldrb	r2, [r5, #0]
 800e50a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e50e:	2a58      	cmp	r2, #88	@ 0x58
 800e510:	d108      	bne.n	800e524 <_strtol_l.isra.0+0x60>
 800e512:	786c      	ldrb	r4, [r5, #1]
 800e514:	3502      	adds	r5, #2
 800e516:	2310      	movs	r3, #16
 800e518:	e00a      	b.n	800e530 <_strtol_l.isra.0+0x6c>
 800e51a:	2c2b      	cmp	r4, #43	@ 0x2b
 800e51c:	bf04      	itt	eq
 800e51e:	782c      	ldrbeq	r4, [r5, #0]
 800e520:	1c95      	addeq	r5, r2, #2
 800e522:	e7ec      	b.n	800e4fe <_strtol_l.isra.0+0x3a>
 800e524:	2b00      	cmp	r3, #0
 800e526:	d1f6      	bne.n	800e516 <_strtol_l.isra.0+0x52>
 800e528:	2c30      	cmp	r4, #48	@ 0x30
 800e52a:	bf14      	ite	ne
 800e52c:	230a      	movne	r3, #10
 800e52e:	2308      	moveq	r3, #8
 800e530:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e534:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e538:	2200      	movs	r2, #0
 800e53a:	fbbc f9f3 	udiv	r9, ip, r3
 800e53e:	4610      	mov	r0, r2
 800e540:	fb03 ca19 	mls	sl, r3, r9, ip
 800e544:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e548:	2f09      	cmp	r7, #9
 800e54a:	d80f      	bhi.n	800e56c <_strtol_l.isra.0+0xa8>
 800e54c:	463c      	mov	r4, r7
 800e54e:	42a3      	cmp	r3, r4
 800e550:	dd1b      	ble.n	800e58a <_strtol_l.isra.0+0xc6>
 800e552:	1c57      	adds	r7, r2, #1
 800e554:	d007      	beq.n	800e566 <_strtol_l.isra.0+0xa2>
 800e556:	4581      	cmp	r9, r0
 800e558:	d314      	bcc.n	800e584 <_strtol_l.isra.0+0xc0>
 800e55a:	d101      	bne.n	800e560 <_strtol_l.isra.0+0x9c>
 800e55c:	45a2      	cmp	sl, r4
 800e55e:	db11      	blt.n	800e584 <_strtol_l.isra.0+0xc0>
 800e560:	fb00 4003 	mla	r0, r0, r3, r4
 800e564:	2201      	movs	r2, #1
 800e566:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e56a:	e7eb      	b.n	800e544 <_strtol_l.isra.0+0x80>
 800e56c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e570:	2f19      	cmp	r7, #25
 800e572:	d801      	bhi.n	800e578 <_strtol_l.isra.0+0xb4>
 800e574:	3c37      	subs	r4, #55	@ 0x37
 800e576:	e7ea      	b.n	800e54e <_strtol_l.isra.0+0x8a>
 800e578:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e57c:	2f19      	cmp	r7, #25
 800e57e:	d804      	bhi.n	800e58a <_strtol_l.isra.0+0xc6>
 800e580:	3c57      	subs	r4, #87	@ 0x57
 800e582:	e7e4      	b.n	800e54e <_strtol_l.isra.0+0x8a>
 800e584:	f04f 32ff 	mov.w	r2, #4294967295
 800e588:	e7ed      	b.n	800e566 <_strtol_l.isra.0+0xa2>
 800e58a:	1c53      	adds	r3, r2, #1
 800e58c:	d108      	bne.n	800e5a0 <_strtol_l.isra.0+0xdc>
 800e58e:	2322      	movs	r3, #34	@ 0x22
 800e590:	f8ce 3000 	str.w	r3, [lr]
 800e594:	4660      	mov	r0, ip
 800e596:	f1b8 0f00 	cmp.w	r8, #0
 800e59a:	d0a0      	beq.n	800e4de <_strtol_l.isra.0+0x1a>
 800e59c:	1e69      	subs	r1, r5, #1
 800e59e:	e006      	b.n	800e5ae <_strtol_l.isra.0+0xea>
 800e5a0:	b106      	cbz	r6, 800e5a4 <_strtol_l.isra.0+0xe0>
 800e5a2:	4240      	negs	r0, r0
 800e5a4:	f1b8 0f00 	cmp.w	r8, #0
 800e5a8:	d099      	beq.n	800e4de <_strtol_l.isra.0+0x1a>
 800e5aa:	2a00      	cmp	r2, #0
 800e5ac:	d1f6      	bne.n	800e59c <_strtol_l.isra.0+0xd8>
 800e5ae:	f8c8 1000 	str.w	r1, [r8]
 800e5b2:	e794      	b.n	800e4de <_strtol_l.isra.0+0x1a>
 800e5b4:	08017e19 	.word	0x08017e19

0800e5b8 <_strtol_r>:
 800e5b8:	f7ff bf84 	b.w	800e4c4 <_strtol_l.isra.0>

0800e5bc <strtol>:
 800e5bc:	4613      	mov	r3, r2
 800e5be:	460a      	mov	r2, r1
 800e5c0:	4601      	mov	r1, r0
 800e5c2:	4802      	ldr	r0, [pc, #8]	@ (800e5cc <strtol+0x10>)
 800e5c4:	6800      	ldr	r0, [r0, #0]
 800e5c6:	f7ff bf7d 	b.w	800e4c4 <_strtol_l.isra.0>
 800e5ca:	bf00      	nop
 800e5cc:	20000280 	.word	0x20000280

0800e5d0 <__cvt>:
 800e5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5d4:	ec57 6b10 	vmov	r6, r7, d0
 800e5d8:	2f00      	cmp	r7, #0
 800e5da:	460c      	mov	r4, r1
 800e5dc:	4619      	mov	r1, r3
 800e5de:	463b      	mov	r3, r7
 800e5e0:	bfbb      	ittet	lt
 800e5e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e5e6:	461f      	movlt	r7, r3
 800e5e8:	2300      	movge	r3, #0
 800e5ea:	232d      	movlt	r3, #45	@ 0x2d
 800e5ec:	700b      	strb	r3, [r1, #0]
 800e5ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e5f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e5f4:	4691      	mov	r9, r2
 800e5f6:	f023 0820 	bic.w	r8, r3, #32
 800e5fa:	bfbc      	itt	lt
 800e5fc:	4632      	movlt	r2, r6
 800e5fe:	4616      	movlt	r6, r2
 800e600:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e604:	d005      	beq.n	800e612 <__cvt+0x42>
 800e606:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e60a:	d100      	bne.n	800e60e <__cvt+0x3e>
 800e60c:	3401      	adds	r4, #1
 800e60e:	2102      	movs	r1, #2
 800e610:	e000      	b.n	800e614 <__cvt+0x44>
 800e612:	2103      	movs	r1, #3
 800e614:	ab03      	add	r3, sp, #12
 800e616:	9301      	str	r3, [sp, #4]
 800e618:	ab02      	add	r3, sp, #8
 800e61a:	9300      	str	r3, [sp, #0]
 800e61c:	ec47 6b10 	vmov	d0, r6, r7
 800e620:	4653      	mov	r3, sl
 800e622:	4622      	mov	r2, r4
 800e624:	f001 f9ac 	bl	800f980 <_dtoa_r>
 800e628:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e62c:	4605      	mov	r5, r0
 800e62e:	d119      	bne.n	800e664 <__cvt+0x94>
 800e630:	f019 0f01 	tst.w	r9, #1
 800e634:	d00e      	beq.n	800e654 <__cvt+0x84>
 800e636:	eb00 0904 	add.w	r9, r0, r4
 800e63a:	2200      	movs	r2, #0
 800e63c:	2300      	movs	r3, #0
 800e63e:	4630      	mov	r0, r6
 800e640:	4639      	mov	r1, r7
 800e642:	f7f2 fa51 	bl	8000ae8 <__aeabi_dcmpeq>
 800e646:	b108      	cbz	r0, 800e64c <__cvt+0x7c>
 800e648:	f8cd 900c 	str.w	r9, [sp, #12]
 800e64c:	2230      	movs	r2, #48	@ 0x30
 800e64e:	9b03      	ldr	r3, [sp, #12]
 800e650:	454b      	cmp	r3, r9
 800e652:	d31e      	bcc.n	800e692 <__cvt+0xc2>
 800e654:	9b03      	ldr	r3, [sp, #12]
 800e656:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e658:	1b5b      	subs	r3, r3, r5
 800e65a:	4628      	mov	r0, r5
 800e65c:	6013      	str	r3, [r2, #0]
 800e65e:	b004      	add	sp, #16
 800e660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e664:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e668:	eb00 0904 	add.w	r9, r0, r4
 800e66c:	d1e5      	bne.n	800e63a <__cvt+0x6a>
 800e66e:	7803      	ldrb	r3, [r0, #0]
 800e670:	2b30      	cmp	r3, #48	@ 0x30
 800e672:	d10a      	bne.n	800e68a <__cvt+0xba>
 800e674:	2200      	movs	r2, #0
 800e676:	2300      	movs	r3, #0
 800e678:	4630      	mov	r0, r6
 800e67a:	4639      	mov	r1, r7
 800e67c:	f7f2 fa34 	bl	8000ae8 <__aeabi_dcmpeq>
 800e680:	b918      	cbnz	r0, 800e68a <__cvt+0xba>
 800e682:	f1c4 0401 	rsb	r4, r4, #1
 800e686:	f8ca 4000 	str.w	r4, [sl]
 800e68a:	f8da 3000 	ldr.w	r3, [sl]
 800e68e:	4499      	add	r9, r3
 800e690:	e7d3      	b.n	800e63a <__cvt+0x6a>
 800e692:	1c59      	adds	r1, r3, #1
 800e694:	9103      	str	r1, [sp, #12]
 800e696:	701a      	strb	r2, [r3, #0]
 800e698:	e7d9      	b.n	800e64e <__cvt+0x7e>

0800e69a <__exponent>:
 800e69a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e69c:	2900      	cmp	r1, #0
 800e69e:	bfba      	itte	lt
 800e6a0:	4249      	neglt	r1, r1
 800e6a2:	232d      	movlt	r3, #45	@ 0x2d
 800e6a4:	232b      	movge	r3, #43	@ 0x2b
 800e6a6:	2909      	cmp	r1, #9
 800e6a8:	7002      	strb	r2, [r0, #0]
 800e6aa:	7043      	strb	r3, [r0, #1]
 800e6ac:	dd29      	ble.n	800e702 <__exponent+0x68>
 800e6ae:	f10d 0307 	add.w	r3, sp, #7
 800e6b2:	461d      	mov	r5, r3
 800e6b4:	270a      	movs	r7, #10
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800e6bc:	fb07 1416 	mls	r4, r7, r6, r1
 800e6c0:	3430      	adds	r4, #48	@ 0x30
 800e6c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	2c63      	cmp	r4, #99	@ 0x63
 800e6ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800e6ce:	4631      	mov	r1, r6
 800e6d0:	dcf1      	bgt.n	800e6b6 <__exponent+0x1c>
 800e6d2:	3130      	adds	r1, #48	@ 0x30
 800e6d4:	1e94      	subs	r4, r2, #2
 800e6d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e6da:	1c41      	adds	r1, r0, #1
 800e6dc:	4623      	mov	r3, r4
 800e6de:	42ab      	cmp	r3, r5
 800e6e0:	d30a      	bcc.n	800e6f8 <__exponent+0x5e>
 800e6e2:	f10d 0309 	add.w	r3, sp, #9
 800e6e6:	1a9b      	subs	r3, r3, r2
 800e6e8:	42ac      	cmp	r4, r5
 800e6ea:	bf88      	it	hi
 800e6ec:	2300      	movhi	r3, #0
 800e6ee:	3302      	adds	r3, #2
 800e6f0:	4403      	add	r3, r0
 800e6f2:	1a18      	subs	r0, r3, r0
 800e6f4:	b003      	add	sp, #12
 800e6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e6fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e700:	e7ed      	b.n	800e6de <__exponent+0x44>
 800e702:	2330      	movs	r3, #48	@ 0x30
 800e704:	3130      	adds	r1, #48	@ 0x30
 800e706:	7083      	strb	r3, [r0, #2]
 800e708:	70c1      	strb	r1, [r0, #3]
 800e70a:	1d03      	adds	r3, r0, #4
 800e70c:	e7f1      	b.n	800e6f2 <__exponent+0x58>
	...

0800e710 <_printf_float>:
 800e710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e714:	b08d      	sub	sp, #52	@ 0x34
 800e716:	460c      	mov	r4, r1
 800e718:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e71c:	4616      	mov	r6, r2
 800e71e:	461f      	mov	r7, r3
 800e720:	4605      	mov	r5, r0
 800e722:	f000 fff1 	bl	800f708 <_localeconv_r>
 800e726:	6803      	ldr	r3, [r0, #0]
 800e728:	9304      	str	r3, [sp, #16]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7f1 fdb0 	bl	8000290 <strlen>
 800e730:	2300      	movs	r3, #0
 800e732:	930a      	str	r3, [sp, #40]	@ 0x28
 800e734:	f8d8 3000 	ldr.w	r3, [r8]
 800e738:	9005      	str	r0, [sp, #20]
 800e73a:	3307      	adds	r3, #7
 800e73c:	f023 0307 	bic.w	r3, r3, #7
 800e740:	f103 0208 	add.w	r2, r3, #8
 800e744:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e748:	f8d4 b000 	ldr.w	fp, [r4]
 800e74c:	f8c8 2000 	str.w	r2, [r8]
 800e750:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e754:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e758:	9307      	str	r3, [sp, #28]
 800e75a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e75e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e766:	4b9c      	ldr	r3, [pc, #624]	@ (800e9d8 <_printf_float+0x2c8>)
 800e768:	f04f 32ff 	mov.w	r2, #4294967295
 800e76c:	f7f2 f9ee 	bl	8000b4c <__aeabi_dcmpun>
 800e770:	bb70      	cbnz	r0, 800e7d0 <_printf_float+0xc0>
 800e772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e776:	4b98      	ldr	r3, [pc, #608]	@ (800e9d8 <_printf_float+0x2c8>)
 800e778:	f04f 32ff 	mov.w	r2, #4294967295
 800e77c:	f7f2 f9c8 	bl	8000b10 <__aeabi_dcmple>
 800e780:	bb30      	cbnz	r0, 800e7d0 <_printf_float+0xc0>
 800e782:	2200      	movs	r2, #0
 800e784:	2300      	movs	r3, #0
 800e786:	4640      	mov	r0, r8
 800e788:	4649      	mov	r1, r9
 800e78a:	f7f2 f9b7 	bl	8000afc <__aeabi_dcmplt>
 800e78e:	b110      	cbz	r0, 800e796 <_printf_float+0x86>
 800e790:	232d      	movs	r3, #45	@ 0x2d
 800e792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e796:	4a91      	ldr	r2, [pc, #580]	@ (800e9dc <_printf_float+0x2cc>)
 800e798:	4b91      	ldr	r3, [pc, #580]	@ (800e9e0 <_printf_float+0x2d0>)
 800e79a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e79e:	bf8c      	ite	hi
 800e7a0:	4690      	movhi	r8, r2
 800e7a2:	4698      	movls	r8, r3
 800e7a4:	2303      	movs	r3, #3
 800e7a6:	6123      	str	r3, [r4, #16]
 800e7a8:	f02b 0304 	bic.w	r3, fp, #4
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	f04f 0900 	mov.w	r9, #0
 800e7b2:	9700      	str	r7, [sp, #0]
 800e7b4:	4633      	mov	r3, r6
 800e7b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e7b8:	4621      	mov	r1, r4
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	f000 f9d2 	bl	800eb64 <_printf_common>
 800e7c0:	3001      	adds	r0, #1
 800e7c2:	f040 808d 	bne.w	800e8e0 <_printf_float+0x1d0>
 800e7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ca:	b00d      	add	sp, #52	@ 0x34
 800e7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d0:	4642      	mov	r2, r8
 800e7d2:	464b      	mov	r3, r9
 800e7d4:	4640      	mov	r0, r8
 800e7d6:	4649      	mov	r1, r9
 800e7d8:	f7f2 f9b8 	bl	8000b4c <__aeabi_dcmpun>
 800e7dc:	b140      	cbz	r0, 800e7f0 <_printf_float+0xe0>
 800e7de:	464b      	mov	r3, r9
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	bfbc      	itt	lt
 800e7e4:	232d      	movlt	r3, #45	@ 0x2d
 800e7e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e7ea:	4a7e      	ldr	r2, [pc, #504]	@ (800e9e4 <_printf_float+0x2d4>)
 800e7ec:	4b7e      	ldr	r3, [pc, #504]	@ (800e9e8 <_printf_float+0x2d8>)
 800e7ee:	e7d4      	b.n	800e79a <_printf_float+0x8a>
 800e7f0:	6863      	ldr	r3, [r4, #4]
 800e7f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e7f6:	9206      	str	r2, [sp, #24]
 800e7f8:	1c5a      	adds	r2, r3, #1
 800e7fa:	d13b      	bne.n	800e874 <_printf_float+0x164>
 800e7fc:	2306      	movs	r3, #6
 800e7fe:	6063      	str	r3, [r4, #4]
 800e800:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e804:	2300      	movs	r3, #0
 800e806:	6022      	str	r2, [r4, #0]
 800e808:	9303      	str	r3, [sp, #12]
 800e80a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e80c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e810:	ab09      	add	r3, sp, #36	@ 0x24
 800e812:	9300      	str	r3, [sp, #0]
 800e814:	6861      	ldr	r1, [r4, #4]
 800e816:	ec49 8b10 	vmov	d0, r8, r9
 800e81a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e81e:	4628      	mov	r0, r5
 800e820:	f7ff fed6 	bl	800e5d0 <__cvt>
 800e824:	9b06      	ldr	r3, [sp, #24]
 800e826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e828:	2b47      	cmp	r3, #71	@ 0x47
 800e82a:	4680      	mov	r8, r0
 800e82c:	d129      	bne.n	800e882 <_printf_float+0x172>
 800e82e:	1cc8      	adds	r0, r1, #3
 800e830:	db02      	blt.n	800e838 <_printf_float+0x128>
 800e832:	6863      	ldr	r3, [r4, #4]
 800e834:	4299      	cmp	r1, r3
 800e836:	dd41      	ble.n	800e8bc <_printf_float+0x1ac>
 800e838:	f1aa 0a02 	sub.w	sl, sl, #2
 800e83c:	fa5f fa8a 	uxtb.w	sl, sl
 800e840:	3901      	subs	r1, #1
 800e842:	4652      	mov	r2, sl
 800e844:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e848:	9109      	str	r1, [sp, #36]	@ 0x24
 800e84a:	f7ff ff26 	bl	800e69a <__exponent>
 800e84e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e850:	1813      	adds	r3, r2, r0
 800e852:	2a01      	cmp	r2, #1
 800e854:	4681      	mov	r9, r0
 800e856:	6123      	str	r3, [r4, #16]
 800e858:	dc02      	bgt.n	800e860 <_printf_float+0x150>
 800e85a:	6822      	ldr	r2, [r4, #0]
 800e85c:	07d2      	lsls	r2, r2, #31
 800e85e:	d501      	bpl.n	800e864 <_printf_float+0x154>
 800e860:	3301      	adds	r3, #1
 800e862:	6123      	str	r3, [r4, #16]
 800e864:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d0a2      	beq.n	800e7b2 <_printf_float+0xa2>
 800e86c:	232d      	movs	r3, #45	@ 0x2d
 800e86e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e872:	e79e      	b.n	800e7b2 <_printf_float+0xa2>
 800e874:	9a06      	ldr	r2, [sp, #24]
 800e876:	2a47      	cmp	r2, #71	@ 0x47
 800e878:	d1c2      	bne.n	800e800 <_printf_float+0xf0>
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1c0      	bne.n	800e800 <_printf_float+0xf0>
 800e87e:	2301      	movs	r3, #1
 800e880:	e7bd      	b.n	800e7fe <_printf_float+0xee>
 800e882:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e886:	d9db      	bls.n	800e840 <_printf_float+0x130>
 800e888:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e88c:	d118      	bne.n	800e8c0 <_printf_float+0x1b0>
 800e88e:	2900      	cmp	r1, #0
 800e890:	6863      	ldr	r3, [r4, #4]
 800e892:	dd0b      	ble.n	800e8ac <_printf_float+0x19c>
 800e894:	6121      	str	r1, [r4, #16]
 800e896:	b913      	cbnz	r3, 800e89e <_printf_float+0x18e>
 800e898:	6822      	ldr	r2, [r4, #0]
 800e89a:	07d0      	lsls	r0, r2, #31
 800e89c:	d502      	bpl.n	800e8a4 <_printf_float+0x194>
 800e89e:	3301      	adds	r3, #1
 800e8a0:	440b      	add	r3, r1
 800e8a2:	6123      	str	r3, [r4, #16]
 800e8a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e8a6:	f04f 0900 	mov.w	r9, #0
 800e8aa:	e7db      	b.n	800e864 <_printf_float+0x154>
 800e8ac:	b913      	cbnz	r3, 800e8b4 <_printf_float+0x1a4>
 800e8ae:	6822      	ldr	r2, [r4, #0]
 800e8b0:	07d2      	lsls	r2, r2, #31
 800e8b2:	d501      	bpl.n	800e8b8 <_printf_float+0x1a8>
 800e8b4:	3302      	adds	r3, #2
 800e8b6:	e7f4      	b.n	800e8a2 <_printf_float+0x192>
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e7f2      	b.n	800e8a2 <_printf_float+0x192>
 800e8bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e8c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8c2:	4299      	cmp	r1, r3
 800e8c4:	db05      	blt.n	800e8d2 <_printf_float+0x1c2>
 800e8c6:	6823      	ldr	r3, [r4, #0]
 800e8c8:	6121      	str	r1, [r4, #16]
 800e8ca:	07d8      	lsls	r0, r3, #31
 800e8cc:	d5ea      	bpl.n	800e8a4 <_printf_float+0x194>
 800e8ce:	1c4b      	adds	r3, r1, #1
 800e8d0:	e7e7      	b.n	800e8a2 <_printf_float+0x192>
 800e8d2:	2900      	cmp	r1, #0
 800e8d4:	bfd4      	ite	le
 800e8d6:	f1c1 0202 	rsble	r2, r1, #2
 800e8da:	2201      	movgt	r2, #1
 800e8dc:	4413      	add	r3, r2
 800e8de:	e7e0      	b.n	800e8a2 <_printf_float+0x192>
 800e8e0:	6823      	ldr	r3, [r4, #0]
 800e8e2:	055a      	lsls	r2, r3, #21
 800e8e4:	d407      	bmi.n	800e8f6 <_printf_float+0x1e6>
 800e8e6:	6923      	ldr	r3, [r4, #16]
 800e8e8:	4642      	mov	r2, r8
 800e8ea:	4631      	mov	r1, r6
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	47b8      	blx	r7
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	d12b      	bne.n	800e94c <_printf_float+0x23c>
 800e8f4:	e767      	b.n	800e7c6 <_printf_float+0xb6>
 800e8f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e8fa:	f240 80dd 	bls.w	800eab8 <_printf_float+0x3a8>
 800e8fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e902:	2200      	movs	r2, #0
 800e904:	2300      	movs	r3, #0
 800e906:	f7f2 f8ef 	bl	8000ae8 <__aeabi_dcmpeq>
 800e90a:	2800      	cmp	r0, #0
 800e90c:	d033      	beq.n	800e976 <_printf_float+0x266>
 800e90e:	4a37      	ldr	r2, [pc, #220]	@ (800e9ec <_printf_float+0x2dc>)
 800e910:	2301      	movs	r3, #1
 800e912:	4631      	mov	r1, r6
 800e914:	4628      	mov	r0, r5
 800e916:	47b8      	blx	r7
 800e918:	3001      	adds	r0, #1
 800e91a:	f43f af54 	beq.w	800e7c6 <_printf_float+0xb6>
 800e91e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e922:	4543      	cmp	r3, r8
 800e924:	db02      	blt.n	800e92c <_printf_float+0x21c>
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	07d8      	lsls	r0, r3, #31
 800e92a:	d50f      	bpl.n	800e94c <_printf_float+0x23c>
 800e92c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e930:	4631      	mov	r1, r6
 800e932:	4628      	mov	r0, r5
 800e934:	47b8      	blx	r7
 800e936:	3001      	adds	r0, #1
 800e938:	f43f af45 	beq.w	800e7c6 <_printf_float+0xb6>
 800e93c:	f04f 0900 	mov.w	r9, #0
 800e940:	f108 38ff 	add.w	r8, r8, #4294967295
 800e944:	f104 0a1a 	add.w	sl, r4, #26
 800e948:	45c8      	cmp	r8, r9
 800e94a:	dc09      	bgt.n	800e960 <_printf_float+0x250>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	079b      	lsls	r3, r3, #30
 800e950:	f100 8103 	bmi.w	800eb5a <_printf_float+0x44a>
 800e954:	68e0      	ldr	r0, [r4, #12]
 800e956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e958:	4298      	cmp	r0, r3
 800e95a:	bfb8      	it	lt
 800e95c:	4618      	movlt	r0, r3
 800e95e:	e734      	b.n	800e7ca <_printf_float+0xba>
 800e960:	2301      	movs	r3, #1
 800e962:	4652      	mov	r2, sl
 800e964:	4631      	mov	r1, r6
 800e966:	4628      	mov	r0, r5
 800e968:	47b8      	blx	r7
 800e96a:	3001      	adds	r0, #1
 800e96c:	f43f af2b 	beq.w	800e7c6 <_printf_float+0xb6>
 800e970:	f109 0901 	add.w	r9, r9, #1
 800e974:	e7e8      	b.n	800e948 <_printf_float+0x238>
 800e976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e978:	2b00      	cmp	r3, #0
 800e97a:	dc39      	bgt.n	800e9f0 <_printf_float+0x2e0>
 800e97c:	4a1b      	ldr	r2, [pc, #108]	@ (800e9ec <_printf_float+0x2dc>)
 800e97e:	2301      	movs	r3, #1
 800e980:	4631      	mov	r1, r6
 800e982:	4628      	mov	r0, r5
 800e984:	47b8      	blx	r7
 800e986:	3001      	adds	r0, #1
 800e988:	f43f af1d 	beq.w	800e7c6 <_printf_float+0xb6>
 800e98c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e990:	ea59 0303 	orrs.w	r3, r9, r3
 800e994:	d102      	bne.n	800e99c <_printf_float+0x28c>
 800e996:	6823      	ldr	r3, [r4, #0]
 800e998:	07d9      	lsls	r1, r3, #31
 800e99a:	d5d7      	bpl.n	800e94c <_printf_float+0x23c>
 800e99c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9a0:	4631      	mov	r1, r6
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	47b8      	blx	r7
 800e9a6:	3001      	adds	r0, #1
 800e9a8:	f43f af0d 	beq.w	800e7c6 <_printf_float+0xb6>
 800e9ac:	f04f 0a00 	mov.w	sl, #0
 800e9b0:	f104 0b1a 	add.w	fp, r4, #26
 800e9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b6:	425b      	negs	r3, r3
 800e9b8:	4553      	cmp	r3, sl
 800e9ba:	dc01      	bgt.n	800e9c0 <_printf_float+0x2b0>
 800e9bc:	464b      	mov	r3, r9
 800e9be:	e793      	b.n	800e8e8 <_printf_float+0x1d8>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	465a      	mov	r2, fp
 800e9c4:	4631      	mov	r1, r6
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	47b8      	blx	r7
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	f43f aefb 	beq.w	800e7c6 <_printf_float+0xb6>
 800e9d0:	f10a 0a01 	add.w	sl, sl, #1
 800e9d4:	e7ee      	b.n	800e9b4 <_printf_float+0x2a4>
 800e9d6:	bf00      	nop
 800e9d8:	7fefffff 	.word	0x7fefffff
 800e9dc:	08017b95 	.word	0x08017b95
 800e9e0:	08017b91 	.word	0x08017b91
 800e9e4:	08017b9d 	.word	0x08017b9d
 800e9e8:	08017b99 	.word	0x08017b99
 800e9ec:	08017dbc 	.word	0x08017dbc
 800e9f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e9f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e9f6:	4553      	cmp	r3, sl
 800e9f8:	bfa8      	it	ge
 800e9fa:	4653      	movge	r3, sl
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	4699      	mov	r9, r3
 800ea00:	dc36      	bgt.n	800ea70 <_printf_float+0x360>
 800ea02:	f04f 0b00 	mov.w	fp, #0
 800ea06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea0a:	f104 021a 	add.w	r2, r4, #26
 800ea0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ea10:	9306      	str	r3, [sp, #24]
 800ea12:	eba3 0309 	sub.w	r3, r3, r9
 800ea16:	455b      	cmp	r3, fp
 800ea18:	dc31      	bgt.n	800ea7e <_printf_float+0x36e>
 800ea1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea1c:	459a      	cmp	sl, r3
 800ea1e:	dc3a      	bgt.n	800ea96 <_printf_float+0x386>
 800ea20:	6823      	ldr	r3, [r4, #0]
 800ea22:	07da      	lsls	r2, r3, #31
 800ea24:	d437      	bmi.n	800ea96 <_printf_float+0x386>
 800ea26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea28:	ebaa 0903 	sub.w	r9, sl, r3
 800ea2c:	9b06      	ldr	r3, [sp, #24]
 800ea2e:	ebaa 0303 	sub.w	r3, sl, r3
 800ea32:	4599      	cmp	r9, r3
 800ea34:	bfa8      	it	ge
 800ea36:	4699      	movge	r9, r3
 800ea38:	f1b9 0f00 	cmp.w	r9, #0
 800ea3c:	dc33      	bgt.n	800eaa6 <_printf_float+0x396>
 800ea3e:	f04f 0800 	mov.w	r8, #0
 800ea42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea46:	f104 0b1a 	add.w	fp, r4, #26
 800ea4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea4c:	ebaa 0303 	sub.w	r3, sl, r3
 800ea50:	eba3 0309 	sub.w	r3, r3, r9
 800ea54:	4543      	cmp	r3, r8
 800ea56:	f77f af79 	ble.w	800e94c <_printf_float+0x23c>
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	465a      	mov	r2, fp
 800ea5e:	4631      	mov	r1, r6
 800ea60:	4628      	mov	r0, r5
 800ea62:	47b8      	blx	r7
 800ea64:	3001      	adds	r0, #1
 800ea66:	f43f aeae 	beq.w	800e7c6 <_printf_float+0xb6>
 800ea6a:	f108 0801 	add.w	r8, r8, #1
 800ea6e:	e7ec      	b.n	800ea4a <_printf_float+0x33a>
 800ea70:	4642      	mov	r2, r8
 800ea72:	4631      	mov	r1, r6
 800ea74:	4628      	mov	r0, r5
 800ea76:	47b8      	blx	r7
 800ea78:	3001      	adds	r0, #1
 800ea7a:	d1c2      	bne.n	800ea02 <_printf_float+0x2f2>
 800ea7c:	e6a3      	b.n	800e7c6 <_printf_float+0xb6>
 800ea7e:	2301      	movs	r3, #1
 800ea80:	4631      	mov	r1, r6
 800ea82:	4628      	mov	r0, r5
 800ea84:	9206      	str	r2, [sp, #24]
 800ea86:	47b8      	blx	r7
 800ea88:	3001      	adds	r0, #1
 800ea8a:	f43f ae9c 	beq.w	800e7c6 <_printf_float+0xb6>
 800ea8e:	9a06      	ldr	r2, [sp, #24]
 800ea90:	f10b 0b01 	add.w	fp, fp, #1
 800ea94:	e7bb      	b.n	800ea0e <_printf_float+0x2fe>
 800ea96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea9a:	4631      	mov	r1, r6
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	47b8      	blx	r7
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	d1c0      	bne.n	800ea26 <_printf_float+0x316>
 800eaa4:	e68f      	b.n	800e7c6 <_printf_float+0xb6>
 800eaa6:	9a06      	ldr	r2, [sp, #24]
 800eaa8:	464b      	mov	r3, r9
 800eaaa:	4442      	add	r2, r8
 800eaac:	4631      	mov	r1, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	47b8      	blx	r7
 800eab2:	3001      	adds	r0, #1
 800eab4:	d1c3      	bne.n	800ea3e <_printf_float+0x32e>
 800eab6:	e686      	b.n	800e7c6 <_printf_float+0xb6>
 800eab8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eabc:	f1ba 0f01 	cmp.w	sl, #1
 800eac0:	dc01      	bgt.n	800eac6 <_printf_float+0x3b6>
 800eac2:	07db      	lsls	r3, r3, #31
 800eac4:	d536      	bpl.n	800eb34 <_printf_float+0x424>
 800eac6:	2301      	movs	r3, #1
 800eac8:	4642      	mov	r2, r8
 800eaca:	4631      	mov	r1, r6
 800eacc:	4628      	mov	r0, r5
 800eace:	47b8      	blx	r7
 800ead0:	3001      	adds	r0, #1
 800ead2:	f43f ae78 	beq.w	800e7c6 <_printf_float+0xb6>
 800ead6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eada:	4631      	mov	r1, r6
 800eadc:	4628      	mov	r0, r5
 800eade:	47b8      	blx	r7
 800eae0:	3001      	adds	r0, #1
 800eae2:	f43f ae70 	beq.w	800e7c6 <_printf_float+0xb6>
 800eae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eaea:	2200      	movs	r2, #0
 800eaec:	2300      	movs	r3, #0
 800eaee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eaf2:	f7f1 fff9 	bl	8000ae8 <__aeabi_dcmpeq>
 800eaf6:	b9c0      	cbnz	r0, 800eb2a <_printf_float+0x41a>
 800eaf8:	4653      	mov	r3, sl
 800eafa:	f108 0201 	add.w	r2, r8, #1
 800eafe:	4631      	mov	r1, r6
 800eb00:	4628      	mov	r0, r5
 800eb02:	47b8      	blx	r7
 800eb04:	3001      	adds	r0, #1
 800eb06:	d10c      	bne.n	800eb22 <_printf_float+0x412>
 800eb08:	e65d      	b.n	800e7c6 <_printf_float+0xb6>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	465a      	mov	r2, fp
 800eb0e:	4631      	mov	r1, r6
 800eb10:	4628      	mov	r0, r5
 800eb12:	47b8      	blx	r7
 800eb14:	3001      	adds	r0, #1
 800eb16:	f43f ae56 	beq.w	800e7c6 <_printf_float+0xb6>
 800eb1a:	f108 0801 	add.w	r8, r8, #1
 800eb1e:	45d0      	cmp	r8, sl
 800eb20:	dbf3      	blt.n	800eb0a <_printf_float+0x3fa>
 800eb22:	464b      	mov	r3, r9
 800eb24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eb28:	e6df      	b.n	800e8ea <_printf_float+0x1da>
 800eb2a:	f04f 0800 	mov.w	r8, #0
 800eb2e:	f104 0b1a 	add.w	fp, r4, #26
 800eb32:	e7f4      	b.n	800eb1e <_printf_float+0x40e>
 800eb34:	2301      	movs	r3, #1
 800eb36:	4642      	mov	r2, r8
 800eb38:	e7e1      	b.n	800eafe <_printf_float+0x3ee>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	464a      	mov	r2, r9
 800eb3e:	4631      	mov	r1, r6
 800eb40:	4628      	mov	r0, r5
 800eb42:	47b8      	blx	r7
 800eb44:	3001      	adds	r0, #1
 800eb46:	f43f ae3e 	beq.w	800e7c6 <_printf_float+0xb6>
 800eb4a:	f108 0801 	add.w	r8, r8, #1
 800eb4e:	68e3      	ldr	r3, [r4, #12]
 800eb50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb52:	1a5b      	subs	r3, r3, r1
 800eb54:	4543      	cmp	r3, r8
 800eb56:	dcf0      	bgt.n	800eb3a <_printf_float+0x42a>
 800eb58:	e6fc      	b.n	800e954 <_printf_float+0x244>
 800eb5a:	f04f 0800 	mov.w	r8, #0
 800eb5e:	f104 0919 	add.w	r9, r4, #25
 800eb62:	e7f4      	b.n	800eb4e <_printf_float+0x43e>

0800eb64 <_printf_common>:
 800eb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb68:	4616      	mov	r6, r2
 800eb6a:	4698      	mov	r8, r3
 800eb6c:	688a      	ldr	r2, [r1, #8]
 800eb6e:	690b      	ldr	r3, [r1, #16]
 800eb70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb74:	4293      	cmp	r3, r2
 800eb76:	bfb8      	it	lt
 800eb78:	4613      	movlt	r3, r2
 800eb7a:	6033      	str	r3, [r6, #0]
 800eb7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb80:	4607      	mov	r7, r0
 800eb82:	460c      	mov	r4, r1
 800eb84:	b10a      	cbz	r2, 800eb8a <_printf_common+0x26>
 800eb86:	3301      	adds	r3, #1
 800eb88:	6033      	str	r3, [r6, #0]
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	0699      	lsls	r1, r3, #26
 800eb8e:	bf42      	ittt	mi
 800eb90:	6833      	ldrmi	r3, [r6, #0]
 800eb92:	3302      	addmi	r3, #2
 800eb94:	6033      	strmi	r3, [r6, #0]
 800eb96:	6825      	ldr	r5, [r4, #0]
 800eb98:	f015 0506 	ands.w	r5, r5, #6
 800eb9c:	d106      	bne.n	800ebac <_printf_common+0x48>
 800eb9e:	f104 0a19 	add.w	sl, r4, #25
 800eba2:	68e3      	ldr	r3, [r4, #12]
 800eba4:	6832      	ldr	r2, [r6, #0]
 800eba6:	1a9b      	subs	r3, r3, r2
 800eba8:	42ab      	cmp	r3, r5
 800ebaa:	dc26      	bgt.n	800ebfa <_printf_common+0x96>
 800ebac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ebb0:	6822      	ldr	r2, [r4, #0]
 800ebb2:	3b00      	subs	r3, #0
 800ebb4:	bf18      	it	ne
 800ebb6:	2301      	movne	r3, #1
 800ebb8:	0692      	lsls	r2, r2, #26
 800ebba:	d42b      	bmi.n	800ec14 <_printf_common+0xb0>
 800ebbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ebc0:	4641      	mov	r1, r8
 800ebc2:	4638      	mov	r0, r7
 800ebc4:	47c8      	blx	r9
 800ebc6:	3001      	adds	r0, #1
 800ebc8:	d01e      	beq.n	800ec08 <_printf_common+0xa4>
 800ebca:	6823      	ldr	r3, [r4, #0]
 800ebcc:	6922      	ldr	r2, [r4, #16]
 800ebce:	f003 0306 	and.w	r3, r3, #6
 800ebd2:	2b04      	cmp	r3, #4
 800ebd4:	bf02      	ittt	eq
 800ebd6:	68e5      	ldreq	r5, [r4, #12]
 800ebd8:	6833      	ldreq	r3, [r6, #0]
 800ebda:	1aed      	subeq	r5, r5, r3
 800ebdc:	68a3      	ldr	r3, [r4, #8]
 800ebde:	bf0c      	ite	eq
 800ebe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebe4:	2500      	movne	r5, #0
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	bfc4      	itt	gt
 800ebea:	1a9b      	subgt	r3, r3, r2
 800ebec:	18ed      	addgt	r5, r5, r3
 800ebee:	2600      	movs	r6, #0
 800ebf0:	341a      	adds	r4, #26
 800ebf2:	42b5      	cmp	r5, r6
 800ebf4:	d11a      	bne.n	800ec2c <_printf_common+0xc8>
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	e008      	b.n	800ec0c <_printf_common+0xa8>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	4652      	mov	r2, sl
 800ebfe:	4641      	mov	r1, r8
 800ec00:	4638      	mov	r0, r7
 800ec02:	47c8      	blx	r9
 800ec04:	3001      	adds	r0, #1
 800ec06:	d103      	bne.n	800ec10 <_printf_common+0xac>
 800ec08:	f04f 30ff 	mov.w	r0, #4294967295
 800ec0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec10:	3501      	adds	r5, #1
 800ec12:	e7c6      	b.n	800eba2 <_printf_common+0x3e>
 800ec14:	18e1      	adds	r1, r4, r3
 800ec16:	1c5a      	adds	r2, r3, #1
 800ec18:	2030      	movs	r0, #48	@ 0x30
 800ec1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ec1e:	4422      	add	r2, r4
 800ec20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ec24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec28:	3302      	adds	r3, #2
 800ec2a:	e7c7      	b.n	800ebbc <_printf_common+0x58>
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	4622      	mov	r2, r4
 800ec30:	4641      	mov	r1, r8
 800ec32:	4638      	mov	r0, r7
 800ec34:	47c8      	blx	r9
 800ec36:	3001      	adds	r0, #1
 800ec38:	d0e6      	beq.n	800ec08 <_printf_common+0xa4>
 800ec3a:	3601      	adds	r6, #1
 800ec3c:	e7d9      	b.n	800ebf2 <_printf_common+0x8e>
	...

0800ec40 <_printf_i>:
 800ec40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec44:	7e0f      	ldrb	r7, [r1, #24]
 800ec46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec48:	2f78      	cmp	r7, #120	@ 0x78
 800ec4a:	4691      	mov	r9, r2
 800ec4c:	4680      	mov	r8, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	469a      	mov	sl, r3
 800ec52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec56:	d807      	bhi.n	800ec68 <_printf_i+0x28>
 800ec58:	2f62      	cmp	r7, #98	@ 0x62
 800ec5a:	d80a      	bhi.n	800ec72 <_printf_i+0x32>
 800ec5c:	2f00      	cmp	r7, #0
 800ec5e:	f000 80d1 	beq.w	800ee04 <_printf_i+0x1c4>
 800ec62:	2f58      	cmp	r7, #88	@ 0x58
 800ec64:	f000 80b8 	beq.w	800edd8 <_printf_i+0x198>
 800ec68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec70:	e03a      	b.n	800ece8 <_printf_i+0xa8>
 800ec72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec76:	2b15      	cmp	r3, #21
 800ec78:	d8f6      	bhi.n	800ec68 <_printf_i+0x28>
 800ec7a:	a101      	add	r1, pc, #4	@ (adr r1, 800ec80 <_printf_i+0x40>)
 800ec7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec80:	0800ecd9 	.word	0x0800ecd9
 800ec84:	0800eced 	.word	0x0800eced
 800ec88:	0800ec69 	.word	0x0800ec69
 800ec8c:	0800ec69 	.word	0x0800ec69
 800ec90:	0800ec69 	.word	0x0800ec69
 800ec94:	0800ec69 	.word	0x0800ec69
 800ec98:	0800eced 	.word	0x0800eced
 800ec9c:	0800ec69 	.word	0x0800ec69
 800eca0:	0800ec69 	.word	0x0800ec69
 800eca4:	0800ec69 	.word	0x0800ec69
 800eca8:	0800ec69 	.word	0x0800ec69
 800ecac:	0800edeb 	.word	0x0800edeb
 800ecb0:	0800ed17 	.word	0x0800ed17
 800ecb4:	0800eda5 	.word	0x0800eda5
 800ecb8:	0800ec69 	.word	0x0800ec69
 800ecbc:	0800ec69 	.word	0x0800ec69
 800ecc0:	0800ee0d 	.word	0x0800ee0d
 800ecc4:	0800ec69 	.word	0x0800ec69
 800ecc8:	0800ed17 	.word	0x0800ed17
 800eccc:	0800ec69 	.word	0x0800ec69
 800ecd0:	0800ec69 	.word	0x0800ec69
 800ecd4:	0800edad 	.word	0x0800edad
 800ecd8:	6833      	ldr	r3, [r6, #0]
 800ecda:	1d1a      	adds	r2, r3, #4
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6032      	str	r2, [r6, #0]
 800ece0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ece4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ece8:	2301      	movs	r3, #1
 800ecea:	e09c      	b.n	800ee26 <_printf_i+0x1e6>
 800ecec:	6833      	ldr	r3, [r6, #0]
 800ecee:	6820      	ldr	r0, [r4, #0]
 800ecf0:	1d19      	adds	r1, r3, #4
 800ecf2:	6031      	str	r1, [r6, #0]
 800ecf4:	0606      	lsls	r6, r0, #24
 800ecf6:	d501      	bpl.n	800ecfc <_printf_i+0xbc>
 800ecf8:	681d      	ldr	r5, [r3, #0]
 800ecfa:	e003      	b.n	800ed04 <_printf_i+0xc4>
 800ecfc:	0645      	lsls	r5, r0, #25
 800ecfe:	d5fb      	bpl.n	800ecf8 <_printf_i+0xb8>
 800ed00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ed04:	2d00      	cmp	r5, #0
 800ed06:	da03      	bge.n	800ed10 <_printf_i+0xd0>
 800ed08:	232d      	movs	r3, #45	@ 0x2d
 800ed0a:	426d      	negs	r5, r5
 800ed0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed10:	4858      	ldr	r0, [pc, #352]	@ (800ee74 <_printf_i+0x234>)
 800ed12:	230a      	movs	r3, #10
 800ed14:	e011      	b.n	800ed3a <_printf_i+0xfa>
 800ed16:	6821      	ldr	r1, [r4, #0]
 800ed18:	6833      	ldr	r3, [r6, #0]
 800ed1a:	0608      	lsls	r0, r1, #24
 800ed1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed20:	d402      	bmi.n	800ed28 <_printf_i+0xe8>
 800ed22:	0649      	lsls	r1, r1, #25
 800ed24:	bf48      	it	mi
 800ed26:	b2ad      	uxthmi	r5, r5
 800ed28:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed2a:	4852      	ldr	r0, [pc, #328]	@ (800ee74 <_printf_i+0x234>)
 800ed2c:	6033      	str	r3, [r6, #0]
 800ed2e:	bf14      	ite	ne
 800ed30:	230a      	movne	r3, #10
 800ed32:	2308      	moveq	r3, #8
 800ed34:	2100      	movs	r1, #0
 800ed36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed3a:	6866      	ldr	r6, [r4, #4]
 800ed3c:	60a6      	str	r6, [r4, #8]
 800ed3e:	2e00      	cmp	r6, #0
 800ed40:	db05      	blt.n	800ed4e <_printf_i+0x10e>
 800ed42:	6821      	ldr	r1, [r4, #0]
 800ed44:	432e      	orrs	r6, r5
 800ed46:	f021 0104 	bic.w	r1, r1, #4
 800ed4a:	6021      	str	r1, [r4, #0]
 800ed4c:	d04b      	beq.n	800ede6 <_printf_i+0x1a6>
 800ed4e:	4616      	mov	r6, r2
 800ed50:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed54:	fb03 5711 	mls	r7, r3, r1, r5
 800ed58:	5dc7      	ldrb	r7, [r0, r7]
 800ed5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed5e:	462f      	mov	r7, r5
 800ed60:	42bb      	cmp	r3, r7
 800ed62:	460d      	mov	r5, r1
 800ed64:	d9f4      	bls.n	800ed50 <_printf_i+0x110>
 800ed66:	2b08      	cmp	r3, #8
 800ed68:	d10b      	bne.n	800ed82 <_printf_i+0x142>
 800ed6a:	6823      	ldr	r3, [r4, #0]
 800ed6c:	07df      	lsls	r7, r3, #31
 800ed6e:	d508      	bpl.n	800ed82 <_printf_i+0x142>
 800ed70:	6923      	ldr	r3, [r4, #16]
 800ed72:	6861      	ldr	r1, [r4, #4]
 800ed74:	4299      	cmp	r1, r3
 800ed76:	bfde      	ittt	le
 800ed78:	2330      	movle	r3, #48	@ 0x30
 800ed7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed82:	1b92      	subs	r2, r2, r6
 800ed84:	6122      	str	r2, [r4, #16]
 800ed86:	f8cd a000 	str.w	sl, [sp]
 800ed8a:	464b      	mov	r3, r9
 800ed8c:	aa03      	add	r2, sp, #12
 800ed8e:	4621      	mov	r1, r4
 800ed90:	4640      	mov	r0, r8
 800ed92:	f7ff fee7 	bl	800eb64 <_printf_common>
 800ed96:	3001      	adds	r0, #1
 800ed98:	d14a      	bne.n	800ee30 <_printf_i+0x1f0>
 800ed9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed9e:	b004      	add	sp, #16
 800eda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda4:	6823      	ldr	r3, [r4, #0]
 800eda6:	f043 0320 	orr.w	r3, r3, #32
 800edaa:	6023      	str	r3, [r4, #0]
 800edac:	4832      	ldr	r0, [pc, #200]	@ (800ee78 <_printf_i+0x238>)
 800edae:	2778      	movs	r7, #120	@ 0x78
 800edb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800edb4:	6823      	ldr	r3, [r4, #0]
 800edb6:	6831      	ldr	r1, [r6, #0]
 800edb8:	061f      	lsls	r7, r3, #24
 800edba:	f851 5b04 	ldr.w	r5, [r1], #4
 800edbe:	d402      	bmi.n	800edc6 <_printf_i+0x186>
 800edc0:	065f      	lsls	r7, r3, #25
 800edc2:	bf48      	it	mi
 800edc4:	b2ad      	uxthmi	r5, r5
 800edc6:	6031      	str	r1, [r6, #0]
 800edc8:	07d9      	lsls	r1, r3, #31
 800edca:	bf44      	itt	mi
 800edcc:	f043 0320 	orrmi.w	r3, r3, #32
 800edd0:	6023      	strmi	r3, [r4, #0]
 800edd2:	b11d      	cbz	r5, 800eddc <_printf_i+0x19c>
 800edd4:	2310      	movs	r3, #16
 800edd6:	e7ad      	b.n	800ed34 <_printf_i+0xf4>
 800edd8:	4826      	ldr	r0, [pc, #152]	@ (800ee74 <_printf_i+0x234>)
 800edda:	e7e9      	b.n	800edb0 <_printf_i+0x170>
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	f023 0320 	bic.w	r3, r3, #32
 800ede2:	6023      	str	r3, [r4, #0]
 800ede4:	e7f6      	b.n	800edd4 <_printf_i+0x194>
 800ede6:	4616      	mov	r6, r2
 800ede8:	e7bd      	b.n	800ed66 <_printf_i+0x126>
 800edea:	6833      	ldr	r3, [r6, #0]
 800edec:	6825      	ldr	r5, [r4, #0]
 800edee:	6961      	ldr	r1, [r4, #20]
 800edf0:	1d18      	adds	r0, r3, #4
 800edf2:	6030      	str	r0, [r6, #0]
 800edf4:	062e      	lsls	r6, r5, #24
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	d501      	bpl.n	800edfe <_printf_i+0x1be>
 800edfa:	6019      	str	r1, [r3, #0]
 800edfc:	e002      	b.n	800ee04 <_printf_i+0x1c4>
 800edfe:	0668      	lsls	r0, r5, #25
 800ee00:	d5fb      	bpl.n	800edfa <_printf_i+0x1ba>
 800ee02:	8019      	strh	r1, [r3, #0]
 800ee04:	2300      	movs	r3, #0
 800ee06:	6123      	str	r3, [r4, #16]
 800ee08:	4616      	mov	r6, r2
 800ee0a:	e7bc      	b.n	800ed86 <_printf_i+0x146>
 800ee0c:	6833      	ldr	r3, [r6, #0]
 800ee0e:	1d1a      	adds	r2, r3, #4
 800ee10:	6032      	str	r2, [r6, #0]
 800ee12:	681e      	ldr	r6, [r3, #0]
 800ee14:	6862      	ldr	r2, [r4, #4]
 800ee16:	2100      	movs	r1, #0
 800ee18:	4630      	mov	r0, r6
 800ee1a:	f7f1 f9e9 	bl	80001f0 <memchr>
 800ee1e:	b108      	cbz	r0, 800ee24 <_printf_i+0x1e4>
 800ee20:	1b80      	subs	r0, r0, r6
 800ee22:	6060      	str	r0, [r4, #4]
 800ee24:	6863      	ldr	r3, [r4, #4]
 800ee26:	6123      	str	r3, [r4, #16]
 800ee28:	2300      	movs	r3, #0
 800ee2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee2e:	e7aa      	b.n	800ed86 <_printf_i+0x146>
 800ee30:	6923      	ldr	r3, [r4, #16]
 800ee32:	4632      	mov	r2, r6
 800ee34:	4649      	mov	r1, r9
 800ee36:	4640      	mov	r0, r8
 800ee38:	47d0      	blx	sl
 800ee3a:	3001      	adds	r0, #1
 800ee3c:	d0ad      	beq.n	800ed9a <_printf_i+0x15a>
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	079b      	lsls	r3, r3, #30
 800ee42:	d413      	bmi.n	800ee6c <_printf_i+0x22c>
 800ee44:	68e0      	ldr	r0, [r4, #12]
 800ee46:	9b03      	ldr	r3, [sp, #12]
 800ee48:	4298      	cmp	r0, r3
 800ee4a:	bfb8      	it	lt
 800ee4c:	4618      	movlt	r0, r3
 800ee4e:	e7a6      	b.n	800ed9e <_printf_i+0x15e>
 800ee50:	2301      	movs	r3, #1
 800ee52:	4632      	mov	r2, r6
 800ee54:	4649      	mov	r1, r9
 800ee56:	4640      	mov	r0, r8
 800ee58:	47d0      	blx	sl
 800ee5a:	3001      	adds	r0, #1
 800ee5c:	d09d      	beq.n	800ed9a <_printf_i+0x15a>
 800ee5e:	3501      	adds	r5, #1
 800ee60:	68e3      	ldr	r3, [r4, #12]
 800ee62:	9903      	ldr	r1, [sp, #12]
 800ee64:	1a5b      	subs	r3, r3, r1
 800ee66:	42ab      	cmp	r3, r5
 800ee68:	dcf2      	bgt.n	800ee50 <_printf_i+0x210>
 800ee6a:	e7eb      	b.n	800ee44 <_printf_i+0x204>
 800ee6c:	2500      	movs	r5, #0
 800ee6e:	f104 0619 	add.w	r6, r4, #25
 800ee72:	e7f5      	b.n	800ee60 <_printf_i+0x220>
 800ee74:	08017ba1 	.word	0x08017ba1
 800ee78:	08017bb2 	.word	0x08017bb2

0800ee7c <_scanf_float>:
 800ee7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee80:	b087      	sub	sp, #28
 800ee82:	4691      	mov	r9, r2
 800ee84:	9303      	str	r3, [sp, #12]
 800ee86:	688b      	ldr	r3, [r1, #8]
 800ee88:	1e5a      	subs	r2, r3, #1
 800ee8a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ee8e:	bf81      	itttt	hi
 800ee90:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ee94:	eb03 0b05 	addhi.w	fp, r3, r5
 800ee98:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ee9c:	608b      	strhi	r3, [r1, #8]
 800ee9e:	680b      	ldr	r3, [r1, #0]
 800eea0:	460a      	mov	r2, r1
 800eea2:	f04f 0500 	mov.w	r5, #0
 800eea6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800eeaa:	f842 3b1c 	str.w	r3, [r2], #28
 800eeae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eeb2:	4680      	mov	r8, r0
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	bf98      	it	ls
 800eeb8:	f04f 0b00 	movls.w	fp, #0
 800eebc:	9201      	str	r2, [sp, #4]
 800eebe:	4616      	mov	r6, r2
 800eec0:	46aa      	mov	sl, r5
 800eec2:	462f      	mov	r7, r5
 800eec4:	9502      	str	r5, [sp, #8]
 800eec6:	68a2      	ldr	r2, [r4, #8]
 800eec8:	b15a      	cbz	r2, 800eee2 <_scanf_float+0x66>
 800eeca:	f8d9 3000 	ldr.w	r3, [r9]
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	2b4e      	cmp	r3, #78	@ 0x4e
 800eed2:	d863      	bhi.n	800ef9c <_scanf_float+0x120>
 800eed4:	2b40      	cmp	r3, #64	@ 0x40
 800eed6:	d83b      	bhi.n	800ef50 <_scanf_float+0xd4>
 800eed8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800eedc:	b2c8      	uxtb	r0, r1
 800eede:	280e      	cmp	r0, #14
 800eee0:	d939      	bls.n	800ef56 <_scanf_float+0xda>
 800eee2:	b11f      	cbz	r7, 800eeec <_scanf_float+0x70>
 800eee4:	6823      	ldr	r3, [r4, #0]
 800eee6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eeea:	6023      	str	r3, [r4, #0]
 800eeec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eef0:	f1ba 0f01 	cmp.w	sl, #1
 800eef4:	f200 8114 	bhi.w	800f120 <_scanf_float+0x2a4>
 800eef8:	9b01      	ldr	r3, [sp, #4]
 800eefa:	429e      	cmp	r6, r3
 800eefc:	f200 8105 	bhi.w	800f10a <_scanf_float+0x28e>
 800ef00:	2001      	movs	r0, #1
 800ef02:	b007      	add	sp, #28
 800ef04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef08:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ef0c:	2a0d      	cmp	r2, #13
 800ef0e:	d8e8      	bhi.n	800eee2 <_scanf_float+0x66>
 800ef10:	a101      	add	r1, pc, #4	@ (adr r1, 800ef18 <_scanf_float+0x9c>)
 800ef12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ef16:	bf00      	nop
 800ef18:	0800f061 	.word	0x0800f061
 800ef1c:	0800eee3 	.word	0x0800eee3
 800ef20:	0800eee3 	.word	0x0800eee3
 800ef24:	0800eee3 	.word	0x0800eee3
 800ef28:	0800f0bd 	.word	0x0800f0bd
 800ef2c:	0800f097 	.word	0x0800f097
 800ef30:	0800eee3 	.word	0x0800eee3
 800ef34:	0800eee3 	.word	0x0800eee3
 800ef38:	0800f06f 	.word	0x0800f06f
 800ef3c:	0800eee3 	.word	0x0800eee3
 800ef40:	0800eee3 	.word	0x0800eee3
 800ef44:	0800eee3 	.word	0x0800eee3
 800ef48:	0800eee3 	.word	0x0800eee3
 800ef4c:	0800f02b 	.word	0x0800f02b
 800ef50:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ef54:	e7da      	b.n	800ef0c <_scanf_float+0x90>
 800ef56:	290e      	cmp	r1, #14
 800ef58:	d8c3      	bhi.n	800eee2 <_scanf_float+0x66>
 800ef5a:	a001      	add	r0, pc, #4	@ (adr r0, 800ef60 <_scanf_float+0xe4>)
 800ef5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ef60:	0800f01b 	.word	0x0800f01b
 800ef64:	0800eee3 	.word	0x0800eee3
 800ef68:	0800f01b 	.word	0x0800f01b
 800ef6c:	0800f0ab 	.word	0x0800f0ab
 800ef70:	0800eee3 	.word	0x0800eee3
 800ef74:	0800efbd 	.word	0x0800efbd
 800ef78:	0800f001 	.word	0x0800f001
 800ef7c:	0800f001 	.word	0x0800f001
 800ef80:	0800f001 	.word	0x0800f001
 800ef84:	0800f001 	.word	0x0800f001
 800ef88:	0800f001 	.word	0x0800f001
 800ef8c:	0800f001 	.word	0x0800f001
 800ef90:	0800f001 	.word	0x0800f001
 800ef94:	0800f001 	.word	0x0800f001
 800ef98:	0800f001 	.word	0x0800f001
 800ef9c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ef9e:	d809      	bhi.n	800efb4 <_scanf_float+0x138>
 800efa0:	2b60      	cmp	r3, #96	@ 0x60
 800efa2:	d8b1      	bhi.n	800ef08 <_scanf_float+0x8c>
 800efa4:	2b54      	cmp	r3, #84	@ 0x54
 800efa6:	d07b      	beq.n	800f0a0 <_scanf_float+0x224>
 800efa8:	2b59      	cmp	r3, #89	@ 0x59
 800efaa:	d19a      	bne.n	800eee2 <_scanf_float+0x66>
 800efac:	2d07      	cmp	r5, #7
 800efae:	d198      	bne.n	800eee2 <_scanf_float+0x66>
 800efb0:	2508      	movs	r5, #8
 800efb2:	e02f      	b.n	800f014 <_scanf_float+0x198>
 800efb4:	2b74      	cmp	r3, #116	@ 0x74
 800efb6:	d073      	beq.n	800f0a0 <_scanf_float+0x224>
 800efb8:	2b79      	cmp	r3, #121	@ 0x79
 800efba:	e7f6      	b.n	800efaa <_scanf_float+0x12e>
 800efbc:	6821      	ldr	r1, [r4, #0]
 800efbe:	05c8      	lsls	r0, r1, #23
 800efc0:	d51e      	bpl.n	800f000 <_scanf_float+0x184>
 800efc2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800efc6:	6021      	str	r1, [r4, #0]
 800efc8:	3701      	adds	r7, #1
 800efca:	f1bb 0f00 	cmp.w	fp, #0
 800efce:	d003      	beq.n	800efd8 <_scanf_float+0x15c>
 800efd0:	3201      	adds	r2, #1
 800efd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800efd6:	60a2      	str	r2, [r4, #8]
 800efd8:	68a3      	ldr	r3, [r4, #8]
 800efda:	3b01      	subs	r3, #1
 800efdc:	60a3      	str	r3, [r4, #8]
 800efde:	6923      	ldr	r3, [r4, #16]
 800efe0:	3301      	adds	r3, #1
 800efe2:	6123      	str	r3, [r4, #16]
 800efe4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800efe8:	3b01      	subs	r3, #1
 800efea:	2b00      	cmp	r3, #0
 800efec:	f8c9 3004 	str.w	r3, [r9, #4]
 800eff0:	f340 8082 	ble.w	800f0f8 <_scanf_float+0x27c>
 800eff4:	f8d9 3000 	ldr.w	r3, [r9]
 800eff8:	3301      	adds	r3, #1
 800effa:	f8c9 3000 	str.w	r3, [r9]
 800effe:	e762      	b.n	800eec6 <_scanf_float+0x4a>
 800f000:	eb1a 0105 	adds.w	r1, sl, r5
 800f004:	f47f af6d 	bne.w	800eee2 <_scanf_float+0x66>
 800f008:	6822      	ldr	r2, [r4, #0]
 800f00a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f00e:	6022      	str	r2, [r4, #0]
 800f010:	460d      	mov	r5, r1
 800f012:	468a      	mov	sl, r1
 800f014:	f806 3b01 	strb.w	r3, [r6], #1
 800f018:	e7de      	b.n	800efd8 <_scanf_float+0x15c>
 800f01a:	6822      	ldr	r2, [r4, #0]
 800f01c:	0610      	lsls	r0, r2, #24
 800f01e:	f57f af60 	bpl.w	800eee2 <_scanf_float+0x66>
 800f022:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f026:	6022      	str	r2, [r4, #0]
 800f028:	e7f4      	b.n	800f014 <_scanf_float+0x198>
 800f02a:	f1ba 0f00 	cmp.w	sl, #0
 800f02e:	d10c      	bne.n	800f04a <_scanf_float+0x1ce>
 800f030:	b977      	cbnz	r7, 800f050 <_scanf_float+0x1d4>
 800f032:	6822      	ldr	r2, [r4, #0]
 800f034:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f038:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f03c:	d108      	bne.n	800f050 <_scanf_float+0x1d4>
 800f03e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f042:	6022      	str	r2, [r4, #0]
 800f044:	f04f 0a01 	mov.w	sl, #1
 800f048:	e7e4      	b.n	800f014 <_scanf_float+0x198>
 800f04a:	f1ba 0f02 	cmp.w	sl, #2
 800f04e:	d050      	beq.n	800f0f2 <_scanf_float+0x276>
 800f050:	2d01      	cmp	r5, #1
 800f052:	d002      	beq.n	800f05a <_scanf_float+0x1de>
 800f054:	2d04      	cmp	r5, #4
 800f056:	f47f af44 	bne.w	800eee2 <_scanf_float+0x66>
 800f05a:	3501      	adds	r5, #1
 800f05c:	b2ed      	uxtb	r5, r5
 800f05e:	e7d9      	b.n	800f014 <_scanf_float+0x198>
 800f060:	f1ba 0f01 	cmp.w	sl, #1
 800f064:	f47f af3d 	bne.w	800eee2 <_scanf_float+0x66>
 800f068:	f04f 0a02 	mov.w	sl, #2
 800f06c:	e7d2      	b.n	800f014 <_scanf_float+0x198>
 800f06e:	b975      	cbnz	r5, 800f08e <_scanf_float+0x212>
 800f070:	2f00      	cmp	r7, #0
 800f072:	f47f af37 	bne.w	800eee4 <_scanf_float+0x68>
 800f076:	6822      	ldr	r2, [r4, #0]
 800f078:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f07c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f080:	f040 8103 	bne.w	800f28a <_scanf_float+0x40e>
 800f084:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f088:	6022      	str	r2, [r4, #0]
 800f08a:	2501      	movs	r5, #1
 800f08c:	e7c2      	b.n	800f014 <_scanf_float+0x198>
 800f08e:	2d03      	cmp	r5, #3
 800f090:	d0e3      	beq.n	800f05a <_scanf_float+0x1de>
 800f092:	2d05      	cmp	r5, #5
 800f094:	e7df      	b.n	800f056 <_scanf_float+0x1da>
 800f096:	2d02      	cmp	r5, #2
 800f098:	f47f af23 	bne.w	800eee2 <_scanf_float+0x66>
 800f09c:	2503      	movs	r5, #3
 800f09e:	e7b9      	b.n	800f014 <_scanf_float+0x198>
 800f0a0:	2d06      	cmp	r5, #6
 800f0a2:	f47f af1e 	bne.w	800eee2 <_scanf_float+0x66>
 800f0a6:	2507      	movs	r5, #7
 800f0a8:	e7b4      	b.n	800f014 <_scanf_float+0x198>
 800f0aa:	6822      	ldr	r2, [r4, #0]
 800f0ac:	0591      	lsls	r1, r2, #22
 800f0ae:	f57f af18 	bpl.w	800eee2 <_scanf_float+0x66>
 800f0b2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f0b6:	6022      	str	r2, [r4, #0]
 800f0b8:	9702      	str	r7, [sp, #8]
 800f0ba:	e7ab      	b.n	800f014 <_scanf_float+0x198>
 800f0bc:	6822      	ldr	r2, [r4, #0]
 800f0be:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f0c2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f0c6:	d005      	beq.n	800f0d4 <_scanf_float+0x258>
 800f0c8:	0550      	lsls	r0, r2, #21
 800f0ca:	f57f af0a 	bpl.w	800eee2 <_scanf_float+0x66>
 800f0ce:	2f00      	cmp	r7, #0
 800f0d0:	f000 80db 	beq.w	800f28a <_scanf_float+0x40e>
 800f0d4:	0591      	lsls	r1, r2, #22
 800f0d6:	bf58      	it	pl
 800f0d8:	9902      	ldrpl	r1, [sp, #8]
 800f0da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f0de:	bf58      	it	pl
 800f0e0:	1a79      	subpl	r1, r7, r1
 800f0e2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f0e6:	bf58      	it	pl
 800f0e8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f0ec:	6022      	str	r2, [r4, #0]
 800f0ee:	2700      	movs	r7, #0
 800f0f0:	e790      	b.n	800f014 <_scanf_float+0x198>
 800f0f2:	f04f 0a03 	mov.w	sl, #3
 800f0f6:	e78d      	b.n	800f014 <_scanf_float+0x198>
 800f0f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f0fc:	4649      	mov	r1, r9
 800f0fe:	4640      	mov	r0, r8
 800f100:	4798      	blx	r3
 800f102:	2800      	cmp	r0, #0
 800f104:	f43f aedf 	beq.w	800eec6 <_scanf_float+0x4a>
 800f108:	e6eb      	b.n	800eee2 <_scanf_float+0x66>
 800f10a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f10e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f112:	464a      	mov	r2, r9
 800f114:	4640      	mov	r0, r8
 800f116:	4798      	blx	r3
 800f118:	6923      	ldr	r3, [r4, #16]
 800f11a:	3b01      	subs	r3, #1
 800f11c:	6123      	str	r3, [r4, #16]
 800f11e:	e6eb      	b.n	800eef8 <_scanf_float+0x7c>
 800f120:	1e6b      	subs	r3, r5, #1
 800f122:	2b06      	cmp	r3, #6
 800f124:	d824      	bhi.n	800f170 <_scanf_float+0x2f4>
 800f126:	2d02      	cmp	r5, #2
 800f128:	d836      	bhi.n	800f198 <_scanf_float+0x31c>
 800f12a:	9b01      	ldr	r3, [sp, #4]
 800f12c:	429e      	cmp	r6, r3
 800f12e:	f67f aee7 	bls.w	800ef00 <_scanf_float+0x84>
 800f132:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f136:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f13a:	464a      	mov	r2, r9
 800f13c:	4640      	mov	r0, r8
 800f13e:	4798      	blx	r3
 800f140:	6923      	ldr	r3, [r4, #16]
 800f142:	3b01      	subs	r3, #1
 800f144:	6123      	str	r3, [r4, #16]
 800f146:	e7f0      	b.n	800f12a <_scanf_float+0x2ae>
 800f148:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f14c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f150:	464a      	mov	r2, r9
 800f152:	4640      	mov	r0, r8
 800f154:	4798      	blx	r3
 800f156:	6923      	ldr	r3, [r4, #16]
 800f158:	3b01      	subs	r3, #1
 800f15a:	6123      	str	r3, [r4, #16]
 800f15c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f160:	fa5f fa8a 	uxtb.w	sl, sl
 800f164:	f1ba 0f02 	cmp.w	sl, #2
 800f168:	d1ee      	bne.n	800f148 <_scanf_float+0x2cc>
 800f16a:	3d03      	subs	r5, #3
 800f16c:	b2ed      	uxtb	r5, r5
 800f16e:	1b76      	subs	r6, r6, r5
 800f170:	6823      	ldr	r3, [r4, #0]
 800f172:	05da      	lsls	r2, r3, #23
 800f174:	d530      	bpl.n	800f1d8 <_scanf_float+0x35c>
 800f176:	055b      	lsls	r3, r3, #21
 800f178:	d511      	bpl.n	800f19e <_scanf_float+0x322>
 800f17a:	9b01      	ldr	r3, [sp, #4]
 800f17c:	429e      	cmp	r6, r3
 800f17e:	f67f aebf 	bls.w	800ef00 <_scanf_float+0x84>
 800f182:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f186:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f18a:	464a      	mov	r2, r9
 800f18c:	4640      	mov	r0, r8
 800f18e:	4798      	blx	r3
 800f190:	6923      	ldr	r3, [r4, #16]
 800f192:	3b01      	subs	r3, #1
 800f194:	6123      	str	r3, [r4, #16]
 800f196:	e7f0      	b.n	800f17a <_scanf_float+0x2fe>
 800f198:	46aa      	mov	sl, r5
 800f19a:	46b3      	mov	fp, r6
 800f19c:	e7de      	b.n	800f15c <_scanf_float+0x2e0>
 800f19e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f1a2:	6923      	ldr	r3, [r4, #16]
 800f1a4:	2965      	cmp	r1, #101	@ 0x65
 800f1a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f1aa:	f106 35ff 	add.w	r5, r6, #4294967295
 800f1ae:	6123      	str	r3, [r4, #16]
 800f1b0:	d00c      	beq.n	800f1cc <_scanf_float+0x350>
 800f1b2:	2945      	cmp	r1, #69	@ 0x45
 800f1b4:	d00a      	beq.n	800f1cc <_scanf_float+0x350>
 800f1b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1ba:	464a      	mov	r2, r9
 800f1bc:	4640      	mov	r0, r8
 800f1be:	4798      	blx	r3
 800f1c0:	6923      	ldr	r3, [r4, #16]
 800f1c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	1eb5      	subs	r5, r6, #2
 800f1ca:	6123      	str	r3, [r4, #16]
 800f1cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1d0:	464a      	mov	r2, r9
 800f1d2:	4640      	mov	r0, r8
 800f1d4:	4798      	blx	r3
 800f1d6:	462e      	mov	r6, r5
 800f1d8:	6822      	ldr	r2, [r4, #0]
 800f1da:	f012 0210 	ands.w	r2, r2, #16
 800f1de:	d001      	beq.n	800f1e4 <_scanf_float+0x368>
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	e68e      	b.n	800ef02 <_scanf_float+0x86>
 800f1e4:	7032      	strb	r2, [r6, #0]
 800f1e6:	6823      	ldr	r3, [r4, #0]
 800f1e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f1ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1f0:	d125      	bne.n	800f23e <_scanf_float+0x3c2>
 800f1f2:	9b02      	ldr	r3, [sp, #8]
 800f1f4:	429f      	cmp	r7, r3
 800f1f6:	d00a      	beq.n	800f20e <_scanf_float+0x392>
 800f1f8:	1bda      	subs	r2, r3, r7
 800f1fa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f1fe:	429e      	cmp	r6, r3
 800f200:	bf28      	it	cs
 800f202:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f206:	4922      	ldr	r1, [pc, #136]	@ (800f290 <_scanf_float+0x414>)
 800f208:	4630      	mov	r0, r6
 800f20a:	f000 f93d 	bl	800f488 <siprintf>
 800f20e:	9901      	ldr	r1, [sp, #4]
 800f210:	2200      	movs	r2, #0
 800f212:	4640      	mov	r0, r8
 800f214:	f7ff f944 	bl	800e4a0 <_strtod_r>
 800f218:	9b03      	ldr	r3, [sp, #12]
 800f21a:	6821      	ldr	r1, [r4, #0]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f011 0f02 	tst.w	r1, #2
 800f222:	ec57 6b10 	vmov	r6, r7, d0
 800f226:	f103 0204 	add.w	r2, r3, #4
 800f22a:	d015      	beq.n	800f258 <_scanf_float+0x3dc>
 800f22c:	9903      	ldr	r1, [sp, #12]
 800f22e:	600a      	str	r2, [r1, #0]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	e9c3 6700 	strd	r6, r7, [r3]
 800f236:	68e3      	ldr	r3, [r4, #12]
 800f238:	3301      	adds	r3, #1
 800f23a:	60e3      	str	r3, [r4, #12]
 800f23c:	e7d0      	b.n	800f1e0 <_scanf_float+0x364>
 800f23e:	9b04      	ldr	r3, [sp, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d0e4      	beq.n	800f20e <_scanf_float+0x392>
 800f244:	9905      	ldr	r1, [sp, #20]
 800f246:	230a      	movs	r3, #10
 800f248:	3101      	adds	r1, #1
 800f24a:	4640      	mov	r0, r8
 800f24c:	f7ff f9b4 	bl	800e5b8 <_strtol_r>
 800f250:	9b04      	ldr	r3, [sp, #16]
 800f252:	9e05      	ldr	r6, [sp, #20]
 800f254:	1ac2      	subs	r2, r0, r3
 800f256:	e7d0      	b.n	800f1fa <_scanf_float+0x37e>
 800f258:	f011 0f04 	tst.w	r1, #4
 800f25c:	9903      	ldr	r1, [sp, #12]
 800f25e:	600a      	str	r2, [r1, #0]
 800f260:	d1e6      	bne.n	800f230 <_scanf_float+0x3b4>
 800f262:	681d      	ldr	r5, [r3, #0]
 800f264:	4632      	mov	r2, r6
 800f266:	463b      	mov	r3, r7
 800f268:	4630      	mov	r0, r6
 800f26a:	4639      	mov	r1, r7
 800f26c:	f7f1 fc6e 	bl	8000b4c <__aeabi_dcmpun>
 800f270:	b128      	cbz	r0, 800f27e <_scanf_float+0x402>
 800f272:	4808      	ldr	r0, [pc, #32]	@ (800f294 <_scanf_float+0x418>)
 800f274:	f000 fad8 	bl	800f828 <nanf>
 800f278:	ed85 0a00 	vstr	s0, [r5]
 800f27c:	e7db      	b.n	800f236 <_scanf_float+0x3ba>
 800f27e:	4630      	mov	r0, r6
 800f280:	4639      	mov	r1, r7
 800f282:	f7f1 fcc1 	bl	8000c08 <__aeabi_d2f>
 800f286:	6028      	str	r0, [r5, #0]
 800f288:	e7d5      	b.n	800f236 <_scanf_float+0x3ba>
 800f28a:	2700      	movs	r7, #0
 800f28c:	e62e      	b.n	800eeec <_scanf_float+0x70>
 800f28e:	bf00      	nop
 800f290:	08017bc3 	.word	0x08017bc3
 800f294:	08017c65 	.word	0x08017c65

0800f298 <std>:
 800f298:	2300      	movs	r3, #0
 800f29a:	b510      	push	{r4, lr}
 800f29c:	4604      	mov	r4, r0
 800f29e:	e9c0 3300 	strd	r3, r3, [r0]
 800f2a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2a6:	6083      	str	r3, [r0, #8]
 800f2a8:	8181      	strh	r1, [r0, #12]
 800f2aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800f2ac:	81c2      	strh	r2, [r0, #14]
 800f2ae:	6183      	str	r3, [r0, #24]
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	2208      	movs	r2, #8
 800f2b4:	305c      	adds	r0, #92	@ 0x5c
 800f2b6:	f000 f97a 	bl	800f5ae <memset>
 800f2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f2f0 <std+0x58>)
 800f2bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800f2be:	4b0d      	ldr	r3, [pc, #52]	@ (800f2f4 <std+0x5c>)
 800f2c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f2f8 <std+0x60>)
 800f2c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f2fc <std+0x64>)
 800f2c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f2ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f300 <std+0x68>)
 800f2cc:	6224      	str	r4, [r4, #32]
 800f2ce:	429c      	cmp	r4, r3
 800f2d0:	d006      	beq.n	800f2e0 <std+0x48>
 800f2d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f2d6:	4294      	cmp	r4, r2
 800f2d8:	d002      	beq.n	800f2e0 <std+0x48>
 800f2da:	33d0      	adds	r3, #208	@ 0xd0
 800f2dc:	429c      	cmp	r4, r3
 800f2de:	d105      	bne.n	800f2ec <std+0x54>
 800f2e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2e8:	f000 ba82 	b.w	800f7f0 <__retarget_lock_init_recursive>
 800f2ec:	bd10      	pop	{r4, pc}
 800f2ee:	bf00      	nop
 800f2f0:	0800f525 	.word	0x0800f525
 800f2f4:	0800f54b 	.word	0x0800f54b
 800f2f8:	0800f583 	.word	0x0800f583
 800f2fc:	0800f5a7 	.word	0x0800f5a7
 800f300:	2001efe8 	.word	0x2001efe8

0800f304 <stdio_exit_handler>:
 800f304:	4a02      	ldr	r2, [pc, #8]	@ (800f310 <stdio_exit_handler+0xc>)
 800f306:	4903      	ldr	r1, [pc, #12]	@ (800f314 <stdio_exit_handler+0x10>)
 800f308:	4803      	ldr	r0, [pc, #12]	@ (800f318 <stdio_exit_handler+0x14>)
 800f30a:	f000 b869 	b.w	800f3e0 <_fwalk_sglue>
 800f30e:	bf00      	nop
 800f310:	20000108 	.word	0x20000108
 800f314:	08012119 	.word	0x08012119
 800f318:	20000284 	.word	0x20000284

0800f31c <cleanup_stdio>:
 800f31c:	6841      	ldr	r1, [r0, #4]
 800f31e:	4b0c      	ldr	r3, [pc, #48]	@ (800f350 <cleanup_stdio+0x34>)
 800f320:	4299      	cmp	r1, r3
 800f322:	b510      	push	{r4, lr}
 800f324:	4604      	mov	r4, r0
 800f326:	d001      	beq.n	800f32c <cleanup_stdio+0x10>
 800f328:	f002 fef6 	bl	8012118 <_fflush_r>
 800f32c:	68a1      	ldr	r1, [r4, #8]
 800f32e:	4b09      	ldr	r3, [pc, #36]	@ (800f354 <cleanup_stdio+0x38>)
 800f330:	4299      	cmp	r1, r3
 800f332:	d002      	beq.n	800f33a <cleanup_stdio+0x1e>
 800f334:	4620      	mov	r0, r4
 800f336:	f002 feef 	bl	8012118 <_fflush_r>
 800f33a:	68e1      	ldr	r1, [r4, #12]
 800f33c:	4b06      	ldr	r3, [pc, #24]	@ (800f358 <cleanup_stdio+0x3c>)
 800f33e:	4299      	cmp	r1, r3
 800f340:	d004      	beq.n	800f34c <cleanup_stdio+0x30>
 800f342:	4620      	mov	r0, r4
 800f344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f348:	f002 bee6 	b.w	8012118 <_fflush_r>
 800f34c:	bd10      	pop	{r4, pc}
 800f34e:	bf00      	nop
 800f350:	2001efe8 	.word	0x2001efe8
 800f354:	2001f050 	.word	0x2001f050
 800f358:	2001f0b8 	.word	0x2001f0b8

0800f35c <global_stdio_init.part.0>:
 800f35c:	b510      	push	{r4, lr}
 800f35e:	4b0b      	ldr	r3, [pc, #44]	@ (800f38c <global_stdio_init.part.0+0x30>)
 800f360:	4c0b      	ldr	r4, [pc, #44]	@ (800f390 <global_stdio_init.part.0+0x34>)
 800f362:	4a0c      	ldr	r2, [pc, #48]	@ (800f394 <global_stdio_init.part.0+0x38>)
 800f364:	601a      	str	r2, [r3, #0]
 800f366:	4620      	mov	r0, r4
 800f368:	2200      	movs	r2, #0
 800f36a:	2104      	movs	r1, #4
 800f36c:	f7ff ff94 	bl	800f298 <std>
 800f370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f374:	2201      	movs	r2, #1
 800f376:	2109      	movs	r1, #9
 800f378:	f7ff ff8e 	bl	800f298 <std>
 800f37c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f380:	2202      	movs	r2, #2
 800f382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f386:	2112      	movs	r1, #18
 800f388:	f7ff bf86 	b.w	800f298 <std>
 800f38c:	2001f120 	.word	0x2001f120
 800f390:	2001efe8 	.word	0x2001efe8
 800f394:	0800f305 	.word	0x0800f305

0800f398 <__sfp_lock_acquire>:
 800f398:	4801      	ldr	r0, [pc, #4]	@ (800f3a0 <__sfp_lock_acquire+0x8>)
 800f39a:	f000 ba2a 	b.w	800f7f2 <__retarget_lock_acquire_recursive>
 800f39e:	bf00      	nop
 800f3a0:	2001f129 	.word	0x2001f129

0800f3a4 <__sfp_lock_release>:
 800f3a4:	4801      	ldr	r0, [pc, #4]	@ (800f3ac <__sfp_lock_release+0x8>)
 800f3a6:	f000 ba25 	b.w	800f7f4 <__retarget_lock_release_recursive>
 800f3aa:	bf00      	nop
 800f3ac:	2001f129 	.word	0x2001f129

0800f3b0 <__sinit>:
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	f7ff fff0 	bl	800f398 <__sfp_lock_acquire>
 800f3b8:	6a23      	ldr	r3, [r4, #32]
 800f3ba:	b11b      	cbz	r3, 800f3c4 <__sinit+0x14>
 800f3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3c0:	f7ff bff0 	b.w	800f3a4 <__sfp_lock_release>
 800f3c4:	4b04      	ldr	r3, [pc, #16]	@ (800f3d8 <__sinit+0x28>)
 800f3c6:	6223      	str	r3, [r4, #32]
 800f3c8:	4b04      	ldr	r3, [pc, #16]	@ (800f3dc <__sinit+0x2c>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1f5      	bne.n	800f3bc <__sinit+0xc>
 800f3d0:	f7ff ffc4 	bl	800f35c <global_stdio_init.part.0>
 800f3d4:	e7f2      	b.n	800f3bc <__sinit+0xc>
 800f3d6:	bf00      	nop
 800f3d8:	0800f31d 	.word	0x0800f31d
 800f3dc:	2001f120 	.word	0x2001f120

0800f3e0 <_fwalk_sglue>:
 800f3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e4:	4607      	mov	r7, r0
 800f3e6:	4688      	mov	r8, r1
 800f3e8:	4614      	mov	r4, r2
 800f3ea:	2600      	movs	r6, #0
 800f3ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3f0:	f1b9 0901 	subs.w	r9, r9, #1
 800f3f4:	d505      	bpl.n	800f402 <_fwalk_sglue+0x22>
 800f3f6:	6824      	ldr	r4, [r4, #0]
 800f3f8:	2c00      	cmp	r4, #0
 800f3fa:	d1f7      	bne.n	800f3ec <_fwalk_sglue+0xc>
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f402:	89ab      	ldrh	r3, [r5, #12]
 800f404:	2b01      	cmp	r3, #1
 800f406:	d907      	bls.n	800f418 <_fwalk_sglue+0x38>
 800f408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f40c:	3301      	adds	r3, #1
 800f40e:	d003      	beq.n	800f418 <_fwalk_sglue+0x38>
 800f410:	4629      	mov	r1, r5
 800f412:	4638      	mov	r0, r7
 800f414:	47c0      	blx	r8
 800f416:	4306      	orrs	r6, r0
 800f418:	3568      	adds	r5, #104	@ 0x68
 800f41a:	e7e9      	b.n	800f3f0 <_fwalk_sglue+0x10>

0800f41c <sniprintf>:
 800f41c:	b40c      	push	{r2, r3}
 800f41e:	b530      	push	{r4, r5, lr}
 800f420:	4b18      	ldr	r3, [pc, #96]	@ (800f484 <sniprintf+0x68>)
 800f422:	1e0c      	subs	r4, r1, #0
 800f424:	681d      	ldr	r5, [r3, #0]
 800f426:	b09d      	sub	sp, #116	@ 0x74
 800f428:	da08      	bge.n	800f43c <sniprintf+0x20>
 800f42a:	238b      	movs	r3, #139	@ 0x8b
 800f42c:	602b      	str	r3, [r5, #0]
 800f42e:	f04f 30ff 	mov.w	r0, #4294967295
 800f432:	b01d      	add	sp, #116	@ 0x74
 800f434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f438:	b002      	add	sp, #8
 800f43a:	4770      	bx	lr
 800f43c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f440:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f444:	f04f 0300 	mov.w	r3, #0
 800f448:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f44a:	bf14      	ite	ne
 800f44c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f450:	4623      	moveq	r3, r4
 800f452:	9304      	str	r3, [sp, #16]
 800f454:	9307      	str	r3, [sp, #28]
 800f456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f45a:	9002      	str	r0, [sp, #8]
 800f45c:	9006      	str	r0, [sp, #24]
 800f45e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f462:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f464:	ab21      	add	r3, sp, #132	@ 0x84
 800f466:	a902      	add	r1, sp, #8
 800f468:	4628      	mov	r0, r5
 800f46a:	9301      	str	r3, [sp, #4]
 800f46c:	f002 f9b6 	bl	80117dc <_svfiprintf_r>
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	bfbc      	itt	lt
 800f474:	238b      	movlt	r3, #139	@ 0x8b
 800f476:	602b      	strlt	r3, [r5, #0]
 800f478:	2c00      	cmp	r4, #0
 800f47a:	d0da      	beq.n	800f432 <sniprintf+0x16>
 800f47c:	9b02      	ldr	r3, [sp, #8]
 800f47e:	2200      	movs	r2, #0
 800f480:	701a      	strb	r2, [r3, #0]
 800f482:	e7d6      	b.n	800f432 <sniprintf+0x16>
 800f484:	20000280 	.word	0x20000280

0800f488 <siprintf>:
 800f488:	b40e      	push	{r1, r2, r3}
 800f48a:	b510      	push	{r4, lr}
 800f48c:	b09d      	sub	sp, #116	@ 0x74
 800f48e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f490:	9002      	str	r0, [sp, #8]
 800f492:	9006      	str	r0, [sp, #24]
 800f494:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f498:	480a      	ldr	r0, [pc, #40]	@ (800f4c4 <siprintf+0x3c>)
 800f49a:	9107      	str	r1, [sp, #28]
 800f49c:	9104      	str	r1, [sp, #16]
 800f49e:	490a      	ldr	r1, [pc, #40]	@ (800f4c8 <siprintf+0x40>)
 800f4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4a4:	9105      	str	r1, [sp, #20]
 800f4a6:	2400      	movs	r4, #0
 800f4a8:	a902      	add	r1, sp, #8
 800f4aa:	6800      	ldr	r0, [r0, #0]
 800f4ac:	9301      	str	r3, [sp, #4]
 800f4ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f4b0:	f002 f994 	bl	80117dc <_svfiprintf_r>
 800f4b4:	9b02      	ldr	r3, [sp, #8]
 800f4b6:	701c      	strb	r4, [r3, #0]
 800f4b8:	b01d      	add	sp, #116	@ 0x74
 800f4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4be:	b003      	add	sp, #12
 800f4c0:	4770      	bx	lr
 800f4c2:	bf00      	nop
 800f4c4:	20000280 	.word	0x20000280
 800f4c8:	ffff0208 	.word	0xffff0208

0800f4cc <siscanf>:
 800f4cc:	b40e      	push	{r1, r2, r3}
 800f4ce:	b570      	push	{r4, r5, r6, lr}
 800f4d0:	b09d      	sub	sp, #116	@ 0x74
 800f4d2:	ac21      	add	r4, sp, #132	@ 0x84
 800f4d4:	2500      	movs	r5, #0
 800f4d6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f4da:	f854 6b04 	ldr.w	r6, [r4], #4
 800f4de:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f4e2:	951b      	str	r5, [sp, #108]	@ 0x6c
 800f4e4:	9002      	str	r0, [sp, #8]
 800f4e6:	9006      	str	r0, [sp, #24]
 800f4e8:	f7f0 fed2 	bl	8000290 <strlen>
 800f4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800f51c <siscanf+0x50>)
 800f4ee:	9003      	str	r0, [sp, #12]
 800f4f0:	9007      	str	r0, [sp, #28]
 800f4f2:	480b      	ldr	r0, [pc, #44]	@ (800f520 <siscanf+0x54>)
 800f4f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f4fe:	4632      	mov	r2, r6
 800f500:	4623      	mov	r3, r4
 800f502:	a902      	add	r1, sp, #8
 800f504:	6800      	ldr	r0, [r0, #0]
 800f506:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f508:	9514      	str	r5, [sp, #80]	@ 0x50
 800f50a:	9401      	str	r4, [sp, #4]
 800f50c:	f002 fabc 	bl	8011a88 <__ssvfiscanf_r>
 800f510:	b01d      	add	sp, #116	@ 0x74
 800f512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f516:	b003      	add	sp, #12
 800f518:	4770      	bx	lr
 800f51a:	bf00      	nop
 800f51c:	0800f547 	.word	0x0800f547
 800f520:	20000280 	.word	0x20000280

0800f524 <__sread>:
 800f524:	b510      	push	{r4, lr}
 800f526:	460c      	mov	r4, r1
 800f528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f52c:	f000 f912 	bl	800f754 <_read_r>
 800f530:	2800      	cmp	r0, #0
 800f532:	bfab      	itete	ge
 800f534:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f536:	89a3      	ldrhlt	r3, [r4, #12]
 800f538:	181b      	addge	r3, r3, r0
 800f53a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f53e:	bfac      	ite	ge
 800f540:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f542:	81a3      	strhlt	r3, [r4, #12]
 800f544:	bd10      	pop	{r4, pc}

0800f546 <__seofread>:
 800f546:	2000      	movs	r0, #0
 800f548:	4770      	bx	lr

0800f54a <__swrite>:
 800f54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f54e:	461f      	mov	r7, r3
 800f550:	898b      	ldrh	r3, [r1, #12]
 800f552:	05db      	lsls	r3, r3, #23
 800f554:	4605      	mov	r5, r0
 800f556:	460c      	mov	r4, r1
 800f558:	4616      	mov	r6, r2
 800f55a:	d505      	bpl.n	800f568 <__swrite+0x1e>
 800f55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f560:	2302      	movs	r3, #2
 800f562:	2200      	movs	r2, #0
 800f564:	f000 f8e4 	bl	800f730 <_lseek_r>
 800f568:	89a3      	ldrh	r3, [r4, #12]
 800f56a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f56e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f572:	81a3      	strh	r3, [r4, #12]
 800f574:	4632      	mov	r2, r6
 800f576:	463b      	mov	r3, r7
 800f578:	4628      	mov	r0, r5
 800f57a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f57e:	f000 b8fb 	b.w	800f778 <_write_r>

0800f582 <__sseek>:
 800f582:	b510      	push	{r4, lr}
 800f584:	460c      	mov	r4, r1
 800f586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f58a:	f000 f8d1 	bl	800f730 <_lseek_r>
 800f58e:	1c43      	adds	r3, r0, #1
 800f590:	89a3      	ldrh	r3, [r4, #12]
 800f592:	bf15      	itete	ne
 800f594:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f596:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f59a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f59e:	81a3      	strheq	r3, [r4, #12]
 800f5a0:	bf18      	it	ne
 800f5a2:	81a3      	strhne	r3, [r4, #12]
 800f5a4:	bd10      	pop	{r4, pc}

0800f5a6 <__sclose>:
 800f5a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5aa:	f000 b8b1 	b.w	800f710 <_close_r>

0800f5ae <memset>:
 800f5ae:	4402      	add	r2, r0
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d100      	bne.n	800f5b8 <memset+0xa>
 800f5b6:	4770      	bx	lr
 800f5b8:	f803 1b01 	strb.w	r1, [r3], #1
 800f5bc:	e7f9      	b.n	800f5b2 <memset+0x4>

0800f5be <strchr>:
 800f5be:	b2c9      	uxtb	r1, r1
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5c8:	b112      	cbz	r2, 800f5d0 <strchr+0x12>
 800f5ca:	428a      	cmp	r2, r1
 800f5cc:	d1f9      	bne.n	800f5c2 <strchr+0x4>
 800f5ce:	4770      	bx	lr
 800f5d0:	2900      	cmp	r1, #0
 800f5d2:	bf18      	it	ne
 800f5d4:	2000      	movne	r0, #0
 800f5d6:	4770      	bx	lr

0800f5d8 <strncmp>:
 800f5d8:	b510      	push	{r4, lr}
 800f5da:	b16a      	cbz	r2, 800f5f8 <strncmp+0x20>
 800f5dc:	3901      	subs	r1, #1
 800f5de:	1884      	adds	r4, r0, r2
 800f5e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d103      	bne.n	800f5f4 <strncmp+0x1c>
 800f5ec:	42a0      	cmp	r0, r4
 800f5ee:	d001      	beq.n	800f5f4 <strncmp+0x1c>
 800f5f0:	2a00      	cmp	r2, #0
 800f5f2:	d1f5      	bne.n	800f5e0 <strncmp+0x8>
 800f5f4:	1ad0      	subs	r0, r2, r3
 800f5f6:	bd10      	pop	{r4, pc}
 800f5f8:	4610      	mov	r0, r2
 800f5fa:	e7fc      	b.n	800f5f6 <strncmp+0x1e>

0800f5fc <strncpy>:
 800f5fc:	b510      	push	{r4, lr}
 800f5fe:	3901      	subs	r1, #1
 800f600:	4603      	mov	r3, r0
 800f602:	b132      	cbz	r2, 800f612 <strncpy+0x16>
 800f604:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f608:	f803 4b01 	strb.w	r4, [r3], #1
 800f60c:	3a01      	subs	r2, #1
 800f60e:	2c00      	cmp	r4, #0
 800f610:	d1f7      	bne.n	800f602 <strncpy+0x6>
 800f612:	441a      	add	r2, r3
 800f614:	2100      	movs	r1, #0
 800f616:	4293      	cmp	r3, r2
 800f618:	d100      	bne.n	800f61c <strncpy+0x20>
 800f61a:	bd10      	pop	{r4, pc}
 800f61c:	f803 1b01 	strb.w	r1, [r3], #1
 800f620:	e7f9      	b.n	800f616 <strncpy+0x1a>
	...

0800f624 <strtok>:
 800f624:	4b16      	ldr	r3, [pc, #88]	@ (800f680 <strtok+0x5c>)
 800f626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f62a:	681f      	ldr	r7, [r3, #0]
 800f62c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f62e:	4605      	mov	r5, r0
 800f630:	460e      	mov	r6, r1
 800f632:	b9ec      	cbnz	r4, 800f670 <strtok+0x4c>
 800f634:	2050      	movs	r0, #80	@ 0x50
 800f636:	f001 faf7 	bl	8010c28 <malloc>
 800f63a:	4602      	mov	r2, r0
 800f63c:	6478      	str	r0, [r7, #68]	@ 0x44
 800f63e:	b920      	cbnz	r0, 800f64a <strtok+0x26>
 800f640:	4b10      	ldr	r3, [pc, #64]	@ (800f684 <strtok+0x60>)
 800f642:	4811      	ldr	r0, [pc, #68]	@ (800f688 <strtok+0x64>)
 800f644:	215b      	movs	r1, #91	@ 0x5b
 800f646:	f000 f8f5 	bl	800f834 <__assert_func>
 800f64a:	e9c0 4400 	strd	r4, r4, [r0]
 800f64e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f652:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f656:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f65a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f65e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f662:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f666:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f66a:	6184      	str	r4, [r0, #24]
 800f66c:	7704      	strb	r4, [r0, #28]
 800f66e:	6244      	str	r4, [r0, #36]	@ 0x24
 800f670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f672:	4631      	mov	r1, r6
 800f674:	4628      	mov	r0, r5
 800f676:	2301      	movs	r3, #1
 800f678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f67c:	f000 b806 	b.w	800f68c <__strtok_r>
 800f680:	20000280 	.word	0x20000280
 800f684:	08017b20 	.word	0x08017b20
 800f688:	08017bc8 	.word	0x08017bc8

0800f68c <__strtok_r>:
 800f68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f68e:	4604      	mov	r4, r0
 800f690:	b908      	cbnz	r0, 800f696 <__strtok_r+0xa>
 800f692:	6814      	ldr	r4, [r2, #0]
 800f694:	b144      	cbz	r4, 800f6a8 <__strtok_r+0x1c>
 800f696:	4620      	mov	r0, r4
 800f698:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f69c:	460f      	mov	r7, r1
 800f69e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f6a2:	b91e      	cbnz	r6, 800f6ac <__strtok_r+0x20>
 800f6a4:	b965      	cbnz	r5, 800f6c0 <__strtok_r+0x34>
 800f6a6:	6015      	str	r5, [r2, #0]
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	e005      	b.n	800f6b8 <__strtok_r+0x2c>
 800f6ac:	42b5      	cmp	r5, r6
 800f6ae:	d1f6      	bne.n	800f69e <__strtok_r+0x12>
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1f0      	bne.n	800f696 <__strtok_r+0xa>
 800f6b4:	6014      	str	r4, [r2, #0]
 800f6b6:	7003      	strb	r3, [r0, #0]
 800f6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6ba:	461c      	mov	r4, r3
 800f6bc:	e00c      	b.n	800f6d8 <__strtok_r+0x4c>
 800f6be:	b91d      	cbnz	r5, 800f6c8 <__strtok_r+0x3c>
 800f6c0:	4627      	mov	r7, r4
 800f6c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6c6:	460e      	mov	r6, r1
 800f6c8:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f6cc:	42ab      	cmp	r3, r5
 800f6ce:	d1f6      	bne.n	800f6be <__strtok_r+0x32>
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d0f2      	beq.n	800f6ba <__strtok_r+0x2e>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	703b      	strb	r3, [r7, #0]
 800f6d8:	6014      	str	r4, [r2, #0]
 800f6da:	e7ed      	b.n	800f6b8 <__strtok_r+0x2c>

0800f6dc <strstr>:
 800f6dc:	780a      	ldrb	r2, [r1, #0]
 800f6de:	b570      	push	{r4, r5, r6, lr}
 800f6e0:	b96a      	cbnz	r2, 800f6fe <strstr+0x22>
 800f6e2:	bd70      	pop	{r4, r5, r6, pc}
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d109      	bne.n	800f6fc <strstr+0x20>
 800f6e8:	460c      	mov	r4, r1
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d0f6      	beq.n	800f6e2 <strstr+0x6>
 800f6f4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f6f8:	429e      	cmp	r6, r3
 800f6fa:	d0f7      	beq.n	800f6ec <strstr+0x10>
 800f6fc:	3001      	adds	r0, #1
 800f6fe:	7803      	ldrb	r3, [r0, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1ef      	bne.n	800f6e4 <strstr+0x8>
 800f704:	4618      	mov	r0, r3
 800f706:	e7ec      	b.n	800f6e2 <strstr+0x6>

0800f708 <_localeconv_r>:
 800f708:	4800      	ldr	r0, [pc, #0]	@ (800f70c <_localeconv_r+0x4>)
 800f70a:	4770      	bx	lr
 800f70c:	20000204 	.word	0x20000204

0800f710 <_close_r>:
 800f710:	b538      	push	{r3, r4, r5, lr}
 800f712:	4d06      	ldr	r5, [pc, #24]	@ (800f72c <_close_r+0x1c>)
 800f714:	2300      	movs	r3, #0
 800f716:	4604      	mov	r4, r0
 800f718:	4608      	mov	r0, r1
 800f71a:	602b      	str	r3, [r5, #0]
 800f71c:	f7f3 fa7e 	bl	8002c1c <_close>
 800f720:	1c43      	adds	r3, r0, #1
 800f722:	d102      	bne.n	800f72a <_close_r+0x1a>
 800f724:	682b      	ldr	r3, [r5, #0]
 800f726:	b103      	cbz	r3, 800f72a <_close_r+0x1a>
 800f728:	6023      	str	r3, [r4, #0]
 800f72a:	bd38      	pop	{r3, r4, r5, pc}
 800f72c:	2001f124 	.word	0x2001f124

0800f730 <_lseek_r>:
 800f730:	b538      	push	{r3, r4, r5, lr}
 800f732:	4d07      	ldr	r5, [pc, #28]	@ (800f750 <_lseek_r+0x20>)
 800f734:	4604      	mov	r4, r0
 800f736:	4608      	mov	r0, r1
 800f738:	4611      	mov	r1, r2
 800f73a:	2200      	movs	r2, #0
 800f73c:	602a      	str	r2, [r5, #0]
 800f73e:	461a      	mov	r2, r3
 800f740:	f7f3 fa93 	bl	8002c6a <_lseek>
 800f744:	1c43      	adds	r3, r0, #1
 800f746:	d102      	bne.n	800f74e <_lseek_r+0x1e>
 800f748:	682b      	ldr	r3, [r5, #0]
 800f74a:	b103      	cbz	r3, 800f74e <_lseek_r+0x1e>
 800f74c:	6023      	str	r3, [r4, #0]
 800f74e:	bd38      	pop	{r3, r4, r5, pc}
 800f750:	2001f124 	.word	0x2001f124

0800f754 <_read_r>:
 800f754:	b538      	push	{r3, r4, r5, lr}
 800f756:	4d07      	ldr	r5, [pc, #28]	@ (800f774 <_read_r+0x20>)
 800f758:	4604      	mov	r4, r0
 800f75a:	4608      	mov	r0, r1
 800f75c:	4611      	mov	r1, r2
 800f75e:	2200      	movs	r2, #0
 800f760:	602a      	str	r2, [r5, #0]
 800f762:	461a      	mov	r2, r3
 800f764:	f7f3 fa21 	bl	8002baa <_read>
 800f768:	1c43      	adds	r3, r0, #1
 800f76a:	d102      	bne.n	800f772 <_read_r+0x1e>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	b103      	cbz	r3, 800f772 <_read_r+0x1e>
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	bd38      	pop	{r3, r4, r5, pc}
 800f774:	2001f124 	.word	0x2001f124

0800f778 <_write_r>:
 800f778:	b538      	push	{r3, r4, r5, lr}
 800f77a:	4d07      	ldr	r5, [pc, #28]	@ (800f798 <_write_r+0x20>)
 800f77c:	4604      	mov	r4, r0
 800f77e:	4608      	mov	r0, r1
 800f780:	4611      	mov	r1, r2
 800f782:	2200      	movs	r2, #0
 800f784:	602a      	str	r2, [r5, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	f7f3 fa2c 	bl	8002be4 <_write>
 800f78c:	1c43      	adds	r3, r0, #1
 800f78e:	d102      	bne.n	800f796 <_write_r+0x1e>
 800f790:	682b      	ldr	r3, [r5, #0]
 800f792:	b103      	cbz	r3, 800f796 <_write_r+0x1e>
 800f794:	6023      	str	r3, [r4, #0]
 800f796:	bd38      	pop	{r3, r4, r5, pc}
 800f798:	2001f124 	.word	0x2001f124

0800f79c <__errno>:
 800f79c:	4b01      	ldr	r3, [pc, #4]	@ (800f7a4 <__errno+0x8>)
 800f79e:	6818      	ldr	r0, [r3, #0]
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	20000280 	.word	0x20000280

0800f7a8 <__libc_init_array>:
 800f7a8:	b570      	push	{r4, r5, r6, lr}
 800f7aa:	4d0d      	ldr	r5, [pc, #52]	@ (800f7e0 <__libc_init_array+0x38>)
 800f7ac:	4c0d      	ldr	r4, [pc, #52]	@ (800f7e4 <__libc_init_array+0x3c>)
 800f7ae:	1b64      	subs	r4, r4, r5
 800f7b0:	10a4      	asrs	r4, r4, #2
 800f7b2:	2600      	movs	r6, #0
 800f7b4:	42a6      	cmp	r6, r4
 800f7b6:	d109      	bne.n	800f7cc <__libc_init_array+0x24>
 800f7b8:	4d0b      	ldr	r5, [pc, #44]	@ (800f7e8 <__libc_init_array+0x40>)
 800f7ba:	4c0c      	ldr	r4, [pc, #48]	@ (800f7ec <__libc_init_array+0x44>)
 800f7bc:	f003 f906 	bl	80129cc <_init>
 800f7c0:	1b64      	subs	r4, r4, r5
 800f7c2:	10a4      	asrs	r4, r4, #2
 800f7c4:	2600      	movs	r6, #0
 800f7c6:	42a6      	cmp	r6, r4
 800f7c8:	d105      	bne.n	800f7d6 <__libc_init_array+0x2e>
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}
 800f7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7d0:	4798      	blx	r3
 800f7d2:	3601      	adds	r6, #1
 800f7d4:	e7ee      	b.n	800f7b4 <__libc_init_array+0xc>
 800f7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7da:	4798      	blx	r3
 800f7dc:	3601      	adds	r6, #1
 800f7de:	e7f2      	b.n	800f7c6 <__libc_init_array+0x1e>
 800f7e0:	08018020 	.word	0x08018020
 800f7e4:	08018020 	.word	0x08018020
 800f7e8:	08018020 	.word	0x08018020
 800f7ec:	08018024 	.word	0x08018024

0800f7f0 <__retarget_lock_init_recursive>:
 800f7f0:	4770      	bx	lr

0800f7f2 <__retarget_lock_acquire_recursive>:
 800f7f2:	4770      	bx	lr

0800f7f4 <__retarget_lock_release_recursive>:
 800f7f4:	4770      	bx	lr

0800f7f6 <memcpy>:
 800f7f6:	440a      	add	r2, r1
 800f7f8:	4291      	cmp	r1, r2
 800f7fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7fe:	d100      	bne.n	800f802 <memcpy+0xc>
 800f800:	4770      	bx	lr
 800f802:	b510      	push	{r4, lr}
 800f804:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f80c:	4291      	cmp	r1, r2
 800f80e:	d1f9      	bne.n	800f804 <memcpy+0xe>
 800f810:	bd10      	pop	{r4, pc}
 800f812:	0000      	movs	r0, r0
 800f814:	0000      	movs	r0, r0
	...

0800f818 <nan>:
 800f818:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f820 <nan+0x8>
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	00000000 	.word	0x00000000
 800f824:	7ff80000 	.word	0x7ff80000

0800f828 <nanf>:
 800f828:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f830 <nanf+0x8>
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop
 800f830:	7fc00000 	.word	0x7fc00000

0800f834 <__assert_func>:
 800f834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f836:	4614      	mov	r4, r2
 800f838:	461a      	mov	r2, r3
 800f83a:	4b09      	ldr	r3, [pc, #36]	@ (800f860 <__assert_func+0x2c>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4605      	mov	r5, r0
 800f840:	68d8      	ldr	r0, [r3, #12]
 800f842:	b14c      	cbz	r4, 800f858 <__assert_func+0x24>
 800f844:	4b07      	ldr	r3, [pc, #28]	@ (800f864 <__assert_func+0x30>)
 800f846:	9100      	str	r1, [sp, #0]
 800f848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f84c:	4906      	ldr	r1, [pc, #24]	@ (800f868 <__assert_func+0x34>)
 800f84e:	462b      	mov	r3, r5
 800f850:	f002 fc8a 	bl	8012168 <fiprintf>
 800f854:	f002 fd38 	bl	80122c8 <abort>
 800f858:	4b04      	ldr	r3, [pc, #16]	@ (800f86c <__assert_func+0x38>)
 800f85a:	461c      	mov	r4, r3
 800f85c:	e7f3      	b.n	800f846 <__assert_func+0x12>
 800f85e:	bf00      	nop
 800f860:	20000280 	.word	0x20000280
 800f864:	08017c2a 	.word	0x08017c2a
 800f868:	08017c37 	.word	0x08017c37
 800f86c:	08017c65 	.word	0x08017c65

0800f870 <quorem>:
 800f870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f874:	6903      	ldr	r3, [r0, #16]
 800f876:	690c      	ldr	r4, [r1, #16]
 800f878:	42a3      	cmp	r3, r4
 800f87a:	4607      	mov	r7, r0
 800f87c:	db7e      	blt.n	800f97c <quorem+0x10c>
 800f87e:	3c01      	subs	r4, #1
 800f880:	f101 0814 	add.w	r8, r1, #20
 800f884:	00a3      	lsls	r3, r4, #2
 800f886:	f100 0514 	add.w	r5, r0, #20
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f890:	9301      	str	r3, [sp, #4]
 800f892:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f896:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f89a:	3301      	adds	r3, #1
 800f89c:	429a      	cmp	r2, r3
 800f89e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8a2:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8a6:	d32e      	bcc.n	800f906 <quorem+0x96>
 800f8a8:	f04f 0a00 	mov.w	sl, #0
 800f8ac:	46c4      	mov	ip, r8
 800f8ae:	46ae      	mov	lr, r5
 800f8b0:	46d3      	mov	fp, sl
 800f8b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f8b6:	b298      	uxth	r0, r3
 800f8b8:	fb06 a000 	mla	r0, r6, r0, sl
 800f8bc:	0c02      	lsrs	r2, r0, #16
 800f8be:	0c1b      	lsrs	r3, r3, #16
 800f8c0:	fb06 2303 	mla	r3, r6, r3, r2
 800f8c4:	f8de 2000 	ldr.w	r2, [lr]
 800f8c8:	b280      	uxth	r0, r0
 800f8ca:	b292      	uxth	r2, r2
 800f8cc:	1a12      	subs	r2, r2, r0
 800f8ce:	445a      	add	r2, fp
 800f8d0:	f8de 0000 	ldr.w	r0, [lr]
 800f8d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f8de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f8e2:	b292      	uxth	r2, r2
 800f8e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f8e8:	45e1      	cmp	r9, ip
 800f8ea:	f84e 2b04 	str.w	r2, [lr], #4
 800f8ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f8f2:	d2de      	bcs.n	800f8b2 <quorem+0x42>
 800f8f4:	9b00      	ldr	r3, [sp, #0]
 800f8f6:	58eb      	ldr	r3, [r5, r3]
 800f8f8:	b92b      	cbnz	r3, 800f906 <quorem+0x96>
 800f8fa:	9b01      	ldr	r3, [sp, #4]
 800f8fc:	3b04      	subs	r3, #4
 800f8fe:	429d      	cmp	r5, r3
 800f900:	461a      	mov	r2, r3
 800f902:	d32f      	bcc.n	800f964 <quorem+0xf4>
 800f904:	613c      	str	r4, [r7, #16]
 800f906:	4638      	mov	r0, r7
 800f908:	f001 fd12 	bl	8011330 <__mcmp>
 800f90c:	2800      	cmp	r0, #0
 800f90e:	db25      	blt.n	800f95c <quorem+0xec>
 800f910:	4629      	mov	r1, r5
 800f912:	2000      	movs	r0, #0
 800f914:	f858 2b04 	ldr.w	r2, [r8], #4
 800f918:	f8d1 c000 	ldr.w	ip, [r1]
 800f91c:	fa1f fe82 	uxth.w	lr, r2
 800f920:	fa1f f38c 	uxth.w	r3, ip
 800f924:	eba3 030e 	sub.w	r3, r3, lr
 800f928:	4403      	add	r3, r0
 800f92a:	0c12      	lsrs	r2, r2, #16
 800f92c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f930:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f934:	b29b      	uxth	r3, r3
 800f936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f93a:	45c1      	cmp	r9, r8
 800f93c:	f841 3b04 	str.w	r3, [r1], #4
 800f940:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f944:	d2e6      	bcs.n	800f914 <quorem+0xa4>
 800f946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f94a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f94e:	b922      	cbnz	r2, 800f95a <quorem+0xea>
 800f950:	3b04      	subs	r3, #4
 800f952:	429d      	cmp	r5, r3
 800f954:	461a      	mov	r2, r3
 800f956:	d30b      	bcc.n	800f970 <quorem+0x100>
 800f958:	613c      	str	r4, [r7, #16]
 800f95a:	3601      	adds	r6, #1
 800f95c:	4630      	mov	r0, r6
 800f95e:	b003      	add	sp, #12
 800f960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f964:	6812      	ldr	r2, [r2, #0]
 800f966:	3b04      	subs	r3, #4
 800f968:	2a00      	cmp	r2, #0
 800f96a:	d1cb      	bne.n	800f904 <quorem+0x94>
 800f96c:	3c01      	subs	r4, #1
 800f96e:	e7c6      	b.n	800f8fe <quorem+0x8e>
 800f970:	6812      	ldr	r2, [r2, #0]
 800f972:	3b04      	subs	r3, #4
 800f974:	2a00      	cmp	r2, #0
 800f976:	d1ef      	bne.n	800f958 <quorem+0xe8>
 800f978:	3c01      	subs	r4, #1
 800f97a:	e7ea      	b.n	800f952 <quorem+0xe2>
 800f97c:	2000      	movs	r0, #0
 800f97e:	e7ee      	b.n	800f95e <quorem+0xee>

0800f980 <_dtoa_r>:
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	69c7      	ldr	r7, [r0, #28]
 800f986:	b097      	sub	sp, #92	@ 0x5c
 800f988:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f98c:	ec55 4b10 	vmov	r4, r5, d0
 800f990:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f992:	9107      	str	r1, [sp, #28]
 800f994:	4681      	mov	r9, r0
 800f996:	920c      	str	r2, [sp, #48]	@ 0x30
 800f998:	9311      	str	r3, [sp, #68]	@ 0x44
 800f99a:	b97f      	cbnz	r7, 800f9bc <_dtoa_r+0x3c>
 800f99c:	2010      	movs	r0, #16
 800f99e:	f001 f943 	bl	8010c28 <malloc>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	f8c9 001c 	str.w	r0, [r9, #28]
 800f9a8:	b920      	cbnz	r0, 800f9b4 <_dtoa_r+0x34>
 800f9aa:	4ba9      	ldr	r3, [pc, #676]	@ (800fc50 <_dtoa_r+0x2d0>)
 800f9ac:	21ef      	movs	r1, #239	@ 0xef
 800f9ae:	48a9      	ldr	r0, [pc, #676]	@ (800fc54 <_dtoa_r+0x2d4>)
 800f9b0:	f7ff ff40 	bl	800f834 <__assert_func>
 800f9b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f9b8:	6007      	str	r7, [r0, #0]
 800f9ba:	60c7      	str	r7, [r0, #12]
 800f9bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f9c0:	6819      	ldr	r1, [r3, #0]
 800f9c2:	b159      	cbz	r1, 800f9dc <_dtoa_r+0x5c>
 800f9c4:	685a      	ldr	r2, [r3, #4]
 800f9c6:	604a      	str	r2, [r1, #4]
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	4093      	lsls	r3, r2
 800f9cc:	608b      	str	r3, [r1, #8]
 800f9ce:	4648      	mov	r0, r9
 800f9d0:	f001 fa32 	bl	8010e38 <_Bfree>
 800f9d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	601a      	str	r2, [r3, #0]
 800f9dc:	1e2b      	subs	r3, r5, #0
 800f9de:	bfb9      	ittee	lt
 800f9e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f9e4:	9305      	strlt	r3, [sp, #20]
 800f9e6:	2300      	movge	r3, #0
 800f9e8:	6033      	strge	r3, [r6, #0]
 800f9ea:	9f05      	ldr	r7, [sp, #20]
 800f9ec:	4b9a      	ldr	r3, [pc, #616]	@ (800fc58 <_dtoa_r+0x2d8>)
 800f9ee:	bfbc      	itt	lt
 800f9f0:	2201      	movlt	r2, #1
 800f9f2:	6032      	strlt	r2, [r6, #0]
 800f9f4:	43bb      	bics	r3, r7
 800f9f6:	d112      	bne.n	800fa1e <_dtoa_r+0x9e>
 800f9f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f9fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f9fe:	6013      	str	r3, [r2, #0]
 800fa00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa04:	4323      	orrs	r3, r4
 800fa06:	f000 855a 	beq.w	80104be <_dtoa_r+0xb3e>
 800fa0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fa0c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fc6c <_dtoa_r+0x2ec>
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	f000 855c 	beq.w	80104ce <_dtoa_r+0xb4e>
 800fa16:	f10a 0303 	add.w	r3, sl, #3
 800fa1a:	f000 bd56 	b.w	80104ca <_dtoa_r+0xb4a>
 800fa1e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fa22:	2200      	movs	r2, #0
 800fa24:	ec51 0b17 	vmov	r0, r1, d7
 800fa28:	2300      	movs	r3, #0
 800fa2a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fa2e:	f7f1 f85b 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa32:	4680      	mov	r8, r0
 800fa34:	b158      	cbz	r0, 800fa4e <_dtoa_r+0xce>
 800fa36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fa38:	2301      	movs	r3, #1
 800fa3a:	6013      	str	r3, [r2, #0]
 800fa3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fa3e:	b113      	cbz	r3, 800fa46 <_dtoa_r+0xc6>
 800fa40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fa42:	4b86      	ldr	r3, [pc, #536]	@ (800fc5c <_dtoa_r+0x2dc>)
 800fa44:	6013      	str	r3, [r2, #0]
 800fa46:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fc70 <_dtoa_r+0x2f0>
 800fa4a:	f000 bd40 	b.w	80104ce <_dtoa_r+0xb4e>
 800fa4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fa52:	aa14      	add	r2, sp, #80	@ 0x50
 800fa54:	a915      	add	r1, sp, #84	@ 0x54
 800fa56:	4648      	mov	r0, r9
 800fa58:	f001 fd8a 	bl	8011570 <__d2b>
 800fa5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fa60:	9002      	str	r0, [sp, #8]
 800fa62:	2e00      	cmp	r6, #0
 800fa64:	d078      	beq.n	800fb58 <_dtoa_r+0x1d8>
 800fa66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa68:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fa6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fa74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fa78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fa7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fa80:	4619      	mov	r1, r3
 800fa82:	2200      	movs	r2, #0
 800fa84:	4b76      	ldr	r3, [pc, #472]	@ (800fc60 <_dtoa_r+0x2e0>)
 800fa86:	f7f0 fc0f 	bl	80002a8 <__aeabi_dsub>
 800fa8a:	a36b      	add	r3, pc, #428	@ (adr r3, 800fc38 <_dtoa_r+0x2b8>)
 800fa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa90:	f7f0 fdc2 	bl	8000618 <__aeabi_dmul>
 800fa94:	a36a      	add	r3, pc, #424	@ (adr r3, 800fc40 <_dtoa_r+0x2c0>)
 800fa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9a:	f7f0 fc07 	bl	80002ac <__adddf3>
 800fa9e:	4604      	mov	r4, r0
 800faa0:	4630      	mov	r0, r6
 800faa2:	460d      	mov	r5, r1
 800faa4:	f7f0 fd4e 	bl	8000544 <__aeabi_i2d>
 800faa8:	a367      	add	r3, pc, #412	@ (adr r3, 800fc48 <_dtoa_r+0x2c8>)
 800faaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faae:	f7f0 fdb3 	bl	8000618 <__aeabi_dmul>
 800fab2:	4602      	mov	r2, r0
 800fab4:	460b      	mov	r3, r1
 800fab6:	4620      	mov	r0, r4
 800fab8:	4629      	mov	r1, r5
 800faba:	f7f0 fbf7 	bl	80002ac <__adddf3>
 800fabe:	4604      	mov	r4, r0
 800fac0:	460d      	mov	r5, r1
 800fac2:	f7f1 f859 	bl	8000b78 <__aeabi_d2iz>
 800fac6:	2200      	movs	r2, #0
 800fac8:	4607      	mov	r7, r0
 800faca:	2300      	movs	r3, #0
 800facc:	4620      	mov	r0, r4
 800face:	4629      	mov	r1, r5
 800fad0:	f7f1 f814 	bl	8000afc <__aeabi_dcmplt>
 800fad4:	b140      	cbz	r0, 800fae8 <_dtoa_r+0x168>
 800fad6:	4638      	mov	r0, r7
 800fad8:	f7f0 fd34 	bl	8000544 <__aeabi_i2d>
 800fadc:	4622      	mov	r2, r4
 800fade:	462b      	mov	r3, r5
 800fae0:	f7f1 f802 	bl	8000ae8 <__aeabi_dcmpeq>
 800fae4:	b900      	cbnz	r0, 800fae8 <_dtoa_r+0x168>
 800fae6:	3f01      	subs	r7, #1
 800fae8:	2f16      	cmp	r7, #22
 800faea:	d852      	bhi.n	800fb92 <_dtoa_r+0x212>
 800faec:	4b5d      	ldr	r3, [pc, #372]	@ (800fc64 <_dtoa_r+0x2e4>)
 800faee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800faf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fafa:	f7f0 ffff 	bl	8000afc <__aeabi_dcmplt>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	d049      	beq.n	800fb96 <_dtoa_r+0x216>
 800fb02:	3f01      	subs	r7, #1
 800fb04:	2300      	movs	r3, #0
 800fb06:	9310      	str	r3, [sp, #64]	@ 0x40
 800fb08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fb0a:	1b9b      	subs	r3, r3, r6
 800fb0c:	1e5a      	subs	r2, r3, #1
 800fb0e:	bf45      	ittet	mi
 800fb10:	f1c3 0301 	rsbmi	r3, r3, #1
 800fb14:	9300      	strmi	r3, [sp, #0]
 800fb16:	2300      	movpl	r3, #0
 800fb18:	2300      	movmi	r3, #0
 800fb1a:	9206      	str	r2, [sp, #24]
 800fb1c:	bf54      	ite	pl
 800fb1e:	9300      	strpl	r3, [sp, #0]
 800fb20:	9306      	strmi	r3, [sp, #24]
 800fb22:	2f00      	cmp	r7, #0
 800fb24:	db39      	blt.n	800fb9a <_dtoa_r+0x21a>
 800fb26:	9b06      	ldr	r3, [sp, #24]
 800fb28:	970d      	str	r7, [sp, #52]	@ 0x34
 800fb2a:	443b      	add	r3, r7
 800fb2c:	9306      	str	r3, [sp, #24]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	9308      	str	r3, [sp, #32]
 800fb32:	9b07      	ldr	r3, [sp, #28]
 800fb34:	2b09      	cmp	r3, #9
 800fb36:	d863      	bhi.n	800fc00 <_dtoa_r+0x280>
 800fb38:	2b05      	cmp	r3, #5
 800fb3a:	bfc4      	itt	gt
 800fb3c:	3b04      	subgt	r3, #4
 800fb3e:	9307      	strgt	r3, [sp, #28]
 800fb40:	9b07      	ldr	r3, [sp, #28]
 800fb42:	f1a3 0302 	sub.w	r3, r3, #2
 800fb46:	bfcc      	ite	gt
 800fb48:	2400      	movgt	r4, #0
 800fb4a:	2401      	movle	r4, #1
 800fb4c:	2b03      	cmp	r3, #3
 800fb4e:	d863      	bhi.n	800fc18 <_dtoa_r+0x298>
 800fb50:	e8df f003 	tbb	[pc, r3]
 800fb54:	2b375452 	.word	0x2b375452
 800fb58:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fb5c:	441e      	add	r6, r3
 800fb5e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fb62:	2b20      	cmp	r3, #32
 800fb64:	bfc1      	itttt	gt
 800fb66:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fb6a:	409f      	lslgt	r7, r3
 800fb6c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fb70:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fb74:	bfd6      	itet	le
 800fb76:	f1c3 0320 	rsble	r3, r3, #32
 800fb7a:	ea47 0003 	orrgt.w	r0, r7, r3
 800fb7e:	fa04 f003 	lslle.w	r0, r4, r3
 800fb82:	f7f0 fccf 	bl	8000524 <__aeabi_ui2d>
 800fb86:	2201      	movs	r2, #1
 800fb88:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fb8c:	3e01      	subs	r6, #1
 800fb8e:	9212      	str	r2, [sp, #72]	@ 0x48
 800fb90:	e776      	b.n	800fa80 <_dtoa_r+0x100>
 800fb92:	2301      	movs	r3, #1
 800fb94:	e7b7      	b.n	800fb06 <_dtoa_r+0x186>
 800fb96:	9010      	str	r0, [sp, #64]	@ 0x40
 800fb98:	e7b6      	b.n	800fb08 <_dtoa_r+0x188>
 800fb9a:	9b00      	ldr	r3, [sp, #0]
 800fb9c:	1bdb      	subs	r3, r3, r7
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	427b      	negs	r3, r7
 800fba2:	9308      	str	r3, [sp, #32]
 800fba4:	2300      	movs	r3, #0
 800fba6:	930d      	str	r3, [sp, #52]	@ 0x34
 800fba8:	e7c3      	b.n	800fb32 <_dtoa_r+0x1b2>
 800fbaa:	2301      	movs	r3, #1
 800fbac:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbb0:	eb07 0b03 	add.w	fp, r7, r3
 800fbb4:	f10b 0301 	add.w	r3, fp, #1
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	9303      	str	r3, [sp, #12]
 800fbbc:	bfb8      	it	lt
 800fbbe:	2301      	movlt	r3, #1
 800fbc0:	e006      	b.n	800fbd0 <_dtoa_r+0x250>
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	dd28      	ble.n	800fc1e <_dtoa_r+0x29e>
 800fbcc:	469b      	mov	fp, r3
 800fbce:	9303      	str	r3, [sp, #12]
 800fbd0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fbd4:	2100      	movs	r1, #0
 800fbd6:	2204      	movs	r2, #4
 800fbd8:	f102 0514 	add.w	r5, r2, #20
 800fbdc:	429d      	cmp	r5, r3
 800fbde:	d926      	bls.n	800fc2e <_dtoa_r+0x2ae>
 800fbe0:	6041      	str	r1, [r0, #4]
 800fbe2:	4648      	mov	r0, r9
 800fbe4:	f001 f8e8 	bl	8010db8 <_Balloc>
 800fbe8:	4682      	mov	sl, r0
 800fbea:	2800      	cmp	r0, #0
 800fbec:	d142      	bne.n	800fc74 <_dtoa_r+0x2f4>
 800fbee:	4b1e      	ldr	r3, [pc, #120]	@ (800fc68 <_dtoa_r+0x2e8>)
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	f240 11af 	movw	r1, #431	@ 0x1af
 800fbf6:	e6da      	b.n	800f9ae <_dtoa_r+0x2e>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	e7e3      	b.n	800fbc4 <_dtoa_r+0x244>
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	e7d5      	b.n	800fbac <_dtoa_r+0x22c>
 800fc00:	2401      	movs	r4, #1
 800fc02:	2300      	movs	r3, #0
 800fc04:	9307      	str	r3, [sp, #28]
 800fc06:	9409      	str	r4, [sp, #36]	@ 0x24
 800fc08:	f04f 3bff 	mov.w	fp, #4294967295
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f8cd b00c 	str.w	fp, [sp, #12]
 800fc12:	2312      	movs	r3, #18
 800fc14:	920c      	str	r2, [sp, #48]	@ 0x30
 800fc16:	e7db      	b.n	800fbd0 <_dtoa_r+0x250>
 800fc18:	2301      	movs	r3, #1
 800fc1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc1c:	e7f4      	b.n	800fc08 <_dtoa_r+0x288>
 800fc1e:	f04f 0b01 	mov.w	fp, #1
 800fc22:	f8cd b00c 	str.w	fp, [sp, #12]
 800fc26:	465b      	mov	r3, fp
 800fc28:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fc2c:	e7d0      	b.n	800fbd0 <_dtoa_r+0x250>
 800fc2e:	3101      	adds	r1, #1
 800fc30:	0052      	lsls	r2, r2, #1
 800fc32:	e7d1      	b.n	800fbd8 <_dtoa_r+0x258>
 800fc34:	f3af 8000 	nop.w
 800fc38:	636f4361 	.word	0x636f4361
 800fc3c:	3fd287a7 	.word	0x3fd287a7
 800fc40:	8b60c8b3 	.word	0x8b60c8b3
 800fc44:	3fc68a28 	.word	0x3fc68a28
 800fc48:	509f79fb 	.word	0x509f79fb
 800fc4c:	3fd34413 	.word	0x3fd34413
 800fc50:	08017b20 	.word	0x08017b20
 800fc54:	08017c73 	.word	0x08017c73
 800fc58:	7ff00000 	.word	0x7ff00000
 800fc5c:	08017dbd 	.word	0x08017dbd
 800fc60:	3ff80000 	.word	0x3ff80000
 800fc64:	08017f50 	.word	0x08017f50
 800fc68:	08017ccb 	.word	0x08017ccb
 800fc6c:	08017c6f 	.word	0x08017c6f
 800fc70:	08017dbc 	.word	0x08017dbc
 800fc74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fc78:	6018      	str	r0, [r3, #0]
 800fc7a:	9b03      	ldr	r3, [sp, #12]
 800fc7c:	2b0e      	cmp	r3, #14
 800fc7e:	f200 80a1 	bhi.w	800fdc4 <_dtoa_r+0x444>
 800fc82:	2c00      	cmp	r4, #0
 800fc84:	f000 809e 	beq.w	800fdc4 <_dtoa_r+0x444>
 800fc88:	2f00      	cmp	r7, #0
 800fc8a:	dd33      	ble.n	800fcf4 <_dtoa_r+0x374>
 800fc8c:	4b9c      	ldr	r3, [pc, #624]	@ (800ff00 <_dtoa_r+0x580>)
 800fc8e:	f007 020f 	and.w	r2, r7, #15
 800fc92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc96:	ed93 7b00 	vldr	d7, [r3]
 800fc9a:	05f8      	lsls	r0, r7, #23
 800fc9c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fca0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fca4:	d516      	bpl.n	800fcd4 <_dtoa_r+0x354>
 800fca6:	4b97      	ldr	r3, [pc, #604]	@ (800ff04 <_dtoa_r+0x584>)
 800fca8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fcac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fcb0:	f7f0 fddc 	bl	800086c <__aeabi_ddiv>
 800fcb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcb8:	f004 040f 	and.w	r4, r4, #15
 800fcbc:	2603      	movs	r6, #3
 800fcbe:	4d91      	ldr	r5, [pc, #580]	@ (800ff04 <_dtoa_r+0x584>)
 800fcc0:	b954      	cbnz	r4, 800fcd8 <_dtoa_r+0x358>
 800fcc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fcc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcca:	f7f0 fdcf 	bl	800086c <__aeabi_ddiv>
 800fcce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcd2:	e028      	b.n	800fd26 <_dtoa_r+0x3a6>
 800fcd4:	2602      	movs	r6, #2
 800fcd6:	e7f2      	b.n	800fcbe <_dtoa_r+0x33e>
 800fcd8:	07e1      	lsls	r1, r4, #31
 800fcda:	d508      	bpl.n	800fcee <_dtoa_r+0x36e>
 800fcdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fce0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fce4:	f7f0 fc98 	bl	8000618 <__aeabi_dmul>
 800fce8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fcec:	3601      	adds	r6, #1
 800fcee:	1064      	asrs	r4, r4, #1
 800fcf0:	3508      	adds	r5, #8
 800fcf2:	e7e5      	b.n	800fcc0 <_dtoa_r+0x340>
 800fcf4:	f000 80af 	beq.w	800fe56 <_dtoa_r+0x4d6>
 800fcf8:	427c      	negs	r4, r7
 800fcfa:	4b81      	ldr	r3, [pc, #516]	@ (800ff00 <_dtoa_r+0x580>)
 800fcfc:	4d81      	ldr	r5, [pc, #516]	@ (800ff04 <_dtoa_r+0x584>)
 800fcfe:	f004 020f 	and.w	r2, r4, #15
 800fd02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fd0e:	f7f0 fc83 	bl	8000618 <__aeabi_dmul>
 800fd12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd16:	1124      	asrs	r4, r4, #4
 800fd18:	2300      	movs	r3, #0
 800fd1a:	2602      	movs	r6, #2
 800fd1c:	2c00      	cmp	r4, #0
 800fd1e:	f040 808f 	bne.w	800fe40 <_dtoa_r+0x4c0>
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d1d3      	bne.n	800fcce <_dtoa_r+0x34e>
 800fd26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd28:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f000 8094 	beq.w	800fe5a <_dtoa_r+0x4da>
 800fd32:	4b75      	ldr	r3, [pc, #468]	@ (800ff08 <_dtoa_r+0x588>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	4620      	mov	r0, r4
 800fd38:	4629      	mov	r1, r5
 800fd3a:	f7f0 fedf 	bl	8000afc <__aeabi_dcmplt>
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	f000 808b 	beq.w	800fe5a <_dtoa_r+0x4da>
 800fd44:	9b03      	ldr	r3, [sp, #12]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 8087 	beq.w	800fe5a <_dtoa_r+0x4da>
 800fd4c:	f1bb 0f00 	cmp.w	fp, #0
 800fd50:	dd34      	ble.n	800fdbc <_dtoa_r+0x43c>
 800fd52:	4620      	mov	r0, r4
 800fd54:	4b6d      	ldr	r3, [pc, #436]	@ (800ff0c <_dtoa_r+0x58c>)
 800fd56:	2200      	movs	r2, #0
 800fd58:	4629      	mov	r1, r5
 800fd5a:	f7f0 fc5d 	bl	8000618 <__aeabi_dmul>
 800fd5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd62:	f107 38ff 	add.w	r8, r7, #4294967295
 800fd66:	3601      	adds	r6, #1
 800fd68:	465c      	mov	r4, fp
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	f7f0 fbea 	bl	8000544 <__aeabi_i2d>
 800fd70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd74:	f7f0 fc50 	bl	8000618 <__aeabi_dmul>
 800fd78:	4b65      	ldr	r3, [pc, #404]	@ (800ff10 <_dtoa_r+0x590>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f7f0 fa96 	bl	80002ac <__adddf3>
 800fd80:	4605      	mov	r5, r0
 800fd82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fd86:	2c00      	cmp	r4, #0
 800fd88:	d16a      	bne.n	800fe60 <_dtoa_r+0x4e0>
 800fd8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd8e:	4b61      	ldr	r3, [pc, #388]	@ (800ff14 <_dtoa_r+0x594>)
 800fd90:	2200      	movs	r2, #0
 800fd92:	f7f0 fa89 	bl	80002a8 <__aeabi_dsub>
 800fd96:	4602      	mov	r2, r0
 800fd98:	460b      	mov	r3, r1
 800fd9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd9e:	462a      	mov	r2, r5
 800fda0:	4633      	mov	r3, r6
 800fda2:	f7f0 fec9 	bl	8000b38 <__aeabi_dcmpgt>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	f040 8298 	bne.w	80102dc <_dtoa_r+0x95c>
 800fdac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdb0:	462a      	mov	r2, r5
 800fdb2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fdb6:	f7f0 fea1 	bl	8000afc <__aeabi_dcmplt>
 800fdba:	bb38      	cbnz	r0, 800fe0c <_dtoa_r+0x48c>
 800fdbc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800fdc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fdc4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	f2c0 8157 	blt.w	801007a <_dtoa_r+0x6fa>
 800fdcc:	2f0e      	cmp	r7, #14
 800fdce:	f300 8154 	bgt.w	801007a <_dtoa_r+0x6fa>
 800fdd2:	4b4b      	ldr	r3, [pc, #300]	@ (800ff00 <_dtoa_r+0x580>)
 800fdd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fdd8:	ed93 7b00 	vldr	d7, [r3]
 800fddc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	ed8d 7b00 	vstr	d7, [sp]
 800fde4:	f280 80e5 	bge.w	800ffb2 <_dtoa_r+0x632>
 800fde8:	9b03      	ldr	r3, [sp, #12]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f300 80e1 	bgt.w	800ffb2 <_dtoa_r+0x632>
 800fdf0:	d10c      	bne.n	800fe0c <_dtoa_r+0x48c>
 800fdf2:	4b48      	ldr	r3, [pc, #288]	@ (800ff14 <_dtoa_r+0x594>)
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	ec51 0b17 	vmov	r0, r1, d7
 800fdfa:	f7f0 fc0d 	bl	8000618 <__aeabi_dmul>
 800fdfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe02:	f7f0 fe8f 	bl	8000b24 <__aeabi_dcmpge>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	f000 8266 	beq.w	80102d8 <_dtoa_r+0x958>
 800fe0c:	2400      	movs	r4, #0
 800fe0e:	4625      	mov	r5, r4
 800fe10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe12:	4656      	mov	r6, sl
 800fe14:	ea6f 0803 	mvn.w	r8, r3
 800fe18:	2700      	movs	r7, #0
 800fe1a:	4621      	mov	r1, r4
 800fe1c:	4648      	mov	r0, r9
 800fe1e:	f001 f80b 	bl	8010e38 <_Bfree>
 800fe22:	2d00      	cmp	r5, #0
 800fe24:	f000 80bd 	beq.w	800ffa2 <_dtoa_r+0x622>
 800fe28:	b12f      	cbz	r7, 800fe36 <_dtoa_r+0x4b6>
 800fe2a:	42af      	cmp	r7, r5
 800fe2c:	d003      	beq.n	800fe36 <_dtoa_r+0x4b6>
 800fe2e:	4639      	mov	r1, r7
 800fe30:	4648      	mov	r0, r9
 800fe32:	f001 f801 	bl	8010e38 <_Bfree>
 800fe36:	4629      	mov	r1, r5
 800fe38:	4648      	mov	r0, r9
 800fe3a:	f000 fffd 	bl	8010e38 <_Bfree>
 800fe3e:	e0b0      	b.n	800ffa2 <_dtoa_r+0x622>
 800fe40:	07e2      	lsls	r2, r4, #31
 800fe42:	d505      	bpl.n	800fe50 <_dtoa_r+0x4d0>
 800fe44:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe48:	f7f0 fbe6 	bl	8000618 <__aeabi_dmul>
 800fe4c:	3601      	adds	r6, #1
 800fe4e:	2301      	movs	r3, #1
 800fe50:	1064      	asrs	r4, r4, #1
 800fe52:	3508      	adds	r5, #8
 800fe54:	e762      	b.n	800fd1c <_dtoa_r+0x39c>
 800fe56:	2602      	movs	r6, #2
 800fe58:	e765      	b.n	800fd26 <_dtoa_r+0x3a6>
 800fe5a:	9c03      	ldr	r4, [sp, #12]
 800fe5c:	46b8      	mov	r8, r7
 800fe5e:	e784      	b.n	800fd6a <_dtoa_r+0x3ea>
 800fe60:	4b27      	ldr	r3, [pc, #156]	@ (800ff00 <_dtoa_r+0x580>)
 800fe62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe6c:	4454      	add	r4, sl
 800fe6e:	2900      	cmp	r1, #0
 800fe70:	d054      	beq.n	800ff1c <_dtoa_r+0x59c>
 800fe72:	4929      	ldr	r1, [pc, #164]	@ (800ff18 <_dtoa_r+0x598>)
 800fe74:	2000      	movs	r0, #0
 800fe76:	f7f0 fcf9 	bl	800086c <__aeabi_ddiv>
 800fe7a:	4633      	mov	r3, r6
 800fe7c:	462a      	mov	r2, r5
 800fe7e:	f7f0 fa13 	bl	80002a8 <__aeabi_dsub>
 800fe82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fe86:	4656      	mov	r6, sl
 800fe88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe8c:	f7f0 fe74 	bl	8000b78 <__aeabi_d2iz>
 800fe90:	4605      	mov	r5, r0
 800fe92:	f7f0 fb57 	bl	8000544 <__aeabi_i2d>
 800fe96:	4602      	mov	r2, r0
 800fe98:	460b      	mov	r3, r1
 800fe9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe9e:	f7f0 fa03 	bl	80002a8 <__aeabi_dsub>
 800fea2:	3530      	adds	r5, #48	@ 0x30
 800fea4:	4602      	mov	r2, r0
 800fea6:	460b      	mov	r3, r1
 800fea8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800feac:	f806 5b01 	strb.w	r5, [r6], #1
 800feb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800feb4:	f7f0 fe22 	bl	8000afc <__aeabi_dcmplt>
 800feb8:	2800      	cmp	r0, #0
 800feba:	d172      	bne.n	800ffa2 <_dtoa_r+0x622>
 800febc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fec0:	4911      	ldr	r1, [pc, #68]	@ (800ff08 <_dtoa_r+0x588>)
 800fec2:	2000      	movs	r0, #0
 800fec4:	f7f0 f9f0 	bl	80002a8 <__aeabi_dsub>
 800fec8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fecc:	f7f0 fe16 	bl	8000afc <__aeabi_dcmplt>
 800fed0:	2800      	cmp	r0, #0
 800fed2:	f040 80b4 	bne.w	801003e <_dtoa_r+0x6be>
 800fed6:	42a6      	cmp	r6, r4
 800fed8:	f43f af70 	beq.w	800fdbc <_dtoa_r+0x43c>
 800fedc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fee0:	4b0a      	ldr	r3, [pc, #40]	@ (800ff0c <_dtoa_r+0x58c>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	f7f0 fb98 	bl	8000618 <__aeabi_dmul>
 800fee8:	4b08      	ldr	r3, [pc, #32]	@ (800ff0c <_dtoa_r+0x58c>)
 800feea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800feee:	2200      	movs	r2, #0
 800fef0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fef4:	f7f0 fb90 	bl	8000618 <__aeabi_dmul>
 800fef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fefc:	e7c4      	b.n	800fe88 <_dtoa_r+0x508>
 800fefe:	bf00      	nop
 800ff00:	08017f50 	.word	0x08017f50
 800ff04:	08017f28 	.word	0x08017f28
 800ff08:	3ff00000 	.word	0x3ff00000
 800ff0c:	40240000 	.word	0x40240000
 800ff10:	401c0000 	.word	0x401c0000
 800ff14:	40140000 	.word	0x40140000
 800ff18:	3fe00000 	.word	0x3fe00000
 800ff1c:	4631      	mov	r1, r6
 800ff1e:	4628      	mov	r0, r5
 800ff20:	f7f0 fb7a 	bl	8000618 <__aeabi_dmul>
 800ff24:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ff28:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ff2a:	4656      	mov	r6, sl
 800ff2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff30:	f7f0 fe22 	bl	8000b78 <__aeabi_d2iz>
 800ff34:	4605      	mov	r5, r0
 800ff36:	f7f0 fb05 	bl	8000544 <__aeabi_i2d>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff42:	f7f0 f9b1 	bl	80002a8 <__aeabi_dsub>
 800ff46:	3530      	adds	r5, #48	@ 0x30
 800ff48:	f806 5b01 	strb.w	r5, [r6], #1
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	460b      	mov	r3, r1
 800ff50:	42a6      	cmp	r6, r4
 800ff52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff56:	f04f 0200 	mov.w	r2, #0
 800ff5a:	d124      	bne.n	800ffa6 <_dtoa_r+0x626>
 800ff5c:	4baf      	ldr	r3, [pc, #700]	@ (801021c <_dtoa_r+0x89c>)
 800ff5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ff62:	f7f0 f9a3 	bl	80002ac <__adddf3>
 800ff66:	4602      	mov	r2, r0
 800ff68:	460b      	mov	r3, r1
 800ff6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff6e:	f7f0 fde3 	bl	8000b38 <__aeabi_dcmpgt>
 800ff72:	2800      	cmp	r0, #0
 800ff74:	d163      	bne.n	801003e <_dtoa_r+0x6be>
 800ff76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ff7a:	49a8      	ldr	r1, [pc, #672]	@ (801021c <_dtoa_r+0x89c>)
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	f7f0 f993 	bl	80002a8 <__aeabi_dsub>
 800ff82:	4602      	mov	r2, r0
 800ff84:	460b      	mov	r3, r1
 800ff86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff8a:	f7f0 fdb7 	bl	8000afc <__aeabi_dcmplt>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	f43f af14 	beq.w	800fdbc <_dtoa_r+0x43c>
 800ff94:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ff96:	1e73      	subs	r3, r6, #1
 800ff98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ff9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ff9e:	2b30      	cmp	r3, #48	@ 0x30
 800ffa0:	d0f8      	beq.n	800ff94 <_dtoa_r+0x614>
 800ffa2:	4647      	mov	r7, r8
 800ffa4:	e03b      	b.n	801001e <_dtoa_r+0x69e>
 800ffa6:	4b9e      	ldr	r3, [pc, #632]	@ (8010220 <_dtoa_r+0x8a0>)
 800ffa8:	f7f0 fb36 	bl	8000618 <__aeabi_dmul>
 800ffac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffb0:	e7bc      	b.n	800ff2c <_dtoa_r+0x5ac>
 800ffb2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ffb6:	4656      	mov	r6, sl
 800ffb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	4629      	mov	r1, r5
 800ffc0:	f7f0 fc54 	bl	800086c <__aeabi_ddiv>
 800ffc4:	f7f0 fdd8 	bl	8000b78 <__aeabi_d2iz>
 800ffc8:	4680      	mov	r8, r0
 800ffca:	f7f0 fabb 	bl	8000544 <__aeabi_i2d>
 800ffce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffd2:	f7f0 fb21 	bl	8000618 <__aeabi_dmul>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	460b      	mov	r3, r1
 800ffda:	4620      	mov	r0, r4
 800ffdc:	4629      	mov	r1, r5
 800ffde:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ffe2:	f7f0 f961 	bl	80002a8 <__aeabi_dsub>
 800ffe6:	f806 4b01 	strb.w	r4, [r6], #1
 800ffea:	9d03      	ldr	r5, [sp, #12]
 800ffec:	eba6 040a 	sub.w	r4, r6, sl
 800fff0:	42a5      	cmp	r5, r4
 800fff2:	4602      	mov	r2, r0
 800fff4:	460b      	mov	r3, r1
 800fff6:	d133      	bne.n	8010060 <_dtoa_r+0x6e0>
 800fff8:	f7f0 f958 	bl	80002ac <__adddf3>
 800fffc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010000:	4604      	mov	r4, r0
 8010002:	460d      	mov	r5, r1
 8010004:	f7f0 fd98 	bl	8000b38 <__aeabi_dcmpgt>
 8010008:	b9c0      	cbnz	r0, 801003c <_dtoa_r+0x6bc>
 801000a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801000e:	4620      	mov	r0, r4
 8010010:	4629      	mov	r1, r5
 8010012:	f7f0 fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 8010016:	b110      	cbz	r0, 801001e <_dtoa_r+0x69e>
 8010018:	f018 0f01 	tst.w	r8, #1
 801001c:	d10e      	bne.n	801003c <_dtoa_r+0x6bc>
 801001e:	9902      	ldr	r1, [sp, #8]
 8010020:	4648      	mov	r0, r9
 8010022:	f000 ff09 	bl	8010e38 <_Bfree>
 8010026:	2300      	movs	r3, #0
 8010028:	7033      	strb	r3, [r6, #0]
 801002a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801002c:	3701      	adds	r7, #1
 801002e:	601f      	str	r7, [r3, #0]
 8010030:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010032:	2b00      	cmp	r3, #0
 8010034:	f000 824b 	beq.w	80104ce <_dtoa_r+0xb4e>
 8010038:	601e      	str	r6, [r3, #0]
 801003a:	e248      	b.n	80104ce <_dtoa_r+0xb4e>
 801003c:	46b8      	mov	r8, r7
 801003e:	4633      	mov	r3, r6
 8010040:	461e      	mov	r6, r3
 8010042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010046:	2a39      	cmp	r2, #57	@ 0x39
 8010048:	d106      	bne.n	8010058 <_dtoa_r+0x6d8>
 801004a:	459a      	cmp	sl, r3
 801004c:	d1f8      	bne.n	8010040 <_dtoa_r+0x6c0>
 801004e:	2230      	movs	r2, #48	@ 0x30
 8010050:	f108 0801 	add.w	r8, r8, #1
 8010054:	f88a 2000 	strb.w	r2, [sl]
 8010058:	781a      	ldrb	r2, [r3, #0]
 801005a:	3201      	adds	r2, #1
 801005c:	701a      	strb	r2, [r3, #0]
 801005e:	e7a0      	b.n	800ffa2 <_dtoa_r+0x622>
 8010060:	4b6f      	ldr	r3, [pc, #444]	@ (8010220 <_dtoa_r+0x8a0>)
 8010062:	2200      	movs	r2, #0
 8010064:	f7f0 fad8 	bl	8000618 <__aeabi_dmul>
 8010068:	2200      	movs	r2, #0
 801006a:	2300      	movs	r3, #0
 801006c:	4604      	mov	r4, r0
 801006e:	460d      	mov	r5, r1
 8010070:	f7f0 fd3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010074:	2800      	cmp	r0, #0
 8010076:	d09f      	beq.n	800ffb8 <_dtoa_r+0x638>
 8010078:	e7d1      	b.n	801001e <_dtoa_r+0x69e>
 801007a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801007c:	2a00      	cmp	r2, #0
 801007e:	f000 80ea 	beq.w	8010256 <_dtoa_r+0x8d6>
 8010082:	9a07      	ldr	r2, [sp, #28]
 8010084:	2a01      	cmp	r2, #1
 8010086:	f300 80cd 	bgt.w	8010224 <_dtoa_r+0x8a4>
 801008a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801008c:	2a00      	cmp	r2, #0
 801008e:	f000 80c1 	beq.w	8010214 <_dtoa_r+0x894>
 8010092:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010096:	9c08      	ldr	r4, [sp, #32]
 8010098:	9e00      	ldr	r6, [sp, #0]
 801009a:	9a00      	ldr	r2, [sp, #0]
 801009c:	441a      	add	r2, r3
 801009e:	9200      	str	r2, [sp, #0]
 80100a0:	9a06      	ldr	r2, [sp, #24]
 80100a2:	2101      	movs	r1, #1
 80100a4:	441a      	add	r2, r3
 80100a6:	4648      	mov	r0, r9
 80100a8:	9206      	str	r2, [sp, #24]
 80100aa:	f000 ffc3 	bl	8011034 <__i2b>
 80100ae:	4605      	mov	r5, r0
 80100b0:	b166      	cbz	r6, 80100cc <_dtoa_r+0x74c>
 80100b2:	9b06      	ldr	r3, [sp, #24]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	dd09      	ble.n	80100cc <_dtoa_r+0x74c>
 80100b8:	42b3      	cmp	r3, r6
 80100ba:	9a00      	ldr	r2, [sp, #0]
 80100bc:	bfa8      	it	ge
 80100be:	4633      	movge	r3, r6
 80100c0:	1ad2      	subs	r2, r2, r3
 80100c2:	9200      	str	r2, [sp, #0]
 80100c4:	9a06      	ldr	r2, [sp, #24]
 80100c6:	1af6      	subs	r6, r6, r3
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	9306      	str	r3, [sp, #24]
 80100cc:	9b08      	ldr	r3, [sp, #32]
 80100ce:	b30b      	cbz	r3, 8010114 <_dtoa_r+0x794>
 80100d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f000 80c6 	beq.w	8010264 <_dtoa_r+0x8e4>
 80100d8:	2c00      	cmp	r4, #0
 80100da:	f000 80c0 	beq.w	801025e <_dtoa_r+0x8de>
 80100de:	4629      	mov	r1, r5
 80100e0:	4622      	mov	r2, r4
 80100e2:	4648      	mov	r0, r9
 80100e4:	f001 f85e 	bl	80111a4 <__pow5mult>
 80100e8:	9a02      	ldr	r2, [sp, #8]
 80100ea:	4601      	mov	r1, r0
 80100ec:	4605      	mov	r5, r0
 80100ee:	4648      	mov	r0, r9
 80100f0:	f000 ffb6 	bl	8011060 <__multiply>
 80100f4:	9902      	ldr	r1, [sp, #8]
 80100f6:	4680      	mov	r8, r0
 80100f8:	4648      	mov	r0, r9
 80100fa:	f000 fe9d 	bl	8010e38 <_Bfree>
 80100fe:	9b08      	ldr	r3, [sp, #32]
 8010100:	1b1b      	subs	r3, r3, r4
 8010102:	9308      	str	r3, [sp, #32]
 8010104:	f000 80b1 	beq.w	801026a <_dtoa_r+0x8ea>
 8010108:	9a08      	ldr	r2, [sp, #32]
 801010a:	4641      	mov	r1, r8
 801010c:	4648      	mov	r0, r9
 801010e:	f001 f849 	bl	80111a4 <__pow5mult>
 8010112:	9002      	str	r0, [sp, #8]
 8010114:	2101      	movs	r1, #1
 8010116:	4648      	mov	r0, r9
 8010118:	f000 ff8c 	bl	8011034 <__i2b>
 801011c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801011e:	4604      	mov	r4, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	f000 81d8 	beq.w	80104d6 <_dtoa_r+0xb56>
 8010126:	461a      	mov	r2, r3
 8010128:	4601      	mov	r1, r0
 801012a:	4648      	mov	r0, r9
 801012c:	f001 f83a 	bl	80111a4 <__pow5mult>
 8010130:	9b07      	ldr	r3, [sp, #28]
 8010132:	2b01      	cmp	r3, #1
 8010134:	4604      	mov	r4, r0
 8010136:	f300 809f 	bgt.w	8010278 <_dtoa_r+0x8f8>
 801013a:	9b04      	ldr	r3, [sp, #16]
 801013c:	2b00      	cmp	r3, #0
 801013e:	f040 8097 	bne.w	8010270 <_dtoa_r+0x8f0>
 8010142:	9b05      	ldr	r3, [sp, #20]
 8010144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010148:	2b00      	cmp	r3, #0
 801014a:	f040 8093 	bne.w	8010274 <_dtoa_r+0x8f4>
 801014e:	9b05      	ldr	r3, [sp, #20]
 8010150:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010154:	0d1b      	lsrs	r3, r3, #20
 8010156:	051b      	lsls	r3, r3, #20
 8010158:	b133      	cbz	r3, 8010168 <_dtoa_r+0x7e8>
 801015a:	9b00      	ldr	r3, [sp, #0]
 801015c:	3301      	adds	r3, #1
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	9b06      	ldr	r3, [sp, #24]
 8010162:	3301      	adds	r3, #1
 8010164:	9306      	str	r3, [sp, #24]
 8010166:	2301      	movs	r3, #1
 8010168:	9308      	str	r3, [sp, #32]
 801016a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801016c:	2b00      	cmp	r3, #0
 801016e:	f000 81b8 	beq.w	80104e2 <_dtoa_r+0xb62>
 8010172:	6923      	ldr	r3, [r4, #16]
 8010174:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010178:	6918      	ldr	r0, [r3, #16]
 801017a:	f000 ff0f 	bl	8010f9c <__hi0bits>
 801017e:	f1c0 0020 	rsb	r0, r0, #32
 8010182:	9b06      	ldr	r3, [sp, #24]
 8010184:	4418      	add	r0, r3
 8010186:	f010 001f 	ands.w	r0, r0, #31
 801018a:	f000 8082 	beq.w	8010292 <_dtoa_r+0x912>
 801018e:	f1c0 0320 	rsb	r3, r0, #32
 8010192:	2b04      	cmp	r3, #4
 8010194:	dd73      	ble.n	801027e <_dtoa_r+0x8fe>
 8010196:	9b00      	ldr	r3, [sp, #0]
 8010198:	f1c0 001c 	rsb	r0, r0, #28
 801019c:	4403      	add	r3, r0
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	9b06      	ldr	r3, [sp, #24]
 80101a2:	4403      	add	r3, r0
 80101a4:	4406      	add	r6, r0
 80101a6:	9306      	str	r3, [sp, #24]
 80101a8:	9b00      	ldr	r3, [sp, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	dd05      	ble.n	80101ba <_dtoa_r+0x83a>
 80101ae:	9902      	ldr	r1, [sp, #8]
 80101b0:	461a      	mov	r2, r3
 80101b2:	4648      	mov	r0, r9
 80101b4:	f001 f850 	bl	8011258 <__lshift>
 80101b8:	9002      	str	r0, [sp, #8]
 80101ba:	9b06      	ldr	r3, [sp, #24]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	dd05      	ble.n	80101cc <_dtoa_r+0x84c>
 80101c0:	4621      	mov	r1, r4
 80101c2:	461a      	mov	r2, r3
 80101c4:	4648      	mov	r0, r9
 80101c6:	f001 f847 	bl	8011258 <__lshift>
 80101ca:	4604      	mov	r4, r0
 80101cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d061      	beq.n	8010296 <_dtoa_r+0x916>
 80101d2:	9802      	ldr	r0, [sp, #8]
 80101d4:	4621      	mov	r1, r4
 80101d6:	f001 f8ab 	bl	8011330 <__mcmp>
 80101da:	2800      	cmp	r0, #0
 80101dc:	da5b      	bge.n	8010296 <_dtoa_r+0x916>
 80101de:	2300      	movs	r3, #0
 80101e0:	9902      	ldr	r1, [sp, #8]
 80101e2:	220a      	movs	r2, #10
 80101e4:	4648      	mov	r0, r9
 80101e6:	f000 fe49 	bl	8010e7c <__multadd>
 80101ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101ec:	9002      	str	r0, [sp, #8]
 80101ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	f000 8177 	beq.w	80104e6 <_dtoa_r+0xb66>
 80101f8:	4629      	mov	r1, r5
 80101fa:	2300      	movs	r3, #0
 80101fc:	220a      	movs	r2, #10
 80101fe:	4648      	mov	r0, r9
 8010200:	f000 fe3c 	bl	8010e7c <__multadd>
 8010204:	f1bb 0f00 	cmp.w	fp, #0
 8010208:	4605      	mov	r5, r0
 801020a:	dc6f      	bgt.n	80102ec <_dtoa_r+0x96c>
 801020c:	9b07      	ldr	r3, [sp, #28]
 801020e:	2b02      	cmp	r3, #2
 8010210:	dc49      	bgt.n	80102a6 <_dtoa_r+0x926>
 8010212:	e06b      	b.n	80102ec <_dtoa_r+0x96c>
 8010214:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010216:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801021a:	e73c      	b.n	8010096 <_dtoa_r+0x716>
 801021c:	3fe00000 	.word	0x3fe00000
 8010220:	40240000 	.word	0x40240000
 8010224:	9b03      	ldr	r3, [sp, #12]
 8010226:	1e5c      	subs	r4, r3, #1
 8010228:	9b08      	ldr	r3, [sp, #32]
 801022a:	42a3      	cmp	r3, r4
 801022c:	db09      	blt.n	8010242 <_dtoa_r+0x8c2>
 801022e:	1b1c      	subs	r4, r3, r4
 8010230:	9b03      	ldr	r3, [sp, #12]
 8010232:	2b00      	cmp	r3, #0
 8010234:	f6bf af30 	bge.w	8010098 <_dtoa_r+0x718>
 8010238:	9b00      	ldr	r3, [sp, #0]
 801023a:	9a03      	ldr	r2, [sp, #12]
 801023c:	1a9e      	subs	r6, r3, r2
 801023e:	2300      	movs	r3, #0
 8010240:	e72b      	b.n	801009a <_dtoa_r+0x71a>
 8010242:	9b08      	ldr	r3, [sp, #32]
 8010244:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010246:	9408      	str	r4, [sp, #32]
 8010248:	1ae3      	subs	r3, r4, r3
 801024a:	441a      	add	r2, r3
 801024c:	9e00      	ldr	r6, [sp, #0]
 801024e:	9b03      	ldr	r3, [sp, #12]
 8010250:	920d      	str	r2, [sp, #52]	@ 0x34
 8010252:	2400      	movs	r4, #0
 8010254:	e721      	b.n	801009a <_dtoa_r+0x71a>
 8010256:	9c08      	ldr	r4, [sp, #32]
 8010258:	9e00      	ldr	r6, [sp, #0]
 801025a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801025c:	e728      	b.n	80100b0 <_dtoa_r+0x730>
 801025e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010262:	e751      	b.n	8010108 <_dtoa_r+0x788>
 8010264:	9a08      	ldr	r2, [sp, #32]
 8010266:	9902      	ldr	r1, [sp, #8]
 8010268:	e750      	b.n	801010c <_dtoa_r+0x78c>
 801026a:	f8cd 8008 	str.w	r8, [sp, #8]
 801026e:	e751      	b.n	8010114 <_dtoa_r+0x794>
 8010270:	2300      	movs	r3, #0
 8010272:	e779      	b.n	8010168 <_dtoa_r+0x7e8>
 8010274:	9b04      	ldr	r3, [sp, #16]
 8010276:	e777      	b.n	8010168 <_dtoa_r+0x7e8>
 8010278:	2300      	movs	r3, #0
 801027a:	9308      	str	r3, [sp, #32]
 801027c:	e779      	b.n	8010172 <_dtoa_r+0x7f2>
 801027e:	d093      	beq.n	80101a8 <_dtoa_r+0x828>
 8010280:	9a00      	ldr	r2, [sp, #0]
 8010282:	331c      	adds	r3, #28
 8010284:	441a      	add	r2, r3
 8010286:	9200      	str	r2, [sp, #0]
 8010288:	9a06      	ldr	r2, [sp, #24]
 801028a:	441a      	add	r2, r3
 801028c:	441e      	add	r6, r3
 801028e:	9206      	str	r2, [sp, #24]
 8010290:	e78a      	b.n	80101a8 <_dtoa_r+0x828>
 8010292:	4603      	mov	r3, r0
 8010294:	e7f4      	b.n	8010280 <_dtoa_r+0x900>
 8010296:	9b03      	ldr	r3, [sp, #12]
 8010298:	2b00      	cmp	r3, #0
 801029a:	46b8      	mov	r8, r7
 801029c:	dc20      	bgt.n	80102e0 <_dtoa_r+0x960>
 801029e:	469b      	mov	fp, r3
 80102a0:	9b07      	ldr	r3, [sp, #28]
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	dd1e      	ble.n	80102e4 <_dtoa_r+0x964>
 80102a6:	f1bb 0f00 	cmp.w	fp, #0
 80102aa:	f47f adb1 	bne.w	800fe10 <_dtoa_r+0x490>
 80102ae:	4621      	mov	r1, r4
 80102b0:	465b      	mov	r3, fp
 80102b2:	2205      	movs	r2, #5
 80102b4:	4648      	mov	r0, r9
 80102b6:	f000 fde1 	bl	8010e7c <__multadd>
 80102ba:	4601      	mov	r1, r0
 80102bc:	4604      	mov	r4, r0
 80102be:	9802      	ldr	r0, [sp, #8]
 80102c0:	f001 f836 	bl	8011330 <__mcmp>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	f77f ada3 	ble.w	800fe10 <_dtoa_r+0x490>
 80102ca:	4656      	mov	r6, sl
 80102cc:	2331      	movs	r3, #49	@ 0x31
 80102ce:	f806 3b01 	strb.w	r3, [r6], #1
 80102d2:	f108 0801 	add.w	r8, r8, #1
 80102d6:	e59f      	b.n	800fe18 <_dtoa_r+0x498>
 80102d8:	9c03      	ldr	r4, [sp, #12]
 80102da:	46b8      	mov	r8, r7
 80102dc:	4625      	mov	r5, r4
 80102de:	e7f4      	b.n	80102ca <_dtoa_r+0x94a>
 80102e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80102e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f000 8101 	beq.w	80104ee <_dtoa_r+0xb6e>
 80102ec:	2e00      	cmp	r6, #0
 80102ee:	dd05      	ble.n	80102fc <_dtoa_r+0x97c>
 80102f0:	4629      	mov	r1, r5
 80102f2:	4632      	mov	r2, r6
 80102f4:	4648      	mov	r0, r9
 80102f6:	f000 ffaf 	bl	8011258 <__lshift>
 80102fa:	4605      	mov	r5, r0
 80102fc:	9b08      	ldr	r3, [sp, #32]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d05c      	beq.n	80103bc <_dtoa_r+0xa3c>
 8010302:	6869      	ldr	r1, [r5, #4]
 8010304:	4648      	mov	r0, r9
 8010306:	f000 fd57 	bl	8010db8 <_Balloc>
 801030a:	4606      	mov	r6, r0
 801030c:	b928      	cbnz	r0, 801031a <_dtoa_r+0x99a>
 801030e:	4b82      	ldr	r3, [pc, #520]	@ (8010518 <_dtoa_r+0xb98>)
 8010310:	4602      	mov	r2, r0
 8010312:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010316:	f7ff bb4a 	b.w	800f9ae <_dtoa_r+0x2e>
 801031a:	692a      	ldr	r2, [r5, #16]
 801031c:	3202      	adds	r2, #2
 801031e:	0092      	lsls	r2, r2, #2
 8010320:	f105 010c 	add.w	r1, r5, #12
 8010324:	300c      	adds	r0, #12
 8010326:	f7ff fa66 	bl	800f7f6 <memcpy>
 801032a:	2201      	movs	r2, #1
 801032c:	4631      	mov	r1, r6
 801032e:	4648      	mov	r0, r9
 8010330:	f000 ff92 	bl	8011258 <__lshift>
 8010334:	f10a 0301 	add.w	r3, sl, #1
 8010338:	9300      	str	r3, [sp, #0]
 801033a:	eb0a 030b 	add.w	r3, sl, fp
 801033e:	9308      	str	r3, [sp, #32]
 8010340:	9b04      	ldr	r3, [sp, #16]
 8010342:	f003 0301 	and.w	r3, r3, #1
 8010346:	462f      	mov	r7, r5
 8010348:	9306      	str	r3, [sp, #24]
 801034a:	4605      	mov	r5, r0
 801034c:	9b00      	ldr	r3, [sp, #0]
 801034e:	9802      	ldr	r0, [sp, #8]
 8010350:	4621      	mov	r1, r4
 8010352:	f103 3bff 	add.w	fp, r3, #4294967295
 8010356:	f7ff fa8b 	bl	800f870 <quorem>
 801035a:	4603      	mov	r3, r0
 801035c:	3330      	adds	r3, #48	@ 0x30
 801035e:	9003      	str	r0, [sp, #12]
 8010360:	4639      	mov	r1, r7
 8010362:	9802      	ldr	r0, [sp, #8]
 8010364:	9309      	str	r3, [sp, #36]	@ 0x24
 8010366:	f000 ffe3 	bl	8011330 <__mcmp>
 801036a:	462a      	mov	r2, r5
 801036c:	9004      	str	r0, [sp, #16]
 801036e:	4621      	mov	r1, r4
 8010370:	4648      	mov	r0, r9
 8010372:	f000 fff9 	bl	8011368 <__mdiff>
 8010376:	68c2      	ldr	r2, [r0, #12]
 8010378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801037a:	4606      	mov	r6, r0
 801037c:	bb02      	cbnz	r2, 80103c0 <_dtoa_r+0xa40>
 801037e:	4601      	mov	r1, r0
 8010380:	9802      	ldr	r0, [sp, #8]
 8010382:	f000 ffd5 	bl	8011330 <__mcmp>
 8010386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010388:	4602      	mov	r2, r0
 801038a:	4631      	mov	r1, r6
 801038c:	4648      	mov	r0, r9
 801038e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010390:	9309      	str	r3, [sp, #36]	@ 0x24
 8010392:	f000 fd51 	bl	8010e38 <_Bfree>
 8010396:	9b07      	ldr	r3, [sp, #28]
 8010398:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801039a:	9e00      	ldr	r6, [sp, #0]
 801039c:	ea42 0103 	orr.w	r1, r2, r3
 80103a0:	9b06      	ldr	r3, [sp, #24]
 80103a2:	4319      	orrs	r1, r3
 80103a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103a6:	d10d      	bne.n	80103c4 <_dtoa_r+0xa44>
 80103a8:	2b39      	cmp	r3, #57	@ 0x39
 80103aa:	d027      	beq.n	80103fc <_dtoa_r+0xa7c>
 80103ac:	9a04      	ldr	r2, [sp, #16]
 80103ae:	2a00      	cmp	r2, #0
 80103b0:	dd01      	ble.n	80103b6 <_dtoa_r+0xa36>
 80103b2:	9b03      	ldr	r3, [sp, #12]
 80103b4:	3331      	adds	r3, #49	@ 0x31
 80103b6:	f88b 3000 	strb.w	r3, [fp]
 80103ba:	e52e      	b.n	800fe1a <_dtoa_r+0x49a>
 80103bc:	4628      	mov	r0, r5
 80103be:	e7b9      	b.n	8010334 <_dtoa_r+0x9b4>
 80103c0:	2201      	movs	r2, #1
 80103c2:	e7e2      	b.n	801038a <_dtoa_r+0xa0a>
 80103c4:	9904      	ldr	r1, [sp, #16]
 80103c6:	2900      	cmp	r1, #0
 80103c8:	db04      	blt.n	80103d4 <_dtoa_r+0xa54>
 80103ca:	9807      	ldr	r0, [sp, #28]
 80103cc:	4301      	orrs	r1, r0
 80103ce:	9806      	ldr	r0, [sp, #24]
 80103d0:	4301      	orrs	r1, r0
 80103d2:	d120      	bne.n	8010416 <_dtoa_r+0xa96>
 80103d4:	2a00      	cmp	r2, #0
 80103d6:	ddee      	ble.n	80103b6 <_dtoa_r+0xa36>
 80103d8:	9902      	ldr	r1, [sp, #8]
 80103da:	9300      	str	r3, [sp, #0]
 80103dc:	2201      	movs	r2, #1
 80103de:	4648      	mov	r0, r9
 80103e0:	f000 ff3a 	bl	8011258 <__lshift>
 80103e4:	4621      	mov	r1, r4
 80103e6:	9002      	str	r0, [sp, #8]
 80103e8:	f000 ffa2 	bl	8011330 <__mcmp>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	9b00      	ldr	r3, [sp, #0]
 80103f0:	dc02      	bgt.n	80103f8 <_dtoa_r+0xa78>
 80103f2:	d1e0      	bne.n	80103b6 <_dtoa_r+0xa36>
 80103f4:	07da      	lsls	r2, r3, #31
 80103f6:	d5de      	bpl.n	80103b6 <_dtoa_r+0xa36>
 80103f8:	2b39      	cmp	r3, #57	@ 0x39
 80103fa:	d1da      	bne.n	80103b2 <_dtoa_r+0xa32>
 80103fc:	2339      	movs	r3, #57	@ 0x39
 80103fe:	f88b 3000 	strb.w	r3, [fp]
 8010402:	4633      	mov	r3, r6
 8010404:	461e      	mov	r6, r3
 8010406:	3b01      	subs	r3, #1
 8010408:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801040c:	2a39      	cmp	r2, #57	@ 0x39
 801040e:	d04e      	beq.n	80104ae <_dtoa_r+0xb2e>
 8010410:	3201      	adds	r2, #1
 8010412:	701a      	strb	r2, [r3, #0]
 8010414:	e501      	b.n	800fe1a <_dtoa_r+0x49a>
 8010416:	2a00      	cmp	r2, #0
 8010418:	dd03      	ble.n	8010422 <_dtoa_r+0xaa2>
 801041a:	2b39      	cmp	r3, #57	@ 0x39
 801041c:	d0ee      	beq.n	80103fc <_dtoa_r+0xa7c>
 801041e:	3301      	adds	r3, #1
 8010420:	e7c9      	b.n	80103b6 <_dtoa_r+0xa36>
 8010422:	9a00      	ldr	r2, [sp, #0]
 8010424:	9908      	ldr	r1, [sp, #32]
 8010426:	f802 3c01 	strb.w	r3, [r2, #-1]
 801042a:	428a      	cmp	r2, r1
 801042c:	d028      	beq.n	8010480 <_dtoa_r+0xb00>
 801042e:	9902      	ldr	r1, [sp, #8]
 8010430:	2300      	movs	r3, #0
 8010432:	220a      	movs	r2, #10
 8010434:	4648      	mov	r0, r9
 8010436:	f000 fd21 	bl	8010e7c <__multadd>
 801043a:	42af      	cmp	r7, r5
 801043c:	9002      	str	r0, [sp, #8]
 801043e:	f04f 0300 	mov.w	r3, #0
 8010442:	f04f 020a 	mov.w	r2, #10
 8010446:	4639      	mov	r1, r7
 8010448:	4648      	mov	r0, r9
 801044a:	d107      	bne.n	801045c <_dtoa_r+0xadc>
 801044c:	f000 fd16 	bl	8010e7c <__multadd>
 8010450:	4607      	mov	r7, r0
 8010452:	4605      	mov	r5, r0
 8010454:	9b00      	ldr	r3, [sp, #0]
 8010456:	3301      	adds	r3, #1
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	e777      	b.n	801034c <_dtoa_r+0x9cc>
 801045c:	f000 fd0e 	bl	8010e7c <__multadd>
 8010460:	4629      	mov	r1, r5
 8010462:	4607      	mov	r7, r0
 8010464:	2300      	movs	r3, #0
 8010466:	220a      	movs	r2, #10
 8010468:	4648      	mov	r0, r9
 801046a:	f000 fd07 	bl	8010e7c <__multadd>
 801046e:	4605      	mov	r5, r0
 8010470:	e7f0      	b.n	8010454 <_dtoa_r+0xad4>
 8010472:	f1bb 0f00 	cmp.w	fp, #0
 8010476:	bfcc      	ite	gt
 8010478:	465e      	movgt	r6, fp
 801047a:	2601      	movle	r6, #1
 801047c:	4456      	add	r6, sl
 801047e:	2700      	movs	r7, #0
 8010480:	9902      	ldr	r1, [sp, #8]
 8010482:	9300      	str	r3, [sp, #0]
 8010484:	2201      	movs	r2, #1
 8010486:	4648      	mov	r0, r9
 8010488:	f000 fee6 	bl	8011258 <__lshift>
 801048c:	4621      	mov	r1, r4
 801048e:	9002      	str	r0, [sp, #8]
 8010490:	f000 ff4e 	bl	8011330 <__mcmp>
 8010494:	2800      	cmp	r0, #0
 8010496:	dcb4      	bgt.n	8010402 <_dtoa_r+0xa82>
 8010498:	d102      	bne.n	80104a0 <_dtoa_r+0xb20>
 801049a:	9b00      	ldr	r3, [sp, #0]
 801049c:	07db      	lsls	r3, r3, #31
 801049e:	d4b0      	bmi.n	8010402 <_dtoa_r+0xa82>
 80104a0:	4633      	mov	r3, r6
 80104a2:	461e      	mov	r6, r3
 80104a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104a8:	2a30      	cmp	r2, #48	@ 0x30
 80104aa:	d0fa      	beq.n	80104a2 <_dtoa_r+0xb22>
 80104ac:	e4b5      	b.n	800fe1a <_dtoa_r+0x49a>
 80104ae:	459a      	cmp	sl, r3
 80104b0:	d1a8      	bne.n	8010404 <_dtoa_r+0xa84>
 80104b2:	2331      	movs	r3, #49	@ 0x31
 80104b4:	f108 0801 	add.w	r8, r8, #1
 80104b8:	f88a 3000 	strb.w	r3, [sl]
 80104bc:	e4ad      	b.n	800fe1a <_dtoa_r+0x49a>
 80104be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80104c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801051c <_dtoa_r+0xb9c>
 80104c4:	b11b      	cbz	r3, 80104ce <_dtoa_r+0xb4e>
 80104c6:	f10a 0308 	add.w	r3, sl, #8
 80104ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80104cc:	6013      	str	r3, [r2, #0]
 80104ce:	4650      	mov	r0, sl
 80104d0:	b017      	add	sp, #92	@ 0x5c
 80104d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104d6:	9b07      	ldr	r3, [sp, #28]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	f77f ae2e 	ble.w	801013a <_dtoa_r+0x7ba>
 80104de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80104e0:	9308      	str	r3, [sp, #32]
 80104e2:	2001      	movs	r0, #1
 80104e4:	e64d      	b.n	8010182 <_dtoa_r+0x802>
 80104e6:	f1bb 0f00 	cmp.w	fp, #0
 80104ea:	f77f aed9 	ble.w	80102a0 <_dtoa_r+0x920>
 80104ee:	4656      	mov	r6, sl
 80104f0:	9802      	ldr	r0, [sp, #8]
 80104f2:	4621      	mov	r1, r4
 80104f4:	f7ff f9bc 	bl	800f870 <quorem>
 80104f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80104fc:	f806 3b01 	strb.w	r3, [r6], #1
 8010500:	eba6 020a 	sub.w	r2, r6, sl
 8010504:	4593      	cmp	fp, r2
 8010506:	ddb4      	ble.n	8010472 <_dtoa_r+0xaf2>
 8010508:	9902      	ldr	r1, [sp, #8]
 801050a:	2300      	movs	r3, #0
 801050c:	220a      	movs	r2, #10
 801050e:	4648      	mov	r0, r9
 8010510:	f000 fcb4 	bl	8010e7c <__multadd>
 8010514:	9002      	str	r0, [sp, #8]
 8010516:	e7eb      	b.n	80104f0 <_dtoa_r+0xb70>
 8010518:	08017ccb 	.word	0x08017ccb
 801051c:	08017c66 	.word	0x08017c66

08010520 <_free_r>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	4605      	mov	r5, r0
 8010524:	2900      	cmp	r1, #0
 8010526:	d041      	beq.n	80105ac <_free_r+0x8c>
 8010528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801052c:	1f0c      	subs	r4, r1, #4
 801052e:	2b00      	cmp	r3, #0
 8010530:	bfb8      	it	lt
 8010532:	18e4      	addlt	r4, r4, r3
 8010534:	f000 fc34 	bl	8010da0 <__malloc_lock>
 8010538:	4a1d      	ldr	r2, [pc, #116]	@ (80105b0 <_free_r+0x90>)
 801053a:	6813      	ldr	r3, [r2, #0]
 801053c:	b933      	cbnz	r3, 801054c <_free_r+0x2c>
 801053e:	6063      	str	r3, [r4, #4]
 8010540:	6014      	str	r4, [r2, #0]
 8010542:	4628      	mov	r0, r5
 8010544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010548:	f000 bc30 	b.w	8010dac <__malloc_unlock>
 801054c:	42a3      	cmp	r3, r4
 801054e:	d908      	bls.n	8010562 <_free_r+0x42>
 8010550:	6820      	ldr	r0, [r4, #0]
 8010552:	1821      	adds	r1, r4, r0
 8010554:	428b      	cmp	r3, r1
 8010556:	bf01      	itttt	eq
 8010558:	6819      	ldreq	r1, [r3, #0]
 801055a:	685b      	ldreq	r3, [r3, #4]
 801055c:	1809      	addeq	r1, r1, r0
 801055e:	6021      	streq	r1, [r4, #0]
 8010560:	e7ed      	b.n	801053e <_free_r+0x1e>
 8010562:	461a      	mov	r2, r3
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	b10b      	cbz	r3, 801056c <_free_r+0x4c>
 8010568:	42a3      	cmp	r3, r4
 801056a:	d9fa      	bls.n	8010562 <_free_r+0x42>
 801056c:	6811      	ldr	r1, [r2, #0]
 801056e:	1850      	adds	r0, r2, r1
 8010570:	42a0      	cmp	r0, r4
 8010572:	d10b      	bne.n	801058c <_free_r+0x6c>
 8010574:	6820      	ldr	r0, [r4, #0]
 8010576:	4401      	add	r1, r0
 8010578:	1850      	adds	r0, r2, r1
 801057a:	4283      	cmp	r3, r0
 801057c:	6011      	str	r1, [r2, #0]
 801057e:	d1e0      	bne.n	8010542 <_free_r+0x22>
 8010580:	6818      	ldr	r0, [r3, #0]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	6053      	str	r3, [r2, #4]
 8010586:	4408      	add	r0, r1
 8010588:	6010      	str	r0, [r2, #0]
 801058a:	e7da      	b.n	8010542 <_free_r+0x22>
 801058c:	d902      	bls.n	8010594 <_free_r+0x74>
 801058e:	230c      	movs	r3, #12
 8010590:	602b      	str	r3, [r5, #0]
 8010592:	e7d6      	b.n	8010542 <_free_r+0x22>
 8010594:	6820      	ldr	r0, [r4, #0]
 8010596:	1821      	adds	r1, r4, r0
 8010598:	428b      	cmp	r3, r1
 801059a:	bf04      	itt	eq
 801059c:	6819      	ldreq	r1, [r3, #0]
 801059e:	685b      	ldreq	r3, [r3, #4]
 80105a0:	6063      	str	r3, [r4, #4]
 80105a2:	bf04      	itt	eq
 80105a4:	1809      	addeq	r1, r1, r0
 80105a6:	6021      	streq	r1, [r4, #0]
 80105a8:	6054      	str	r4, [r2, #4]
 80105aa:	e7ca      	b.n	8010542 <_free_r+0x22>
 80105ac:	bd38      	pop	{r3, r4, r5, pc}
 80105ae:	bf00      	nop
 80105b0:	2001f130 	.word	0x2001f130

080105b4 <rshift>:
 80105b4:	6903      	ldr	r3, [r0, #16]
 80105b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80105ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80105c2:	f100 0414 	add.w	r4, r0, #20
 80105c6:	dd45      	ble.n	8010654 <rshift+0xa0>
 80105c8:	f011 011f 	ands.w	r1, r1, #31
 80105cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80105d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80105d4:	d10c      	bne.n	80105f0 <rshift+0x3c>
 80105d6:	f100 0710 	add.w	r7, r0, #16
 80105da:	4629      	mov	r1, r5
 80105dc:	42b1      	cmp	r1, r6
 80105de:	d334      	bcc.n	801064a <rshift+0x96>
 80105e0:	1a9b      	subs	r3, r3, r2
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	1eea      	subs	r2, r5, #3
 80105e6:	4296      	cmp	r6, r2
 80105e8:	bf38      	it	cc
 80105ea:	2300      	movcc	r3, #0
 80105ec:	4423      	add	r3, r4
 80105ee:	e015      	b.n	801061c <rshift+0x68>
 80105f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80105f4:	f1c1 0820 	rsb	r8, r1, #32
 80105f8:	40cf      	lsrs	r7, r1
 80105fa:	f105 0e04 	add.w	lr, r5, #4
 80105fe:	46a1      	mov	r9, r4
 8010600:	4576      	cmp	r6, lr
 8010602:	46f4      	mov	ip, lr
 8010604:	d815      	bhi.n	8010632 <rshift+0x7e>
 8010606:	1a9a      	subs	r2, r3, r2
 8010608:	0092      	lsls	r2, r2, #2
 801060a:	3a04      	subs	r2, #4
 801060c:	3501      	adds	r5, #1
 801060e:	42ae      	cmp	r6, r5
 8010610:	bf38      	it	cc
 8010612:	2200      	movcc	r2, #0
 8010614:	18a3      	adds	r3, r4, r2
 8010616:	50a7      	str	r7, [r4, r2]
 8010618:	b107      	cbz	r7, 801061c <rshift+0x68>
 801061a:	3304      	adds	r3, #4
 801061c:	1b1a      	subs	r2, r3, r4
 801061e:	42a3      	cmp	r3, r4
 8010620:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010624:	bf08      	it	eq
 8010626:	2300      	moveq	r3, #0
 8010628:	6102      	str	r2, [r0, #16]
 801062a:	bf08      	it	eq
 801062c:	6143      	streq	r3, [r0, #20]
 801062e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010632:	f8dc c000 	ldr.w	ip, [ip]
 8010636:	fa0c fc08 	lsl.w	ip, ip, r8
 801063a:	ea4c 0707 	orr.w	r7, ip, r7
 801063e:	f849 7b04 	str.w	r7, [r9], #4
 8010642:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010646:	40cf      	lsrs	r7, r1
 8010648:	e7da      	b.n	8010600 <rshift+0x4c>
 801064a:	f851 cb04 	ldr.w	ip, [r1], #4
 801064e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010652:	e7c3      	b.n	80105dc <rshift+0x28>
 8010654:	4623      	mov	r3, r4
 8010656:	e7e1      	b.n	801061c <rshift+0x68>

08010658 <__hexdig_fun>:
 8010658:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801065c:	2b09      	cmp	r3, #9
 801065e:	d802      	bhi.n	8010666 <__hexdig_fun+0xe>
 8010660:	3820      	subs	r0, #32
 8010662:	b2c0      	uxtb	r0, r0
 8010664:	4770      	bx	lr
 8010666:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801066a:	2b05      	cmp	r3, #5
 801066c:	d801      	bhi.n	8010672 <__hexdig_fun+0x1a>
 801066e:	3847      	subs	r0, #71	@ 0x47
 8010670:	e7f7      	b.n	8010662 <__hexdig_fun+0xa>
 8010672:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010676:	2b05      	cmp	r3, #5
 8010678:	d801      	bhi.n	801067e <__hexdig_fun+0x26>
 801067a:	3827      	subs	r0, #39	@ 0x27
 801067c:	e7f1      	b.n	8010662 <__hexdig_fun+0xa>
 801067e:	2000      	movs	r0, #0
 8010680:	4770      	bx	lr
	...

08010684 <__gethex>:
 8010684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010688:	b085      	sub	sp, #20
 801068a:	468a      	mov	sl, r1
 801068c:	9302      	str	r3, [sp, #8]
 801068e:	680b      	ldr	r3, [r1, #0]
 8010690:	9001      	str	r0, [sp, #4]
 8010692:	4690      	mov	r8, r2
 8010694:	1c9c      	adds	r4, r3, #2
 8010696:	46a1      	mov	r9, r4
 8010698:	f814 0b01 	ldrb.w	r0, [r4], #1
 801069c:	2830      	cmp	r0, #48	@ 0x30
 801069e:	d0fa      	beq.n	8010696 <__gethex+0x12>
 80106a0:	eba9 0303 	sub.w	r3, r9, r3
 80106a4:	f1a3 0b02 	sub.w	fp, r3, #2
 80106a8:	f7ff ffd6 	bl	8010658 <__hexdig_fun>
 80106ac:	4605      	mov	r5, r0
 80106ae:	2800      	cmp	r0, #0
 80106b0:	d168      	bne.n	8010784 <__gethex+0x100>
 80106b2:	49a0      	ldr	r1, [pc, #640]	@ (8010934 <__gethex+0x2b0>)
 80106b4:	2201      	movs	r2, #1
 80106b6:	4648      	mov	r0, r9
 80106b8:	f7fe ff8e 	bl	800f5d8 <strncmp>
 80106bc:	4607      	mov	r7, r0
 80106be:	2800      	cmp	r0, #0
 80106c0:	d167      	bne.n	8010792 <__gethex+0x10e>
 80106c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80106c6:	4626      	mov	r6, r4
 80106c8:	f7ff ffc6 	bl	8010658 <__hexdig_fun>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d062      	beq.n	8010796 <__gethex+0x112>
 80106d0:	4623      	mov	r3, r4
 80106d2:	7818      	ldrb	r0, [r3, #0]
 80106d4:	2830      	cmp	r0, #48	@ 0x30
 80106d6:	4699      	mov	r9, r3
 80106d8:	f103 0301 	add.w	r3, r3, #1
 80106dc:	d0f9      	beq.n	80106d2 <__gethex+0x4e>
 80106de:	f7ff ffbb 	bl	8010658 <__hexdig_fun>
 80106e2:	fab0 f580 	clz	r5, r0
 80106e6:	096d      	lsrs	r5, r5, #5
 80106e8:	f04f 0b01 	mov.w	fp, #1
 80106ec:	464a      	mov	r2, r9
 80106ee:	4616      	mov	r6, r2
 80106f0:	3201      	adds	r2, #1
 80106f2:	7830      	ldrb	r0, [r6, #0]
 80106f4:	f7ff ffb0 	bl	8010658 <__hexdig_fun>
 80106f8:	2800      	cmp	r0, #0
 80106fa:	d1f8      	bne.n	80106ee <__gethex+0x6a>
 80106fc:	498d      	ldr	r1, [pc, #564]	@ (8010934 <__gethex+0x2b0>)
 80106fe:	2201      	movs	r2, #1
 8010700:	4630      	mov	r0, r6
 8010702:	f7fe ff69 	bl	800f5d8 <strncmp>
 8010706:	2800      	cmp	r0, #0
 8010708:	d13f      	bne.n	801078a <__gethex+0x106>
 801070a:	b944      	cbnz	r4, 801071e <__gethex+0x9a>
 801070c:	1c74      	adds	r4, r6, #1
 801070e:	4622      	mov	r2, r4
 8010710:	4616      	mov	r6, r2
 8010712:	3201      	adds	r2, #1
 8010714:	7830      	ldrb	r0, [r6, #0]
 8010716:	f7ff ff9f 	bl	8010658 <__hexdig_fun>
 801071a:	2800      	cmp	r0, #0
 801071c:	d1f8      	bne.n	8010710 <__gethex+0x8c>
 801071e:	1ba4      	subs	r4, r4, r6
 8010720:	00a7      	lsls	r7, r4, #2
 8010722:	7833      	ldrb	r3, [r6, #0]
 8010724:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010728:	2b50      	cmp	r3, #80	@ 0x50
 801072a:	d13e      	bne.n	80107aa <__gethex+0x126>
 801072c:	7873      	ldrb	r3, [r6, #1]
 801072e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010730:	d033      	beq.n	801079a <__gethex+0x116>
 8010732:	2b2d      	cmp	r3, #45	@ 0x2d
 8010734:	d034      	beq.n	80107a0 <__gethex+0x11c>
 8010736:	1c71      	adds	r1, r6, #1
 8010738:	2400      	movs	r4, #0
 801073a:	7808      	ldrb	r0, [r1, #0]
 801073c:	f7ff ff8c 	bl	8010658 <__hexdig_fun>
 8010740:	1e43      	subs	r3, r0, #1
 8010742:	b2db      	uxtb	r3, r3
 8010744:	2b18      	cmp	r3, #24
 8010746:	d830      	bhi.n	80107aa <__gethex+0x126>
 8010748:	f1a0 0210 	sub.w	r2, r0, #16
 801074c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010750:	f7ff ff82 	bl	8010658 <__hexdig_fun>
 8010754:	f100 3cff 	add.w	ip, r0, #4294967295
 8010758:	fa5f fc8c 	uxtb.w	ip, ip
 801075c:	f1bc 0f18 	cmp.w	ip, #24
 8010760:	f04f 030a 	mov.w	r3, #10
 8010764:	d91e      	bls.n	80107a4 <__gethex+0x120>
 8010766:	b104      	cbz	r4, 801076a <__gethex+0xe6>
 8010768:	4252      	negs	r2, r2
 801076a:	4417      	add	r7, r2
 801076c:	f8ca 1000 	str.w	r1, [sl]
 8010770:	b1ed      	cbz	r5, 80107ae <__gethex+0x12a>
 8010772:	f1bb 0f00 	cmp.w	fp, #0
 8010776:	bf0c      	ite	eq
 8010778:	2506      	moveq	r5, #6
 801077a:	2500      	movne	r5, #0
 801077c:	4628      	mov	r0, r5
 801077e:	b005      	add	sp, #20
 8010780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010784:	2500      	movs	r5, #0
 8010786:	462c      	mov	r4, r5
 8010788:	e7b0      	b.n	80106ec <__gethex+0x68>
 801078a:	2c00      	cmp	r4, #0
 801078c:	d1c7      	bne.n	801071e <__gethex+0x9a>
 801078e:	4627      	mov	r7, r4
 8010790:	e7c7      	b.n	8010722 <__gethex+0x9e>
 8010792:	464e      	mov	r6, r9
 8010794:	462f      	mov	r7, r5
 8010796:	2501      	movs	r5, #1
 8010798:	e7c3      	b.n	8010722 <__gethex+0x9e>
 801079a:	2400      	movs	r4, #0
 801079c:	1cb1      	adds	r1, r6, #2
 801079e:	e7cc      	b.n	801073a <__gethex+0xb6>
 80107a0:	2401      	movs	r4, #1
 80107a2:	e7fb      	b.n	801079c <__gethex+0x118>
 80107a4:	fb03 0002 	mla	r0, r3, r2, r0
 80107a8:	e7ce      	b.n	8010748 <__gethex+0xc4>
 80107aa:	4631      	mov	r1, r6
 80107ac:	e7de      	b.n	801076c <__gethex+0xe8>
 80107ae:	eba6 0309 	sub.w	r3, r6, r9
 80107b2:	3b01      	subs	r3, #1
 80107b4:	4629      	mov	r1, r5
 80107b6:	2b07      	cmp	r3, #7
 80107b8:	dc0a      	bgt.n	80107d0 <__gethex+0x14c>
 80107ba:	9801      	ldr	r0, [sp, #4]
 80107bc:	f000 fafc 	bl	8010db8 <_Balloc>
 80107c0:	4604      	mov	r4, r0
 80107c2:	b940      	cbnz	r0, 80107d6 <__gethex+0x152>
 80107c4:	4b5c      	ldr	r3, [pc, #368]	@ (8010938 <__gethex+0x2b4>)
 80107c6:	4602      	mov	r2, r0
 80107c8:	21e4      	movs	r1, #228	@ 0xe4
 80107ca:	485c      	ldr	r0, [pc, #368]	@ (801093c <__gethex+0x2b8>)
 80107cc:	f7ff f832 	bl	800f834 <__assert_func>
 80107d0:	3101      	adds	r1, #1
 80107d2:	105b      	asrs	r3, r3, #1
 80107d4:	e7ef      	b.n	80107b6 <__gethex+0x132>
 80107d6:	f100 0a14 	add.w	sl, r0, #20
 80107da:	2300      	movs	r3, #0
 80107dc:	4655      	mov	r5, sl
 80107de:	469b      	mov	fp, r3
 80107e0:	45b1      	cmp	r9, r6
 80107e2:	d337      	bcc.n	8010854 <__gethex+0x1d0>
 80107e4:	f845 bb04 	str.w	fp, [r5], #4
 80107e8:	eba5 050a 	sub.w	r5, r5, sl
 80107ec:	10ad      	asrs	r5, r5, #2
 80107ee:	6125      	str	r5, [r4, #16]
 80107f0:	4658      	mov	r0, fp
 80107f2:	f000 fbd3 	bl	8010f9c <__hi0bits>
 80107f6:	016d      	lsls	r5, r5, #5
 80107f8:	f8d8 6000 	ldr.w	r6, [r8]
 80107fc:	1a2d      	subs	r5, r5, r0
 80107fe:	42b5      	cmp	r5, r6
 8010800:	dd54      	ble.n	80108ac <__gethex+0x228>
 8010802:	1bad      	subs	r5, r5, r6
 8010804:	4629      	mov	r1, r5
 8010806:	4620      	mov	r0, r4
 8010808:	f000 ff5f 	bl	80116ca <__any_on>
 801080c:	4681      	mov	r9, r0
 801080e:	b178      	cbz	r0, 8010830 <__gethex+0x1ac>
 8010810:	1e6b      	subs	r3, r5, #1
 8010812:	1159      	asrs	r1, r3, #5
 8010814:	f003 021f 	and.w	r2, r3, #31
 8010818:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801081c:	f04f 0901 	mov.w	r9, #1
 8010820:	fa09 f202 	lsl.w	r2, r9, r2
 8010824:	420a      	tst	r2, r1
 8010826:	d003      	beq.n	8010830 <__gethex+0x1ac>
 8010828:	454b      	cmp	r3, r9
 801082a:	dc36      	bgt.n	801089a <__gethex+0x216>
 801082c:	f04f 0902 	mov.w	r9, #2
 8010830:	4629      	mov	r1, r5
 8010832:	4620      	mov	r0, r4
 8010834:	f7ff febe 	bl	80105b4 <rshift>
 8010838:	442f      	add	r7, r5
 801083a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801083e:	42bb      	cmp	r3, r7
 8010840:	da42      	bge.n	80108c8 <__gethex+0x244>
 8010842:	9801      	ldr	r0, [sp, #4]
 8010844:	4621      	mov	r1, r4
 8010846:	f000 faf7 	bl	8010e38 <_Bfree>
 801084a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801084c:	2300      	movs	r3, #0
 801084e:	6013      	str	r3, [r2, #0]
 8010850:	25a3      	movs	r5, #163	@ 0xa3
 8010852:	e793      	b.n	801077c <__gethex+0xf8>
 8010854:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010858:	2a2e      	cmp	r2, #46	@ 0x2e
 801085a:	d012      	beq.n	8010882 <__gethex+0x1fe>
 801085c:	2b20      	cmp	r3, #32
 801085e:	d104      	bne.n	801086a <__gethex+0x1e6>
 8010860:	f845 bb04 	str.w	fp, [r5], #4
 8010864:	f04f 0b00 	mov.w	fp, #0
 8010868:	465b      	mov	r3, fp
 801086a:	7830      	ldrb	r0, [r6, #0]
 801086c:	9303      	str	r3, [sp, #12]
 801086e:	f7ff fef3 	bl	8010658 <__hexdig_fun>
 8010872:	9b03      	ldr	r3, [sp, #12]
 8010874:	f000 000f 	and.w	r0, r0, #15
 8010878:	4098      	lsls	r0, r3
 801087a:	ea4b 0b00 	orr.w	fp, fp, r0
 801087e:	3304      	adds	r3, #4
 8010880:	e7ae      	b.n	80107e0 <__gethex+0x15c>
 8010882:	45b1      	cmp	r9, r6
 8010884:	d8ea      	bhi.n	801085c <__gethex+0x1d8>
 8010886:	492b      	ldr	r1, [pc, #172]	@ (8010934 <__gethex+0x2b0>)
 8010888:	9303      	str	r3, [sp, #12]
 801088a:	2201      	movs	r2, #1
 801088c:	4630      	mov	r0, r6
 801088e:	f7fe fea3 	bl	800f5d8 <strncmp>
 8010892:	9b03      	ldr	r3, [sp, #12]
 8010894:	2800      	cmp	r0, #0
 8010896:	d1e1      	bne.n	801085c <__gethex+0x1d8>
 8010898:	e7a2      	b.n	80107e0 <__gethex+0x15c>
 801089a:	1ea9      	subs	r1, r5, #2
 801089c:	4620      	mov	r0, r4
 801089e:	f000 ff14 	bl	80116ca <__any_on>
 80108a2:	2800      	cmp	r0, #0
 80108a4:	d0c2      	beq.n	801082c <__gethex+0x1a8>
 80108a6:	f04f 0903 	mov.w	r9, #3
 80108aa:	e7c1      	b.n	8010830 <__gethex+0x1ac>
 80108ac:	da09      	bge.n	80108c2 <__gethex+0x23e>
 80108ae:	1b75      	subs	r5, r6, r5
 80108b0:	4621      	mov	r1, r4
 80108b2:	9801      	ldr	r0, [sp, #4]
 80108b4:	462a      	mov	r2, r5
 80108b6:	f000 fccf 	bl	8011258 <__lshift>
 80108ba:	1b7f      	subs	r7, r7, r5
 80108bc:	4604      	mov	r4, r0
 80108be:	f100 0a14 	add.w	sl, r0, #20
 80108c2:	f04f 0900 	mov.w	r9, #0
 80108c6:	e7b8      	b.n	801083a <__gethex+0x1b6>
 80108c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80108cc:	42bd      	cmp	r5, r7
 80108ce:	dd6f      	ble.n	80109b0 <__gethex+0x32c>
 80108d0:	1bed      	subs	r5, r5, r7
 80108d2:	42ae      	cmp	r6, r5
 80108d4:	dc34      	bgt.n	8010940 <__gethex+0x2bc>
 80108d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80108da:	2b02      	cmp	r3, #2
 80108dc:	d022      	beq.n	8010924 <__gethex+0x2a0>
 80108de:	2b03      	cmp	r3, #3
 80108e0:	d024      	beq.n	801092c <__gethex+0x2a8>
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d115      	bne.n	8010912 <__gethex+0x28e>
 80108e6:	42ae      	cmp	r6, r5
 80108e8:	d113      	bne.n	8010912 <__gethex+0x28e>
 80108ea:	2e01      	cmp	r6, #1
 80108ec:	d10b      	bne.n	8010906 <__gethex+0x282>
 80108ee:	9a02      	ldr	r2, [sp, #8]
 80108f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80108f4:	6013      	str	r3, [r2, #0]
 80108f6:	2301      	movs	r3, #1
 80108f8:	6123      	str	r3, [r4, #16]
 80108fa:	f8ca 3000 	str.w	r3, [sl]
 80108fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010900:	2562      	movs	r5, #98	@ 0x62
 8010902:	601c      	str	r4, [r3, #0]
 8010904:	e73a      	b.n	801077c <__gethex+0xf8>
 8010906:	1e71      	subs	r1, r6, #1
 8010908:	4620      	mov	r0, r4
 801090a:	f000 fede 	bl	80116ca <__any_on>
 801090e:	2800      	cmp	r0, #0
 8010910:	d1ed      	bne.n	80108ee <__gethex+0x26a>
 8010912:	9801      	ldr	r0, [sp, #4]
 8010914:	4621      	mov	r1, r4
 8010916:	f000 fa8f 	bl	8010e38 <_Bfree>
 801091a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801091c:	2300      	movs	r3, #0
 801091e:	6013      	str	r3, [r2, #0]
 8010920:	2550      	movs	r5, #80	@ 0x50
 8010922:	e72b      	b.n	801077c <__gethex+0xf8>
 8010924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010926:	2b00      	cmp	r3, #0
 8010928:	d1f3      	bne.n	8010912 <__gethex+0x28e>
 801092a:	e7e0      	b.n	80108ee <__gethex+0x26a>
 801092c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801092e:	2b00      	cmp	r3, #0
 8010930:	d1dd      	bne.n	80108ee <__gethex+0x26a>
 8010932:	e7ee      	b.n	8010912 <__gethex+0x28e>
 8010934:	08017b8f 	.word	0x08017b8f
 8010938:	08017ccb 	.word	0x08017ccb
 801093c:	08017cdc 	.word	0x08017cdc
 8010940:	1e6f      	subs	r7, r5, #1
 8010942:	f1b9 0f00 	cmp.w	r9, #0
 8010946:	d130      	bne.n	80109aa <__gethex+0x326>
 8010948:	b127      	cbz	r7, 8010954 <__gethex+0x2d0>
 801094a:	4639      	mov	r1, r7
 801094c:	4620      	mov	r0, r4
 801094e:	f000 febc 	bl	80116ca <__any_on>
 8010952:	4681      	mov	r9, r0
 8010954:	117a      	asrs	r2, r7, #5
 8010956:	2301      	movs	r3, #1
 8010958:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801095c:	f007 071f 	and.w	r7, r7, #31
 8010960:	40bb      	lsls	r3, r7
 8010962:	4213      	tst	r3, r2
 8010964:	4629      	mov	r1, r5
 8010966:	4620      	mov	r0, r4
 8010968:	bf18      	it	ne
 801096a:	f049 0902 	orrne.w	r9, r9, #2
 801096e:	f7ff fe21 	bl	80105b4 <rshift>
 8010972:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010976:	1b76      	subs	r6, r6, r5
 8010978:	2502      	movs	r5, #2
 801097a:	f1b9 0f00 	cmp.w	r9, #0
 801097e:	d047      	beq.n	8010a10 <__gethex+0x38c>
 8010980:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010984:	2b02      	cmp	r3, #2
 8010986:	d015      	beq.n	80109b4 <__gethex+0x330>
 8010988:	2b03      	cmp	r3, #3
 801098a:	d017      	beq.n	80109bc <__gethex+0x338>
 801098c:	2b01      	cmp	r3, #1
 801098e:	d109      	bne.n	80109a4 <__gethex+0x320>
 8010990:	f019 0f02 	tst.w	r9, #2
 8010994:	d006      	beq.n	80109a4 <__gethex+0x320>
 8010996:	f8da 3000 	ldr.w	r3, [sl]
 801099a:	ea49 0903 	orr.w	r9, r9, r3
 801099e:	f019 0f01 	tst.w	r9, #1
 80109a2:	d10e      	bne.n	80109c2 <__gethex+0x33e>
 80109a4:	f045 0510 	orr.w	r5, r5, #16
 80109a8:	e032      	b.n	8010a10 <__gethex+0x38c>
 80109aa:	f04f 0901 	mov.w	r9, #1
 80109ae:	e7d1      	b.n	8010954 <__gethex+0x2d0>
 80109b0:	2501      	movs	r5, #1
 80109b2:	e7e2      	b.n	801097a <__gethex+0x2f6>
 80109b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109b6:	f1c3 0301 	rsb	r3, r3, #1
 80109ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80109bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d0f0      	beq.n	80109a4 <__gethex+0x320>
 80109c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80109c6:	f104 0314 	add.w	r3, r4, #20
 80109ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80109ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80109d2:	f04f 0c00 	mov.w	ip, #0
 80109d6:	4618      	mov	r0, r3
 80109d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80109dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80109e0:	d01b      	beq.n	8010a1a <__gethex+0x396>
 80109e2:	3201      	adds	r2, #1
 80109e4:	6002      	str	r2, [r0, #0]
 80109e6:	2d02      	cmp	r5, #2
 80109e8:	f104 0314 	add.w	r3, r4, #20
 80109ec:	d13c      	bne.n	8010a68 <__gethex+0x3e4>
 80109ee:	f8d8 2000 	ldr.w	r2, [r8]
 80109f2:	3a01      	subs	r2, #1
 80109f4:	42b2      	cmp	r2, r6
 80109f6:	d109      	bne.n	8010a0c <__gethex+0x388>
 80109f8:	1171      	asrs	r1, r6, #5
 80109fa:	2201      	movs	r2, #1
 80109fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a00:	f006 061f 	and.w	r6, r6, #31
 8010a04:	fa02 f606 	lsl.w	r6, r2, r6
 8010a08:	421e      	tst	r6, r3
 8010a0a:	d13a      	bne.n	8010a82 <__gethex+0x3fe>
 8010a0c:	f045 0520 	orr.w	r5, r5, #32
 8010a10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a12:	601c      	str	r4, [r3, #0]
 8010a14:	9b02      	ldr	r3, [sp, #8]
 8010a16:	601f      	str	r7, [r3, #0]
 8010a18:	e6b0      	b.n	801077c <__gethex+0xf8>
 8010a1a:	4299      	cmp	r1, r3
 8010a1c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010a20:	d8d9      	bhi.n	80109d6 <__gethex+0x352>
 8010a22:	68a3      	ldr	r3, [r4, #8]
 8010a24:	459b      	cmp	fp, r3
 8010a26:	db17      	blt.n	8010a58 <__gethex+0x3d4>
 8010a28:	6861      	ldr	r1, [r4, #4]
 8010a2a:	9801      	ldr	r0, [sp, #4]
 8010a2c:	3101      	adds	r1, #1
 8010a2e:	f000 f9c3 	bl	8010db8 <_Balloc>
 8010a32:	4681      	mov	r9, r0
 8010a34:	b918      	cbnz	r0, 8010a3e <__gethex+0x3ba>
 8010a36:	4b1a      	ldr	r3, [pc, #104]	@ (8010aa0 <__gethex+0x41c>)
 8010a38:	4602      	mov	r2, r0
 8010a3a:	2184      	movs	r1, #132	@ 0x84
 8010a3c:	e6c5      	b.n	80107ca <__gethex+0x146>
 8010a3e:	6922      	ldr	r2, [r4, #16]
 8010a40:	3202      	adds	r2, #2
 8010a42:	f104 010c 	add.w	r1, r4, #12
 8010a46:	0092      	lsls	r2, r2, #2
 8010a48:	300c      	adds	r0, #12
 8010a4a:	f7fe fed4 	bl	800f7f6 <memcpy>
 8010a4e:	4621      	mov	r1, r4
 8010a50:	9801      	ldr	r0, [sp, #4]
 8010a52:	f000 f9f1 	bl	8010e38 <_Bfree>
 8010a56:	464c      	mov	r4, r9
 8010a58:	6923      	ldr	r3, [r4, #16]
 8010a5a:	1c5a      	adds	r2, r3, #1
 8010a5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a60:	6122      	str	r2, [r4, #16]
 8010a62:	2201      	movs	r2, #1
 8010a64:	615a      	str	r2, [r3, #20]
 8010a66:	e7be      	b.n	80109e6 <__gethex+0x362>
 8010a68:	6922      	ldr	r2, [r4, #16]
 8010a6a:	455a      	cmp	r2, fp
 8010a6c:	dd0b      	ble.n	8010a86 <__gethex+0x402>
 8010a6e:	2101      	movs	r1, #1
 8010a70:	4620      	mov	r0, r4
 8010a72:	f7ff fd9f 	bl	80105b4 <rshift>
 8010a76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a7a:	3701      	adds	r7, #1
 8010a7c:	42bb      	cmp	r3, r7
 8010a7e:	f6ff aee0 	blt.w	8010842 <__gethex+0x1be>
 8010a82:	2501      	movs	r5, #1
 8010a84:	e7c2      	b.n	8010a0c <__gethex+0x388>
 8010a86:	f016 061f 	ands.w	r6, r6, #31
 8010a8a:	d0fa      	beq.n	8010a82 <__gethex+0x3fe>
 8010a8c:	4453      	add	r3, sl
 8010a8e:	f1c6 0620 	rsb	r6, r6, #32
 8010a92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010a96:	f000 fa81 	bl	8010f9c <__hi0bits>
 8010a9a:	42b0      	cmp	r0, r6
 8010a9c:	dbe7      	blt.n	8010a6e <__gethex+0x3ea>
 8010a9e:	e7f0      	b.n	8010a82 <__gethex+0x3fe>
 8010aa0:	08017ccb 	.word	0x08017ccb

08010aa4 <L_shift>:
 8010aa4:	f1c2 0208 	rsb	r2, r2, #8
 8010aa8:	0092      	lsls	r2, r2, #2
 8010aaa:	b570      	push	{r4, r5, r6, lr}
 8010aac:	f1c2 0620 	rsb	r6, r2, #32
 8010ab0:	6843      	ldr	r3, [r0, #4]
 8010ab2:	6804      	ldr	r4, [r0, #0]
 8010ab4:	fa03 f506 	lsl.w	r5, r3, r6
 8010ab8:	432c      	orrs	r4, r5
 8010aba:	40d3      	lsrs	r3, r2
 8010abc:	6004      	str	r4, [r0, #0]
 8010abe:	f840 3f04 	str.w	r3, [r0, #4]!
 8010ac2:	4288      	cmp	r0, r1
 8010ac4:	d3f4      	bcc.n	8010ab0 <L_shift+0xc>
 8010ac6:	bd70      	pop	{r4, r5, r6, pc}

08010ac8 <__match>:
 8010ac8:	b530      	push	{r4, r5, lr}
 8010aca:	6803      	ldr	r3, [r0, #0]
 8010acc:	3301      	adds	r3, #1
 8010ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ad2:	b914      	cbnz	r4, 8010ada <__match+0x12>
 8010ad4:	6003      	str	r3, [r0, #0]
 8010ad6:	2001      	movs	r0, #1
 8010ad8:	bd30      	pop	{r4, r5, pc}
 8010ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ade:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010ae2:	2d19      	cmp	r5, #25
 8010ae4:	bf98      	it	ls
 8010ae6:	3220      	addls	r2, #32
 8010ae8:	42a2      	cmp	r2, r4
 8010aea:	d0f0      	beq.n	8010ace <__match+0x6>
 8010aec:	2000      	movs	r0, #0
 8010aee:	e7f3      	b.n	8010ad8 <__match+0x10>

08010af0 <__hexnan>:
 8010af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af4:	680b      	ldr	r3, [r1, #0]
 8010af6:	6801      	ldr	r1, [r0, #0]
 8010af8:	115e      	asrs	r6, r3, #5
 8010afa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010afe:	f013 031f 	ands.w	r3, r3, #31
 8010b02:	b087      	sub	sp, #28
 8010b04:	bf18      	it	ne
 8010b06:	3604      	addne	r6, #4
 8010b08:	2500      	movs	r5, #0
 8010b0a:	1f37      	subs	r7, r6, #4
 8010b0c:	4682      	mov	sl, r0
 8010b0e:	4690      	mov	r8, r2
 8010b10:	9301      	str	r3, [sp, #4]
 8010b12:	f846 5c04 	str.w	r5, [r6, #-4]
 8010b16:	46b9      	mov	r9, r7
 8010b18:	463c      	mov	r4, r7
 8010b1a:	9502      	str	r5, [sp, #8]
 8010b1c:	46ab      	mov	fp, r5
 8010b1e:	784a      	ldrb	r2, [r1, #1]
 8010b20:	1c4b      	adds	r3, r1, #1
 8010b22:	9303      	str	r3, [sp, #12]
 8010b24:	b342      	cbz	r2, 8010b78 <__hexnan+0x88>
 8010b26:	4610      	mov	r0, r2
 8010b28:	9105      	str	r1, [sp, #20]
 8010b2a:	9204      	str	r2, [sp, #16]
 8010b2c:	f7ff fd94 	bl	8010658 <__hexdig_fun>
 8010b30:	2800      	cmp	r0, #0
 8010b32:	d151      	bne.n	8010bd8 <__hexnan+0xe8>
 8010b34:	9a04      	ldr	r2, [sp, #16]
 8010b36:	9905      	ldr	r1, [sp, #20]
 8010b38:	2a20      	cmp	r2, #32
 8010b3a:	d818      	bhi.n	8010b6e <__hexnan+0x7e>
 8010b3c:	9b02      	ldr	r3, [sp, #8]
 8010b3e:	459b      	cmp	fp, r3
 8010b40:	dd13      	ble.n	8010b6a <__hexnan+0x7a>
 8010b42:	454c      	cmp	r4, r9
 8010b44:	d206      	bcs.n	8010b54 <__hexnan+0x64>
 8010b46:	2d07      	cmp	r5, #7
 8010b48:	dc04      	bgt.n	8010b54 <__hexnan+0x64>
 8010b4a:	462a      	mov	r2, r5
 8010b4c:	4649      	mov	r1, r9
 8010b4e:	4620      	mov	r0, r4
 8010b50:	f7ff ffa8 	bl	8010aa4 <L_shift>
 8010b54:	4544      	cmp	r4, r8
 8010b56:	d952      	bls.n	8010bfe <__hexnan+0x10e>
 8010b58:	2300      	movs	r3, #0
 8010b5a:	f1a4 0904 	sub.w	r9, r4, #4
 8010b5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b62:	f8cd b008 	str.w	fp, [sp, #8]
 8010b66:	464c      	mov	r4, r9
 8010b68:	461d      	mov	r5, r3
 8010b6a:	9903      	ldr	r1, [sp, #12]
 8010b6c:	e7d7      	b.n	8010b1e <__hexnan+0x2e>
 8010b6e:	2a29      	cmp	r2, #41	@ 0x29
 8010b70:	d157      	bne.n	8010c22 <__hexnan+0x132>
 8010b72:	3102      	adds	r1, #2
 8010b74:	f8ca 1000 	str.w	r1, [sl]
 8010b78:	f1bb 0f00 	cmp.w	fp, #0
 8010b7c:	d051      	beq.n	8010c22 <__hexnan+0x132>
 8010b7e:	454c      	cmp	r4, r9
 8010b80:	d206      	bcs.n	8010b90 <__hexnan+0xa0>
 8010b82:	2d07      	cmp	r5, #7
 8010b84:	dc04      	bgt.n	8010b90 <__hexnan+0xa0>
 8010b86:	462a      	mov	r2, r5
 8010b88:	4649      	mov	r1, r9
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	f7ff ff8a 	bl	8010aa4 <L_shift>
 8010b90:	4544      	cmp	r4, r8
 8010b92:	d936      	bls.n	8010c02 <__hexnan+0x112>
 8010b94:	f1a8 0204 	sub.w	r2, r8, #4
 8010b98:	4623      	mov	r3, r4
 8010b9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8010b9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010ba2:	429f      	cmp	r7, r3
 8010ba4:	d2f9      	bcs.n	8010b9a <__hexnan+0xaa>
 8010ba6:	1b3b      	subs	r3, r7, r4
 8010ba8:	f023 0303 	bic.w	r3, r3, #3
 8010bac:	3304      	adds	r3, #4
 8010bae:	3401      	adds	r4, #1
 8010bb0:	3e03      	subs	r6, #3
 8010bb2:	42b4      	cmp	r4, r6
 8010bb4:	bf88      	it	hi
 8010bb6:	2304      	movhi	r3, #4
 8010bb8:	4443      	add	r3, r8
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f843 2b04 	str.w	r2, [r3], #4
 8010bc0:	429f      	cmp	r7, r3
 8010bc2:	d2fb      	bcs.n	8010bbc <__hexnan+0xcc>
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	b91b      	cbnz	r3, 8010bd0 <__hexnan+0xe0>
 8010bc8:	4547      	cmp	r7, r8
 8010bca:	d128      	bne.n	8010c1e <__hexnan+0x12e>
 8010bcc:	2301      	movs	r3, #1
 8010bce:	603b      	str	r3, [r7, #0]
 8010bd0:	2005      	movs	r0, #5
 8010bd2:	b007      	add	sp, #28
 8010bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd8:	3501      	adds	r5, #1
 8010bda:	2d08      	cmp	r5, #8
 8010bdc:	f10b 0b01 	add.w	fp, fp, #1
 8010be0:	dd06      	ble.n	8010bf0 <__hexnan+0x100>
 8010be2:	4544      	cmp	r4, r8
 8010be4:	d9c1      	bls.n	8010b6a <__hexnan+0x7a>
 8010be6:	2300      	movs	r3, #0
 8010be8:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bec:	2501      	movs	r5, #1
 8010bee:	3c04      	subs	r4, #4
 8010bf0:	6822      	ldr	r2, [r4, #0]
 8010bf2:	f000 000f 	and.w	r0, r0, #15
 8010bf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010bfa:	6020      	str	r0, [r4, #0]
 8010bfc:	e7b5      	b.n	8010b6a <__hexnan+0x7a>
 8010bfe:	2508      	movs	r5, #8
 8010c00:	e7b3      	b.n	8010b6a <__hexnan+0x7a>
 8010c02:	9b01      	ldr	r3, [sp, #4]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d0dd      	beq.n	8010bc4 <__hexnan+0xd4>
 8010c08:	f1c3 0320 	rsb	r3, r3, #32
 8010c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c10:	40da      	lsrs	r2, r3
 8010c12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010c16:	4013      	ands	r3, r2
 8010c18:	f846 3c04 	str.w	r3, [r6, #-4]
 8010c1c:	e7d2      	b.n	8010bc4 <__hexnan+0xd4>
 8010c1e:	3f04      	subs	r7, #4
 8010c20:	e7d0      	b.n	8010bc4 <__hexnan+0xd4>
 8010c22:	2004      	movs	r0, #4
 8010c24:	e7d5      	b.n	8010bd2 <__hexnan+0xe2>
	...

08010c28 <malloc>:
 8010c28:	4b02      	ldr	r3, [pc, #8]	@ (8010c34 <malloc+0xc>)
 8010c2a:	4601      	mov	r1, r0
 8010c2c:	6818      	ldr	r0, [r3, #0]
 8010c2e:	f000 b825 	b.w	8010c7c <_malloc_r>
 8010c32:	bf00      	nop
 8010c34:	20000280 	.word	0x20000280

08010c38 <sbrk_aligned>:
 8010c38:	b570      	push	{r4, r5, r6, lr}
 8010c3a:	4e0f      	ldr	r6, [pc, #60]	@ (8010c78 <sbrk_aligned+0x40>)
 8010c3c:	460c      	mov	r4, r1
 8010c3e:	6831      	ldr	r1, [r6, #0]
 8010c40:	4605      	mov	r5, r0
 8010c42:	b911      	cbnz	r1, 8010c4a <sbrk_aligned+0x12>
 8010c44:	f001 fb30 	bl	80122a8 <_sbrk_r>
 8010c48:	6030      	str	r0, [r6, #0]
 8010c4a:	4621      	mov	r1, r4
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	f001 fb2b 	bl	80122a8 <_sbrk_r>
 8010c52:	1c43      	adds	r3, r0, #1
 8010c54:	d103      	bne.n	8010c5e <sbrk_aligned+0x26>
 8010c56:	f04f 34ff 	mov.w	r4, #4294967295
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	bd70      	pop	{r4, r5, r6, pc}
 8010c5e:	1cc4      	adds	r4, r0, #3
 8010c60:	f024 0403 	bic.w	r4, r4, #3
 8010c64:	42a0      	cmp	r0, r4
 8010c66:	d0f8      	beq.n	8010c5a <sbrk_aligned+0x22>
 8010c68:	1a21      	subs	r1, r4, r0
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	f001 fb1c 	bl	80122a8 <_sbrk_r>
 8010c70:	3001      	adds	r0, #1
 8010c72:	d1f2      	bne.n	8010c5a <sbrk_aligned+0x22>
 8010c74:	e7ef      	b.n	8010c56 <sbrk_aligned+0x1e>
 8010c76:	bf00      	nop
 8010c78:	2001f12c 	.word	0x2001f12c

08010c7c <_malloc_r>:
 8010c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c80:	1ccd      	adds	r5, r1, #3
 8010c82:	f025 0503 	bic.w	r5, r5, #3
 8010c86:	3508      	adds	r5, #8
 8010c88:	2d0c      	cmp	r5, #12
 8010c8a:	bf38      	it	cc
 8010c8c:	250c      	movcc	r5, #12
 8010c8e:	2d00      	cmp	r5, #0
 8010c90:	4606      	mov	r6, r0
 8010c92:	db01      	blt.n	8010c98 <_malloc_r+0x1c>
 8010c94:	42a9      	cmp	r1, r5
 8010c96:	d904      	bls.n	8010ca2 <_malloc_r+0x26>
 8010c98:	230c      	movs	r3, #12
 8010c9a:	6033      	str	r3, [r6, #0]
 8010c9c:	2000      	movs	r0, #0
 8010c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010d78 <_malloc_r+0xfc>
 8010ca6:	f000 f87b 	bl	8010da0 <__malloc_lock>
 8010caa:	f8d8 3000 	ldr.w	r3, [r8]
 8010cae:	461c      	mov	r4, r3
 8010cb0:	bb44      	cbnz	r4, 8010d04 <_malloc_r+0x88>
 8010cb2:	4629      	mov	r1, r5
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	f7ff ffbf 	bl	8010c38 <sbrk_aligned>
 8010cba:	1c43      	adds	r3, r0, #1
 8010cbc:	4604      	mov	r4, r0
 8010cbe:	d158      	bne.n	8010d72 <_malloc_r+0xf6>
 8010cc0:	f8d8 4000 	ldr.w	r4, [r8]
 8010cc4:	4627      	mov	r7, r4
 8010cc6:	2f00      	cmp	r7, #0
 8010cc8:	d143      	bne.n	8010d52 <_malloc_r+0xd6>
 8010cca:	2c00      	cmp	r4, #0
 8010ccc:	d04b      	beq.n	8010d66 <_malloc_r+0xea>
 8010cce:	6823      	ldr	r3, [r4, #0]
 8010cd0:	4639      	mov	r1, r7
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	eb04 0903 	add.w	r9, r4, r3
 8010cd8:	f001 fae6 	bl	80122a8 <_sbrk_r>
 8010cdc:	4581      	cmp	r9, r0
 8010cde:	d142      	bne.n	8010d66 <_malloc_r+0xea>
 8010ce0:	6821      	ldr	r1, [r4, #0]
 8010ce2:	1a6d      	subs	r5, r5, r1
 8010ce4:	4629      	mov	r1, r5
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	f7ff ffa6 	bl	8010c38 <sbrk_aligned>
 8010cec:	3001      	adds	r0, #1
 8010cee:	d03a      	beq.n	8010d66 <_malloc_r+0xea>
 8010cf0:	6823      	ldr	r3, [r4, #0]
 8010cf2:	442b      	add	r3, r5
 8010cf4:	6023      	str	r3, [r4, #0]
 8010cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8010cfa:	685a      	ldr	r2, [r3, #4]
 8010cfc:	bb62      	cbnz	r2, 8010d58 <_malloc_r+0xdc>
 8010cfe:	f8c8 7000 	str.w	r7, [r8]
 8010d02:	e00f      	b.n	8010d24 <_malloc_r+0xa8>
 8010d04:	6822      	ldr	r2, [r4, #0]
 8010d06:	1b52      	subs	r2, r2, r5
 8010d08:	d420      	bmi.n	8010d4c <_malloc_r+0xd0>
 8010d0a:	2a0b      	cmp	r2, #11
 8010d0c:	d917      	bls.n	8010d3e <_malloc_r+0xc2>
 8010d0e:	1961      	adds	r1, r4, r5
 8010d10:	42a3      	cmp	r3, r4
 8010d12:	6025      	str	r5, [r4, #0]
 8010d14:	bf18      	it	ne
 8010d16:	6059      	strne	r1, [r3, #4]
 8010d18:	6863      	ldr	r3, [r4, #4]
 8010d1a:	bf08      	it	eq
 8010d1c:	f8c8 1000 	streq.w	r1, [r8]
 8010d20:	5162      	str	r2, [r4, r5]
 8010d22:	604b      	str	r3, [r1, #4]
 8010d24:	4630      	mov	r0, r6
 8010d26:	f000 f841 	bl	8010dac <__malloc_unlock>
 8010d2a:	f104 000b 	add.w	r0, r4, #11
 8010d2e:	1d23      	adds	r3, r4, #4
 8010d30:	f020 0007 	bic.w	r0, r0, #7
 8010d34:	1ac2      	subs	r2, r0, r3
 8010d36:	bf1c      	itt	ne
 8010d38:	1a1b      	subne	r3, r3, r0
 8010d3a:	50a3      	strne	r3, [r4, r2]
 8010d3c:	e7af      	b.n	8010c9e <_malloc_r+0x22>
 8010d3e:	6862      	ldr	r2, [r4, #4]
 8010d40:	42a3      	cmp	r3, r4
 8010d42:	bf0c      	ite	eq
 8010d44:	f8c8 2000 	streq.w	r2, [r8]
 8010d48:	605a      	strne	r2, [r3, #4]
 8010d4a:	e7eb      	b.n	8010d24 <_malloc_r+0xa8>
 8010d4c:	4623      	mov	r3, r4
 8010d4e:	6864      	ldr	r4, [r4, #4]
 8010d50:	e7ae      	b.n	8010cb0 <_malloc_r+0x34>
 8010d52:	463c      	mov	r4, r7
 8010d54:	687f      	ldr	r7, [r7, #4]
 8010d56:	e7b6      	b.n	8010cc6 <_malloc_r+0x4a>
 8010d58:	461a      	mov	r2, r3
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	42a3      	cmp	r3, r4
 8010d5e:	d1fb      	bne.n	8010d58 <_malloc_r+0xdc>
 8010d60:	2300      	movs	r3, #0
 8010d62:	6053      	str	r3, [r2, #4]
 8010d64:	e7de      	b.n	8010d24 <_malloc_r+0xa8>
 8010d66:	230c      	movs	r3, #12
 8010d68:	6033      	str	r3, [r6, #0]
 8010d6a:	4630      	mov	r0, r6
 8010d6c:	f000 f81e 	bl	8010dac <__malloc_unlock>
 8010d70:	e794      	b.n	8010c9c <_malloc_r+0x20>
 8010d72:	6005      	str	r5, [r0, #0]
 8010d74:	e7d6      	b.n	8010d24 <_malloc_r+0xa8>
 8010d76:	bf00      	nop
 8010d78:	2001f130 	.word	0x2001f130

08010d7c <__ascii_mbtowc>:
 8010d7c:	b082      	sub	sp, #8
 8010d7e:	b901      	cbnz	r1, 8010d82 <__ascii_mbtowc+0x6>
 8010d80:	a901      	add	r1, sp, #4
 8010d82:	b142      	cbz	r2, 8010d96 <__ascii_mbtowc+0x1a>
 8010d84:	b14b      	cbz	r3, 8010d9a <__ascii_mbtowc+0x1e>
 8010d86:	7813      	ldrb	r3, [r2, #0]
 8010d88:	600b      	str	r3, [r1, #0]
 8010d8a:	7812      	ldrb	r2, [r2, #0]
 8010d8c:	1e10      	subs	r0, r2, #0
 8010d8e:	bf18      	it	ne
 8010d90:	2001      	movne	r0, #1
 8010d92:	b002      	add	sp, #8
 8010d94:	4770      	bx	lr
 8010d96:	4610      	mov	r0, r2
 8010d98:	e7fb      	b.n	8010d92 <__ascii_mbtowc+0x16>
 8010d9a:	f06f 0001 	mvn.w	r0, #1
 8010d9e:	e7f8      	b.n	8010d92 <__ascii_mbtowc+0x16>

08010da0 <__malloc_lock>:
 8010da0:	4801      	ldr	r0, [pc, #4]	@ (8010da8 <__malloc_lock+0x8>)
 8010da2:	f7fe bd26 	b.w	800f7f2 <__retarget_lock_acquire_recursive>
 8010da6:	bf00      	nop
 8010da8:	2001f128 	.word	0x2001f128

08010dac <__malloc_unlock>:
 8010dac:	4801      	ldr	r0, [pc, #4]	@ (8010db4 <__malloc_unlock+0x8>)
 8010dae:	f7fe bd21 	b.w	800f7f4 <__retarget_lock_release_recursive>
 8010db2:	bf00      	nop
 8010db4:	2001f128 	.word	0x2001f128

08010db8 <_Balloc>:
 8010db8:	b570      	push	{r4, r5, r6, lr}
 8010dba:	69c6      	ldr	r6, [r0, #28]
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	460d      	mov	r5, r1
 8010dc0:	b976      	cbnz	r6, 8010de0 <_Balloc+0x28>
 8010dc2:	2010      	movs	r0, #16
 8010dc4:	f7ff ff30 	bl	8010c28 <malloc>
 8010dc8:	4602      	mov	r2, r0
 8010dca:	61e0      	str	r0, [r4, #28]
 8010dcc:	b920      	cbnz	r0, 8010dd8 <_Balloc+0x20>
 8010dce:	4b18      	ldr	r3, [pc, #96]	@ (8010e30 <_Balloc+0x78>)
 8010dd0:	4818      	ldr	r0, [pc, #96]	@ (8010e34 <_Balloc+0x7c>)
 8010dd2:	216b      	movs	r1, #107	@ 0x6b
 8010dd4:	f7fe fd2e 	bl	800f834 <__assert_func>
 8010dd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ddc:	6006      	str	r6, [r0, #0]
 8010dde:	60c6      	str	r6, [r0, #12]
 8010de0:	69e6      	ldr	r6, [r4, #28]
 8010de2:	68f3      	ldr	r3, [r6, #12]
 8010de4:	b183      	cbz	r3, 8010e08 <_Balloc+0x50>
 8010de6:	69e3      	ldr	r3, [r4, #28]
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010dee:	b9b8      	cbnz	r0, 8010e20 <_Balloc+0x68>
 8010df0:	2101      	movs	r1, #1
 8010df2:	fa01 f605 	lsl.w	r6, r1, r5
 8010df6:	1d72      	adds	r2, r6, #5
 8010df8:	0092      	lsls	r2, r2, #2
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	f001 fa6b 	bl	80122d6 <_calloc_r>
 8010e00:	b160      	cbz	r0, 8010e1c <_Balloc+0x64>
 8010e02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e06:	e00e      	b.n	8010e26 <_Balloc+0x6e>
 8010e08:	2221      	movs	r2, #33	@ 0x21
 8010e0a:	2104      	movs	r1, #4
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f001 fa62 	bl	80122d6 <_calloc_r>
 8010e12:	69e3      	ldr	r3, [r4, #28]
 8010e14:	60f0      	str	r0, [r6, #12]
 8010e16:	68db      	ldr	r3, [r3, #12]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d1e4      	bne.n	8010de6 <_Balloc+0x2e>
 8010e1c:	2000      	movs	r0, #0
 8010e1e:	bd70      	pop	{r4, r5, r6, pc}
 8010e20:	6802      	ldr	r2, [r0, #0]
 8010e22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e26:	2300      	movs	r3, #0
 8010e28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e2c:	e7f7      	b.n	8010e1e <_Balloc+0x66>
 8010e2e:	bf00      	nop
 8010e30:	08017b20 	.word	0x08017b20
 8010e34:	08017d3c 	.word	0x08017d3c

08010e38 <_Bfree>:
 8010e38:	b570      	push	{r4, r5, r6, lr}
 8010e3a:	69c6      	ldr	r6, [r0, #28]
 8010e3c:	4605      	mov	r5, r0
 8010e3e:	460c      	mov	r4, r1
 8010e40:	b976      	cbnz	r6, 8010e60 <_Bfree+0x28>
 8010e42:	2010      	movs	r0, #16
 8010e44:	f7ff fef0 	bl	8010c28 <malloc>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	61e8      	str	r0, [r5, #28]
 8010e4c:	b920      	cbnz	r0, 8010e58 <_Bfree+0x20>
 8010e4e:	4b09      	ldr	r3, [pc, #36]	@ (8010e74 <_Bfree+0x3c>)
 8010e50:	4809      	ldr	r0, [pc, #36]	@ (8010e78 <_Bfree+0x40>)
 8010e52:	218f      	movs	r1, #143	@ 0x8f
 8010e54:	f7fe fcee 	bl	800f834 <__assert_func>
 8010e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e5c:	6006      	str	r6, [r0, #0]
 8010e5e:	60c6      	str	r6, [r0, #12]
 8010e60:	b13c      	cbz	r4, 8010e72 <_Bfree+0x3a>
 8010e62:	69eb      	ldr	r3, [r5, #28]
 8010e64:	6862      	ldr	r2, [r4, #4]
 8010e66:	68db      	ldr	r3, [r3, #12]
 8010e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e6c:	6021      	str	r1, [r4, #0]
 8010e6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e72:	bd70      	pop	{r4, r5, r6, pc}
 8010e74:	08017b20 	.word	0x08017b20
 8010e78:	08017d3c 	.word	0x08017d3c

08010e7c <__multadd>:
 8010e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e80:	690d      	ldr	r5, [r1, #16]
 8010e82:	4607      	mov	r7, r0
 8010e84:	460c      	mov	r4, r1
 8010e86:	461e      	mov	r6, r3
 8010e88:	f101 0c14 	add.w	ip, r1, #20
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	f8dc 3000 	ldr.w	r3, [ip]
 8010e92:	b299      	uxth	r1, r3
 8010e94:	fb02 6101 	mla	r1, r2, r1, r6
 8010e98:	0c1e      	lsrs	r6, r3, #16
 8010e9a:	0c0b      	lsrs	r3, r1, #16
 8010e9c:	fb02 3306 	mla	r3, r2, r6, r3
 8010ea0:	b289      	uxth	r1, r1
 8010ea2:	3001      	adds	r0, #1
 8010ea4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ea8:	4285      	cmp	r5, r0
 8010eaa:	f84c 1b04 	str.w	r1, [ip], #4
 8010eae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010eb2:	dcec      	bgt.n	8010e8e <__multadd+0x12>
 8010eb4:	b30e      	cbz	r6, 8010efa <__multadd+0x7e>
 8010eb6:	68a3      	ldr	r3, [r4, #8]
 8010eb8:	42ab      	cmp	r3, r5
 8010eba:	dc19      	bgt.n	8010ef0 <__multadd+0x74>
 8010ebc:	6861      	ldr	r1, [r4, #4]
 8010ebe:	4638      	mov	r0, r7
 8010ec0:	3101      	adds	r1, #1
 8010ec2:	f7ff ff79 	bl	8010db8 <_Balloc>
 8010ec6:	4680      	mov	r8, r0
 8010ec8:	b928      	cbnz	r0, 8010ed6 <__multadd+0x5a>
 8010eca:	4602      	mov	r2, r0
 8010ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8010f00 <__multadd+0x84>)
 8010ece:	480d      	ldr	r0, [pc, #52]	@ (8010f04 <__multadd+0x88>)
 8010ed0:	21ba      	movs	r1, #186	@ 0xba
 8010ed2:	f7fe fcaf 	bl	800f834 <__assert_func>
 8010ed6:	6922      	ldr	r2, [r4, #16]
 8010ed8:	3202      	adds	r2, #2
 8010eda:	f104 010c 	add.w	r1, r4, #12
 8010ede:	0092      	lsls	r2, r2, #2
 8010ee0:	300c      	adds	r0, #12
 8010ee2:	f7fe fc88 	bl	800f7f6 <memcpy>
 8010ee6:	4621      	mov	r1, r4
 8010ee8:	4638      	mov	r0, r7
 8010eea:	f7ff ffa5 	bl	8010e38 <_Bfree>
 8010eee:	4644      	mov	r4, r8
 8010ef0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ef4:	3501      	adds	r5, #1
 8010ef6:	615e      	str	r6, [r3, #20]
 8010ef8:	6125      	str	r5, [r4, #16]
 8010efa:	4620      	mov	r0, r4
 8010efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f00:	08017ccb 	.word	0x08017ccb
 8010f04:	08017d3c 	.word	0x08017d3c

08010f08 <__s2b>:
 8010f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f0c:	460c      	mov	r4, r1
 8010f0e:	4615      	mov	r5, r2
 8010f10:	461f      	mov	r7, r3
 8010f12:	2209      	movs	r2, #9
 8010f14:	3308      	adds	r3, #8
 8010f16:	4606      	mov	r6, r0
 8010f18:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f1c:	2100      	movs	r1, #0
 8010f1e:	2201      	movs	r2, #1
 8010f20:	429a      	cmp	r2, r3
 8010f22:	db09      	blt.n	8010f38 <__s2b+0x30>
 8010f24:	4630      	mov	r0, r6
 8010f26:	f7ff ff47 	bl	8010db8 <_Balloc>
 8010f2a:	b940      	cbnz	r0, 8010f3e <__s2b+0x36>
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	4b19      	ldr	r3, [pc, #100]	@ (8010f94 <__s2b+0x8c>)
 8010f30:	4819      	ldr	r0, [pc, #100]	@ (8010f98 <__s2b+0x90>)
 8010f32:	21d3      	movs	r1, #211	@ 0xd3
 8010f34:	f7fe fc7e 	bl	800f834 <__assert_func>
 8010f38:	0052      	lsls	r2, r2, #1
 8010f3a:	3101      	adds	r1, #1
 8010f3c:	e7f0      	b.n	8010f20 <__s2b+0x18>
 8010f3e:	9b08      	ldr	r3, [sp, #32]
 8010f40:	6143      	str	r3, [r0, #20]
 8010f42:	2d09      	cmp	r5, #9
 8010f44:	f04f 0301 	mov.w	r3, #1
 8010f48:	6103      	str	r3, [r0, #16]
 8010f4a:	dd16      	ble.n	8010f7a <__s2b+0x72>
 8010f4c:	f104 0909 	add.w	r9, r4, #9
 8010f50:	46c8      	mov	r8, r9
 8010f52:	442c      	add	r4, r5
 8010f54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010f58:	4601      	mov	r1, r0
 8010f5a:	3b30      	subs	r3, #48	@ 0x30
 8010f5c:	220a      	movs	r2, #10
 8010f5e:	4630      	mov	r0, r6
 8010f60:	f7ff ff8c 	bl	8010e7c <__multadd>
 8010f64:	45a0      	cmp	r8, r4
 8010f66:	d1f5      	bne.n	8010f54 <__s2b+0x4c>
 8010f68:	f1a5 0408 	sub.w	r4, r5, #8
 8010f6c:	444c      	add	r4, r9
 8010f6e:	1b2d      	subs	r5, r5, r4
 8010f70:	1963      	adds	r3, r4, r5
 8010f72:	42bb      	cmp	r3, r7
 8010f74:	db04      	blt.n	8010f80 <__s2b+0x78>
 8010f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f7a:	340a      	adds	r4, #10
 8010f7c:	2509      	movs	r5, #9
 8010f7e:	e7f6      	b.n	8010f6e <__s2b+0x66>
 8010f80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f84:	4601      	mov	r1, r0
 8010f86:	3b30      	subs	r3, #48	@ 0x30
 8010f88:	220a      	movs	r2, #10
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	f7ff ff76 	bl	8010e7c <__multadd>
 8010f90:	e7ee      	b.n	8010f70 <__s2b+0x68>
 8010f92:	bf00      	nop
 8010f94:	08017ccb 	.word	0x08017ccb
 8010f98:	08017d3c 	.word	0x08017d3c

08010f9c <__hi0bits>:
 8010f9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	bf36      	itet	cc
 8010fa4:	0403      	lslcc	r3, r0, #16
 8010fa6:	2000      	movcs	r0, #0
 8010fa8:	2010      	movcc	r0, #16
 8010faa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010fae:	bf3c      	itt	cc
 8010fb0:	021b      	lslcc	r3, r3, #8
 8010fb2:	3008      	addcc	r0, #8
 8010fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010fb8:	bf3c      	itt	cc
 8010fba:	011b      	lslcc	r3, r3, #4
 8010fbc:	3004      	addcc	r0, #4
 8010fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fc2:	bf3c      	itt	cc
 8010fc4:	009b      	lslcc	r3, r3, #2
 8010fc6:	3002      	addcc	r0, #2
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	db05      	blt.n	8010fd8 <__hi0bits+0x3c>
 8010fcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010fd0:	f100 0001 	add.w	r0, r0, #1
 8010fd4:	bf08      	it	eq
 8010fd6:	2020      	moveq	r0, #32
 8010fd8:	4770      	bx	lr

08010fda <__lo0bits>:
 8010fda:	6803      	ldr	r3, [r0, #0]
 8010fdc:	4602      	mov	r2, r0
 8010fde:	f013 0007 	ands.w	r0, r3, #7
 8010fe2:	d00b      	beq.n	8010ffc <__lo0bits+0x22>
 8010fe4:	07d9      	lsls	r1, r3, #31
 8010fe6:	d421      	bmi.n	801102c <__lo0bits+0x52>
 8010fe8:	0798      	lsls	r0, r3, #30
 8010fea:	bf49      	itett	mi
 8010fec:	085b      	lsrmi	r3, r3, #1
 8010fee:	089b      	lsrpl	r3, r3, #2
 8010ff0:	2001      	movmi	r0, #1
 8010ff2:	6013      	strmi	r3, [r2, #0]
 8010ff4:	bf5c      	itt	pl
 8010ff6:	6013      	strpl	r3, [r2, #0]
 8010ff8:	2002      	movpl	r0, #2
 8010ffa:	4770      	bx	lr
 8010ffc:	b299      	uxth	r1, r3
 8010ffe:	b909      	cbnz	r1, 8011004 <__lo0bits+0x2a>
 8011000:	0c1b      	lsrs	r3, r3, #16
 8011002:	2010      	movs	r0, #16
 8011004:	b2d9      	uxtb	r1, r3
 8011006:	b909      	cbnz	r1, 801100c <__lo0bits+0x32>
 8011008:	3008      	adds	r0, #8
 801100a:	0a1b      	lsrs	r3, r3, #8
 801100c:	0719      	lsls	r1, r3, #28
 801100e:	bf04      	itt	eq
 8011010:	091b      	lsreq	r3, r3, #4
 8011012:	3004      	addeq	r0, #4
 8011014:	0799      	lsls	r1, r3, #30
 8011016:	bf04      	itt	eq
 8011018:	089b      	lsreq	r3, r3, #2
 801101a:	3002      	addeq	r0, #2
 801101c:	07d9      	lsls	r1, r3, #31
 801101e:	d403      	bmi.n	8011028 <__lo0bits+0x4e>
 8011020:	085b      	lsrs	r3, r3, #1
 8011022:	f100 0001 	add.w	r0, r0, #1
 8011026:	d003      	beq.n	8011030 <__lo0bits+0x56>
 8011028:	6013      	str	r3, [r2, #0]
 801102a:	4770      	bx	lr
 801102c:	2000      	movs	r0, #0
 801102e:	4770      	bx	lr
 8011030:	2020      	movs	r0, #32
 8011032:	4770      	bx	lr

08011034 <__i2b>:
 8011034:	b510      	push	{r4, lr}
 8011036:	460c      	mov	r4, r1
 8011038:	2101      	movs	r1, #1
 801103a:	f7ff febd 	bl	8010db8 <_Balloc>
 801103e:	4602      	mov	r2, r0
 8011040:	b928      	cbnz	r0, 801104e <__i2b+0x1a>
 8011042:	4b05      	ldr	r3, [pc, #20]	@ (8011058 <__i2b+0x24>)
 8011044:	4805      	ldr	r0, [pc, #20]	@ (801105c <__i2b+0x28>)
 8011046:	f240 1145 	movw	r1, #325	@ 0x145
 801104a:	f7fe fbf3 	bl	800f834 <__assert_func>
 801104e:	2301      	movs	r3, #1
 8011050:	6144      	str	r4, [r0, #20]
 8011052:	6103      	str	r3, [r0, #16]
 8011054:	bd10      	pop	{r4, pc}
 8011056:	bf00      	nop
 8011058:	08017ccb 	.word	0x08017ccb
 801105c:	08017d3c 	.word	0x08017d3c

08011060 <__multiply>:
 8011060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011064:	4617      	mov	r7, r2
 8011066:	690a      	ldr	r2, [r1, #16]
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	429a      	cmp	r2, r3
 801106c:	bfa8      	it	ge
 801106e:	463b      	movge	r3, r7
 8011070:	4689      	mov	r9, r1
 8011072:	bfa4      	itt	ge
 8011074:	460f      	movge	r7, r1
 8011076:	4699      	movge	r9, r3
 8011078:	693d      	ldr	r5, [r7, #16]
 801107a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	6879      	ldr	r1, [r7, #4]
 8011082:	eb05 060a 	add.w	r6, r5, sl
 8011086:	42b3      	cmp	r3, r6
 8011088:	b085      	sub	sp, #20
 801108a:	bfb8      	it	lt
 801108c:	3101      	addlt	r1, #1
 801108e:	f7ff fe93 	bl	8010db8 <_Balloc>
 8011092:	b930      	cbnz	r0, 80110a2 <__multiply+0x42>
 8011094:	4602      	mov	r2, r0
 8011096:	4b41      	ldr	r3, [pc, #260]	@ (801119c <__multiply+0x13c>)
 8011098:	4841      	ldr	r0, [pc, #260]	@ (80111a0 <__multiply+0x140>)
 801109a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801109e:	f7fe fbc9 	bl	800f834 <__assert_func>
 80110a2:	f100 0414 	add.w	r4, r0, #20
 80110a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80110aa:	4623      	mov	r3, r4
 80110ac:	2200      	movs	r2, #0
 80110ae:	4573      	cmp	r3, lr
 80110b0:	d320      	bcc.n	80110f4 <__multiply+0x94>
 80110b2:	f107 0814 	add.w	r8, r7, #20
 80110b6:	f109 0114 	add.w	r1, r9, #20
 80110ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80110be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80110c2:	9302      	str	r3, [sp, #8]
 80110c4:	1beb      	subs	r3, r5, r7
 80110c6:	3b15      	subs	r3, #21
 80110c8:	f023 0303 	bic.w	r3, r3, #3
 80110cc:	3304      	adds	r3, #4
 80110ce:	3715      	adds	r7, #21
 80110d0:	42bd      	cmp	r5, r7
 80110d2:	bf38      	it	cc
 80110d4:	2304      	movcc	r3, #4
 80110d6:	9301      	str	r3, [sp, #4]
 80110d8:	9b02      	ldr	r3, [sp, #8]
 80110da:	9103      	str	r1, [sp, #12]
 80110dc:	428b      	cmp	r3, r1
 80110de:	d80c      	bhi.n	80110fa <__multiply+0x9a>
 80110e0:	2e00      	cmp	r6, #0
 80110e2:	dd03      	ble.n	80110ec <__multiply+0x8c>
 80110e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d055      	beq.n	8011198 <__multiply+0x138>
 80110ec:	6106      	str	r6, [r0, #16]
 80110ee:	b005      	add	sp, #20
 80110f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f4:	f843 2b04 	str.w	r2, [r3], #4
 80110f8:	e7d9      	b.n	80110ae <__multiply+0x4e>
 80110fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80110fe:	f1ba 0f00 	cmp.w	sl, #0
 8011102:	d01f      	beq.n	8011144 <__multiply+0xe4>
 8011104:	46c4      	mov	ip, r8
 8011106:	46a1      	mov	r9, r4
 8011108:	2700      	movs	r7, #0
 801110a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801110e:	f8d9 3000 	ldr.w	r3, [r9]
 8011112:	fa1f fb82 	uxth.w	fp, r2
 8011116:	b29b      	uxth	r3, r3
 8011118:	fb0a 330b 	mla	r3, sl, fp, r3
 801111c:	443b      	add	r3, r7
 801111e:	f8d9 7000 	ldr.w	r7, [r9]
 8011122:	0c12      	lsrs	r2, r2, #16
 8011124:	0c3f      	lsrs	r7, r7, #16
 8011126:	fb0a 7202 	mla	r2, sl, r2, r7
 801112a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801112e:	b29b      	uxth	r3, r3
 8011130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011134:	4565      	cmp	r5, ip
 8011136:	f849 3b04 	str.w	r3, [r9], #4
 801113a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801113e:	d8e4      	bhi.n	801110a <__multiply+0xaa>
 8011140:	9b01      	ldr	r3, [sp, #4]
 8011142:	50e7      	str	r7, [r4, r3]
 8011144:	9b03      	ldr	r3, [sp, #12]
 8011146:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801114a:	3104      	adds	r1, #4
 801114c:	f1b9 0f00 	cmp.w	r9, #0
 8011150:	d020      	beq.n	8011194 <__multiply+0x134>
 8011152:	6823      	ldr	r3, [r4, #0]
 8011154:	4647      	mov	r7, r8
 8011156:	46a4      	mov	ip, r4
 8011158:	f04f 0a00 	mov.w	sl, #0
 801115c:	f8b7 b000 	ldrh.w	fp, [r7]
 8011160:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011164:	fb09 220b 	mla	r2, r9, fp, r2
 8011168:	4452      	add	r2, sl
 801116a:	b29b      	uxth	r3, r3
 801116c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011170:	f84c 3b04 	str.w	r3, [ip], #4
 8011174:	f857 3b04 	ldr.w	r3, [r7], #4
 8011178:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801117c:	f8bc 3000 	ldrh.w	r3, [ip]
 8011180:	fb09 330a 	mla	r3, r9, sl, r3
 8011184:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011188:	42bd      	cmp	r5, r7
 801118a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801118e:	d8e5      	bhi.n	801115c <__multiply+0xfc>
 8011190:	9a01      	ldr	r2, [sp, #4]
 8011192:	50a3      	str	r3, [r4, r2]
 8011194:	3404      	adds	r4, #4
 8011196:	e79f      	b.n	80110d8 <__multiply+0x78>
 8011198:	3e01      	subs	r6, #1
 801119a:	e7a1      	b.n	80110e0 <__multiply+0x80>
 801119c:	08017ccb 	.word	0x08017ccb
 80111a0:	08017d3c 	.word	0x08017d3c

080111a4 <__pow5mult>:
 80111a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111a8:	4615      	mov	r5, r2
 80111aa:	f012 0203 	ands.w	r2, r2, #3
 80111ae:	4607      	mov	r7, r0
 80111b0:	460e      	mov	r6, r1
 80111b2:	d007      	beq.n	80111c4 <__pow5mult+0x20>
 80111b4:	4c25      	ldr	r4, [pc, #148]	@ (801124c <__pow5mult+0xa8>)
 80111b6:	3a01      	subs	r2, #1
 80111b8:	2300      	movs	r3, #0
 80111ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111be:	f7ff fe5d 	bl	8010e7c <__multadd>
 80111c2:	4606      	mov	r6, r0
 80111c4:	10ad      	asrs	r5, r5, #2
 80111c6:	d03d      	beq.n	8011244 <__pow5mult+0xa0>
 80111c8:	69fc      	ldr	r4, [r7, #28]
 80111ca:	b97c      	cbnz	r4, 80111ec <__pow5mult+0x48>
 80111cc:	2010      	movs	r0, #16
 80111ce:	f7ff fd2b 	bl	8010c28 <malloc>
 80111d2:	4602      	mov	r2, r0
 80111d4:	61f8      	str	r0, [r7, #28]
 80111d6:	b928      	cbnz	r0, 80111e4 <__pow5mult+0x40>
 80111d8:	4b1d      	ldr	r3, [pc, #116]	@ (8011250 <__pow5mult+0xac>)
 80111da:	481e      	ldr	r0, [pc, #120]	@ (8011254 <__pow5mult+0xb0>)
 80111dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80111e0:	f7fe fb28 	bl	800f834 <__assert_func>
 80111e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111e8:	6004      	str	r4, [r0, #0]
 80111ea:	60c4      	str	r4, [r0, #12]
 80111ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80111f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111f4:	b94c      	cbnz	r4, 801120a <__pow5mult+0x66>
 80111f6:	f240 2171 	movw	r1, #625	@ 0x271
 80111fa:	4638      	mov	r0, r7
 80111fc:	f7ff ff1a 	bl	8011034 <__i2b>
 8011200:	2300      	movs	r3, #0
 8011202:	f8c8 0008 	str.w	r0, [r8, #8]
 8011206:	4604      	mov	r4, r0
 8011208:	6003      	str	r3, [r0, #0]
 801120a:	f04f 0900 	mov.w	r9, #0
 801120e:	07eb      	lsls	r3, r5, #31
 8011210:	d50a      	bpl.n	8011228 <__pow5mult+0x84>
 8011212:	4631      	mov	r1, r6
 8011214:	4622      	mov	r2, r4
 8011216:	4638      	mov	r0, r7
 8011218:	f7ff ff22 	bl	8011060 <__multiply>
 801121c:	4631      	mov	r1, r6
 801121e:	4680      	mov	r8, r0
 8011220:	4638      	mov	r0, r7
 8011222:	f7ff fe09 	bl	8010e38 <_Bfree>
 8011226:	4646      	mov	r6, r8
 8011228:	106d      	asrs	r5, r5, #1
 801122a:	d00b      	beq.n	8011244 <__pow5mult+0xa0>
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	b938      	cbnz	r0, 8011240 <__pow5mult+0x9c>
 8011230:	4622      	mov	r2, r4
 8011232:	4621      	mov	r1, r4
 8011234:	4638      	mov	r0, r7
 8011236:	f7ff ff13 	bl	8011060 <__multiply>
 801123a:	6020      	str	r0, [r4, #0]
 801123c:	f8c0 9000 	str.w	r9, [r0]
 8011240:	4604      	mov	r4, r0
 8011242:	e7e4      	b.n	801120e <__pow5mult+0x6a>
 8011244:	4630      	mov	r0, r6
 8011246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801124a:	bf00      	nop
 801124c:	08017f1c 	.word	0x08017f1c
 8011250:	08017b20 	.word	0x08017b20
 8011254:	08017d3c 	.word	0x08017d3c

08011258 <__lshift>:
 8011258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801125c:	460c      	mov	r4, r1
 801125e:	6849      	ldr	r1, [r1, #4]
 8011260:	6923      	ldr	r3, [r4, #16]
 8011262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011266:	68a3      	ldr	r3, [r4, #8]
 8011268:	4607      	mov	r7, r0
 801126a:	4691      	mov	r9, r2
 801126c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011270:	f108 0601 	add.w	r6, r8, #1
 8011274:	42b3      	cmp	r3, r6
 8011276:	db0b      	blt.n	8011290 <__lshift+0x38>
 8011278:	4638      	mov	r0, r7
 801127a:	f7ff fd9d 	bl	8010db8 <_Balloc>
 801127e:	4605      	mov	r5, r0
 8011280:	b948      	cbnz	r0, 8011296 <__lshift+0x3e>
 8011282:	4602      	mov	r2, r0
 8011284:	4b28      	ldr	r3, [pc, #160]	@ (8011328 <__lshift+0xd0>)
 8011286:	4829      	ldr	r0, [pc, #164]	@ (801132c <__lshift+0xd4>)
 8011288:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801128c:	f7fe fad2 	bl	800f834 <__assert_func>
 8011290:	3101      	adds	r1, #1
 8011292:	005b      	lsls	r3, r3, #1
 8011294:	e7ee      	b.n	8011274 <__lshift+0x1c>
 8011296:	2300      	movs	r3, #0
 8011298:	f100 0114 	add.w	r1, r0, #20
 801129c:	f100 0210 	add.w	r2, r0, #16
 80112a0:	4618      	mov	r0, r3
 80112a2:	4553      	cmp	r3, sl
 80112a4:	db33      	blt.n	801130e <__lshift+0xb6>
 80112a6:	6920      	ldr	r0, [r4, #16]
 80112a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112ac:	f104 0314 	add.w	r3, r4, #20
 80112b0:	f019 091f 	ands.w	r9, r9, #31
 80112b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112bc:	d02b      	beq.n	8011316 <__lshift+0xbe>
 80112be:	f1c9 0e20 	rsb	lr, r9, #32
 80112c2:	468a      	mov	sl, r1
 80112c4:	2200      	movs	r2, #0
 80112c6:	6818      	ldr	r0, [r3, #0]
 80112c8:	fa00 f009 	lsl.w	r0, r0, r9
 80112cc:	4310      	orrs	r0, r2
 80112ce:	f84a 0b04 	str.w	r0, [sl], #4
 80112d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80112d6:	459c      	cmp	ip, r3
 80112d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80112dc:	d8f3      	bhi.n	80112c6 <__lshift+0x6e>
 80112de:	ebac 0304 	sub.w	r3, ip, r4
 80112e2:	3b15      	subs	r3, #21
 80112e4:	f023 0303 	bic.w	r3, r3, #3
 80112e8:	3304      	adds	r3, #4
 80112ea:	f104 0015 	add.w	r0, r4, #21
 80112ee:	4560      	cmp	r0, ip
 80112f0:	bf88      	it	hi
 80112f2:	2304      	movhi	r3, #4
 80112f4:	50ca      	str	r2, [r1, r3]
 80112f6:	b10a      	cbz	r2, 80112fc <__lshift+0xa4>
 80112f8:	f108 0602 	add.w	r6, r8, #2
 80112fc:	3e01      	subs	r6, #1
 80112fe:	4638      	mov	r0, r7
 8011300:	612e      	str	r6, [r5, #16]
 8011302:	4621      	mov	r1, r4
 8011304:	f7ff fd98 	bl	8010e38 <_Bfree>
 8011308:	4628      	mov	r0, r5
 801130a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801130e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011312:	3301      	adds	r3, #1
 8011314:	e7c5      	b.n	80112a2 <__lshift+0x4a>
 8011316:	3904      	subs	r1, #4
 8011318:	f853 2b04 	ldr.w	r2, [r3], #4
 801131c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011320:	459c      	cmp	ip, r3
 8011322:	d8f9      	bhi.n	8011318 <__lshift+0xc0>
 8011324:	e7ea      	b.n	80112fc <__lshift+0xa4>
 8011326:	bf00      	nop
 8011328:	08017ccb 	.word	0x08017ccb
 801132c:	08017d3c 	.word	0x08017d3c

08011330 <__mcmp>:
 8011330:	690a      	ldr	r2, [r1, #16]
 8011332:	4603      	mov	r3, r0
 8011334:	6900      	ldr	r0, [r0, #16]
 8011336:	1a80      	subs	r0, r0, r2
 8011338:	b530      	push	{r4, r5, lr}
 801133a:	d10e      	bne.n	801135a <__mcmp+0x2a>
 801133c:	3314      	adds	r3, #20
 801133e:	3114      	adds	r1, #20
 8011340:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011344:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801134c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011350:	4295      	cmp	r5, r2
 8011352:	d003      	beq.n	801135c <__mcmp+0x2c>
 8011354:	d205      	bcs.n	8011362 <__mcmp+0x32>
 8011356:	f04f 30ff 	mov.w	r0, #4294967295
 801135a:	bd30      	pop	{r4, r5, pc}
 801135c:	42a3      	cmp	r3, r4
 801135e:	d3f3      	bcc.n	8011348 <__mcmp+0x18>
 8011360:	e7fb      	b.n	801135a <__mcmp+0x2a>
 8011362:	2001      	movs	r0, #1
 8011364:	e7f9      	b.n	801135a <__mcmp+0x2a>
	...

08011368 <__mdiff>:
 8011368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801136c:	4689      	mov	r9, r1
 801136e:	4606      	mov	r6, r0
 8011370:	4611      	mov	r1, r2
 8011372:	4648      	mov	r0, r9
 8011374:	4614      	mov	r4, r2
 8011376:	f7ff ffdb 	bl	8011330 <__mcmp>
 801137a:	1e05      	subs	r5, r0, #0
 801137c:	d112      	bne.n	80113a4 <__mdiff+0x3c>
 801137e:	4629      	mov	r1, r5
 8011380:	4630      	mov	r0, r6
 8011382:	f7ff fd19 	bl	8010db8 <_Balloc>
 8011386:	4602      	mov	r2, r0
 8011388:	b928      	cbnz	r0, 8011396 <__mdiff+0x2e>
 801138a:	4b3f      	ldr	r3, [pc, #252]	@ (8011488 <__mdiff+0x120>)
 801138c:	f240 2137 	movw	r1, #567	@ 0x237
 8011390:	483e      	ldr	r0, [pc, #248]	@ (801148c <__mdiff+0x124>)
 8011392:	f7fe fa4f 	bl	800f834 <__assert_func>
 8011396:	2301      	movs	r3, #1
 8011398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801139c:	4610      	mov	r0, r2
 801139e:	b003      	add	sp, #12
 80113a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a4:	bfbc      	itt	lt
 80113a6:	464b      	movlt	r3, r9
 80113a8:	46a1      	movlt	r9, r4
 80113aa:	4630      	mov	r0, r6
 80113ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80113b0:	bfba      	itte	lt
 80113b2:	461c      	movlt	r4, r3
 80113b4:	2501      	movlt	r5, #1
 80113b6:	2500      	movge	r5, #0
 80113b8:	f7ff fcfe 	bl	8010db8 <_Balloc>
 80113bc:	4602      	mov	r2, r0
 80113be:	b918      	cbnz	r0, 80113c8 <__mdiff+0x60>
 80113c0:	4b31      	ldr	r3, [pc, #196]	@ (8011488 <__mdiff+0x120>)
 80113c2:	f240 2145 	movw	r1, #581	@ 0x245
 80113c6:	e7e3      	b.n	8011390 <__mdiff+0x28>
 80113c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80113cc:	6926      	ldr	r6, [r4, #16]
 80113ce:	60c5      	str	r5, [r0, #12]
 80113d0:	f109 0310 	add.w	r3, r9, #16
 80113d4:	f109 0514 	add.w	r5, r9, #20
 80113d8:	f104 0e14 	add.w	lr, r4, #20
 80113dc:	f100 0b14 	add.w	fp, r0, #20
 80113e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80113e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80113e8:	9301      	str	r3, [sp, #4]
 80113ea:	46d9      	mov	r9, fp
 80113ec:	f04f 0c00 	mov.w	ip, #0
 80113f0:	9b01      	ldr	r3, [sp, #4]
 80113f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80113f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80113fa:	9301      	str	r3, [sp, #4]
 80113fc:	fa1f f38a 	uxth.w	r3, sl
 8011400:	4619      	mov	r1, r3
 8011402:	b283      	uxth	r3, r0
 8011404:	1acb      	subs	r3, r1, r3
 8011406:	0c00      	lsrs	r0, r0, #16
 8011408:	4463      	add	r3, ip
 801140a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801140e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011412:	b29b      	uxth	r3, r3
 8011414:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011418:	4576      	cmp	r6, lr
 801141a:	f849 3b04 	str.w	r3, [r9], #4
 801141e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011422:	d8e5      	bhi.n	80113f0 <__mdiff+0x88>
 8011424:	1b33      	subs	r3, r6, r4
 8011426:	3b15      	subs	r3, #21
 8011428:	f023 0303 	bic.w	r3, r3, #3
 801142c:	3415      	adds	r4, #21
 801142e:	3304      	adds	r3, #4
 8011430:	42a6      	cmp	r6, r4
 8011432:	bf38      	it	cc
 8011434:	2304      	movcc	r3, #4
 8011436:	441d      	add	r5, r3
 8011438:	445b      	add	r3, fp
 801143a:	461e      	mov	r6, r3
 801143c:	462c      	mov	r4, r5
 801143e:	4544      	cmp	r4, r8
 8011440:	d30e      	bcc.n	8011460 <__mdiff+0xf8>
 8011442:	f108 0103 	add.w	r1, r8, #3
 8011446:	1b49      	subs	r1, r1, r5
 8011448:	f021 0103 	bic.w	r1, r1, #3
 801144c:	3d03      	subs	r5, #3
 801144e:	45a8      	cmp	r8, r5
 8011450:	bf38      	it	cc
 8011452:	2100      	movcc	r1, #0
 8011454:	440b      	add	r3, r1
 8011456:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801145a:	b191      	cbz	r1, 8011482 <__mdiff+0x11a>
 801145c:	6117      	str	r7, [r2, #16]
 801145e:	e79d      	b.n	801139c <__mdiff+0x34>
 8011460:	f854 1b04 	ldr.w	r1, [r4], #4
 8011464:	46e6      	mov	lr, ip
 8011466:	0c08      	lsrs	r0, r1, #16
 8011468:	fa1c fc81 	uxtah	ip, ip, r1
 801146c:	4471      	add	r1, lr
 801146e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011472:	b289      	uxth	r1, r1
 8011474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011478:	f846 1b04 	str.w	r1, [r6], #4
 801147c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011480:	e7dd      	b.n	801143e <__mdiff+0xd6>
 8011482:	3f01      	subs	r7, #1
 8011484:	e7e7      	b.n	8011456 <__mdiff+0xee>
 8011486:	bf00      	nop
 8011488:	08017ccb 	.word	0x08017ccb
 801148c:	08017d3c 	.word	0x08017d3c

08011490 <__ulp>:
 8011490:	b082      	sub	sp, #8
 8011492:	ed8d 0b00 	vstr	d0, [sp]
 8011496:	9a01      	ldr	r2, [sp, #4]
 8011498:	4b0f      	ldr	r3, [pc, #60]	@ (80114d8 <__ulp+0x48>)
 801149a:	4013      	ands	r3, r2
 801149c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	dc08      	bgt.n	80114b6 <__ulp+0x26>
 80114a4:	425b      	negs	r3, r3
 80114a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80114aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80114ae:	da04      	bge.n	80114ba <__ulp+0x2a>
 80114b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80114b4:	4113      	asrs	r3, r2
 80114b6:	2200      	movs	r2, #0
 80114b8:	e008      	b.n	80114cc <__ulp+0x3c>
 80114ba:	f1a2 0314 	sub.w	r3, r2, #20
 80114be:	2b1e      	cmp	r3, #30
 80114c0:	bfda      	itte	le
 80114c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80114c6:	40da      	lsrle	r2, r3
 80114c8:	2201      	movgt	r2, #1
 80114ca:	2300      	movs	r3, #0
 80114cc:	4619      	mov	r1, r3
 80114ce:	4610      	mov	r0, r2
 80114d0:	ec41 0b10 	vmov	d0, r0, r1
 80114d4:	b002      	add	sp, #8
 80114d6:	4770      	bx	lr
 80114d8:	7ff00000 	.word	0x7ff00000

080114dc <__b2d>:
 80114dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114e0:	6906      	ldr	r6, [r0, #16]
 80114e2:	f100 0814 	add.w	r8, r0, #20
 80114e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80114ea:	1f37      	subs	r7, r6, #4
 80114ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80114f0:	4610      	mov	r0, r2
 80114f2:	f7ff fd53 	bl	8010f9c <__hi0bits>
 80114f6:	f1c0 0320 	rsb	r3, r0, #32
 80114fa:	280a      	cmp	r0, #10
 80114fc:	600b      	str	r3, [r1, #0]
 80114fe:	491b      	ldr	r1, [pc, #108]	@ (801156c <__b2d+0x90>)
 8011500:	dc15      	bgt.n	801152e <__b2d+0x52>
 8011502:	f1c0 0c0b 	rsb	ip, r0, #11
 8011506:	fa22 f30c 	lsr.w	r3, r2, ip
 801150a:	45b8      	cmp	r8, r7
 801150c:	ea43 0501 	orr.w	r5, r3, r1
 8011510:	bf34      	ite	cc
 8011512:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011516:	2300      	movcs	r3, #0
 8011518:	3015      	adds	r0, #21
 801151a:	fa02 f000 	lsl.w	r0, r2, r0
 801151e:	fa23 f30c 	lsr.w	r3, r3, ip
 8011522:	4303      	orrs	r3, r0
 8011524:	461c      	mov	r4, r3
 8011526:	ec45 4b10 	vmov	d0, r4, r5
 801152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801152e:	45b8      	cmp	r8, r7
 8011530:	bf3a      	itte	cc
 8011532:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011536:	f1a6 0708 	subcc.w	r7, r6, #8
 801153a:	2300      	movcs	r3, #0
 801153c:	380b      	subs	r0, #11
 801153e:	d012      	beq.n	8011566 <__b2d+0x8a>
 8011540:	f1c0 0120 	rsb	r1, r0, #32
 8011544:	fa23 f401 	lsr.w	r4, r3, r1
 8011548:	4082      	lsls	r2, r0
 801154a:	4322      	orrs	r2, r4
 801154c:	4547      	cmp	r7, r8
 801154e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011552:	bf8c      	ite	hi
 8011554:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011558:	2200      	movls	r2, #0
 801155a:	4083      	lsls	r3, r0
 801155c:	40ca      	lsrs	r2, r1
 801155e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011562:	4313      	orrs	r3, r2
 8011564:	e7de      	b.n	8011524 <__b2d+0x48>
 8011566:	ea42 0501 	orr.w	r5, r2, r1
 801156a:	e7db      	b.n	8011524 <__b2d+0x48>
 801156c:	3ff00000 	.word	0x3ff00000

08011570 <__d2b>:
 8011570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011574:	460f      	mov	r7, r1
 8011576:	2101      	movs	r1, #1
 8011578:	ec59 8b10 	vmov	r8, r9, d0
 801157c:	4616      	mov	r6, r2
 801157e:	f7ff fc1b 	bl	8010db8 <_Balloc>
 8011582:	4604      	mov	r4, r0
 8011584:	b930      	cbnz	r0, 8011594 <__d2b+0x24>
 8011586:	4602      	mov	r2, r0
 8011588:	4b23      	ldr	r3, [pc, #140]	@ (8011618 <__d2b+0xa8>)
 801158a:	4824      	ldr	r0, [pc, #144]	@ (801161c <__d2b+0xac>)
 801158c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011590:	f7fe f950 	bl	800f834 <__assert_func>
 8011594:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801159c:	b10d      	cbz	r5, 80115a2 <__d2b+0x32>
 801159e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80115a2:	9301      	str	r3, [sp, #4]
 80115a4:	f1b8 0300 	subs.w	r3, r8, #0
 80115a8:	d023      	beq.n	80115f2 <__d2b+0x82>
 80115aa:	4668      	mov	r0, sp
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	f7ff fd14 	bl	8010fda <__lo0bits>
 80115b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80115b6:	b1d0      	cbz	r0, 80115ee <__d2b+0x7e>
 80115b8:	f1c0 0320 	rsb	r3, r0, #32
 80115bc:	fa02 f303 	lsl.w	r3, r2, r3
 80115c0:	430b      	orrs	r3, r1
 80115c2:	40c2      	lsrs	r2, r0
 80115c4:	6163      	str	r3, [r4, #20]
 80115c6:	9201      	str	r2, [sp, #4]
 80115c8:	9b01      	ldr	r3, [sp, #4]
 80115ca:	61a3      	str	r3, [r4, #24]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	bf0c      	ite	eq
 80115d0:	2201      	moveq	r2, #1
 80115d2:	2202      	movne	r2, #2
 80115d4:	6122      	str	r2, [r4, #16]
 80115d6:	b1a5      	cbz	r5, 8011602 <__d2b+0x92>
 80115d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80115dc:	4405      	add	r5, r0
 80115de:	603d      	str	r5, [r7, #0]
 80115e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80115e4:	6030      	str	r0, [r6, #0]
 80115e6:	4620      	mov	r0, r4
 80115e8:	b003      	add	sp, #12
 80115ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115ee:	6161      	str	r1, [r4, #20]
 80115f0:	e7ea      	b.n	80115c8 <__d2b+0x58>
 80115f2:	a801      	add	r0, sp, #4
 80115f4:	f7ff fcf1 	bl	8010fda <__lo0bits>
 80115f8:	9b01      	ldr	r3, [sp, #4]
 80115fa:	6163      	str	r3, [r4, #20]
 80115fc:	3020      	adds	r0, #32
 80115fe:	2201      	movs	r2, #1
 8011600:	e7e8      	b.n	80115d4 <__d2b+0x64>
 8011602:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011606:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801160a:	6038      	str	r0, [r7, #0]
 801160c:	6918      	ldr	r0, [r3, #16]
 801160e:	f7ff fcc5 	bl	8010f9c <__hi0bits>
 8011612:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011616:	e7e5      	b.n	80115e4 <__d2b+0x74>
 8011618:	08017ccb 	.word	0x08017ccb
 801161c:	08017d3c 	.word	0x08017d3c

08011620 <__ratio>:
 8011620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011624:	b085      	sub	sp, #20
 8011626:	e9cd 1000 	strd	r1, r0, [sp]
 801162a:	a902      	add	r1, sp, #8
 801162c:	f7ff ff56 	bl	80114dc <__b2d>
 8011630:	9800      	ldr	r0, [sp, #0]
 8011632:	a903      	add	r1, sp, #12
 8011634:	ec55 4b10 	vmov	r4, r5, d0
 8011638:	f7ff ff50 	bl	80114dc <__b2d>
 801163c:	9b01      	ldr	r3, [sp, #4]
 801163e:	6919      	ldr	r1, [r3, #16]
 8011640:	9b00      	ldr	r3, [sp, #0]
 8011642:	691b      	ldr	r3, [r3, #16]
 8011644:	1ac9      	subs	r1, r1, r3
 8011646:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801164a:	1a9b      	subs	r3, r3, r2
 801164c:	ec5b ab10 	vmov	sl, fp, d0
 8011650:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011654:	2b00      	cmp	r3, #0
 8011656:	bfce      	itee	gt
 8011658:	462a      	movgt	r2, r5
 801165a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801165e:	465a      	movle	r2, fp
 8011660:	462f      	mov	r7, r5
 8011662:	46d9      	mov	r9, fp
 8011664:	bfcc      	ite	gt
 8011666:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801166a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801166e:	464b      	mov	r3, r9
 8011670:	4652      	mov	r2, sl
 8011672:	4620      	mov	r0, r4
 8011674:	4639      	mov	r1, r7
 8011676:	f7ef f8f9 	bl	800086c <__aeabi_ddiv>
 801167a:	ec41 0b10 	vmov	d0, r0, r1
 801167e:	b005      	add	sp, #20
 8011680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011684 <__copybits>:
 8011684:	3901      	subs	r1, #1
 8011686:	b570      	push	{r4, r5, r6, lr}
 8011688:	1149      	asrs	r1, r1, #5
 801168a:	6914      	ldr	r4, [r2, #16]
 801168c:	3101      	adds	r1, #1
 801168e:	f102 0314 	add.w	r3, r2, #20
 8011692:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011696:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801169a:	1f05      	subs	r5, r0, #4
 801169c:	42a3      	cmp	r3, r4
 801169e:	d30c      	bcc.n	80116ba <__copybits+0x36>
 80116a0:	1aa3      	subs	r3, r4, r2
 80116a2:	3b11      	subs	r3, #17
 80116a4:	f023 0303 	bic.w	r3, r3, #3
 80116a8:	3211      	adds	r2, #17
 80116aa:	42a2      	cmp	r2, r4
 80116ac:	bf88      	it	hi
 80116ae:	2300      	movhi	r3, #0
 80116b0:	4418      	add	r0, r3
 80116b2:	2300      	movs	r3, #0
 80116b4:	4288      	cmp	r0, r1
 80116b6:	d305      	bcc.n	80116c4 <__copybits+0x40>
 80116b8:	bd70      	pop	{r4, r5, r6, pc}
 80116ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80116be:	f845 6f04 	str.w	r6, [r5, #4]!
 80116c2:	e7eb      	b.n	801169c <__copybits+0x18>
 80116c4:	f840 3b04 	str.w	r3, [r0], #4
 80116c8:	e7f4      	b.n	80116b4 <__copybits+0x30>

080116ca <__any_on>:
 80116ca:	f100 0214 	add.w	r2, r0, #20
 80116ce:	6900      	ldr	r0, [r0, #16]
 80116d0:	114b      	asrs	r3, r1, #5
 80116d2:	4298      	cmp	r0, r3
 80116d4:	b510      	push	{r4, lr}
 80116d6:	db11      	blt.n	80116fc <__any_on+0x32>
 80116d8:	dd0a      	ble.n	80116f0 <__any_on+0x26>
 80116da:	f011 011f 	ands.w	r1, r1, #31
 80116de:	d007      	beq.n	80116f0 <__any_on+0x26>
 80116e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80116e4:	fa24 f001 	lsr.w	r0, r4, r1
 80116e8:	fa00 f101 	lsl.w	r1, r0, r1
 80116ec:	428c      	cmp	r4, r1
 80116ee:	d10b      	bne.n	8011708 <__any_on+0x3e>
 80116f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80116f4:	4293      	cmp	r3, r2
 80116f6:	d803      	bhi.n	8011700 <__any_on+0x36>
 80116f8:	2000      	movs	r0, #0
 80116fa:	bd10      	pop	{r4, pc}
 80116fc:	4603      	mov	r3, r0
 80116fe:	e7f7      	b.n	80116f0 <__any_on+0x26>
 8011700:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011704:	2900      	cmp	r1, #0
 8011706:	d0f5      	beq.n	80116f4 <__any_on+0x2a>
 8011708:	2001      	movs	r0, #1
 801170a:	e7f6      	b.n	80116fa <__any_on+0x30>

0801170c <__ascii_wctomb>:
 801170c:	4603      	mov	r3, r0
 801170e:	4608      	mov	r0, r1
 8011710:	b141      	cbz	r1, 8011724 <__ascii_wctomb+0x18>
 8011712:	2aff      	cmp	r2, #255	@ 0xff
 8011714:	d904      	bls.n	8011720 <__ascii_wctomb+0x14>
 8011716:	228a      	movs	r2, #138	@ 0x8a
 8011718:	601a      	str	r2, [r3, #0]
 801171a:	f04f 30ff 	mov.w	r0, #4294967295
 801171e:	4770      	bx	lr
 8011720:	700a      	strb	r2, [r1, #0]
 8011722:	2001      	movs	r0, #1
 8011724:	4770      	bx	lr

08011726 <__ssputs_r>:
 8011726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801172a:	688e      	ldr	r6, [r1, #8]
 801172c:	461f      	mov	r7, r3
 801172e:	42be      	cmp	r6, r7
 8011730:	680b      	ldr	r3, [r1, #0]
 8011732:	4682      	mov	sl, r0
 8011734:	460c      	mov	r4, r1
 8011736:	4690      	mov	r8, r2
 8011738:	d82d      	bhi.n	8011796 <__ssputs_r+0x70>
 801173a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801173e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011742:	d026      	beq.n	8011792 <__ssputs_r+0x6c>
 8011744:	6965      	ldr	r5, [r4, #20]
 8011746:	6909      	ldr	r1, [r1, #16]
 8011748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801174c:	eba3 0901 	sub.w	r9, r3, r1
 8011750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011754:	1c7b      	adds	r3, r7, #1
 8011756:	444b      	add	r3, r9
 8011758:	106d      	asrs	r5, r5, #1
 801175a:	429d      	cmp	r5, r3
 801175c:	bf38      	it	cc
 801175e:	461d      	movcc	r5, r3
 8011760:	0553      	lsls	r3, r2, #21
 8011762:	d527      	bpl.n	80117b4 <__ssputs_r+0x8e>
 8011764:	4629      	mov	r1, r5
 8011766:	f7ff fa89 	bl	8010c7c <_malloc_r>
 801176a:	4606      	mov	r6, r0
 801176c:	b360      	cbz	r0, 80117c8 <__ssputs_r+0xa2>
 801176e:	6921      	ldr	r1, [r4, #16]
 8011770:	464a      	mov	r2, r9
 8011772:	f7fe f840 	bl	800f7f6 <memcpy>
 8011776:	89a3      	ldrh	r3, [r4, #12]
 8011778:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801177c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011780:	81a3      	strh	r3, [r4, #12]
 8011782:	6126      	str	r6, [r4, #16]
 8011784:	6165      	str	r5, [r4, #20]
 8011786:	444e      	add	r6, r9
 8011788:	eba5 0509 	sub.w	r5, r5, r9
 801178c:	6026      	str	r6, [r4, #0]
 801178e:	60a5      	str	r5, [r4, #8]
 8011790:	463e      	mov	r6, r7
 8011792:	42be      	cmp	r6, r7
 8011794:	d900      	bls.n	8011798 <__ssputs_r+0x72>
 8011796:	463e      	mov	r6, r7
 8011798:	6820      	ldr	r0, [r4, #0]
 801179a:	4632      	mov	r2, r6
 801179c:	4641      	mov	r1, r8
 801179e:	f000 fd68 	bl	8012272 <memmove>
 80117a2:	68a3      	ldr	r3, [r4, #8]
 80117a4:	1b9b      	subs	r3, r3, r6
 80117a6:	60a3      	str	r3, [r4, #8]
 80117a8:	6823      	ldr	r3, [r4, #0]
 80117aa:	4433      	add	r3, r6
 80117ac:	6023      	str	r3, [r4, #0]
 80117ae:	2000      	movs	r0, #0
 80117b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117b4:	462a      	mov	r2, r5
 80117b6:	f000 fda2 	bl	80122fe <_realloc_r>
 80117ba:	4606      	mov	r6, r0
 80117bc:	2800      	cmp	r0, #0
 80117be:	d1e0      	bne.n	8011782 <__ssputs_r+0x5c>
 80117c0:	6921      	ldr	r1, [r4, #16]
 80117c2:	4650      	mov	r0, sl
 80117c4:	f7fe feac 	bl	8010520 <_free_r>
 80117c8:	230c      	movs	r3, #12
 80117ca:	f8ca 3000 	str.w	r3, [sl]
 80117ce:	89a3      	ldrh	r3, [r4, #12]
 80117d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117d4:	81a3      	strh	r3, [r4, #12]
 80117d6:	f04f 30ff 	mov.w	r0, #4294967295
 80117da:	e7e9      	b.n	80117b0 <__ssputs_r+0x8a>

080117dc <_svfiprintf_r>:
 80117dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e0:	4698      	mov	r8, r3
 80117e2:	898b      	ldrh	r3, [r1, #12]
 80117e4:	061b      	lsls	r3, r3, #24
 80117e6:	b09d      	sub	sp, #116	@ 0x74
 80117e8:	4607      	mov	r7, r0
 80117ea:	460d      	mov	r5, r1
 80117ec:	4614      	mov	r4, r2
 80117ee:	d510      	bpl.n	8011812 <_svfiprintf_r+0x36>
 80117f0:	690b      	ldr	r3, [r1, #16]
 80117f2:	b973      	cbnz	r3, 8011812 <_svfiprintf_r+0x36>
 80117f4:	2140      	movs	r1, #64	@ 0x40
 80117f6:	f7ff fa41 	bl	8010c7c <_malloc_r>
 80117fa:	6028      	str	r0, [r5, #0]
 80117fc:	6128      	str	r0, [r5, #16]
 80117fe:	b930      	cbnz	r0, 801180e <_svfiprintf_r+0x32>
 8011800:	230c      	movs	r3, #12
 8011802:	603b      	str	r3, [r7, #0]
 8011804:	f04f 30ff 	mov.w	r0, #4294967295
 8011808:	b01d      	add	sp, #116	@ 0x74
 801180a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801180e:	2340      	movs	r3, #64	@ 0x40
 8011810:	616b      	str	r3, [r5, #20]
 8011812:	2300      	movs	r3, #0
 8011814:	9309      	str	r3, [sp, #36]	@ 0x24
 8011816:	2320      	movs	r3, #32
 8011818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801181c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011820:	2330      	movs	r3, #48	@ 0x30
 8011822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80119c0 <_svfiprintf_r+0x1e4>
 8011826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801182a:	f04f 0901 	mov.w	r9, #1
 801182e:	4623      	mov	r3, r4
 8011830:	469a      	mov	sl, r3
 8011832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011836:	b10a      	cbz	r2, 801183c <_svfiprintf_r+0x60>
 8011838:	2a25      	cmp	r2, #37	@ 0x25
 801183a:	d1f9      	bne.n	8011830 <_svfiprintf_r+0x54>
 801183c:	ebba 0b04 	subs.w	fp, sl, r4
 8011840:	d00b      	beq.n	801185a <_svfiprintf_r+0x7e>
 8011842:	465b      	mov	r3, fp
 8011844:	4622      	mov	r2, r4
 8011846:	4629      	mov	r1, r5
 8011848:	4638      	mov	r0, r7
 801184a:	f7ff ff6c 	bl	8011726 <__ssputs_r>
 801184e:	3001      	adds	r0, #1
 8011850:	f000 80a7 	beq.w	80119a2 <_svfiprintf_r+0x1c6>
 8011854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011856:	445a      	add	r2, fp
 8011858:	9209      	str	r2, [sp, #36]	@ 0x24
 801185a:	f89a 3000 	ldrb.w	r3, [sl]
 801185e:	2b00      	cmp	r3, #0
 8011860:	f000 809f 	beq.w	80119a2 <_svfiprintf_r+0x1c6>
 8011864:	2300      	movs	r3, #0
 8011866:	f04f 32ff 	mov.w	r2, #4294967295
 801186a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801186e:	f10a 0a01 	add.w	sl, sl, #1
 8011872:	9304      	str	r3, [sp, #16]
 8011874:	9307      	str	r3, [sp, #28]
 8011876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801187a:	931a      	str	r3, [sp, #104]	@ 0x68
 801187c:	4654      	mov	r4, sl
 801187e:	2205      	movs	r2, #5
 8011880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011884:	484e      	ldr	r0, [pc, #312]	@ (80119c0 <_svfiprintf_r+0x1e4>)
 8011886:	f7ee fcb3 	bl	80001f0 <memchr>
 801188a:	9a04      	ldr	r2, [sp, #16]
 801188c:	b9d8      	cbnz	r0, 80118c6 <_svfiprintf_r+0xea>
 801188e:	06d0      	lsls	r0, r2, #27
 8011890:	bf44      	itt	mi
 8011892:	2320      	movmi	r3, #32
 8011894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011898:	0711      	lsls	r1, r2, #28
 801189a:	bf44      	itt	mi
 801189c:	232b      	movmi	r3, #43	@ 0x2b
 801189e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118a2:	f89a 3000 	ldrb.w	r3, [sl]
 80118a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80118a8:	d015      	beq.n	80118d6 <_svfiprintf_r+0xfa>
 80118aa:	9a07      	ldr	r2, [sp, #28]
 80118ac:	4654      	mov	r4, sl
 80118ae:	2000      	movs	r0, #0
 80118b0:	f04f 0c0a 	mov.w	ip, #10
 80118b4:	4621      	mov	r1, r4
 80118b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118ba:	3b30      	subs	r3, #48	@ 0x30
 80118bc:	2b09      	cmp	r3, #9
 80118be:	d94b      	bls.n	8011958 <_svfiprintf_r+0x17c>
 80118c0:	b1b0      	cbz	r0, 80118f0 <_svfiprintf_r+0x114>
 80118c2:	9207      	str	r2, [sp, #28]
 80118c4:	e014      	b.n	80118f0 <_svfiprintf_r+0x114>
 80118c6:	eba0 0308 	sub.w	r3, r0, r8
 80118ca:	fa09 f303 	lsl.w	r3, r9, r3
 80118ce:	4313      	orrs	r3, r2
 80118d0:	9304      	str	r3, [sp, #16]
 80118d2:	46a2      	mov	sl, r4
 80118d4:	e7d2      	b.n	801187c <_svfiprintf_r+0xa0>
 80118d6:	9b03      	ldr	r3, [sp, #12]
 80118d8:	1d19      	adds	r1, r3, #4
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	9103      	str	r1, [sp, #12]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	bfbb      	ittet	lt
 80118e2:	425b      	neglt	r3, r3
 80118e4:	f042 0202 	orrlt.w	r2, r2, #2
 80118e8:	9307      	strge	r3, [sp, #28]
 80118ea:	9307      	strlt	r3, [sp, #28]
 80118ec:	bfb8      	it	lt
 80118ee:	9204      	strlt	r2, [sp, #16]
 80118f0:	7823      	ldrb	r3, [r4, #0]
 80118f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80118f4:	d10a      	bne.n	801190c <_svfiprintf_r+0x130>
 80118f6:	7863      	ldrb	r3, [r4, #1]
 80118f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80118fa:	d132      	bne.n	8011962 <_svfiprintf_r+0x186>
 80118fc:	9b03      	ldr	r3, [sp, #12]
 80118fe:	1d1a      	adds	r2, r3, #4
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	9203      	str	r2, [sp, #12]
 8011904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011908:	3402      	adds	r4, #2
 801190a:	9305      	str	r3, [sp, #20]
 801190c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80119d0 <_svfiprintf_r+0x1f4>
 8011910:	7821      	ldrb	r1, [r4, #0]
 8011912:	2203      	movs	r2, #3
 8011914:	4650      	mov	r0, sl
 8011916:	f7ee fc6b 	bl	80001f0 <memchr>
 801191a:	b138      	cbz	r0, 801192c <_svfiprintf_r+0x150>
 801191c:	9b04      	ldr	r3, [sp, #16]
 801191e:	eba0 000a 	sub.w	r0, r0, sl
 8011922:	2240      	movs	r2, #64	@ 0x40
 8011924:	4082      	lsls	r2, r0
 8011926:	4313      	orrs	r3, r2
 8011928:	3401      	adds	r4, #1
 801192a:	9304      	str	r3, [sp, #16]
 801192c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011930:	4824      	ldr	r0, [pc, #144]	@ (80119c4 <_svfiprintf_r+0x1e8>)
 8011932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011936:	2206      	movs	r2, #6
 8011938:	f7ee fc5a 	bl	80001f0 <memchr>
 801193c:	2800      	cmp	r0, #0
 801193e:	d036      	beq.n	80119ae <_svfiprintf_r+0x1d2>
 8011940:	4b21      	ldr	r3, [pc, #132]	@ (80119c8 <_svfiprintf_r+0x1ec>)
 8011942:	bb1b      	cbnz	r3, 801198c <_svfiprintf_r+0x1b0>
 8011944:	9b03      	ldr	r3, [sp, #12]
 8011946:	3307      	adds	r3, #7
 8011948:	f023 0307 	bic.w	r3, r3, #7
 801194c:	3308      	adds	r3, #8
 801194e:	9303      	str	r3, [sp, #12]
 8011950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011952:	4433      	add	r3, r6
 8011954:	9309      	str	r3, [sp, #36]	@ 0x24
 8011956:	e76a      	b.n	801182e <_svfiprintf_r+0x52>
 8011958:	fb0c 3202 	mla	r2, ip, r2, r3
 801195c:	460c      	mov	r4, r1
 801195e:	2001      	movs	r0, #1
 8011960:	e7a8      	b.n	80118b4 <_svfiprintf_r+0xd8>
 8011962:	2300      	movs	r3, #0
 8011964:	3401      	adds	r4, #1
 8011966:	9305      	str	r3, [sp, #20]
 8011968:	4619      	mov	r1, r3
 801196a:	f04f 0c0a 	mov.w	ip, #10
 801196e:	4620      	mov	r0, r4
 8011970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011974:	3a30      	subs	r2, #48	@ 0x30
 8011976:	2a09      	cmp	r2, #9
 8011978:	d903      	bls.n	8011982 <_svfiprintf_r+0x1a6>
 801197a:	2b00      	cmp	r3, #0
 801197c:	d0c6      	beq.n	801190c <_svfiprintf_r+0x130>
 801197e:	9105      	str	r1, [sp, #20]
 8011980:	e7c4      	b.n	801190c <_svfiprintf_r+0x130>
 8011982:	fb0c 2101 	mla	r1, ip, r1, r2
 8011986:	4604      	mov	r4, r0
 8011988:	2301      	movs	r3, #1
 801198a:	e7f0      	b.n	801196e <_svfiprintf_r+0x192>
 801198c:	ab03      	add	r3, sp, #12
 801198e:	9300      	str	r3, [sp, #0]
 8011990:	462a      	mov	r2, r5
 8011992:	4b0e      	ldr	r3, [pc, #56]	@ (80119cc <_svfiprintf_r+0x1f0>)
 8011994:	a904      	add	r1, sp, #16
 8011996:	4638      	mov	r0, r7
 8011998:	f7fc feba 	bl	800e710 <_printf_float>
 801199c:	1c42      	adds	r2, r0, #1
 801199e:	4606      	mov	r6, r0
 80119a0:	d1d6      	bne.n	8011950 <_svfiprintf_r+0x174>
 80119a2:	89ab      	ldrh	r3, [r5, #12]
 80119a4:	065b      	lsls	r3, r3, #25
 80119a6:	f53f af2d 	bmi.w	8011804 <_svfiprintf_r+0x28>
 80119aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119ac:	e72c      	b.n	8011808 <_svfiprintf_r+0x2c>
 80119ae:	ab03      	add	r3, sp, #12
 80119b0:	9300      	str	r3, [sp, #0]
 80119b2:	462a      	mov	r2, r5
 80119b4:	4b05      	ldr	r3, [pc, #20]	@ (80119cc <_svfiprintf_r+0x1f0>)
 80119b6:	a904      	add	r1, sp, #16
 80119b8:	4638      	mov	r0, r7
 80119ba:	f7fd f941 	bl	800ec40 <_printf_i>
 80119be:	e7ed      	b.n	801199c <_svfiprintf_r+0x1c0>
 80119c0:	08017d95 	.word	0x08017d95
 80119c4:	08017d9f 	.word	0x08017d9f
 80119c8:	0800e711 	.word	0x0800e711
 80119cc:	08011727 	.word	0x08011727
 80119d0:	08017d9b 	.word	0x08017d9b

080119d4 <_sungetc_r>:
 80119d4:	b538      	push	{r3, r4, r5, lr}
 80119d6:	1c4b      	adds	r3, r1, #1
 80119d8:	4614      	mov	r4, r2
 80119da:	d103      	bne.n	80119e4 <_sungetc_r+0x10>
 80119dc:	f04f 35ff 	mov.w	r5, #4294967295
 80119e0:	4628      	mov	r0, r5
 80119e2:	bd38      	pop	{r3, r4, r5, pc}
 80119e4:	8993      	ldrh	r3, [r2, #12]
 80119e6:	f023 0320 	bic.w	r3, r3, #32
 80119ea:	8193      	strh	r3, [r2, #12]
 80119ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80119ee:	6852      	ldr	r2, [r2, #4]
 80119f0:	b2cd      	uxtb	r5, r1
 80119f2:	b18b      	cbz	r3, 8011a18 <_sungetc_r+0x44>
 80119f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80119f6:	4293      	cmp	r3, r2
 80119f8:	dd08      	ble.n	8011a0c <_sungetc_r+0x38>
 80119fa:	6823      	ldr	r3, [r4, #0]
 80119fc:	1e5a      	subs	r2, r3, #1
 80119fe:	6022      	str	r2, [r4, #0]
 8011a00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011a04:	6863      	ldr	r3, [r4, #4]
 8011a06:	3301      	adds	r3, #1
 8011a08:	6063      	str	r3, [r4, #4]
 8011a0a:	e7e9      	b.n	80119e0 <_sungetc_r+0xc>
 8011a0c:	4621      	mov	r1, r4
 8011a0e:	f000 fbf6 	bl	80121fe <__submore>
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d0f1      	beq.n	80119fa <_sungetc_r+0x26>
 8011a16:	e7e1      	b.n	80119dc <_sungetc_r+0x8>
 8011a18:	6921      	ldr	r1, [r4, #16]
 8011a1a:	6823      	ldr	r3, [r4, #0]
 8011a1c:	b151      	cbz	r1, 8011a34 <_sungetc_r+0x60>
 8011a1e:	4299      	cmp	r1, r3
 8011a20:	d208      	bcs.n	8011a34 <_sungetc_r+0x60>
 8011a22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011a26:	42a9      	cmp	r1, r5
 8011a28:	d104      	bne.n	8011a34 <_sungetc_r+0x60>
 8011a2a:	3b01      	subs	r3, #1
 8011a2c:	3201      	adds	r2, #1
 8011a2e:	6023      	str	r3, [r4, #0]
 8011a30:	6062      	str	r2, [r4, #4]
 8011a32:	e7d5      	b.n	80119e0 <_sungetc_r+0xc>
 8011a34:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011a38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a3e:	2303      	movs	r3, #3
 8011a40:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011a42:	4623      	mov	r3, r4
 8011a44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011a48:	6023      	str	r3, [r4, #0]
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	e7dc      	b.n	8011a08 <_sungetc_r+0x34>

08011a4e <__ssrefill_r>:
 8011a4e:	b510      	push	{r4, lr}
 8011a50:	460c      	mov	r4, r1
 8011a52:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011a54:	b169      	cbz	r1, 8011a72 <__ssrefill_r+0x24>
 8011a56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a5a:	4299      	cmp	r1, r3
 8011a5c:	d001      	beq.n	8011a62 <__ssrefill_r+0x14>
 8011a5e:	f7fe fd5f 	bl	8010520 <_free_r>
 8011a62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a64:	6063      	str	r3, [r4, #4]
 8011a66:	2000      	movs	r0, #0
 8011a68:	6360      	str	r0, [r4, #52]	@ 0x34
 8011a6a:	b113      	cbz	r3, 8011a72 <__ssrefill_r+0x24>
 8011a6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011a6e:	6023      	str	r3, [r4, #0]
 8011a70:	bd10      	pop	{r4, pc}
 8011a72:	6923      	ldr	r3, [r4, #16]
 8011a74:	6023      	str	r3, [r4, #0]
 8011a76:	2300      	movs	r3, #0
 8011a78:	6063      	str	r3, [r4, #4]
 8011a7a:	89a3      	ldrh	r3, [r4, #12]
 8011a7c:	f043 0320 	orr.w	r3, r3, #32
 8011a80:	81a3      	strh	r3, [r4, #12]
 8011a82:	f04f 30ff 	mov.w	r0, #4294967295
 8011a86:	e7f3      	b.n	8011a70 <__ssrefill_r+0x22>

08011a88 <__ssvfiscanf_r>:
 8011a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a8c:	460c      	mov	r4, r1
 8011a8e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011a92:	2100      	movs	r1, #0
 8011a94:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011a98:	49a6      	ldr	r1, [pc, #664]	@ (8011d34 <__ssvfiscanf_r+0x2ac>)
 8011a9a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011a9c:	f10d 0804 	add.w	r8, sp, #4
 8011aa0:	49a5      	ldr	r1, [pc, #660]	@ (8011d38 <__ssvfiscanf_r+0x2b0>)
 8011aa2:	4fa6      	ldr	r7, [pc, #664]	@ (8011d3c <__ssvfiscanf_r+0x2b4>)
 8011aa4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011aa8:	4606      	mov	r6, r0
 8011aaa:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	f892 9000 	ldrb.w	r9, [r2]
 8011ab2:	f1b9 0f00 	cmp.w	r9, #0
 8011ab6:	f000 8158 	beq.w	8011d6a <__ssvfiscanf_r+0x2e2>
 8011aba:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011abe:	f013 0308 	ands.w	r3, r3, #8
 8011ac2:	f102 0501 	add.w	r5, r2, #1
 8011ac6:	d019      	beq.n	8011afc <__ssvfiscanf_r+0x74>
 8011ac8:	6863      	ldr	r3, [r4, #4]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	dd0f      	ble.n	8011aee <__ssvfiscanf_r+0x66>
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	781a      	ldrb	r2, [r3, #0]
 8011ad2:	5cba      	ldrb	r2, [r7, r2]
 8011ad4:	0712      	lsls	r2, r2, #28
 8011ad6:	d401      	bmi.n	8011adc <__ssvfiscanf_r+0x54>
 8011ad8:	462a      	mov	r2, r5
 8011ada:	e7e8      	b.n	8011aae <__ssvfiscanf_r+0x26>
 8011adc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011ade:	3201      	adds	r2, #1
 8011ae0:	9245      	str	r2, [sp, #276]	@ 0x114
 8011ae2:	6862      	ldr	r2, [r4, #4]
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	3a01      	subs	r2, #1
 8011ae8:	6062      	str	r2, [r4, #4]
 8011aea:	6023      	str	r3, [r4, #0]
 8011aec:	e7ec      	b.n	8011ac8 <__ssvfiscanf_r+0x40>
 8011aee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011af0:	4621      	mov	r1, r4
 8011af2:	4630      	mov	r0, r6
 8011af4:	4798      	blx	r3
 8011af6:	2800      	cmp	r0, #0
 8011af8:	d0e9      	beq.n	8011ace <__ssvfiscanf_r+0x46>
 8011afa:	e7ed      	b.n	8011ad8 <__ssvfiscanf_r+0x50>
 8011afc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011b00:	f040 8085 	bne.w	8011c0e <__ssvfiscanf_r+0x186>
 8011b04:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b06:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011b08:	7853      	ldrb	r3, [r2, #1]
 8011b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b0c:	bf02      	ittt	eq
 8011b0e:	2310      	moveq	r3, #16
 8011b10:	1c95      	addeq	r5, r2, #2
 8011b12:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011b14:	220a      	movs	r2, #10
 8011b16:	46aa      	mov	sl, r5
 8011b18:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011b1c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011b20:	2b09      	cmp	r3, #9
 8011b22:	d91e      	bls.n	8011b62 <__ssvfiscanf_r+0xda>
 8011b24:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011d40 <__ssvfiscanf_r+0x2b8>
 8011b28:	2203      	movs	r2, #3
 8011b2a:	4658      	mov	r0, fp
 8011b2c:	f7ee fb60 	bl	80001f0 <memchr>
 8011b30:	b138      	cbz	r0, 8011b42 <__ssvfiscanf_r+0xba>
 8011b32:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011b34:	eba0 000b 	sub.w	r0, r0, fp
 8011b38:	2301      	movs	r3, #1
 8011b3a:	4083      	lsls	r3, r0
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b40:	4655      	mov	r5, sl
 8011b42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011b46:	2b78      	cmp	r3, #120	@ 0x78
 8011b48:	d806      	bhi.n	8011b58 <__ssvfiscanf_r+0xd0>
 8011b4a:	2b57      	cmp	r3, #87	@ 0x57
 8011b4c:	d810      	bhi.n	8011b70 <__ssvfiscanf_r+0xe8>
 8011b4e:	2b25      	cmp	r3, #37	@ 0x25
 8011b50:	d05d      	beq.n	8011c0e <__ssvfiscanf_r+0x186>
 8011b52:	d857      	bhi.n	8011c04 <__ssvfiscanf_r+0x17c>
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d075      	beq.n	8011c44 <__ssvfiscanf_r+0x1bc>
 8011b58:	2303      	movs	r3, #3
 8011b5a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011b5c:	230a      	movs	r3, #10
 8011b5e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011b60:	e088      	b.n	8011c74 <__ssvfiscanf_r+0x1ec>
 8011b62:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011b64:	fb02 1103 	mla	r1, r2, r3, r1
 8011b68:	3930      	subs	r1, #48	@ 0x30
 8011b6a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011b6c:	4655      	mov	r5, sl
 8011b6e:	e7d2      	b.n	8011b16 <__ssvfiscanf_r+0x8e>
 8011b70:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011b74:	2a20      	cmp	r2, #32
 8011b76:	d8ef      	bhi.n	8011b58 <__ssvfiscanf_r+0xd0>
 8011b78:	a101      	add	r1, pc, #4	@ (adr r1, 8011b80 <__ssvfiscanf_r+0xf8>)
 8011b7a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011b7e:	bf00      	nop
 8011b80:	08011c53 	.word	0x08011c53
 8011b84:	08011b59 	.word	0x08011b59
 8011b88:	08011b59 	.word	0x08011b59
 8011b8c:	08011cad 	.word	0x08011cad
 8011b90:	08011b59 	.word	0x08011b59
 8011b94:	08011b59 	.word	0x08011b59
 8011b98:	08011b59 	.word	0x08011b59
 8011b9c:	08011b59 	.word	0x08011b59
 8011ba0:	08011b59 	.word	0x08011b59
 8011ba4:	08011b59 	.word	0x08011b59
 8011ba8:	08011b59 	.word	0x08011b59
 8011bac:	08011cc3 	.word	0x08011cc3
 8011bb0:	08011ca9 	.word	0x08011ca9
 8011bb4:	08011c0b 	.word	0x08011c0b
 8011bb8:	08011c0b 	.word	0x08011c0b
 8011bbc:	08011c0b 	.word	0x08011c0b
 8011bc0:	08011b59 	.word	0x08011b59
 8011bc4:	08011c65 	.word	0x08011c65
 8011bc8:	08011b59 	.word	0x08011b59
 8011bcc:	08011b59 	.word	0x08011b59
 8011bd0:	08011b59 	.word	0x08011b59
 8011bd4:	08011b59 	.word	0x08011b59
 8011bd8:	08011cd3 	.word	0x08011cd3
 8011bdc:	08011c6d 	.word	0x08011c6d
 8011be0:	08011c4b 	.word	0x08011c4b
 8011be4:	08011b59 	.word	0x08011b59
 8011be8:	08011b59 	.word	0x08011b59
 8011bec:	08011ccf 	.word	0x08011ccf
 8011bf0:	08011b59 	.word	0x08011b59
 8011bf4:	08011ca9 	.word	0x08011ca9
 8011bf8:	08011b59 	.word	0x08011b59
 8011bfc:	08011b59 	.word	0x08011b59
 8011c00:	08011c53 	.word	0x08011c53
 8011c04:	3b45      	subs	r3, #69	@ 0x45
 8011c06:	2b02      	cmp	r3, #2
 8011c08:	d8a6      	bhi.n	8011b58 <__ssvfiscanf_r+0xd0>
 8011c0a:	2305      	movs	r3, #5
 8011c0c:	e031      	b.n	8011c72 <__ssvfiscanf_r+0x1ea>
 8011c0e:	6863      	ldr	r3, [r4, #4]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	dd0d      	ble.n	8011c30 <__ssvfiscanf_r+0x1a8>
 8011c14:	6823      	ldr	r3, [r4, #0]
 8011c16:	781a      	ldrb	r2, [r3, #0]
 8011c18:	454a      	cmp	r2, r9
 8011c1a:	f040 80a6 	bne.w	8011d6a <__ssvfiscanf_r+0x2e2>
 8011c1e:	3301      	adds	r3, #1
 8011c20:	6862      	ldr	r2, [r4, #4]
 8011c22:	6023      	str	r3, [r4, #0]
 8011c24:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011c26:	3a01      	subs	r2, #1
 8011c28:	3301      	adds	r3, #1
 8011c2a:	6062      	str	r2, [r4, #4]
 8011c2c:	9345      	str	r3, [sp, #276]	@ 0x114
 8011c2e:	e753      	b.n	8011ad8 <__ssvfiscanf_r+0x50>
 8011c30:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011c32:	4621      	mov	r1, r4
 8011c34:	4630      	mov	r0, r6
 8011c36:	4798      	blx	r3
 8011c38:	2800      	cmp	r0, #0
 8011c3a:	d0eb      	beq.n	8011c14 <__ssvfiscanf_r+0x18c>
 8011c3c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	f040 808b 	bne.w	8011d5a <__ssvfiscanf_r+0x2d2>
 8011c44:	f04f 30ff 	mov.w	r0, #4294967295
 8011c48:	e08b      	b.n	8011d62 <__ssvfiscanf_r+0x2da>
 8011c4a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011c4c:	f042 0220 	orr.w	r2, r2, #32
 8011c50:	9241      	str	r2, [sp, #260]	@ 0x104
 8011c52:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011c58:	9241      	str	r2, [sp, #260]	@ 0x104
 8011c5a:	2210      	movs	r2, #16
 8011c5c:	2b6e      	cmp	r3, #110	@ 0x6e
 8011c5e:	9242      	str	r2, [sp, #264]	@ 0x108
 8011c60:	d902      	bls.n	8011c68 <__ssvfiscanf_r+0x1e0>
 8011c62:	e005      	b.n	8011c70 <__ssvfiscanf_r+0x1e8>
 8011c64:	2300      	movs	r3, #0
 8011c66:	9342      	str	r3, [sp, #264]	@ 0x108
 8011c68:	2303      	movs	r3, #3
 8011c6a:	e002      	b.n	8011c72 <__ssvfiscanf_r+0x1ea>
 8011c6c:	2308      	movs	r3, #8
 8011c6e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011c70:	2304      	movs	r3, #4
 8011c72:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011c74:	6863      	ldr	r3, [r4, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	dd39      	ble.n	8011cee <__ssvfiscanf_r+0x266>
 8011c7a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011c7c:	0659      	lsls	r1, r3, #25
 8011c7e:	d404      	bmi.n	8011c8a <__ssvfiscanf_r+0x202>
 8011c80:	6823      	ldr	r3, [r4, #0]
 8011c82:	781a      	ldrb	r2, [r3, #0]
 8011c84:	5cba      	ldrb	r2, [r7, r2]
 8011c86:	0712      	lsls	r2, r2, #28
 8011c88:	d438      	bmi.n	8011cfc <__ssvfiscanf_r+0x274>
 8011c8a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	dc47      	bgt.n	8011d20 <__ssvfiscanf_r+0x298>
 8011c90:	466b      	mov	r3, sp
 8011c92:	4622      	mov	r2, r4
 8011c94:	a941      	add	r1, sp, #260	@ 0x104
 8011c96:	4630      	mov	r0, r6
 8011c98:	f000 f86c 	bl	8011d74 <_scanf_chars>
 8011c9c:	2801      	cmp	r0, #1
 8011c9e:	d064      	beq.n	8011d6a <__ssvfiscanf_r+0x2e2>
 8011ca0:	2802      	cmp	r0, #2
 8011ca2:	f47f af19 	bne.w	8011ad8 <__ssvfiscanf_r+0x50>
 8011ca6:	e7c9      	b.n	8011c3c <__ssvfiscanf_r+0x1b4>
 8011ca8:	220a      	movs	r2, #10
 8011caa:	e7d7      	b.n	8011c5c <__ssvfiscanf_r+0x1d4>
 8011cac:	4629      	mov	r1, r5
 8011cae:	4640      	mov	r0, r8
 8011cb0:	f000 fa6c 	bl	801218c <__sccl>
 8011cb4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cba:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cbc:	4605      	mov	r5, r0
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	e7d7      	b.n	8011c72 <__ssvfiscanf_r+0x1ea>
 8011cc2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cc8:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cca:	2300      	movs	r3, #0
 8011ccc:	e7d1      	b.n	8011c72 <__ssvfiscanf_r+0x1ea>
 8011cce:	2302      	movs	r3, #2
 8011cd0:	e7cf      	b.n	8011c72 <__ssvfiscanf_r+0x1ea>
 8011cd2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011cd4:	06c3      	lsls	r3, r0, #27
 8011cd6:	f53f aeff 	bmi.w	8011ad8 <__ssvfiscanf_r+0x50>
 8011cda:	9b00      	ldr	r3, [sp, #0]
 8011cdc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011cde:	1d19      	adds	r1, r3, #4
 8011ce0:	9100      	str	r1, [sp, #0]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	07c0      	lsls	r0, r0, #31
 8011ce6:	bf4c      	ite	mi
 8011ce8:	801a      	strhmi	r2, [r3, #0]
 8011cea:	601a      	strpl	r2, [r3, #0]
 8011cec:	e6f4      	b.n	8011ad8 <__ssvfiscanf_r+0x50>
 8011cee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	4798      	blx	r3
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	d0bf      	beq.n	8011c7a <__ssvfiscanf_r+0x1f2>
 8011cfa:	e79f      	b.n	8011c3c <__ssvfiscanf_r+0x1b4>
 8011cfc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011cfe:	3201      	adds	r2, #1
 8011d00:	9245      	str	r2, [sp, #276]	@ 0x114
 8011d02:	6862      	ldr	r2, [r4, #4]
 8011d04:	3a01      	subs	r2, #1
 8011d06:	2a00      	cmp	r2, #0
 8011d08:	6062      	str	r2, [r4, #4]
 8011d0a:	dd02      	ble.n	8011d12 <__ssvfiscanf_r+0x28a>
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	6023      	str	r3, [r4, #0]
 8011d10:	e7b6      	b.n	8011c80 <__ssvfiscanf_r+0x1f8>
 8011d12:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011d14:	4621      	mov	r1, r4
 8011d16:	4630      	mov	r0, r6
 8011d18:	4798      	blx	r3
 8011d1a:	2800      	cmp	r0, #0
 8011d1c:	d0b0      	beq.n	8011c80 <__ssvfiscanf_r+0x1f8>
 8011d1e:	e78d      	b.n	8011c3c <__ssvfiscanf_r+0x1b4>
 8011d20:	2b04      	cmp	r3, #4
 8011d22:	dc0f      	bgt.n	8011d44 <__ssvfiscanf_r+0x2bc>
 8011d24:	466b      	mov	r3, sp
 8011d26:	4622      	mov	r2, r4
 8011d28:	a941      	add	r1, sp, #260	@ 0x104
 8011d2a:	4630      	mov	r0, r6
 8011d2c:	f000 f87c 	bl	8011e28 <_scanf_i>
 8011d30:	e7b4      	b.n	8011c9c <__ssvfiscanf_r+0x214>
 8011d32:	bf00      	nop
 8011d34:	080119d5 	.word	0x080119d5
 8011d38:	08011a4f 	.word	0x08011a4f
 8011d3c:	08017e19 	.word	0x08017e19
 8011d40:	08017d9b 	.word	0x08017d9b
 8011d44:	4b0a      	ldr	r3, [pc, #40]	@ (8011d70 <__ssvfiscanf_r+0x2e8>)
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	f43f aec6 	beq.w	8011ad8 <__ssvfiscanf_r+0x50>
 8011d4c:	466b      	mov	r3, sp
 8011d4e:	4622      	mov	r2, r4
 8011d50:	a941      	add	r1, sp, #260	@ 0x104
 8011d52:	4630      	mov	r0, r6
 8011d54:	f7fd f892 	bl	800ee7c <_scanf_float>
 8011d58:	e7a0      	b.n	8011c9c <__ssvfiscanf_r+0x214>
 8011d5a:	89a3      	ldrh	r3, [r4, #12]
 8011d5c:	065b      	lsls	r3, r3, #25
 8011d5e:	f53f af71 	bmi.w	8011c44 <__ssvfiscanf_r+0x1bc>
 8011d62:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011d6c:	e7f9      	b.n	8011d62 <__ssvfiscanf_r+0x2da>
 8011d6e:	bf00      	nop
 8011d70:	0800ee7d 	.word	0x0800ee7d

08011d74 <_scanf_chars>:
 8011d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d78:	4615      	mov	r5, r2
 8011d7a:	688a      	ldr	r2, [r1, #8]
 8011d7c:	4680      	mov	r8, r0
 8011d7e:	460c      	mov	r4, r1
 8011d80:	b932      	cbnz	r2, 8011d90 <_scanf_chars+0x1c>
 8011d82:	698a      	ldr	r2, [r1, #24]
 8011d84:	2a00      	cmp	r2, #0
 8011d86:	bf14      	ite	ne
 8011d88:	f04f 32ff 	movne.w	r2, #4294967295
 8011d8c:	2201      	moveq	r2, #1
 8011d8e:	608a      	str	r2, [r1, #8]
 8011d90:	6822      	ldr	r2, [r4, #0]
 8011d92:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011e24 <_scanf_chars+0xb0>
 8011d96:	06d1      	lsls	r1, r2, #27
 8011d98:	bf5f      	itttt	pl
 8011d9a:	681a      	ldrpl	r2, [r3, #0]
 8011d9c:	1d11      	addpl	r1, r2, #4
 8011d9e:	6019      	strpl	r1, [r3, #0]
 8011da0:	6816      	ldrpl	r6, [r2, #0]
 8011da2:	2700      	movs	r7, #0
 8011da4:	69a0      	ldr	r0, [r4, #24]
 8011da6:	b188      	cbz	r0, 8011dcc <_scanf_chars+0x58>
 8011da8:	2801      	cmp	r0, #1
 8011daa:	d107      	bne.n	8011dbc <_scanf_chars+0x48>
 8011dac:	682b      	ldr	r3, [r5, #0]
 8011dae:	781a      	ldrb	r2, [r3, #0]
 8011db0:	6963      	ldr	r3, [r4, #20]
 8011db2:	5c9b      	ldrb	r3, [r3, r2]
 8011db4:	b953      	cbnz	r3, 8011dcc <_scanf_chars+0x58>
 8011db6:	2f00      	cmp	r7, #0
 8011db8:	d031      	beq.n	8011e1e <_scanf_chars+0xaa>
 8011dba:	e022      	b.n	8011e02 <_scanf_chars+0x8e>
 8011dbc:	2802      	cmp	r0, #2
 8011dbe:	d120      	bne.n	8011e02 <_scanf_chars+0x8e>
 8011dc0:	682b      	ldr	r3, [r5, #0]
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011dc8:	071b      	lsls	r3, r3, #28
 8011dca:	d41a      	bmi.n	8011e02 <_scanf_chars+0x8e>
 8011dcc:	6823      	ldr	r3, [r4, #0]
 8011dce:	06da      	lsls	r2, r3, #27
 8011dd0:	bf5e      	ittt	pl
 8011dd2:	682b      	ldrpl	r3, [r5, #0]
 8011dd4:	781b      	ldrbpl	r3, [r3, #0]
 8011dd6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011dda:	682a      	ldr	r2, [r5, #0]
 8011ddc:	686b      	ldr	r3, [r5, #4]
 8011dde:	3201      	adds	r2, #1
 8011de0:	602a      	str	r2, [r5, #0]
 8011de2:	68a2      	ldr	r2, [r4, #8]
 8011de4:	3b01      	subs	r3, #1
 8011de6:	3a01      	subs	r2, #1
 8011de8:	606b      	str	r3, [r5, #4]
 8011dea:	3701      	adds	r7, #1
 8011dec:	60a2      	str	r2, [r4, #8]
 8011dee:	b142      	cbz	r2, 8011e02 <_scanf_chars+0x8e>
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	dcd7      	bgt.n	8011da4 <_scanf_chars+0x30>
 8011df4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011df8:	4629      	mov	r1, r5
 8011dfa:	4640      	mov	r0, r8
 8011dfc:	4798      	blx	r3
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	d0d0      	beq.n	8011da4 <_scanf_chars+0x30>
 8011e02:	6823      	ldr	r3, [r4, #0]
 8011e04:	f013 0310 	ands.w	r3, r3, #16
 8011e08:	d105      	bne.n	8011e16 <_scanf_chars+0xa2>
 8011e0a:	68e2      	ldr	r2, [r4, #12]
 8011e0c:	3201      	adds	r2, #1
 8011e0e:	60e2      	str	r2, [r4, #12]
 8011e10:	69a2      	ldr	r2, [r4, #24]
 8011e12:	b102      	cbz	r2, 8011e16 <_scanf_chars+0xa2>
 8011e14:	7033      	strb	r3, [r6, #0]
 8011e16:	6923      	ldr	r3, [r4, #16]
 8011e18:	443b      	add	r3, r7
 8011e1a:	6123      	str	r3, [r4, #16]
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e22:	bf00      	nop
 8011e24:	08017e19 	.word	0x08017e19

08011e28 <_scanf_i>:
 8011e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e2c:	4698      	mov	r8, r3
 8011e2e:	4b74      	ldr	r3, [pc, #464]	@ (8012000 <_scanf_i+0x1d8>)
 8011e30:	460c      	mov	r4, r1
 8011e32:	4682      	mov	sl, r0
 8011e34:	4616      	mov	r6, r2
 8011e36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011e3a:	b087      	sub	sp, #28
 8011e3c:	ab03      	add	r3, sp, #12
 8011e3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011e42:	4b70      	ldr	r3, [pc, #448]	@ (8012004 <_scanf_i+0x1dc>)
 8011e44:	69a1      	ldr	r1, [r4, #24]
 8011e46:	4a70      	ldr	r2, [pc, #448]	@ (8012008 <_scanf_i+0x1e0>)
 8011e48:	2903      	cmp	r1, #3
 8011e4a:	bf08      	it	eq
 8011e4c:	461a      	moveq	r2, r3
 8011e4e:	68a3      	ldr	r3, [r4, #8]
 8011e50:	9201      	str	r2, [sp, #4]
 8011e52:	1e5a      	subs	r2, r3, #1
 8011e54:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011e58:	bf88      	it	hi
 8011e5a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011e5e:	4627      	mov	r7, r4
 8011e60:	bf82      	ittt	hi
 8011e62:	eb03 0905 	addhi.w	r9, r3, r5
 8011e66:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011e6a:	60a3      	strhi	r3, [r4, #8]
 8011e6c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011e70:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011e74:	bf98      	it	ls
 8011e76:	f04f 0900 	movls.w	r9, #0
 8011e7a:	6023      	str	r3, [r4, #0]
 8011e7c:	463d      	mov	r5, r7
 8011e7e:	f04f 0b00 	mov.w	fp, #0
 8011e82:	6831      	ldr	r1, [r6, #0]
 8011e84:	ab03      	add	r3, sp, #12
 8011e86:	7809      	ldrb	r1, [r1, #0]
 8011e88:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011e8c:	2202      	movs	r2, #2
 8011e8e:	f7ee f9af 	bl	80001f0 <memchr>
 8011e92:	b328      	cbz	r0, 8011ee0 <_scanf_i+0xb8>
 8011e94:	f1bb 0f01 	cmp.w	fp, #1
 8011e98:	d159      	bne.n	8011f4e <_scanf_i+0x126>
 8011e9a:	6862      	ldr	r2, [r4, #4]
 8011e9c:	b92a      	cbnz	r2, 8011eaa <_scanf_i+0x82>
 8011e9e:	6822      	ldr	r2, [r4, #0]
 8011ea0:	2108      	movs	r1, #8
 8011ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011ea6:	6061      	str	r1, [r4, #4]
 8011ea8:	6022      	str	r2, [r4, #0]
 8011eaa:	6822      	ldr	r2, [r4, #0]
 8011eac:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011eb0:	6022      	str	r2, [r4, #0]
 8011eb2:	68a2      	ldr	r2, [r4, #8]
 8011eb4:	1e51      	subs	r1, r2, #1
 8011eb6:	60a1      	str	r1, [r4, #8]
 8011eb8:	b192      	cbz	r2, 8011ee0 <_scanf_i+0xb8>
 8011eba:	6832      	ldr	r2, [r6, #0]
 8011ebc:	1c51      	adds	r1, r2, #1
 8011ebe:	6031      	str	r1, [r6, #0]
 8011ec0:	7812      	ldrb	r2, [r2, #0]
 8011ec2:	f805 2b01 	strb.w	r2, [r5], #1
 8011ec6:	6872      	ldr	r2, [r6, #4]
 8011ec8:	3a01      	subs	r2, #1
 8011eca:	2a00      	cmp	r2, #0
 8011ecc:	6072      	str	r2, [r6, #4]
 8011ece:	dc07      	bgt.n	8011ee0 <_scanf_i+0xb8>
 8011ed0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011ed4:	4631      	mov	r1, r6
 8011ed6:	4650      	mov	r0, sl
 8011ed8:	4790      	blx	r2
 8011eda:	2800      	cmp	r0, #0
 8011edc:	f040 8085 	bne.w	8011fea <_scanf_i+0x1c2>
 8011ee0:	f10b 0b01 	add.w	fp, fp, #1
 8011ee4:	f1bb 0f03 	cmp.w	fp, #3
 8011ee8:	d1cb      	bne.n	8011e82 <_scanf_i+0x5a>
 8011eea:	6863      	ldr	r3, [r4, #4]
 8011eec:	b90b      	cbnz	r3, 8011ef2 <_scanf_i+0xca>
 8011eee:	230a      	movs	r3, #10
 8011ef0:	6063      	str	r3, [r4, #4]
 8011ef2:	6863      	ldr	r3, [r4, #4]
 8011ef4:	4945      	ldr	r1, [pc, #276]	@ (801200c <_scanf_i+0x1e4>)
 8011ef6:	6960      	ldr	r0, [r4, #20]
 8011ef8:	1ac9      	subs	r1, r1, r3
 8011efa:	f000 f947 	bl	801218c <__sccl>
 8011efe:	f04f 0b00 	mov.w	fp, #0
 8011f02:	68a3      	ldr	r3, [r4, #8]
 8011f04:	6822      	ldr	r2, [r4, #0]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d03d      	beq.n	8011f86 <_scanf_i+0x15e>
 8011f0a:	6831      	ldr	r1, [r6, #0]
 8011f0c:	6960      	ldr	r0, [r4, #20]
 8011f0e:	f891 c000 	ldrb.w	ip, [r1]
 8011f12:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011f16:	2800      	cmp	r0, #0
 8011f18:	d035      	beq.n	8011f86 <_scanf_i+0x15e>
 8011f1a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011f1e:	d124      	bne.n	8011f6a <_scanf_i+0x142>
 8011f20:	0510      	lsls	r0, r2, #20
 8011f22:	d522      	bpl.n	8011f6a <_scanf_i+0x142>
 8011f24:	f10b 0b01 	add.w	fp, fp, #1
 8011f28:	f1b9 0f00 	cmp.w	r9, #0
 8011f2c:	d003      	beq.n	8011f36 <_scanf_i+0x10e>
 8011f2e:	3301      	adds	r3, #1
 8011f30:	f109 39ff 	add.w	r9, r9, #4294967295
 8011f34:	60a3      	str	r3, [r4, #8]
 8011f36:	6873      	ldr	r3, [r6, #4]
 8011f38:	3b01      	subs	r3, #1
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	6073      	str	r3, [r6, #4]
 8011f3e:	dd1b      	ble.n	8011f78 <_scanf_i+0x150>
 8011f40:	6833      	ldr	r3, [r6, #0]
 8011f42:	3301      	adds	r3, #1
 8011f44:	6033      	str	r3, [r6, #0]
 8011f46:	68a3      	ldr	r3, [r4, #8]
 8011f48:	3b01      	subs	r3, #1
 8011f4a:	60a3      	str	r3, [r4, #8]
 8011f4c:	e7d9      	b.n	8011f02 <_scanf_i+0xda>
 8011f4e:	f1bb 0f02 	cmp.w	fp, #2
 8011f52:	d1ae      	bne.n	8011eb2 <_scanf_i+0x8a>
 8011f54:	6822      	ldr	r2, [r4, #0]
 8011f56:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011f5a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011f5e:	d1c4      	bne.n	8011eea <_scanf_i+0xc2>
 8011f60:	2110      	movs	r1, #16
 8011f62:	6061      	str	r1, [r4, #4]
 8011f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011f68:	e7a2      	b.n	8011eb0 <_scanf_i+0x88>
 8011f6a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011f6e:	6022      	str	r2, [r4, #0]
 8011f70:	780b      	ldrb	r3, [r1, #0]
 8011f72:	f805 3b01 	strb.w	r3, [r5], #1
 8011f76:	e7de      	b.n	8011f36 <_scanf_i+0x10e>
 8011f78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011f7c:	4631      	mov	r1, r6
 8011f7e:	4650      	mov	r0, sl
 8011f80:	4798      	blx	r3
 8011f82:	2800      	cmp	r0, #0
 8011f84:	d0df      	beq.n	8011f46 <_scanf_i+0x11e>
 8011f86:	6823      	ldr	r3, [r4, #0]
 8011f88:	05d9      	lsls	r1, r3, #23
 8011f8a:	d50d      	bpl.n	8011fa8 <_scanf_i+0x180>
 8011f8c:	42bd      	cmp	r5, r7
 8011f8e:	d909      	bls.n	8011fa4 <_scanf_i+0x17c>
 8011f90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011f94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011f98:	4632      	mov	r2, r6
 8011f9a:	4650      	mov	r0, sl
 8011f9c:	4798      	blx	r3
 8011f9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8011fa2:	464d      	mov	r5, r9
 8011fa4:	42bd      	cmp	r5, r7
 8011fa6:	d028      	beq.n	8011ffa <_scanf_i+0x1d2>
 8011fa8:	6822      	ldr	r2, [r4, #0]
 8011faa:	f012 0210 	ands.w	r2, r2, #16
 8011fae:	d113      	bne.n	8011fd8 <_scanf_i+0x1b0>
 8011fb0:	702a      	strb	r2, [r5, #0]
 8011fb2:	6863      	ldr	r3, [r4, #4]
 8011fb4:	9e01      	ldr	r6, [sp, #4]
 8011fb6:	4639      	mov	r1, r7
 8011fb8:	4650      	mov	r0, sl
 8011fba:	47b0      	blx	r6
 8011fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8011fc0:	6821      	ldr	r1, [r4, #0]
 8011fc2:	1d1a      	adds	r2, r3, #4
 8011fc4:	f8c8 2000 	str.w	r2, [r8]
 8011fc8:	f011 0f20 	tst.w	r1, #32
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	d00f      	beq.n	8011ff0 <_scanf_i+0x1c8>
 8011fd0:	6018      	str	r0, [r3, #0]
 8011fd2:	68e3      	ldr	r3, [r4, #12]
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	60e3      	str	r3, [r4, #12]
 8011fd8:	6923      	ldr	r3, [r4, #16]
 8011fda:	1bed      	subs	r5, r5, r7
 8011fdc:	445d      	add	r5, fp
 8011fde:	442b      	add	r3, r5
 8011fe0:	6123      	str	r3, [r4, #16]
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	b007      	add	sp, #28
 8011fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fea:	f04f 0b00 	mov.w	fp, #0
 8011fee:	e7ca      	b.n	8011f86 <_scanf_i+0x15e>
 8011ff0:	07ca      	lsls	r2, r1, #31
 8011ff2:	bf4c      	ite	mi
 8011ff4:	8018      	strhmi	r0, [r3, #0]
 8011ff6:	6018      	strpl	r0, [r3, #0]
 8011ff8:	e7eb      	b.n	8011fd2 <_scanf_i+0x1aa>
 8011ffa:	2001      	movs	r0, #1
 8011ffc:	e7f2      	b.n	8011fe4 <_scanf_i+0x1bc>
 8011ffe:	bf00      	nop
 8012000:	0801331c 	.word	0x0801331c
 8012004:	0800e5b9 	.word	0x0800e5b9
 8012008:	08012439 	.word	0x08012439
 801200c:	08017db6 	.word	0x08017db6

08012010 <__sflush_r>:
 8012010:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012018:	0716      	lsls	r6, r2, #28
 801201a:	4605      	mov	r5, r0
 801201c:	460c      	mov	r4, r1
 801201e:	d454      	bmi.n	80120ca <__sflush_r+0xba>
 8012020:	684b      	ldr	r3, [r1, #4]
 8012022:	2b00      	cmp	r3, #0
 8012024:	dc02      	bgt.n	801202c <__sflush_r+0x1c>
 8012026:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012028:	2b00      	cmp	r3, #0
 801202a:	dd48      	ble.n	80120be <__sflush_r+0xae>
 801202c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801202e:	2e00      	cmp	r6, #0
 8012030:	d045      	beq.n	80120be <__sflush_r+0xae>
 8012032:	2300      	movs	r3, #0
 8012034:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012038:	682f      	ldr	r7, [r5, #0]
 801203a:	6a21      	ldr	r1, [r4, #32]
 801203c:	602b      	str	r3, [r5, #0]
 801203e:	d030      	beq.n	80120a2 <__sflush_r+0x92>
 8012040:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012042:	89a3      	ldrh	r3, [r4, #12]
 8012044:	0759      	lsls	r1, r3, #29
 8012046:	d505      	bpl.n	8012054 <__sflush_r+0x44>
 8012048:	6863      	ldr	r3, [r4, #4]
 801204a:	1ad2      	subs	r2, r2, r3
 801204c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801204e:	b10b      	cbz	r3, 8012054 <__sflush_r+0x44>
 8012050:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012052:	1ad2      	subs	r2, r2, r3
 8012054:	2300      	movs	r3, #0
 8012056:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012058:	6a21      	ldr	r1, [r4, #32]
 801205a:	4628      	mov	r0, r5
 801205c:	47b0      	blx	r6
 801205e:	1c43      	adds	r3, r0, #1
 8012060:	89a3      	ldrh	r3, [r4, #12]
 8012062:	d106      	bne.n	8012072 <__sflush_r+0x62>
 8012064:	6829      	ldr	r1, [r5, #0]
 8012066:	291d      	cmp	r1, #29
 8012068:	d82b      	bhi.n	80120c2 <__sflush_r+0xb2>
 801206a:	4a2a      	ldr	r2, [pc, #168]	@ (8012114 <__sflush_r+0x104>)
 801206c:	40ca      	lsrs	r2, r1
 801206e:	07d6      	lsls	r6, r2, #31
 8012070:	d527      	bpl.n	80120c2 <__sflush_r+0xb2>
 8012072:	2200      	movs	r2, #0
 8012074:	6062      	str	r2, [r4, #4]
 8012076:	04d9      	lsls	r1, r3, #19
 8012078:	6922      	ldr	r2, [r4, #16]
 801207a:	6022      	str	r2, [r4, #0]
 801207c:	d504      	bpl.n	8012088 <__sflush_r+0x78>
 801207e:	1c42      	adds	r2, r0, #1
 8012080:	d101      	bne.n	8012086 <__sflush_r+0x76>
 8012082:	682b      	ldr	r3, [r5, #0]
 8012084:	b903      	cbnz	r3, 8012088 <__sflush_r+0x78>
 8012086:	6560      	str	r0, [r4, #84]	@ 0x54
 8012088:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801208a:	602f      	str	r7, [r5, #0]
 801208c:	b1b9      	cbz	r1, 80120be <__sflush_r+0xae>
 801208e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012092:	4299      	cmp	r1, r3
 8012094:	d002      	beq.n	801209c <__sflush_r+0x8c>
 8012096:	4628      	mov	r0, r5
 8012098:	f7fe fa42 	bl	8010520 <_free_r>
 801209c:	2300      	movs	r3, #0
 801209e:	6363      	str	r3, [r4, #52]	@ 0x34
 80120a0:	e00d      	b.n	80120be <__sflush_r+0xae>
 80120a2:	2301      	movs	r3, #1
 80120a4:	4628      	mov	r0, r5
 80120a6:	47b0      	blx	r6
 80120a8:	4602      	mov	r2, r0
 80120aa:	1c50      	adds	r0, r2, #1
 80120ac:	d1c9      	bne.n	8012042 <__sflush_r+0x32>
 80120ae:	682b      	ldr	r3, [r5, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d0c6      	beq.n	8012042 <__sflush_r+0x32>
 80120b4:	2b1d      	cmp	r3, #29
 80120b6:	d001      	beq.n	80120bc <__sflush_r+0xac>
 80120b8:	2b16      	cmp	r3, #22
 80120ba:	d11e      	bne.n	80120fa <__sflush_r+0xea>
 80120bc:	602f      	str	r7, [r5, #0]
 80120be:	2000      	movs	r0, #0
 80120c0:	e022      	b.n	8012108 <__sflush_r+0xf8>
 80120c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120c6:	b21b      	sxth	r3, r3
 80120c8:	e01b      	b.n	8012102 <__sflush_r+0xf2>
 80120ca:	690f      	ldr	r7, [r1, #16]
 80120cc:	2f00      	cmp	r7, #0
 80120ce:	d0f6      	beq.n	80120be <__sflush_r+0xae>
 80120d0:	0793      	lsls	r3, r2, #30
 80120d2:	680e      	ldr	r6, [r1, #0]
 80120d4:	bf08      	it	eq
 80120d6:	694b      	ldreq	r3, [r1, #20]
 80120d8:	600f      	str	r7, [r1, #0]
 80120da:	bf18      	it	ne
 80120dc:	2300      	movne	r3, #0
 80120de:	eba6 0807 	sub.w	r8, r6, r7
 80120e2:	608b      	str	r3, [r1, #8]
 80120e4:	f1b8 0f00 	cmp.w	r8, #0
 80120e8:	dde9      	ble.n	80120be <__sflush_r+0xae>
 80120ea:	6a21      	ldr	r1, [r4, #32]
 80120ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80120ee:	4643      	mov	r3, r8
 80120f0:	463a      	mov	r2, r7
 80120f2:	4628      	mov	r0, r5
 80120f4:	47b0      	blx	r6
 80120f6:	2800      	cmp	r0, #0
 80120f8:	dc08      	bgt.n	801210c <__sflush_r+0xfc>
 80120fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012102:	81a3      	strh	r3, [r4, #12]
 8012104:	f04f 30ff 	mov.w	r0, #4294967295
 8012108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801210c:	4407      	add	r7, r0
 801210e:	eba8 0800 	sub.w	r8, r8, r0
 8012112:	e7e7      	b.n	80120e4 <__sflush_r+0xd4>
 8012114:	20400001 	.word	0x20400001

08012118 <_fflush_r>:
 8012118:	b538      	push	{r3, r4, r5, lr}
 801211a:	690b      	ldr	r3, [r1, #16]
 801211c:	4605      	mov	r5, r0
 801211e:	460c      	mov	r4, r1
 8012120:	b913      	cbnz	r3, 8012128 <_fflush_r+0x10>
 8012122:	2500      	movs	r5, #0
 8012124:	4628      	mov	r0, r5
 8012126:	bd38      	pop	{r3, r4, r5, pc}
 8012128:	b118      	cbz	r0, 8012132 <_fflush_r+0x1a>
 801212a:	6a03      	ldr	r3, [r0, #32]
 801212c:	b90b      	cbnz	r3, 8012132 <_fflush_r+0x1a>
 801212e:	f7fd f93f 	bl	800f3b0 <__sinit>
 8012132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d0f3      	beq.n	8012122 <_fflush_r+0xa>
 801213a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801213c:	07d0      	lsls	r0, r2, #31
 801213e:	d404      	bmi.n	801214a <_fflush_r+0x32>
 8012140:	0599      	lsls	r1, r3, #22
 8012142:	d402      	bmi.n	801214a <_fflush_r+0x32>
 8012144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012146:	f7fd fb54 	bl	800f7f2 <__retarget_lock_acquire_recursive>
 801214a:	4628      	mov	r0, r5
 801214c:	4621      	mov	r1, r4
 801214e:	f7ff ff5f 	bl	8012010 <__sflush_r>
 8012152:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012154:	07da      	lsls	r2, r3, #31
 8012156:	4605      	mov	r5, r0
 8012158:	d4e4      	bmi.n	8012124 <_fflush_r+0xc>
 801215a:	89a3      	ldrh	r3, [r4, #12]
 801215c:	059b      	lsls	r3, r3, #22
 801215e:	d4e1      	bmi.n	8012124 <_fflush_r+0xc>
 8012160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012162:	f7fd fb47 	bl	800f7f4 <__retarget_lock_release_recursive>
 8012166:	e7dd      	b.n	8012124 <_fflush_r+0xc>

08012168 <fiprintf>:
 8012168:	b40e      	push	{r1, r2, r3}
 801216a:	b503      	push	{r0, r1, lr}
 801216c:	4601      	mov	r1, r0
 801216e:	ab03      	add	r3, sp, #12
 8012170:	4805      	ldr	r0, [pc, #20]	@ (8012188 <fiprintf+0x20>)
 8012172:	f853 2b04 	ldr.w	r2, [r3], #4
 8012176:	6800      	ldr	r0, [r0, #0]
 8012178:	9301      	str	r3, [sp, #4]
 801217a:	f000 f989 	bl	8012490 <_vfiprintf_r>
 801217e:	b002      	add	sp, #8
 8012180:	f85d eb04 	ldr.w	lr, [sp], #4
 8012184:	b003      	add	sp, #12
 8012186:	4770      	bx	lr
 8012188:	20000280 	.word	0x20000280

0801218c <__sccl>:
 801218c:	b570      	push	{r4, r5, r6, lr}
 801218e:	780b      	ldrb	r3, [r1, #0]
 8012190:	4604      	mov	r4, r0
 8012192:	2b5e      	cmp	r3, #94	@ 0x5e
 8012194:	bf0b      	itete	eq
 8012196:	784b      	ldrbeq	r3, [r1, #1]
 8012198:	1c4a      	addne	r2, r1, #1
 801219a:	1c8a      	addeq	r2, r1, #2
 801219c:	2100      	movne	r1, #0
 801219e:	bf08      	it	eq
 80121a0:	2101      	moveq	r1, #1
 80121a2:	3801      	subs	r0, #1
 80121a4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80121a8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80121ac:	42a8      	cmp	r0, r5
 80121ae:	d1fb      	bne.n	80121a8 <__sccl+0x1c>
 80121b0:	b90b      	cbnz	r3, 80121b6 <__sccl+0x2a>
 80121b2:	1e50      	subs	r0, r2, #1
 80121b4:	bd70      	pop	{r4, r5, r6, pc}
 80121b6:	f081 0101 	eor.w	r1, r1, #1
 80121ba:	54e1      	strb	r1, [r4, r3]
 80121bc:	4610      	mov	r0, r2
 80121be:	4602      	mov	r2, r0
 80121c0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80121c4:	2d2d      	cmp	r5, #45	@ 0x2d
 80121c6:	d005      	beq.n	80121d4 <__sccl+0x48>
 80121c8:	2d5d      	cmp	r5, #93	@ 0x5d
 80121ca:	d016      	beq.n	80121fa <__sccl+0x6e>
 80121cc:	2d00      	cmp	r5, #0
 80121ce:	d0f1      	beq.n	80121b4 <__sccl+0x28>
 80121d0:	462b      	mov	r3, r5
 80121d2:	e7f2      	b.n	80121ba <__sccl+0x2e>
 80121d4:	7846      	ldrb	r6, [r0, #1]
 80121d6:	2e5d      	cmp	r6, #93	@ 0x5d
 80121d8:	d0fa      	beq.n	80121d0 <__sccl+0x44>
 80121da:	42b3      	cmp	r3, r6
 80121dc:	dcf8      	bgt.n	80121d0 <__sccl+0x44>
 80121de:	3002      	adds	r0, #2
 80121e0:	461a      	mov	r2, r3
 80121e2:	3201      	adds	r2, #1
 80121e4:	4296      	cmp	r6, r2
 80121e6:	54a1      	strb	r1, [r4, r2]
 80121e8:	dcfb      	bgt.n	80121e2 <__sccl+0x56>
 80121ea:	1af2      	subs	r2, r6, r3
 80121ec:	3a01      	subs	r2, #1
 80121ee:	1c5d      	adds	r5, r3, #1
 80121f0:	42b3      	cmp	r3, r6
 80121f2:	bfa8      	it	ge
 80121f4:	2200      	movge	r2, #0
 80121f6:	18ab      	adds	r3, r5, r2
 80121f8:	e7e1      	b.n	80121be <__sccl+0x32>
 80121fa:	4610      	mov	r0, r2
 80121fc:	e7da      	b.n	80121b4 <__sccl+0x28>

080121fe <__submore>:
 80121fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012202:	460c      	mov	r4, r1
 8012204:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012206:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801220a:	4299      	cmp	r1, r3
 801220c:	d11d      	bne.n	801224a <__submore+0x4c>
 801220e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012212:	f7fe fd33 	bl	8010c7c <_malloc_r>
 8012216:	b918      	cbnz	r0, 8012220 <__submore+0x22>
 8012218:	f04f 30ff 	mov.w	r0, #4294967295
 801221c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012224:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012226:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801222a:	6360      	str	r0, [r4, #52]	@ 0x34
 801222c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012230:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012234:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012238:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801223c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012240:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012244:	6020      	str	r0, [r4, #0]
 8012246:	2000      	movs	r0, #0
 8012248:	e7e8      	b.n	801221c <__submore+0x1e>
 801224a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801224c:	0077      	lsls	r7, r6, #1
 801224e:	463a      	mov	r2, r7
 8012250:	f000 f855 	bl	80122fe <_realloc_r>
 8012254:	4605      	mov	r5, r0
 8012256:	2800      	cmp	r0, #0
 8012258:	d0de      	beq.n	8012218 <__submore+0x1a>
 801225a:	eb00 0806 	add.w	r8, r0, r6
 801225e:	4601      	mov	r1, r0
 8012260:	4632      	mov	r2, r6
 8012262:	4640      	mov	r0, r8
 8012264:	f7fd fac7 	bl	800f7f6 <memcpy>
 8012268:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801226c:	f8c4 8000 	str.w	r8, [r4]
 8012270:	e7e9      	b.n	8012246 <__submore+0x48>

08012272 <memmove>:
 8012272:	4288      	cmp	r0, r1
 8012274:	b510      	push	{r4, lr}
 8012276:	eb01 0402 	add.w	r4, r1, r2
 801227a:	d902      	bls.n	8012282 <memmove+0x10>
 801227c:	4284      	cmp	r4, r0
 801227e:	4623      	mov	r3, r4
 8012280:	d807      	bhi.n	8012292 <memmove+0x20>
 8012282:	1e43      	subs	r3, r0, #1
 8012284:	42a1      	cmp	r1, r4
 8012286:	d008      	beq.n	801229a <memmove+0x28>
 8012288:	f811 2b01 	ldrb.w	r2, [r1], #1
 801228c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012290:	e7f8      	b.n	8012284 <memmove+0x12>
 8012292:	4402      	add	r2, r0
 8012294:	4601      	mov	r1, r0
 8012296:	428a      	cmp	r2, r1
 8012298:	d100      	bne.n	801229c <memmove+0x2a>
 801229a:	bd10      	pop	{r4, pc}
 801229c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122a4:	e7f7      	b.n	8012296 <memmove+0x24>
	...

080122a8 <_sbrk_r>:
 80122a8:	b538      	push	{r3, r4, r5, lr}
 80122aa:	4d06      	ldr	r5, [pc, #24]	@ (80122c4 <_sbrk_r+0x1c>)
 80122ac:	2300      	movs	r3, #0
 80122ae:	4604      	mov	r4, r0
 80122b0:	4608      	mov	r0, r1
 80122b2:	602b      	str	r3, [r5, #0]
 80122b4:	f7f0 fce6 	bl	8002c84 <_sbrk>
 80122b8:	1c43      	adds	r3, r0, #1
 80122ba:	d102      	bne.n	80122c2 <_sbrk_r+0x1a>
 80122bc:	682b      	ldr	r3, [r5, #0]
 80122be:	b103      	cbz	r3, 80122c2 <_sbrk_r+0x1a>
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	bd38      	pop	{r3, r4, r5, pc}
 80122c4:	2001f124 	.word	0x2001f124

080122c8 <abort>:
 80122c8:	b508      	push	{r3, lr}
 80122ca:	2006      	movs	r0, #6
 80122cc:	f000 fab4 	bl	8012838 <raise>
 80122d0:	2001      	movs	r0, #1
 80122d2:	f7f0 fc5f 	bl	8002b94 <_exit>

080122d6 <_calloc_r>:
 80122d6:	b570      	push	{r4, r5, r6, lr}
 80122d8:	fba1 5402 	umull	r5, r4, r1, r2
 80122dc:	b934      	cbnz	r4, 80122ec <_calloc_r+0x16>
 80122de:	4629      	mov	r1, r5
 80122e0:	f7fe fccc 	bl	8010c7c <_malloc_r>
 80122e4:	4606      	mov	r6, r0
 80122e6:	b928      	cbnz	r0, 80122f4 <_calloc_r+0x1e>
 80122e8:	4630      	mov	r0, r6
 80122ea:	bd70      	pop	{r4, r5, r6, pc}
 80122ec:	220c      	movs	r2, #12
 80122ee:	6002      	str	r2, [r0, #0]
 80122f0:	2600      	movs	r6, #0
 80122f2:	e7f9      	b.n	80122e8 <_calloc_r+0x12>
 80122f4:	462a      	mov	r2, r5
 80122f6:	4621      	mov	r1, r4
 80122f8:	f7fd f959 	bl	800f5ae <memset>
 80122fc:	e7f4      	b.n	80122e8 <_calloc_r+0x12>

080122fe <_realloc_r>:
 80122fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012302:	4607      	mov	r7, r0
 8012304:	4614      	mov	r4, r2
 8012306:	460d      	mov	r5, r1
 8012308:	b921      	cbnz	r1, 8012314 <_realloc_r+0x16>
 801230a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801230e:	4611      	mov	r1, r2
 8012310:	f7fe bcb4 	b.w	8010c7c <_malloc_r>
 8012314:	b92a      	cbnz	r2, 8012322 <_realloc_r+0x24>
 8012316:	f7fe f903 	bl	8010520 <_free_r>
 801231a:	4625      	mov	r5, r4
 801231c:	4628      	mov	r0, r5
 801231e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012322:	f000 faa5 	bl	8012870 <_malloc_usable_size_r>
 8012326:	4284      	cmp	r4, r0
 8012328:	4606      	mov	r6, r0
 801232a:	d802      	bhi.n	8012332 <_realloc_r+0x34>
 801232c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012330:	d8f4      	bhi.n	801231c <_realloc_r+0x1e>
 8012332:	4621      	mov	r1, r4
 8012334:	4638      	mov	r0, r7
 8012336:	f7fe fca1 	bl	8010c7c <_malloc_r>
 801233a:	4680      	mov	r8, r0
 801233c:	b908      	cbnz	r0, 8012342 <_realloc_r+0x44>
 801233e:	4645      	mov	r5, r8
 8012340:	e7ec      	b.n	801231c <_realloc_r+0x1e>
 8012342:	42b4      	cmp	r4, r6
 8012344:	4622      	mov	r2, r4
 8012346:	4629      	mov	r1, r5
 8012348:	bf28      	it	cs
 801234a:	4632      	movcs	r2, r6
 801234c:	f7fd fa53 	bl	800f7f6 <memcpy>
 8012350:	4629      	mov	r1, r5
 8012352:	4638      	mov	r0, r7
 8012354:	f7fe f8e4 	bl	8010520 <_free_r>
 8012358:	e7f1      	b.n	801233e <_realloc_r+0x40>
	...

0801235c <_strtoul_l.isra.0>:
 801235c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012360:	4e34      	ldr	r6, [pc, #208]	@ (8012434 <_strtoul_l.isra.0+0xd8>)
 8012362:	4686      	mov	lr, r0
 8012364:	460d      	mov	r5, r1
 8012366:	4628      	mov	r0, r5
 8012368:	f815 4b01 	ldrb.w	r4, [r5], #1
 801236c:	5d37      	ldrb	r7, [r6, r4]
 801236e:	f017 0708 	ands.w	r7, r7, #8
 8012372:	d1f8      	bne.n	8012366 <_strtoul_l.isra.0+0xa>
 8012374:	2c2d      	cmp	r4, #45	@ 0x2d
 8012376:	d110      	bne.n	801239a <_strtoul_l.isra.0+0x3e>
 8012378:	782c      	ldrb	r4, [r5, #0]
 801237a:	2701      	movs	r7, #1
 801237c:	1c85      	adds	r5, r0, #2
 801237e:	f033 0010 	bics.w	r0, r3, #16
 8012382:	d115      	bne.n	80123b0 <_strtoul_l.isra.0+0x54>
 8012384:	2c30      	cmp	r4, #48	@ 0x30
 8012386:	d10d      	bne.n	80123a4 <_strtoul_l.isra.0+0x48>
 8012388:	7828      	ldrb	r0, [r5, #0]
 801238a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801238e:	2858      	cmp	r0, #88	@ 0x58
 8012390:	d108      	bne.n	80123a4 <_strtoul_l.isra.0+0x48>
 8012392:	786c      	ldrb	r4, [r5, #1]
 8012394:	3502      	adds	r5, #2
 8012396:	2310      	movs	r3, #16
 8012398:	e00a      	b.n	80123b0 <_strtoul_l.isra.0+0x54>
 801239a:	2c2b      	cmp	r4, #43	@ 0x2b
 801239c:	bf04      	itt	eq
 801239e:	782c      	ldrbeq	r4, [r5, #0]
 80123a0:	1c85      	addeq	r5, r0, #2
 80123a2:	e7ec      	b.n	801237e <_strtoul_l.isra.0+0x22>
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1f6      	bne.n	8012396 <_strtoul_l.isra.0+0x3a>
 80123a8:	2c30      	cmp	r4, #48	@ 0x30
 80123aa:	bf14      	ite	ne
 80123ac:	230a      	movne	r3, #10
 80123ae:	2308      	moveq	r3, #8
 80123b0:	f04f 38ff 	mov.w	r8, #4294967295
 80123b4:	2600      	movs	r6, #0
 80123b6:	fbb8 f8f3 	udiv	r8, r8, r3
 80123ba:	fb03 f908 	mul.w	r9, r3, r8
 80123be:	ea6f 0909 	mvn.w	r9, r9
 80123c2:	4630      	mov	r0, r6
 80123c4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80123c8:	f1bc 0f09 	cmp.w	ip, #9
 80123cc:	d810      	bhi.n	80123f0 <_strtoul_l.isra.0+0x94>
 80123ce:	4664      	mov	r4, ip
 80123d0:	42a3      	cmp	r3, r4
 80123d2:	dd1e      	ble.n	8012412 <_strtoul_l.isra.0+0xb6>
 80123d4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80123d8:	d007      	beq.n	80123ea <_strtoul_l.isra.0+0x8e>
 80123da:	4580      	cmp	r8, r0
 80123dc:	d316      	bcc.n	801240c <_strtoul_l.isra.0+0xb0>
 80123de:	d101      	bne.n	80123e4 <_strtoul_l.isra.0+0x88>
 80123e0:	45a1      	cmp	r9, r4
 80123e2:	db13      	blt.n	801240c <_strtoul_l.isra.0+0xb0>
 80123e4:	fb00 4003 	mla	r0, r0, r3, r4
 80123e8:	2601      	movs	r6, #1
 80123ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123ee:	e7e9      	b.n	80123c4 <_strtoul_l.isra.0+0x68>
 80123f0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80123f4:	f1bc 0f19 	cmp.w	ip, #25
 80123f8:	d801      	bhi.n	80123fe <_strtoul_l.isra.0+0xa2>
 80123fa:	3c37      	subs	r4, #55	@ 0x37
 80123fc:	e7e8      	b.n	80123d0 <_strtoul_l.isra.0+0x74>
 80123fe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012402:	f1bc 0f19 	cmp.w	ip, #25
 8012406:	d804      	bhi.n	8012412 <_strtoul_l.isra.0+0xb6>
 8012408:	3c57      	subs	r4, #87	@ 0x57
 801240a:	e7e1      	b.n	80123d0 <_strtoul_l.isra.0+0x74>
 801240c:	f04f 36ff 	mov.w	r6, #4294967295
 8012410:	e7eb      	b.n	80123ea <_strtoul_l.isra.0+0x8e>
 8012412:	1c73      	adds	r3, r6, #1
 8012414:	d106      	bne.n	8012424 <_strtoul_l.isra.0+0xc8>
 8012416:	2322      	movs	r3, #34	@ 0x22
 8012418:	f8ce 3000 	str.w	r3, [lr]
 801241c:	4630      	mov	r0, r6
 801241e:	b932      	cbnz	r2, 801242e <_strtoul_l.isra.0+0xd2>
 8012420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012424:	b107      	cbz	r7, 8012428 <_strtoul_l.isra.0+0xcc>
 8012426:	4240      	negs	r0, r0
 8012428:	2a00      	cmp	r2, #0
 801242a:	d0f9      	beq.n	8012420 <_strtoul_l.isra.0+0xc4>
 801242c:	b106      	cbz	r6, 8012430 <_strtoul_l.isra.0+0xd4>
 801242e:	1e69      	subs	r1, r5, #1
 8012430:	6011      	str	r1, [r2, #0]
 8012432:	e7f5      	b.n	8012420 <_strtoul_l.isra.0+0xc4>
 8012434:	08017e19 	.word	0x08017e19

08012438 <_strtoul_r>:
 8012438:	f7ff bf90 	b.w	801235c <_strtoul_l.isra.0>

0801243c <__sfputc_r>:
 801243c:	6893      	ldr	r3, [r2, #8]
 801243e:	3b01      	subs	r3, #1
 8012440:	2b00      	cmp	r3, #0
 8012442:	b410      	push	{r4}
 8012444:	6093      	str	r3, [r2, #8]
 8012446:	da08      	bge.n	801245a <__sfputc_r+0x1e>
 8012448:	6994      	ldr	r4, [r2, #24]
 801244a:	42a3      	cmp	r3, r4
 801244c:	db01      	blt.n	8012452 <__sfputc_r+0x16>
 801244e:	290a      	cmp	r1, #10
 8012450:	d103      	bne.n	801245a <__sfputc_r+0x1e>
 8012452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012456:	f000 b933 	b.w	80126c0 <__swbuf_r>
 801245a:	6813      	ldr	r3, [r2, #0]
 801245c:	1c58      	adds	r0, r3, #1
 801245e:	6010      	str	r0, [r2, #0]
 8012460:	7019      	strb	r1, [r3, #0]
 8012462:	4608      	mov	r0, r1
 8012464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012468:	4770      	bx	lr

0801246a <__sfputs_r>:
 801246a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246c:	4606      	mov	r6, r0
 801246e:	460f      	mov	r7, r1
 8012470:	4614      	mov	r4, r2
 8012472:	18d5      	adds	r5, r2, r3
 8012474:	42ac      	cmp	r4, r5
 8012476:	d101      	bne.n	801247c <__sfputs_r+0x12>
 8012478:	2000      	movs	r0, #0
 801247a:	e007      	b.n	801248c <__sfputs_r+0x22>
 801247c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012480:	463a      	mov	r2, r7
 8012482:	4630      	mov	r0, r6
 8012484:	f7ff ffda 	bl	801243c <__sfputc_r>
 8012488:	1c43      	adds	r3, r0, #1
 801248a:	d1f3      	bne.n	8012474 <__sfputs_r+0xa>
 801248c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012490 <_vfiprintf_r>:
 8012490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012494:	460d      	mov	r5, r1
 8012496:	b09d      	sub	sp, #116	@ 0x74
 8012498:	4614      	mov	r4, r2
 801249a:	4698      	mov	r8, r3
 801249c:	4606      	mov	r6, r0
 801249e:	b118      	cbz	r0, 80124a8 <_vfiprintf_r+0x18>
 80124a0:	6a03      	ldr	r3, [r0, #32]
 80124a2:	b90b      	cbnz	r3, 80124a8 <_vfiprintf_r+0x18>
 80124a4:	f7fc ff84 	bl	800f3b0 <__sinit>
 80124a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124aa:	07d9      	lsls	r1, r3, #31
 80124ac:	d405      	bmi.n	80124ba <_vfiprintf_r+0x2a>
 80124ae:	89ab      	ldrh	r3, [r5, #12]
 80124b0:	059a      	lsls	r2, r3, #22
 80124b2:	d402      	bmi.n	80124ba <_vfiprintf_r+0x2a>
 80124b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124b6:	f7fd f99c 	bl	800f7f2 <__retarget_lock_acquire_recursive>
 80124ba:	89ab      	ldrh	r3, [r5, #12]
 80124bc:	071b      	lsls	r3, r3, #28
 80124be:	d501      	bpl.n	80124c4 <_vfiprintf_r+0x34>
 80124c0:	692b      	ldr	r3, [r5, #16]
 80124c2:	b99b      	cbnz	r3, 80124ec <_vfiprintf_r+0x5c>
 80124c4:	4629      	mov	r1, r5
 80124c6:	4630      	mov	r0, r6
 80124c8:	f000 f938 	bl	801273c <__swsetup_r>
 80124cc:	b170      	cbz	r0, 80124ec <_vfiprintf_r+0x5c>
 80124ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124d0:	07dc      	lsls	r4, r3, #31
 80124d2:	d504      	bpl.n	80124de <_vfiprintf_r+0x4e>
 80124d4:	f04f 30ff 	mov.w	r0, #4294967295
 80124d8:	b01d      	add	sp, #116	@ 0x74
 80124da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124de:	89ab      	ldrh	r3, [r5, #12]
 80124e0:	0598      	lsls	r0, r3, #22
 80124e2:	d4f7      	bmi.n	80124d4 <_vfiprintf_r+0x44>
 80124e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124e6:	f7fd f985 	bl	800f7f4 <__retarget_lock_release_recursive>
 80124ea:	e7f3      	b.n	80124d4 <_vfiprintf_r+0x44>
 80124ec:	2300      	movs	r3, #0
 80124ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80124f0:	2320      	movs	r3, #32
 80124f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80124fa:	2330      	movs	r3, #48	@ 0x30
 80124fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80126ac <_vfiprintf_r+0x21c>
 8012500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012504:	f04f 0901 	mov.w	r9, #1
 8012508:	4623      	mov	r3, r4
 801250a:	469a      	mov	sl, r3
 801250c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012510:	b10a      	cbz	r2, 8012516 <_vfiprintf_r+0x86>
 8012512:	2a25      	cmp	r2, #37	@ 0x25
 8012514:	d1f9      	bne.n	801250a <_vfiprintf_r+0x7a>
 8012516:	ebba 0b04 	subs.w	fp, sl, r4
 801251a:	d00b      	beq.n	8012534 <_vfiprintf_r+0xa4>
 801251c:	465b      	mov	r3, fp
 801251e:	4622      	mov	r2, r4
 8012520:	4629      	mov	r1, r5
 8012522:	4630      	mov	r0, r6
 8012524:	f7ff ffa1 	bl	801246a <__sfputs_r>
 8012528:	3001      	adds	r0, #1
 801252a:	f000 80a7 	beq.w	801267c <_vfiprintf_r+0x1ec>
 801252e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012530:	445a      	add	r2, fp
 8012532:	9209      	str	r2, [sp, #36]	@ 0x24
 8012534:	f89a 3000 	ldrb.w	r3, [sl]
 8012538:	2b00      	cmp	r3, #0
 801253a:	f000 809f 	beq.w	801267c <_vfiprintf_r+0x1ec>
 801253e:	2300      	movs	r3, #0
 8012540:	f04f 32ff 	mov.w	r2, #4294967295
 8012544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012548:	f10a 0a01 	add.w	sl, sl, #1
 801254c:	9304      	str	r3, [sp, #16]
 801254e:	9307      	str	r3, [sp, #28]
 8012550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012554:	931a      	str	r3, [sp, #104]	@ 0x68
 8012556:	4654      	mov	r4, sl
 8012558:	2205      	movs	r2, #5
 801255a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801255e:	4853      	ldr	r0, [pc, #332]	@ (80126ac <_vfiprintf_r+0x21c>)
 8012560:	f7ed fe46 	bl	80001f0 <memchr>
 8012564:	9a04      	ldr	r2, [sp, #16]
 8012566:	b9d8      	cbnz	r0, 80125a0 <_vfiprintf_r+0x110>
 8012568:	06d1      	lsls	r1, r2, #27
 801256a:	bf44      	itt	mi
 801256c:	2320      	movmi	r3, #32
 801256e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012572:	0713      	lsls	r3, r2, #28
 8012574:	bf44      	itt	mi
 8012576:	232b      	movmi	r3, #43	@ 0x2b
 8012578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801257c:	f89a 3000 	ldrb.w	r3, [sl]
 8012580:	2b2a      	cmp	r3, #42	@ 0x2a
 8012582:	d015      	beq.n	80125b0 <_vfiprintf_r+0x120>
 8012584:	9a07      	ldr	r2, [sp, #28]
 8012586:	4654      	mov	r4, sl
 8012588:	2000      	movs	r0, #0
 801258a:	f04f 0c0a 	mov.w	ip, #10
 801258e:	4621      	mov	r1, r4
 8012590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012594:	3b30      	subs	r3, #48	@ 0x30
 8012596:	2b09      	cmp	r3, #9
 8012598:	d94b      	bls.n	8012632 <_vfiprintf_r+0x1a2>
 801259a:	b1b0      	cbz	r0, 80125ca <_vfiprintf_r+0x13a>
 801259c:	9207      	str	r2, [sp, #28]
 801259e:	e014      	b.n	80125ca <_vfiprintf_r+0x13a>
 80125a0:	eba0 0308 	sub.w	r3, r0, r8
 80125a4:	fa09 f303 	lsl.w	r3, r9, r3
 80125a8:	4313      	orrs	r3, r2
 80125aa:	9304      	str	r3, [sp, #16]
 80125ac:	46a2      	mov	sl, r4
 80125ae:	e7d2      	b.n	8012556 <_vfiprintf_r+0xc6>
 80125b0:	9b03      	ldr	r3, [sp, #12]
 80125b2:	1d19      	adds	r1, r3, #4
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	9103      	str	r1, [sp, #12]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	bfbb      	ittet	lt
 80125bc:	425b      	neglt	r3, r3
 80125be:	f042 0202 	orrlt.w	r2, r2, #2
 80125c2:	9307      	strge	r3, [sp, #28]
 80125c4:	9307      	strlt	r3, [sp, #28]
 80125c6:	bfb8      	it	lt
 80125c8:	9204      	strlt	r2, [sp, #16]
 80125ca:	7823      	ldrb	r3, [r4, #0]
 80125cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80125ce:	d10a      	bne.n	80125e6 <_vfiprintf_r+0x156>
 80125d0:	7863      	ldrb	r3, [r4, #1]
 80125d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80125d4:	d132      	bne.n	801263c <_vfiprintf_r+0x1ac>
 80125d6:	9b03      	ldr	r3, [sp, #12]
 80125d8:	1d1a      	adds	r2, r3, #4
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	9203      	str	r2, [sp, #12]
 80125de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125e2:	3402      	adds	r4, #2
 80125e4:	9305      	str	r3, [sp, #20]
 80125e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80126bc <_vfiprintf_r+0x22c>
 80125ea:	7821      	ldrb	r1, [r4, #0]
 80125ec:	2203      	movs	r2, #3
 80125ee:	4650      	mov	r0, sl
 80125f0:	f7ed fdfe 	bl	80001f0 <memchr>
 80125f4:	b138      	cbz	r0, 8012606 <_vfiprintf_r+0x176>
 80125f6:	9b04      	ldr	r3, [sp, #16]
 80125f8:	eba0 000a 	sub.w	r0, r0, sl
 80125fc:	2240      	movs	r2, #64	@ 0x40
 80125fe:	4082      	lsls	r2, r0
 8012600:	4313      	orrs	r3, r2
 8012602:	3401      	adds	r4, #1
 8012604:	9304      	str	r3, [sp, #16]
 8012606:	f814 1b01 	ldrb.w	r1, [r4], #1
 801260a:	4829      	ldr	r0, [pc, #164]	@ (80126b0 <_vfiprintf_r+0x220>)
 801260c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012610:	2206      	movs	r2, #6
 8012612:	f7ed fded 	bl	80001f0 <memchr>
 8012616:	2800      	cmp	r0, #0
 8012618:	d03f      	beq.n	801269a <_vfiprintf_r+0x20a>
 801261a:	4b26      	ldr	r3, [pc, #152]	@ (80126b4 <_vfiprintf_r+0x224>)
 801261c:	bb1b      	cbnz	r3, 8012666 <_vfiprintf_r+0x1d6>
 801261e:	9b03      	ldr	r3, [sp, #12]
 8012620:	3307      	adds	r3, #7
 8012622:	f023 0307 	bic.w	r3, r3, #7
 8012626:	3308      	adds	r3, #8
 8012628:	9303      	str	r3, [sp, #12]
 801262a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801262c:	443b      	add	r3, r7
 801262e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012630:	e76a      	b.n	8012508 <_vfiprintf_r+0x78>
 8012632:	fb0c 3202 	mla	r2, ip, r2, r3
 8012636:	460c      	mov	r4, r1
 8012638:	2001      	movs	r0, #1
 801263a:	e7a8      	b.n	801258e <_vfiprintf_r+0xfe>
 801263c:	2300      	movs	r3, #0
 801263e:	3401      	adds	r4, #1
 8012640:	9305      	str	r3, [sp, #20]
 8012642:	4619      	mov	r1, r3
 8012644:	f04f 0c0a 	mov.w	ip, #10
 8012648:	4620      	mov	r0, r4
 801264a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801264e:	3a30      	subs	r2, #48	@ 0x30
 8012650:	2a09      	cmp	r2, #9
 8012652:	d903      	bls.n	801265c <_vfiprintf_r+0x1cc>
 8012654:	2b00      	cmp	r3, #0
 8012656:	d0c6      	beq.n	80125e6 <_vfiprintf_r+0x156>
 8012658:	9105      	str	r1, [sp, #20]
 801265a:	e7c4      	b.n	80125e6 <_vfiprintf_r+0x156>
 801265c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012660:	4604      	mov	r4, r0
 8012662:	2301      	movs	r3, #1
 8012664:	e7f0      	b.n	8012648 <_vfiprintf_r+0x1b8>
 8012666:	ab03      	add	r3, sp, #12
 8012668:	9300      	str	r3, [sp, #0]
 801266a:	462a      	mov	r2, r5
 801266c:	4b12      	ldr	r3, [pc, #72]	@ (80126b8 <_vfiprintf_r+0x228>)
 801266e:	a904      	add	r1, sp, #16
 8012670:	4630      	mov	r0, r6
 8012672:	f7fc f84d 	bl	800e710 <_printf_float>
 8012676:	4607      	mov	r7, r0
 8012678:	1c78      	adds	r0, r7, #1
 801267a:	d1d6      	bne.n	801262a <_vfiprintf_r+0x19a>
 801267c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801267e:	07d9      	lsls	r1, r3, #31
 8012680:	d405      	bmi.n	801268e <_vfiprintf_r+0x1fe>
 8012682:	89ab      	ldrh	r3, [r5, #12]
 8012684:	059a      	lsls	r2, r3, #22
 8012686:	d402      	bmi.n	801268e <_vfiprintf_r+0x1fe>
 8012688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801268a:	f7fd f8b3 	bl	800f7f4 <__retarget_lock_release_recursive>
 801268e:	89ab      	ldrh	r3, [r5, #12]
 8012690:	065b      	lsls	r3, r3, #25
 8012692:	f53f af1f 	bmi.w	80124d4 <_vfiprintf_r+0x44>
 8012696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012698:	e71e      	b.n	80124d8 <_vfiprintf_r+0x48>
 801269a:	ab03      	add	r3, sp, #12
 801269c:	9300      	str	r3, [sp, #0]
 801269e:	462a      	mov	r2, r5
 80126a0:	4b05      	ldr	r3, [pc, #20]	@ (80126b8 <_vfiprintf_r+0x228>)
 80126a2:	a904      	add	r1, sp, #16
 80126a4:	4630      	mov	r0, r6
 80126a6:	f7fc facb 	bl	800ec40 <_printf_i>
 80126aa:	e7e4      	b.n	8012676 <_vfiprintf_r+0x1e6>
 80126ac:	08017d95 	.word	0x08017d95
 80126b0:	08017d9f 	.word	0x08017d9f
 80126b4:	0800e711 	.word	0x0800e711
 80126b8:	0801246b 	.word	0x0801246b
 80126bc:	08017d9b 	.word	0x08017d9b

080126c0 <__swbuf_r>:
 80126c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126c2:	460e      	mov	r6, r1
 80126c4:	4614      	mov	r4, r2
 80126c6:	4605      	mov	r5, r0
 80126c8:	b118      	cbz	r0, 80126d2 <__swbuf_r+0x12>
 80126ca:	6a03      	ldr	r3, [r0, #32]
 80126cc:	b90b      	cbnz	r3, 80126d2 <__swbuf_r+0x12>
 80126ce:	f7fc fe6f 	bl	800f3b0 <__sinit>
 80126d2:	69a3      	ldr	r3, [r4, #24]
 80126d4:	60a3      	str	r3, [r4, #8]
 80126d6:	89a3      	ldrh	r3, [r4, #12]
 80126d8:	071a      	lsls	r2, r3, #28
 80126da:	d501      	bpl.n	80126e0 <__swbuf_r+0x20>
 80126dc:	6923      	ldr	r3, [r4, #16]
 80126de:	b943      	cbnz	r3, 80126f2 <__swbuf_r+0x32>
 80126e0:	4621      	mov	r1, r4
 80126e2:	4628      	mov	r0, r5
 80126e4:	f000 f82a 	bl	801273c <__swsetup_r>
 80126e8:	b118      	cbz	r0, 80126f2 <__swbuf_r+0x32>
 80126ea:	f04f 37ff 	mov.w	r7, #4294967295
 80126ee:	4638      	mov	r0, r7
 80126f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126f2:	6823      	ldr	r3, [r4, #0]
 80126f4:	6922      	ldr	r2, [r4, #16]
 80126f6:	1a98      	subs	r0, r3, r2
 80126f8:	6963      	ldr	r3, [r4, #20]
 80126fa:	b2f6      	uxtb	r6, r6
 80126fc:	4283      	cmp	r3, r0
 80126fe:	4637      	mov	r7, r6
 8012700:	dc05      	bgt.n	801270e <__swbuf_r+0x4e>
 8012702:	4621      	mov	r1, r4
 8012704:	4628      	mov	r0, r5
 8012706:	f7ff fd07 	bl	8012118 <_fflush_r>
 801270a:	2800      	cmp	r0, #0
 801270c:	d1ed      	bne.n	80126ea <__swbuf_r+0x2a>
 801270e:	68a3      	ldr	r3, [r4, #8]
 8012710:	3b01      	subs	r3, #1
 8012712:	60a3      	str	r3, [r4, #8]
 8012714:	6823      	ldr	r3, [r4, #0]
 8012716:	1c5a      	adds	r2, r3, #1
 8012718:	6022      	str	r2, [r4, #0]
 801271a:	701e      	strb	r6, [r3, #0]
 801271c:	6962      	ldr	r2, [r4, #20]
 801271e:	1c43      	adds	r3, r0, #1
 8012720:	429a      	cmp	r2, r3
 8012722:	d004      	beq.n	801272e <__swbuf_r+0x6e>
 8012724:	89a3      	ldrh	r3, [r4, #12]
 8012726:	07db      	lsls	r3, r3, #31
 8012728:	d5e1      	bpl.n	80126ee <__swbuf_r+0x2e>
 801272a:	2e0a      	cmp	r6, #10
 801272c:	d1df      	bne.n	80126ee <__swbuf_r+0x2e>
 801272e:	4621      	mov	r1, r4
 8012730:	4628      	mov	r0, r5
 8012732:	f7ff fcf1 	bl	8012118 <_fflush_r>
 8012736:	2800      	cmp	r0, #0
 8012738:	d0d9      	beq.n	80126ee <__swbuf_r+0x2e>
 801273a:	e7d6      	b.n	80126ea <__swbuf_r+0x2a>

0801273c <__swsetup_r>:
 801273c:	b538      	push	{r3, r4, r5, lr}
 801273e:	4b29      	ldr	r3, [pc, #164]	@ (80127e4 <__swsetup_r+0xa8>)
 8012740:	4605      	mov	r5, r0
 8012742:	6818      	ldr	r0, [r3, #0]
 8012744:	460c      	mov	r4, r1
 8012746:	b118      	cbz	r0, 8012750 <__swsetup_r+0x14>
 8012748:	6a03      	ldr	r3, [r0, #32]
 801274a:	b90b      	cbnz	r3, 8012750 <__swsetup_r+0x14>
 801274c:	f7fc fe30 	bl	800f3b0 <__sinit>
 8012750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012754:	0719      	lsls	r1, r3, #28
 8012756:	d422      	bmi.n	801279e <__swsetup_r+0x62>
 8012758:	06da      	lsls	r2, r3, #27
 801275a:	d407      	bmi.n	801276c <__swsetup_r+0x30>
 801275c:	2209      	movs	r2, #9
 801275e:	602a      	str	r2, [r5, #0]
 8012760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012764:	81a3      	strh	r3, [r4, #12]
 8012766:	f04f 30ff 	mov.w	r0, #4294967295
 801276a:	e033      	b.n	80127d4 <__swsetup_r+0x98>
 801276c:	0758      	lsls	r0, r3, #29
 801276e:	d512      	bpl.n	8012796 <__swsetup_r+0x5a>
 8012770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012772:	b141      	cbz	r1, 8012786 <__swsetup_r+0x4a>
 8012774:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012778:	4299      	cmp	r1, r3
 801277a:	d002      	beq.n	8012782 <__swsetup_r+0x46>
 801277c:	4628      	mov	r0, r5
 801277e:	f7fd fecf 	bl	8010520 <_free_r>
 8012782:	2300      	movs	r3, #0
 8012784:	6363      	str	r3, [r4, #52]	@ 0x34
 8012786:	89a3      	ldrh	r3, [r4, #12]
 8012788:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801278c:	81a3      	strh	r3, [r4, #12]
 801278e:	2300      	movs	r3, #0
 8012790:	6063      	str	r3, [r4, #4]
 8012792:	6923      	ldr	r3, [r4, #16]
 8012794:	6023      	str	r3, [r4, #0]
 8012796:	89a3      	ldrh	r3, [r4, #12]
 8012798:	f043 0308 	orr.w	r3, r3, #8
 801279c:	81a3      	strh	r3, [r4, #12]
 801279e:	6923      	ldr	r3, [r4, #16]
 80127a0:	b94b      	cbnz	r3, 80127b6 <__swsetup_r+0x7a>
 80127a2:	89a3      	ldrh	r3, [r4, #12]
 80127a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80127a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127ac:	d003      	beq.n	80127b6 <__swsetup_r+0x7a>
 80127ae:	4621      	mov	r1, r4
 80127b0:	4628      	mov	r0, r5
 80127b2:	f000 f88b 	bl	80128cc <__smakebuf_r>
 80127b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127ba:	f013 0201 	ands.w	r2, r3, #1
 80127be:	d00a      	beq.n	80127d6 <__swsetup_r+0x9a>
 80127c0:	2200      	movs	r2, #0
 80127c2:	60a2      	str	r2, [r4, #8]
 80127c4:	6962      	ldr	r2, [r4, #20]
 80127c6:	4252      	negs	r2, r2
 80127c8:	61a2      	str	r2, [r4, #24]
 80127ca:	6922      	ldr	r2, [r4, #16]
 80127cc:	b942      	cbnz	r2, 80127e0 <__swsetup_r+0xa4>
 80127ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80127d2:	d1c5      	bne.n	8012760 <__swsetup_r+0x24>
 80127d4:	bd38      	pop	{r3, r4, r5, pc}
 80127d6:	0799      	lsls	r1, r3, #30
 80127d8:	bf58      	it	pl
 80127da:	6962      	ldrpl	r2, [r4, #20]
 80127dc:	60a2      	str	r2, [r4, #8]
 80127de:	e7f4      	b.n	80127ca <__swsetup_r+0x8e>
 80127e0:	2000      	movs	r0, #0
 80127e2:	e7f7      	b.n	80127d4 <__swsetup_r+0x98>
 80127e4:	20000280 	.word	0x20000280

080127e8 <_raise_r>:
 80127e8:	291f      	cmp	r1, #31
 80127ea:	b538      	push	{r3, r4, r5, lr}
 80127ec:	4605      	mov	r5, r0
 80127ee:	460c      	mov	r4, r1
 80127f0:	d904      	bls.n	80127fc <_raise_r+0x14>
 80127f2:	2316      	movs	r3, #22
 80127f4:	6003      	str	r3, [r0, #0]
 80127f6:	f04f 30ff 	mov.w	r0, #4294967295
 80127fa:	bd38      	pop	{r3, r4, r5, pc}
 80127fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80127fe:	b112      	cbz	r2, 8012806 <_raise_r+0x1e>
 8012800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012804:	b94b      	cbnz	r3, 801281a <_raise_r+0x32>
 8012806:	4628      	mov	r0, r5
 8012808:	f000 f830 	bl	801286c <_getpid_r>
 801280c:	4622      	mov	r2, r4
 801280e:	4601      	mov	r1, r0
 8012810:	4628      	mov	r0, r5
 8012812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012816:	f000 b817 	b.w	8012848 <_kill_r>
 801281a:	2b01      	cmp	r3, #1
 801281c:	d00a      	beq.n	8012834 <_raise_r+0x4c>
 801281e:	1c59      	adds	r1, r3, #1
 8012820:	d103      	bne.n	801282a <_raise_r+0x42>
 8012822:	2316      	movs	r3, #22
 8012824:	6003      	str	r3, [r0, #0]
 8012826:	2001      	movs	r0, #1
 8012828:	e7e7      	b.n	80127fa <_raise_r+0x12>
 801282a:	2100      	movs	r1, #0
 801282c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012830:	4620      	mov	r0, r4
 8012832:	4798      	blx	r3
 8012834:	2000      	movs	r0, #0
 8012836:	e7e0      	b.n	80127fa <_raise_r+0x12>

08012838 <raise>:
 8012838:	4b02      	ldr	r3, [pc, #8]	@ (8012844 <raise+0xc>)
 801283a:	4601      	mov	r1, r0
 801283c:	6818      	ldr	r0, [r3, #0]
 801283e:	f7ff bfd3 	b.w	80127e8 <_raise_r>
 8012842:	bf00      	nop
 8012844:	20000280 	.word	0x20000280

08012848 <_kill_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4d07      	ldr	r5, [pc, #28]	@ (8012868 <_kill_r+0x20>)
 801284c:	2300      	movs	r3, #0
 801284e:	4604      	mov	r4, r0
 8012850:	4608      	mov	r0, r1
 8012852:	4611      	mov	r1, r2
 8012854:	602b      	str	r3, [r5, #0]
 8012856:	f7f0 f98d 	bl	8002b74 <_kill>
 801285a:	1c43      	adds	r3, r0, #1
 801285c:	d102      	bne.n	8012864 <_kill_r+0x1c>
 801285e:	682b      	ldr	r3, [r5, #0]
 8012860:	b103      	cbz	r3, 8012864 <_kill_r+0x1c>
 8012862:	6023      	str	r3, [r4, #0]
 8012864:	bd38      	pop	{r3, r4, r5, pc}
 8012866:	bf00      	nop
 8012868:	2001f124 	.word	0x2001f124

0801286c <_getpid_r>:
 801286c:	f7f0 b97a 	b.w	8002b64 <_getpid>

08012870 <_malloc_usable_size_r>:
 8012870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012874:	1f18      	subs	r0, r3, #4
 8012876:	2b00      	cmp	r3, #0
 8012878:	bfbc      	itt	lt
 801287a:	580b      	ldrlt	r3, [r1, r0]
 801287c:	18c0      	addlt	r0, r0, r3
 801287e:	4770      	bx	lr

08012880 <__swhatbuf_r>:
 8012880:	b570      	push	{r4, r5, r6, lr}
 8012882:	460c      	mov	r4, r1
 8012884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012888:	2900      	cmp	r1, #0
 801288a:	b096      	sub	sp, #88	@ 0x58
 801288c:	4615      	mov	r5, r2
 801288e:	461e      	mov	r6, r3
 8012890:	da0d      	bge.n	80128ae <__swhatbuf_r+0x2e>
 8012892:	89a3      	ldrh	r3, [r4, #12]
 8012894:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012898:	f04f 0100 	mov.w	r1, #0
 801289c:	bf14      	ite	ne
 801289e:	2340      	movne	r3, #64	@ 0x40
 80128a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80128a4:	2000      	movs	r0, #0
 80128a6:	6031      	str	r1, [r6, #0]
 80128a8:	602b      	str	r3, [r5, #0]
 80128aa:	b016      	add	sp, #88	@ 0x58
 80128ac:	bd70      	pop	{r4, r5, r6, pc}
 80128ae:	466a      	mov	r2, sp
 80128b0:	f000 f848 	bl	8012944 <_fstat_r>
 80128b4:	2800      	cmp	r0, #0
 80128b6:	dbec      	blt.n	8012892 <__swhatbuf_r+0x12>
 80128b8:	9901      	ldr	r1, [sp, #4]
 80128ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80128be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80128c2:	4259      	negs	r1, r3
 80128c4:	4159      	adcs	r1, r3
 80128c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80128ca:	e7eb      	b.n	80128a4 <__swhatbuf_r+0x24>

080128cc <__smakebuf_r>:
 80128cc:	898b      	ldrh	r3, [r1, #12]
 80128ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128d0:	079d      	lsls	r5, r3, #30
 80128d2:	4606      	mov	r6, r0
 80128d4:	460c      	mov	r4, r1
 80128d6:	d507      	bpl.n	80128e8 <__smakebuf_r+0x1c>
 80128d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80128dc:	6023      	str	r3, [r4, #0]
 80128de:	6123      	str	r3, [r4, #16]
 80128e0:	2301      	movs	r3, #1
 80128e2:	6163      	str	r3, [r4, #20]
 80128e4:	b003      	add	sp, #12
 80128e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128e8:	ab01      	add	r3, sp, #4
 80128ea:	466a      	mov	r2, sp
 80128ec:	f7ff ffc8 	bl	8012880 <__swhatbuf_r>
 80128f0:	9f00      	ldr	r7, [sp, #0]
 80128f2:	4605      	mov	r5, r0
 80128f4:	4639      	mov	r1, r7
 80128f6:	4630      	mov	r0, r6
 80128f8:	f7fe f9c0 	bl	8010c7c <_malloc_r>
 80128fc:	b948      	cbnz	r0, 8012912 <__smakebuf_r+0x46>
 80128fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012902:	059a      	lsls	r2, r3, #22
 8012904:	d4ee      	bmi.n	80128e4 <__smakebuf_r+0x18>
 8012906:	f023 0303 	bic.w	r3, r3, #3
 801290a:	f043 0302 	orr.w	r3, r3, #2
 801290e:	81a3      	strh	r3, [r4, #12]
 8012910:	e7e2      	b.n	80128d8 <__smakebuf_r+0xc>
 8012912:	89a3      	ldrh	r3, [r4, #12]
 8012914:	6020      	str	r0, [r4, #0]
 8012916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801291a:	81a3      	strh	r3, [r4, #12]
 801291c:	9b01      	ldr	r3, [sp, #4]
 801291e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012922:	b15b      	cbz	r3, 801293c <__smakebuf_r+0x70>
 8012924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012928:	4630      	mov	r0, r6
 801292a:	f000 f81d 	bl	8012968 <_isatty_r>
 801292e:	b128      	cbz	r0, 801293c <__smakebuf_r+0x70>
 8012930:	89a3      	ldrh	r3, [r4, #12]
 8012932:	f023 0303 	bic.w	r3, r3, #3
 8012936:	f043 0301 	orr.w	r3, r3, #1
 801293a:	81a3      	strh	r3, [r4, #12]
 801293c:	89a3      	ldrh	r3, [r4, #12]
 801293e:	431d      	orrs	r5, r3
 8012940:	81a5      	strh	r5, [r4, #12]
 8012942:	e7cf      	b.n	80128e4 <__smakebuf_r+0x18>

08012944 <_fstat_r>:
 8012944:	b538      	push	{r3, r4, r5, lr}
 8012946:	4d07      	ldr	r5, [pc, #28]	@ (8012964 <_fstat_r+0x20>)
 8012948:	2300      	movs	r3, #0
 801294a:	4604      	mov	r4, r0
 801294c:	4608      	mov	r0, r1
 801294e:	4611      	mov	r1, r2
 8012950:	602b      	str	r3, [r5, #0]
 8012952:	f7f0 f96f 	bl	8002c34 <_fstat>
 8012956:	1c43      	adds	r3, r0, #1
 8012958:	d102      	bne.n	8012960 <_fstat_r+0x1c>
 801295a:	682b      	ldr	r3, [r5, #0]
 801295c:	b103      	cbz	r3, 8012960 <_fstat_r+0x1c>
 801295e:	6023      	str	r3, [r4, #0]
 8012960:	bd38      	pop	{r3, r4, r5, pc}
 8012962:	bf00      	nop
 8012964:	2001f124 	.word	0x2001f124

08012968 <_isatty_r>:
 8012968:	b538      	push	{r3, r4, r5, lr}
 801296a:	4d06      	ldr	r5, [pc, #24]	@ (8012984 <_isatty_r+0x1c>)
 801296c:	2300      	movs	r3, #0
 801296e:	4604      	mov	r4, r0
 8012970:	4608      	mov	r0, r1
 8012972:	602b      	str	r3, [r5, #0]
 8012974:	f7f0 f96e 	bl	8002c54 <_isatty>
 8012978:	1c43      	adds	r3, r0, #1
 801297a:	d102      	bne.n	8012982 <_isatty_r+0x1a>
 801297c:	682b      	ldr	r3, [r5, #0]
 801297e:	b103      	cbz	r3, 8012982 <_isatty_r+0x1a>
 8012980:	6023      	str	r3, [r4, #0]
 8012982:	bd38      	pop	{r3, r4, r5, pc}
 8012984:	2001f124 	.word	0x2001f124

08012988 <sqrtf>:
 8012988:	b508      	push	{r3, lr}
 801298a:	ed2d 8b02 	vpush	{d8}
 801298e:	eeb0 8a40 	vmov.f32	s16, s0
 8012992:	f000 f817 	bl	80129c4 <__ieee754_sqrtf>
 8012996:	eeb4 8a48 	vcmp.f32	s16, s16
 801299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801299e:	d60c      	bvs.n	80129ba <sqrtf+0x32>
 80129a0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80129c0 <sqrtf+0x38>
 80129a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80129a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ac:	d505      	bpl.n	80129ba <sqrtf+0x32>
 80129ae:	f7fc fef5 	bl	800f79c <__errno>
 80129b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80129b6:	2321      	movs	r3, #33	@ 0x21
 80129b8:	6003      	str	r3, [r0, #0]
 80129ba:	ecbd 8b02 	vpop	{d8}
 80129be:	bd08      	pop	{r3, pc}
 80129c0:	00000000 	.word	0x00000000

080129c4 <__ieee754_sqrtf>:
 80129c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80129c8:	4770      	bx	lr
	...

080129cc <_init>:
 80129cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ce:	bf00      	nop
 80129d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129d2:	bc08      	pop	{r3}
 80129d4:	469e      	mov	lr, r3
 80129d6:	4770      	bx	lr

080129d8 <_fini>:
 80129d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129da:	bf00      	nop
 80129dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129de:	bc08      	pop	{r3}
 80129e0:	469e      	mov	lr, r3
 80129e2:	4770      	bx	lr
