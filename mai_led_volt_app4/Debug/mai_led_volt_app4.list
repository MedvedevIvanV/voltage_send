
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e824  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001a84c  0800e9b8  0800e9b8  0000f9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029204  08029204  0002b2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08029204  08029204  0002a204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802920c  0802920c  0002b2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802920c  0802920c  0002a20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08029210  08029210  0002a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  08029214  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002b2c4  2**0
                  CONTENTS
 10 .bss          00006d40  200002c4  200002c4  0002b2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20007004  20007004  0002b2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002b2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a258  00000000  00000000  0002b2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f36  00000000  00000000  0004554c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  00049488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001185  00000000  00000000  0004ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024176  00000000  00000000  0004bcdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c286  00000000  00000000  0006fe53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb848  00000000  00000000  0008c0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00157921  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075ac  00000000  00000000  00157964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0015ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e99c 	.word	0x0800e99c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800e99c 	.word	0x0800e99c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Read_Thermocouple_Temperature>:
/* USER CODE BEGIN 0 */
/**
  * @brief Чтение температуры с термопары
  * @return Сырое значение температуры (12 бит)
  */
uint16_t Read_Thermocouple_Temperature(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]
    uint16_t raw_data = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Настройка PC11 (DATA) как входа
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800103a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800103e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4619      	mov	r1, r3
 800104e:	4835      	ldr	r0, [pc, #212]	@ (8001124 <Read_Thermocouple_Temperature+0x104>)
 8001050:	f001 fb94 	bl	800277c <HAL_GPIO_Init>

    // Активация чипа (активный низкий уровень на PC8 - термопара CS)
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800105a:	4832      	ldr	r0, [pc, #200]	@ (8001124 <Read_Thermocouple_Temperature+0x104>)
 800105c:	f001 fd42 	bl	8002ae4 <HAL_GPIO_WritePin>

    // Задержка для стабилизации (минимум 100ns по даташиту)
    for(volatile int i = 0; i < 10; i++);
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e002      	b.n	800106c <Read_Thermocouple_Temperature+0x4c>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3301      	adds	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b09      	cmp	r3, #9
 8001070:	ddf9      	ble.n	8001066 <Read_Thermocouple_Temperature+0x46>

    // Чтение 16 бит данных
    for(uint8_t i = 0; i < 16; i++) {
 8001072:	2300      	movs	r3, #0
 8001074:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001078:	e037      	b.n	80010ea <Read_Thermocouple_Temperature+0xca>
        // Генерация тактового импульса (PC10 - DCLK)
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001080:	4828      	ldr	r0, [pc, #160]	@ (8001124 <Read_Thermocouple_Temperature+0x104>)
 8001082:	f001 fd2f 	bl	8002ae4 <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++); // Короткая задержка
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	e002      	b.n	8001092 <Read_Thermocouple_Temperature+0x72>
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	3301      	adds	r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2b04      	cmp	r3, #4
 8001096:	ddf9      	ble.n	800108c <Read_Thermocouple_Temperature+0x6c>

        // Чтение бита данных (MSB first)
        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) {
 8001098:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800109c:	4821      	ldr	r0, [pc, #132]	@ (8001124 <Read_Thermocouple_Temperature+0x104>)
 800109e:	f001 fd09 	bl	8002ab4 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00c      	beq.n	80010c2 <Read_Thermocouple_Temperature+0xa2>
            raw_data |= (1 << (15 - i));
 80010a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010ac:	f1c3 030f 	rsb	r3, r3, #15
 80010b0:	2201      	movs	r2, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21b      	sxth	r3, r3
 80010c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010c8:	4816      	ldr	r0, [pc, #88]	@ (8001124 <Read_Thermocouple_Temperature+0x104>)
 80010ca:	f001 fd0b 	bl	8002ae4 <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++); // Короткая задержка
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	e002      	b.n	80010da <Read_Thermocouple_Temperature+0xba>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3301      	adds	r3, #1
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	ddf9      	ble.n	80010d4 <Read_Thermocouple_Temperature+0xb4>
    for(uint8_t i = 0; i < 16; i++) {
 80010e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010e4:	3301      	adds	r3, #1
 80010e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80010ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	d9c3      	bls.n	800107a <Read_Thermocouple_Temperature+0x5a>
    }

    // Деактивация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f8:	480a      	ldr	r0, [pc, #40]	@ (8001124 <Read_Thermocouple_Temperature+0x104>)
 80010fa:	f001 fcf3 	bl	8002ae4 <HAL_GPIO_WritePin>

    // Проверка на разомкнутую цепь (бит D2)
    if(raw_data & 0x04) {
 80010fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <Read_Thermocouple_Temperature+0xee>
        return 0xFFFF; // Код ошибки - разомкнутая цепь
 8001108:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800110c:	e006      	b.n	800111c <Read_Thermocouple_Temperature+0xfc>
    }

    // Извлечение 12-битного значения температуры (биты D14-D3)
    raw_data >>= 3; // Убираем 3 младших бита (D2-D0)
 800110e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	84fb      	strh	r3, [r7, #38]	@ 0x26
    return raw_data & 0x0FFF; // Оставляем только 12 бит температуры
 8001114:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111a:	b29b      	uxth	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	3728      	adds	r7, #40	@ 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020800 	.word	0x40020800

08001128 <Send_Temperature_To_USB>:

/**
  * @brief Отправка температуры по USB
  */
void Send_Temperature_To_USB(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	@ 0x30
 800112c:	af02      	add	r7, sp, #8
    uint16_t raw_temp = Read_Thermocouple_Temperature();
 800112e:	f7ff ff77 	bl	8001020 <Read_Thermocouple_Temperature>
 8001132:	4603      	mov	r3, r0
 8001134:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if(raw_temp == 0xFFFF) {
 8001136:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001138:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800113c:	4293      	cmp	r3, r2
 800113e:	d104      	bne.n	800114a <Send_Temperature_To_USB+0x22>
        CDC_Transmit_FS((uint8_t*)"Error: Thermocouple open circuit!\r\n", 34);
 8001140:	2122      	movs	r1, #34	@ 0x22
 8001142:	4814      	ldr	r0, [pc, #80]	@ (8001194 <Send_Temperature_To_USB+0x6c>)
 8001144:	f008 fc20 	bl	8009988 <CDC_Transmit_FS>
 8001148:	e021      	b.n	800118e <Send_Temperature_To_USB+0x66>
        return;
    }

    // Конверсия в градусы (каждый LSB = 0.25°C)
    float temperature = (float)raw_temp * 0.25f;
 800114a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001154:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115c:	edc7 7a08 	vstr	s15, [r7, #32]

    char temp_msg[32];
    snprintf(temp_msg, sizeof(temp_msg), "Temperature: %.2f C\r\n", temperature);
 8001160:	6a38      	ldr	r0, [r7, #32]
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4638      	mov	r0, r7
 800116c:	e9cd 2300 	strd	r2, r3, [sp]
 8001170:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <Send_Temperature_To_USB+0x70>)
 8001172:	2120      	movs	r1, #32
 8001174:	f009 ff8a 	bl	800b08c <sniprintf>
    CDC_Transmit_FS((uint8_t*)temp_msg, strlen(temp_msg));
 8001178:	463b      	mov	r3, r7
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f878 	bl	8000270 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	463b      	mov	r3, r7
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f008 fbfd 	bl	8009988 <CDC_Transmit_FS>
}
 800118e:	3728      	adds	r7, #40	@ 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0800e9b8 	.word	0x0800e9b8
 8001198:	0800e9dc 	.word	0x0800e9dc

0800119c <ReadFPGAData>:
/**
  * @brief Чтение данных из ПЛИС через FSMC интерфейс
  * @note Читает 10000 значений по 12 бит из ПЛИС (каждое значение в младших 12 битах 16-битного слова)
  * @note ПЛИС автоматически переключает индекс данных при каждом чтении
  */
void ReadFPGAData(void) {
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
    fpga_data.data_count = 0;
 80011a2:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <ReadFPGAData+0x98>)
 80011a4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2e21 	strb.w	r2, [r3, #3617]	@ 0xe21
    fpga_data.data_ready = false;
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <ReadFPGAData+0x98>)
 80011b0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2e20 	strb.w	r2, [r3, #3616]	@ 0xe20
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ba:	b672      	cpsid	i
}
 80011bc:	bf00      	nop

    __disable_irq(); // Отключаем прерывания для атомарного чтения

    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e023      	b.n	800120c <ReadFPGAData+0x70>
        // Читаем значение - ПЛИС автоматически переключает индекс при каждом чтении
        uint16_t value = fpga_reg[0];
 80011c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <ReadFPGAData+0x9c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	817b      	strh	r3, [r7, #10]
        fpga_data.data[i] = value & 0x0FFF; // Извлекаем 12-битное значение
 80011cc:	897b      	ldrh	r3, [r7, #10]
 80011ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d2:	b299      	uxth	r1, r3
 80011d4:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <ReadFPGAData+0x98>)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        fpga_data.data_count++;
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <ReadFPGAData+0x98>)
 80011de:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80011e2:	f893 3e21 	ldrb.w	r3, [r3, #3617]	@ 0xe21
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <ReadFPGAData+0x98>)
 80011ec:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80011f0:	f883 2e21 	strb.w	r2, [r3, #3617]	@ 0xe21

        // Небольшая задержка между чтениями для стабильности
        for(volatile int j = 0; j < 10; j++);
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	e002      	b.n	8001200 <ReadFPGAData+0x64>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3301      	adds	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b09      	cmp	r3, #9
 8001204:	ddf9      	ble.n	80011fa <ReadFPGAData+0x5e>
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001212:	4293      	cmp	r3, r2
 8001214:	ddd6      	ble.n	80011c4 <ReadFPGAData+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 8001216:	b662      	cpsie	i
}
 8001218:	bf00      	nop
    }

    __enable_irq(); // Включаем прерывания обратно
    fpga_data.data_ready = true;
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <ReadFPGAData+0x98>)
 800121c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2e20 	strb.w	r2, [r3, #3616]	@ 0xe20
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200003d4 	.word	0x200003d4
 8001238:	20005278 	.word	0x20005278

0800123c <PrintDataToUSB>:

/**
  * @brief Вывод данных через USB CDC
  * @note Форматирует данные в виде таблицы 10x10 значений
  */
void PrintDataToUSB(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	@ 0x50
 8001240:	af00      	add	r7, sp, #0
    if (!fpga_data.data_ready) return;
 8001242:	4b3f      	ldr	r3, [pc, #252]	@ (8001340 <PrintDataToUSB+0x104>)
 8001244:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001248:	f893 3e20 	ldrb.w	r3, [r3, #3616]	@ 0xe20
 800124c:	f083 0301 	eor.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d170      	bne.n	8001338 <PrintDataToUSB+0xfc>

    // Формируем заголовок
    snprintf(usb_msg, sizeof(usb_msg), "FPGA Data [0-%d]:\r\n", DATA_VALUES_COUNT-1);
 8001256:	f242 730f 	movw	r3, #9999	@ 0x270f
 800125a:	4a3a      	ldr	r2, [pc, #232]	@ (8001344 <PrintDataToUSB+0x108>)
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	483a      	ldr	r0, [pc, #232]	@ (8001348 <PrintDataToUSB+0x10c>)
 8001260:	f009 ff14 	bl	800b08c <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001264:	4838      	ldr	r0, [pc, #224]	@ (8001348 <PrintDataToUSB+0x10c>)
 8001266:	f7ff f803 	bl	8000270 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	b29b      	uxth	r3, r3
 800126e:	4619      	mov	r1, r3
 8001270:	4835      	ldr	r0, [pc, #212]	@ (8001348 <PrintDataToUSB+0x10c>)
 8001272:	f008 fb89 	bl	8009988 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001276:	200a      	movs	r0, #10
 8001278:	f000 ffbc 	bl	80021f4 <HAL_Delay>

    // Формируем строки с данными
    char data_line[64] = "";
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2240      	movs	r2, #64	@ 0x40
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f009 ff9c 	bl	800b1c2 <memset>
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 800128a:	2300      	movs	r3, #0
 800128c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800128e:	e04d      	b.n	800132c <PrintDataToUSB+0xf0>
        char val_str[8];
        snprintf(val_str, sizeof(val_str), "%4d ", fpga_data.data[i]);
 8001290:	4a2b      	ldr	r2, [pc, #172]	@ (8001340 <PrintDataToUSB+0x104>)
 8001292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001298:	1d38      	adds	r0, r7, #4
 800129a:	4a2c      	ldr	r2, [pc, #176]	@ (800134c <PrintDataToUSB+0x110>)
 800129c:	2108      	movs	r1, #8
 800129e:	f009 fef5 	bl	800b08c <sniprintf>
        strncat(data_line, val_str, sizeof(data_line) - strlen(data_line) - 1);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7fe ffe2 	bl	8000270 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
 80012b2:	1d39      	adds	r1, r7, #4
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4618      	mov	r0, r3
 80012ba:	f009 ff8a 	bl	800b1d2 <strncat>

        // Если строка заполнена или это последнее значение
        if ((i+1) % VALUES_PER_LINE == 0 || i == DATA_VALUES_COUNT-1) {
 80012be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012c0:	1c59      	adds	r1, r3, #1
 80012c2:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <PrintDataToUSB+0x114>)
 80012c4:	fb83 2301 	smull	r2, r3, r3, r1
 80012c8:	109a      	asrs	r2, r3, #2
 80012ca:	17cb      	asrs	r3, r1, #31
 80012cc:	1ad2      	subs	r2, r2, r3
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	1aca      	subs	r2, r1, r3
 80012d8:	2a00      	cmp	r2, #0
 80012da:	d004      	beq.n	80012e6 <PrintDataToUSB+0xaa>
 80012dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d11f      	bne.n	8001326 <PrintDataToUSB+0xea>
            strncat(data_line, "\r\n", sizeof(data_line) - strlen(data_line) - 1);
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ffc0 	bl	8000270 <strlen>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4916      	ldr	r1, [pc, #88]	@ (8001354 <PrintDataToUSB+0x118>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f009 ff68 	bl	800b1d2 <strncat>
            CDC_Transmit_FS((uint8_t*)data_line, strlen(data_line));
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ffb2 	bl	8000270 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f008 fb36 	bl	8009988 <CDC_Transmit_FS>
            HAL_Delay(10);
 800131c:	200a      	movs	r0, #10
 800131e:	f000 ff69 	bl	80021f4 <HAL_Delay>
            data_line[0] = '\0'; // Очищаем строку
 8001322:	2300      	movs	r3, #0
 8001324:	733b      	strb	r3, [r7, #12]
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001328:	3301      	adds	r3, #1
 800132a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800132c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800132e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001332:	4293      	cmp	r3, r2
 8001334:	ddac      	ble.n	8001290 <PrintDataToUSB+0x54>
 8001336:	e000      	b.n	800133a <PrintDataToUSB+0xfe>
    if (!fpga_data.data_ready) return;
 8001338:	bf00      	nop
        }
    }
}
 800133a:	3750      	adds	r7, #80	@ 0x50
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200003d4 	.word	0x200003d4
 8001344:	0800e9f4 	.word	0x0800e9f4
 8001348:	200051f8 	.word	0x200051f8
 800134c:	0800ea08 	.word	0x0800ea08
 8001350:	66666667 	.word	0x66666667
 8001354:	0800ea10 	.word	0x0800ea10

08001358 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af02      	add	r7, sp, #8
 800135e:	6078      	str	r0, [r7, #4]
    snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 8001360:	f000 ff3c 	bl	80021dc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	4613      	mov	r3, r2
 800136c:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <SendUSBDebugMessage+0x40>)
 800136e:	2180      	movs	r1, #128	@ 0x80
 8001370:	480a      	ldr	r0, [pc, #40]	@ (800139c <SendUSBDebugMessage+0x44>)
 8001372:	f009 fe8b 	bl	800b08c <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001376:	4809      	ldr	r0, [pc, #36]	@ (800139c <SendUSBDebugMessage+0x44>)
 8001378:	f7fe ff7a 	bl	8000270 <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	b29b      	uxth	r3, r3
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	@ (800139c <SendUSBDebugMessage+0x44>)
 8001384:	f008 fb00 	bl	8009988 <CDC_Transmit_FS>
    HAL_Delay(10); // Задержка для стабильной работы USB
 8001388:	200a      	movs	r0, #10
 800138a:	f000 ff33 	bl	80021f4 <HAL_Delay>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	0800ea14 	.word	0x0800ea14
 800139c:	200051f8 	.word	0x200051f8

080013a0 <GenerateStartPulse>:

/**
  * @brief Генерация стартового импульса для ПЛИС
  * @note Импульс длительностью 200 нс на пине PD6
  */
void GenerateStartPulse(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
    // Устанавливаем высокий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2140      	movs	r1, #64	@ 0x40
 80013aa:	480c      	ldr	r0, [pc, #48]	@ (80013dc <GenerateStartPulse+0x3c>)
 80013ac:	f001 fb9a 	bl	8002ae4 <HAL_GPIO_WritePin>

    // Задержка для формирования импульса 200 нс
    // При тактовой частоте 168 МГц (5.95 нс на цикл) нужно ~34 цикла
    for(volatile int i = 0; i < 34; i++);
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	e002      	b.n	80013bc <GenerateStartPulse+0x1c>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3301      	adds	r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b21      	cmp	r3, #33	@ 0x21
 80013c0:	ddf9      	ble.n	80013b6 <GenerateStartPulse+0x16>

    // Устанавливаем низкий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2140      	movs	r1, #64	@ 0x40
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <GenerateStartPulse+0x3c>)
 80013c8:	f001 fb8c 	bl	8002ae4 <HAL_GPIO_WritePin>

    SendUSBDebugMessage("Start pulse generated");
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <GenerateStartPulse+0x40>)
 80013ce:	f7ff ffc3 	bl	8001358 <SendUSBDebugMessage>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	0800ea20 	.word	0x0800ea20

080013e4 <ProcessUSBCommand>:

/**
  * @brief Обработка команд от USB
  * @param cmd Полученная команда
  */
void ProcessUSBCommand(uint8_t cmd) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b31      	cmp	r3, #49	@ 0x31
 80013f2:	d002      	beq.n	80013fa <ProcessUSBCommand+0x16>
 80013f4:	2b54      	cmp	r3, #84	@ 0x54
 80013f6:	d017      	beq.n	8001428 <ProcessUSBCommand+0x44>
 80013f8:	e019      	b.n	800142e <ProcessUSBCommand+0x4a>
        case '1': // Стартовая команда
            GenerateStartPulse();
 80013fa:	f7ff ffd1 	bl	80013a0 <GenerateStartPulse>
            ReadFPGAData();
 80013fe:	f7ff fecd 	bl	800119c <ReadFPGAData>

            if (fpga_data.data_ready) {
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <ProcessUSBCommand+0x5c>)
 8001404:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001408:	f893 3e20 	ldrb.w	r3, [r3, #3616]	@ 0xe20
 800140c:	2b00      	cmp	r3, #0
 800140e:	d012      	beq.n	8001436 <ProcessUSBCommand+0x52>
                SendUSBDebugMessage("Data received from FPGA:");
 8001410:	480c      	ldr	r0, [pc, #48]	@ (8001444 <ProcessUSBCommand+0x60>)
 8001412:	f7ff ffa1 	bl	8001358 <SendUSBDebugMessage>
                PrintDataToUSB();
 8001416:	f7ff ff11 	bl	800123c <PrintDataToUSB>
                fpga_data.data_ready = false;
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <ProcessUSBCommand+0x5c>)
 800141c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2e20 	strb.w	r2, [r3, #3616]	@ 0xe20
            }
            break;
 8001426:	e006      	b.n	8001436 <ProcessUSBCommand+0x52>

        case 'T': // Команда для чтения температуры
            Send_Temperature_To_USB();
 8001428:	f7ff fe7e 	bl	8001128 <Send_Temperature_To_USB>
            break;
 800142c:	e004      	b.n	8001438 <ProcessUSBCommand+0x54>

        default:
            // Неизвестная команда
            SendUSBDebugMessage("Unknown command received");
 800142e:	4806      	ldr	r0, [pc, #24]	@ (8001448 <ProcessUSBCommand+0x64>)
 8001430:	f7ff ff92 	bl	8001358 <SendUSBDebugMessage>
            break;
 8001434:	e000      	b.n	8001438 <ProcessUSBCommand+0x54>
            break;
 8001436:	bf00      	nop
    }
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200003d4 	.word	0x200003d4
 8001444:	0800ea38 	.word	0x0800ea38
 8001448:	0800ea54 	.word	0x0800ea54

0800144c <FPGA_SendConfig>:
/**
  * @brief Отправка конфигурации в ПЛИС
  * @param config_data Указатель на данные конфигурации
  * @param size Размер данных конфигурации
  */
void FPGA_SendConfig(uint8_t *config_data, uint32_t size) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	@ 0x30
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

    // 1. Настройка пинов для конфигурации
    // PC11 - DATA (выход)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001466:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800146a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001474:	2302      	movs	r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	484d      	ldr	r0, [pc, #308]	@ (80015b4 <FPGA_SendConfig+0x168>)
 8001480:	f001 f97c 	bl	800277c <HAL_GPIO_Init>

    // 2. Последовательность сброса ПЛИС
    // PC8 - термопара CS (активный низкий), устанавливаем в 1
    // PB8 - CSO (активный низкий), устанавливаем в 1
    // PA15 - nCONFIG (активный низкий), устанавливаем в 0 для сброса
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   // TH_CS = 1
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800148a:	484a      	ldr	r0, [pc, #296]	@ (80015b4 <FPGA_SendConfig+0x168>)
 800148c:	f001 fb2a 	bl	8002ae4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);   // CSO = 1
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001496:	4848      	ldr	r0, [pc, #288]	@ (80015b8 <FPGA_SendConfig+0x16c>)
 8001498:	f001 fb24 	bl	8002ae4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // nCONFIG = 0
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014a2:	4846      	ldr	r0, [pc, #280]	@ (80015bc <FPGA_SendConfig+0x170>)
 80014a4:	f001 fb1e 	bl	8002ae4 <HAL_GPIO_WritePin>
    HAL_Delay(100); // Длительный сброс (100 мс)
 80014a8:	2064      	movs	r0, #100	@ 0x64
 80014aa:	f000 fea3 	bl	80021f4 <HAL_Delay>

    // 3. Запуск конфигурации
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);  // CE = 0
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014b4:	483f      	ldr	r0, [pc, #252]	@ (80015b4 <FPGA_SendConfig+0x168>)
 80014b6:	f001 fb15 	bl	8002ae4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);   // nCONFIG = 1
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014c0:	483e      	ldr	r0, [pc, #248]	@ (80015bc <FPGA_SendConfig+0x170>)
 80014c2:	f001 fb0f 	bl	8002ae4 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Ожидание готовности ПЛИС
 80014c6:	200a      	movs	r0, #10
 80014c8:	f000 fe94 	bl	80021f4 <HAL_Delay>

    // 4. Отправка данных конфигурации
    for (uint32_t i = 0; i < size; i++) {
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d0:	e033      	b.n	800153a <FPGA_SendConfig+0xee>
        uint8_t byte = config_data[i];
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        for (int bit = 0; bit < 8; bit++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e2:	e024      	b.n	800152e <FPGA_SendConfig+0xe2>
            // Установка бита данных (LSB first) на PC11
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, (byte & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014f4:	482f      	ldr	r0, [pc, #188]	@ (80015b4 <FPGA_SendConfig+0x168>)
 80014f6:	f001 faf5 	bl	8002ae4 <HAL_GPIO_WritePin>
            byte >>= 1;
 80014fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80014fe:	085b      	lsrs	r3, r3, #1
 8001500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            // Тактовый импульс на PC10 (минимум 50 нс)
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800150a:	482a      	ldr	r0, [pc, #168]	@ (80015b4 <FPGA_SendConfig+0x168>)
 800150c:	f001 faea 	bl	8002ae4 <HAL_GPIO_WritePin>
            __NOP(); __NOP(); __NOP(); __NOP(); // Короткая задержка (~20 нс при 168 MHz)
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	bf00      	nop
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800151e:	4825      	ldr	r0, [pc, #148]	@ (80015b4 <FPGA_SendConfig+0x168>)
 8001520:	f001 fae0 	bl	8002ae4 <HAL_GPIO_WritePin>
            __NOP(); __NOP(); // Пауза между битами
 8001524:	bf00      	nop
 8001526:	bf00      	nop
        for (int bit = 0; bit < 8; bit++) {
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	3301      	adds	r3, #1
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	2b07      	cmp	r3, #7
 8001532:	ddd7      	ble.n	80014e4 <FPGA_SendConfig+0x98>
    for (uint32_t i = 0; i < size; i++) {
 8001534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001536:	3301      	adds	r3, #1
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800153a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d3c7      	bcc.n	80014d2 <FPGA_SendConfig+0x86>
        }
    }

    // 5. Завершение конфигурации
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);    // CE = 1
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001548:	481a      	ldr	r0, [pc, #104]	@ (80015b4 <FPGA_SendConfig+0x168>)
 800154a:	f001 facb 	bl	8002ae4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f000 fe50 	bl	80021f4 <HAL_Delay>

    // 6. Дополнительные тактовые импульсы
    for (int i = 0; i < 8; i++) {
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
 8001558:	e012      	b.n	8001580 <FPGA_SendConfig+0x134>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001560:	4814      	ldr	r0, [pc, #80]	@ (80015b4 <FPGA_SendConfig+0x168>)
 8001562:	f001 fabf 	bl	8002ae4 <HAL_GPIO_WritePin>
        __NOP(); __NOP();
 8001566:	bf00      	nop
 8001568:	bf00      	nop
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001570:	4810      	ldr	r0, [pc, #64]	@ (80015b4 <FPGA_SendConfig+0x168>)
 8001572:	f001 fab7 	bl	8002ae4 <HAL_GPIO_WritePin>
        __NOP(); __NOP();
 8001576:	bf00      	nop
 8001578:	bf00      	nop
    for (int i = 0; i < 8; i++) {
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	3301      	adds	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	2b07      	cmp	r3, #7
 8001584:	dde9      	ble.n	800155a <FPGA_SendConfig+0x10e>
    }

    // 7. Возврат в исходное состояние
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);  // TH_CS = 0
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158c:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <FPGA_SendConfig+0x168>)
 800158e:	f001 faa9 	bl	8002ae4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // CSO = 0
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001598:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <FPGA_SendConfig+0x16c>)
 800159a:	f001 faa3 	bl	8002ae4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); // DATA = 0
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015a4:	4803      	ldr	r0, [pc, #12]	@ (80015b4 <FPGA_SendConfig+0x168>)
 80015a6:	f001 fa9d 	bl	8002ae4 <HAL_GPIO_WritePin>
}
 80015aa:	bf00      	nop
 80015ac:	3730      	adds	r7, #48	@ 0x30
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40020800 	.word	0x40020800
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020000 	.word	0x40020000

080015c0 <Set_DAC_Voltage>:

/**
  * @brief Установка напряжения на DAC
  * @param voltage Напряжение от 0.0 до 1.0 В
  */
void Set_DAC_Voltage(float voltage) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	@ 0x38
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage < 0) voltage = 0;
 80015ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d6:	d502      	bpl.n	80015de <Set_DAC_Voltage+0x1e>
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
    if (voltage > 1) voltage = 1;
 80015de:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ee:	dd02      	ble.n	80015f6 <Set_DAC_Voltage+0x36>
 80015f0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80015f4:	607b      	str	r3, [r7, #4]

    uint32_t dac_value = (voltage / 3.3f) * 4095;
 80015f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015fa:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001670 <Set_DAC_Voltage+0xb0>
 80015fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001602:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001674 <Set_DAC_Voltage+0xb4>
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160e:	ee17 3a90 	vmov	r3, s15
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8001614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	4817      	ldr	r0, [pc, #92]	@ (8001678 <Set_DAC_Voltage+0xb8>)
 800161c:	f000 ff98 	bl	8002550 <HAL_DAC_SetValue>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001620:	2100      	movs	r1, #0
 8001622:	4815      	ldr	r0, [pc, #84]	@ (8001678 <Set_DAC_Voltage+0xb8>)
 8001624:	f000 ff3d 	bl	80024a2 <HAL_DAC_Start>
    dac_voltage = voltage;
 8001628:	4a14      	ldr	r2, [pc, #80]	@ (800167c <Set_DAC_Voltage+0xbc>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]

    // Отправляем текущее напряжение по USB
    char voltage_msg[32];
    snprintf(voltage_msg, sizeof(voltage_msg), "DAC Voltage: %.3f V\r\n", dac_voltage);
 800162e:	4b13      	ldr	r3, [pc, #76]	@ (800167c <Set_DAC_Voltage+0xbc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff88 	bl	8000548 <__aeabi_f2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	f107 000c 	add.w	r0, r7, #12
 8001640:	e9cd 2300 	strd	r2, r3, [sp]
 8001644:	4a0e      	ldr	r2, [pc, #56]	@ (8001680 <Set_DAC_Voltage+0xc0>)
 8001646:	2120      	movs	r1, #32
 8001648:	f009 fd20 	bl	800b08c <sniprintf>
    CDC_Transmit_FS((uint8_t*)voltage_msg, strlen(voltage_msg));
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fe0d 	bl	8000270 <strlen>
 8001656:	4603      	mov	r3, r0
 8001658:	b29a      	uxth	r2, r3
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f008 f991 	bl	8009988 <CDC_Transmit_FS>
}
 8001666:	bf00      	nop
 8001668:	3730      	adds	r7, #48	@ 0x30
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40533333 	.word	0x40533333
 8001674:	457ff000 	.word	0x457ff000
 8001678:	200002e0 	.word	0x200002e0
 800167c:	2000527c 	.word	0x2000527c
 8001680:	0800ea70 	.word	0x0800ea70

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168a:	f000 fd41 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168e:	f000 f887 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001692:	f000 f991 	bl	80019b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001696:	f000 f965 	bl	8001964 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800169a:	f008 f8b7 	bl	800980c <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 800169e:	f000 f8e9 	bl	8001874 <MX_DAC_Init>
  MX_TIM3_Init();
 80016a2:	f000 f911 	bl	80018c8 <MX_TIM3_Init>
  MX_FSMC_Init();
 80016a6:	f000 fa47 	bl	8001b38 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */

    // Получаем данные конфигурации из pin_69.h
    uint8_t *config_data = fpga_config; // Используем массив из pin_69.h
 80016aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001768 <main+0xe4>)
 80016ac:	607b      	str	r3, [r7, #4]
    uint32_t config_size = sizeof(fpga_config); // Размер автоматически вычисляется
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <main+0xe8>)
 80016b0:	603b      	str	r3, [r7, #0]

    // Вызов функции загрузки конфигурации
    FPGA_SendConfig(config_data, config_size);
 80016b2:	6839      	ldr	r1, [r7, #0]
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fec9 	bl	800144c <FPGA_SendConfig>

    // Инициализация указателя на регистр ПЛИС
    fpga_reg = (volatile uint16_t *)FPGA_BASE_ADDRESS;
 80016ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <main+0xec>)
 80016bc:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80016c0:	601a      	str	r2, [r3, #0]

    // Отправка приветственного сообщения
    SendUSBDebugMessage("System initialized");
 80016c2:	482c      	ldr	r0, [pc, #176]	@ (8001774 <main+0xf0>)
 80016c4:	f7ff fe48 	bl	8001358 <SendUSBDebugMessage>
    SendUSBDebugMessage("Send '1' to read FPGA data");
 80016c8:	482b      	ldr	r0, [pc, #172]	@ (8001778 <main+0xf4>)
 80016ca:	f7ff fe45 	bl	8001358 <SendUSBDebugMessage>
    SendUSBDebugMessage("Send 'T' to read temperature");
 80016ce:	482b      	ldr	r0, [pc, #172]	@ (800177c <main+0xf8>)
 80016d0:	f7ff fe42 	bl	8001358 <SendUSBDebugMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
        // Точное циклическое изменение напряжения каждые 3 секунды
        if (HAL_GetTick() - dac_last_update > 3000) {
 80016d4:	f000 fd82 	bl	80021dc <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <main+0xfc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d928      	bls.n	800173a <main+0xb6>
            dac_last_update = HAL_GetTick();
 80016e8:	f000 fd78 	bl	80021dc <HAL_GetTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a24      	ldr	r2, [pc, #144]	@ (8001780 <main+0xfc>)
 80016f0:	6013      	str	r3, [r2, #0]

            if (dac_voltage < 0.1f) {          // Если ~0V
 80016f2:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <main+0x100>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001788 <main+0x104>
 80016fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001704:	d504      	bpl.n	8001710 <main+0x8c>
                Set_DAC_Voltage(0.300f);       // Устанавливаем точно 0.3V
 8001706:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800178c <main+0x108>
 800170a:	f7ff ff59 	bl	80015c0 <Set_DAC_Voltage>
 800170e:	e012      	b.n	8001736 <main+0xb2>
            }
            else if (dac_voltage < 0.6f) {     // Если ~0.3V
 8001710:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <main+0x100>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001790 <main+0x10c>
 800171a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	d504      	bpl.n	800172e <main+0xaa>
                Set_DAC_Voltage(1.000f);       // Устанавливаем точно 1.0V
 8001724:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001728:	f7ff ff4a 	bl	80015c0 <Set_DAC_Voltage>
 800172c:	e003      	b.n	8001736 <main+0xb2>
            }
            else {                             // Если ~1.0V
                Set_DAC_Voltage(0.000f);       // Сбрасываем в 0V
 800172e:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001794 <main+0x110>
 8001732:	f7ff ff45 	bl	80015c0 <Set_DAC_Voltage>
            }

            // Также отправляем температуру каждые 3 секунды
            Send_Temperature_To_USB();
 8001736:	f7ff fcf7 	bl	8001128 <Send_Temperature_To_USB>
        }

        // Обработка команд USB
        if(new_data_received) {
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <main+0x114>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <main+0xdc>
            new_data_received = 0;
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <main+0x114>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
            ProcessUSBCommand(usb_rx_buffer[0]); // Обрабатываем первую байту команды
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <main+0x118>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fe47 	bl	80013e4 <ProcessUSBCommand>
            memset((void*)usb_rx_buffer, 0, sizeof(usb_rx_buffer));
 8001756:	2240      	movs	r2, #64	@ 0x40
 8001758:	2100      	movs	r1, #0
 800175a:	4810      	ldr	r0, [pc, #64]	@ (800179c <main+0x118>)
 800175c:	f009 fd31 	bl	800b1c2 <memset>
        }

        HAL_Delay(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f000 fd47 	bl	80021f4 <HAL_Delay>
        if (HAL_GetTick() - dac_last_update > 3000) {
 8001766:	e7b5      	b.n	80016d4 <main+0x50>
 8001768:	0800eb20 	.word	0x0800eb20
 800176c:	0001a2a1 	.word	0x0001a2a1
 8001770:	20005278 	.word	0x20005278
 8001774:	0800ea88 	.word	0x0800ea88
 8001778:	0800ea9c 	.word	0x0800ea9c
 800177c:	0800eab8 	.word	0x0800eab8
 8001780:	20005280 	.word	0x20005280
 8001784:	2000527c 	.word	0x2000527c
 8001788:	3dcccccd 	.word	0x3dcccccd
 800178c:	3e99999a 	.word	0x3e99999a
 8001790:	3f19999a 	.word	0x3f19999a
 8001794:	00000000 	.word	0x00000000
 8001798:	200055b0 	.word	0x200055b0
 800179c:	20005570 	.word	0x20005570

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b094      	sub	sp, #80	@ 0x50
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	2230      	movs	r2, #48	@ 0x30
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f009 fd07 	bl	800b1c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	4b28      	ldr	r3, [pc, #160]	@ (800186c <SystemClock_Config+0xcc>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	4a27      	ldr	r2, [pc, #156]	@ (800186c <SystemClock_Config+0xcc>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d4:	4b25      	ldr	r3, [pc, #148]	@ (800186c <SystemClock_Config+0xcc>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <SystemClock_Config+0xd0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <SystemClock_Config+0xd0>)
 80017ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <SystemClock_Config+0xd0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017fc:	2301      	movs	r3, #1
 80017fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001800:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001806:	2302      	movs	r3, #2
 8001808:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800180a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001810:	2308      	movs	r3, #8
 8001812:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001814:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001818:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181a:	2302      	movs	r3, #2
 800181c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800181e:	2307      	movs	r3, #7
 8001820:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4618      	mov	r0, r3
 8001828:	f002 fbc8 	bl	8003fbc <HAL_RCC_OscConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001832:	f000 f9df 	bl	8001bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001836:	230f      	movs	r3, #15
 8001838:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183a:	2302      	movs	r3, #2
 800183c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001842:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2105      	movs	r1, #5
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fe29 	bl	80044ac <HAL_RCC_ClockConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001860:	f000 f9c8 	bl	8001bf4 <Error_Handler>
  }
}
 8001864:	bf00      	nop
 8001866:	3750      	adds	r7, #80	@ 0x50
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800187a:	463b      	mov	r3, r7
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001882:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <MX_DAC_Init+0x4c>)
 8001884:	4a0f      	ldr	r2, [pc, #60]	@ (80018c4 <MX_DAC_Init+0x50>)
 8001886:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001888:	480d      	ldr	r0, [pc, #52]	@ (80018c0 <MX_DAC_Init+0x4c>)
 800188a:	f000 fde8 	bl	800245e <HAL_DAC_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001894:	f000 f9ae 	bl	8001bf4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001898:	2300      	movs	r3, #0
 800189a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	@ (80018c0 <MX_DAC_Init+0x4c>)
 80018a8:	f000 fe7c 	bl	80025a4 <HAL_DAC_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80018b2:	f000 f99f 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200002e0 	.word	0x200002e0
 80018c4:	40007400 	.word	0x40007400

080018c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <MX_TIM3_Init+0x94>)
 80018e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001960 <MX_TIM3_Init+0x98>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <MX_TIM3_Init+0x94>)
 80018ec:	22a7      	movs	r2, #167	@ 0xa7
 80018ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_TIM3_Init+0x94>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <MX_TIM3_Init+0x94>)
 80018f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fe:	4b17      	ldr	r3, [pc, #92]	@ (800195c <MX_TIM3_Init+0x94>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001904:	4b15      	ldr	r3, [pc, #84]	@ (800195c <MX_TIM3_Init+0x94>)
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800190a:	4814      	ldr	r0, [pc, #80]	@ (800195c <MX_TIM3_Init+0x94>)
 800190c:	f003 f836 	bl	800497c <HAL_TIM_Base_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001916:	f000 f96d 	bl	8001bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800191e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	4619      	mov	r1, r3
 8001926:	480d      	ldr	r0, [pc, #52]	@ (800195c <MX_TIM3_Init+0x94>)
 8001928:	f003 f967 	bl	8004bfa <HAL_TIM_ConfigClockSource>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001932:	f000 f95f 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	@ (800195c <MX_TIM3_Init+0x94>)
 8001944:	f003 fb92 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800194e:	f000 f951 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200002f4 	.word	0x200002f4
 8001960:	40000400 	.word	0x40000400

08001964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <MX_USART1_UART_Init+0x50>)
 800196c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001970:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800199c:	f003 fbf6 	bl	800518c <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019a6:	f000 f925 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000033c 	.word	0x2000033c
 80019b4:	40011000 	.word	0x40011000

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	@ 0x30
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	4b54      	ldr	r3, [pc, #336]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a53      	ldr	r2, [pc, #332]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 80019d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b51      	ldr	r3, [pc, #324]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b46      	ldr	r3, [pc, #280]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a45      	ldr	r2, [pc, #276]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b43      	ldr	r3, [pc, #268]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b3f      	ldr	r3, [pc, #252]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b3c      	ldr	r3, [pc, #240]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b38      	ldr	r3, [pc, #224]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a37      	ldr	r2, [pc, #220]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b35      	ldr	r3, [pc, #212]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b31      	ldr	r3, [pc, #196]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a30      	ldr	r2, [pc, #192]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001a7c:	482a      	ldr	r0, [pc, #168]	@ (8001b28 <MX_GPIO_Init+0x170>)
 8001a7e:	f001 f831 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8001a88:	4828      	ldr	r0, [pc, #160]	@ (8001b2c <MX_GPIO_Init+0x174>)
 8001a8a:	f001 f82b 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2140      	movs	r1, #64	@ 0x40
 8001a92:	4827      	ldr	r0, [pc, #156]	@ (8001b30 <MX_GPIO_Init+0x178>)
 8001a94:	f001 f826 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001a9e:	4825      	ldr	r0, [pc, #148]	@ (8001b34 <MX_GPIO_Init+0x17c>)
 8001aa0:	f001 f820 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8001aa4:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	481a      	ldr	r0, [pc, #104]	@ (8001b28 <MX_GPIO_Init+0x170>)
 8001abe:	f000 fe5d 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001ac2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <MX_GPIO_Init+0x174>)
 8001adc:	f000 fe4e 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ae0:	2340      	movs	r3, #64	@ 0x40
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	480e      	ldr	r0, [pc, #56]	@ (8001b30 <MX_GPIO_Init+0x178>)
 8001af8:	f000 fe40 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001afc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4807      	ldr	r0, [pc, #28]	@ (8001b34 <MX_GPIO_Init+0x17c>)
 8001b16:	f000 fe31 	bl	800277c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	@ 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40020400 	.word	0x40020400

08001b38 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
 8001b4c:	615a      	str	r2, [r3, #20]
 8001b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001b50:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b52:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001b56:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001b58:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b5a:	4a25      	ldr	r2, [pc, #148]	@ (8001bf0 <MX_FSMC_Init+0xb8>)
 8001b5c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001b5e:	4b23      	ldr	r3, [pc, #140]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8001b64:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b72:	2210      	movs	r2, #16
 8001b74:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001b88:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001bb2:	230f      	movs	r3, #15
 8001bb4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001bb6:	230f      	movs	r3, #15
 8001bb8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001bba:	23ff      	movs	r3, #255	@ 0xff
 8001bbc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001bc6:	2311      	movs	r3, #17
 8001bc8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_FSMC_Init+0xb4>)
 8001bd6:	f002 fe89 	bl	80048ec <HAL_SRAM_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8001be0:	f000 f808 	bl	8001bf4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001be4:	bf00      	nop
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000384 	.word	0x20000384
 8001bf0:	a0000104 	.word	0xa0000104

08001bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <Error_Handler+0x4>

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c48 <HAL_MspInit+0x4c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c12:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <HAL_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	@ (8001c48 <HAL_MspInit+0x4c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a17      	ldr	r2, [pc, #92]	@ (8001cc8 <HAL_DAC_MspInit+0x7c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d127      	bne.n	8001cbe <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <HAL_DAC_MspInit+0x80>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	4a15      	ldr	r2, [pc, #84]	@ (8001ccc <HAL_DAC_MspInit+0x80>)
 8001c78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <HAL_DAC_MspInit+0x80>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <HAL_DAC_MspInit+0x80>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a0e      	ldr	r2, [pc, #56]	@ (8001ccc <HAL_DAC_MspInit+0x80>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <HAL_DAC_MspInit+0x80>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001caa:	2303      	movs	r3, #3
 8001cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <HAL_DAC_MspInit+0x84>)
 8001cba:	f000 fd5f 	bl	800277c <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	@ 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40007400 	.word	0x40007400
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8001d1c <HAL_TIM_Base_MspInit+0x48>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d115      	bne.n	8001d12 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <HAL_TIM_Base_MspInit+0x4c>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	4a0c      	ldr	r2, [pc, #48]	@ (8001d20 <HAL_TIM_Base_MspInit+0x4c>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_TIM_Base_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	201d      	movs	r0, #29
 8001d08:	f000 fb73 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d0c:	201d      	movs	r0, #29
 8001d0e:	f000 fb8c 	bl	800242a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40000400 	.word	0x40000400
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	@ 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1d      	ldr	r2, [pc, #116]	@ (8001db8 <HAL_UART_MspInit+0x94>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d133      	bne.n	8001dae <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <HAL_UART_MspInit+0x98>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dbc <HAL_UART_MspInit+0x98>)
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d56:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_UART_MspInit+0x98>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_UART_MspInit+0x98>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <HAL_UART_MspInit+0x98>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_UART_MspInit+0x98>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d7e:	23c0      	movs	r3, #192	@ 0xc0
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d8e:	2307      	movs	r3, #7
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4809      	ldr	r0, [pc, #36]	@ (8001dc0 <HAL_UART_MspInit+0x9c>)
 8001d9a:	f000 fcef 	bl	800277c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	2025      	movs	r0, #37	@ 0x25
 8001da4:	f000 fb25 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001da8:	2025      	movs	r0, #37	@ 0x25
 8001daa:	f000 fb3e 	bl	800242a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	@ 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020400 	.word	0x40020400

08001dc4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_FSMC_MspInit+0x88>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d131      	bne.n	8001e44 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_FSMC_MspInit+0x88>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_FSMC_MspInit+0x8c>)
 8001dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dee:	4a18      	ldr	r2, [pc, #96]	@ (8001e50 <HAL_FSMC_MspInit+0x8c>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6393      	str	r3, [r2, #56]	@ 0x38
 8001df6:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_FSMC_MspInit+0x8c>)
 8001df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e02:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001e06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e14:	230c      	movs	r3, #12
 8001e16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480d      	ldr	r0, [pc, #52]	@ (8001e54 <HAL_FSMC_MspInit+0x90>)
 8001e1e:	f000 fcad 	bl	800277c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e22:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 8001e26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e34:	230c      	movs	r3, #12
 8001e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4806      	ldr	r0, [pc, #24]	@ (8001e58 <HAL_FSMC_MspInit+0x94>)
 8001e3e:	f000 fc9d 	bl	800277c <HAL_GPIO_Init>
 8001e42:	e000      	b.n	8001e46 <HAL_FSMC_MspInit+0x82>
    return;
 8001e44:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20005284 	.word	0x20005284
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40020c00 	.word	0x40020c00

08001e5c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001e64:	f7ff ffae 	bl	8001dc4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <NMI_Handler+0x4>

08001e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <MemManage_Handler+0x4>

08001e88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec6:	f000 f975 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ed4:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <TIM3_IRQHandler+0x10>)
 8001ed6:	f002 fda0 	bl	8004a1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200002f4 	.word	0x200002f4

08001ee4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <USART1_IRQHandler+0x10>)
 8001eea:	f003 f99f 	bl	800522c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000033c 	.word	0x2000033c

08001ef8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <OTG_FS_IRQHandler+0x10>)
 8001efe:	f000 ff4e 	bl	8002d9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200067b4 	.word	0x200067b4

08001f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return 1;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_kill>:

int _kill(int pid, int sig)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f26:	f009 f9b1 	bl	800b28c <__errno>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2216      	movs	r2, #22
 8001f2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_exit>:

void _exit (int status)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ffe7 	bl	8001f1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f4e:	bf00      	nop
 8001f50:	e7fd      	b.n	8001f4e <_exit+0x12>

08001f52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e00a      	b.n	8001f7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f64:	f3af 8000 	nop.w
 8001f68:	4601      	mov	r1, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	60ba      	str	r2, [r7, #8]
 8001f70:	b2ca      	uxtb	r2, r1
 8001f72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3301      	adds	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dbf0      	blt.n	8001f64 <_read+0x12>
  }

  return len;
 8001f82:	687b      	ldr	r3, [r7, #4]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e009      	b.n	8001fb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	60ba      	str	r2, [r7, #8]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dbf1      	blt.n	8001f9e <_write+0x12>
  }
  return len;
 8001fba:	687b      	ldr	r3, [r7, #4]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_close>:

int _close(int file)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fec:	605a      	str	r2, [r3, #4]
  return 0;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_isatty>:

int _isatty(int file)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002004:	2301      	movs	r3, #1
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	@ (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f009 f916 	bl	800b28c <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20020000 	.word	0x20020000
 800208c:	00000400 	.word	0x00000400
 8002090:	20005288 	.word	0x20005288
 8002094:	20007008 	.word	0x20007008

08002098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020c0:	f7ff ffea 	bl	8002098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c4:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c6:	490d      	ldr	r1, [pc, #52]	@ (80020fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f009 f8d5 	bl	800b298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ee:	f7ff fac9 	bl	8001684 <main>
  bx  lr    
 80020f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002100:	08029214 	.word	0x08029214
  ldr r2, =_sbss
 8002104:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8002108:	20007004 	.word	0x20007004

0800210c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC_IRQHandler>
	...

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <HAL_Init+0x40>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <HAL_Init+0x40>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <HAL_Init+0x40>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 f94f 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	200f      	movs	r0, #15
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fd5a 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f967 	bl	8002446 <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 f92f 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	@ (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000008 	.word	0x20000008
 80021b0:	20000004 	.word	0x20000004

080021b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000008 	.word	0x20000008
 80021d8:	2000528c 	.word	0x2000528c

080021dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b03      	ldr	r3, [pc, #12]	@ (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	2000528c 	.word	0x2000528c

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff ffee 	bl	80021dc <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221a:	bf00      	nop
 800221c:	f7ff ffde 	bl	80021dc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000008 	.word	0x20000008

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	@ (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	@ (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	@ (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	@ 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff29 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff3e 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff8e 	bl	8002330 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5d 	bl	80022dc <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff31 	bl	80022a0 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e014      	b.n	800249a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	791b      	ldrb	r3, [r3, #4]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d105      	bne.n	8002486 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fbe3 	bl	8001c4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e046      	b.n	8002544 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	795b      	ldrb	r3, [r3, #5]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_DAC_Start+0x20>
 80024be:	2302      	movs	r3, #2
 80024c0:	e040      	b.n	8002544 <HAL_DAC_Start+0xa2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2201      	movs	r2, #1
 80024dc:	409a      	lsls	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10f      	bne.n	800250c <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80024f6:	2b3c      	cmp	r3, #60	@ 0x3c
 80024f8:	d11d      	bne.n	8002536 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	e014      	b.n	8002536 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	213c      	movs	r1, #60	@ 0x3c
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	429a      	cmp	r2, r3
 8002524:	d107      	bne.n	8002536 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0202 	orr.w	r2, r2, #2
 8002534:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e015      	b.n	8002598 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	3308      	adds	r3, #8
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e004      	b.n	800258e <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	3314      	adds	r3, #20
 800258c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	461a      	mov	r2, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	@ 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_DAC_ConfigChannel+0x1c>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e042      	b.n	800264a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	795b      	ldrb	r3, [r3, #5]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_DAC_ConfigChannel+0x2c>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e03c      	b.n	800264a <HAL_DAC_ConfigChannel+0xa6>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2202      	movs	r2, #2
 80025da:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6819      	ldr	r1, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	22c0      	movs	r2, #192	@ 0xc0
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	400a      	ands	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002648:	7ffb      	ldrb	r3, [r7, #31]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff fdba 	bl	80021dc <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d008      	beq.n	8002688 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e052      	b.n	800272e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0216 	bic.w	r2, r2, #22
 8002696:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <HAL_DMA_Abort+0x62>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0208 	bic.w	r2, r2, #8
 80026c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d8:	e013      	b.n	8002702 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026da:	f7ff fd7f 	bl	80021dc <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d90c      	bls.n	8002702 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2203      	movs	r2, #3
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e015      	b.n	800272e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e4      	bne.n	80026da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	223f      	movs	r2, #63	@ 0x3f
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d004      	beq.n	8002754 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2280      	movs	r2, #128	@ 0x80
 800274e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e00c      	b.n	800276e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2205      	movs	r2, #5
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	@ 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e16b      	b.n	8002a70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 815a 	bne.w	8002a6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d005      	beq.n	80027ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d130      	bne.n	8002830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 0201 	and.w	r2, r3, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b03      	cmp	r3, #3
 800283a:	d017      	beq.n	800286c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d123      	bne.n	80028c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3208      	adds	r2, #8
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80b4 	beq.w	8002a6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b60      	ldr	r3, [pc, #384]	@ (8002a88 <HAL_GPIO_Init+0x30c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	4a5f      	ldr	r2, [pc, #380]	@ (8002a88 <HAL_GPIO_Init+0x30c>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002910:	6453      	str	r3, [r2, #68]	@ 0x44
 8002912:	4b5d      	ldr	r3, [pc, #372]	@ (8002a88 <HAL_GPIO_Init+0x30c>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291e:	4a5b      	ldr	r2, [pc, #364]	@ (8002a8c <HAL_GPIO_Init+0x310>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a52      	ldr	r2, [pc, #328]	@ (8002a90 <HAL_GPIO_Init+0x314>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02b      	beq.n	80029a2 <HAL_GPIO_Init+0x226>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a51      	ldr	r2, [pc, #324]	@ (8002a94 <HAL_GPIO_Init+0x318>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d025      	beq.n	800299e <HAL_GPIO_Init+0x222>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a50      	ldr	r2, [pc, #320]	@ (8002a98 <HAL_GPIO_Init+0x31c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01f      	beq.n	800299a <HAL_GPIO_Init+0x21e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4f      	ldr	r2, [pc, #316]	@ (8002a9c <HAL_GPIO_Init+0x320>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d019      	beq.n	8002996 <HAL_GPIO_Init+0x21a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4e      	ldr	r2, [pc, #312]	@ (8002aa0 <HAL_GPIO_Init+0x324>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x216>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa4 <HAL_GPIO_Init+0x328>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_GPIO_Init+0x212>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa8 <HAL_GPIO_Init+0x32c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x20e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4b      	ldr	r2, [pc, #300]	@ (8002aac <HAL_GPIO_Init+0x330>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_GPIO_Init+0x20a>
 8002982:	2307      	movs	r3, #7
 8002984:	e00e      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 8002986:	2308      	movs	r3, #8
 8002988:	e00c      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800298a:	2306      	movs	r3, #6
 800298c:	e00a      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800298e:	2305      	movs	r3, #5
 8002990:	e008      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 8002992:	2304      	movs	r3, #4
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 8002996:	2303      	movs	r3, #3
 8002998:	e004      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800299a:	2302      	movs	r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 80029a2:	2300      	movs	r3, #0
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f002 0203 	and.w	r2, r2, #3
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4093      	lsls	r3, r2
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b4:	4935      	ldr	r1, [pc, #212]	@ (8002a8c <HAL_GPIO_Init+0x310>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e6:	4a32      	ldr	r2, [pc, #200]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ec:	4b30      	ldr	r3, [pc, #192]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a10:	4a27      	ldr	r2, [pc, #156]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a16:	4b26      	ldr	r3, [pc, #152]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a64:	4a12      	ldr	r2, [pc, #72]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	f67f ae90 	bls.w	8002798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3724      	adds	r7, #36	@ 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40021400 	.word	0x40021400
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	40021c00 	.word	0x40021c00
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	887b      	ldrh	r3, [r7, #2]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	e001      	b.n	8002ad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
 8002af0:	4613      	mov	r3, r2
 8002af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af4:	787b      	ldrb	r3, [r7, #1]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b00:	e003      	b.n	8002b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	041a      	lsls	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	619a      	str	r2, [r3, #24]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af02      	add	r7, sp, #8
 8002b1c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e101      	b.n	8002d2c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f007 f868 	bl	8009c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b56:	d102      	bne.n	8002b5e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fc2b 	bl	80063be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7c1a      	ldrb	r2, [r3, #16]
 8002b70:	f88d 2000 	strb.w	r2, [sp]
 8002b74:	3304      	adds	r3, #4
 8002b76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b78:	f003 fb0a 	bl	8006190 <USB_CoreInit>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0ce      	b.n	8002d2c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 fc23 	bl	80063e0 <USB_SetCurrentMode>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0bf      	b.n	8002d2c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	e04a      	b.n	8002c48 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3315      	adds	r3, #21
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3314      	adds	r3, #20
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	b298      	uxth	r0, r3
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	332e      	adds	r3, #46	@ 0x2e
 8002bee:	4602      	mov	r2, r0
 8002bf0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3318      	adds	r3, #24
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	331c      	adds	r3, #28
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3320      	adds	r3, #32
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3324      	adds	r3, #36	@ 0x24
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	3301      	adds	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	791b      	ldrb	r3, [r3, #4]
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d3af      	bcc.n	8002bb2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e044      	b.n	8002ce2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	791b      	ldrb	r3, [r3, #4]
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3b5      	bcc.n	8002c58 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7c1a      	ldrb	r2, [r3, #16]
 8002cf4:	f88d 2000 	strb.w	r2, [sp]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cfc:	f003 fbbc 	bl	8006478 <USB_DevInit>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00c      	b.n	8002d2c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 fc06 	bl	8007536 <USB_DevDisconnect>

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_PCD_Start+0x1c>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e022      	b.n	8002d96 <HAL_PCD_Start+0x62>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d009      	beq.n	8002d78 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fb0d 	bl	800639c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f004 fbb4 	bl	80074f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d9e:	b590      	push	{r4, r7, lr}
 8002da0:	b08d      	sub	sp, #52	@ 0x34
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f004 fc72 	bl	800769e <USB_GetMode>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 848c 	bne.w	80036da <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 fbd6 	bl	8007578 <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8482 	beq.w	80036d8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 fbc3 	bl	8007578 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d107      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f002 0202 	and.w	r2, r2, #2
 8002e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f004 fbb1 	bl	8007578 <USB_ReadInterrupts>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d161      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0210 	bic.w	r2, r2, #16
 8002e2e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002e56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e5a:	d124      	bne.n	8002ea6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d035      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6a38      	ldr	r0, [r7, #32]
 8002e7c:	f004 f9e8 	bl	8007250 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8c:	441a      	add	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e9e:	441a      	add	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	615a      	str	r2, [r3, #20]
 8002ea4:	e016      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002eac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002eb0:	d110      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eb8:	2208      	movs	r2, #8
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6a38      	ldr	r0, [r7, #32]
 8002ebe:	f004 f9c7 	bl	8007250 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ece:	441a      	add	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0210 	orr.w	r2, r2, #16
 8002ee2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f004 fb45 	bl	8007578 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ef8:	f040 80a7 	bne.w	800304a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 fb4a 	bl	800759e <USB_ReadDevAllOutEpInterrupt>
 8002f0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f0c:	e099      	b.n	8003042 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 808e 	beq.w	8003036 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f004 fb6e 	bl	8007606 <USB_ReadDevOutEPInterrupt>
 8002f2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00c      	beq.n	8002f50 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	2301      	movs	r3, #1
 8002f46:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fea4 	bl	8003c98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f66:	461a      	mov	r2, r3
 8002f68:	2308      	movs	r3, #8
 8002f6a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 ff7a 	bl	8003e68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d030      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa2:	2b80      	cmp	r3, #128	@ 0x80
 8002fa4:	d109      	bne.n	8002fba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fb8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	78db      	ldrb	r3, [r3, #3]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d108      	bne.n	8002fea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f006 ff1d 	bl	8009e24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003012:	461a      	mov	r2, r3
 8003014:	2320      	movs	r3, #32
 8003016:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800302e:	461a      	mov	r2, r3
 8003030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003034:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	3301      	adds	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	f47f af62 	bne.w	8002f0e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f004 fa92 	bl	8007578 <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800305e:	f040 80db 	bne.w	8003218 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f004 fab3 	bl	80075d2 <USB_ReadDevAllInEpInterrupt>
 800306c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003072:	e0cd      	b.n	8003210 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80c2 	beq.w	8003204 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f004 fad9 	bl	8007642 <USB_ReadDevInEPInterrupt>
 8003090:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d057      	beq.n	800314c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	2201      	movs	r2, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69f9      	ldr	r1, [r7, #28]
 80030b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030bc:	4013      	ands	r3, r2
 80030be:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030cc:	461a      	mov	r2, r3
 80030ce:	2301      	movs	r3, #1
 80030d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	799b      	ldrb	r3, [r3, #6]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d132      	bne.n	8003140 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3320      	adds	r3, #32
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4403      	add	r3, r0
 80030fa:	331c      	adds	r3, #28
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4419      	add	r1, r3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4403      	add	r3, r0
 800310e:	3320      	adds	r3, #32
 8003110:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d113      	bne.n	8003140 <HAL_PCD_IRQHandler+0x3a2>
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3324      	adds	r3, #36	@ 0x24
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003138:	461a      	mov	r2, r3
 800313a:	2101      	movs	r1, #1
 800313c:	f004 fae0 	bl	8007700 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	b2db      	uxtb	r3, r3
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f006 fde7 	bl	8009d1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003162:	461a      	mov	r2, r3
 8003164:	2308      	movs	r3, #8
 8003166:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800317e:	461a      	mov	r2, r3
 8003180:	2310      	movs	r3, #16
 8003182:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800319a:	461a      	mov	r2, r3
 800319c:	2340      	movs	r3, #64	@ 0x40
 800319e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d023      	beq.n	80031f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ac:	6a38      	ldr	r0, [r7, #32]
 80031ae:	f003 fac7 	bl	8006740 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	3310      	adds	r3, #16
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	78db      	ldrb	r3, [r3, #3]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d108      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f006 fe34 	bl	8009e48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031ec:	461a      	mov	r2, r3
 80031ee:	2302      	movs	r3, #2
 80031f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fcbd 	bl	8003b7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	3301      	adds	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800320a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	f47f af2e 	bne.w	8003074 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f004 f9ab 	bl	8007578 <USB_ReadInterrupts>
 8003222:	4603      	mov	r3, r0
 8003224:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003228:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800322c:	d122      	bne.n	8003274 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003248:	2b01      	cmp	r3, #1
 800324a:	d108      	bne.n	800325e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003254:	2100      	movs	r1, #0
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fea4 	bl	8003fa4 <HAL_PCDEx_LPM_Callback>
 800325c:	e002      	b.n	8003264 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f006 fdd2 	bl	8009e08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f004 f97d 	bl	8007578 <USB_ReadInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003288:	d112      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d102      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f006 fd8e 	bl	8009dbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80032ae:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 f95f 	bl	8007578 <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032c4:	f040 80b7 	bne.w	8003436 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2110      	movs	r1, #16
 80032e2:	4618      	mov	r0, r3
 80032e4:	f003 fa2c 	bl	8006740 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ec:	e046      	b.n	800337c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032fa:	461a      	mov	r2, r3
 80032fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003300:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003312:	0151      	lsls	r1, r2, #5
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	440a      	add	r2, r1
 8003318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800331c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003320:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800332e:	461a      	mov	r2, r3
 8003330:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003334:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003346:	0151      	lsls	r1, r2, #5
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	440a      	add	r2, r1
 800334c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003350:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003354:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003366:	0151      	lsls	r1, r2, #5
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	440a      	add	r2, r1
 800336c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003370:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003374:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003378:	3301      	adds	r3, #1
 800337a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	791b      	ldrb	r3, [r3, #4]
 8003380:	461a      	mov	r2, r3
 8003382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003384:	4293      	cmp	r3, r2
 8003386:	d3b2      	bcc.n	80032ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003396:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800339a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7bdb      	ldrb	r3, [r3, #15]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d016      	beq.n	80033d2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033b4:	f043 030b 	orr.w	r3, r3, #11
 80033b8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033ca:	f043 030b 	orr.w	r3, r3, #11
 80033ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d0:	e015      	b.n	80033fe <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033e4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80033e8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033f8:	f043 030b 	orr.w	r3, r3, #11
 80033fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800340c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003410:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003420:	461a      	mov	r2, r3
 8003422:	f004 f96d 	bl	8007700 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f004 f89c 	bl	8007578 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344a:	d123      	bne.n	8003494 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f004 f932 	bl	80076ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f003 f9e9 	bl	8006832 <USB_GetDevSpeed>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681c      	ldr	r4, [r3, #0]
 800346c:	f001 fa0a 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 8003470:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003476:	461a      	mov	r2, r3
 8003478:	4620      	mov	r0, r4
 800347a:	f002 feed 	bl	8006258 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f006 fc73 	bl	8009d6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003492:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f004 f86d 	bl	8007578 <USB_ReadInterrupts>
 800349e:	4603      	mov	r3, r0
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d10a      	bne.n	80034be <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f006 fc50 	bl	8009d4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f002 0208 	and.w	r2, r2, #8
 80034bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f004 f858 	bl	8007578 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ce:	2b80      	cmp	r3, #128	@ 0x80
 80034d0:	d123      	bne.n	800351a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034de:	2301      	movs	r3, #1
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e2:	e014      	b.n	800350e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fb0a 	bl	8003b1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	3301      	adds	r3, #1
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	791b      	ldrb	r3, [r3, #4]
 8003512:	461a      	mov	r2, r3
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	4293      	cmp	r3, r2
 8003518:	d3e4      	bcc.n	80034e4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f004 f82a 	bl	8007578 <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800352e:	d13c      	bne.n	80035aa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003530:	2301      	movs	r3, #1
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
 8003534:	e02b      	b.n	800358e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3318      	adds	r3, #24
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d115      	bne.n	8003588 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800355c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800355e:	2b00      	cmp	r3, #0
 8003560:	da12      	bge.n	8003588 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3317      	adds	r3, #23
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800357e:	b2db      	uxtb	r3, r3
 8003580:	4619      	mov	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 faca 	bl	8003b1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	3301      	adds	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	791b      	ldrb	r3, [r3, #4]
 8003592:	461a      	mov	r2, r3
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	4293      	cmp	r3, r2
 8003598:	d3cd      	bcc.n	8003536 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80035a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 ffe2 	bl	8007578 <USB_ReadInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035be:	d156      	bne.n	800366e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c0:	2301      	movs	r3, #1
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c4:	e045      	b.n	8003652 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d12e      	bne.n	800364c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da2b      	bge.n	800364c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	0c1a      	lsrs	r2, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80035fe:	4053      	eors	r3, r2
 8003600:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003604:	2b00      	cmp	r3, #0
 8003606:	d121      	bne.n	800364c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003644:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003648:	6053      	str	r3, [r2, #4]
            break;
 800364a:	e008      	b.n	800365e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	3301      	adds	r3, #1
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	791b      	ldrb	r3, [r3, #4]
 8003656:	461a      	mov	r2, r3
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	4293      	cmp	r3, r2
 800365c:	d3b3      	bcc.n	80035c6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800366c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f003 ff80 	bl	8007578 <USB_ReadInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003682:	d10a      	bne.n	800369a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f006 fbf1 	bl	8009e6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 ff6a 	bl	8007578 <USB_ReadInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d115      	bne.n	80036da <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f006 fbe1 	bl	8009e88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e000      	b.n	80036da <HAL_PCD_IRQHandler+0x93c>
      return;
 80036d8:	bf00      	nop
    }
  }
}
 80036da:	3734      	adds	r7, #52	@ 0x34
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd90      	pop	{r4, r7, pc}

080036e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_PCD_SetAddress+0x1a>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e012      	b.n	8003720 <HAL_PCD_SetAddress+0x40>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f003 fec9 	bl	80074a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	70fb      	strb	r3, [r7, #3]
 800373a:	460b      	mov	r3, r1
 800373c:	803b      	strh	r3, [r7, #0]
 800373e:	4613      	mov	r3, r2
 8003740:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800374a:	2b00      	cmp	r3, #0
 800374c:	da0f      	bge.n	800376e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	f003 020f 	and.w	r2, r3, #15
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	3310      	adds	r3, #16
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	3304      	adds	r3, #4
 8003764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	705a      	strb	r2, [r3, #1]
 800376c:	e00f      	b.n	800378e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	f003 020f 	and.w	r2, r3, #15
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	3304      	adds	r3, #4
 8003786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800379a:	883b      	ldrh	r3, [r7, #0]
 800379c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	78ba      	ldrb	r2, [r7, #2]
 80037a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d004      	beq.n	80037bc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037bc:	78bb      	ldrb	r3, [r7, #2]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d102      	bne.n	80037c8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_PCD_EP_Open+0xae>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e00e      	b.n	80037f4 <HAL_PCD_EP_Open+0xcc>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 f849 	bl	800687c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80037f2:	7afb      	ldrb	r3, [r7, #11]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800380c:	2b00      	cmp	r3, #0
 800380e:	da0f      	bge.n	8003830 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	f003 020f 	and.w	r2, r3, #15
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	3310      	adds	r3, #16
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4413      	add	r3, r2
 8003824:	3304      	adds	r3, #4
 8003826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	705a      	strb	r2, [r3, #1]
 800382e:	e00f      	b.n	8003850 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	f003 020f 	and.w	r2, r3, #15
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	3304      	adds	r3, #4
 8003848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_PCD_EP_Close+0x6e>
 8003866:	2302      	movs	r3, #2
 8003868:	e00e      	b.n	8003888 <HAL_PCD_EP_Close+0x8c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	4618      	mov	r0, r3
 800387a:	f003 f887 	bl	800698c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	460b      	mov	r3, r1
 800389e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038a0:	7afb      	ldrb	r3, [r7, #11]
 80038a2:	f003 020f 	and.w	r2, r3, #15
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	3304      	adds	r3, #4
 80038b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	799b      	ldrb	r3, [r3, #6]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d102      	bne.n	80038ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	799b      	ldrb	r3, [r3, #6]
 80038f4:	461a      	mov	r2, r3
 80038f6:	6979      	ldr	r1, [r7, #20]
 80038f8:	f003 f924 	bl	8006b44 <USB_EPStartXfer>

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	f003 020f 	and.w	r2, r3, #15
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003928:	681b      	ldr	r3, [r3, #0]
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	460b      	mov	r3, r1
 8003944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003946:	7afb      	ldrb	r3, [r7, #11]
 8003948:	f003 020f 	and.w	r2, r3, #15
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	3310      	adds	r3, #16
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4413      	add	r3, r2
 800395a:	3304      	adds	r3, #4
 800395c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2201      	movs	r2, #1
 8003974:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003976:	7afb      	ldrb	r3, [r7, #11]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	b2da      	uxtb	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	799b      	ldrb	r3, [r3, #6]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d102      	bne.n	8003990 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	799b      	ldrb	r3, [r3, #6]
 8003998:	461a      	mov	r2, r3
 800399a:	6979      	ldr	r1, [r7, #20]
 800399c:	f003 f8d2 	bl	8006b44 <USB_EPStartXfer>

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	460b      	mov	r3, r1
 80039b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	7912      	ldrb	r2, [r2, #4]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d901      	bls.n	80039c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e04f      	b.n	8003a68 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	da0f      	bge.n	80039f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	f003 020f 	and.w	r2, r3, #15
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	3310      	adds	r3, #16
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	3304      	adds	r3, #4
 80039e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	705a      	strb	r2, [r3, #1]
 80039ee:	e00d      	b.n	8003a0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_PCD_EP_SetStall+0x82>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e01d      	b.n	8003a68 <HAL_PCD_EP_SetStall+0xbe>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 fc60 	bl	8007300 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7999      	ldrb	r1, [r3, #6]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f003 fe51 	bl	8007700 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	7912      	ldrb	r2, [r2, #4]
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e042      	b.n	8003b14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	da0f      	bge.n	8003ab6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	f003 020f 	and.w	r2, r3, #15
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	3310      	adds	r3, #16
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3304      	adds	r3, #4
 8003aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	705a      	strb	r2, [r3, #1]
 8003ab4:	e00f      	b.n	8003ad6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	f003 020f 	and.w	r2, r3, #15
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	3304      	adds	r3, #4
 8003ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_PCD_EP_ClrStall+0x86>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e00e      	b.n	8003b14 <HAL_PCD_EP_ClrStall+0xa4>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f003 fc69 	bl	80073dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da0c      	bge.n	8003b4a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	f003 020f 	and.w	r2, r3, #15
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	3310      	adds	r3, #16
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	3304      	adds	r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e00c      	b.n	8003b64 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f003 fa88 	bl	8007080 <USB_EPStopXfer>
 8003b70:	4603      	mov	r3, r0
 8003b72:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b74:	7afb      	ldrb	r3, [r7, #11]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b08a      	sub	sp, #40	@ 0x28
 8003b82:	af02      	add	r7, sp, #8
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	3310      	adds	r3, #16
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d901      	bls.n	8003bb6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e06b      	b.n	8003c8e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d902      	bls.n	8003bd2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3303      	adds	r3, #3
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bda:	e02a      	b.n	8003c32 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d902      	bls.n	8003bf8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	3303      	adds	r3, #3
 8003bfc:	089b      	lsrs	r3, r3, #2
 8003bfe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68d9      	ldr	r1, [r3, #12]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	4603      	mov	r3, r0
 8003c14:	6978      	ldr	r0, [r7, #20]
 8003c16:	f003 fadd 	bl	80071d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	441a      	add	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	441a      	add	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d809      	bhi.n	8003c5c <PCD_WriteEmptyTxFifo+0xde>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d203      	bcs.n	8003c5c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1bf      	bne.n	8003bdc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d811      	bhi.n	8003c8c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	2201      	movs	r2, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	6939      	ldr	r1, [r7, #16]
 8003c84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c88:	4013      	ands	r3, r2
 8003c8a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	333c      	adds	r3, #60	@ 0x3c
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	799b      	ldrb	r3, [r3, #6]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d17b      	bne.n	8003dc6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4a61      	ldr	r2, [pc, #388]	@ (8003e60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	f240 80b9 	bls.w	8003e54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80b3 	beq.w	8003e54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d00:	6093      	str	r3, [r2, #8]
 8003d02:	e0a7      	b.n	8003e54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2320      	movs	r3, #32
 8003d1e:	6093      	str	r3, [r2, #8]
 8003d20:	e098      	b.n	8003e54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f040 8093 	bne.w	8003e54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4a4b      	ldr	r2, [pc, #300]	@ (8003e60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d90f      	bls.n	8003d56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d52:	6093      	str	r3, [r2, #8]
 8003d54:	e07e      	b.n	8003e54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	4413      	add	r3, r2
 8003d68:	3304      	adds	r3, #4
 8003d6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	0159      	lsls	r1, r3, #5
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	440b      	add	r3, r1
 8003d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d82:	1ad2      	subs	r2, r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d114      	bne.n	8003db8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003da0:	461a      	mov	r2, r3
 8003da2:	2101      	movs	r1, #1
 8003da4:	f003 fcac 	bl	8007700 <USB_EP0_OutStart>
 8003da8:	e006      	b.n	8003db8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	441a      	add	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f005 ff90 	bl	8009ce4 <HAL_PCD_DataOutStageCallback>
 8003dc4:	e046      	b.n	8003e54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	4a26      	ldr	r2, [pc, #152]	@ (8003e64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d124      	bne.n	8003e18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de4:	461a      	mov	r2, r3
 8003de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dea:	6093      	str	r3, [r2, #8]
 8003dec:	e032      	b.n	8003e54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e04:	461a      	mov	r2, r3
 8003e06:	2320      	movs	r3, #32
 8003e08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f005 ff67 	bl	8009ce4 <HAL_PCD_DataOutStageCallback>
 8003e16:	e01d      	b.n	8003e54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d114      	bne.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e40:	461a      	mov	r2, r3
 8003e42:	2100      	movs	r1, #0
 8003e44:	f003 fc5c 	bl	8007700 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f005 ff48 	bl	8009ce4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	4f54300a 	.word	0x4f54300a
 8003e64:	4f54310a 	.word	0x4f54310a

08003e68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	333c      	adds	r3, #60	@ 0x3c
 8003e80:	3304      	adds	r3, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4a15      	ldr	r2, [pc, #84]	@ (8003ef0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d90e      	bls.n	8003ebc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f005 feff 	bl	8009cc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d90c      	bls.n	8003ee4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	799b      	ldrb	r3, [r3, #6]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d108      	bne.n	8003ee4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003edc:	461a      	mov	r2, r3
 8003ede:	2101      	movs	r1, #1
 8003ee0:	f003 fc0e 	bl	8007700 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	4f54300a 	.word	0x4f54300a

08003ef4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
 8003f00:	4613      	mov	r3, r2
 8003f02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d107      	bne.n	8003f22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f12:	883b      	ldrh	r3, [r7, #0]
 8003f14:	0419      	lsls	r1, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f20:	e028      	b.n	8003f74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	73fb      	strb	r3, [r7, #15]
 8003f34:	e00d      	b.n	8003f52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	3340      	adds	r3, #64	@ 0x40
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	4413      	add	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
 8003f52:	7bfa      	ldrb	r2, [r7, #15]
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d3ec      	bcc.n	8003f36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f5c:	883b      	ldrh	r3, [r7, #0]
 8003f5e:	0418      	lsls	r0, r3, #16
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	4302      	orrs	r2, r0
 8003f6c:	3340      	adds	r3, #64	@ 0x40
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e267      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d075      	beq.n	80040c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fda:	4b88      	ldr	r3, [pc, #544]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d00c      	beq.n	8004000 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe6:	4b85      	ldr	r3, [pc, #532]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d112      	bne.n	8004018 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff2:	4b82      	ldr	r3, [pc, #520]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ffe:	d10b      	bne.n	8004018 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004000:	4b7e      	ldr	r3, [pc, #504]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d05b      	beq.n	80040c4 <HAL_RCC_OscConfig+0x108>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d157      	bne.n	80040c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e242      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004020:	d106      	bne.n	8004030 <HAL_RCC_OscConfig+0x74>
 8004022:	4b76      	ldr	r3, [pc, #472]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a75      	ldr	r2, [pc, #468]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e01d      	b.n	800406c <HAL_RCC_OscConfig+0xb0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0x98>
 800403a:	4b70      	ldr	r3, [pc, #448]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a6f      	ldr	r2, [pc, #444]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b6d      	ldr	r3, [pc, #436]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a6c      	ldr	r2, [pc, #432]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e00b      	b.n	800406c <HAL_RCC_OscConfig+0xb0>
 8004054:	4b69      	ldr	r3, [pc, #420]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a68      	ldr	r2, [pc, #416]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 800405a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b66      	ldr	r3, [pc, #408]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a65      	ldr	r2, [pc, #404]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800406a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fe f8b2 	bl	80021dc <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7fe f8ae 	bl	80021dc <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	@ 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e207      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b5b      	ldr	r3, [pc, #364]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0xc0>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fe f89e 	bl	80021dc <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fe f89a 	bl	80021dc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	@ 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e1f3      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	4b51      	ldr	r3, [pc, #324]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0xe8>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d063      	beq.n	800419a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040d2:	4b4a      	ldr	r3, [pc, #296]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040de:	4b47      	ldr	r3, [pc, #284]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d11c      	bne.n	8004124 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ea:	4b44      	ldr	r3, [pc, #272]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f6:	4b41      	ldr	r3, [pc, #260]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCC_OscConfig+0x152>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e1c7      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b3b      	ldr	r3, [pc, #236]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4937      	ldr	r1, [pc, #220]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004122:	e03a      	b.n	800419a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800412c:	4b34      	ldr	r3, [pc, #208]	@ (8004200 <HAL_RCC_OscConfig+0x244>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fe f853 	bl	80021dc <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413a:	f7fe f84f 	bl	80021dc <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e1a8      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b28      	ldr	r3, [pc, #160]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4925      	ldr	r1, [pc, #148]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
 800416c:	e015      	b.n	800419a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_RCC_OscConfig+0x244>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe f832 	bl	80021dc <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe f82e 	bl	80021dc <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e187      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d036      	beq.n	8004214 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <HAL_RCC_OscConfig+0x248>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fe f812 	bl	80021dc <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fe f80e 	bl	80021dc <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e167      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <HAL_RCC_OscConfig+0x240>)
 80041d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x200>
 80041da:	e01b      	b.n	8004214 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <HAL_RCC_OscConfig+0x248>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e2:	f7fd fffb 	bl	80021dc <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e8:	e00e      	b.n	8004208 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ea:	f7fd fff7 	bl	80021dc <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d907      	bls.n	8004208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e150      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
 80041fc:	40023800 	.word	0x40023800
 8004200:	42470000 	.word	0x42470000
 8004204:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b88      	ldr	r3, [pc, #544]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ea      	bne.n	80041ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8097 	beq.w	8004350 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b81      	ldr	r3, [pc, #516]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	4b7d      	ldr	r3, [pc, #500]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	4a7c      	ldr	r2, [pc, #496]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	@ 0x40
 8004242:	4b7a      	ldr	r3, [pc, #488]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	4b77      	ldr	r3, [pc, #476]	@ (8004430 <HAL_RCC_OscConfig+0x474>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d118      	bne.n	8004290 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425e:	4b74      	ldr	r3, [pc, #464]	@ (8004430 <HAL_RCC_OscConfig+0x474>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a73      	ldr	r2, [pc, #460]	@ (8004430 <HAL_RCC_OscConfig+0x474>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426a:	f7fd ffb7 	bl	80021dc <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004272:	f7fd ffb3 	bl	80021dc <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e10c      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	4b6a      	ldr	r3, [pc, #424]	@ (8004430 <HAL_RCC_OscConfig+0x474>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x2ea>
 8004298:	4b64      	ldr	r3, [pc, #400]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429c:	4a63      	ldr	r2, [pc, #396]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a4:	e01c      	b.n	80042e0 <HAL_RCC_OscConfig+0x324>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x30c>
 80042ae:	4b5f      	ldr	r3, [pc, #380]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b2:	4a5e      	ldr	r2, [pc, #376]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ba:	4b5c      	ldr	r3, [pc, #368]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	4a5b      	ldr	r2, [pc, #364]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0x324>
 80042c8:	4b58      	ldr	r3, [pc, #352]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	4a57      	ldr	r2, [pc, #348]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d4:	4b55      	ldr	r3, [pc, #340]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d8:	4a54      	ldr	r2, [pc, #336]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fd ff78 	bl	80021dc <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fd ff74 	bl	80021dc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0cb      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	4b49      	ldr	r3, [pc, #292]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ee      	beq.n	80042f0 <HAL_RCC_OscConfig+0x334>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004314:	f7fd ff62 	bl	80021dc <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fd ff5e 	bl	80021dc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0b5      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004332:	4b3e      	ldr	r3, [pc, #248]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ee      	bne.n	800431c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b39      	ldr	r3, [pc, #228]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	4a38      	ldr	r2, [pc, #224]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80a1 	beq.w	800449c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800435a:	4b34      	ldr	r3, [pc, #208]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b08      	cmp	r3, #8
 8004364:	d05c      	beq.n	8004420 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d141      	bne.n	80043f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b31      	ldr	r3, [pc, #196]	@ (8004434 <HAL_RCC_OscConfig+0x478>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fd ff32 	bl	80021dc <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7fd ff2e 	bl	80021dc <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e087      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	4b27      	ldr	r3, [pc, #156]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	3b01      	subs	r3, #1
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	491b      	ldr	r1, [pc, #108]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004434 <HAL_RCC_OscConfig+0x478>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fd ff07 	bl	80021dc <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fd ff03 	bl	80021dc <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e05c      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e4:	4b11      	ldr	r3, [pc, #68]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x416>
 80043f0:	e054      	b.n	800449c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f2:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <HAL_RCC_OscConfig+0x478>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fd fef0 	bl	80021dc <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004400:	f7fd feec 	bl	80021dc <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e045      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	4b06      	ldr	r3, [pc, #24]	@ (800442c <HAL_RCC_OscConfig+0x470>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x444>
 800441e:	e03d      	b.n	800449c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e038      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
 800442c:	40023800 	.word	0x40023800
 8004430:	40007000 	.word	0x40007000
 8004434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004438:	4b1b      	ldr	r3, [pc, #108]	@ (80044a8 <HAL_RCC_OscConfig+0x4ec>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d028      	beq.n	8004498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d121      	bne.n	8004498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d11a      	bne.n	8004498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800446e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004470:	4293      	cmp	r3, r2
 8004472:	d111      	bne.n	8004498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	3b01      	subs	r3, #1
 8004482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d107      	bne.n	8004498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800

080044ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0cc      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c0:	4b68      	ldr	r3, [pc, #416]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d90c      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b65      	ldr	r3, [pc, #404]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b63      	ldr	r3, [pc, #396]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b8      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004500:	4b59      	ldr	r3, [pc, #356]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a58      	ldr	r2, [pc, #352]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800450a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004518:	4b53      	ldr	r3, [pc, #332]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a52      	ldr	r2, [pc, #328]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004524:	4b50      	ldr	r3, [pc, #320]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	494d      	ldr	r1, [pc, #308]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d044      	beq.n	80045cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	4b47      	ldr	r3, [pc, #284]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d119      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d003      	beq.n	800456a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004566:	2b03      	cmp	r3, #3
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456a:	4b3f      	ldr	r3, [pc, #252]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e06f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457a:	4b3b      	ldr	r3, [pc, #236]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e067      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458a:	4b37      	ldr	r3, [pc, #220]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f023 0203 	bic.w	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4934      	ldr	r1, [pc, #208]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800459c:	f7fd fe1e 	bl	80021dc <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a4:	f7fd fe1a 	bl	80021dc <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e04f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 020c 	and.w	r2, r3, #12
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1eb      	bne.n	80045a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045cc:	4b25      	ldr	r3, [pc, #148]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d20c      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b22      	ldr	r3, [pc, #136]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b20      	ldr	r3, [pc, #128]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e032      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004600:	4b19      	ldr	r3, [pc, #100]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4916      	ldr	r1, [pc, #88]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800461e:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	490e      	ldr	r1, [pc, #56]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004632:	f000 f821 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8004636:	4602      	mov	r2, r0
 8004638:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	490a      	ldr	r1, [pc, #40]	@ (800466c <HAL_RCC_ClockConfig+0x1c0>)
 8004644:	5ccb      	ldrb	r3, [r1, r3]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	4a09      	ldr	r2, [pc, #36]	@ (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800464e:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <HAL_RCC_ClockConfig+0x1c8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fd fd7e 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023c00 	.word	0x40023c00
 8004668:	40023800 	.word	0x40023800
 800466c:	08028dc4 	.word	0x08028dc4
 8004670:	20000000 	.word	0x20000000
 8004674:	20000004 	.word	0x20000004

08004678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800467c:	b094      	sub	sp, #80	@ 0x50
 800467e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004690:	4b79      	ldr	r3, [pc, #484]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b08      	cmp	r3, #8
 800469a:	d00d      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0x40>
 800469c:	2b08      	cmp	r3, #8
 800469e:	f200 80e1 	bhi.w	8004864 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x34>
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d003      	beq.n	80046b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046aa:	e0db      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4b73      	ldr	r3, [pc, #460]	@ (800487c <HAL_RCC_GetSysClockFreq+0x204>)
 80046ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046b0:	e0db      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046b2:	4b73      	ldr	r3, [pc, #460]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x208>)
 80046b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046b6:	e0d8      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d063      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	2200      	movs	r2, #0
 80046d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e2:	2300      	movs	r3, #0
 80046e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046ea:	4622      	mov	r2, r4
 80046ec:	462b      	mov	r3, r5
 80046ee:	f04f 0000 	mov.w	r0, #0
 80046f2:	f04f 0100 	mov.w	r1, #0
 80046f6:	0159      	lsls	r1, r3, #5
 80046f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046fc:	0150      	lsls	r0, r2, #5
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4621      	mov	r1, r4
 8004704:	1a51      	subs	r1, r2, r1
 8004706:	6139      	str	r1, [r7, #16]
 8004708:	4629      	mov	r1, r5
 800470a:	eb63 0301 	sbc.w	r3, r3, r1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800471c:	4659      	mov	r1, fp
 800471e:	018b      	lsls	r3, r1, #6
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004726:	4651      	mov	r1, sl
 8004728:	018a      	lsls	r2, r1, #6
 800472a:	4651      	mov	r1, sl
 800472c:	ebb2 0801 	subs.w	r8, r2, r1
 8004730:	4659      	mov	r1, fp
 8004732:	eb63 0901 	sbc.w	r9, r3, r1
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474a:	4690      	mov	r8, r2
 800474c:	4699      	mov	r9, r3
 800474e:	4623      	mov	r3, r4
 8004750:	eb18 0303 	adds.w	r3, r8, r3
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	462b      	mov	r3, r5
 8004758:	eb49 0303 	adc.w	r3, r9, r3
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800476a:	4629      	mov	r1, r5
 800476c:	024b      	lsls	r3, r1, #9
 800476e:	4621      	mov	r1, r4
 8004770:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004774:	4621      	mov	r1, r4
 8004776:	024a      	lsls	r2, r1, #9
 8004778:	4610      	mov	r0, r2
 800477a:	4619      	mov	r1, r3
 800477c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800477e:	2200      	movs	r2, #0
 8004780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004788:	f7fc fa7e 	bl	8000c88 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4613      	mov	r3, r2
 8004792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004794:	e058      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004796:	4b38      	ldr	r3, [pc, #224]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	2200      	movs	r2, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	4611      	mov	r1, r2
 80047a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	0159      	lsls	r1, r3, #5
 80047be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c2:	0150      	lsls	r0, r2, #5
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4641      	mov	r1, r8
 80047ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ce:	4649      	mov	r1, r9
 80047d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047e8:	ebb2 040a 	subs.w	r4, r2, sl
 80047ec:	eb63 050b 	sbc.w	r5, r3, fp
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	00eb      	lsls	r3, r5, #3
 80047fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fe:	00e2      	lsls	r2, r4, #3
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	4643      	mov	r3, r8
 8004806:	18e3      	adds	r3, r4, r3
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	464b      	mov	r3, r9
 800480c:	eb45 0303 	adc.w	r3, r5, r3
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481e:	4629      	mov	r1, r5
 8004820:	028b      	lsls	r3, r1, #10
 8004822:	4621      	mov	r1, r4
 8004824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004828:	4621      	mov	r1, r4
 800482a:	028a      	lsls	r2, r1, #10
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004832:	2200      	movs	r2, #0
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	61fa      	str	r2, [r7, #28]
 8004838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800483c:	f7fc fa24 	bl	8000c88 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	3301      	adds	r3, #1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004858:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800485a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004862:	e002      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <HAL_RCC_GetSysClockFreq+0x204>)
 8004866:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800486c:	4618      	mov	r0, r3
 800486e:	3750      	adds	r7, #80	@ 0x50
 8004870:	46bd      	mov	sp, r7
 8004872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	00f42400 	.word	0x00f42400
 8004880:	007a1200 	.word	0x007a1200

08004884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b03      	ldr	r3, [pc, #12]	@ (8004898 <HAL_RCC_GetHCLKFreq+0x14>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000000 	.word	0x20000000

0800489c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a0:	f7ff fff0 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	@ (80048c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	08028dd4 	.word	0x08028dd4

080048c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c8:	f7ff ffdc 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	0b5b      	lsrs	r3, r3, #13
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4903      	ldr	r1, [pc, #12]	@ (80048e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	08028dd4 	.word	0x08028dd4

080048ec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e038      	b.n	8004974 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7fd faa0 	bl	8001e5c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3308      	adds	r3, #8
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f001 fb62 	bl	8005ff0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	461a      	mov	r2, r3
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	f001 fbc4 	bl	80060c4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6858      	ldr	r0, [r3, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	f001 fbe9 	bl	8006120 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	6892      	ldr	r2, [r2, #8]
 8004956:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	6892      	ldr	r2, [r2, #8]
 8004962:	f041 0101 	orr.w	r1, r1, #1
 8004966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e041      	b.n	8004a12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fd f996 	bl	8001cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fa16 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01b      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f06f 0202 	mvn.w	r2, #2
 8004a4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f9a3 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 8004a6a:	e005      	b.n	8004a78 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f995 	bl	8004d9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f9a6 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d01b      	beq.n	8004aca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f06f 0204 	mvn.w	r2, #4
 8004a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f97d 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 8004ab6:	e005      	b.n	8004ac4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f96f 	bl	8004d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f980 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d020      	beq.n	8004b16 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01b      	beq.n	8004b16 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0208 	mvn.w	r2, #8
 8004ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2204      	movs	r2, #4
 8004aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f957 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 8004b02:	e005      	b.n	8004b10 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f949 	bl	8004d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f95a 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d020      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01b      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f06f 0210 	mvn.w	r2, #16
 8004b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2208      	movs	r2, #8
 8004b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f931 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 8004b4e:	e005      	b.n	8004b5c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f923 	bl	8004d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f934 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00c      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0201 	mvn.w	r2, #1
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f901 	bl	8004d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00c      	beq.n	8004baa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fae7 	bl	8005178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00c      	beq.n	8004bce <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f905 	bl	8004dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f06f 0220 	mvn.w	r2, #32
 8004bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fab9 	bl	8005164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_TIM_ConfigClockSource+0x1c>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0b4      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x186>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c3c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4e:	d03e      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0xd4>
 8004c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c54:	f200 8087 	bhi.w	8004d66 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5c:	f000 8086 	beq.w	8004d6c <HAL_TIM_ConfigClockSource+0x172>
 8004c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c64:	d87f      	bhi.n	8004d66 <HAL_TIM_ConfigClockSource+0x16c>
 8004c66:	2b70      	cmp	r3, #112	@ 0x70
 8004c68:	d01a      	beq.n	8004ca0 <HAL_TIM_ConfigClockSource+0xa6>
 8004c6a:	2b70      	cmp	r3, #112	@ 0x70
 8004c6c:	d87b      	bhi.n	8004d66 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6e:	2b60      	cmp	r3, #96	@ 0x60
 8004c70:	d050      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x11a>
 8004c72:	2b60      	cmp	r3, #96	@ 0x60
 8004c74:	d877      	bhi.n	8004d66 <HAL_TIM_ConfigClockSource+0x16c>
 8004c76:	2b50      	cmp	r3, #80	@ 0x50
 8004c78:	d03c      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0xfa>
 8004c7a:	2b50      	cmp	r3, #80	@ 0x50
 8004c7c:	d873      	bhi.n	8004d66 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7e:	2b40      	cmp	r3, #64	@ 0x40
 8004c80:	d058      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0x13a>
 8004c82:	2b40      	cmp	r3, #64	@ 0x40
 8004c84:	d86f      	bhi.n	8004d66 <HAL_TIM_ConfigClockSource+0x16c>
 8004c86:	2b30      	cmp	r3, #48	@ 0x30
 8004c88:	d064      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0x15a>
 8004c8a:	2b30      	cmp	r3, #48	@ 0x30
 8004c8c:	d86b      	bhi.n	8004d66 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d060      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0x15a>
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d867      	bhi.n	8004d66 <HAL_TIM_ConfigClockSource+0x16c>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d05c      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0x15a>
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d05a      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0x15a>
 8004c9e:	e062      	b.n	8004d66 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cb0:	f000 f9bc 	bl	800502c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cc2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	609a      	str	r2, [r3, #8]
      break;
 8004ccc:	e04f      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cde:	f000 f9a5 	bl	800502c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cf0:	609a      	str	r2, [r3, #8]
      break;
 8004cf2:	e03c      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d00:	461a      	mov	r2, r3
 8004d02:	f000 f919 	bl	8004f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2150      	movs	r1, #80	@ 0x50
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f972 	bl	8004ff6 <TIM_ITRx_SetConfig>
      break;
 8004d12:	e02c      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d20:	461a      	mov	r2, r3
 8004d22:	f000 f938 	bl	8004f96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2160      	movs	r1, #96	@ 0x60
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 f962 	bl	8004ff6 <TIM_ITRx_SetConfig>
      break;
 8004d32:	e01c      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d40:	461a      	mov	r2, r3
 8004d42:	f000 f8f9 	bl	8004f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2140      	movs	r1, #64	@ 0x40
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 f952 	bl	8004ff6 <TIM_ITRx_SetConfig>
      break;
 8004d52:	e00c      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f000 f949 	bl	8004ff6 <TIM_ITRx_SetConfig>
      break;
 8004d64:	e003      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6a:	e000      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a43      	ldr	r2, [pc, #268]	@ (8004f0c <TIM_Base_SetConfig+0x120>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d013      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e0a:	d00f      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a40      	ldr	r2, [pc, #256]	@ (8004f10 <TIM_Base_SetConfig+0x124>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a3f      	ldr	r2, [pc, #252]	@ (8004f14 <TIM_Base_SetConfig+0x128>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d007      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f18 <TIM_Base_SetConfig+0x12c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3d      	ldr	r2, [pc, #244]	@ (8004f1c <TIM_Base_SetConfig+0x130>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d108      	bne.n	8004e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a32      	ldr	r2, [pc, #200]	@ (8004f0c <TIM_Base_SetConfig+0x120>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4c:	d027      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2f      	ldr	r2, [pc, #188]	@ (8004f10 <TIM_Base_SetConfig+0x124>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d023      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2e      	ldr	r2, [pc, #184]	@ (8004f14 <TIM_Base_SetConfig+0x128>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01f      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2d      	ldr	r2, [pc, #180]	@ (8004f18 <TIM_Base_SetConfig+0x12c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2c      	ldr	r2, [pc, #176]	@ (8004f1c <TIM_Base_SetConfig+0x130>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d017      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2b      	ldr	r2, [pc, #172]	@ (8004f20 <TIM_Base_SetConfig+0x134>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2a      	ldr	r2, [pc, #168]	@ (8004f24 <TIM_Base_SetConfig+0x138>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00f      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a29      	ldr	r2, [pc, #164]	@ (8004f28 <TIM_Base_SetConfig+0x13c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a28      	ldr	r2, [pc, #160]	@ (8004f2c <TIM_Base_SetConfig+0x140>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a27      	ldr	r2, [pc, #156]	@ (8004f30 <TIM_Base_SetConfig+0x144>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a26      	ldr	r2, [pc, #152]	@ (8004f34 <TIM_Base_SetConfig+0x148>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d108      	bne.n	8004eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a0e      	ldr	r2, [pc, #56]	@ (8004f0c <TIM_Base_SetConfig+0x120>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_Base_SetConfig+0xf2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a10      	ldr	r2, [pc, #64]	@ (8004f1c <TIM_Base_SetConfig+0x130>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d103      	bne.n	8004ee6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f043 0204 	orr.w	r2, r3, #4
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	601a      	str	r2, [r3, #0]
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40010400 	.word	0x40010400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800
 8004f2c:	40001800 	.word	0x40001800
 8004f30:	40001c00 	.word	0x40001c00
 8004f34:	40002000 	.word	0x40002000

08004f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f023 0201 	bic.w	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 030a 	bic.w	r3, r3, #10
 8004f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f023 0210 	bic.w	r2, r3, #16
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	031b      	lsls	r3, r3, #12
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	f043 0307 	orr.w	r3, r3, #7
 8005018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	021a      	lsls	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	431a      	orrs	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4313      	orrs	r3, r2
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005080:	2302      	movs	r3, #2
 8005082:	e05a      	b.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a21      	ldr	r2, [pc, #132]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d022      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d0:	d01d      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d018      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d013      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00e      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a18      	ldr	r2, [pc, #96]	@ (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d009      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a17      	ldr	r2, [pc, #92]	@ (800515c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a15      	ldr	r2, [pc, #84]	@ (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d10c      	bne.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4313      	orrs	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800
 8005154:	40000c00 	.word	0x40000c00
 8005158:	40010400 	.word	0x40010400
 800515c:	40014000 	.word	0x40014000
 8005160:	40001800 	.word	0x40001800

08005164 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e042      	b.n	8005224 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc fdb6 	bl	8001d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2224      	movs	r2, #36	@ 0x24
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fc99 	bl	8005b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b0ba      	sub	sp, #232	@ 0xe8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005252:	2300      	movs	r3, #0
 8005254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800526a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_UART_IRQHandler+0x66>
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb7e 	bl	800598c <UART_Receive_IT>
      return;
 8005290:	e273      	b.n	800577a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80de 	beq.w	8005458 <HAL_UART_IRQHandler+0x22c>
 800529c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80d1 	beq.w	8005458 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00b      	beq.n	80052da <HAL_UART_IRQHandler+0xae>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d2:	f043 0201 	orr.w	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <HAL_UART_IRQHandler+0xd2>
 80052e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f043 0202 	orr.w	r2, r3, #2
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_UART_IRQHandler+0xf6>
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531a:	f043 0204 	orr.w	r2, r3, #4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <HAL_UART_IRQHandler+0x126>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	f043 0208 	orr.w	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 820a 	beq.w	8005770 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_UART_IRQHandler+0x14e>
 8005368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fb09 	bl	800598c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005384:	2b40      	cmp	r3, #64	@ 0x40
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_UART_IRQHandler+0x17a>
 800539e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d04f      	beq.n	8005446 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fa14 	bl	80057d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b6:	2b40      	cmp	r3, #64	@ 0x40
 80053b8:	d141      	bne.n	800543e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3314      	adds	r3, #20
 80053e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1d9      	bne.n	80053ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d013      	beq.n	8005436 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	4a8a      	ldr	r2, [pc, #552]	@ (800563c <HAL_UART_IRQHandler+0x410>)
 8005414:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd f98b 	bl	8002736 <HAL_DMA_Abort_IT>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d016      	beq.n	8005454 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	e00e      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f9b6 	bl	80057a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	e00a      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f9b2 	bl	80057a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	e006      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f9ae 	bl	80057a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005452:	e18d      	b.n	8005770 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	bf00      	nop
    return;
 8005456:	e18b      	b.n	8005770 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545c:	2b01      	cmp	r3, #1
 800545e:	f040 8167 	bne.w	8005730 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8160 	beq.w	8005730 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8159 	beq.w	8005730 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	f040 80ce 	bne.w	8005640 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80a9 	beq.w	800560c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054c2:	429a      	cmp	r2, r3
 80054c4:	f080 80a2 	bcs.w	800560c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054da:	f000 8088 	beq.w	80055ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	330c      	adds	r3, #12
 80054e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800550a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005516:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1d9      	bne.n	80054de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800553a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3314      	adds	r3, #20
 800554a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800554e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005552:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005556:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e1      	bne.n	800552a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3314      	adds	r3, #20
 800556c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800557c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3314      	adds	r3, #20
 8005586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800558a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800558c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005590:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e3      	bne.n	8005566 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055be:	f023 0310 	bic.w	r3, r3, #16
 80055c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e3      	bne.n	80055ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fd f834 	bl	8002656 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	b29b      	uxth	r3, r3
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f8d9 	bl	80057bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800560a:	e0b3      	b.n	8005774 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005610:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005614:	429a      	cmp	r2, r3
 8005616:	f040 80ad 	bne.w	8005774 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005624:	f040 80a6 	bne.w	8005774 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f8c1 	bl	80057bc <HAL_UARTEx_RxEventCallback>
      return;
 800563a:	e09b      	b.n	8005774 <HAL_UART_IRQHandler+0x548>
 800563c:	0800589b 	.word	0x0800589b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005648:	b29b      	uxth	r3, r3
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 808e 	beq.w	8005778 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800565c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8089 	beq.w	8005778 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800567c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800568a:	647a      	str	r2, [r7, #68]	@ 0x44
 800568c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005690:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e3      	bne.n	8005666 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	623b      	str	r3, [r7, #32]
   return(result);
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80056c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e3      	bne.n	800569e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0310 	bic.w	r3, r3, #16
 80056fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005708:	61fa      	str	r2, [r7, #28]
 800570a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	69b9      	ldr	r1, [r7, #24]
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	617b      	str	r3, [r7, #20]
   return(result);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e3      	bne.n	80056e4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f847 	bl	80057bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800572e:	e023      	b.n	8005778 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <HAL_UART_IRQHandler+0x524>
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f8b7 	bl	80058bc <UART_Transmit_IT>
    return;
 800574e:	e014      	b.n	800577a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00e      	beq.n	800577a <HAL_UART_IRQHandler+0x54e>
 800575c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f8f7 	bl	800595c <UART_EndTransmit_IT>
    return;
 800576e:	e004      	b.n	800577a <HAL_UART_IRQHandler+0x54e>
    return;
 8005770:	bf00      	nop
 8005772:	e002      	b.n	800577a <HAL_UART_IRQHandler+0x54e>
      return;
 8005774:	bf00      	nop
 8005776:	e000      	b.n	800577a <HAL_UART_IRQHandler+0x54e>
      return;
 8005778:	bf00      	nop
  }
}
 800577a:	37e8      	adds	r7, #232	@ 0xe8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b095      	sub	sp, #84	@ 0x54
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330c      	adds	r3, #12
 80057fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80057fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005802:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800580a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e5      	bne.n	80057dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3314      	adds	r3, #20
 800582e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005830:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005832:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e5      	bne.n	8005810 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005848:	2b01      	cmp	r3, #1
 800584a:	d119      	bne.n	8005880 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	60bb      	str	r3, [r7, #8]
   return(result);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f023 0310 	bic.w	r3, r3, #16
 8005862:	647b      	str	r3, [r7, #68]	@ 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800586c:	61ba      	str	r2, [r7, #24]
 800586e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6979      	ldr	r1, [r7, #20]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	613b      	str	r3, [r7, #16]
   return(result);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800588e:	bf00      	nop
 8005890:	3754      	adds	r7, #84	@ 0x54
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7ff ff7a 	bl	80057a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b21      	cmp	r3, #33	@ 0x21
 80058ce:	d13e      	bne.n	800594e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d8:	d114      	bne.n	8005904 <UART_Transmit_IT+0x48>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d110      	bne.n	8005904 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	1c9a      	adds	r2, r3, #2
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	621a      	str	r2, [r3, #32]
 8005902:	e008      	b.n	8005916 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	1c59      	adds	r1, r3, #1
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6211      	str	r1, [r2, #32]
 800590e:	781a      	ldrb	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29b      	uxth	r3, r3
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4619      	mov	r1, r3
 8005924:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10f      	bne.n	800594a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005938:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005948:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	e000      	b.n	8005950 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800594e:	2302      	movs	r3, #2
  }
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005972:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff feff 	bl	8005780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08c      	sub	sp, #48	@ 0x30
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005994:	2300      	movs	r3, #0
 8005996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005998:	2300      	movs	r3, #0
 800599a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b22      	cmp	r3, #34	@ 0x22
 80059a6:	f040 80aa 	bne.w	8005afe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b2:	d115      	bne.n	80059e0 <UART_Receive_IT+0x54>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d111      	bne.n	80059e0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d8:	1c9a      	adds	r2, r3, #2
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80059de:	e024      	b.n	8005a2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ee:	d007      	beq.n	8005a00 <UART_Receive_IT+0x74>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <UART_Receive_IT+0x82>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e008      	b.n	8005a20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4619      	mov	r1, r3
 8005a38:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d15d      	bne.n	8005afa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0220 	bic.w	r2, r2, #32
 8005a4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d135      	bne.n	8005af0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	613b      	str	r3, [r7, #16]
   return(result);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f023 0310 	bic.w	r3, r3, #16
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aaa:	623a      	str	r2, [r7, #32]
 8005aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	69f9      	ldr	r1, [r7, #28]
 8005ab0:	6a3a      	ldr	r2, [r7, #32]
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e5      	bne.n	8005a8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d10a      	bne.n	8005ae2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff fe67 	bl	80057bc <HAL_UARTEx_RxEventCallback>
 8005aee:	e002      	b.n	8005af6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fe4f 	bl	8005794 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	e002      	b.n	8005b00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005afe:	2302      	movs	r3, #2
  }
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3730      	adds	r7, #48	@ 0x30
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b0c:	b0c0      	sub	sp, #256	@ 0x100
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	68d9      	ldr	r1, [r3, #12]
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	ea40 0301 	orr.w	r3, r0, r1
 8005b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b60:	f021 010c 	bic.w	r1, r1, #12
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b82:	6999      	ldr	r1, [r3, #24]
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	ea40 0301 	orr.w	r3, r0, r1
 8005b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b8f      	ldr	r3, [pc, #572]	@ (8005dd4 <UART_SetConfig+0x2cc>)
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d005      	beq.n	8005ba8 <UART_SetConfig+0xa0>
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8005dd8 <UART_SetConfig+0x2d0>)
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d104      	bne.n	8005bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ba8:	f7fe fe8c 	bl	80048c4 <HAL_RCC_GetPCLK2Freq>
 8005bac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005bb0:	e003      	b.n	8005bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bb2:	f7fe fe73 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 8005bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bc4:	f040 810c 	bne.w	8005de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bda:	4622      	mov	r2, r4
 8005bdc:	462b      	mov	r3, r5
 8005bde:	1891      	adds	r1, r2, r2
 8005be0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005be2:	415b      	adcs	r3, r3
 8005be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bea:	4621      	mov	r1, r4
 8005bec:	eb12 0801 	adds.w	r8, r2, r1
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	eb43 0901 	adc.w	r9, r3, r1
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c0a:	4690      	mov	r8, r2
 8005c0c:	4699      	mov	r9, r3
 8005c0e:	4623      	mov	r3, r4
 8005c10:	eb18 0303 	adds.w	r3, r8, r3
 8005c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c18:	462b      	mov	r3, r5
 8005c1a:	eb49 0303 	adc.w	r3, r9, r3
 8005c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c36:	460b      	mov	r3, r1
 8005c38:	18db      	adds	r3, r3, r3
 8005c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	eb42 0303 	adc.w	r3, r2, r3
 8005c42:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c4c:	f7fb f81c 	bl	8000c88 <__aeabi_uldivmod>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4b61      	ldr	r3, [pc, #388]	@ (8005ddc <UART_SetConfig+0x2d4>)
 8005c56:	fba3 2302 	umull	r2, r3, r3, r2
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	011c      	lsls	r4, r3, #4
 8005c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c70:	4642      	mov	r2, r8
 8005c72:	464b      	mov	r3, r9
 8005c74:	1891      	adds	r1, r2, r2
 8005c76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c78:	415b      	adcs	r3, r3
 8005c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c80:	4641      	mov	r1, r8
 8005c82:	eb12 0a01 	adds.w	sl, r2, r1
 8005c86:	4649      	mov	r1, r9
 8005c88:	eb43 0b01 	adc.w	fp, r3, r1
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ca0:	4692      	mov	sl, r2
 8005ca2:	469b      	mov	fp, r3
 8005ca4:	4643      	mov	r3, r8
 8005ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8005caa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8005cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	18db      	adds	r3, r3, r3
 8005cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	eb42 0303 	adc.w	r3, r2, r3
 8005cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ce2:	f7fa ffd1 	bl	8000c88 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4611      	mov	r1, r2
 8005cec:	4b3b      	ldr	r3, [pc, #236]	@ (8005ddc <UART_SetConfig+0x2d4>)
 8005cee:	fba3 2301 	umull	r2, r3, r3, r1
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2264      	movs	r2, #100	@ 0x64
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	1acb      	subs	r3, r1, r3
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d02:	4b36      	ldr	r3, [pc, #216]	@ (8005ddc <UART_SetConfig+0x2d4>)
 8005d04:	fba3 2302 	umull	r2, r3, r3, r2
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d10:	441c      	add	r4, r3
 8005d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	1891      	adds	r1, r2, r2
 8005d2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d2c:	415b      	adcs	r3, r3
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d34:	4641      	mov	r1, r8
 8005d36:	1851      	adds	r1, r2, r1
 8005d38:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	414b      	adcs	r3, r1
 8005d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d4c:	4659      	mov	r1, fp
 8005d4e:	00cb      	lsls	r3, r1, #3
 8005d50:	4651      	mov	r1, sl
 8005d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d56:	4651      	mov	r1, sl
 8005d58:	00ca      	lsls	r2, r1, #3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4642      	mov	r2, r8
 8005d62:	189b      	adds	r3, r3, r2
 8005d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d68:	464b      	mov	r3, r9
 8005d6a:	460a      	mov	r2, r1
 8005d6c:	eb42 0303 	adc.w	r3, r2, r3
 8005d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d88:	460b      	mov	r3, r1
 8005d8a:	18db      	adds	r3, r3, r3
 8005d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d8e:	4613      	mov	r3, r2
 8005d90:	eb42 0303 	adc.w	r3, r2, r3
 8005d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d9e:	f7fa ff73 	bl	8000c88 <__aeabi_uldivmod>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <UART_SetConfig+0x2d4>)
 8005da8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	2164      	movs	r1, #100	@ 0x64
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	3332      	adds	r3, #50	@ 0x32
 8005dba:	4a08      	ldr	r2, [pc, #32]	@ (8005ddc <UART_SetConfig+0x2d4>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	f003 0207 	and.w	r2, r3, #7
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4422      	add	r2, r4
 8005dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dd0:	e106      	b.n	8005fe0 <UART_SetConfig+0x4d8>
 8005dd2:	bf00      	nop
 8005dd4:	40011000 	.word	0x40011000
 8005dd8:	40011400 	.word	0x40011400
 8005ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005df2:	4642      	mov	r2, r8
 8005df4:	464b      	mov	r3, r9
 8005df6:	1891      	adds	r1, r2, r2
 8005df8:	6239      	str	r1, [r7, #32]
 8005dfa:	415b      	adcs	r3, r3
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e02:	4641      	mov	r1, r8
 8005e04:	1854      	adds	r4, r2, r1
 8005e06:	4649      	mov	r1, r9
 8005e08:	eb43 0501 	adc.w	r5, r3, r1
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	00eb      	lsls	r3, r5, #3
 8005e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e1a:	00e2      	lsls	r2, r4, #3
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	461d      	mov	r5, r3
 8005e20:	4643      	mov	r3, r8
 8005e22:	18e3      	adds	r3, r4, r3
 8005e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e28:	464b      	mov	r3, r9
 8005e2a:	eb45 0303 	adc.w	r3, r5, r3
 8005e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e4e:	4629      	mov	r1, r5
 8005e50:	008b      	lsls	r3, r1, #2
 8005e52:	4621      	mov	r1, r4
 8005e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e58:	4621      	mov	r1, r4
 8005e5a:	008a      	lsls	r2, r1, #2
 8005e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e60:	f7fa ff12 	bl	8000c88 <__aeabi_uldivmod>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4b60      	ldr	r3, [pc, #384]	@ (8005fec <UART_SetConfig+0x4e4>)
 8005e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	011c      	lsls	r4, r3, #4
 8005e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	1891      	adds	r1, r2, r2
 8005e8a:	61b9      	str	r1, [r7, #24]
 8005e8c:	415b      	adcs	r3, r3
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e94:	4641      	mov	r1, r8
 8005e96:	1851      	adds	r1, r2, r1
 8005e98:	6139      	str	r1, [r7, #16]
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	414b      	adcs	r3, r1
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005eac:	4659      	mov	r1, fp
 8005eae:	00cb      	lsls	r3, r1, #3
 8005eb0:	4651      	mov	r1, sl
 8005eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eb6:	4651      	mov	r1, sl
 8005eb8:	00ca      	lsls	r2, r1, #3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	189b      	adds	r3, r3, r2
 8005ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ec8:	464b      	mov	r3, r9
 8005eca:	460a      	mov	r2, r1
 8005ecc:	eb42 0303 	adc.w	r3, r2, r3
 8005ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ede:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005eec:	4649      	mov	r1, r9
 8005eee:	008b      	lsls	r3, r1, #2
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	008a      	lsls	r2, r1, #2
 8005efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005efe:	f7fa fec3 	bl	8000c88 <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	4b38      	ldr	r3, [pc, #224]	@ (8005fec <UART_SetConfig+0x4e4>)
 8005f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	2264      	movs	r2, #100	@ 0x64
 8005f12:	fb02 f303 	mul.w	r3, r2, r3
 8005f16:	1acb      	subs	r3, r1, r3
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	3332      	adds	r3, #50	@ 0x32
 8005f1c:	4a33      	ldr	r2, [pc, #204]	@ (8005fec <UART_SetConfig+0x4e4>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f28:	441c      	add	r4, r3
 8005f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f2e:	2200      	movs	r2, #0
 8005f30:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f32:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f38:	4642      	mov	r2, r8
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	1891      	adds	r1, r2, r2
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	415b      	adcs	r3, r3
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f48:	4641      	mov	r1, r8
 8005f4a:	1851      	adds	r1, r2, r1
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	4649      	mov	r1, r9
 8005f50:	414b      	adcs	r3, r1
 8005f52:	607b      	str	r3, [r7, #4]
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f60:	4659      	mov	r1, fp
 8005f62:	00cb      	lsls	r3, r1, #3
 8005f64:	4651      	mov	r1, sl
 8005f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f6a:	4651      	mov	r1, sl
 8005f6c:	00ca      	lsls	r2, r1, #3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	4603      	mov	r3, r0
 8005f74:	4642      	mov	r2, r8
 8005f76:	189b      	adds	r3, r3, r2
 8005f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	460a      	mov	r2, r1
 8005f7e:	eb42 0303 	adc.w	r3, r2, r3
 8005f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	008b      	lsls	r3, r1, #2
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fa6:	4641      	mov	r1, r8
 8005fa8:	008a      	lsls	r2, r1, #2
 8005faa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fae:	f7fa fe6b 	bl	8000c88 <__aeabi_uldivmod>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <UART_SetConfig+0x4e4>)
 8005fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	2164      	movs	r1, #100	@ 0x64
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	3332      	adds	r3, #50	@ 0x32
 8005fca:	4a08      	ldr	r2, [pc, #32]	@ (8005fec <UART_SetConfig+0x4e4>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	f003 020f 	and.w	r2, r3, #15
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4422      	add	r2, r4
 8005fde:	609a      	str	r2, [r3, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fec:	51eb851f 	.word	0x51eb851f

08005ff0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	f023 0101 	bic.w	r1, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b08      	cmp	r3, #8
 8006018:	d102      	bne.n	8006020 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800601a:	2340      	movs	r3, #64	@ 0x40
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	e001      	b.n	8006024 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006030:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006036:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800603c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006042:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006048:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800604e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006054:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800605a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006060:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800607e:	4b10      	ldr	r3, [pc, #64]	@ (80060c0 <FSMC_NORSRAM_Init+0xd0>)
 8006080:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006088:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006090:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	43db      	mvns	r3, r3
 80060a0:	ea02 0103 	and.w	r1, r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4319      	orrs	r1, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	0008fb7f 	.word	0x0008fb7f

080060c4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 80060da:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 80060e2:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 80060ea:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 80060f4:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	3b02      	subs	r3, #2
 80060fc:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80060fe:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 800610a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006134:	d11d      	bne.n	8006172 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800613e:	4b13      	ldr	r3, [pc, #76]	@ (800618c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006140:	4013      	ands	r3, r2
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	6811      	ldr	r1, [r2, #0]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	6852      	ldr	r2, [r2, #4]
 800614a:	0112      	lsls	r2, r2, #4
 800614c:	4311      	orrs	r1, r2
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	6892      	ldr	r2, [r2, #8]
 8006152:	0212      	lsls	r2, r2, #8
 8006154:	4311      	orrs	r1, r2
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	6992      	ldr	r2, [r2, #24]
 800615a:	4311      	orrs	r1, r2
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	68d2      	ldr	r2, [r2, #12]
 8006160:	0412      	lsls	r2, r2, #16
 8006162:	430a      	orrs	r2, r1
 8006164:	ea43 0102 	orr.w	r1, r3, r2
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006170:	e005      	b.n	800617e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800617a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	cff00000 	.word	0xcff00000

08006190 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006190:	b084      	sub	sp, #16
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	f107 001c 	add.w	r0, r7, #28
 800619e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d123      	bne.n	80061f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80061be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d105      	bne.n	80061e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 fae8 	bl	80077bc <USB_CoreReset>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
 80061f0:	e01b      	b.n	800622a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 fadc 	bl	80077bc <USB_CoreReset>
 8006204:	4603      	mov	r3, r0
 8006206:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006208:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006214:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	639a      	str	r2, [r3, #56]	@ 0x38
 800621c:	e005      	b.n	800622a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006222:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800622a:	7fbb      	ldrb	r3, [r7, #30]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10b      	bne.n	8006248 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f043 0206 	orr.w	r2, r3, #6
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f043 0220 	orr.w	r2, r3, #32
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006254:	b004      	add	sp, #16
 8006256:	4770      	bx	lr

08006258 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d165      	bne.n	8006338 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4a41      	ldr	r2, [pc, #260]	@ (8006374 <USB_SetTurnaroundTime+0x11c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d906      	bls.n	8006282 <USB_SetTurnaroundTime+0x2a>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4a40      	ldr	r2, [pc, #256]	@ (8006378 <USB_SetTurnaroundTime+0x120>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d202      	bcs.n	8006282 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800627c:	230f      	movs	r3, #15
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	e062      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	4a3c      	ldr	r2, [pc, #240]	@ (8006378 <USB_SetTurnaroundTime+0x120>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d306      	bcc.n	8006298 <USB_SetTurnaroundTime+0x40>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4a3b      	ldr	r2, [pc, #236]	@ (800637c <USB_SetTurnaroundTime+0x124>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d202      	bcs.n	8006298 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006292:	230e      	movs	r3, #14
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	e057      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4a38      	ldr	r2, [pc, #224]	@ (800637c <USB_SetTurnaroundTime+0x124>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d306      	bcc.n	80062ae <USB_SetTurnaroundTime+0x56>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4a37      	ldr	r2, [pc, #220]	@ (8006380 <USB_SetTurnaroundTime+0x128>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d202      	bcs.n	80062ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062a8:	230d      	movs	r3, #13
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	e04c      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4a33      	ldr	r2, [pc, #204]	@ (8006380 <USB_SetTurnaroundTime+0x128>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d306      	bcc.n	80062c4 <USB_SetTurnaroundTime+0x6c>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4a32      	ldr	r2, [pc, #200]	@ (8006384 <USB_SetTurnaroundTime+0x12c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d802      	bhi.n	80062c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062be:	230c      	movs	r3, #12
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e041      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006384 <USB_SetTurnaroundTime+0x12c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d906      	bls.n	80062da <USB_SetTurnaroundTime+0x82>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006388 <USB_SetTurnaroundTime+0x130>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d802      	bhi.n	80062da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062d4:	230b      	movs	r3, #11
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e036      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006388 <USB_SetTurnaroundTime+0x130>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d906      	bls.n	80062f0 <USB_SetTurnaroundTime+0x98>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a29      	ldr	r2, [pc, #164]	@ (800638c <USB_SetTurnaroundTime+0x134>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d802      	bhi.n	80062f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062ea:	230a      	movs	r3, #10
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e02b      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4a26      	ldr	r2, [pc, #152]	@ (800638c <USB_SetTurnaroundTime+0x134>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d906      	bls.n	8006306 <USB_SetTurnaroundTime+0xae>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a25      	ldr	r2, [pc, #148]	@ (8006390 <USB_SetTurnaroundTime+0x138>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d202      	bcs.n	8006306 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006300:	2309      	movs	r3, #9
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e020      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4a21      	ldr	r2, [pc, #132]	@ (8006390 <USB_SetTurnaroundTime+0x138>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d306      	bcc.n	800631c <USB_SetTurnaroundTime+0xc4>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a20      	ldr	r2, [pc, #128]	@ (8006394 <USB_SetTurnaroundTime+0x13c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d802      	bhi.n	800631c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006316:	2308      	movs	r3, #8
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e015      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a1d      	ldr	r2, [pc, #116]	@ (8006394 <USB_SetTurnaroundTime+0x13c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d906      	bls.n	8006332 <USB_SetTurnaroundTime+0xda>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a1c      	ldr	r2, [pc, #112]	@ (8006398 <USB_SetTurnaroundTime+0x140>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d202      	bcs.n	8006332 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800632c:	2307      	movs	r3, #7
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e00a      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006332:	2306      	movs	r3, #6
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	e007      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800633e:	2309      	movs	r3, #9
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	e001      	b.n	8006348 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006344:	2309      	movs	r3, #9
 8006346:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	029b      	lsls	r3, r3, #10
 800635c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006360:	431a      	orrs	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	00d8acbf 	.word	0x00d8acbf
 8006378:	00e4e1c0 	.word	0x00e4e1c0
 800637c:	00f42400 	.word	0x00f42400
 8006380:	01067380 	.word	0x01067380
 8006384:	011a499f 	.word	0x011a499f
 8006388:	01312cff 	.word	0x01312cff
 800638c:	014ca43f 	.word	0x014ca43f
 8006390:	016e3600 	.word	0x016e3600
 8006394:	01a6ab1f 	.word	0x01a6ab1f
 8006398:	01e84800 	.word	0x01e84800

0800639c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f043 0201 	orr.w	r2, r3, #1
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f023 0201 	bic.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d115      	bne.n	800642e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800640e:	200a      	movs	r0, #10
 8006410:	f7fb fef0 	bl	80021f4 <HAL_Delay>
      ms += 10U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	330a      	adds	r3, #10
 8006418:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 f93f 	bl	800769e <USB_GetMode>
 8006420:	4603      	mov	r3, r0
 8006422:	2b01      	cmp	r3, #1
 8006424:	d01e      	beq.n	8006464 <USB_SetCurrentMode+0x84>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2bc7      	cmp	r3, #199	@ 0xc7
 800642a:	d9f0      	bls.n	800640e <USB_SetCurrentMode+0x2e>
 800642c:	e01a      	b.n	8006464 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d115      	bne.n	8006460 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006440:	200a      	movs	r0, #10
 8006442:	f7fb fed7 	bl	80021f4 <HAL_Delay>
      ms += 10U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	330a      	adds	r3, #10
 800644a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 f926 	bl	800769e <USB_GetMode>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <USB_SetCurrentMode+0x84>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2bc7      	cmp	r3, #199	@ 0xc7
 800645c:	d9f0      	bls.n	8006440 <USB_SetCurrentMode+0x60>
 800645e:	e001      	b.n	8006464 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e005      	b.n	8006470 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2bc8      	cmp	r3, #200	@ 0xc8
 8006468:	d101      	bne.n	800646e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006478:	b084      	sub	sp, #16
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	e009      	b.n	80064ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	3340      	adds	r3, #64	@ 0x40
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	2200      	movs	r2, #0
 80064a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	3301      	adds	r3, #1
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b0e      	cmp	r3, #14
 80064b0:	d9f2      	bls.n	8006498 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d11c      	bne.n	80064f4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064c8:	f043 0302 	orr.w	r3, r3, #2
 80064cc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80064f2:	e00b      	b.n	800650c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006504:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006512:	461a      	mov	r2, r3
 8006514:	2300      	movs	r3, #0
 8006516:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006518:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10d      	bne.n	800653c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006528:	2100      	movs	r1, #0
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f968 	bl	8006800 <USB_SetDevSpeed>
 8006530:	e008      	b.n	8006544 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006532:	2101      	movs	r1, #1
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f963 	bl	8006800 <USB_SetDevSpeed>
 800653a:	e003      	b.n	8006544 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800653c:	2103      	movs	r1, #3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f95e 	bl	8006800 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006544:	2110      	movs	r1, #16
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f8fa 	bl	8006740 <USB_FlushTxFifo>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f924 	bl	80067a4 <USB_FlushRxFifo>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800656c:	461a      	mov	r2, r3
 800656e:	2300      	movs	r3, #0
 8006570:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006578:	461a      	mov	r2, r3
 800657a:	2300      	movs	r3, #0
 800657c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006584:	461a      	mov	r2, r3
 8006586:	2300      	movs	r3, #0
 8006588:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800658a:	2300      	movs	r3, #0
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	e043      	b.n	8006618 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065a6:	d118      	bne.n	80065da <USB_DevInit+0x162>
    {
      if (i == 0U)
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ba:	461a      	mov	r2, r3
 80065bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	e013      	b.n	80065ec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d0:	461a      	mov	r2, r3
 80065d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	e008      	b.n	80065ec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e6:	461a      	mov	r2, r3
 80065e8:	2300      	movs	r3, #0
 80065ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f8:	461a      	mov	r2, r3
 80065fa:	2300      	movs	r3, #0
 80065fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660a:	461a      	mov	r2, r3
 800660c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006610:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3301      	adds	r3, #1
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800661c:	461a      	mov	r2, r3
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	4293      	cmp	r3, r2
 8006622:	d3b5      	bcc.n	8006590 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	e043      	b.n	80066b2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800663c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006640:	d118      	bne.n	8006674 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006654:	461a      	mov	r2, r3
 8006656:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	e013      	b.n	8006686 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666a:	461a      	mov	r2, r3
 800666c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	e008      	b.n	8006686 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006680:	461a      	mov	r2, r3
 8006682:	2300      	movs	r3, #0
 8006684:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006692:	461a      	mov	r2, r3
 8006694:	2300      	movs	r3, #0
 8006696:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a4:	461a      	mov	r2, r3
 80066a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	3301      	adds	r3, #1
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066b6:	461a      	mov	r2, r3
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d3b5      	bcc.n	800662a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80066de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d105      	bne.n	80066f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	f043 0210 	orr.w	r2, r3, #16
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699a      	ldr	r2, [r3, #24]
 80066f8:	4b10      	ldr	r3, [pc, #64]	@ (800673c <USB_DevInit+0x2c4>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006700:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f043 0208 	orr.w	r2, r3, #8
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006714:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006718:	2b01      	cmp	r3, #1
 800671a:	d107      	bne.n	800672c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006724:	f043 0304 	orr.w	r3, r3, #4
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800672c:	7dfb      	ldrb	r3, [r7, #23]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006738:	b004      	add	sp, #16
 800673a:	4770      	bx	lr
 800673c:	803c3800 	.word	0x803c3800

08006740 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800675a:	d901      	bls.n	8006760 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e01b      	b.n	8006798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	daf2      	bge.n	800674e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	019b      	lsls	r3, r3, #6
 8006770:	f043 0220 	orr.w	r2, r3, #32
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006784:	d901      	bls.n	800678a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e006      	b.n	8006798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b20      	cmp	r3, #32
 8006794:	d0f0      	beq.n	8006778 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067bc:	d901      	bls.n	80067c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e018      	b.n	80067f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	daf2      	bge.n	80067b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2210      	movs	r2, #16
 80067d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067e0:	d901      	bls.n	80067e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e006      	b.n	80067f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0310 	and.w	r3, r3, #16
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d0f0      	beq.n	80067d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006820:	4313      	orrs	r3, r2
 8006822:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006832:	b480      	push	{r7}
 8006834:	b087      	sub	sp, #28
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 0306 	and.w	r3, r3, #6
 800684a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d102      	bne.n	8006858 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
 8006856:	e00a      	b.n	800686e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d002      	beq.n	8006864 <USB_GetDevSpeed+0x32>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b06      	cmp	r3, #6
 8006862:	d102      	bne.n	800686a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006864:	2302      	movs	r3, #2
 8006866:	75fb      	strb	r3, [r7, #23]
 8006868:	e001      	b.n	800686e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800686a:	230f      	movs	r3, #15
 800686c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006870:	4618      	mov	r0, r3
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d13a      	bne.n	800690e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800689e:	69da      	ldr	r2, [r3, #28]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	2101      	movs	r1, #1
 80068aa:	fa01 f303 	lsl.w	r3, r1, r3
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068b6:	4313      	orrs	r3, r2
 80068b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d155      	bne.n	800697c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	791b      	ldrb	r3, [r3, #4]
 80068ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	059b      	lsls	r3, r3, #22
 80068f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068f4:	4313      	orrs	r3, r2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	e036      	b.n	800697c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006914:	69da      	ldr	r2, [r3, #28]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	2101      	movs	r1, #1
 8006920:	fa01 f303 	lsl.w	r3, r1, r3
 8006924:	041b      	lsls	r3, r3, #16
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800692c:	4313      	orrs	r3, r2
 800692e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d11a      	bne.n	800697c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	791b      	ldrb	r3, [r3, #4]
 8006960:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006962:	430b      	orrs	r3, r1
 8006964:	4313      	orrs	r3, r2
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	0151      	lsls	r1, r2, #5
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	440a      	add	r2, r1
 800696e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800697a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d161      	bne.n	8006a6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069be:	d11f      	bne.n	8006a00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	0151      	lsls	r1, r2, #5
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	440a      	add	r2, r1
 80069d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	0151      	lsls	r1, r2, #5
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	440a      	add	r2, r1
 80069f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	f003 030f 	and.w	r3, r3, #15
 8006a10:	2101      	movs	r1, #1
 8006a12:	fa01 f303 	lsl.w	r3, r1, r3
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a20:	4013      	ands	r3, r2
 8006a22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	2101      	movs	r1, #1
 8006a36:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	68f9      	ldr	r1, [r7, #12]
 8006a40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a44:	4013      	ands	r3, r2
 8006a46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	0159      	lsls	r1, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	440b      	add	r3, r1
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a62:	4619      	mov	r1, r3
 8006a64:	4b35      	ldr	r3, [pc, #212]	@ (8006b3c <USB_DeactivateEndpoint+0x1b0>)
 8006a66:	4013      	ands	r3, r2
 8006a68:	600b      	str	r3, [r1, #0]
 8006a6a:	e060      	b.n	8006b2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a82:	d11f      	bne.n	8006ac4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	0151      	lsls	r1, r2, #5
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	440a      	add	r2, r1
 8006a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006aa2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006abe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	43db      	mvns	r3, r3
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	2101      	movs	r1, #1
 8006afa:	fa01 f303 	lsl.w	r3, r1, r3
 8006afe:	041b      	lsls	r3, r3, #16
 8006b00:	43db      	mvns	r3, r3
 8006b02:	68f9      	ldr	r1, [r7, #12]
 8006b04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b08:	4013      	ands	r3, r2
 8006b0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	0159      	lsls	r1, r3, #5
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	440b      	add	r3, r1
 8006b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b26:	4619      	mov	r1, r3
 8006b28:	4b05      	ldr	r3, [pc, #20]	@ (8006b40 <USB_DeactivateEndpoint+0x1b4>)
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	ec337800 	.word	0xec337800
 8006b40:	eff37800 	.word	0xeff37800

08006b44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	@ 0x28
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	785b      	ldrb	r3, [r3, #1]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	f040 817f 	bne.w	8006e64 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d132      	bne.n	8006bd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	0151      	lsls	r1, r2, #5
 8006b80:	69fa      	ldr	r2, [r7, #28]
 8006b82:	440a      	add	r2, r1
 8006b84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b88:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b8c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	69fa      	ldr	r2, [r7, #28]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bcc:	0cdb      	lsrs	r3, r3, #19
 8006bce:	04db      	lsls	r3, r3, #19
 8006bd0:	6113      	str	r3, [r2, #16]
 8006bd2:	e097      	b.n	8006d04 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bee:	0cdb      	lsrs	r3, r3, #19
 8006bf0:	04db      	lsls	r3, r3, #19
 8006bf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c0e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c12:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c16:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d11a      	bne.n	8006c54 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d903      	bls.n	8006c32 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c50:	6113      	str	r3, [r2, #16]
 8006c52:	e044      	b.n	8006cde <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	1e5a      	subs	r2, r3, #1
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	8afb      	ldrh	r3, [r7, #22]
 8006c7a:	04d9      	lsls	r1, r3, #19
 8006c7c:	4ba4      	ldr	r3, [pc, #656]	@ (8006f10 <USB_EPStartXfer+0x3cc>)
 8006c7e:	400b      	ands	r3, r1
 8006c80:	69b9      	ldr	r1, [r7, #24]
 8006c82:	0148      	lsls	r0, r1, #5
 8006c84:	69f9      	ldr	r1, [r7, #28]
 8006c86:	4401      	add	r1, r0
 8006c88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	791b      	ldrb	r3, [r3, #4]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d122      	bne.n	8006cde <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	69fa      	ldr	r2, [r7, #28]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006cb6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc4:	691a      	ldr	r2, [r3, #16]
 8006cc6:	8afb      	ldrh	r3, [r7, #22]
 8006cc8:	075b      	lsls	r3, r3, #29
 8006cca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006cce:	69b9      	ldr	r1, [r7, #24]
 8006cd0:	0148      	lsls	r0, r1, #5
 8006cd2:	69f9      	ldr	r1, [r7, #28]
 8006cd4:	4401      	add	r1, r0
 8006cd6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf4:	69b9      	ldr	r1, [r7, #24]
 8006cf6:	0148      	lsls	r0, r1, #5
 8006cf8:	69f9      	ldr	r1, [r7, #28]
 8006cfa:	4401      	add	r1, r0
 8006cfc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d00:	4313      	orrs	r3, r2
 8006d02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d14b      	bne.n	8006da2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	791b      	ldrb	r3, [r3, #4]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d128      	bne.n	8006d80 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d110      	bne.n	8006d60 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	0151      	lsls	r1, r2, #5
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	440a      	add	r2, r1
 8006d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e00f      	b.n	8006d80 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d7e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	0151      	lsls	r1, r2, #5
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	440a      	add	r2, r1
 8006d96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	e166      	b.n	8007070 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dbc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006dc0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	791b      	ldrb	r3, [r3, #4]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d015      	beq.n	8006df6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 814e 	beq.w	8007070 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	2101      	movs	r1, #1
 8006de6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dea:	69f9      	ldr	r1, [r7, #28]
 8006dec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006df0:	4313      	orrs	r3, r2
 8006df2:	634b      	str	r3, [r1, #52]	@ 0x34
 8006df4:	e13c      	b.n	8007070 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d110      	bne.n	8006e28 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	0151      	lsls	r1, r2, #5
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e00f      	b.n	8006e48 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e46:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	68d9      	ldr	r1, [r3, #12]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	781a      	ldrb	r2, [r3, #0]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	b298      	uxth	r0, r3
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f9b9 	bl	80071d4 <USB_WritePacket>
 8006e62:	e105      	b.n	8007070 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e7e:	0cdb      	lsrs	r3, r3, #19
 8006e80:	04db      	lsls	r3, r3, #19
 8006e82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	0151      	lsls	r1, r2, #5
 8006e96:	69fa      	ldr	r2, [r7, #28]
 8006e98:	440a      	add	r2, r1
 8006e9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e9e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ea2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ea6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d132      	bne.n	8006f14 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006edc:	69b9      	ldr	r1, [r7, #24]
 8006ede:	0148      	lsls	r0, r1, #5
 8006ee0:	69f9      	ldr	r1, [r7, #28]
 8006ee2:	4401      	add	r1, r0
 8006ee4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f0a:	6113      	str	r3, [r2, #16]
 8006f0c:	e062      	b.n	8006fd4 <USB_EPStartXfer+0x490>
 8006f0e:	bf00      	nop
 8006f10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d123      	bne.n	8006f64 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f32:	69b9      	ldr	r1, [r7, #24]
 8006f34:	0148      	lsls	r0, r1, #5
 8006f36:	69f9      	ldr	r1, [r7, #28]
 8006f38:	4401      	add	r1, r0
 8006f3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f60:	6113      	str	r3, [r2, #16]
 8006f62:	e037      	b.n	8006fd4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	1e5a      	subs	r2, r3, #1
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f78:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	8afa      	ldrh	r2, [r7, #22]
 8006f80:	fb03 f202 	mul.w	r2, r3, r2
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	8afb      	ldrh	r3, [r7, #22]
 8006f98:	04d9      	lsls	r1, r3, #19
 8006f9a:	4b38      	ldr	r3, [pc, #224]	@ (800707c <USB_EPStartXfer+0x538>)
 8006f9c:	400b      	ands	r3, r1
 8006f9e:	69b9      	ldr	r1, [r7, #24]
 8006fa0:	0148      	lsls	r0, r1, #5
 8006fa2:	69f9      	ldr	r1, [r7, #28]
 8006fa4:	4401      	add	r1, r0
 8006fa6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006faa:	4313      	orrs	r3, r2
 8006fac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc4:	69b9      	ldr	r1, [r7, #24]
 8006fc6:	0148      	lsls	r0, r1, #5
 8006fc8:	69f9      	ldr	r1, [r7, #28]
 8006fca:	4401      	add	r1, r0
 8006fcc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d10d      	bne.n	8006ff6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d009      	beq.n	8006ff6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	68d9      	ldr	r1, [r3, #12]
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff2:	460a      	mov	r2, r1
 8006ff4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	791b      	ldrb	r3, [r3, #4]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d128      	bne.n	8007050 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800700a:	2b00      	cmp	r3, #0
 800700c:	d110      	bne.n	8007030 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007028:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	e00f      	b.n	8007050 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	440a      	add	r2, r1
 8007046:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800704a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800704e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	440a      	add	r2, r1
 8007066:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800706a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800706e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3720      	adds	r7, #32
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	1ff80000 	.word	0x1ff80000

08007080 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d14a      	bne.n	8007134 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070b6:	f040 8086 	bne.w	80071c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	7812      	ldrb	r2, [r2, #0]
 80070ce:	0151      	lsls	r1, r2, #5
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	440a      	add	r2, r1
 80070d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	7812      	ldrb	r2, [r2, #0]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007100:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800710e:	4293      	cmp	r3, r2
 8007110:	d902      	bls.n	8007118 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]
          break;
 8007116:	e056      	b.n	80071c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800712c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007130:	d0e7      	beq.n	8007102 <USB_EPStopXfer+0x82>
 8007132:	e048      	b.n	80071c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007148:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800714c:	d13b      	bne.n	80071c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	7812      	ldrb	r2, [r2, #0]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800716c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007170:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	7812      	ldrb	r2, [r2, #0]
 8007186:	0151      	lsls	r1, r2, #5
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	440a      	add	r2, r1
 800718c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007190:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007194:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d902      	bls.n	80071ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]
          break;
 80071aa:	e00c      	b.n	80071c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071c4:	d0e7      	beq.n	8007196 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b089      	sub	sp, #36	@ 0x24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	4611      	mov	r1, r2
 80071e0:	461a      	mov	r2, r3
 80071e2:	460b      	mov	r3, r1
 80071e4:	71fb      	strb	r3, [r7, #7]
 80071e6:	4613      	mov	r3, r2
 80071e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d123      	bne.n	8007242 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071fa:	88bb      	ldrh	r3, [r7, #4]
 80071fc:	3303      	adds	r3, #3
 80071fe:	089b      	lsrs	r3, r3, #2
 8007200:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007202:	2300      	movs	r3, #0
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	e018      	b.n	800723a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	031a      	lsls	r2, r3, #12
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	4413      	add	r3, r2
 8007210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007214:	461a      	mov	r2, r3
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	3301      	adds	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	3301      	adds	r3, #1
 8007226:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	3301      	adds	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	3301      	adds	r3, #1
 8007232:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	3301      	adds	r3, #1
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	429a      	cmp	r2, r3
 8007240:	d3e2      	bcc.n	8007208 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3724      	adds	r7, #36	@ 0x24
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007250:	b480      	push	{r7}
 8007252:	b08b      	sub	sp, #44	@ 0x2c
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	089b      	lsrs	r3, r3, #2
 800726a:	b29b      	uxth	r3, r3
 800726c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007276:	2300      	movs	r3, #0
 8007278:	623b      	str	r3, [r7, #32]
 800727a:	e014      	b.n	80072a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	601a      	str	r2, [r3, #0]
    pDest++;
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	3301      	adds	r3, #1
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	3301      	adds	r3, #1
 8007292:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	3301      	adds	r3, #1
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	3301      	adds	r3, #1
 800729e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	3301      	adds	r3, #1
 80072a4:	623b      	str	r3, [r7, #32]
 80072a6:	6a3a      	ldr	r2, [r7, #32]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d3e6      	bcc.n	800727c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80072ae:	8bfb      	ldrh	r3, [r7, #30]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01e      	beq.n	80072f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072be:	461a      	mov	r2, r3
 80072c0:	f107 0310 	add.w	r3, r7, #16
 80072c4:	6812      	ldr	r2, [r2, #0]
 80072c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	fa22 f303 	lsr.w	r3, r2, r3
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	701a      	strb	r2, [r3, #0]
      i++;
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	3301      	adds	r3, #1
 80072de:	623b      	str	r3, [r7, #32]
      pDest++;
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	3301      	adds	r3, #1
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80072e6:	8bfb      	ldrh	r3, [r7, #30]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072ec:	8bfb      	ldrh	r3, [r7, #30]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1ea      	bne.n	80072c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	372c      	adds	r7, #44	@ 0x2c
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d12c      	bne.n	8007376 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	db12      	blt.n	8007354 <USB_EPSetStall+0x54>
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00f      	beq.n	8007354 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	0151      	lsls	r1, r2, #5
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	440a      	add	r2, r1
 800734a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800734e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007352:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800736e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	e02b      	b.n	80073ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	db12      	blt.n	80073ae <USB_EPSetStall+0xae>
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00f      	beq.n	80073ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80073ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	785b      	ldrb	r3, [r3, #1]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d128      	bne.n	800744a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	0151      	lsls	r1, r2, #5
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	440a      	add	r2, r1
 800740e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007412:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007416:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	791b      	ldrb	r3, [r3, #4]
 800741c:	2b03      	cmp	r3, #3
 800741e:	d003      	beq.n	8007428 <USB_EPClearStall+0x4c>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	791b      	ldrb	r3, [r3, #4]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d138      	bne.n	800749a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	e027      	b.n	800749a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	0151      	lsls	r1, r2, #5
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	440a      	add	r2, r1
 8007460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007464:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007468:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	791b      	ldrb	r3, [r3, #4]
 800746e:	2b03      	cmp	r3, #3
 8007470:	d003      	beq.n	800747a <USB_EPClearStall+0x9e>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	791b      	ldrb	r3, [r3, #4]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d10f      	bne.n	800749a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	440a      	add	r2, r1
 8007490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007498:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80074ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80074dc:	68f9      	ldr	r1, [r7, #12]
 80074de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074e2:	4313      	orrs	r3, r2
 80074e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800750e:	f023 0303 	bic.w	r3, r3, #3
 8007512:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007522:	f023 0302 	bic.w	r3, r3, #2
 8007526:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007550:	f023 0303 	bic.w	r3, r3, #3
 8007554:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007564:	f043 0302 	orr.w	r3, r3, #2
 8007568:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4013      	ands	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007590:	68fb      	ldr	r3, [r7, #12]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800759e:	b480      	push	{r7}
 80075a0:	b085      	sub	sp, #20
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	4013      	ands	r3, r2
 80075c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	0c1b      	lsrs	r3, r3, #16
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b085      	sub	sp, #20
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	4013      	ands	r3, r2
 80075f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	b29b      	uxth	r3, r3
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007606:	b480      	push	{r7}
 8007608:	b085      	sub	sp, #20
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007616:	78fb      	ldrb	r3, [r7, #3]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	4013      	ands	r3, r2
 8007632:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007634:	68bb      	ldr	r3, [r7, #8]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007642:	b480      	push	{r7}
 8007644:	b087      	sub	sp, #28
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007664:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	f003 030f 	and.w	r3, r3, #15
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	fa22 f303 	lsr.w	r3, r2, r3
 8007672:	01db      	lsls	r3, r3, #7
 8007674:	b2db      	uxtb	r3, r3
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	4013      	ands	r3, r2
 800768e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007690:	68bb      	ldr	r3, [r7, #8]
}
 8007692:	4618      	mov	r0, r3
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f003 0301 	and.w	r3, r3, #1
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80076d8:	f023 0307 	bic.w	r3, r3, #7
 80076dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	460b      	mov	r3, r1
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	333c      	adds	r3, #60	@ 0x3c
 8007716:	3304      	adds	r3, #4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	4a26      	ldr	r2, [pc, #152]	@ (80077b8 <USB_EP0_OutStart+0xb8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d90a      	bls.n	800773a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007730:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007734:	d101      	bne.n	800773a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	e037      	b.n	80077aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007740:	461a      	mov	r2, r3
 8007742:	2300      	movs	r3, #0
 8007744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007754:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007768:	f043 0318 	orr.w	r3, r3, #24
 800776c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800777c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007780:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d10f      	bne.n	80077a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80077a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	4f54300a 	.word	0x4f54300a

080077bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077d4:	d901      	bls.n	80077da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e022      	b.n	8007820 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	daf2      	bge.n	80077c8 <USB_CoreReset+0xc>

  count = 10U;
 80077e2:	230a      	movs	r3, #10
 80077e4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80077e6:	e002      	b.n	80077ee <USB_CoreReset+0x32>
  {
    count--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1f9      	bne.n	80077e8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	f043 0201 	orr.w	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800780c:	d901      	bls.n	8007812 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e006      	b.n	8007820 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b01      	cmp	r3, #1
 800781c:	d0f0      	beq.n	8007800 <USB_CoreReset+0x44>

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007838:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800783c:	f002 fcbc 	bl	800a1b8 <USBD_static_malloc>
 8007840:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	32b0      	adds	r2, #176	@ 0xb0
 8007852:	2100      	movs	r1, #0
 8007854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007858:	2302      	movs	r3, #2
 800785a:	e0d4      	b.n	8007a06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800785c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007860:	2100      	movs	r1, #0
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f003 fcad 	bl	800b1c2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	32b0      	adds	r2, #176	@ 0xb0
 8007872:	68f9      	ldr	r1, [r7, #12]
 8007874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	32b0      	adds	r2, #176	@ 0xb0
 8007882:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7c1b      	ldrb	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d138      	bne.n	8007906 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007894:	4b5e      	ldr	r3, [pc, #376]	@ (8007a10 <USBD_CDC_Init+0x1e4>)
 8007896:	7819      	ldrb	r1, [r3, #0]
 8007898:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800789c:	2202      	movs	r2, #2
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f002 fb67 	bl	8009f72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078a4:	4b5a      	ldr	r3, [pc, #360]	@ (8007a10 <USBD_CDC_Init+0x1e4>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	f003 020f 	and.w	r2, r3, #15
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	440b      	add	r3, r1
 80078b8:	3323      	adds	r3, #35	@ 0x23
 80078ba:	2201      	movs	r2, #1
 80078bc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078be:	4b55      	ldr	r3, [pc, #340]	@ (8007a14 <USBD_CDC_Init+0x1e8>)
 80078c0:	7819      	ldrb	r1, [r3, #0]
 80078c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078c6:	2202      	movs	r2, #2
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f002 fb52 	bl	8009f72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078ce:	4b51      	ldr	r3, [pc, #324]	@ (8007a14 <USBD_CDC_Init+0x1e8>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	f003 020f 	and.w	r2, r3, #15
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	4613      	mov	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	440b      	add	r3, r1
 80078e2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80078e6:	2201      	movs	r2, #1
 80078e8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007a18 <USBD_CDC_Init+0x1ec>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f003 020f 	and.w	r2, r3, #15
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	440b      	add	r3, r1
 80078fe:	331c      	adds	r3, #28
 8007900:	2210      	movs	r2, #16
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	e035      	b.n	8007972 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007906:	4b42      	ldr	r3, [pc, #264]	@ (8007a10 <USBD_CDC_Init+0x1e4>)
 8007908:	7819      	ldrb	r1, [r3, #0]
 800790a:	2340      	movs	r3, #64	@ 0x40
 800790c:	2202      	movs	r2, #2
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f002 fb2f 	bl	8009f72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007914:	4b3e      	ldr	r3, [pc, #248]	@ (8007a10 <USBD_CDC_Init+0x1e4>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 020f 	and.w	r2, r3, #15
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	3323      	adds	r3, #35	@ 0x23
 800792a:	2201      	movs	r2, #1
 800792c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800792e:	4b39      	ldr	r3, [pc, #228]	@ (8007a14 <USBD_CDC_Init+0x1e8>)
 8007930:	7819      	ldrb	r1, [r3, #0]
 8007932:	2340      	movs	r3, #64	@ 0x40
 8007934:	2202      	movs	r2, #2
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f002 fb1b 	bl	8009f72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800793c:	4b35      	ldr	r3, [pc, #212]	@ (8007a14 <USBD_CDC_Init+0x1e8>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	f003 020f 	and.w	r2, r3, #15
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007954:	2201      	movs	r2, #1
 8007956:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007958:	4b2f      	ldr	r3, [pc, #188]	@ (8007a18 <USBD_CDC_Init+0x1ec>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 020f 	and.w	r2, r3, #15
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	331c      	adds	r3, #28
 800796e:	2210      	movs	r2, #16
 8007970:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007972:	4b29      	ldr	r3, [pc, #164]	@ (8007a18 <USBD_CDC_Init+0x1ec>)
 8007974:	7819      	ldrb	r1, [r3, #0]
 8007976:	2308      	movs	r3, #8
 8007978:	2203      	movs	r2, #3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f002 faf9 	bl	8009f72 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007980:	4b25      	ldr	r3, [pc, #148]	@ (8007a18 <USBD_CDC_Init+0x1ec>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	f003 020f 	and.w	r2, r3, #15
 8007988:	6879      	ldr	r1, [r7, #4]
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	440b      	add	r3, r1
 8007994:	3323      	adds	r3, #35	@ 0x23
 8007996:	2201      	movs	r2, #1
 8007998:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	33b0      	adds	r3, #176	@ 0xb0
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80079d0:	2302      	movs	r3, #2
 80079d2:	e018      	b.n	8007a06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	7c1b      	ldrb	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a14 <USBD_CDC_Init+0x1e8>)
 80079de:	7819      	ldrb	r1, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f002 fbb0 	bl	800a150 <USBD_LL_PrepareReceive>
 80079f0:	e008      	b.n	8007a04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079f2:	4b08      	ldr	r3, [pc, #32]	@ (8007a14 <USBD_CDC_Init+0x1e8>)
 80079f4:	7819      	ldrb	r1, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079fc:	2340      	movs	r3, #64	@ 0x40
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f002 fba6 	bl	800a150 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000093 	.word	0x20000093
 8007a14:	20000094 	.word	0x20000094
 8007a18:	20000095 	.word	0x20000095

08007a1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007a28:	4b3a      	ldr	r3, [pc, #232]	@ (8007b14 <USBD_CDC_DeInit+0xf8>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f002 fac5 	bl	8009fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007a34:	4b37      	ldr	r3, [pc, #220]	@ (8007b14 <USBD_CDC_DeInit+0xf8>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	f003 020f 	and.w	r2, r3, #15
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	440b      	add	r3, r1
 8007a48:	3323      	adds	r3, #35	@ 0x23
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007a4e:	4b32      	ldr	r3, [pc, #200]	@ (8007b18 <USBD_CDC_DeInit+0xfc>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f002 fab2 	bl	8009fbe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b18 <USBD_CDC_DeInit+0xfc>)
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	f003 020f 	and.w	r2, r3, #15
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a76:	4b29      	ldr	r3, [pc, #164]	@ (8007b1c <USBD_CDC_DeInit+0x100>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f002 fa9e 	bl	8009fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a82:	4b26      	ldr	r3, [pc, #152]	@ (8007b1c <USBD_CDC_DeInit+0x100>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	f003 020f 	and.w	r2, r3, #15
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	3323      	adds	r3, #35	@ 0x23
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8007b1c <USBD_CDC_DeInit+0x100>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	f003 020f 	and.w	r2, r3, #15
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	440b      	add	r3, r1
 8007ab0:	331c      	adds	r3, #28
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	32b0      	adds	r2, #176	@ 0xb0
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01f      	beq.n	8007b08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	33b0      	adds	r3, #176	@ 0xb0
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	32b0      	adds	r2, #176	@ 0xb0
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f002 fb72 	bl	800a1d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	32b0      	adds	r2, #176	@ 0xb0
 8007afa:	2100      	movs	r1, #0
 8007afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000093 	.word	0x20000093
 8007b18:	20000094 	.word	0x20000094
 8007b1c:	20000095 	.word	0x20000095

08007b20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	32b0      	adds	r2, #176	@ 0xb0
 8007b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e0bf      	b.n	8007cd0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d050      	beq.n	8007bfe <USBD_CDC_Setup+0xde>
 8007b5c:	2b20      	cmp	r3, #32
 8007b5e:	f040 80af 	bne.w	8007cc0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	88db      	ldrh	r3, [r3, #6]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d03a      	beq.n	8007be0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b25b      	sxtb	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	da1b      	bge.n	8007bac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	33b0      	adds	r3, #176	@ 0xb0
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	88d2      	ldrh	r2, [r2, #6]
 8007b90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	88db      	ldrh	r3, [r3, #6]
 8007b96:	2b07      	cmp	r3, #7
 8007b98:	bf28      	it	cs
 8007b9a:	2307      	movcs	r3, #7
 8007b9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	89fa      	ldrh	r2, [r7, #14]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fda9 	bl	80096fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007baa:	e090      	b.n	8007cce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	785a      	ldrb	r2, [r3, #1]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	88db      	ldrh	r3, [r3, #6]
 8007bba:	2b3f      	cmp	r3, #63	@ 0x3f
 8007bbc:	d803      	bhi.n	8007bc6 <USBD_CDC_Setup+0xa6>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	88db      	ldrh	r3, [r3, #6]
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	e000      	b.n	8007bc8 <USBD_CDC_Setup+0xa8>
 8007bc6:	2240      	movs	r2, #64	@ 0x40
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007bce:	6939      	ldr	r1, [r7, #16]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 fdbe 	bl	800975a <USBD_CtlPrepareRx>
      break;
 8007bde:	e076      	b.n	8007cce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	33b0      	adds	r3, #176	@ 0xb0
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	7850      	ldrb	r0, [r2, #1]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	4798      	blx	r3
      break;
 8007bfc:	e067      	b.n	8007cce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	2b0b      	cmp	r3, #11
 8007c04:	d851      	bhi.n	8007caa <USBD_CDC_Setup+0x18a>
 8007c06:	a201      	add	r2, pc, #4	@ (adr r2, 8007c0c <USBD_CDC_Setup+0xec>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c3d 	.word	0x08007c3d
 8007c10:	08007cb9 	.word	0x08007cb9
 8007c14:	08007cab 	.word	0x08007cab
 8007c18:	08007cab 	.word	0x08007cab
 8007c1c:	08007cab 	.word	0x08007cab
 8007c20:	08007cab 	.word	0x08007cab
 8007c24:	08007cab 	.word	0x08007cab
 8007c28:	08007cab 	.word	0x08007cab
 8007c2c:	08007cab 	.word	0x08007cab
 8007c30:	08007cab 	.word	0x08007cab
 8007c34:	08007c67 	.word	0x08007c67
 8007c38:	08007c91 	.word	0x08007c91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d107      	bne.n	8007c58 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c48:	f107 030a 	add.w	r3, r7, #10
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 fd53 	bl	80096fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c56:	e032      	b.n	8007cbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 fcd1 	bl	8009602 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c60:	2303      	movs	r3, #3
 8007c62:	75fb      	strb	r3, [r7, #23]
          break;
 8007c64:	e02b      	b.n	8007cbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d107      	bne.n	8007c82 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c72:	f107 030d 	add.w	r3, r7, #13
 8007c76:	2201      	movs	r2, #1
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fd3e 	bl	80096fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c80:	e01d      	b.n	8007cbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 fcbc 	bl	8009602 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c8e:	e016      	b.n	8007cbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d00f      	beq.n	8007cbc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 fcaf 	bl	8009602 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ca8:	e008      	b.n	8007cbc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 fca8 	bl	8009602 <USBD_CtlError>
          ret = USBD_FAIL;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007cb6:	e002      	b.n	8007cbe <USBD_CDC_Setup+0x19e>
          break;
 8007cb8:	bf00      	nop
 8007cba:	e008      	b.n	8007cce <USBD_CDC_Setup+0x1ae>
          break;
 8007cbc:	bf00      	nop
      }
      break;
 8007cbe:	e006      	b.n	8007cce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 fc9d 	bl	8009602 <USBD_CtlError>
      ret = USBD_FAIL;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	75fb      	strb	r3, [r7, #23]
      break;
 8007ccc:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	32b0      	adds	r2, #176	@ 0xb0
 8007cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e065      	b.n	8007dce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	32b0      	adds	r2, #176	@ 0xb0
 8007d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	f003 020f 	and.w	r2, r3, #15
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	3314      	adds	r3, #20
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d02f      	beq.n	8007d8c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	f003 020f 	and.w	r2, r3, #15
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	4613      	mov	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	3314      	adds	r3, #20
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	78fb      	ldrb	r3, [r7, #3]
 8007d44:	f003 010f 	and.w	r1, r3, #15
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	440b      	add	r3, r1
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4403      	add	r3, r0
 8007d54:	331c      	adds	r3, #28
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d5c:	fb01 f303 	mul.w	r3, r1, r3
 8007d60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d112      	bne.n	8007d8c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d66:	78fb      	ldrb	r3, [r7, #3]
 8007d68:	f003 020f 	and.w	r2, r3, #15
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	3314      	adds	r3, #20
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d7e:	78f9      	ldrb	r1, [r7, #3]
 8007d80:	2300      	movs	r3, #0
 8007d82:	2200      	movs	r2, #0
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f002 f9c2 	bl	800a10e <USBD_LL_Transmit>
 8007d8a:	e01f      	b.n	8007dcc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	33b0      	adds	r3, #176	@ 0xb0
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d010      	beq.n	8007dcc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	33b0      	adds	r3, #176	@ 0xb0
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007dc8:	78fa      	ldrb	r2, [r7, #3]
 8007dca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	32b0      	adds	r2, #176	@ 0xb0
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	32b0      	adds	r2, #176	@ 0xb0
 8007dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e01a      	b.n	8007e3e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f002 f9c0 	bl	800a192 <USBD_LL_GetRxDataSize>
 8007e12:	4602      	mov	r2, r0
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	33b0      	adds	r3, #176	@ 0xb0
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	32b0      	adds	r2, #176	@ 0xb0
 8007e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e024      	b.n	8007eb2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	33b0      	adds	r3, #176	@ 0xb0
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d019      	beq.n	8007eb0 <USBD_CDC_EP0_RxReady+0x6a>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e82:	2bff      	cmp	r3, #255	@ 0xff
 8007e84:	d014      	beq.n	8007eb0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	33b0      	adds	r3, #176	@ 0xb0
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e9e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ea6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	22ff      	movs	r2, #255	@ 0xff
 8007eac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ec4:	2182      	movs	r1, #130	@ 0x82
 8007ec6:	4818      	ldr	r0, [pc, #96]	@ (8007f28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ec8:	f000 fd62 	bl	8008990 <USBD_GetEpDesc>
 8007ecc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ece:	2101      	movs	r1, #1
 8007ed0:	4815      	ldr	r0, [pc, #84]	@ (8007f28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ed2:	f000 fd5d 	bl	8008990 <USBD_GetEpDesc>
 8007ed6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ed8:	2181      	movs	r1, #129	@ 0x81
 8007eda:	4813      	ldr	r0, [pc, #76]	@ (8007f28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007edc:	f000 fd58 	bl	8008990 <USBD_GetEpDesc>
 8007ee0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2210      	movs	r2, #16
 8007eec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d006      	beq.n	8007f02 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007efc:	711a      	strb	r2, [r3, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d006      	beq.n	8007f16 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f10:	711a      	strb	r2, [r3, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2243      	movs	r2, #67	@ 0x43
 8007f1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f1c:	4b02      	ldr	r3, [pc, #8]	@ (8007f28 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000050 	.word	0x20000050

08007f2c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f34:	2182      	movs	r1, #130	@ 0x82
 8007f36:	4818      	ldr	r0, [pc, #96]	@ (8007f98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f38:	f000 fd2a 	bl	8008990 <USBD_GetEpDesc>
 8007f3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f3e:	2101      	movs	r1, #1
 8007f40:	4815      	ldr	r0, [pc, #84]	@ (8007f98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f42:	f000 fd25 	bl	8008990 <USBD_GetEpDesc>
 8007f46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f48:	2181      	movs	r1, #129	@ 0x81
 8007f4a:	4813      	ldr	r0, [pc, #76]	@ (8007f98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f4c:	f000 fd20 	bl	8008990 <USBD_GetEpDesc>
 8007f50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2210      	movs	r2, #16
 8007f5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d006      	beq.n	8007f72 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2200      	movs	r2, #0
 8007f68:	711a      	strb	r2, [r3, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f042 0202 	orr.w	r2, r2, #2
 8007f70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d006      	beq.n	8007f86 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	711a      	strb	r2, [r3, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f042 0202 	orr.w	r2, r2, #2
 8007f84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2243      	movs	r2, #67	@ 0x43
 8007f8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f8c:	4b02      	ldr	r3, [pc, #8]	@ (8007f98 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000050 	.word	0x20000050

08007f9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007fa4:	2182      	movs	r1, #130	@ 0x82
 8007fa6:	4818      	ldr	r0, [pc, #96]	@ (8008008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fa8:	f000 fcf2 	bl	8008990 <USBD_GetEpDesc>
 8007fac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007fae:	2101      	movs	r1, #1
 8007fb0:	4815      	ldr	r0, [pc, #84]	@ (8008008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fb2:	f000 fced 	bl	8008990 <USBD_GetEpDesc>
 8007fb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fb8:	2181      	movs	r1, #129	@ 0x81
 8007fba:	4813      	ldr	r0, [pc, #76]	@ (8008008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fbc:	f000 fce8 	bl	8008990 <USBD_GetEpDesc>
 8007fc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2210      	movs	r2, #16
 8007fcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d006      	beq.n	8007fe2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fdc:	711a      	strb	r2, [r3, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d006      	beq.n	8007ff6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ff0:	711a      	strb	r2, [r3, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2243      	movs	r2, #67	@ 0x43
 8007ffa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ffc:	4b02      	ldr	r3, [pc, #8]	@ (8008008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20000050 	.word	0x20000050

0800800c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	220a      	movs	r2, #10
 8008018:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800801a:	4b03      	ldr	r3, [pc, #12]	@ (8008028 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	2000000c 	.word	0x2000000c

0800802c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800803c:	2303      	movs	r3, #3
 800803e:	e009      	b.n	8008054 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	33b0      	adds	r3, #176	@ 0xb0
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	32b0      	adds	r2, #176	@ 0xb0
 8008076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008082:	2303      	movs	r3, #3
 8008084:	e008      	b.n	8008098 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	32b0      	adds	r2, #176	@ 0xb0
 80080b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e004      	b.n	80080d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
	...

080080e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	32b0      	adds	r2, #176	@ 0xb0
 80080f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80080f8:	2301      	movs	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008102:	2303      	movs	r3, #3
 8008104:	e025      	b.n	8008152 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800810c:	2b00      	cmp	r3, #0
 800810e:	d11f      	bne.n	8008150 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2201      	movs	r2, #1
 8008114:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008118:	4b10      	ldr	r3, [pc, #64]	@ (800815c <USBD_CDC_TransmitPacket+0x7c>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 020f 	and.w	r2, r3, #15
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4403      	add	r3, r0
 8008132:	3314      	adds	r3, #20
 8008134:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008136:	4b09      	ldr	r3, [pc, #36]	@ (800815c <USBD_CDC_TransmitPacket+0x7c>)
 8008138:	7819      	ldrb	r1, [r3, #0]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 ffe1 	bl	800a10e <USBD_LL_Transmit>

    ret = USBD_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20000093 	.word	0x20000093

08008160 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	32b0      	adds	r2, #176	@ 0xb0
 8008172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008176:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	32b0      	adds	r2, #176	@ 0xb0
 8008182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800818a:	2303      	movs	r3, #3
 800818c:	e018      	b.n	80081c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	7c1b      	ldrb	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10a      	bne.n	80081ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008196:	4b0c      	ldr	r3, [pc, #48]	@ (80081c8 <USBD_CDC_ReceivePacket+0x68>)
 8008198:	7819      	ldrb	r1, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 ffd3 	bl	800a150 <USBD_LL_PrepareReceive>
 80081aa:	e008      	b.n	80081be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081ac:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <USBD_CDC_ReceivePacket+0x68>)
 80081ae:	7819      	ldrb	r1, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081b6:	2340      	movs	r3, #64	@ 0x40
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 ffc9 	bl	800a150 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20000094 	.word	0x20000094

080081cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e01f      	b.n	8008224 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	79fa      	ldrb	r2, [r7, #7]
 8008216:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f001 fe43 	bl	8009ea4 <USBD_LL_Init>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008240:	2303      	movs	r3, #3
 8008242:	e025      	b.n	8008290 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	32ae      	adds	r2, #174	@ 0xae
 8008256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00f      	beq.n	8008280 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	32ae      	adds	r2, #174	@ 0xae
 800826a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	f107 020e 	add.w	r2, r7, #14
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	4602      	mov	r2, r0
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fe4b 	bl	8009f3c <USBD_LL_Start>
 80082a6:	4603      	mov	r3, r0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d009      	beq.n	80082f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	78fa      	ldrb	r2, [r7, #3]
 80082ea:	4611      	mov	r1, r2
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	460b      	mov	r3, r1
 8008308:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	78fa      	ldrb	r2, [r7, #3]
 8008318:	4611      	mov	r1, r2
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008328:	7bfb      	ldrb	r3, [r7, #15]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	4618      	mov	r0, r3
 8008346:	f001 f922 	bl	800958e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008358:	461a      	mov	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008366:	f003 031f 	and.w	r3, r3, #31
 800836a:	2b02      	cmp	r3, #2
 800836c:	d01a      	beq.n	80083a4 <USBD_LL_SetupStage+0x72>
 800836e:	2b02      	cmp	r3, #2
 8008370:	d822      	bhi.n	80083b8 <USBD_LL_SetupStage+0x86>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <USBD_LL_SetupStage+0x4a>
 8008376:	2b01      	cmp	r3, #1
 8008378:	d00a      	beq.n	8008390 <USBD_LL_SetupStage+0x5e>
 800837a:	e01d      	b.n	80083b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fb77 	bl	8008a78 <USBD_StdDevReq>
 800838a:	4603      	mov	r3, r0
 800838c:	73fb      	strb	r3, [r7, #15]
      break;
 800838e:	e020      	b.n	80083d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fbdf 	bl	8008b5c <USBD_StdItfReq>
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]
      break;
 80083a2:	e016      	b.n	80083d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc41 	bl	8008c34 <USBD_StdEPReq>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73fb      	strb	r3, [r7, #15]
      break;
 80083b6:	e00c      	b.n	80083d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 fe18 	bl	8009ffc <USBD_LL_StallEP>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]
      break;
 80083d0:	bf00      	nop
  }

  return ret;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	460b      	mov	r3, r1
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80083ee:	7afb      	ldrb	r3, [r7, #11]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d177      	bne.n	80084e4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80083fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008402:	2b03      	cmp	r3, #3
 8008404:	f040 80a1 	bne.w	800854a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	8992      	ldrh	r2, [r2, #12]
 8008410:	4293      	cmp	r3, r2
 8008412:	d91c      	bls.n	800844e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	8992      	ldrh	r2, [r2, #12]
 800841c:	1a9a      	subs	r2, r3, r2
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	8992      	ldrh	r2, [r2, #12]
 800842a:	441a      	add	r2, r3
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	6919      	ldr	r1, [r3, #16]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	899b      	ldrh	r3, [r3, #12]
 8008438:	461a      	mov	r2, r3
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	4293      	cmp	r3, r2
 8008440:	bf38      	it	cc
 8008442:	4613      	movcc	r3, r2
 8008444:	461a      	mov	r2, r3
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f001 f9a8 	bl	800979c <USBD_CtlContinueRx>
 800844c:	e07d      	b.n	800854a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008454:	f003 031f 	and.w	r3, r3, #31
 8008458:	2b02      	cmp	r3, #2
 800845a:	d014      	beq.n	8008486 <USBD_LL_DataOutStage+0xaa>
 800845c:	2b02      	cmp	r3, #2
 800845e:	d81d      	bhi.n	800849c <USBD_LL_DataOutStage+0xc0>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <USBD_LL_DataOutStage+0x8e>
 8008464:	2b01      	cmp	r3, #1
 8008466:	d003      	beq.n	8008470 <USBD_LL_DataOutStage+0x94>
 8008468:	e018      	b.n	800849c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	75bb      	strb	r3, [r7, #22]
            break;
 800846e:	e018      	b.n	80084a2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008476:	b2db      	uxtb	r3, r3
 8008478:	4619      	mov	r1, r3
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 fa6e 	bl	800895c <USBD_CoreFindIF>
 8008480:	4603      	mov	r3, r0
 8008482:	75bb      	strb	r3, [r7, #22]
            break;
 8008484:	e00d      	b.n	80084a2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800848c:	b2db      	uxtb	r3, r3
 800848e:	4619      	mov	r1, r3
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 fa70 	bl	8008976 <USBD_CoreFindEP>
 8008496:	4603      	mov	r3, r0
 8008498:	75bb      	strb	r3, [r7, #22]
            break;
 800849a:	e002      	b.n	80084a2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	75bb      	strb	r3, [r7, #22]
            break;
 80084a0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80084a2:	7dbb      	ldrb	r3, [r7, #22]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d119      	bne.n	80084dc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d113      	bne.n	80084dc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80084b4:	7dba      	ldrb	r2, [r7, #22]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	32ae      	adds	r2, #174	@ 0xae
 80084ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80084c4:	7dba      	ldrb	r2, [r7, #22]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80084cc:	7dba      	ldrb	r2, [r7, #22]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	32ae      	adds	r2, #174	@ 0xae
 80084d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f001 f96e 	bl	80097be <USBD_CtlSendStatus>
 80084e2:	e032      	b.n	800854a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80084e4:	7afb      	ldrb	r3, [r7, #11]
 80084e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	4619      	mov	r1, r3
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 fa41 	bl	8008976 <USBD_CoreFindEP>
 80084f4:	4603      	mov	r3, r0
 80084f6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084f8:	7dbb      	ldrb	r3, [r7, #22]
 80084fa:	2bff      	cmp	r3, #255	@ 0xff
 80084fc:	d025      	beq.n	800854a <USBD_LL_DataOutStage+0x16e>
 80084fe:	7dbb      	ldrb	r3, [r7, #22]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d122      	bne.n	800854a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b03      	cmp	r3, #3
 800850e:	d117      	bne.n	8008540 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008510:	7dba      	ldrb	r2, [r7, #22]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	32ae      	adds	r2, #174	@ 0xae
 8008516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00f      	beq.n	8008540 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008520:	7dba      	ldrb	r2, [r7, #22]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008528:	7dba      	ldrb	r2, [r7, #22]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	32ae      	adds	r2, #174	@ 0xae
 800852e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	7afa      	ldrb	r2, [r7, #11]
 8008536:	4611      	mov	r1, r2
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	4798      	blx	r3
 800853c:	4603      	mov	r3, r0
 800853e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008540:	7dfb      	ldrb	r3, [r7, #23]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	e000      	b.n	800854c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	460b      	mov	r3, r1
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d178      	bne.n	800865a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3314      	adds	r3, #20
 800856c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008574:	2b02      	cmp	r3, #2
 8008576:	d163      	bne.n	8008640 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	8992      	ldrh	r2, [r2, #12]
 8008580:	4293      	cmp	r3, r2
 8008582:	d91c      	bls.n	80085be <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	8992      	ldrh	r2, [r2, #12]
 800858c:	1a9a      	subs	r2, r3, r2
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	8992      	ldrh	r2, [r2, #12]
 800859a:	441a      	add	r2, r3
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	6919      	ldr	r1, [r3, #16]
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	461a      	mov	r2, r3
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f001 f8c4 	bl	8009738 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085b0:	2300      	movs	r3, #0
 80085b2:	2200      	movs	r2, #0
 80085b4:	2100      	movs	r1, #0
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f001 fdca 	bl	800a150 <USBD_LL_PrepareReceive>
 80085bc:	e040      	b.n	8008640 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	899b      	ldrh	r3, [r3, #12]
 80085c2:	461a      	mov	r2, r3
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d11c      	bne.n	8008606 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d316      	bcc.n	8008606 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d20f      	bcs.n	8008606 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085e6:	2200      	movs	r2, #0
 80085e8:	2100      	movs	r1, #0
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f001 f8a4 	bl	8009738 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085f8:	2300      	movs	r3, #0
 80085fa:	2200      	movs	r2, #0
 80085fc:	2100      	movs	r1, #0
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f001 fda6 	bl	800a150 <USBD_LL_PrepareReceive>
 8008604:	e01c      	b.n	8008640 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b03      	cmp	r3, #3
 8008610:	d10f      	bne.n	8008632 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d009      	beq.n	8008632 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008632:	2180      	movs	r1, #128	@ 0x80
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f001 fce1 	bl	8009ffc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f001 f8d2 	bl	80097e4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d03a      	beq.n	80086c0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7ff fe30 	bl	80082b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008658:	e032      	b.n	80086c0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800865a:	7afb      	ldrb	r3, [r7, #11]
 800865c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008660:	b2db      	uxtb	r3, r3
 8008662:	4619      	mov	r1, r3
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 f986 	bl	8008976 <USBD_CoreFindEP>
 800866a:	4603      	mov	r3, r0
 800866c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	2bff      	cmp	r3, #255	@ 0xff
 8008672:	d025      	beq.n	80086c0 <USBD_LL_DataInStage+0x16c>
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d122      	bne.n	80086c0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b03      	cmp	r3, #3
 8008684:	d11c      	bne.n	80086c0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008686:	7dfa      	ldrb	r2, [r7, #23]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	32ae      	adds	r2, #174	@ 0xae
 800868c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d014      	beq.n	80086c0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008696:	7dfa      	ldrb	r2, [r7, #23]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800869e:	7dfa      	ldrb	r2, [r7, #23]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	32ae      	adds	r2, #174	@ 0xae
 80086a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	7afa      	ldrb	r2, [r7, #11]
 80086ac:	4611      	mov	r1, r2
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	4798      	blx	r3
 80086b2:	4603      	mov	r3, r0
 80086b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80086b6:	7dbb      	ldrb	r3, [r7, #22]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80086bc:	7dbb      	ldrb	r3, [r7, #22]
 80086be:	e000      	b.n	80086c2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d014      	beq.n	8008730 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00e      	beq.n	8008730 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	6852      	ldr	r2, [r2, #4]
 800871e:	b2d2      	uxtb	r2, r2
 8008720:	4611      	mov	r1, r2
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	4798      	blx	r3
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800872c:	2303      	movs	r3, #3
 800872e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008730:	2340      	movs	r3, #64	@ 0x40
 8008732:	2200      	movs	r2, #0
 8008734:	2100      	movs	r1, #0
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fc1b 	bl	8009f72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2240      	movs	r2, #64	@ 0x40
 8008748:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800874c:	2340      	movs	r3, #64	@ 0x40
 800874e:	2200      	movs	r2, #0
 8008750:	2180      	movs	r1, #128	@ 0x80
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fc0d 	bl	8009f72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2240      	movs	r2, #64	@ 0x40
 8008764:	841a      	strh	r2, [r3, #32]

  return ret;
 8008766:	7bfb      	ldrb	r3, [r7, #15]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	d006      	beq.n	80087b2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2204      	movs	r2, #4
 80087b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d106      	bne.n	80087ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b03      	cmp	r3, #3
 800880a:	d110      	bne.n	800882e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d005      	beq.n	800882e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32ae      	adds	r2, #174	@ 0xae
 800884e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008856:	2303      	movs	r3, #3
 8008858:	e01c      	b.n	8008894 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b03      	cmp	r3, #3
 8008864:	d115      	bne.n	8008892 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	32ae      	adds	r2, #174	@ 0xae
 8008870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00b      	beq.n	8008892 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	32ae      	adds	r2, #174	@ 0xae
 8008884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	78fa      	ldrb	r2, [r7, #3]
 800888c:	4611      	mov	r1, r2
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	32ae      	adds	r2, #174	@ 0xae
 80088b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e01c      	b.n	80088f8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d115      	bne.n	80088f6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	32ae      	adds	r2, #174	@ 0xae
 80088d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00b      	beq.n	80088f6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	32ae      	adds	r2, #174	@ 0xae
 80088e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	4611      	mov	r1, r2
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00e      	beq.n	8008952 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6852      	ldr	r2, [r2, #4]
 8008940:	b2d2      	uxtb	r2, r2
 8008942:	4611      	mov	r1, r2
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	4798      	blx	r3
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800894e:	2303      	movs	r3, #3
 8008950:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008968:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008982:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80089a4:	2300      	movs	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	885b      	ldrh	r3, [r3, #2]
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	7812      	ldrb	r2, [r2, #0]
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d91f      	bls.n	80089f6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80089bc:	e013      	b.n	80089e6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80089be:	f107 030a 	add.w	r3, r7, #10
 80089c2:	4619      	mov	r1, r3
 80089c4:	6978      	ldr	r0, [r7, #20]
 80089c6:	f000 f81b 	bl	8008a00 <USBD_GetNextDesc>
 80089ca:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	785b      	ldrb	r3, [r3, #1]
 80089d0:	2b05      	cmp	r3, #5
 80089d2:	d108      	bne.n	80089e6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	789b      	ldrb	r3, [r3, #2]
 80089dc:	78fa      	ldrb	r2, [r7, #3]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d008      	beq.n	80089f4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	885b      	ldrh	r3, [r3, #2]
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	897b      	ldrh	r3, [r7, #10]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d8e5      	bhi.n	80089be <USBD_GetEpDesc+0x2e>
 80089f2:	e000      	b.n	80089f6 <USBD_GetEpDesc+0x66>
          break;
 80089f4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80089f6:	693b      	ldr	r3, [r7, #16]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	4413      	add	r3, r2
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4413      	add	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	b21a      	sxth	r2, r3
 8008a5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	b21b      	sxth	r3, r3
 8008a66:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a68:	89fb      	ldrh	r3, [r7, #14]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
	...

08008a78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a8e:	2b40      	cmp	r3, #64	@ 0x40
 8008a90:	d005      	beq.n	8008a9e <USBD_StdDevReq+0x26>
 8008a92:	2b40      	cmp	r3, #64	@ 0x40
 8008a94:	d857      	bhi.n	8008b46 <USBD_StdDevReq+0xce>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00f      	beq.n	8008aba <USBD_StdDevReq+0x42>
 8008a9a:	2b20      	cmp	r3, #32
 8008a9c:	d153      	bne.n	8008b46 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	32ae      	adds	r2, #174	@ 0xae
 8008aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	4798      	blx	r3
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab8:	e04a      	b.n	8008b50 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	785b      	ldrb	r3, [r3, #1]
 8008abe:	2b09      	cmp	r3, #9
 8008ac0:	d83b      	bhi.n	8008b3a <USBD_StdDevReq+0xc2>
 8008ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac8 <USBD_StdDevReq+0x50>)
 8008ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac8:	08008b1d 	.word	0x08008b1d
 8008acc:	08008b31 	.word	0x08008b31
 8008ad0:	08008b3b 	.word	0x08008b3b
 8008ad4:	08008b27 	.word	0x08008b27
 8008ad8:	08008b3b 	.word	0x08008b3b
 8008adc:	08008afb 	.word	0x08008afb
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008b3b 	.word	0x08008b3b
 8008ae8:	08008b13 	.word	0x08008b13
 8008aec:	08008b05 	.word	0x08008b05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fa3e 	bl	8008f74 <USBD_GetDescriptor>
          break;
 8008af8:	e024      	b.n	8008b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fba3 	bl	8009248 <USBD_SetAddress>
          break;
 8008b02:	e01f      	b.n	8008b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fbe2 	bl	80092d0 <USBD_SetConfig>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]
          break;
 8008b10:	e018      	b.n	8008b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fc85 	bl	8009424 <USBD_GetConfig>
          break;
 8008b1a:	e013      	b.n	8008b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fcb6 	bl	8009490 <USBD_GetStatus>
          break;
 8008b24:	e00e      	b.n	8008b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fce5 	bl	80094f8 <USBD_SetFeature>
          break;
 8008b2e:	e009      	b.n	8008b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fd09 	bl	800954a <USBD_ClrFeature>
          break;
 8008b38:	e004      	b.n	8008b44 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fd60 	bl	8009602 <USBD_CtlError>
          break;
 8008b42:	bf00      	nop
      }
      break;
 8008b44:	e004      	b.n	8008b50 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fd5a 	bl	8009602 <USBD_CtlError>
      break;
 8008b4e:	bf00      	nop
  }

  return ret;
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop

08008b5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b72:	2b40      	cmp	r3, #64	@ 0x40
 8008b74:	d005      	beq.n	8008b82 <USBD_StdItfReq+0x26>
 8008b76:	2b40      	cmp	r3, #64	@ 0x40
 8008b78:	d852      	bhi.n	8008c20 <USBD_StdItfReq+0xc4>
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <USBD_StdItfReq+0x26>
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	d14e      	bne.n	8008c20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d840      	bhi.n	8008c12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	889b      	ldrh	r3, [r3, #4]
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d836      	bhi.n	8008c08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	889b      	ldrh	r3, [r3, #4]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff feda 	bl	800895c <USBD_CoreFindIF>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	2bff      	cmp	r3, #255	@ 0xff
 8008bb0:	d01d      	beq.n	8008bee <USBD_StdItfReq+0x92>
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d11a      	bne.n	8008bee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008bb8:	7bba      	ldrb	r2, [r7, #14]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	32ae      	adds	r2, #174	@ 0xae
 8008bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00f      	beq.n	8008be8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008bc8:	7bba      	ldrb	r2, [r7, #14]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008bd0:	7bba      	ldrb	r2, [r7, #14]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	32ae      	adds	r2, #174	@ 0xae
 8008bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008be6:	e004      	b.n	8008bf2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008be8:	2303      	movs	r3, #3
 8008bea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bec:	e001      	b.n	8008bf2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	88db      	ldrh	r3, [r3, #6]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d110      	bne.n	8008c1c <USBD_StdItfReq+0xc0>
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10d      	bne.n	8008c1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fddc 	bl	80097be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c06:	e009      	b.n	8008c1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fcf9 	bl	8009602 <USBD_CtlError>
          break;
 8008c10:	e004      	b.n	8008c1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fcf4 	bl	8009602 <USBD_CtlError>
          break;
 8008c1a:	e000      	b.n	8008c1e <USBD_StdItfReq+0xc2>
          break;
 8008c1c:	bf00      	nop
      }
      break;
 8008c1e:	e004      	b.n	8008c2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fced 	bl	8009602 <USBD_CtlError>
      break;
 8008c28:	bf00      	nop
  }

  return ret;
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	889b      	ldrh	r3, [r3, #4]
 8008c46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c50:	2b40      	cmp	r3, #64	@ 0x40
 8008c52:	d007      	beq.n	8008c64 <USBD_StdEPReq+0x30>
 8008c54:	2b40      	cmp	r3, #64	@ 0x40
 8008c56:	f200 8181 	bhi.w	8008f5c <USBD_StdEPReq+0x328>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d02a      	beq.n	8008cb4 <USBD_StdEPReq+0x80>
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	f040 817c 	bne.w	8008f5c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff fe84 	bl	8008976 <USBD_CoreFindEP>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c72:	7b7b      	ldrb	r3, [r7, #13]
 8008c74:	2bff      	cmp	r3, #255	@ 0xff
 8008c76:	f000 8176 	beq.w	8008f66 <USBD_StdEPReq+0x332>
 8008c7a:	7b7b      	ldrb	r3, [r7, #13]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f040 8172 	bne.w	8008f66 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008c82:	7b7a      	ldrb	r2, [r7, #13]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c8a:	7b7a      	ldrb	r2, [r7, #13]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	32ae      	adds	r2, #174	@ 0xae
 8008c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 8165 	beq.w	8008f66 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c9c:	7b7a      	ldrb	r2, [r7, #13]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	32ae      	adds	r2, #174	@ 0xae
 8008ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	4798      	blx	r3
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008cb2:	e158      	b.n	8008f66 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	785b      	ldrb	r3, [r3, #1]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d008      	beq.n	8008cce <USBD_StdEPReq+0x9a>
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	f300 8147 	bgt.w	8008f50 <USBD_StdEPReq+0x31c>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 809b 	beq.w	8008dfe <USBD_StdEPReq+0x1ca>
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d03c      	beq.n	8008d46 <USBD_StdEPReq+0x112>
 8008ccc:	e140      	b.n	8008f50 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d002      	beq.n	8008ce0 <USBD_StdEPReq+0xac>
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d016      	beq.n	8008d0c <USBD_StdEPReq+0xd8>
 8008cde:	e02c      	b.n	8008d3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00d      	beq.n	8008d02 <USBD_StdEPReq+0xce>
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	2b80      	cmp	r3, #128	@ 0x80
 8008cea:	d00a      	beq.n	8008d02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 f983 	bl	8009ffc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cf6:	2180      	movs	r1, #128	@ 0x80
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 f97f 	bl	8009ffc <USBD_LL_StallEP>
 8008cfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d00:	e020      	b.n	8008d44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fc7c 	bl	8009602 <USBD_CtlError>
              break;
 8008d0a:	e01b      	b.n	8008d44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	885b      	ldrh	r3, [r3, #2]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10e      	bne.n	8008d32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00b      	beq.n	8008d32 <USBD_StdEPReq+0xfe>
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	2b80      	cmp	r3, #128	@ 0x80
 8008d1e:	d008      	beq.n	8008d32 <USBD_StdEPReq+0xfe>
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	88db      	ldrh	r3, [r3, #6]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d104      	bne.n	8008d32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 f965 	bl	8009ffc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fd43 	bl	80097be <USBD_CtlSendStatus>

              break;
 8008d38:	e004      	b.n	8008d44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fc60 	bl	8009602 <USBD_CtlError>
              break;
 8008d42:	bf00      	nop
          }
          break;
 8008d44:	e109      	b.n	8008f5a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d002      	beq.n	8008d58 <USBD_StdEPReq+0x124>
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	d016      	beq.n	8008d84 <USBD_StdEPReq+0x150>
 8008d56:	e04b      	b.n	8008df0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00d      	beq.n	8008d7a <USBD_StdEPReq+0x146>
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	2b80      	cmp	r3, #128	@ 0x80
 8008d62:	d00a      	beq.n	8008d7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 f947 	bl	8009ffc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d6e:	2180      	movs	r1, #128	@ 0x80
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 f943 	bl	8009ffc <USBD_LL_StallEP>
 8008d76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d78:	e040      	b.n	8008dfc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fc40 	bl	8009602 <USBD_CtlError>
              break;
 8008d82:	e03b      	b.n	8008dfc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	885b      	ldrh	r3, [r3, #2]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d136      	bne.n	8008dfa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d004      	beq.n	8008da0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f001 f94d 	bl	800a03a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fd0c 	bl	80097be <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7ff fde3 	bl	8008976 <USBD_CoreFindEP>
 8008db0:	4603      	mov	r3, r0
 8008db2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008db4:	7b7b      	ldrb	r3, [r7, #13]
 8008db6:	2bff      	cmp	r3, #255	@ 0xff
 8008db8:	d01f      	beq.n	8008dfa <USBD_StdEPReq+0x1c6>
 8008dba:	7b7b      	ldrb	r3, [r7, #13]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d11c      	bne.n	8008dfa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008dc0:	7b7a      	ldrb	r2, [r7, #13]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008dc8:	7b7a      	ldrb	r2, [r7, #13]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	32ae      	adds	r2, #174	@ 0xae
 8008dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d010      	beq.n	8008dfa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008dd8:	7b7a      	ldrb	r2, [r7, #13]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	32ae      	adds	r2, #174	@ 0xae
 8008dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	4798      	blx	r3
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008dee:	e004      	b.n	8008dfa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fc05 	bl	8009602 <USBD_CtlError>
              break;
 8008df8:	e000      	b.n	8008dfc <USBD_StdEPReq+0x1c8>
              break;
 8008dfa:	bf00      	nop
          }
          break;
 8008dfc:	e0ad      	b.n	8008f5a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d002      	beq.n	8008e10 <USBD_StdEPReq+0x1dc>
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	d033      	beq.n	8008e76 <USBD_StdEPReq+0x242>
 8008e0e:	e099      	b.n	8008f44 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d007      	beq.n	8008e26 <USBD_StdEPReq+0x1f2>
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b80      	cmp	r3, #128	@ 0x80
 8008e1a:	d004      	beq.n	8008e26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fbef 	bl	8009602 <USBD_CtlError>
                break;
 8008e24:	e093      	b.n	8008f4e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	da0b      	bge.n	8008e46 <USBD_StdEPReq+0x212>
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e34:	4613      	mov	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	3310      	adds	r3, #16
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	4413      	add	r3, r2
 8008e42:	3304      	adds	r3, #4
 8008e44:	e00b      	b.n	8008e5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2200      	movs	r2, #0
 8008e64:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	330e      	adds	r3, #14
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fc44 	bl	80096fc <USBD_CtlSendData>
              break;
 8008e74:	e06b      	b.n	8008f4e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	da11      	bge.n	8008ea2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	f003 020f 	and.w	r2, r3, #15
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	3323      	adds	r3, #35	@ 0x23
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d117      	bne.n	8008ec8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fbb1 	bl	8009602 <USBD_CtlError>
                  break;
 8008ea0:	e055      	b.n	8008f4e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	f003 020f 	and.w	r2, r3, #15
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d104      	bne.n	8008ec8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fb9e 	bl	8009602 <USBD_CtlError>
                  break;
 8008ec6:	e042      	b.n	8008f4e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	da0b      	bge.n	8008ee8 <USBD_StdEPReq+0x2b4>
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	3310      	adds	r3, #16
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	e00b      	b.n	8008f00 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	3304      	adds	r3, #4
 8008f00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <USBD_StdEPReq+0x2da>
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b80      	cmp	r3, #128	@ 0x80
 8008f0c:	d103      	bne.n	8008f16 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2200      	movs	r2, #0
 8008f12:	739a      	strb	r2, [r3, #14]
 8008f14:	e00e      	b.n	8008f34 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f001 f8ac 	bl	800a078 <USBD_LL_IsStallEP>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	739a      	strb	r2, [r3, #14]
 8008f2c:	e002      	b.n	8008f34 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2200      	movs	r2, #0
 8008f32:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	330e      	adds	r3, #14
 8008f38:	2202      	movs	r2, #2
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fbdd 	bl	80096fc <USBD_CtlSendData>
              break;
 8008f42:	e004      	b.n	8008f4e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fb5b 	bl	8009602 <USBD_CtlError>
              break;
 8008f4c:	bf00      	nop
          }
          break;
 8008f4e:	e004      	b.n	8008f5a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fb55 	bl	8009602 <USBD_CtlError>
          break;
 8008f58:	bf00      	nop
      }
      break;
 8008f5a:	e005      	b.n	8008f68 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fb4f 	bl	8009602 <USBD_CtlError>
      break;
 8008f64:	e000      	b.n	8008f68 <USBD_StdEPReq+0x334>
      break;
 8008f66:	bf00      	nop
  }

  return ret;
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	885b      	ldrh	r3, [r3, #2]
 8008f8e:	0a1b      	lsrs	r3, r3, #8
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	3b01      	subs	r3, #1
 8008f94:	2b06      	cmp	r3, #6
 8008f96:	f200 8128 	bhi.w	80091ea <USBD_GetDescriptor+0x276>
 8008f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa0 <USBD_GetDescriptor+0x2c>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08008fbd 	.word	0x08008fbd
 8008fa4:	08008fd5 	.word	0x08008fd5
 8008fa8:	08009015 	.word	0x08009015
 8008fac:	080091eb 	.word	0x080091eb
 8008fb0:	080091eb 	.word	0x080091eb
 8008fb4:	0800918b 	.word	0x0800918b
 8008fb8:	080091b7 	.word	0x080091b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	7c12      	ldrb	r2, [r2, #16]
 8008fc8:	f107 0108 	add.w	r1, r7, #8
 8008fcc:	4610      	mov	r0, r2
 8008fce:	4798      	blx	r3
 8008fd0:	60f8      	str	r0, [r7, #12]
      break;
 8008fd2:	e112      	b.n	80091fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	7c1b      	ldrb	r3, [r3, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10d      	bne.n	8008ff8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	f107 0208 	add.w	r2, r7, #8
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4798      	blx	r3
 8008fec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ff6:	e100      	b.n	80091fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009000:	f107 0208 	add.w	r2, r7, #8
 8009004:	4610      	mov	r0, r2
 8009006:	4798      	blx	r3
 8009008:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3301      	adds	r3, #1
 800900e:	2202      	movs	r2, #2
 8009010:	701a      	strb	r2, [r3, #0]
      break;
 8009012:	e0f2      	b.n	80091fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	885b      	ldrh	r3, [r3, #2]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b05      	cmp	r3, #5
 800901c:	f200 80ac 	bhi.w	8009178 <USBD_GetDescriptor+0x204>
 8009020:	a201      	add	r2, pc, #4	@ (adr r2, 8009028 <USBD_GetDescriptor+0xb4>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	08009041 	.word	0x08009041
 800902c:	08009075 	.word	0x08009075
 8009030:	080090a9 	.word	0x080090a9
 8009034:	080090dd 	.word	0x080090dd
 8009038:	08009111 	.word	0x08009111
 800903c:	08009145 	.word	0x08009145
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	7c12      	ldrb	r2, [r2, #16]
 8009058:	f107 0108 	add.w	r1, r7, #8
 800905c:	4610      	mov	r0, r2
 800905e:	4798      	blx	r3
 8009060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009062:	e091      	b.n	8009188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 facb 	bl	8009602 <USBD_CtlError>
            err++;
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	3301      	adds	r3, #1
 8009070:	72fb      	strb	r3, [r7, #11]
          break;
 8009072:	e089      	b.n	8009188 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00b      	beq.n	8009098 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	7c12      	ldrb	r2, [r2, #16]
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009096:	e077      	b.n	8009188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fab1 	bl	8009602 <USBD_CtlError>
            err++;
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	3301      	adds	r3, #1
 80090a4:	72fb      	strb	r3, [r7, #11]
          break;
 80090a6:	e06f      	b.n	8009188 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00b      	beq.n	80090cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	7c12      	ldrb	r2, [r2, #16]
 80090c0:	f107 0108 	add.w	r1, r7, #8
 80090c4:	4610      	mov	r0, r2
 80090c6:	4798      	blx	r3
 80090c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ca:	e05d      	b.n	8009188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa97 	bl	8009602 <USBD_CtlError>
            err++;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	3301      	adds	r3, #1
 80090d8:	72fb      	strb	r3, [r7, #11]
          break;
 80090da:	e055      	b.n	8009188 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	7c12      	ldrb	r2, [r2, #16]
 80090f4:	f107 0108 	add.w	r1, r7, #8
 80090f8:	4610      	mov	r0, r2
 80090fa:	4798      	blx	r3
 80090fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090fe:	e043      	b.n	8009188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa7d 	bl	8009602 <USBD_CtlError>
            err++;
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	3301      	adds	r3, #1
 800910c:	72fb      	strb	r3, [r7, #11]
          break;
 800910e:	e03b      	b.n	8009188 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009122:	695b      	ldr	r3, [r3, #20]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	7c12      	ldrb	r2, [r2, #16]
 8009128:	f107 0108 	add.w	r1, r7, #8
 800912c:	4610      	mov	r0, r2
 800912e:	4798      	blx	r3
 8009130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009132:	e029      	b.n	8009188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fa63 	bl	8009602 <USBD_CtlError>
            err++;
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	3301      	adds	r3, #1
 8009140:	72fb      	strb	r3, [r7, #11]
          break;
 8009142:	e021      	b.n	8009188 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	7c12      	ldrb	r2, [r2, #16]
 800915c:	f107 0108 	add.w	r1, r7, #8
 8009160:	4610      	mov	r0, r2
 8009162:	4798      	blx	r3
 8009164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009166:	e00f      	b.n	8009188 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fa49 	bl	8009602 <USBD_CtlError>
            err++;
 8009170:	7afb      	ldrb	r3, [r7, #11]
 8009172:	3301      	adds	r3, #1
 8009174:	72fb      	strb	r3, [r7, #11]
          break;
 8009176:	e007      	b.n	8009188 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa41 	bl	8009602 <USBD_CtlError>
          err++;
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	3301      	adds	r3, #1
 8009184:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009186:	bf00      	nop
      }
      break;
 8009188:	e037      	b.n	80091fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	7c1b      	ldrb	r3, [r3, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800919a:	f107 0208 	add.w	r2, r7, #8
 800919e:	4610      	mov	r0, r2
 80091a0:	4798      	blx	r3
 80091a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091a4:	e029      	b.n	80091fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fa2a 	bl	8009602 <USBD_CtlError>
        err++;
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	3301      	adds	r3, #1
 80091b2:	72fb      	strb	r3, [r7, #11]
      break;
 80091b4:	e021      	b.n	80091fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	7c1b      	ldrb	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10d      	bne.n	80091da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c6:	f107 0208 	add.w	r2, r7, #8
 80091ca:	4610      	mov	r0, r2
 80091cc:	4798      	blx	r3
 80091ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3301      	adds	r3, #1
 80091d4:	2207      	movs	r2, #7
 80091d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091d8:	e00f      	b.n	80091fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fa10 	bl	8009602 <USBD_CtlError>
        err++;
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	3301      	adds	r3, #1
 80091e6:	72fb      	strb	r3, [r7, #11]
      break;
 80091e8:	e007      	b.n	80091fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fa08 	bl	8009602 <USBD_CtlError>
      err++;
 80091f2:	7afb      	ldrb	r3, [r7, #11]
 80091f4:	3301      	adds	r3, #1
 80091f6:	72fb      	strb	r3, [r7, #11]
      break;
 80091f8:	bf00      	nop
  }

  if (err != 0U)
 80091fa:	7afb      	ldrb	r3, [r7, #11]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d11e      	bne.n	800923e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	88db      	ldrh	r3, [r3, #6]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d016      	beq.n	8009236 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009208:	893b      	ldrh	r3, [r7, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00e      	beq.n	800922c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	88da      	ldrh	r2, [r3, #6]
 8009212:	893b      	ldrh	r3, [r7, #8]
 8009214:	4293      	cmp	r3, r2
 8009216:	bf28      	it	cs
 8009218:	4613      	movcs	r3, r2
 800921a:	b29b      	uxth	r3, r3
 800921c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800921e:	893b      	ldrh	r3, [r7, #8]
 8009220:	461a      	mov	r2, r3
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fa69 	bl	80096fc <USBD_CtlSendData>
 800922a:	e009      	b.n	8009240 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f9e7 	bl	8009602 <USBD_CtlError>
 8009234:	e004      	b.n	8009240 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fac1 	bl	80097be <USBD_CtlSendStatus>
 800923c:	e000      	b.n	8009240 <USBD_GetDescriptor+0x2cc>
    return;
 800923e:	bf00      	nop
  }
}
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop

08009248 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	889b      	ldrh	r3, [r3, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d131      	bne.n	80092be <USBD_SetAddress+0x76>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	88db      	ldrh	r3, [r3, #6]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d12d      	bne.n	80092be <USBD_SetAddress+0x76>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	885b      	ldrh	r3, [r3, #2]
 8009266:	2b7f      	cmp	r3, #127	@ 0x7f
 8009268:	d829      	bhi.n	80092be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	885b      	ldrh	r3, [r3, #2]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009274:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b03      	cmp	r3, #3
 8009280:	d104      	bne.n	800928c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f9bc 	bl	8009602 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928a:	e01d      	b.n	80092c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7bfa      	ldrb	r2, [r7, #15]
 8009290:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 ff19 	bl	800a0d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fa8d 	bl	80097be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2202      	movs	r2, #2
 80092ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b2:	e009      	b.n	80092c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092bc:	e004      	b.n	80092c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f99e 	bl	8009602 <USBD_CtlError>
  }
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	4b4e      	ldr	r3, [pc, #312]	@ (8009420 <USBD_SetConfig+0x150>)
 80092e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092e8:	4b4d      	ldr	r3, [pc, #308]	@ (8009420 <USBD_SetConfig+0x150>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d905      	bls.n	80092fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f985 	bl	8009602 <USBD_CtlError>
    return USBD_FAIL;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e08c      	b.n	8009416 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d002      	beq.n	800930e <USBD_SetConfig+0x3e>
 8009308:	2b03      	cmp	r3, #3
 800930a:	d029      	beq.n	8009360 <USBD_SetConfig+0x90>
 800930c:	e075      	b.n	80093fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800930e:	4b44      	ldr	r3, [pc, #272]	@ (8009420 <USBD_SetConfig+0x150>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d020      	beq.n	8009358 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009316:	4b42      	ldr	r3, [pc, #264]	@ (8009420 <USBD_SetConfig+0x150>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009320:	4b3f      	ldr	r3, [pc, #252]	@ (8009420 <USBD_SetConfig+0x150>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7fe ffcd 	bl	80082c6 <USBD_SetClassConfig>
 800932c:	4603      	mov	r3, r0
 800932e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d008      	beq.n	8009348 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f962 	bl	8009602 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2202      	movs	r2, #2
 8009342:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009346:	e065      	b.n	8009414 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fa38 	bl	80097be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2203      	movs	r2, #3
 8009352:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009356:	e05d      	b.n	8009414 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fa30 	bl	80097be <USBD_CtlSendStatus>
      break;
 800935e:	e059      	b.n	8009414 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009360:	4b2f      	ldr	r3, [pc, #188]	@ (8009420 <USBD_SetConfig+0x150>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d112      	bne.n	800938e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009370:	4b2b      	ldr	r3, [pc, #172]	@ (8009420 <USBD_SetConfig+0x150>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	461a      	mov	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800937a:	4b29      	ldr	r3, [pc, #164]	@ (8009420 <USBD_SetConfig+0x150>)
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7fe ffbc 	bl	80082fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fa19 	bl	80097be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800938c:	e042      	b.n	8009414 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800938e:	4b24      	ldr	r3, [pc, #144]	@ (8009420 <USBD_SetConfig+0x150>)
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	429a      	cmp	r2, r3
 800939a:	d02a      	beq.n	80093f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7fe ffaa 	bl	80082fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80093aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009420 <USBD_SetConfig+0x150>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009420 <USBD_SetConfig+0x150>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7fe ff83 	bl	80082c6 <USBD_SetClassConfig>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00f      	beq.n	80093ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f918 	bl	8009602 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7fe ff8f 	bl	80082fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80093e8:	e014      	b.n	8009414 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f9e7 	bl	80097be <USBD_CtlSendStatus>
      break;
 80093f0:	e010      	b.n	8009414 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f9e3 	bl	80097be <USBD_CtlSendStatus>
      break;
 80093f8:	e00c      	b.n	8009414 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f900 	bl	8009602 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009402:	4b07      	ldr	r3, [pc, #28]	@ (8009420 <USBD_SetConfig+0x150>)
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7fe ff78 	bl	80082fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800940e:	2303      	movs	r3, #3
 8009410:	73fb      	strb	r3, [r7, #15]
      break;
 8009412:	bf00      	nop
  }

  return ret;
 8009414:	7bfb      	ldrb	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20005290 	.word	0x20005290

08009424 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	88db      	ldrh	r3, [r3, #6]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d004      	beq.n	8009440 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f8e2 	bl	8009602 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800943e:	e023      	b.n	8009488 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b02      	cmp	r3, #2
 800944a:	dc02      	bgt.n	8009452 <USBD_GetConfig+0x2e>
 800944c:	2b00      	cmp	r3, #0
 800944e:	dc03      	bgt.n	8009458 <USBD_GetConfig+0x34>
 8009450:	e015      	b.n	800947e <USBD_GetConfig+0x5a>
 8009452:	2b03      	cmp	r3, #3
 8009454:	d00b      	beq.n	800946e <USBD_GetConfig+0x4a>
 8009456:	e012      	b.n	800947e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3308      	adds	r3, #8
 8009462:	2201      	movs	r2, #1
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f948 	bl	80096fc <USBD_CtlSendData>
        break;
 800946c:	e00c      	b.n	8009488 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3304      	adds	r3, #4
 8009472:	2201      	movs	r2, #1
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f940 	bl	80096fc <USBD_CtlSendData>
        break;
 800947c:	e004      	b.n	8009488 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f8be 	bl	8009602 <USBD_CtlError>
        break;
 8009486:	bf00      	nop
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d81e      	bhi.n	80094e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	88db      	ldrh	r3, [r3, #6]
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d004      	beq.n	80094ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f8a5 	bl	8009602 <USBD_CtlError>
        break;
 80094b8:	e01a      	b.n	80094f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d005      	beq.n	80094d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f043 0202 	orr.w	r2, r3, #2
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	330c      	adds	r3, #12
 80094da:	2202      	movs	r2, #2
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f90c 	bl	80096fc <USBD_CtlSendData>
      break;
 80094e4:	e004      	b.n	80094f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f88a 	bl	8009602 <USBD_CtlError>
      break;
 80094ee:	bf00      	nop
  }
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	885b      	ldrh	r3, [r3, #2]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d107      	bne.n	800951a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f953 	bl	80097be <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009518:	e013      	b.n	8009542 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	2b02      	cmp	r3, #2
 8009520:	d10b      	bne.n	800953a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	889b      	ldrh	r3, [r3, #4]
 8009526:	0a1b      	lsrs	r3, r3, #8
 8009528:	b29b      	uxth	r3, r3
 800952a:	b2da      	uxtb	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f943 	bl	80097be <USBD_CtlSendStatus>
}
 8009538:	e003      	b.n	8009542 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f860 	bl	8009602 <USBD_CtlError>
}
 8009542:	bf00      	nop
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800955a:	b2db      	uxtb	r3, r3
 800955c:	3b01      	subs	r3, #1
 800955e:	2b02      	cmp	r3, #2
 8009560:	d80b      	bhi.n	800957a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	885b      	ldrh	r3, [r3, #2]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d10c      	bne.n	8009584 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f923 	bl	80097be <USBD_CtlSendStatus>
      }
      break;
 8009578:	e004      	b.n	8009584 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f840 	bl	8009602 <USBD_CtlError>
      break;
 8009582:	e000      	b.n	8009586 <USBD_ClrFeature+0x3c>
      break;
 8009584:	bf00      	nop
  }
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	781a      	ldrb	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3301      	adds	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	781a      	ldrb	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3301      	adds	r3, #1
 80095b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff fa3d 	bl	8008a38 <SWAPBYTE>
 80095be:	4603      	mov	r3, r0
 80095c0:	461a      	mov	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3301      	adds	r3, #1
 80095ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3301      	adds	r3, #1
 80095d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f7ff fa30 	bl	8008a38 <SWAPBYTE>
 80095d8:	4603      	mov	r3, r0
 80095da:	461a      	mov	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3301      	adds	r3, #1
 80095e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3301      	adds	r3, #1
 80095ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f7ff fa23 	bl	8008a38 <SWAPBYTE>
 80095f2:	4603      	mov	r3, r0
 80095f4:	461a      	mov	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	80da      	strh	r2, [r3, #6]
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800960c:	2180      	movs	r1, #128	@ 0x80
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fcf4 	bl	8009ffc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009614:	2100      	movs	r1, #0
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fcf0 	bl	8009ffc <USBD_LL_StallEP>
}
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d042      	beq.n	80096c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800963e:	6938      	ldr	r0, [r7, #16]
 8009640:	f000 f842 	bl	80096c8 <USBD_GetLen>
 8009644:	4603      	mov	r3, r0
 8009646:	3301      	adds	r3, #1
 8009648:	005b      	lsls	r3, r3, #1
 800964a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800964e:	d808      	bhi.n	8009662 <USBD_GetString+0x3e>
 8009650:	6938      	ldr	r0, [r7, #16]
 8009652:	f000 f839 	bl	80096c8 <USBD_GetLen>
 8009656:	4603      	mov	r3, r0
 8009658:	3301      	adds	r3, #1
 800965a:	b29b      	uxth	r3, r3
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	b29a      	uxth	r2, r3
 8009660:	e001      	b.n	8009666 <USBD_GetString+0x42>
 8009662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	4413      	add	r3, r2
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	7812      	ldrb	r2, [r2, #0]
 8009674:	701a      	strb	r2, [r3, #0]
  idx++;
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	3301      	adds	r3, #1
 800967a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800967c:	7dfb      	ldrb	r3, [r7, #23]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	4413      	add	r3, r2
 8009682:	2203      	movs	r2, #3
 8009684:	701a      	strb	r2, [r3, #0]
  idx++;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	3301      	adds	r3, #1
 800968a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800968c:	e013      	b.n	80096b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800968e:	7dfb      	ldrb	r3, [r7, #23]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	4413      	add	r3, r2
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	7812      	ldrb	r2, [r2, #0]
 8009698:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	3301      	adds	r3, #1
 800969e:	613b      	str	r3, [r7, #16]
    idx++;
 80096a0:	7dfb      	ldrb	r3, [r7, #23]
 80096a2:	3301      	adds	r3, #1
 80096a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	4413      	add	r3, r2
 80096ac:	2200      	movs	r2, #0
 80096ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	3301      	adds	r3, #1
 80096b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1e7      	bne.n	800968e <USBD_GetString+0x6a>
 80096be:	e000      	b.n	80096c2 <USBD_GetString+0x9e>
    return;
 80096c0:	bf00      	nop
  }
}
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80096d8:	e005      	b.n	80096e6 <USBD_GetLen+0x1e>
  {
    len++;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	3301      	adds	r3, #1
 80096de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	3301      	adds	r3, #1
 80096e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1f5      	bne.n	80096da <USBD_GetLen+0x12>
  }

  return len;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2202      	movs	r2, #2
 800970c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	2100      	movs	r1, #0
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f000 fcf0 	bl	800a10e <USBD_LL_Transmit>

  return USBD_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	2100      	movs	r1, #0
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 fcdf 	bl	800a10e <USBD_LL_Transmit>

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2203      	movs	r2, #3
 800976a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	2100      	movs	r1, #0
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 fcdf 	bl	800a150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	2100      	movs	r1, #0
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fcce 	bl	800a150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2204      	movs	r2, #4
 80097ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097ce:	2300      	movs	r3, #0
 80097d0:	2200      	movs	r2, #0
 80097d2:	2100      	movs	r1, #0
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fc9a 	bl	800a10e <USBD_LL_Transmit>

  return USBD_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2205      	movs	r2, #5
 80097f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097f4:	2300      	movs	r3, #0
 80097f6:	2200      	movs	r2, #0
 80097f8:	2100      	movs	r1, #0
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fca8 	bl	800a150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009810:	2200      	movs	r2, #0
 8009812:	4912      	ldr	r1, [pc, #72]	@ (800985c <MX_USB_DEVICE_Init+0x50>)
 8009814:	4812      	ldr	r0, [pc, #72]	@ (8009860 <MX_USB_DEVICE_Init+0x54>)
 8009816:	f7fe fcd9 	bl	80081cc <USBD_Init>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009820:	f7f8 f9e8 	bl	8001bf4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009824:	490f      	ldr	r1, [pc, #60]	@ (8009864 <MX_USB_DEVICE_Init+0x58>)
 8009826:	480e      	ldr	r0, [pc, #56]	@ (8009860 <MX_USB_DEVICE_Init+0x54>)
 8009828:	f7fe fd00 	bl	800822c <USBD_RegisterClass>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009832:	f7f8 f9df 	bl	8001bf4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009836:	490c      	ldr	r1, [pc, #48]	@ (8009868 <MX_USB_DEVICE_Init+0x5c>)
 8009838:	4809      	ldr	r0, [pc, #36]	@ (8009860 <MX_USB_DEVICE_Init+0x54>)
 800983a:	f7fe fbf7 	bl	800802c <USBD_CDC_RegisterInterface>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009844:	f7f8 f9d6 	bl	8001bf4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009848:	4805      	ldr	r0, [pc, #20]	@ (8009860 <MX_USB_DEVICE_Init+0x54>)
 800984a:	f7fe fd25 	bl	8008298 <USBD_Start>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009854:	f7f8 f9ce 	bl	8001bf4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009858:	bf00      	nop
 800985a:	bd80      	pop	{r7, pc}
 800985c:	200000ac 	.word	0x200000ac
 8009860:	20005294 	.word	0x20005294
 8009864:	20000018 	.word	0x20000018
 8009868:	20000098 	.word	0x20000098

0800986c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009870:	2200      	movs	r2, #0
 8009872:	4905      	ldr	r1, [pc, #20]	@ (8009888 <CDC_Init_FS+0x1c>)
 8009874:	4805      	ldr	r0, [pc, #20]	@ (800988c <CDC_Init_FS+0x20>)
 8009876:	f7fe fbf3 	bl	8008060 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800987a:	4905      	ldr	r1, [pc, #20]	@ (8009890 <CDC_Init_FS+0x24>)
 800987c:	4803      	ldr	r0, [pc, #12]	@ (800988c <CDC_Init_FS+0x20>)
 800987e:	f7fe fc11 	bl	80080a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009882:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009884:	4618      	mov	r0, r3
 8009886:	bd80      	pop	{r7, pc}
 8009888:	20005db4 	.word	0x20005db4
 800988c:	20005294 	.word	0x20005294
 8009890:	200055b4 	.word	0x200055b4

08009894 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009898:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800989a:	4618      	mov	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	6039      	str	r1, [r7, #0]
 80098ae:	71fb      	strb	r3, [r7, #7]
 80098b0:	4613      	mov	r3, r2
 80098b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	2b23      	cmp	r3, #35	@ 0x23
 80098b8:	d84a      	bhi.n	8009950 <CDC_Control_FS+0xac>
 80098ba:	a201      	add	r2, pc, #4	@ (adr r2, 80098c0 <CDC_Control_FS+0x1c>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	08009951 	.word	0x08009951
 80098c4:	08009951 	.word	0x08009951
 80098c8:	08009951 	.word	0x08009951
 80098cc:	08009951 	.word	0x08009951
 80098d0:	08009951 	.word	0x08009951
 80098d4:	08009951 	.word	0x08009951
 80098d8:	08009951 	.word	0x08009951
 80098dc:	08009951 	.word	0x08009951
 80098e0:	08009951 	.word	0x08009951
 80098e4:	08009951 	.word	0x08009951
 80098e8:	08009951 	.word	0x08009951
 80098ec:	08009951 	.word	0x08009951
 80098f0:	08009951 	.word	0x08009951
 80098f4:	08009951 	.word	0x08009951
 80098f8:	08009951 	.word	0x08009951
 80098fc:	08009951 	.word	0x08009951
 8009900:	08009951 	.word	0x08009951
 8009904:	08009951 	.word	0x08009951
 8009908:	08009951 	.word	0x08009951
 800990c:	08009951 	.word	0x08009951
 8009910:	08009951 	.word	0x08009951
 8009914:	08009951 	.word	0x08009951
 8009918:	08009951 	.word	0x08009951
 800991c:	08009951 	.word	0x08009951
 8009920:	08009951 	.word	0x08009951
 8009924:	08009951 	.word	0x08009951
 8009928:	08009951 	.word	0x08009951
 800992c:	08009951 	.word	0x08009951
 8009930:	08009951 	.word	0x08009951
 8009934:	08009951 	.word	0x08009951
 8009938:	08009951 	.word	0x08009951
 800993c:	08009951 	.word	0x08009951
 8009940:	08009951 	.word	0x08009951
 8009944:	08009951 	.word	0x08009951
 8009948:	08009951 	.word	0x08009951
 800994c:	08009951 	.word	0x08009951
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009950:	bf00      	nop
  }

  return (USBD_OK);
 8009952:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009954:	4618      	mov	r0, r3
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	4805      	ldr	r0, [pc, #20]	@ (8009984 <CDC_Receive_FS+0x24>)
 800996e:	f7fe fb99 	bl	80080a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009972:	4804      	ldr	r0, [pc, #16]	@ (8009984 <CDC_Receive_FS+0x24>)
 8009974:	f7fe fbf4 	bl	8008160 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009978:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20005294 	.word	0x20005294

08009988 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009998:	4b0d      	ldr	r3, [pc, #52]	@ (80099d0 <CDC_Transmit_FS+0x48>)
 800999a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800999e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e00b      	b.n	80099c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80099ae:	887b      	ldrh	r3, [r7, #2]
 80099b0:	461a      	mov	r2, r3
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	4806      	ldr	r0, [pc, #24]	@ (80099d0 <CDC_Transmit_FS+0x48>)
 80099b6:	f7fe fb53 	bl	8008060 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80099ba:	4805      	ldr	r0, [pc, #20]	@ (80099d0 <CDC_Transmit_FS+0x48>)
 80099bc:	f7fe fb90 	bl	80080e0 <USBD_CDC_TransmitPacket>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20005294 	.word	0x20005294

080099d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	4613      	mov	r3, r2
 80099e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80099e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
	...

080099f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2212      	movs	r2, #18
 8009a08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a0a:	4b03      	ldr	r3, [pc, #12]	@ (8009a18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	200000c8 	.word	0x200000c8

08009a1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	6039      	str	r1, [r7, #0]
 8009a26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a2e:	4b03      	ldr	r3, [pc, #12]	@ (8009a3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	200000dc 	.word	0x200000dc

08009a40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	6039      	str	r1, [r7, #0]
 8009a4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d105      	bne.n	8009a5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	4907      	ldr	r1, [pc, #28]	@ (8009a74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a56:	4808      	ldr	r0, [pc, #32]	@ (8009a78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a58:	f7ff fde4 	bl	8009624 <USBD_GetString>
 8009a5c:	e004      	b.n	8009a68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	4904      	ldr	r1, [pc, #16]	@ (8009a74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a62:	4805      	ldr	r0, [pc, #20]	@ (8009a78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a64:	f7ff fdde 	bl	8009624 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a68:	4b02      	ldr	r3, [pc, #8]	@ (8009a74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	200065b4 	.word	0x200065b4
 8009a78:	0800ead8 	.word	0x0800ead8

08009a7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	6039      	str	r1, [r7, #0]
 8009a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	4904      	ldr	r1, [pc, #16]	@ (8009a9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a8c:	4804      	ldr	r0, [pc, #16]	@ (8009aa0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a8e:	f7ff fdc9 	bl	8009624 <USBD_GetString>
  return USBD_StrDesc;
 8009a92:	4b02      	ldr	r3, [pc, #8]	@ (8009a9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	200065b4 	.word	0x200065b4
 8009aa0:	0800eaf0 	.word	0x0800eaf0

08009aa4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	6039      	str	r1, [r7, #0]
 8009aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	221a      	movs	r2, #26
 8009ab4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ab6:	f000 f843 	bl	8009b40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009aba:	4b02      	ldr	r3, [pc, #8]	@ (8009ac4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	200000e0 	.word	0x200000e0

08009ac8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	6039      	str	r1, [r7, #0]
 8009ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d105      	bne.n	8009ae6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4907      	ldr	r1, [pc, #28]	@ (8009afc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ade:	4808      	ldr	r0, [pc, #32]	@ (8009b00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ae0:	f7ff fda0 	bl	8009624 <USBD_GetString>
 8009ae4:	e004      	b.n	8009af0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	4904      	ldr	r1, [pc, #16]	@ (8009afc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aea:	4805      	ldr	r0, [pc, #20]	@ (8009b00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009aec:	f7ff fd9a 	bl	8009624 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009af0:	4b02      	ldr	r3, [pc, #8]	@ (8009afc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	200065b4 	.word	0x200065b4
 8009b00:	0800eb04 	.word	0x0800eb04

08009b04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	6039      	str	r1, [r7, #0]
 8009b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d105      	bne.n	8009b22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	4907      	ldr	r1, [pc, #28]	@ (8009b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b1a:	4808      	ldr	r0, [pc, #32]	@ (8009b3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b1c:	f7ff fd82 	bl	8009624 <USBD_GetString>
 8009b20:	e004      	b.n	8009b2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	4904      	ldr	r1, [pc, #16]	@ (8009b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b26:	4805      	ldr	r0, [pc, #20]	@ (8009b3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b28:	f7ff fd7c 	bl	8009624 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b2c:	4b02      	ldr	r3, [pc, #8]	@ (8009b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	200065b4 	.word	0x200065b4
 8009b3c:	0800eb10 	.word	0x0800eb10

08009b40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b46:	4b0f      	ldr	r3, [pc, #60]	@ (8009b84 <Get_SerialNum+0x44>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b88 <Get_SerialNum+0x48>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b52:	4b0e      	ldr	r3, [pc, #56]	@ (8009b8c <Get_SerialNum+0x4c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d009      	beq.n	8009b7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b66:	2208      	movs	r2, #8
 8009b68:	4909      	ldr	r1, [pc, #36]	@ (8009b90 <Get_SerialNum+0x50>)
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 f814 	bl	8009b98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b70:	2204      	movs	r2, #4
 8009b72:	4908      	ldr	r1, [pc, #32]	@ (8009b94 <Get_SerialNum+0x54>)
 8009b74:	68b8      	ldr	r0, [r7, #8]
 8009b76:	f000 f80f 	bl	8009b98 <IntToUnicode>
  }
}
 8009b7a:	bf00      	nop
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	1fff7a10 	.word	0x1fff7a10
 8009b88:	1fff7a14 	.word	0x1fff7a14
 8009b8c:	1fff7a18 	.word	0x1fff7a18
 8009b90:	200000e2 	.word	0x200000e2
 8009b94:	200000f2 	.word	0x200000f2

08009b98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009baa:	2300      	movs	r3, #0
 8009bac:	75fb      	strb	r3, [r7, #23]
 8009bae:	e027      	b.n	8009c00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	0f1b      	lsrs	r3, r3, #28
 8009bb4:	2b09      	cmp	r3, #9
 8009bb6:	d80b      	bhi.n	8009bd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	0f1b      	lsrs	r3, r3, #28
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	005b      	lsls	r3, r3, #1
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	440b      	add	r3, r1
 8009bc8:	3230      	adds	r2, #48	@ 0x30
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	701a      	strb	r2, [r3, #0]
 8009bce:	e00a      	b.n	8009be6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	0f1b      	lsrs	r3, r3, #28
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	4619      	mov	r1, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	440b      	add	r3, r1
 8009be0:	3237      	adds	r2, #55	@ 0x37
 8009be2:	b2d2      	uxtb	r2, r2
 8009be4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	011b      	lsls	r3, r3, #4
 8009bea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	75fb      	strb	r3, [r7, #23]
 8009c00:	7dfa      	ldrb	r2, [r7, #23]
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d3d3      	bcc.n	8009bb0 <IntToUnicode+0x18>
  }
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
	...

08009c18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08a      	sub	sp, #40	@ 0x28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c20:	f107 0314 	add.w	r3, r7, #20
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	605a      	str	r2, [r3, #4]
 8009c2a:	609a      	str	r2, [r3, #8]
 8009c2c:	60da      	str	r2, [r3, #12]
 8009c2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c38:	d13a      	bne.n	8009cb0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	613b      	str	r3, [r7, #16]
 8009c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c42:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c44:	f043 0301 	orr.w	r3, r3, #1
 8009c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c56:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c64:	2303      	movs	r3, #3
 8009c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c68:	230a      	movs	r3, #10
 8009c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c6c:	f107 0314 	add.w	r3, r7, #20
 8009c70:	4619      	mov	r1, r3
 8009c72:	4812      	ldr	r0, [pc, #72]	@ (8009cbc <HAL_PCD_MspInit+0xa4>)
 8009c74:	f7f8 fd82 	bl	800277c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c78:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c7c:	4a0e      	ldr	r2, [pc, #56]	@ (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c82:	6353      	str	r3, [r2, #52]	@ 0x34
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c92:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c94:	4b08      	ldr	r3, [pc, #32]	@ (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	2043      	movs	r0, #67	@ 0x43
 8009ca6:	f7f8 fba4 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009caa:	2043      	movs	r0, #67	@ 0x43
 8009cac:	f7f8 fbbd 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009cb0:	bf00      	nop
 8009cb2:	3728      	adds	r7, #40	@ 0x28
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	40023800 	.word	0x40023800
 8009cbc:	40020000 	.word	0x40020000

08009cc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	f7fe fb2b 	bl	8008332 <USBD_LL_SetupStage>
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009cf6:	78fa      	ldrb	r2, [r7, #3]
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	00db      	lsls	r3, r3, #3
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	f7fe fb65 	bl	80083dc <USBD_LL_DataOutStage>
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	00db      	lsls	r3, r3, #3
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	440b      	add	r3, r1
 8009d3a:	3320      	adds	r3, #32
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	4619      	mov	r1, r3
 8009d42:	f7fe fc07 	bl	8008554 <USBD_LL_DataInStage>
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fe fd4b 	bl	80087f8 <USBD_LL_SOF>
}
 8009d62:	bf00      	nop
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d72:	2301      	movs	r3, #1
 8009d74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	79db      	ldrb	r3, [r3, #7]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	73fb      	strb	r3, [r7, #15]
 8009d82:	e008      	b.n	8009d96 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	79db      	ldrb	r3, [r3, #7]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d102      	bne.n	8009d92 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	73fb      	strb	r3, [r7, #15]
 8009d90:	e001      	b.n	8009d96 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d92:	f7f7 ff2f 	bl	8001bf4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d9c:	7bfa      	ldrb	r2, [r7, #15]
 8009d9e:	4611      	mov	r1, r2
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe fce5 	bl	8008770 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fe fc8c 	bl	80086ca <USBD_LL_Reset>
}
 8009db2:	bf00      	nop
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fce0 	bl	8008790 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009de2:	f043 0301 	orr.w	r3, r3, #1
 8009de6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	7adb      	ldrb	r3, [r3, #11]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d005      	beq.n	8009dfc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009df0:	4b04      	ldr	r3, [pc, #16]	@ (8009e04 <HAL_PCD_SuspendCallback+0x48>)
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	4a03      	ldr	r2, [pc, #12]	@ (8009e04 <HAL_PCD_SuspendCallback+0x48>)
 8009df6:	f043 0306 	orr.w	r3, r3, #6
 8009dfa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	e000ed00 	.word	0xe000ed00

08009e08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe fcd6 	bl	80087c8 <USBD_LL_Resume>
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e36:	78fa      	ldrb	r2, [r7, #3]
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fe fd2e 	bl	800889c <USBD_LL_IsoOUTIncomplete>
}
 8009e40:	bf00      	nop
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e5a:	78fa      	ldrb	r2, [r7, #3]
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fcea 	bl	8008838 <USBD_LL_IsoINIncomplete>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe fd40 	bl	8008900 <USBD_LL_DevConnected>
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fe fd3d 	bl	8008916 <USBD_LL_DevDisconnected>
}
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d13c      	bne.n	8009f2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009eb4:	4a20      	ldr	r2, [pc, #128]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009ec0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009ec6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009eca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009ece:	2204      	movs	r2, #4
 8009ed0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ed2:	4b19      	ldr	r3, [pc, #100]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ed8:	4b17      	ldr	r3, [pc, #92]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ede:	4b16      	ldr	r3, [pc, #88]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ee4:	4b14      	ldr	r3, [pc, #80]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009eea:	4b13      	ldr	r3, [pc, #76]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ef0:	4b11      	ldr	r3, [pc, #68]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ef6:	4b10      	ldr	r3, [pc, #64]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009efc:	4b0e      	ldr	r3, [pc, #56]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f02:	480d      	ldr	r0, [pc, #52]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009f04:	f7f8 fe07 	bl	8002b16 <HAL_PCD_Init>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009f0e:	f7f7 fe71 	bl	8001bf4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f12:	2180      	movs	r1, #128	@ 0x80
 8009f14:	4808      	ldr	r0, [pc, #32]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009f16:	f7fa f834 	bl	8003f82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f1a:	2240      	movs	r2, #64	@ 0x40
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	4806      	ldr	r0, [pc, #24]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009f20:	f7f9 ffe8 	bl	8003ef4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f24:	2280      	movs	r2, #128	@ 0x80
 8009f26:	2101      	movs	r1, #1
 8009f28:	4803      	ldr	r0, [pc, #12]	@ (8009f38 <USBD_LL_Init+0x94>)
 8009f2a:	f7f9 ffe3 	bl	8003ef4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	200067b4 	.word	0x200067b4

08009f3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7f8 feee 	bl	8002d34 <HAL_PCD_Start>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 f942 	bl	800a1e8 <USBD_Get_USB_Status>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	4608      	mov	r0, r1
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4603      	mov	r3, r0
 8009f82:	70fb      	strb	r3, [r7, #3]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70bb      	strb	r3, [r7, #2]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009f9a:	78bb      	ldrb	r3, [r7, #2]
 8009f9c:	883a      	ldrh	r2, [r7, #0]
 8009f9e:	78f9      	ldrb	r1, [r7, #3]
 8009fa0:	f7f9 fbc2 	bl	8003728 <HAL_PCD_EP_Open>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f91c 	bl	800a1e8 <USBD_Get_USB_Status>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fd8:	78fa      	ldrb	r2, [r7, #3]
 8009fda:	4611      	mov	r1, r2
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7f9 fc0d 	bl	80037fc <HAL_PCD_EP_Close>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 f8fd 	bl	800a1e8 <USBD_Get_USB_Status>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7f9 fcc5 	bl	80039aa <HAL_PCD_EP_SetStall>
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 f8de 	bl	800a1e8 <USBD_Get_USB_Status>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a030:	7bbb      	ldrb	r3, [r7, #14]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7f9 fd09 	bl	8003a70 <HAL_PCD_EP_ClrStall>
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f8bf 	bl	800a1e8 <USBD_Get_USB_Status>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a08a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a08c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a090:	2b00      	cmp	r3, #0
 800a092:	da0b      	bge.n	800a0ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	4613      	mov	r3, r2
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	4413      	add	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	440b      	add	r3, r1
 800a0a6:	3316      	adds	r3, #22
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	e00b      	b.n	800a0c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0ac:	78fb      	ldrb	r3, [r7, #3]
 800a0ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0b2:	68f9      	ldr	r1, [r7, #12]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	4413      	add	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	440b      	add	r3, r1
 800a0be:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a0c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7f9 faf6 	bl	80036e0 <HAL_PCD_SetAddress>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 f874 	bl	800a1e8 <USBD_Get_USB_Status>
 800a100:	4603      	mov	r3, r0
 800a102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a104:	7bbb      	ldrb	r3, [r7, #14]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b086      	sub	sp, #24
 800a112:	af00      	add	r7, sp, #0
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	603b      	str	r3, [r7, #0]
 800a11a:	460b      	mov	r3, r1
 800a11c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a12c:	7af9      	ldrb	r1, [r7, #11]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	f7f9 fc00 	bl	8003936 <HAL_PCD_EP_Transmit>
 800a136:	4603      	mov	r3, r0
 800a138:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 f853 	bl	800a1e8 <USBD_Get_USB_Status>
 800a142:	4603      	mov	r3, r0
 800a144:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a146:	7dbb      	ldrb	r3, [r7, #22]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	607a      	str	r2, [r7, #4]
 800a15a:	603b      	str	r3, [r7, #0]
 800a15c:	460b      	mov	r3, r1
 800a15e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a16e:	7af9      	ldrb	r1, [r7, #11]
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	f7f9 fb8c 	bl	8003890 <HAL_PCD_EP_Receive>
 800a178:	4603      	mov	r3, r0
 800a17a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f832 	bl	800a1e8 <USBD_Get_USB_Status>
 800a184:	4603      	mov	r3, r0
 800a186:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a188:	7dbb      	ldrb	r3, [r7, #22]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1a4:	78fa      	ldrb	r2, [r7, #3]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7f9 fbac 	bl	8003906 <HAL_PCD_EP_GetRxCount>
 800a1ae:	4603      	mov	r3, r0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1c0:	4b03      	ldr	r3, [pc, #12]	@ (800a1d0 <USBD_static_malloc+0x18>)
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	20006c98 	.word	0x20006c98

0800a1d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]

}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	2b03      	cmp	r3, #3
 800a1fa:	d817      	bhi.n	800a22c <USBD_Get_USB_Status+0x44>
 800a1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a204 <USBD_Get_USB_Status+0x1c>)
 800a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a21b 	.word	0x0800a21b
 800a20c:	0800a221 	.word	0x0800a221
 800a210:	0800a227 	.word	0x0800a227
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	73fb      	strb	r3, [r7, #15]
    break;
 800a218:	e00b      	b.n	800a232 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a21a:	2303      	movs	r3, #3
 800a21c:	73fb      	strb	r3, [r7, #15]
    break;
 800a21e:	e008      	b.n	800a232 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a220:	2301      	movs	r3, #1
 800a222:	73fb      	strb	r3, [r7, #15]
    break;
 800a224:	e005      	b.n	800a232 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a226:	2303      	movs	r3, #3
 800a228:	73fb      	strb	r3, [r7, #15]
    break;
 800a22a:	e002      	b.n	800a232 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a22c:	2303      	movs	r3, #3
 800a22e:	73fb      	strb	r3, [r7, #15]
    break;
 800a230:	bf00      	nop
  }
  return usb_status;
 800a232:	7bfb      	ldrb	r3, [r7, #15]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <__cvt>:
 800a240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a244:	ec57 6b10 	vmov	r6, r7, d0
 800a248:	2f00      	cmp	r7, #0
 800a24a:	460c      	mov	r4, r1
 800a24c:	4619      	mov	r1, r3
 800a24e:	463b      	mov	r3, r7
 800a250:	bfbb      	ittet	lt
 800a252:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a256:	461f      	movlt	r7, r3
 800a258:	2300      	movge	r3, #0
 800a25a:	232d      	movlt	r3, #45	@ 0x2d
 800a25c:	700b      	strb	r3, [r1, #0]
 800a25e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a260:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a264:	4691      	mov	r9, r2
 800a266:	f023 0820 	bic.w	r8, r3, #32
 800a26a:	bfbc      	itt	lt
 800a26c:	4632      	movlt	r2, r6
 800a26e:	4616      	movlt	r6, r2
 800a270:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a274:	d005      	beq.n	800a282 <__cvt+0x42>
 800a276:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a27a:	d100      	bne.n	800a27e <__cvt+0x3e>
 800a27c:	3401      	adds	r4, #1
 800a27e:	2102      	movs	r1, #2
 800a280:	e000      	b.n	800a284 <__cvt+0x44>
 800a282:	2103      	movs	r1, #3
 800a284:	ab03      	add	r3, sp, #12
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	ab02      	add	r3, sp, #8
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	ec47 6b10 	vmov	d0, r6, r7
 800a290:	4653      	mov	r3, sl
 800a292:	4622      	mov	r2, r4
 800a294:	f001 f8b8 	bl	800b408 <_dtoa_r>
 800a298:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a29c:	4605      	mov	r5, r0
 800a29e:	d119      	bne.n	800a2d4 <__cvt+0x94>
 800a2a0:	f019 0f01 	tst.w	r9, #1
 800a2a4:	d00e      	beq.n	800a2c4 <__cvt+0x84>
 800a2a6:	eb00 0904 	add.w	r9, r0, r4
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	4639      	mov	r1, r7
 800a2b2:	f7f6 fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2b6:	b108      	cbz	r0, 800a2bc <__cvt+0x7c>
 800a2b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2bc:	2230      	movs	r2, #48	@ 0x30
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	454b      	cmp	r3, r9
 800a2c2:	d31e      	bcc.n	800a302 <__cvt+0xc2>
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2c8:	1b5b      	subs	r3, r3, r5
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	6013      	str	r3, [r2, #0]
 800a2ce:	b004      	add	sp, #16
 800a2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2d8:	eb00 0904 	add.w	r9, r0, r4
 800a2dc:	d1e5      	bne.n	800a2aa <__cvt+0x6a>
 800a2de:	7803      	ldrb	r3, [r0, #0]
 800a2e0:	2b30      	cmp	r3, #48	@ 0x30
 800a2e2:	d10a      	bne.n	800a2fa <__cvt+0xba>
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f7f6 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2f0:	b918      	cbnz	r0, 800a2fa <__cvt+0xba>
 800a2f2:	f1c4 0401 	rsb	r4, r4, #1
 800a2f6:	f8ca 4000 	str.w	r4, [sl]
 800a2fa:	f8da 3000 	ldr.w	r3, [sl]
 800a2fe:	4499      	add	r9, r3
 800a300:	e7d3      	b.n	800a2aa <__cvt+0x6a>
 800a302:	1c59      	adds	r1, r3, #1
 800a304:	9103      	str	r1, [sp, #12]
 800a306:	701a      	strb	r2, [r3, #0]
 800a308:	e7d9      	b.n	800a2be <__cvt+0x7e>

0800a30a <__exponent>:
 800a30a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a30c:	2900      	cmp	r1, #0
 800a30e:	bfba      	itte	lt
 800a310:	4249      	neglt	r1, r1
 800a312:	232d      	movlt	r3, #45	@ 0x2d
 800a314:	232b      	movge	r3, #43	@ 0x2b
 800a316:	2909      	cmp	r1, #9
 800a318:	7002      	strb	r2, [r0, #0]
 800a31a:	7043      	strb	r3, [r0, #1]
 800a31c:	dd29      	ble.n	800a372 <__exponent+0x68>
 800a31e:	f10d 0307 	add.w	r3, sp, #7
 800a322:	461d      	mov	r5, r3
 800a324:	270a      	movs	r7, #10
 800a326:	461a      	mov	r2, r3
 800a328:	fbb1 f6f7 	udiv	r6, r1, r7
 800a32c:	fb07 1416 	mls	r4, r7, r6, r1
 800a330:	3430      	adds	r4, #48	@ 0x30
 800a332:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a336:	460c      	mov	r4, r1
 800a338:	2c63      	cmp	r4, #99	@ 0x63
 800a33a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a33e:	4631      	mov	r1, r6
 800a340:	dcf1      	bgt.n	800a326 <__exponent+0x1c>
 800a342:	3130      	adds	r1, #48	@ 0x30
 800a344:	1e94      	subs	r4, r2, #2
 800a346:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a34a:	1c41      	adds	r1, r0, #1
 800a34c:	4623      	mov	r3, r4
 800a34e:	42ab      	cmp	r3, r5
 800a350:	d30a      	bcc.n	800a368 <__exponent+0x5e>
 800a352:	f10d 0309 	add.w	r3, sp, #9
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	42ac      	cmp	r4, r5
 800a35a:	bf88      	it	hi
 800a35c:	2300      	movhi	r3, #0
 800a35e:	3302      	adds	r3, #2
 800a360:	4403      	add	r3, r0
 800a362:	1a18      	subs	r0, r3, r0
 800a364:	b003      	add	sp, #12
 800a366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a368:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a36c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a370:	e7ed      	b.n	800a34e <__exponent+0x44>
 800a372:	2330      	movs	r3, #48	@ 0x30
 800a374:	3130      	adds	r1, #48	@ 0x30
 800a376:	7083      	strb	r3, [r0, #2]
 800a378:	70c1      	strb	r1, [r0, #3]
 800a37a:	1d03      	adds	r3, r0, #4
 800a37c:	e7f1      	b.n	800a362 <__exponent+0x58>
	...

0800a380 <_printf_float>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	b08d      	sub	sp, #52	@ 0x34
 800a386:	460c      	mov	r4, r1
 800a388:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a38c:	4616      	mov	r6, r2
 800a38e:	461f      	mov	r7, r3
 800a390:	4605      	mov	r5, r0
 800a392:	f000 ff31 	bl	800b1f8 <_localeconv_r>
 800a396:	6803      	ldr	r3, [r0, #0]
 800a398:	9304      	str	r3, [sp, #16]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7f5 ff68 	bl	8000270 <strlen>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a3a8:	9005      	str	r0, [sp, #20]
 800a3aa:	3307      	adds	r3, #7
 800a3ac:	f023 0307 	bic.w	r3, r3, #7
 800a3b0:	f103 0208 	add.w	r2, r3, #8
 800a3b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a3b8:	f8d4 b000 	ldr.w	fp, [r4]
 800a3bc:	f8c8 2000 	str.w	r2, [r8]
 800a3c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a3c8:	9307      	str	r3, [sp, #28]
 800a3ca:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a3d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3d6:	4b9c      	ldr	r3, [pc, #624]	@ (800a648 <_printf_float+0x2c8>)
 800a3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3dc:	f7f6 fba6 	bl	8000b2c <__aeabi_dcmpun>
 800a3e0:	bb70      	cbnz	r0, 800a440 <_printf_float+0xc0>
 800a3e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3e6:	4b98      	ldr	r3, [pc, #608]	@ (800a648 <_printf_float+0x2c8>)
 800a3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ec:	f7f6 fb80 	bl	8000af0 <__aeabi_dcmple>
 800a3f0:	bb30      	cbnz	r0, 800a440 <_printf_float+0xc0>
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	f7f6 fb6f 	bl	8000adc <__aeabi_dcmplt>
 800a3fe:	b110      	cbz	r0, 800a406 <_printf_float+0x86>
 800a400:	232d      	movs	r3, #45	@ 0x2d
 800a402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a406:	4a91      	ldr	r2, [pc, #580]	@ (800a64c <_printf_float+0x2cc>)
 800a408:	4b91      	ldr	r3, [pc, #580]	@ (800a650 <_printf_float+0x2d0>)
 800a40a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a40e:	bf8c      	ite	hi
 800a410:	4690      	movhi	r8, r2
 800a412:	4698      	movls	r8, r3
 800a414:	2303      	movs	r3, #3
 800a416:	6123      	str	r3, [r4, #16]
 800a418:	f02b 0304 	bic.w	r3, fp, #4
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	f04f 0900 	mov.w	r9, #0
 800a422:	9700      	str	r7, [sp, #0]
 800a424:	4633      	mov	r3, r6
 800a426:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a428:	4621      	mov	r1, r4
 800a42a:	4628      	mov	r0, r5
 800a42c:	f000 f9d2 	bl	800a7d4 <_printf_common>
 800a430:	3001      	adds	r0, #1
 800a432:	f040 808d 	bne.w	800a550 <_printf_float+0x1d0>
 800a436:	f04f 30ff 	mov.w	r0, #4294967295
 800a43a:	b00d      	add	sp, #52	@ 0x34
 800a43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a440:	4642      	mov	r2, r8
 800a442:	464b      	mov	r3, r9
 800a444:	4640      	mov	r0, r8
 800a446:	4649      	mov	r1, r9
 800a448:	f7f6 fb70 	bl	8000b2c <__aeabi_dcmpun>
 800a44c:	b140      	cbz	r0, 800a460 <_printf_float+0xe0>
 800a44e:	464b      	mov	r3, r9
 800a450:	2b00      	cmp	r3, #0
 800a452:	bfbc      	itt	lt
 800a454:	232d      	movlt	r3, #45	@ 0x2d
 800a456:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a45a:	4a7e      	ldr	r2, [pc, #504]	@ (800a654 <_printf_float+0x2d4>)
 800a45c:	4b7e      	ldr	r3, [pc, #504]	@ (800a658 <_printf_float+0x2d8>)
 800a45e:	e7d4      	b.n	800a40a <_printf_float+0x8a>
 800a460:	6863      	ldr	r3, [r4, #4]
 800a462:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a466:	9206      	str	r2, [sp, #24]
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	d13b      	bne.n	800a4e4 <_printf_float+0x164>
 800a46c:	2306      	movs	r3, #6
 800a46e:	6063      	str	r3, [r4, #4]
 800a470:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a474:	2300      	movs	r3, #0
 800a476:	6022      	str	r2, [r4, #0]
 800a478:	9303      	str	r3, [sp, #12]
 800a47a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a47c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a480:	ab09      	add	r3, sp, #36	@ 0x24
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	6861      	ldr	r1, [r4, #4]
 800a486:	ec49 8b10 	vmov	d0, r8, r9
 800a48a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a48e:	4628      	mov	r0, r5
 800a490:	f7ff fed6 	bl	800a240 <__cvt>
 800a494:	9b06      	ldr	r3, [sp, #24]
 800a496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a498:	2b47      	cmp	r3, #71	@ 0x47
 800a49a:	4680      	mov	r8, r0
 800a49c:	d129      	bne.n	800a4f2 <_printf_float+0x172>
 800a49e:	1cc8      	adds	r0, r1, #3
 800a4a0:	db02      	blt.n	800a4a8 <_printf_float+0x128>
 800a4a2:	6863      	ldr	r3, [r4, #4]
 800a4a4:	4299      	cmp	r1, r3
 800a4a6:	dd41      	ble.n	800a52c <_printf_float+0x1ac>
 800a4a8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a4ac:	fa5f fa8a 	uxtb.w	sl, sl
 800a4b0:	3901      	subs	r1, #1
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a4b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4ba:	f7ff ff26 	bl	800a30a <__exponent>
 800a4be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4c0:	1813      	adds	r3, r2, r0
 800a4c2:	2a01      	cmp	r2, #1
 800a4c4:	4681      	mov	r9, r0
 800a4c6:	6123      	str	r3, [r4, #16]
 800a4c8:	dc02      	bgt.n	800a4d0 <_printf_float+0x150>
 800a4ca:	6822      	ldr	r2, [r4, #0]
 800a4cc:	07d2      	lsls	r2, r2, #31
 800a4ce:	d501      	bpl.n	800a4d4 <_printf_float+0x154>
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	6123      	str	r3, [r4, #16]
 800a4d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d0a2      	beq.n	800a422 <_printf_float+0xa2>
 800a4dc:	232d      	movs	r3, #45	@ 0x2d
 800a4de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4e2:	e79e      	b.n	800a422 <_printf_float+0xa2>
 800a4e4:	9a06      	ldr	r2, [sp, #24]
 800a4e6:	2a47      	cmp	r2, #71	@ 0x47
 800a4e8:	d1c2      	bne.n	800a470 <_printf_float+0xf0>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1c0      	bne.n	800a470 <_printf_float+0xf0>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e7bd      	b.n	800a46e <_printf_float+0xee>
 800a4f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a4f6:	d9db      	bls.n	800a4b0 <_printf_float+0x130>
 800a4f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a4fc:	d118      	bne.n	800a530 <_printf_float+0x1b0>
 800a4fe:	2900      	cmp	r1, #0
 800a500:	6863      	ldr	r3, [r4, #4]
 800a502:	dd0b      	ble.n	800a51c <_printf_float+0x19c>
 800a504:	6121      	str	r1, [r4, #16]
 800a506:	b913      	cbnz	r3, 800a50e <_printf_float+0x18e>
 800a508:	6822      	ldr	r2, [r4, #0]
 800a50a:	07d0      	lsls	r0, r2, #31
 800a50c:	d502      	bpl.n	800a514 <_printf_float+0x194>
 800a50e:	3301      	adds	r3, #1
 800a510:	440b      	add	r3, r1
 800a512:	6123      	str	r3, [r4, #16]
 800a514:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a516:	f04f 0900 	mov.w	r9, #0
 800a51a:	e7db      	b.n	800a4d4 <_printf_float+0x154>
 800a51c:	b913      	cbnz	r3, 800a524 <_printf_float+0x1a4>
 800a51e:	6822      	ldr	r2, [r4, #0]
 800a520:	07d2      	lsls	r2, r2, #31
 800a522:	d501      	bpl.n	800a528 <_printf_float+0x1a8>
 800a524:	3302      	adds	r3, #2
 800a526:	e7f4      	b.n	800a512 <_printf_float+0x192>
 800a528:	2301      	movs	r3, #1
 800a52a:	e7f2      	b.n	800a512 <_printf_float+0x192>
 800a52c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a532:	4299      	cmp	r1, r3
 800a534:	db05      	blt.n	800a542 <_printf_float+0x1c2>
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	6121      	str	r1, [r4, #16]
 800a53a:	07d8      	lsls	r0, r3, #31
 800a53c:	d5ea      	bpl.n	800a514 <_printf_float+0x194>
 800a53e:	1c4b      	adds	r3, r1, #1
 800a540:	e7e7      	b.n	800a512 <_printf_float+0x192>
 800a542:	2900      	cmp	r1, #0
 800a544:	bfd4      	ite	le
 800a546:	f1c1 0202 	rsble	r2, r1, #2
 800a54a:	2201      	movgt	r2, #1
 800a54c:	4413      	add	r3, r2
 800a54e:	e7e0      	b.n	800a512 <_printf_float+0x192>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	055a      	lsls	r2, r3, #21
 800a554:	d407      	bmi.n	800a566 <_printf_float+0x1e6>
 800a556:	6923      	ldr	r3, [r4, #16]
 800a558:	4642      	mov	r2, r8
 800a55a:	4631      	mov	r1, r6
 800a55c:	4628      	mov	r0, r5
 800a55e:	47b8      	blx	r7
 800a560:	3001      	adds	r0, #1
 800a562:	d12b      	bne.n	800a5bc <_printf_float+0x23c>
 800a564:	e767      	b.n	800a436 <_printf_float+0xb6>
 800a566:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a56a:	f240 80dd 	bls.w	800a728 <_printf_float+0x3a8>
 800a56e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a572:	2200      	movs	r2, #0
 800a574:	2300      	movs	r3, #0
 800a576:	f7f6 faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d033      	beq.n	800a5e6 <_printf_float+0x266>
 800a57e:	4a37      	ldr	r2, [pc, #220]	@ (800a65c <_printf_float+0x2dc>)
 800a580:	2301      	movs	r3, #1
 800a582:	4631      	mov	r1, r6
 800a584:	4628      	mov	r0, r5
 800a586:	47b8      	blx	r7
 800a588:	3001      	adds	r0, #1
 800a58a:	f43f af54 	beq.w	800a436 <_printf_float+0xb6>
 800a58e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a592:	4543      	cmp	r3, r8
 800a594:	db02      	blt.n	800a59c <_printf_float+0x21c>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	07d8      	lsls	r0, r3, #31
 800a59a:	d50f      	bpl.n	800a5bc <_printf_float+0x23c>
 800a59c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	f43f af45 	beq.w	800a436 <_printf_float+0xb6>
 800a5ac:	f04f 0900 	mov.w	r9, #0
 800a5b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a5b4:	f104 0a1a 	add.w	sl, r4, #26
 800a5b8:	45c8      	cmp	r8, r9
 800a5ba:	dc09      	bgt.n	800a5d0 <_printf_float+0x250>
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	079b      	lsls	r3, r3, #30
 800a5c0:	f100 8103 	bmi.w	800a7ca <_printf_float+0x44a>
 800a5c4:	68e0      	ldr	r0, [r4, #12]
 800a5c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5c8:	4298      	cmp	r0, r3
 800a5ca:	bfb8      	it	lt
 800a5cc:	4618      	movlt	r0, r3
 800a5ce:	e734      	b.n	800a43a <_printf_float+0xba>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	4652      	mov	r2, sl
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	47b8      	blx	r7
 800a5da:	3001      	adds	r0, #1
 800a5dc:	f43f af2b 	beq.w	800a436 <_printf_float+0xb6>
 800a5e0:	f109 0901 	add.w	r9, r9, #1
 800a5e4:	e7e8      	b.n	800a5b8 <_printf_float+0x238>
 800a5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	dc39      	bgt.n	800a660 <_printf_float+0x2e0>
 800a5ec:	4a1b      	ldr	r2, [pc, #108]	@ (800a65c <_printf_float+0x2dc>)
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	4631      	mov	r1, r6
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	47b8      	blx	r7
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	f43f af1d 	beq.w	800a436 <_printf_float+0xb6>
 800a5fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a600:	ea59 0303 	orrs.w	r3, r9, r3
 800a604:	d102      	bne.n	800a60c <_printf_float+0x28c>
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	07d9      	lsls	r1, r3, #31
 800a60a:	d5d7      	bpl.n	800a5bc <_printf_float+0x23c>
 800a60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a610:	4631      	mov	r1, r6
 800a612:	4628      	mov	r0, r5
 800a614:	47b8      	blx	r7
 800a616:	3001      	adds	r0, #1
 800a618:	f43f af0d 	beq.w	800a436 <_printf_float+0xb6>
 800a61c:	f04f 0a00 	mov.w	sl, #0
 800a620:	f104 0b1a 	add.w	fp, r4, #26
 800a624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a626:	425b      	negs	r3, r3
 800a628:	4553      	cmp	r3, sl
 800a62a:	dc01      	bgt.n	800a630 <_printf_float+0x2b0>
 800a62c:	464b      	mov	r3, r9
 800a62e:	e793      	b.n	800a558 <_printf_float+0x1d8>
 800a630:	2301      	movs	r3, #1
 800a632:	465a      	mov	r2, fp
 800a634:	4631      	mov	r1, r6
 800a636:	4628      	mov	r0, r5
 800a638:	47b8      	blx	r7
 800a63a:	3001      	adds	r0, #1
 800a63c:	f43f aefb 	beq.w	800a436 <_printf_float+0xb6>
 800a640:	f10a 0a01 	add.w	sl, sl, #1
 800a644:	e7ee      	b.n	800a624 <_printf_float+0x2a4>
 800a646:	bf00      	nop
 800a648:	7fefffff 	.word	0x7fefffff
 800a64c:	08028de0 	.word	0x08028de0
 800a650:	08028ddc 	.word	0x08028ddc
 800a654:	08028de8 	.word	0x08028de8
 800a658:	08028de4 	.word	0x08028de4
 800a65c:	08028dec 	.word	0x08028dec
 800a660:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a662:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a666:	4553      	cmp	r3, sl
 800a668:	bfa8      	it	ge
 800a66a:	4653      	movge	r3, sl
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	4699      	mov	r9, r3
 800a670:	dc36      	bgt.n	800a6e0 <_printf_float+0x360>
 800a672:	f04f 0b00 	mov.w	fp, #0
 800a676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a67a:	f104 021a 	add.w	r2, r4, #26
 800a67e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a680:	9306      	str	r3, [sp, #24]
 800a682:	eba3 0309 	sub.w	r3, r3, r9
 800a686:	455b      	cmp	r3, fp
 800a688:	dc31      	bgt.n	800a6ee <_printf_float+0x36e>
 800a68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a68c:	459a      	cmp	sl, r3
 800a68e:	dc3a      	bgt.n	800a706 <_printf_float+0x386>
 800a690:	6823      	ldr	r3, [r4, #0]
 800a692:	07da      	lsls	r2, r3, #31
 800a694:	d437      	bmi.n	800a706 <_printf_float+0x386>
 800a696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a698:	ebaa 0903 	sub.w	r9, sl, r3
 800a69c:	9b06      	ldr	r3, [sp, #24]
 800a69e:	ebaa 0303 	sub.w	r3, sl, r3
 800a6a2:	4599      	cmp	r9, r3
 800a6a4:	bfa8      	it	ge
 800a6a6:	4699      	movge	r9, r3
 800a6a8:	f1b9 0f00 	cmp.w	r9, #0
 800a6ac:	dc33      	bgt.n	800a716 <_printf_float+0x396>
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6b6:	f104 0b1a 	add.w	fp, r4, #26
 800a6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6bc:	ebaa 0303 	sub.w	r3, sl, r3
 800a6c0:	eba3 0309 	sub.w	r3, r3, r9
 800a6c4:	4543      	cmp	r3, r8
 800a6c6:	f77f af79 	ble.w	800a5bc <_printf_float+0x23c>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	465a      	mov	r2, fp
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	47b8      	blx	r7
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	f43f aeae 	beq.w	800a436 <_printf_float+0xb6>
 800a6da:	f108 0801 	add.w	r8, r8, #1
 800a6de:	e7ec      	b.n	800a6ba <_printf_float+0x33a>
 800a6e0:	4642      	mov	r2, r8
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	47b8      	blx	r7
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d1c2      	bne.n	800a672 <_printf_float+0x2f2>
 800a6ec:	e6a3      	b.n	800a436 <_printf_float+0xb6>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	9206      	str	r2, [sp, #24]
 800a6f6:	47b8      	blx	r7
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	f43f ae9c 	beq.w	800a436 <_printf_float+0xb6>
 800a6fe:	9a06      	ldr	r2, [sp, #24]
 800a700:	f10b 0b01 	add.w	fp, fp, #1
 800a704:	e7bb      	b.n	800a67e <_printf_float+0x2fe>
 800a706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a70a:	4631      	mov	r1, r6
 800a70c:	4628      	mov	r0, r5
 800a70e:	47b8      	blx	r7
 800a710:	3001      	adds	r0, #1
 800a712:	d1c0      	bne.n	800a696 <_printf_float+0x316>
 800a714:	e68f      	b.n	800a436 <_printf_float+0xb6>
 800a716:	9a06      	ldr	r2, [sp, #24]
 800a718:	464b      	mov	r3, r9
 800a71a:	4442      	add	r2, r8
 800a71c:	4631      	mov	r1, r6
 800a71e:	4628      	mov	r0, r5
 800a720:	47b8      	blx	r7
 800a722:	3001      	adds	r0, #1
 800a724:	d1c3      	bne.n	800a6ae <_printf_float+0x32e>
 800a726:	e686      	b.n	800a436 <_printf_float+0xb6>
 800a728:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a72c:	f1ba 0f01 	cmp.w	sl, #1
 800a730:	dc01      	bgt.n	800a736 <_printf_float+0x3b6>
 800a732:	07db      	lsls	r3, r3, #31
 800a734:	d536      	bpl.n	800a7a4 <_printf_float+0x424>
 800a736:	2301      	movs	r3, #1
 800a738:	4642      	mov	r2, r8
 800a73a:	4631      	mov	r1, r6
 800a73c:	4628      	mov	r0, r5
 800a73e:	47b8      	blx	r7
 800a740:	3001      	adds	r0, #1
 800a742:	f43f ae78 	beq.w	800a436 <_printf_float+0xb6>
 800a746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a74a:	4631      	mov	r1, r6
 800a74c:	4628      	mov	r0, r5
 800a74e:	47b8      	blx	r7
 800a750:	3001      	adds	r0, #1
 800a752:	f43f ae70 	beq.w	800a436 <_printf_float+0xb6>
 800a756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a75a:	2200      	movs	r2, #0
 800a75c:	2300      	movs	r3, #0
 800a75e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a762:	f7f6 f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a766:	b9c0      	cbnz	r0, 800a79a <_printf_float+0x41a>
 800a768:	4653      	mov	r3, sl
 800a76a:	f108 0201 	add.w	r2, r8, #1
 800a76e:	4631      	mov	r1, r6
 800a770:	4628      	mov	r0, r5
 800a772:	47b8      	blx	r7
 800a774:	3001      	adds	r0, #1
 800a776:	d10c      	bne.n	800a792 <_printf_float+0x412>
 800a778:	e65d      	b.n	800a436 <_printf_float+0xb6>
 800a77a:	2301      	movs	r3, #1
 800a77c:	465a      	mov	r2, fp
 800a77e:	4631      	mov	r1, r6
 800a780:	4628      	mov	r0, r5
 800a782:	47b8      	blx	r7
 800a784:	3001      	adds	r0, #1
 800a786:	f43f ae56 	beq.w	800a436 <_printf_float+0xb6>
 800a78a:	f108 0801 	add.w	r8, r8, #1
 800a78e:	45d0      	cmp	r8, sl
 800a790:	dbf3      	blt.n	800a77a <_printf_float+0x3fa>
 800a792:	464b      	mov	r3, r9
 800a794:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a798:	e6df      	b.n	800a55a <_printf_float+0x1da>
 800a79a:	f04f 0800 	mov.w	r8, #0
 800a79e:	f104 0b1a 	add.w	fp, r4, #26
 800a7a2:	e7f4      	b.n	800a78e <_printf_float+0x40e>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	4642      	mov	r2, r8
 800a7a8:	e7e1      	b.n	800a76e <_printf_float+0x3ee>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	464a      	mov	r2, r9
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	47b8      	blx	r7
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	f43f ae3e 	beq.w	800a436 <_printf_float+0xb6>
 800a7ba:	f108 0801 	add.w	r8, r8, #1
 800a7be:	68e3      	ldr	r3, [r4, #12]
 800a7c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7c2:	1a5b      	subs	r3, r3, r1
 800a7c4:	4543      	cmp	r3, r8
 800a7c6:	dcf0      	bgt.n	800a7aa <_printf_float+0x42a>
 800a7c8:	e6fc      	b.n	800a5c4 <_printf_float+0x244>
 800a7ca:	f04f 0800 	mov.w	r8, #0
 800a7ce:	f104 0919 	add.w	r9, r4, #25
 800a7d2:	e7f4      	b.n	800a7be <_printf_float+0x43e>

0800a7d4 <_printf_common>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	4616      	mov	r6, r2
 800a7da:	4698      	mov	r8, r3
 800a7dc:	688a      	ldr	r2, [r1, #8]
 800a7de:	690b      	ldr	r3, [r1, #16]
 800a7e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	bfb8      	it	lt
 800a7e8:	4613      	movlt	r3, r2
 800a7ea:	6033      	str	r3, [r6, #0]
 800a7ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	b10a      	cbz	r2, 800a7fa <_printf_common+0x26>
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	6033      	str	r3, [r6, #0]
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	0699      	lsls	r1, r3, #26
 800a7fe:	bf42      	ittt	mi
 800a800:	6833      	ldrmi	r3, [r6, #0]
 800a802:	3302      	addmi	r3, #2
 800a804:	6033      	strmi	r3, [r6, #0]
 800a806:	6825      	ldr	r5, [r4, #0]
 800a808:	f015 0506 	ands.w	r5, r5, #6
 800a80c:	d106      	bne.n	800a81c <_printf_common+0x48>
 800a80e:	f104 0a19 	add.w	sl, r4, #25
 800a812:	68e3      	ldr	r3, [r4, #12]
 800a814:	6832      	ldr	r2, [r6, #0]
 800a816:	1a9b      	subs	r3, r3, r2
 800a818:	42ab      	cmp	r3, r5
 800a81a:	dc26      	bgt.n	800a86a <_printf_common+0x96>
 800a81c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a820:	6822      	ldr	r2, [r4, #0]
 800a822:	3b00      	subs	r3, #0
 800a824:	bf18      	it	ne
 800a826:	2301      	movne	r3, #1
 800a828:	0692      	lsls	r2, r2, #26
 800a82a:	d42b      	bmi.n	800a884 <_printf_common+0xb0>
 800a82c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a830:	4641      	mov	r1, r8
 800a832:	4638      	mov	r0, r7
 800a834:	47c8      	blx	r9
 800a836:	3001      	adds	r0, #1
 800a838:	d01e      	beq.n	800a878 <_printf_common+0xa4>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	6922      	ldr	r2, [r4, #16]
 800a83e:	f003 0306 	and.w	r3, r3, #6
 800a842:	2b04      	cmp	r3, #4
 800a844:	bf02      	ittt	eq
 800a846:	68e5      	ldreq	r5, [r4, #12]
 800a848:	6833      	ldreq	r3, [r6, #0]
 800a84a:	1aed      	subeq	r5, r5, r3
 800a84c:	68a3      	ldr	r3, [r4, #8]
 800a84e:	bf0c      	ite	eq
 800a850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a854:	2500      	movne	r5, #0
 800a856:	4293      	cmp	r3, r2
 800a858:	bfc4      	itt	gt
 800a85a:	1a9b      	subgt	r3, r3, r2
 800a85c:	18ed      	addgt	r5, r5, r3
 800a85e:	2600      	movs	r6, #0
 800a860:	341a      	adds	r4, #26
 800a862:	42b5      	cmp	r5, r6
 800a864:	d11a      	bne.n	800a89c <_printf_common+0xc8>
 800a866:	2000      	movs	r0, #0
 800a868:	e008      	b.n	800a87c <_printf_common+0xa8>
 800a86a:	2301      	movs	r3, #1
 800a86c:	4652      	mov	r2, sl
 800a86e:	4641      	mov	r1, r8
 800a870:	4638      	mov	r0, r7
 800a872:	47c8      	blx	r9
 800a874:	3001      	adds	r0, #1
 800a876:	d103      	bne.n	800a880 <_printf_common+0xac>
 800a878:	f04f 30ff 	mov.w	r0, #4294967295
 800a87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a880:	3501      	adds	r5, #1
 800a882:	e7c6      	b.n	800a812 <_printf_common+0x3e>
 800a884:	18e1      	adds	r1, r4, r3
 800a886:	1c5a      	adds	r2, r3, #1
 800a888:	2030      	movs	r0, #48	@ 0x30
 800a88a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a88e:	4422      	add	r2, r4
 800a890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a898:	3302      	adds	r3, #2
 800a89a:	e7c7      	b.n	800a82c <_printf_common+0x58>
 800a89c:	2301      	movs	r3, #1
 800a89e:	4622      	mov	r2, r4
 800a8a0:	4641      	mov	r1, r8
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	47c8      	blx	r9
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	d0e6      	beq.n	800a878 <_printf_common+0xa4>
 800a8aa:	3601      	adds	r6, #1
 800a8ac:	e7d9      	b.n	800a862 <_printf_common+0x8e>
	...

0800a8b0 <_printf_i>:
 800a8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b4:	7e0f      	ldrb	r7, [r1, #24]
 800a8b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8b8:	2f78      	cmp	r7, #120	@ 0x78
 800a8ba:	4691      	mov	r9, r2
 800a8bc:	4680      	mov	r8, r0
 800a8be:	460c      	mov	r4, r1
 800a8c0:	469a      	mov	sl, r3
 800a8c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8c6:	d807      	bhi.n	800a8d8 <_printf_i+0x28>
 800a8c8:	2f62      	cmp	r7, #98	@ 0x62
 800a8ca:	d80a      	bhi.n	800a8e2 <_printf_i+0x32>
 800a8cc:	2f00      	cmp	r7, #0
 800a8ce:	f000 80d1 	beq.w	800aa74 <_printf_i+0x1c4>
 800a8d2:	2f58      	cmp	r7, #88	@ 0x58
 800a8d4:	f000 80b8 	beq.w	800aa48 <_printf_i+0x198>
 800a8d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8e0:	e03a      	b.n	800a958 <_printf_i+0xa8>
 800a8e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8e6:	2b15      	cmp	r3, #21
 800a8e8:	d8f6      	bhi.n	800a8d8 <_printf_i+0x28>
 800a8ea:	a101      	add	r1, pc, #4	@ (adr r1, 800a8f0 <_printf_i+0x40>)
 800a8ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8f0:	0800a949 	.word	0x0800a949
 800a8f4:	0800a95d 	.word	0x0800a95d
 800a8f8:	0800a8d9 	.word	0x0800a8d9
 800a8fc:	0800a8d9 	.word	0x0800a8d9
 800a900:	0800a8d9 	.word	0x0800a8d9
 800a904:	0800a8d9 	.word	0x0800a8d9
 800a908:	0800a95d 	.word	0x0800a95d
 800a90c:	0800a8d9 	.word	0x0800a8d9
 800a910:	0800a8d9 	.word	0x0800a8d9
 800a914:	0800a8d9 	.word	0x0800a8d9
 800a918:	0800a8d9 	.word	0x0800a8d9
 800a91c:	0800aa5b 	.word	0x0800aa5b
 800a920:	0800a987 	.word	0x0800a987
 800a924:	0800aa15 	.word	0x0800aa15
 800a928:	0800a8d9 	.word	0x0800a8d9
 800a92c:	0800a8d9 	.word	0x0800a8d9
 800a930:	0800aa7d 	.word	0x0800aa7d
 800a934:	0800a8d9 	.word	0x0800a8d9
 800a938:	0800a987 	.word	0x0800a987
 800a93c:	0800a8d9 	.word	0x0800a8d9
 800a940:	0800a8d9 	.word	0x0800a8d9
 800a944:	0800aa1d 	.word	0x0800aa1d
 800a948:	6833      	ldr	r3, [r6, #0]
 800a94a:	1d1a      	adds	r2, r3, #4
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6032      	str	r2, [r6, #0]
 800a950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a958:	2301      	movs	r3, #1
 800a95a:	e09c      	b.n	800aa96 <_printf_i+0x1e6>
 800a95c:	6833      	ldr	r3, [r6, #0]
 800a95e:	6820      	ldr	r0, [r4, #0]
 800a960:	1d19      	adds	r1, r3, #4
 800a962:	6031      	str	r1, [r6, #0]
 800a964:	0606      	lsls	r6, r0, #24
 800a966:	d501      	bpl.n	800a96c <_printf_i+0xbc>
 800a968:	681d      	ldr	r5, [r3, #0]
 800a96a:	e003      	b.n	800a974 <_printf_i+0xc4>
 800a96c:	0645      	lsls	r5, r0, #25
 800a96e:	d5fb      	bpl.n	800a968 <_printf_i+0xb8>
 800a970:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a974:	2d00      	cmp	r5, #0
 800a976:	da03      	bge.n	800a980 <_printf_i+0xd0>
 800a978:	232d      	movs	r3, #45	@ 0x2d
 800a97a:	426d      	negs	r5, r5
 800a97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a980:	4858      	ldr	r0, [pc, #352]	@ (800aae4 <_printf_i+0x234>)
 800a982:	230a      	movs	r3, #10
 800a984:	e011      	b.n	800a9aa <_printf_i+0xfa>
 800a986:	6821      	ldr	r1, [r4, #0]
 800a988:	6833      	ldr	r3, [r6, #0]
 800a98a:	0608      	lsls	r0, r1, #24
 800a98c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a990:	d402      	bmi.n	800a998 <_printf_i+0xe8>
 800a992:	0649      	lsls	r1, r1, #25
 800a994:	bf48      	it	mi
 800a996:	b2ad      	uxthmi	r5, r5
 800a998:	2f6f      	cmp	r7, #111	@ 0x6f
 800a99a:	4852      	ldr	r0, [pc, #328]	@ (800aae4 <_printf_i+0x234>)
 800a99c:	6033      	str	r3, [r6, #0]
 800a99e:	bf14      	ite	ne
 800a9a0:	230a      	movne	r3, #10
 800a9a2:	2308      	moveq	r3, #8
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9aa:	6866      	ldr	r6, [r4, #4]
 800a9ac:	60a6      	str	r6, [r4, #8]
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	db05      	blt.n	800a9be <_printf_i+0x10e>
 800a9b2:	6821      	ldr	r1, [r4, #0]
 800a9b4:	432e      	orrs	r6, r5
 800a9b6:	f021 0104 	bic.w	r1, r1, #4
 800a9ba:	6021      	str	r1, [r4, #0]
 800a9bc:	d04b      	beq.n	800aa56 <_printf_i+0x1a6>
 800a9be:	4616      	mov	r6, r2
 800a9c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9c4:	fb03 5711 	mls	r7, r3, r1, r5
 800a9c8:	5dc7      	ldrb	r7, [r0, r7]
 800a9ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9ce:	462f      	mov	r7, r5
 800a9d0:	42bb      	cmp	r3, r7
 800a9d2:	460d      	mov	r5, r1
 800a9d4:	d9f4      	bls.n	800a9c0 <_printf_i+0x110>
 800a9d6:	2b08      	cmp	r3, #8
 800a9d8:	d10b      	bne.n	800a9f2 <_printf_i+0x142>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	07df      	lsls	r7, r3, #31
 800a9de:	d508      	bpl.n	800a9f2 <_printf_i+0x142>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	6861      	ldr	r1, [r4, #4]
 800a9e4:	4299      	cmp	r1, r3
 800a9e6:	bfde      	ittt	le
 800a9e8:	2330      	movle	r3, #48	@ 0x30
 800a9ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9f2:	1b92      	subs	r2, r2, r6
 800a9f4:	6122      	str	r2, [r4, #16]
 800a9f6:	f8cd a000 	str.w	sl, [sp]
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	aa03      	add	r2, sp, #12
 800a9fe:	4621      	mov	r1, r4
 800aa00:	4640      	mov	r0, r8
 800aa02:	f7ff fee7 	bl	800a7d4 <_printf_common>
 800aa06:	3001      	adds	r0, #1
 800aa08:	d14a      	bne.n	800aaa0 <_printf_i+0x1f0>
 800aa0a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0e:	b004      	add	sp, #16
 800aa10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	f043 0320 	orr.w	r3, r3, #32
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	4832      	ldr	r0, [pc, #200]	@ (800aae8 <_printf_i+0x238>)
 800aa1e:	2778      	movs	r7, #120	@ 0x78
 800aa20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	6831      	ldr	r1, [r6, #0]
 800aa28:	061f      	lsls	r7, r3, #24
 800aa2a:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa2e:	d402      	bmi.n	800aa36 <_printf_i+0x186>
 800aa30:	065f      	lsls	r7, r3, #25
 800aa32:	bf48      	it	mi
 800aa34:	b2ad      	uxthmi	r5, r5
 800aa36:	6031      	str	r1, [r6, #0]
 800aa38:	07d9      	lsls	r1, r3, #31
 800aa3a:	bf44      	itt	mi
 800aa3c:	f043 0320 	orrmi.w	r3, r3, #32
 800aa40:	6023      	strmi	r3, [r4, #0]
 800aa42:	b11d      	cbz	r5, 800aa4c <_printf_i+0x19c>
 800aa44:	2310      	movs	r3, #16
 800aa46:	e7ad      	b.n	800a9a4 <_printf_i+0xf4>
 800aa48:	4826      	ldr	r0, [pc, #152]	@ (800aae4 <_printf_i+0x234>)
 800aa4a:	e7e9      	b.n	800aa20 <_printf_i+0x170>
 800aa4c:	6823      	ldr	r3, [r4, #0]
 800aa4e:	f023 0320 	bic.w	r3, r3, #32
 800aa52:	6023      	str	r3, [r4, #0]
 800aa54:	e7f6      	b.n	800aa44 <_printf_i+0x194>
 800aa56:	4616      	mov	r6, r2
 800aa58:	e7bd      	b.n	800a9d6 <_printf_i+0x126>
 800aa5a:	6833      	ldr	r3, [r6, #0]
 800aa5c:	6825      	ldr	r5, [r4, #0]
 800aa5e:	6961      	ldr	r1, [r4, #20]
 800aa60:	1d18      	adds	r0, r3, #4
 800aa62:	6030      	str	r0, [r6, #0]
 800aa64:	062e      	lsls	r6, r5, #24
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	d501      	bpl.n	800aa6e <_printf_i+0x1be>
 800aa6a:	6019      	str	r1, [r3, #0]
 800aa6c:	e002      	b.n	800aa74 <_printf_i+0x1c4>
 800aa6e:	0668      	lsls	r0, r5, #25
 800aa70:	d5fb      	bpl.n	800aa6a <_printf_i+0x1ba>
 800aa72:	8019      	strh	r1, [r3, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	6123      	str	r3, [r4, #16]
 800aa78:	4616      	mov	r6, r2
 800aa7a:	e7bc      	b.n	800a9f6 <_printf_i+0x146>
 800aa7c:	6833      	ldr	r3, [r6, #0]
 800aa7e:	1d1a      	adds	r2, r3, #4
 800aa80:	6032      	str	r2, [r6, #0]
 800aa82:	681e      	ldr	r6, [r3, #0]
 800aa84:	6862      	ldr	r2, [r4, #4]
 800aa86:	2100      	movs	r1, #0
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7f5 fba1 	bl	80001d0 <memchr>
 800aa8e:	b108      	cbz	r0, 800aa94 <_printf_i+0x1e4>
 800aa90:	1b80      	subs	r0, r0, r6
 800aa92:	6060      	str	r0, [r4, #4]
 800aa94:	6863      	ldr	r3, [r4, #4]
 800aa96:	6123      	str	r3, [r4, #16]
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa9e:	e7aa      	b.n	800a9f6 <_printf_i+0x146>
 800aaa0:	6923      	ldr	r3, [r4, #16]
 800aaa2:	4632      	mov	r2, r6
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	47d0      	blx	sl
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d0ad      	beq.n	800aa0a <_printf_i+0x15a>
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	079b      	lsls	r3, r3, #30
 800aab2:	d413      	bmi.n	800aadc <_printf_i+0x22c>
 800aab4:	68e0      	ldr	r0, [r4, #12]
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	4298      	cmp	r0, r3
 800aaba:	bfb8      	it	lt
 800aabc:	4618      	movlt	r0, r3
 800aabe:	e7a6      	b.n	800aa0e <_printf_i+0x15e>
 800aac0:	2301      	movs	r3, #1
 800aac2:	4632      	mov	r2, r6
 800aac4:	4649      	mov	r1, r9
 800aac6:	4640      	mov	r0, r8
 800aac8:	47d0      	blx	sl
 800aaca:	3001      	adds	r0, #1
 800aacc:	d09d      	beq.n	800aa0a <_printf_i+0x15a>
 800aace:	3501      	adds	r5, #1
 800aad0:	68e3      	ldr	r3, [r4, #12]
 800aad2:	9903      	ldr	r1, [sp, #12]
 800aad4:	1a5b      	subs	r3, r3, r1
 800aad6:	42ab      	cmp	r3, r5
 800aad8:	dcf2      	bgt.n	800aac0 <_printf_i+0x210>
 800aada:	e7eb      	b.n	800aab4 <_printf_i+0x204>
 800aadc:	2500      	movs	r5, #0
 800aade:	f104 0619 	add.w	r6, r4, #25
 800aae2:	e7f5      	b.n	800aad0 <_printf_i+0x220>
 800aae4:	08028dee 	.word	0x08028dee
 800aae8:	08028dff 	.word	0x08028dff

0800aaec <_scanf_float>:
 800aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf0:	b087      	sub	sp, #28
 800aaf2:	4691      	mov	r9, r2
 800aaf4:	9303      	str	r3, [sp, #12]
 800aaf6:	688b      	ldr	r3, [r1, #8]
 800aaf8:	1e5a      	subs	r2, r3, #1
 800aafa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aafe:	bf81      	itttt	hi
 800ab00:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ab04:	eb03 0b05 	addhi.w	fp, r3, r5
 800ab08:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ab0c:	608b      	strhi	r3, [r1, #8]
 800ab0e:	680b      	ldr	r3, [r1, #0]
 800ab10:	460a      	mov	r2, r1
 800ab12:	f04f 0500 	mov.w	r5, #0
 800ab16:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ab1a:	f842 3b1c 	str.w	r3, [r2], #28
 800ab1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ab22:	4680      	mov	r8, r0
 800ab24:	460c      	mov	r4, r1
 800ab26:	bf98      	it	ls
 800ab28:	f04f 0b00 	movls.w	fp, #0
 800ab2c:	9201      	str	r2, [sp, #4]
 800ab2e:	4616      	mov	r6, r2
 800ab30:	46aa      	mov	sl, r5
 800ab32:	462f      	mov	r7, r5
 800ab34:	9502      	str	r5, [sp, #8]
 800ab36:	68a2      	ldr	r2, [r4, #8]
 800ab38:	b15a      	cbz	r2, 800ab52 <_scanf_float+0x66>
 800ab3a:	f8d9 3000 	ldr.w	r3, [r9]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	2b4e      	cmp	r3, #78	@ 0x4e
 800ab42:	d863      	bhi.n	800ac0c <_scanf_float+0x120>
 800ab44:	2b40      	cmp	r3, #64	@ 0x40
 800ab46:	d83b      	bhi.n	800abc0 <_scanf_float+0xd4>
 800ab48:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ab4c:	b2c8      	uxtb	r0, r1
 800ab4e:	280e      	cmp	r0, #14
 800ab50:	d939      	bls.n	800abc6 <_scanf_float+0xda>
 800ab52:	b11f      	cbz	r7, 800ab5c <_scanf_float+0x70>
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab5a:	6023      	str	r3, [r4, #0]
 800ab5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab60:	f1ba 0f01 	cmp.w	sl, #1
 800ab64:	f200 8114 	bhi.w	800ad90 <_scanf_float+0x2a4>
 800ab68:	9b01      	ldr	r3, [sp, #4]
 800ab6a:	429e      	cmp	r6, r3
 800ab6c:	f200 8105 	bhi.w	800ad7a <_scanf_float+0x28e>
 800ab70:	2001      	movs	r0, #1
 800ab72:	b007      	add	sp, #28
 800ab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab78:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ab7c:	2a0d      	cmp	r2, #13
 800ab7e:	d8e8      	bhi.n	800ab52 <_scanf_float+0x66>
 800ab80:	a101      	add	r1, pc, #4	@ (adr r1, 800ab88 <_scanf_float+0x9c>)
 800ab82:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab86:	bf00      	nop
 800ab88:	0800acd1 	.word	0x0800acd1
 800ab8c:	0800ab53 	.word	0x0800ab53
 800ab90:	0800ab53 	.word	0x0800ab53
 800ab94:	0800ab53 	.word	0x0800ab53
 800ab98:	0800ad2d 	.word	0x0800ad2d
 800ab9c:	0800ad07 	.word	0x0800ad07
 800aba0:	0800ab53 	.word	0x0800ab53
 800aba4:	0800ab53 	.word	0x0800ab53
 800aba8:	0800acdf 	.word	0x0800acdf
 800abac:	0800ab53 	.word	0x0800ab53
 800abb0:	0800ab53 	.word	0x0800ab53
 800abb4:	0800ab53 	.word	0x0800ab53
 800abb8:	0800ab53 	.word	0x0800ab53
 800abbc:	0800ac9b 	.word	0x0800ac9b
 800abc0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800abc4:	e7da      	b.n	800ab7c <_scanf_float+0x90>
 800abc6:	290e      	cmp	r1, #14
 800abc8:	d8c3      	bhi.n	800ab52 <_scanf_float+0x66>
 800abca:	a001      	add	r0, pc, #4	@ (adr r0, 800abd0 <_scanf_float+0xe4>)
 800abcc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800abd0:	0800ac8b 	.word	0x0800ac8b
 800abd4:	0800ab53 	.word	0x0800ab53
 800abd8:	0800ac8b 	.word	0x0800ac8b
 800abdc:	0800ad1b 	.word	0x0800ad1b
 800abe0:	0800ab53 	.word	0x0800ab53
 800abe4:	0800ac2d 	.word	0x0800ac2d
 800abe8:	0800ac71 	.word	0x0800ac71
 800abec:	0800ac71 	.word	0x0800ac71
 800abf0:	0800ac71 	.word	0x0800ac71
 800abf4:	0800ac71 	.word	0x0800ac71
 800abf8:	0800ac71 	.word	0x0800ac71
 800abfc:	0800ac71 	.word	0x0800ac71
 800ac00:	0800ac71 	.word	0x0800ac71
 800ac04:	0800ac71 	.word	0x0800ac71
 800ac08:	0800ac71 	.word	0x0800ac71
 800ac0c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ac0e:	d809      	bhi.n	800ac24 <_scanf_float+0x138>
 800ac10:	2b60      	cmp	r3, #96	@ 0x60
 800ac12:	d8b1      	bhi.n	800ab78 <_scanf_float+0x8c>
 800ac14:	2b54      	cmp	r3, #84	@ 0x54
 800ac16:	d07b      	beq.n	800ad10 <_scanf_float+0x224>
 800ac18:	2b59      	cmp	r3, #89	@ 0x59
 800ac1a:	d19a      	bne.n	800ab52 <_scanf_float+0x66>
 800ac1c:	2d07      	cmp	r5, #7
 800ac1e:	d198      	bne.n	800ab52 <_scanf_float+0x66>
 800ac20:	2508      	movs	r5, #8
 800ac22:	e02f      	b.n	800ac84 <_scanf_float+0x198>
 800ac24:	2b74      	cmp	r3, #116	@ 0x74
 800ac26:	d073      	beq.n	800ad10 <_scanf_float+0x224>
 800ac28:	2b79      	cmp	r3, #121	@ 0x79
 800ac2a:	e7f6      	b.n	800ac1a <_scanf_float+0x12e>
 800ac2c:	6821      	ldr	r1, [r4, #0]
 800ac2e:	05c8      	lsls	r0, r1, #23
 800ac30:	d51e      	bpl.n	800ac70 <_scanf_float+0x184>
 800ac32:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ac36:	6021      	str	r1, [r4, #0]
 800ac38:	3701      	adds	r7, #1
 800ac3a:	f1bb 0f00 	cmp.w	fp, #0
 800ac3e:	d003      	beq.n	800ac48 <_scanf_float+0x15c>
 800ac40:	3201      	adds	r2, #1
 800ac42:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac46:	60a2      	str	r2, [r4, #8]
 800ac48:	68a3      	ldr	r3, [r4, #8]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	60a3      	str	r3, [r4, #8]
 800ac4e:	6923      	ldr	r3, [r4, #16]
 800ac50:	3301      	adds	r3, #1
 800ac52:	6123      	str	r3, [r4, #16]
 800ac54:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f8c9 3004 	str.w	r3, [r9, #4]
 800ac60:	f340 8082 	ble.w	800ad68 <_scanf_float+0x27c>
 800ac64:	f8d9 3000 	ldr.w	r3, [r9]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	f8c9 3000 	str.w	r3, [r9]
 800ac6e:	e762      	b.n	800ab36 <_scanf_float+0x4a>
 800ac70:	eb1a 0105 	adds.w	r1, sl, r5
 800ac74:	f47f af6d 	bne.w	800ab52 <_scanf_float+0x66>
 800ac78:	6822      	ldr	r2, [r4, #0]
 800ac7a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ac7e:	6022      	str	r2, [r4, #0]
 800ac80:	460d      	mov	r5, r1
 800ac82:	468a      	mov	sl, r1
 800ac84:	f806 3b01 	strb.w	r3, [r6], #1
 800ac88:	e7de      	b.n	800ac48 <_scanf_float+0x15c>
 800ac8a:	6822      	ldr	r2, [r4, #0]
 800ac8c:	0610      	lsls	r0, r2, #24
 800ac8e:	f57f af60 	bpl.w	800ab52 <_scanf_float+0x66>
 800ac92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac96:	6022      	str	r2, [r4, #0]
 800ac98:	e7f4      	b.n	800ac84 <_scanf_float+0x198>
 800ac9a:	f1ba 0f00 	cmp.w	sl, #0
 800ac9e:	d10c      	bne.n	800acba <_scanf_float+0x1ce>
 800aca0:	b977      	cbnz	r7, 800acc0 <_scanf_float+0x1d4>
 800aca2:	6822      	ldr	r2, [r4, #0]
 800aca4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aca8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800acac:	d108      	bne.n	800acc0 <_scanf_float+0x1d4>
 800acae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800acb2:	6022      	str	r2, [r4, #0]
 800acb4:	f04f 0a01 	mov.w	sl, #1
 800acb8:	e7e4      	b.n	800ac84 <_scanf_float+0x198>
 800acba:	f1ba 0f02 	cmp.w	sl, #2
 800acbe:	d050      	beq.n	800ad62 <_scanf_float+0x276>
 800acc0:	2d01      	cmp	r5, #1
 800acc2:	d002      	beq.n	800acca <_scanf_float+0x1de>
 800acc4:	2d04      	cmp	r5, #4
 800acc6:	f47f af44 	bne.w	800ab52 <_scanf_float+0x66>
 800acca:	3501      	adds	r5, #1
 800accc:	b2ed      	uxtb	r5, r5
 800acce:	e7d9      	b.n	800ac84 <_scanf_float+0x198>
 800acd0:	f1ba 0f01 	cmp.w	sl, #1
 800acd4:	f47f af3d 	bne.w	800ab52 <_scanf_float+0x66>
 800acd8:	f04f 0a02 	mov.w	sl, #2
 800acdc:	e7d2      	b.n	800ac84 <_scanf_float+0x198>
 800acde:	b975      	cbnz	r5, 800acfe <_scanf_float+0x212>
 800ace0:	2f00      	cmp	r7, #0
 800ace2:	f47f af37 	bne.w	800ab54 <_scanf_float+0x68>
 800ace6:	6822      	ldr	r2, [r4, #0]
 800ace8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800acec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800acf0:	f040 8103 	bne.w	800aefa <_scanf_float+0x40e>
 800acf4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800acf8:	6022      	str	r2, [r4, #0]
 800acfa:	2501      	movs	r5, #1
 800acfc:	e7c2      	b.n	800ac84 <_scanf_float+0x198>
 800acfe:	2d03      	cmp	r5, #3
 800ad00:	d0e3      	beq.n	800acca <_scanf_float+0x1de>
 800ad02:	2d05      	cmp	r5, #5
 800ad04:	e7df      	b.n	800acc6 <_scanf_float+0x1da>
 800ad06:	2d02      	cmp	r5, #2
 800ad08:	f47f af23 	bne.w	800ab52 <_scanf_float+0x66>
 800ad0c:	2503      	movs	r5, #3
 800ad0e:	e7b9      	b.n	800ac84 <_scanf_float+0x198>
 800ad10:	2d06      	cmp	r5, #6
 800ad12:	f47f af1e 	bne.w	800ab52 <_scanf_float+0x66>
 800ad16:	2507      	movs	r5, #7
 800ad18:	e7b4      	b.n	800ac84 <_scanf_float+0x198>
 800ad1a:	6822      	ldr	r2, [r4, #0]
 800ad1c:	0591      	lsls	r1, r2, #22
 800ad1e:	f57f af18 	bpl.w	800ab52 <_scanf_float+0x66>
 800ad22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ad26:	6022      	str	r2, [r4, #0]
 800ad28:	9702      	str	r7, [sp, #8]
 800ad2a:	e7ab      	b.n	800ac84 <_scanf_float+0x198>
 800ad2c:	6822      	ldr	r2, [r4, #0]
 800ad2e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ad32:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ad36:	d005      	beq.n	800ad44 <_scanf_float+0x258>
 800ad38:	0550      	lsls	r0, r2, #21
 800ad3a:	f57f af0a 	bpl.w	800ab52 <_scanf_float+0x66>
 800ad3e:	2f00      	cmp	r7, #0
 800ad40:	f000 80db 	beq.w	800aefa <_scanf_float+0x40e>
 800ad44:	0591      	lsls	r1, r2, #22
 800ad46:	bf58      	it	pl
 800ad48:	9902      	ldrpl	r1, [sp, #8]
 800ad4a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ad4e:	bf58      	it	pl
 800ad50:	1a79      	subpl	r1, r7, r1
 800ad52:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ad56:	bf58      	it	pl
 800ad58:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ad5c:	6022      	str	r2, [r4, #0]
 800ad5e:	2700      	movs	r7, #0
 800ad60:	e790      	b.n	800ac84 <_scanf_float+0x198>
 800ad62:	f04f 0a03 	mov.w	sl, #3
 800ad66:	e78d      	b.n	800ac84 <_scanf_float+0x198>
 800ad68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ad6c:	4649      	mov	r1, r9
 800ad6e:	4640      	mov	r0, r8
 800ad70:	4798      	blx	r3
 800ad72:	2800      	cmp	r0, #0
 800ad74:	f43f aedf 	beq.w	800ab36 <_scanf_float+0x4a>
 800ad78:	e6eb      	b.n	800ab52 <_scanf_float+0x66>
 800ad7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad82:	464a      	mov	r2, r9
 800ad84:	4640      	mov	r0, r8
 800ad86:	4798      	blx	r3
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	6123      	str	r3, [r4, #16]
 800ad8e:	e6eb      	b.n	800ab68 <_scanf_float+0x7c>
 800ad90:	1e6b      	subs	r3, r5, #1
 800ad92:	2b06      	cmp	r3, #6
 800ad94:	d824      	bhi.n	800ade0 <_scanf_float+0x2f4>
 800ad96:	2d02      	cmp	r5, #2
 800ad98:	d836      	bhi.n	800ae08 <_scanf_float+0x31c>
 800ad9a:	9b01      	ldr	r3, [sp, #4]
 800ad9c:	429e      	cmp	r6, r3
 800ad9e:	f67f aee7 	bls.w	800ab70 <_scanf_float+0x84>
 800ada2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ada6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adaa:	464a      	mov	r2, r9
 800adac:	4640      	mov	r0, r8
 800adae:	4798      	blx	r3
 800adb0:	6923      	ldr	r3, [r4, #16]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	6123      	str	r3, [r4, #16]
 800adb6:	e7f0      	b.n	800ad9a <_scanf_float+0x2ae>
 800adb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800adbc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800adc0:	464a      	mov	r2, r9
 800adc2:	4640      	mov	r0, r8
 800adc4:	4798      	blx	r3
 800adc6:	6923      	ldr	r3, [r4, #16]
 800adc8:	3b01      	subs	r3, #1
 800adca:	6123      	str	r3, [r4, #16]
 800adcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800add0:	fa5f fa8a 	uxtb.w	sl, sl
 800add4:	f1ba 0f02 	cmp.w	sl, #2
 800add8:	d1ee      	bne.n	800adb8 <_scanf_float+0x2cc>
 800adda:	3d03      	subs	r5, #3
 800addc:	b2ed      	uxtb	r5, r5
 800adde:	1b76      	subs	r6, r6, r5
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	05da      	lsls	r2, r3, #23
 800ade4:	d530      	bpl.n	800ae48 <_scanf_float+0x35c>
 800ade6:	055b      	lsls	r3, r3, #21
 800ade8:	d511      	bpl.n	800ae0e <_scanf_float+0x322>
 800adea:	9b01      	ldr	r3, [sp, #4]
 800adec:	429e      	cmp	r6, r3
 800adee:	f67f aebf 	bls.w	800ab70 <_scanf_float+0x84>
 800adf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800adf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adfa:	464a      	mov	r2, r9
 800adfc:	4640      	mov	r0, r8
 800adfe:	4798      	blx	r3
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	6123      	str	r3, [r4, #16]
 800ae06:	e7f0      	b.n	800adea <_scanf_float+0x2fe>
 800ae08:	46aa      	mov	sl, r5
 800ae0a:	46b3      	mov	fp, r6
 800ae0c:	e7de      	b.n	800adcc <_scanf_float+0x2e0>
 800ae0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ae12:	6923      	ldr	r3, [r4, #16]
 800ae14:	2965      	cmp	r1, #101	@ 0x65
 800ae16:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae1a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ae1e:	6123      	str	r3, [r4, #16]
 800ae20:	d00c      	beq.n	800ae3c <_scanf_float+0x350>
 800ae22:	2945      	cmp	r1, #69	@ 0x45
 800ae24:	d00a      	beq.n	800ae3c <_scanf_float+0x350>
 800ae26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae2a:	464a      	mov	r2, r9
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	4798      	blx	r3
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ae36:	3b01      	subs	r3, #1
 800ae38:	1eb5      	subs	r5, r6, #2
 800ae3a:	6123      	str	r3, [r4, #16]
 800ae3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae40:	464a      	mov	r2, r9
 800ae42:	4640      	mov	r0, r8
 800ae44:	4798      	blx	r3
 800ae46:	462e      	mov	r6, r5
 800ae48:	6822      	ldr	r2, [r4, #0]
 800ae4a:	f012 0210 	ands.w	r2, r2, #16
 800ae4e:	d001      	beq.n	800ae54 <_scanf_float+0x368>
 800ae50:	2000      	movs	r0, #0
 800ae52:	e68e      	b.n	800ab72 <_scanf_float+0x86>
 800ae54:	7032      	strb	r2, [r6, #0]
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ae5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae60:	d125      	bne.n	800aeae <_scanf_float+0x3c2>
 800ae62:	9b02      	ldr	r3, [sp, #8]
 800ae64:	429f      	cmp	r7, r3
 800ae66:	d00a      	beq.n	800ae7e <_scanf_float+0x392>
 800ae68:	1bda      	subs	r2, r3, r7
 800ae6a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ae6e:	429e      	cmp	r6, r3
 800ae70:	bf28      	it	cs
 800ae72:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ae76:	4922      	ldr	r1, [pc, #136]	@ (800af00 <_scanf_float+0x414>)
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f000 f93d 	bl	800b0f8 <siprintf>
 800ae7e:	9901      	ldr	r1, [sp, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	4640      	mov	r0, r8
 800ae84:	f002 fc3c 	bl	800d700 <_strtod_r>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	6821      	ldr	r1, [r4, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f011 0f02 	tst.w	r1, #2
 800ae92:	ec57 6b10 	vmov	r6, r7, d0
 800ae96:	f103 0204 	add.w	r2, r3, #4
 800ae9a:	d015      	beq.n	800aec8 <_scanf_float+0x3dc>
 800ae9c:	9903      	ldr	r1, [sp, #12]
 800ae9e:	600a      	str	r2, [r1, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	e9c3 6700 	strd	r6, r7, [r3]
 800aea6:	68e3      	ldr	r3, [r4, #12]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	60e3      	str	r3, [r4, #12]
 800aeac:	e7d0      	b.n	800ae50 <_scanf_float+0x364>
 800aeae:	9b04      	ldr	r3, [sp, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d0e4      	beq.n	800ae7e <_scanf_float+0x392>
 800aeb4:	9905      	ldr	r1, [sp, #20]
 800aeb6:	230a      	movs	r3, #10
 800aeb8:	3101      	adds	r1, #1
 800aeba:	4640      	mov	r0, r8
 800aebc:	f002 fca0 	bl	800d800 <_strtol_r>
 800aec0:	9b04      	ldr	r3, [sp, #16]
 800aec2:	9e05      	ldr	r6, [sp, #20]
 800aec4:	1ac2      	subs	r2, r0, r3
 800aec6:	e7d0      	b.n	800ae6a <_scanf_float+0x37e>
 800aec8:	f011 0f04 	tst.w	r1, #4
 800aecc:	9903      	ldr	r1, [sp, #12]
 800aece:	600a      	str	r2, [r1, #0]
 800aed0:	d1e6      	bne.n	800aea0 <_scanf_float+0x3b4>
 800aed2:	681d      	ldr	r5, [r3, #0]
 800aed4:	4632      	mov	r2, r6
 800aed6:	463b      	mov	r3, r7
 800aed8:	4630      	mov	r0, r6
 800aeda:	4639      	mov	r1, r7
 800aedc:	f7f5 fe26 	bl	8000b2c <__aeabi_dcmpun>
 800aee0:	b128      	cbz	r0, 800aeee <_scanf_float+0x402>
 800aee2:	4808      	ldr	r0, [pc, #32]	@ (800af04 <_scanf_float+0x418>)
 800aee4:	f000 fa00 	bl	800b2e8 <nanf>
 800aee8:	ed85 0a00 	vstr	s0, [r5]
 800aeec:	e7db      	b.n	800aea6 <_scanf_float+0x3ba>
 800aeee:	4630      	mov	r0, r6
 800aef0:	4639      	mov	r1, r7
 800aef2:	f7f5 fe79 	bl	8000be8 <__aeabi_d2f>
 800aef6:	6028      	str	r0, [r5, #0]
 800aef8:	e7d5      	b.n	800aea6 <_scanf_float+0x3ba>
 800aefa:	2700      	movs	r7, #0
 800aefc:	e62e      	b.n	800ab5c <_scanf_float+0x70>
 800aefe:	bf00      	nop
 800af00:	08028e10 	.word	0x08028e10
 800af04:	08028f51 	.word	0x08028f51

0800af08 <std>:
 800af08:	2300      	movs	r3, #0
 800af0a:	b510      	push	{r4, lr}
 800af0c:	4604      	mov	r4, r0
 800af0e:	e9c0 3300 	strd	r3, r3, [r0]
 800af12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af16:	6083      	str	r3, [r0, #8]
 800af18:	8181      	strh	r1, [r0, #12]
 800af1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800af1c:	81c2      	strh	r2, [r0, #14]
 800af1e:	6183      	str	r3, [r0, #24]
 800af20:	4619      	mov	r1, r3
 800af22:	2208      	movs	r2, #8
 800af24:	305c      	adds	r0, #92	@ 0x5c
 800af26:	f000 f94c 	bl	800b1c2 <memset>
 800af2a:	4b0d      	ldr	r3, [pc, #52]	@ (800af60 <std+0x58>)
 800af2c:	6263      	str	r3, [r4, #36]	@ 0x24
 800af2e:	4b0d      	ldr	r3, [pc, #52]	@ (800af64 <std+0x5c>)
 800af30:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af32:	4b0d      	ldr	r3, [pc, #52]	@ (800af68 <std+0x60>)
 800af34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af36:	4b0d      	ldr	r3, [pc, #52]	@ (800af6c <std+0x64>)
 800af38:	6323      	str	r3, [r4, #48]	@ 0x30
 800af3a:	4b0d      	ldr	r3, [pc, #52]	@ (800af70 <std+0x68>)
 800af3c:	6224      	str	r4, [r4, #32]
 800af3e:	429c      	cmp	r4, r3
 800af40:	d006      	beq.n	800af50 <std+0x48>
 800af42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af46:	4294      	cmp	r4, r2
 800af48:	d002      	beq.n	800af50 <std+0x48>
 800af4a:	33d0      	adds	r3, #208	@ 0xd0
 800af4c:	429c      	cmp	r4, r3
 800af4e:	d105      	bne.n	800af5c <std+0x54>
 800af50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af58:	f000 b9c2 	b.w	800b2e0 <__retarget_lock_init_recursive>
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	bf00      	nop
 800af60:	0800b13d 	.word	0x0800b13d
 800af64:	0800b15f 	.word	0x0800b15f
 800af68:	0800b197 	.word	0x0800b197
 800af6c:	0800b1bb 	.word	0x0800b1bb
 800af70:	20006eb8 	.word	0x20006eb8

0800af74 <stdio_exit_handler>:
 800af74:	4a02      	ldr	r2, [pc, #8]	@ (800af80 <stdio_exit_handler+0xc>)
 800af76:	4903      	ldr	r1, [pc, #12]	@ (800af84 <stdio_exit_handler+0x10>)
 800af78:	4803      	ldr	r0, [pc, #12]	@ (800af88 <stdio_exit_handler+0x14>)
 800af7a:	f000 b869 	b.w	800b050 <_fwalk_sglue>
 800af7e:	bf00      	nop
 800af80:	200000fc 	.word	0x200000fc
 800af84:	0800dbbd 	.word	0x0800dbbd
 800af88:	2000010c 	.word	0x2000010c

0800af8c <cleanup_stdio>:
 800af8c:	6841      	ldr	r1, [r0, #4]
 800af8e:	4b0c      	ldr	r3, [pc, #48]	@ (800afc0 <cleanup_stdio+0x34>)
 800af90:	4299      	cmp	r1, r3
 800af92:	b510      	push	{r4, lr}
 800af94:	4604      	mov	r4, r0
 800af96:	d001      	beq.n	800af9c <cleanup_stdio+0x10>
 800af98:	f002 fe10 	bl	800dbbc <_fflush_r>
 800af9c:	68a1      	ldr	r1, [r4, #8]
 800af9e:	4b09      	ldr	r3, [pc, #36]	@ (800afc4 <cleanup_stdio+0x38>)
 800afa0:	4299      	cmp	r1, r3
 800afa2:	d002      	beq.n	800afaa <cleanup_stdio+0x1e>
 800afa4:	4620      	mov	r0, r4
 800afa6:	f002 fe09 	bl	800dbbc <_fflush_r>
 800afaa:	68e1      	ldr	r1, [r4, #12]
 800afac:	4b06      	ldr	r3, [pc, #24]	@ (800afc8 <cleanup_stdio+0x3c>)
 800afae:	4299      	cmp	r1, r3
 800afb0:	d004      	beq.n	800afbc <cleanup_stdio+0x30>
 800afb2:	4620      	mov	r0, r4
 800afb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb8:	f002 be00 	b.w	800dbbc <_fflush_r>
 800afbc:	bd10      	pop	{r4, pc}
 800afbe:	bf00      	nop
 800afc0:	20006eb8 	.word	0x20006eb8
 800afc4:	20006f20 	.word	0x20006f20
 800afc8:	20006f88 	.word	0x20006f88

0800afcc <global_stdio_init.part.0>:
 800afcc:	b510      	push	{r4, lr}
 800afce:	4b0b      	ldr	r3, [pc, #44]	@ (800affc <global_stdio_init.part.0+0x30>)
 800afd0:	4c0b      	ldr	r4, [pc, #44]	@ (800b000 <global_stdio_init.part.0+0x34>)
 800afd2:	4a0c      	ldr	r2, [pc, #48]	@ (800b004 <global_stdio_init.part.0+0x38>)
 800afd4:	601a      	str	r2, [r3, #0]
 800afd6:	4620      	mov	r0, r4
 800afd8:	2200      	movs	r2, #0
 800afda:	2104      	movs	r1, #4
 800afdc:	f7ff ff94 	bl	800af08 <std>
 800afe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afe4:	2201      	movs	r2, #1
 800afe6:	2109      	movs	r1, #9
 800afe8:	f7ff ff8e 	bl	800af08 <std>
 800afec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aff0:	2202      	movs	r2, #2
 800aff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aff6:	2112      	movs	r1, #18
 800aff8:	f7ff bf86 	b.w	800af08 <std>
 800affc:	20006ff0 	.word	0x20006ff0
 800b000:	20006eb8 	.word	0x20006eb8
 800b004:	0800af75 	.word	0x0800af75

0800b008 <__sfp_lock_acquire>:
 800b008:	4801      	ldr	r0, [pc, #4]	@ (800b010 <__sfp_lock_acquire+0x8>)
 800b00a:	f000 b96a 	b.w	800b2e2 <__retarget_lock_acquire_recursive>
 800b00e:	bf00      	nop
 800b010:	20006ff9 	.word	0x20006ff9

0800b014 <__sfp_lock_release>:
 800b014:	4801      	ldr	r0, [pc, #4]	@ (800b01c <__sfp_lock_release+0x8>)
 800b016:	f000 b965 	b.w	800b2e4 <__retarget_lock_release_recursive>
 800b01a:	bf00      	nop
 800b01c:	20006ff9 	.word	0x20006ff9

0800b020 <__sinit>:
 800b020:	b510      	push	{r4, lr}
 800b022:	4604      	mov	r4, r0
 800b024:	f7ff fff0 	bl	800b008 <__sfp_lock_acquire>
 800b028:	6a23      	ldr	r3, [r4, #32]
 800b02a:	b11b      	cbz	r3, 800b034 <__sinit+0x14>
 800b02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b030:	f7ff bff0 	b.w	800b014 <__sfp_lock_release>
 800b034:	4b04      	ldr	r3, [pc, #16]	@ (800b048 <__sinit+0x28>)
 800b036:	6223      	str	r3, [r4, #32]
 800b038:	4b04      	ldr	r3, [pc, #16]	@ (800b04c <__sinit+0x2c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1f5      	bne.n	800b02c <__sinit+0xc>
 800b040:	f7ff ffc4 	bl	800afcc <global_stdio_init.part.0>
 800b044:	e7f2      	b.n	800b02c <__sinit+0xc>
 800b046:	bf00      	nop
 800b048:	0800af8d 	.word	0x0800af8d
 800b04c:	20006ff0 	.word	0x20006ff0

0800b050 <_fwalk_sglue>:
 800b050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b054:	4607      	mov	r7, r0
 800b056:	4688      	mov	r8, r1
 800b058:	4614      	mov	r4, r2
 800b05a:	2600      	movs	r6, #0
 800b05c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b060:	f1b9 0901 	subs.w	r9, r9, #1
 800b064:	d505      	bpl.n	800b072 <_fwalk_sglue+0x22>
 800b066:	6824      	ldr	r4, [r4, #0]
 800b068:	2c00      	cmp	r4, #0
 800b06a:	d1f7      	bne.n	800b05c <_fwalk_sglue+0xc>
 800b06c:	4630      	mov	r0, r6
 800b06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b072:	89ab      	ldrh	r3, [r5, #12]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d907      	bls.n	800b088 <_fwalk_sglue+0x38>
 800b078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b07c:	3301      	adds	r3, #1
 800b07e:	d003      	beq.n	800b088 <_fwalk_sglue+0x38>
 800b080:	4629      	mov	r1, r5
 800b082:	4638      	mov	r0, r7
 800b084:	47c0      	blx	r8
 800b086:	4306      	orrs	r6, r0
 800b088:	3568      	adds	r5, #104	@ 0x68
 800b08a:	e7e9      	b.n	800b060 <_fwalk_sglue+0x10>

0800b08c <sniprintf>:
 800b08c:	b40c      	push	{r2, r3}
 800b08e:	b530      	push	{r4, r5, lr}
 800b090:	4b18      	ldr	r3, [pc, #96]	@ (800b0f4 <sniprintf+0x68>)
 800b092:	1e0c      	subs	r4, r1, #0
 800b094:	681d      	ldr	r5, [r3, #0]
 800b096:	b09d      	sub	sp, #116	@ 0x74
 800b098:	da08      	bge.n	800b0ac <sniprintf+0x20>
 800b09a:	238b      	movs	r3, #139	@ 0x8b
 800b09c:	602b      	str	r3, [r5, #0]
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a2:	b01d      	add	sp, #116	@ 0x74
 800b0a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0a8:	b002      	add	sp, #8
 800b0aa:	4770      	bx	lr
 800b0ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b0b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0b4:	f04f 0300 	mov.w	r3, #0
 800b0b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b0ba:	bf14      	ite	ne
 800b0bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0c0:	4623      	moveq	r3, r4
 800b0c2:	9304      	str	r3, [sp, #16]
 800b0c4:	9307      	str	r3, [sp, #28]
 800b0c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0ca:	9002      	str	r0, [sp, #8]
 800b0cc:	9006      	str	r0, [sp, #24]
 800b0ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b0d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b0d4:	ab21      	add	r3, sp, #132	@ 0x84
 800b0d6:	a902      	add	r1, sp, #8
 800b0d8:	4628      	mov	r0, r5
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	f002 fbee 	bl	800d8bc <_svfiprintf_r>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	bfbc      	itt	lt
 800b0e4:	238b      	movlt	r3, #139	@ 0x8b
 800b0e6:	602b      	strlt	r3, [r5, #0]
 800b0e8:	2c00      	cmp	r4, #0
 800b0ea:	d0da      	beq.n	800b0a2 <sniprintf+0x16>
 800b0ec:	9b02      	ldr	r3, [sp, #8]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	701a      	strb	r2, [r3, #0]
 800b0f2:	e7d6      	b.n	800b0a2 <sniprintf+0x16>
 800b0f4:	20000108 	.word	0x20000108

0800b0f8 <siprintf>:
 800b0f8:	b40e      	push	{r1, r2, r3}
 800b0fa:	b510      	push	{r4, lr}
 800b0fc:	b09d      	sub	sp, #116	@ 0x74
 800b0fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b100:	9002      	str	r0, [sp, #8]
 800b102:	9006      	str	r0, [sp, #24]
 800b104:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b108:	480a      	ldr	r0, [pc, #40]	@ (800b134 <siprintf+0x3c>)
 800b10a:	9107      	str	r1, [sp, #28]
 800b10c:	9104      	str	r1, [sp, #16]
 800b10e:	490a      	ldr	r1, [pc, #40]	@ (800b138 <siprintf+0x40>)
 800b110:	f853 2b04 	ldr.w	r2, [r3], #4
 800b114:	9105      	str	r1, [sp, #20]
 800b116:	2400      	movs	r4, #0
 800b118:	a902      	add	r1, sp, #8
 800b11a:	6800      	ldr	r0, [r0, #0]
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b120:	f002 fbcc 	bl	800d8bc <_svfiprintf_r>
 800b124:	9b02      	ldr	r3, [sp, #8]
 800b126:	701c      	strb	r4, [r3, #0]
 800b128:	b01d      	add	sp, #116	@ 0x74
 800b12a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b12e:	b003      	add	sp, #12
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	20000108 	.word	0x20000108
 800b138:	ffff0208 	.word	0xffff0208

0800b13c <__sread>:
 800b13c:	b510      	push	{r4, lr}
 800b13e:	460c      	mov	r4, r1
 800b140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b144:	f000 f87e 	bl	800b244 <_read_r>
 800b148:	2800      	cmp	r0, #0
 800b14a:	bfab      	itete	ge
 800b14c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b14e:	89a3      	ldrhlt	r3, [r4, #12]
 800b150:	181b      	addge	r3, r3, r0
 800b152:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b156:	bfac      	ite	ge
 800b158:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b15a:	81a3      	strhlt	r3, [r4, #12]
 800b15c:	bd10      	pop	{r4, pc}

0800b15e <__swrite>:
 800b15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b162:	461f      	mov	r7, r3
 800b164:	898b      	ldrh	r3, [r1, #12]
 800b166:	05db      	lsls	r3, r3, #23
 800b168:	4605      	mov	r5, r0
 800b16a:	460c      	mov	r4, r1
 800b16c:	4616      	mov	r6, r2
 800b16e:	d505      	bpl.n	800b17c <__swrite+0x1e>
 800b170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b174:	2302      	movs	r3, #2
 800b176:	2200      	movs	r2, #0
 800b178:	f000 f852 	bl	800b220 <_lseek_r>
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b186:	81a3      	strh	r3, [r4, #12]
 800b188:	4632      	mov	r2, r6
 800b18a:	463b      	mov	r3, r7
 800b18c:	4628      	mov	r0, r5
 800b18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b192:	f000 b869 	b.w	800b268 <_write_r>

0800b196 <__sseek>:
 800b196:	b510      	push	{r4, lr}
 800b198:	460c      	mov	r4, r1
 800b19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b19e:	f000 f83f 	bl	800b220 <_lseek_r>
 800b1a2:	1c43      	adds	r3, r0, #1
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	bf15      	itete	ne
 800b1a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1b2:	81a3      	strheq	r3, [r4, #12]
 800b1b4:	bf18      	it	ne
 800b1b6:	81a3      	strhne	r3, [r4, #12]
 800b1b8:	bd10      	pop	{r4, pc}

0800b1ba <__sclose>:
 800b1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1be:	f000 b81f 	b.w	800b200 <_close_r>

0800b1c2 <memset>:
 800b1c2:	4402      	add	r2, r0
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d100      	bne.n	800b1cc <memset+0xa>
 800b1ca:	4770      	bx	lr
 800b1cc:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d0:	e7f9      	b.n	800b1c6 <memset+0x4>

0800b1d2 <strncat>:
 800b1d2:	b530      	push	{r4, r5, lr}
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	7825      	ldrb	r5, [r4, #0]
 800b1d8:	4623      	mov	r3, r4
 800b1da:	3401      	adds	r4, #1
 800b1dc:	2d00      	cmp	r5, #0
 800b1de:	d1fa      	bne.n	800b1d6 <strncat+0x4>
 800b1e0:	3a01      	subs	r2, #1
 800b1e2:	d304      	bcc.n	800b1ee <strncat+0x1c>
 800b1e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1e8:	f803 4b01 	strb.w	r4, [r3], #1
 800b1ec:	b904      	cbnz	r4, 800b1f0 <strncat+0x1e>
 800b1ee:	bd30      	pop	{r4, r5, pc}
 800b1f0:	2a00      	cmp	r2, #0
 800b1f2:	d1f5      	bne.n	800b1e0 <strncat+0xe>
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	e7f3      	b.n	800b1e0 <strncat+0xe>

0800b1f8 <_localeconv_r>:
 800b1f8:	4800      	ldr	r0, [pc, #0]	@ (800b1fc <_localeconv_r+0x4>)
 800b1fa:	4770      	bx	lr
 800b1fc:	20000248 	.word	0x20000248

0800b200 <_close_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4d06      	ldr	r5, [pc, #24]	@ (800b21c <_close_r+0x1c>)
 800b204:	2300      	movs	r3, #0
 800b206:	4604      	mov	r4, r0
 800b208:	4608      	mov	r0, r1
 800b20a:	602b      	str	r3, [r5, #0]
 800b20c:	f7f6 feda 	bl	8001fc4 <_close>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d102      	bne.n	800b21a <_close_r+0x1a>
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	b103      	cbz	r3, 800b21a <_close_r+0x1a>
 800b218:	6023      	str	r3, [r4, #0]
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	20006ff4 	.word	0x20006ff4

0800b220 <_lseek_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d07      	ldr	r5, [pc, #28]	@ (800b240 <_lseek_r+0x20>)
 800b224:	4604      	mov	r4, r0
 800b226:	4608      	mov	r0, r1
 800b228:	4611      	mov	r1, r2
 800b22a:	2200      	movs	r2, #0
 800b22c:	602a      	str	r2, [r5, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	f7f6 feef 	bl	8002012 <_lseek>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_lseek_r+0x1e>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_lseek_r+0x1e>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	20006ff4 	.word	0x20006ff4

0800b244 <_read_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d07      	ldr	r5, [pc, #28]	@ (800b264 <_read_r+0x20>)
 800b248:	4604      	mov	r4, r0
 800b24a:	4608      	mov	r0, r1
 800b24c:	4611      	mov	r1, r2
 800b24e:	2200      	movs	r2, #0
 800b250:	602a      	str	r2, [r5, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	f7f6 fe7d 	bl	8001f52 <_read>
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	d102      	bne.n	800b262 <_read_r+0x1e>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b103      	cbz	r3, 800b262 <_read_r+0x1e>
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	20006ff4 	.word	0x20006ff4

0800b268 <_write_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4d07      	ldr	r5, [pc, #28]	@ (800b288 <_write_r+0x20>)
 800b26c:	4604      	mov	r4, r0
 800b26e:	4608      	mov	r0, r1
 800b270:	4611      	mov	r1, r2
 800b272:	2200      	movs	r2, #0
 800b274:	602a      	str	r2, [r5, #0]
 800b276:	461a      	mov	r2, r3
 800b278:	f7f6 fe88 	bl	8001f8c <_write>
 800b27c:	1c43      	adds	r3, r0, #1
 800b27e:	d102      	bne.n	800b286 <_write_r+0x1e>
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	b103      	cbz	r3, 800b286 <_write_r+0x1e>
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	bd38      	pop	{r3, r4, r5, pc}
 800b288:	20006ff4 	.word	0x20006ff4

0800b28c <__errno>:
 800b28c:	4b01      	ldr	r3, [pc, #4]	@ (800b294 <__errno+0x8>)
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	20000108 	.word	0x20000108

0800b298 <__libc_init_array>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	4d0d      	ldr	r5, [pc, #52]	@ (800b2d0 <__libc_init_array+0x38>)
 800b29c:	4c0d      	ldr	r4, [pc, #52]	@ (800b2d4 <__libc_init_array+0x3c>)
 800b29e:	1b64      	subs	r4, r4, r5
 800b2a0:	10a4      	asrs	r4, r4, #2
 800b2a2:	2600      	movs	r6, #0
 800b2a4:	42a6      	cmp	r6, r4
 800b2a6:	d109      	bne.n	800b2bc <__libc_init_array+0x24>
 800b2a8:	4d0b      	ldr	r5, [pc, #44]	@ (800b2d8 <__libc_init_array+0x40>)
 800b2aa:	4c0c      	ldr	r4, [pc, #48]	@ (800b2dc <__libc_init_array+0x44>)
 800b2ac:	f003 fb76 	bl	800e99c <_init>
 800b2b0:	1b64      	subs	r4, r4, r5
 800b2b2:	10a4      	asrs	r4, r4, #2
 800b2b4:	2600      	movs	r6, #0
 800b2b6:	42a6      	cmp	r6, r4
 800b2b8:	d105      	bne.n	800b2c6 <__libc_init_array+0x2e>
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}
 800b2bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2c0:	4798      	blx	r3
 800b2c2:	3601      	adds	r6, #1
 800b2c4:	e7ee      	b.n	800b2a4 <__libc_init_array+0xc>
 800b2c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ca:	4798      	blx	r3
 800b2cc:	3601      	adds	r6, #1
 800b2ce:	e7f2      	b.n	800b2b6 <__libc_init_array+0x1e>
 800b2d0:	0802920c 	.word	0x0802920c
 800b2d4:	0802920c 	.word	0x0802920c
 800b2d8:	0802920c 	.word	0x0802920c
 800b2dc:	08029210 	.word	0x08029210

0800b2e0 <__retarget_lock_init_recursive>:
 800b2e0:	4770      	bx	lr

0800b2e2 <__retarget_lock_acquire_recursive>:
 800b2e2:	4770      	bx	lr

0800b2e4 <__retarget_lock_release_recursive>:
 800b2e4:	4770      	bx	lr
	...

0800b2e8 <nanf>:
 800b2e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b2f0 <nanf+0x8>
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	7fc00000 	.word	0x7fc00000

0800b2f4 <quorem>:
 800b2f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f8:	6903      	ldr	r3, [r0, #16]
 800b2fa:	690c      	ldr	r4, [r1, #16]
 800b2fc:	42a3      	cmp	r3, r4
 800b2fe:	4607      	mov	r7, r0
 800b300:	db7e      	blt.n	800b400 <quorem+0x10c>
 800b302:	3c01      	subs	r4, #1
 800b304:	f101 0814 	add.w	r8, r1, #20
 800b308:	00a3      	lsls	r3, r4, #2
 800b30a:	f100 0514 	add.w	r5, r0, #20
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b31a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b31e:	3301      	adds	r3, #1
 800b320:	429a      	cmp	r2, r3
 800b322:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b326:	fbb2 f6f3 	udiv	r6, r2, r3
 800b32a:	d32e      	bcc.n	800b38a <quorem+0x96>
 800b32c:	f04f 0a00 	mov.w	sl, #0
 800b330:	46c4      	mov	ip, r8
 800b332:	46ae      	mov	lr, r5
 800b334:	46d3      	mov	fp, sl
 800b336:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b33a:	b298      	uxth	r0, r3
 800b33c:	fb06 a000 	mla	r0, r6, r0, sl
 800b340:	0c02      	lsrs	r2, r0, #16
 800b342:	0c1b      	lsrs	r3, r3, #16
 800b344:	fb06 2303 	mla	r3, r6, r3, r2
 800b348:	f8de 2000 	ldr.w	r2, [lr]
 800b34c:	b280      	uxth	r0, r0
 800b34e:	b292      	uxth	r2, r2
 800b350:	1a12      	subs	r2, r2, r0
 800b352:	445a      	add	r2, fp
 800b354:	f8de 0000 	ldr.w	r0, [lr]
 800b358:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b362:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b366:	b292      	uxth	r2, r2
 800b368:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b36c:	45e1      	cmp	r9, ip
 800b36e:	f84e 2b04 	str.w	r2, [lr], #4
 800b372:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b376:	d2de      	bcs.n	800b336 <quorem+0x42>
 800b378:	9b00      	ldr	r3, [sp, #0]
 800b37a:	58eb      	ldr	r3, [r5, r3]
 800b37c:	b92b      	cbnz	r3, 800b38a <quorem+0x96>
 800b37e:	9b01      	ldr	r3, [sp, #4]
 800b380:	3b04      	subs	r3, #4
 800b382:	429d      	cmp	r5, r3
 800b384:	461a      	mov	r2, r3
 800b386:	d32f      	bcc.n	800b3e8 <quorem+0xf4>
 800b388:	613c      	str	r4, [r7, #16]
 800b38a:	4638      	mov	r0, r7
 800b38c:	f001 f9c8 	bl	800c720 <__mcmp>
 800b390:	2800      	cmp	r0, #0
 800b392:	db25      	blt.n	800b3e0 <quorem+0xec>
 800b394:	4629      	mov	r1, r5
 800b396:	2000      	movs	r0, #0
 800b398:	f858 2b04 	ldr.w	r2, [r8], #4
 800b39c:	f8d1 c000 	ldr.w	ip, [r1]
 800b3a0:	fa1f fe82 	uxth.w	lr, r2
 800b3a4:	fa1f f38c 	uxth.w	r3, ip
 800b3a8:	eba3 030e 	sub.w	r3, r3, lr
 800b3ac:	4403      	add	r3, r0
 800b3ae:	0c12      	lsrs	r2, r2, #16
 800b3b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b3b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3be:	45c1      	cmp	r9, r8
 800b3c0:	f841 3b04 	str.w	r3, [r1], #4
 800b3c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b3c8:	d2e6      	bcs.n	800b398 <quorem+0xa4>
 800b3ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3d2:	b922      	cbnz	r2, 800b3de <quorem+0xea>
 800b3d4:	3b04      	subs	r3, #4
 800b3d6:	429d      	cmp	r5, r3
 800b3d8:	461a      	mov	r2, r3
 800b3da:	d30b      	bcc.n	800b3f4 <quorem+0x100>
 800b3dc:	613c      	str	r4, [r7, #16]
 800b3de:	3601      	adds	r6, #1
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	b003      	add	sp, #12
 800b3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e8:	6812      	ldr	r2, [r2, #0]
 800b3ea:	3b04      	subs	r3, #4
 800b3ec:	2a00      	cmp	r2, #0
 800b3ee:	d1cb      	bne.n	800b388 <quorem+0x94>
 800b3f0:	3c01      	subs	r4, #1
 800b3f2:	e7c6      	b.n	800b382 <quorem+0x8e>
 800b3f4:	6812      	ldr	r2, [r2, #0]
 800b3f6:	3b04      	subs	r3, #4
 800b3f8:	2a00      	cmp	r2, #0
 800b3fa:	d1ef      	bne.n	800b3dc <quorem+0xe8>
 800b3fc:	3c01      	subs	r4, #1
 800b3fe:	e7ea      	b.n	800b3d6 <quorem+0xe2>
 800b400:	2000      	movs	r0, #0
 800b402:	e7ee      	b.n	800b3e2 <quorem+0xee>
 800b404:	0000      	movs	r0, r0
	...

0800b408 <_dtoa_r>:
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	69c7      	ldr	r7, [r0, #28]
 800b40e:	b097      	sub	sp, #92	@ 0x5c
 800b410:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b414:	ec55 4b10 	vmov	r4, r5, d0
 800b418:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b41a:	9107      	str	r1, [sp, #28]
 800b41c:	4681      	mov	r9, r0
 800b41e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b420:	9311      	str	r3, [sp, #68]	@ 0x44
 800b422:	b97f      	cbnz	r7, 800b444 <_dtoa_r+0x3c>
 800b424:	2010      	movs	r0, #16
 800b426:	f000 fe09 	bl	800c03c <malloc>
 800b42a:	4602      	mov	r2, r0
 800b42c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b430:	b920      	cbnz	r0, 800b43c <_dtoa_r+0x34>
 800b432:	4ba9      	ldr	r3, [pc, #676]	@ (800b6d8 <_dtoa_r+0x2d0>)
 800b434:	21ef      	movs	r1, #239	@ 0xef
 800b436:	48a9      	ldr	r0, [pc, #676]	@ (800b6dc <_dtoa_r+0x2d4>)
 800b438:	f002 fc3a 	bl	800dcb0 <__assert_func>
 800b43c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b440:	6007      	str	r7, [r0, #0]
 800b442:	60c7      	str	r7, [r0, #12]
 800b444:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b448:	6819      	ldr	r1, [r3, #0]
 800b44a:	b159      	cbz	r1, 800b464 <_dtoa_r+0x5c>
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	604a      	str	r2, [r1, #4]
 800b450:	2301      	movs	r3, #1
 800b452:	4093      	lsls	r3, r2
 800b454:	608b      	str	r3, [r1, #8]
 800b456:	4648      	mov	r0, r9
 800b458:	f000 fee6 	bl	800c228 <_Bfree>
 800b45c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	1e2b      	subs	r3, r5, #0
 800b466:	bfb9      	ittee	lt
 800b468:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b46c:	9305      	strlt	r3, [sp, #20]
 800b46e:	2300      	movge	r3, #0
 800b470:	6033      	strge	r3, [r6, #0]
 800b472:	9f05      	ldr	r7, [sp, #20]
 800b474:	4b9a      	ldr	r3, [pc, #616]	@ (800b6e0 <_dtoa_r+0x2d8>)
 800b476:	bfbc      	itt	lt
 800b478:	2201      	movlt	r2, #1
 800b47a:	6032      	strlt	r2, [r6, #0]
 800b47c:	43bb      	bics	r3, r7
 800b47e:	d112      	bne.n	800b4a6 <_dtoa_r+0x9e>
 800b480:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b482:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b486:	6013      	str	r3, [r2, #0]
 800b488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b48c:	4323      	orrs	r3, r4
 800b48e:	f000 855a 	beq.w	800bf46 <_dtoa_r+0xb3e>
 800b492:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b494:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b6f4 <_dtoa_r+0x2ec>
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 855c 	beq.w	800bf56 <_dtoa_r+0xb4e>
 800b49e:	f10a 0303 	add.w	r3, sl, #3
 800b4a2:	f000 bd56 	b.w	800bf52 <_dtoa_r+0xb4a>
 800b4a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	ec51 0b17 	vmov	r0, r1, d7
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b4b6:	f7f5 fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4ba:	4680      	mov	r8, r0
 800b4bc:	b158      	cbz	r0, 800b4d6 <_dtoa_r+0xce>
 800b4be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	6013      	str	r3, [r2, #0]
 800b4c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b4c6:	b113      	cbz	r3, 800b4ce <_dtoa_r+0xc6>
 800b4c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b4ca:	4b86      	ldr	r3, [pc, #536]	@ (800b6e4 <_dtoa_r+0x2dc>)
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b6f8 <_dtoa_r+0x2f0>
 800b4d2:	f000 bd40 	b.w	800bf56 <_dtoa_r+0xb4e>
 800b4d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b4da:	aa14      	add	r2, sp, #80	@ 0x50
 800b4dc:	a915      	add	r1, sp, #84	@ 0x54
 800b4de:	4648      	mov	r0, r9
 800b4e0:	f001 fa3e 	bl	800c960 <__d2b>
 800b4e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b4e8:	9002      	str	r0, [sp, #8]
 800b4ea:	2e00      	cmp	r6, #0
 800b4ec:	d078      	beq.n	800b5e0 <_dtoa_r+0x1d8>
 800b4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b4f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b4fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b500:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b504:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b508:	4619      	mov	r1, r3
 800b50a:	2200      	movs	r2, #0
 800b50c:	4b76      	ldr	r3, [pc, #472]	@ (800b6e8 <_dtoa_r+0x2e0>)
 800b50e:	f7f4 febb 	bl	8000288 <__aeabi_dsub>
 800b512:	a36b      	add	r3, pc, #428	@ (adr r3, 800b6c0 <_dtoa_r+0x2b8>)
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	f7f5 f86e 	bl	80005f8 <__aeabi_dmul>
 800b51c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b6c8 <_dtoa_r+0x2c0>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f4 feb3 	bl	800028c <__adddf3>
 800b526:	4604      	mov	r4, r0
 800b528:	4630      	mov	r0, r6
 800b52a:	460d      	mov	r5, r1
 800b52c:	f7f4 fffa 	bl	8000524 <__aeabi_i2d>
 800b530:	a367      	add	r3, pc, #412	@ (adr r3, 800b6d0 <_dtoa_r+0x2c8>)
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	f7f5 f85f 	bl	80005f8 <__aeabi_dmul>
 800b53a:	4602      	mov	r2, r0
 800b53c:	460b      	mov	r3, r1
 800b53e:	4620      	mov	r0, r4
 800b540:	4629      	mov	r1, r5
 800b542:	f7f4 fea3 	bl	800028c <__adddf3>
 800b546:	4604      	mov	r4, r0
 800b548:	460d      	mov	r5, r1
 800b54a:	f7f5 fb05 	bl	8000b58 <__aeabi_d2iz>
 800b54e:	2200      	movs	r2, #0
 800b550:	4607      	mov	r7, r0
 800b552:	2300      	movs	r3, #0
 800b554:	4620      	mov	r0, r4
 800b556:	4629      	mov	r1, r5
 800b558:	f7f5 fac0 	bl	8000adc <__aeabi_dcmplt>
 800b55c:	b140      	cbz	r0, 800b570 <_dtoa_r+0x168>
 800b55e:	4638      	mov	r0, r7
 800b560:	f7f4 ffe0 	bl	8000524 <__aeabi_i2d>
 800b564:	4622      	mov	r2, r4
 800b566:	462b      	mov	r3, r5
 800b568:	f7f5 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800b56c:	b900      	cbnz	r0, 800b570 <_dtoa_r+0x168>
 800b56e:	3f01      	subs	r7, #1
 800b570:	2f16      	cmp	r7, #22
 800b572:	d852      	bhi.n	800b61a <_dtoa_r+0x212>
 800b574:	4b5d      	ldr	r3, [pc, #372]	@ (800b6ec <_dtoa_r+0x2e4>)
 800b576:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b582:	f7f5 faab 	bl	8000adc <__aeabi_dcmplt>
 800b586:	2800      	cmp	r0, #0
 800b588:	d049      	beq.n	800b61e <_dtoa_r+0x216>
 800b58a:	3f01      	subs	r7, #1
 800b58c:	2300      	movs	r3, #0
 800b58e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b590:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b592:	1b9b      	subs	r3, r3, r6
 800b594:	1e5a      	subs	r2, r3, #1
 800b596:	bf45      	ittet	mi
 800b598:	f1c3 0301 	rsbmi	r3, r3, #1
 800b59c:	9300      	strmi	r3, [sp, #0]
 800b59e:	2300      	movpl	r3, #0
 800b5a0:	2300      	movmi	r3, #0
 800b5a2:	9206      	str	r2, [sp, #24]
 800b5a4:	bf54      	ite	pl
 800b5a6:	9300      	strpl	r3, [sp, #0]
 800b5a8:	9306      	strmi	r3, [sp, #24]
 800b5aa:	2f00      	cmp	r7, #0
 800b5ac:	db39      	blt.n	800b622 <_dtoa_r+0x21a>
 800b5ae:	9b06      	ldr	r3, [sp, #24]
 800b5b0:	970d      	str	r7, [sp, #52]	@ 0x34
 800b5b2:	443b      	add	r3, r7
 800b5b4:	9306      	str	r3, [sp, #24]
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	9308      	str	r3, [sp, #32]
 800b5ba:	9b07      	ldr	r3, [sp, #28]
 800b5bc:	2b09      	cmp	r3, #9
 800b5be:	d863      	bhi.n	800b688 <_dtoa_r+0x280>
 800b5c0:	2b05      	cmp	r3, #5
 800b5c2:	bfc4      	itt	gt
 800b5c4:	3b04      	subgt	r3, #4
 800b5c6:	9307      	strgt	r3, [sp, #28]
 800b5c8:	9b07      	ldr	r3, [sp, #28]
 800b5ca:	f1a3 0302 	sub.w	r3, r3, #2
 800b5ce:	bfcc      	ite	gt
 800b5d0:	2400      	movgt	r4, #0
 800b5d2:	2401      	movle	r4, #1
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	d863      	bhi.n	800b6a0 <_dtoa_r+0x298>
 800b5d8:	e8df f003 	tbb	[pc, r3]
 800b5dc:	2b375452 	.word	0x2b375452
 800b5e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b5e4:	441e      	add	r6, r3
 800b5e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b5ea:	2b20      	cmp	r3, #32
 800b5ec:	bfc1      	itttt	gt
 800b5ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b5f2:	409f      	lslgt	r7, r3
 800b5f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b5f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b5fc:	bfd6      	itet	le
 800b5fe:	f1c3 0320 	rsble	r3, r3, #32
 800b602:	ea47 0003 	orrgt.w	r0, r7, r3
 800b606:	fa04 f003 	lslle.w	r0, r4, r3
 800b60a:	f7f4 ff7b 	bl	8000504 <__aeabi_ui2d>
 800b60e:	2201      	movs	r2, #1
 800b610:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b614:	3e01      	subs	r6, #1
 800b616:	9212      	str	r2, [sp, #72]	@ 0x48
 800b618:	e776      	b.n	800b508 <_dtoa_r+0x100>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e7b7      	b.n	800b58e <_dtoa_r+0x186>
 800b61e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b620:	e7b6      	b.n	800b590 <_dtoa_r+0x188>
 800b622:	9b00      	ldr	r3, [sp, #0]
 800b624:	1bdb      	subs	r3, r3, r7
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	427b      	negs	r3, r7
 800b62a:	9308      	str	r3, [sp, #32]
 800b62c:	2300      	movs	r3, #0
 800b62e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b630:	e7c3      	b.n	800b5ba <_dtoa_r+0x1b2>
 800b632:	2301      	movs	r3, #1
 800b634:	9309      	str	r3, [sp, #36]	@ 0x24
 800b636:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b638:	eb07 0b03 	add.w	fp, r7, r3
 800b63c:	f10b 0301 	add.w	r3, fp, #1
 800b640:	2b01      	cmp	r3, #1
 800b642:	9303      	str	r3, [sp, #12]
 800b644:	bfb8      	it	lt
 800b646:	2301      	movlt	r3, #1
 800b648:	e006      	b.n	800b658 <_dtoa_r+0x250>
 800b64a:	2301      	movs	r3, #1
 800b64c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b64e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b650:	2b00      	cmp	r3, #0
 800b652:	dd28      	ble.n	800b6a6 <_dtoa_r+0x29e>
 800b654:	469b      	mov	fp, r3
 800b656:	9303      	str	r3, [sp, #12]
 800b658:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b65c:	2100      	movs	r1, #0
 800b65e:	2204      	movs	r2, #4
 800b660:	f102 0514 	add.w	r5, r2, #20
 800b664:	429d      	cmp	r5, r3
 800b666:	d926      	bls.n	800b6b6 <_dtoa_r+0x2ae>
 800b668:	6041      	str	r1, [r0, #4]
 800b66a:	4648      	mov	r0, r9
 800b66c:	f000 fd9c 	bl	800c1a8 <_Balloc>
 800b670:	4682      	mov	sl, r0
 800b672:	2800      	cmp	r0, #0
 800b674:	d142      	bne.n	800b6fc <_dtoa_r+0x2f4>
 800b676:	4b1e      	ldr	r3, [pc, #120]	@ (800b6f0 <_dtoa_r+0x2e8>)
 800b678:	4602      	mov	r2, r0
 800b67a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b67e:	e6da      	b.n	800b436 <_dtoa_r+0x2e>
 800b680:	2300      	movs	r3, #0
 800b682:	e7e3      	b.n	800b64c <_dtoa_r+0x244>
 800b684:	2300      	movs	r3, #0
 800b686:	e7d5      	b.n	800b634 <_dtoa_r+0x22c>
 800b688:	2401      	movs	r4, #1
 800b68a:	2300      	movs	r3, #0
 800b68c:	9307      	str	r3, [sp, #28]
 800b68e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b690:	f04f 3bff 	mov.w	fp, #4294967295
 800b694:	2200      	movs	r2, #0
 800b696:	f8cd b00c 	str.w	fp, [sp, #12]
 800b69a:	2312      	movs	r3, #18
 800b69c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b69e:	e7db      	b.n	800b658 <_dtoa_r+0x250>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6a4:	e7f4      	b.n	800b690 <_dtoa_r+0x288>
 800b6a6:	f04f 0b01 	mov.w	fp, #1
 800b6aa:	f8cd b00c 	str.w	fp, [sp, #12]
 800b6ae:	465b      	mov	r3, fp
 800b6b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b6b4:	e7d0      	b.n	800b658 <_dtoa_r+0x250>
 800b6b6:	3101      	adds	r1, #1
 800b6b8:	0052      	lsls	r2, r2, #1
 800b6ba:	e7d1      	b.n	800b660 <_dtoa_r+0x258>
 800b6bc:	f3af 8000 	nop.w
 800b6c0:	636f4361 	.word	0x636f4361
 800b6c4:	3fd287a7 	.word	0x3fd287a7
 800b6c8:	8b60c8b3 	.word	0x8b60c8b3
 800b6cc:	3fc68a28 	.word	0x3fc68a28
 800b6d0:	509f79fb 	.word	0x509f79fb
 800b6d4:	3fd34413 	.word	0x3fd34413
 800b6d8:	08028e22 	.word	0x08028e22
 800b6dc:	08028e39 	.word	0x08028e39
 800b6e0:	7ff00000 	.word	0x7ff00000
 800b6e4:	08028ded 	.word	0x08028ded
 800b6e8:	3ff80000 	.word	0x3ff80000
 800b6ec:	08028fe8 	.word	0x08028fe8
 800b6f0:	08028e91 	.word	0x08028e91
 800b6f4:	08028e1e 	.word	0x08028e1e
 800b6f8:	08028dec 	.word	0x08028dec
 800b6fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b700:	6018      	str	r0, [r3, #0]
 800b702:	9b03      	ldr	r3, [sp, #12]
 800b704:	2b0e      	cmp	r3, #14
 800b706:	f200 80a1 	bhi.w	800b84c <_dtoa_r+0x444>
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	f000 809e 	beq.w	800b84c <_dtoa_r+0x444>
 800b710:	2f00      	cmp	r7, #0
 800b712:	dd33      	ble.n	800b77c <_dtoa_r+0x374>
 800b714:	4b9c      	ldr	r3, [pc, #624]	@ (800b988 <_dtoa_r+0x580>)
 800b716:	f007 020f 	and.w	r2, r7, #15
 800b71a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b71e:	ed93 7b00 	vldr	d7, [r3]
 800b722:	05f8      	lsls	r0, r7, #23
 800b724:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b728:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b72c:	d516      	bpl.n	800b75c <_dtoa_r+0x354>
 800b72e:	4b97      	ldr	r3, [pc, #604]	@ (800b98c <_dtoa_r+0x584>)
 800b730:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b734:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b738:	f7f5 f888 	bl	800084c <__aeabi_ddiv>
 800b73c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b740:	f004 040f 	and.w	r4, r4, #15
 800b744:	2603      	movs	r6, #3
 800b746:	4d91      	ldr	r5, [pc, #580]	@ (800b98c <_dtoa_r+0x584>)
 800b748:	b954      	cbnz	r4, 800b760 <_dtoa_r+0x358>
 800b74a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b74e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b752:	f7f5 f87b 	bl	800084c <__aeabi_ddiv>
 800b756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b75a:	e028      	b.n	800b7ae <_dtoa_r+0x3a6>
 800b75c:	2602      	movs	r6, #2
 800b75e:	e7f2      	b.n	800b746 <_dtoa_r+0x33e>
 800b760:	07e1      	lsls	r1, r4, #31
 800b762:	d508      	bpl.n	800b776 <_dtoa_r+0x36e>
 800b764:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b768:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b76c:	f7f4 ff44 	bl	80005f8 <__aeabi_dmul>
 800b770:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b774:	3601      	adds	r6, #1
 800b776:	1064      	asrs	r4, r4, #1
 800b778:	3508      	adds	r5, #8
 800b77a:	e7e5      	b.n	800b748 <_dtoa_r+0x340>
 800b77c:	f000 80af 	beq.w	800b8de <_dtoa_r+0x4d6>
 800b780:	427c      	negs	r4, r7
 800b782:	4b81      	ldr	r3, [pc, #516]	@ (800b988 <_dtoa_r+0x580>)
 800b784:	4d81      	ldr	r5, [pc, #516]	@ (800b98c <_dtoa_r+0x584>)
 800b786:	f004 020f 	and.w	r2, r4, #15
 800b78a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b792:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b796:	f7f4 ff2f 	bl	80005f8 <__aeabi_dmul>
 800b79a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b79e:	1124      	asrs	r4, r4, #4
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	2602      	movs	r6, #2
 800b7a4:	2c00      	cmp	r4, #0
 800b7a6:	f040 808f 	bne.w	800b8c8 <_dtoa_r+0x4c0>
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1d3      	bne.n	800b756 <_dtoa_r+0x34e>
 800b7ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b7b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f000 8094 	beq.w	800b8e2 <_dtoa_r+0x4da>
 800b7ba:	4b75      	ldr	r3, [pc, #468]	@ (800b990 <_dtoa_r+0x588>)
 800b7bc:	2200      	movs	r2, #0
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	f7f5 f98b 	bl	8000adc <__aeabi_dcmplt>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	f000 808b 	beq.w	800b8e2 <_dtoa_r+0x4da>
 800b7cc:	9b03      	ldr	r3, [sp, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f000 8087 	beq.w	800b8e2 <_dtoa_r+0x4da>
 800b7d4:	f1bb 0f00 	cmp.w	fp, #0
 800b7d8:	dd34      	ble.n	800b844 <_dtoa_r+0x43c>
 800b7da:	4620      	mov	r0, r4
 800b7dc:	4b6d      	ldr	r3, [pc, #436]	@ (800b994 <_dtoa_r+0x58c>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	f7f4 ff09 	bl	80005f8 <__aeabi_dmul>
 800b7e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7ea:	f107 38ff 	add.w	r8, r7, #4294967295
 800b7ee:	3601      	adds	r6, #1
 800b7f0:	465c      	mov	r4, fp
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f7f4 fe96 	bl	8000524 <__aeabi_i2d>
 800b7f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7fc:	f7f4 fefc 	bl	80005f8 <__aeabi_dmul>
 800b800:	4b65      	ldr	r3, [pc, #404]	@ (800b998 <_dtoa_r+0x590>)
 800b802:	2200      	movs	r2, #0
 800b804:	f7f4 fd42 	bl	800028c <__adddf3>
 800b808:	4605      	mov	r5, r0
 800b80a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b80e:	2c00      	cmp	r4, #0
 800b810:	d16a      	bne.n	800b8e8 <_dtoa_r+0x4e0>
 800b812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b816:	4b61      	ldr	r3, [pc, #388]	@ (800b99c <_dtoa_r+0x594>)
 800b818:	2200      	movs	r2, #0
 800b81a:	f7f4 fd35 	bl	8000288 <__aeabi_dsub>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b826:	462a      	mov	r2, r5
 800b828:	4633      	mov	r3, r6
 800b82a:	f7f5 f975 	bl	8000b18 <__aeabi_dcmpgt>
 800b82e:	2800      	cmp	r0, #0
 800b830:	f040 8298 	bne.w	800bd64 <_dtoa_r+0x95c>
 800b834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b838:	462a      	mov	r2, r5
 800b83a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b83e:	f7f5 f94d 	bl	8000adc <__aeabi_dcmplt>
 800b842:	bb38      	cbnz	r0, 800b894 <_dtoa_r+0x48c>
 800b844:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b848:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b84c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f2c0 8157 	blt.w	800bb02 <_dtoa_r+0x6fa>
 800b854:	2f0e      	cmp	r7, #14
 800b856:	f300 8154 	bgt.w	800bb02 <_dtoa_r+0x6fa>
 800b85a:	4b4b      	ldr	r3, [pc, #300]	@ (800b988 <_dtoa_r+0x580>)
 800b85c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b860:	ed93 7b00 	vldr	d7, [r3]
 800b864:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b866:	2b00      	cmp	r3, #0
 800b868:	ed8d 7b00 	vstr	d7, [sp]
 800b86c:	f280 80e5 	bge.w	800ba3a <_dtoa_r+0x632>
 800b870:	9b03      	ldr	r3, [sp, #12]
 800b872:	2b00      	cmp	r3, #0
 800b874:	f300 80e1 	bgt.w	800ba3a <_dtoa_r+0x632>
 800b878:	d10c      	bne.n	800b894 <_dtoa_r+0x48c>
 800b87a:	4b48      	ldr	r3, [pc, #288]	@ (800b99c <_dtoa_r+0x594>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	ec51 0b17 	vmov	r0, r1, d7
 800b882:	f7f4 feb9 	bl	80005f8 <__aeabi_dmul>
 800b886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b88a:	f7f5 f93b 	bl	8000b04 <__aeabi_dcmpge>
 800b88e:	2800      	cmp	r0, #0
 800b890:	f000 8266 	beq.w	800bd60 <_dtoa_r+0x958>
 800b894:	2400      	movs	r4, #0
 800b896:	4625      	mov	r5, r4
 800b898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b89a:	4656      	mov	r6, sl
 800b89c:	ea6f 0803 	mvn.w	r8, r3
 800b8a0:	2700      	movs	r7, #0
 800b8a2:	4621      	mov	r1, r4
 800b8a4:	4648      	mov	r0, r9
 800b8a6:	f000 fcbf 	bl	800c228 <_Bfree>
 800b8aa:	2d00      	cmp	r5, #0
 800b8ac:	f000 80bd 	beq.w	800ba2a <_dtoa_r+0x622>
 800b8b0:	b12f      	cbz	r7, 800b8be <_dtoa_r+0x4b6>
 800b8b2:	42af      	cmp	r7, r5
 800b8b4:	d003      	beq.n	800b8be <_dtoa_r+0x4b6>
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	4648      	mov	r0, r9
 800b8ba:	f000 fcb5 	bl	800c228 <_Bfree>
 800b8be:	4629      	mov	r1, r5
 800b8c0:	4648      	mov	r0, r9
 800b8c2:	f000 fcb1 	bl	800c228 <_Bfree>
 800b8c6:	e0b0      	b.n	800ba2a <_dtoa_r+0x622>
 800b8c8:	07e2      	lsls	r2, r4, #31
 800b8ca:	d505      	bpl.n	800b8d8 <_dtoa_r+0x4d0>
 800b8cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8d0:	f7f4 fe92 	bl	80005f8 <__aeabi_dmul>
 800b8d4:	3601      	adds	r6, #1
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	1064      	asrs	r4, r4, #1
 800b8da:	3508      	adds	r5, #8
 800b8dc:	e762      	b.n	800b7a4 <_dtoa_r+0x39c>
 800b8de:	2602      	movs	r6, #2
 800b8e0:	e765      	b.n	800b7ae <_dtoa_r+0x3a6>
 800b8e2:	9c03      	ldr	r4, [sp, #12]
 800b8e4:	46b8      	mov	r8, r7
 800b8e6:	e784      	b.n	800b7f2 <_dtoa_r+0x3ea>
 800b8e8:	4b27      	ldr	r3, [pc, #156]	@ (800b988 <_dtoa_r+0x580>)
 800b8ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8f4:	4454      	add	r4, sl
 800b8f6:	2900      	cmp	r1, #0
 800b8f8:	d054      	beq.n	800b9a4 <_dtoa_r+0x59c>
 800b8fa:	4929      	ldr	r1, [pc, #164]	@ (800b9a0 <_dtoa_r+0x598>)
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	f7f4 ffa5 	bl	800084c <__aeabi_ddiv>
 800b902:	4633      	mov	r3, r6
 800b904:	462a      	mov	r2, r5
 800b906:	f7f4 fcbf 	bl	8000288 <__aeabi_dsub>
 800b90a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b90e:	4656      	mov	r6, sl
 800b910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b914:	f7f5 f920 	bl	8000b58 <__aeabi_d2iz>
 800b918:	4605      	mov	r5, r0
 800b91a:	f7f4 fe03 	bl	8000524 <__aeabi_i2d>
 800b91e:	4602      	mov	r2, r0
 800b920:	460b      	mov	r3, r1
 800b922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b926:	f7f4 fcaf 	bl	8000288 <__aeabi_dsub>
 800b92a:	3530      	adds	r5, #48	@ 0x30
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b934:	f806 5b01 	strb.w	r5, [r6], #1
 800b938:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b93c:	f7f5 f8ce 	bl	8000adc <__aeabi_dcmplt>
 800b940:	2800      	cmp	r0, #0
 800b942:	d172      	bne.n	800ba2a <_dtoa_r+0x622>
 800b944:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b948:	4911      	ldr	r1, [pc, #68]	@ (800b990 <_dtoa_r+0x588>)
 800b94a:	2000      	movs	r0, #0
 800b94c:	f7f4 fc9c 	bl	8000288 <__aeabi_dsub>
 800b950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b954:	f7f5 f8c2 	bl	8000adc <__aeabi_dcmplt>
 800b958:	2800      	cmp	r0, #0
 800b95a:	f040 80b4 	bne.w	800bac6 <_dtoa_r+0x6be>
 800b95e:	42a6      	cmp	r6, r4
 800b960:	f43f af70 	beq.w	800b844 <_dtoa_r+0x43c>
 800b964:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b968:	4b0a      	ldr	r3, [pc, #40]	@ (800b994 <_dtoa_r+0x58c>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	f7f4 fe44 	bl	80005f8 <__aeabi_dmul>
 800b970:	4b08      	ldr	r3, [pc, #32]	@ (800b994 <_dtoa_r+0x58c>)
 800b972:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b976:	2200      	movs	r2, #0
 800b978:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b97c:	f7f4 fe3c 	bl	80005f8 <__aeabi_dmul>
 800b980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b984:	e7c4      	b.n	800b910 <_dtoa_r+0x508>
 800b986:	bf00      	nop
 800b988:	08028fe8 	.word	0x08028fe8
 800b98c:	08028fc0 	.word	0x08028fc0
 800b990:	3ff00000 	.word	0x3ff00000
 800b994:	40240000 	.word	0x40240000
 800b998:	401c0000 	.word	0x401c0000
 800b99c:	40140000 	.word	0x40140000
 800b9a0:	3fe00000 	.word	0x3fe00000
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f7f4 fe26 	bl	80005f8 <__aeabi_dmul>
 800b9ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b9b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b9b2:	4656      	mov	r6, sl
 800b9b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9b8:	f7f5 f8ce 	bl	8000b58 <__aeabi_d2iz>
 800b9bc:	4605      	mov	r5, r0
 800b9be:	f7f4 fdb1 	bl	8000524 <__aeabi_i2d>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9ca:	f7f4 fc5d 	bl	8000288 <__aeabi_dsub>
 800b9ce:	3530      	adds	r5, #48	@ 0x30
 800b9d0:	f806 5b01 	strb.w	r5, [r6], #1
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	42a6      	cmp	r6, r4
 800b9da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9de:	f04f 0200 	mov.w	r2, #0
 800b9e2:	d124      	bne.n	800ba2e <_dtoa_r+0x626>
 800b9e4:	4baf      	ldr	r3, [pc, #700]	@ (800bca4 <_dtoa_r+0x89c>)
 800b9e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b9ea:	f7f4 fc4f 	bl	800028c <__adddf3>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9f6:	f7f5 f88f 	bl	8000b18 <__aeabi_dcmpgt>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d163      	bne.n	800bac6 <_dtoa_r+0x6be>
 800b9fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ba02:	49a8      	ldr	r1, [pc, #672]	@ (800bca4 <_dtoa_r+0x89c>)
 800ba04:	2000      	movs	r0, #0
 800ba06:	f7f4 fc3f 	bl	8000288 <__aeabi_dsub>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba12:	f7f5 f863 	bl	8000adc <__aeabi_dcmplt>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f43f af14 	beq.w	800b844 <_dtoa_r+0x43c>
 800ba1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ba1e:	1e73      	subs	r3, r6, #1
 800ba20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba26:	2b30      	cmp	r3, #48	@ 0x30
 800ba28:	d0f8      	beq.n	800ba1c <_dtoa_r+0x614>
 800ba2a:	4647      	mov	r7, r8
 800ba2c:	e03b      	b.n	800baa6 <_dtoa_r+0x69e>
 800ba2e:	4b9e      	ldr	r3, [pc, #632]	@ (800bca8 <_dtoa_r+0x8a0>)
 800ba30:	f7f4 fde2 	bl	80005f8 <__aeabi_dmul>
 800ba34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba38:	e7bc      	b.n	800b9b4 <_dtoa_r+0x5ac>
 800ba3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ba3e:	4656      	mov	r6, sl
 800ba40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba44:	4620      	mov	r0, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	f7f4 ff00 	bl	800084c <__aeabi_ddiv>
 800ba4c:	f7f5 f884 	bl	8000b58 <__aeabi_d2iz>
 800ba50:	4680      	mov	r8, r0
 800ba52:	f7f4 fd67 	bl	8000524 <__aeabi_i2d>
 800ba56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba5a:	f7f4 fdcd 	bl	80005f8 <__aeabi_dmul>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	4620      	mov	r0, r4
 800ba64:	4629      	mov	r1, r5
 800ba66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ba6a:	f7f4 fc0d 	bl	8000288 <__aeabi_dsub>
 800ba6e:	f806 4b01 	strb.w	r4, [r6], #1
 800ba72:	9d03      	ldr	r5, [sp, #12]
 800ba74:	eba6 040a 	sub.w	r4, r6, sl
 800ba78:	42a5      	cmp	r5, r4
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	d133      	bne.n	800bae8 <_dtoa_r+0x6e0>
 800ba80:	f7f4 fc04 	bl	800028c <__adddf3>
 800ba84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	f7f5 f844 	bl	8000b18 <__aeabi_dcmpgt>
 800ba90:	b9c0      	cbnz	r0, 800bac4 <_dtoa_r+0x6bc>
 800ba92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba96:	4620      	mov	r0, r4
 800ba98:	4629      	mov	r1, r5
 800ba9a:	f7f5 f815 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba9e:	b110      	cbz	r0, 800baa6 <_dtoa_r+0x69e>
 800baa0:	f018 0f01 	tst.w	r8, #1
 800baa4:	d10e      	bne.n	800bac4 <_dtoa_r+0x6bc>
 800baa6:	9902      	ldr	r1, [sp, #8]
 800baa8:	4648      	mov	r0, r9
 800baaa:	f000 fbbd 	bl	800c228 <_Bfree>
 800baae:	2300      	movs	r3, #0
 800bab0:	7033      	strb	r3, [r6, #0]
 800bab2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bab4:	3701      	adds	r7, #1
 800bab6:	601f      	str	r7, [r3, #0]
 800bab8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800baba:	2b00      	cmp	r3, #0
 800babc:	f000 824b 	beq.w	800bf56 <_dtoa_r+0xb4e>
 800bac0:	601e      	str	r6, [r3, #0]
 800bac2:	e248      	b.n	800bf56 <_dtoa_r+0xb4e>
 800bac4:	46b8      	mov	r8, r7
 800bac6:	4633      	mov	r3, r6
 800bac8:	461e      	mov	r6, r3
 800baca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bace:	2a39      	cmp	r2, #57	@ 0x39
 800bad0:	d106      	bne.n	800bae0 <_dtoa_r+0x6d8>
 800bad2:	459a      	cmp	sl, r3
 800bad4:	d1f8      	bne.n	800bac8 <_dtoa_r+0x6c0>
 800bad6:	2230      	movs	r2, #48	@ 0x30
 800bad8:	f108 0801 	add.w	r8, r8, #1
 800badc:	f88a 2000 	strb.w	r2, [sl]
 800bae0:	781a      	ldrb	r2, [r3, #0]
 800bae2:	3201      	adds	r2, #1
 800bae4:	701a      	strb	r2, [r3, #0]
 800bae6:	e7a0      	b.n	800ba2a <_dtoa_r+0x622>
 800bae8:	4b6f      	ldr	r3, [pc, #444]	@ (800bca8 <_dtoa_r+0x8a0>)
 800baea:	2200      	movs	r2, #0
 800baec:	f7f4 fd84 	bl	80005f8 <__aeabi_dmul>
 800baf0:	2200      	movs	r2, #0
 800baf2:	2300      	movs	r3, #0
 800baf4:	4604      	mov	r4, r0
 800baf6:	460d      	mov	r5, r1
 800baf8:	f7f4 ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d09f      	beq.n	800ba40 <_dtoa_r+0x638>
 800bb00:	e7d1      	b.n	800baa6 <_dtoa_r+0x69e>
 800bb02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb04:	2a00      	cmp	r2, #0
 800bb06:	f000 80ea 	beq.w	800bcde <_dtoa_r+0x8d6>
 800bb0a:	9a07      	ldr	r2, [sp, #28]
 800bb0c:	2a01      	cmp	r2, #1
 800bb0e:	f300 80cd 	bgt.w	800bcac <_dtoa_r+0x8a4>
 800bb12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bb14:	2a00      	cmp	r2, #0
 800bb16:	f000 80c1 	beq.w	800bc9c <_dtoa_r+0x894>
 800bb1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bb1e:	9c08      	ldr	r4, [sp, #32]
 800bb20:	9e00      	ldr	r6, [sp, #0]
 800bb22:	9a00      	ldr	r2, [sp, #0]
 800bb24:	441a      	add	r2, r3
 800bb26:	9200      	str	r2, [sp, #0]
 800bb28:	9a06      	ldr	r2, [sp, #24]
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	441a      	add	r2, r3
 800bb2e:	4648      	mov	r0, r9
 800bb30:	9206      	str	r2, [sp, #24]
 800bb32:	f000 fc77 	bl	800c424 <__i2b>
 800bb36:	4605      	mov	r5, r0
 800bb38:	b166      	cbz	r6, 800bb54 <_dtoa_r+0x74c>
 800bb3a:	9b06      	ldr	r3, [sp, #24]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	dd09      	ble.n	800bb54 <_dtoa_r+0x74c>
 800bb40:	42b3      	cmp	r3, r6
 800bb42:	9a00      	ldr	r2, [sp, #0]
 800bb44:	bfa8      	it	ge
 800bb46:	4633      	movge	r3, r6
 800bb48:	1ad2      	subs	r2, r2, r3
 800bb4a:	9200      	str	r2, [sp, #0]
 800bb4c:	9a06      	ldr	r2, [sp, #24]
 800bb4e:	1af6      	subs	r6, r6, r3
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	9306      	str	r3, [sp, #24]
 800bb54:	9b08      	ldr	r3, [sp, #32]
 800bb56:	b30b      	cbz	r3, 800bb9c <_dtoa_r+0x794>
 800bb58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 80c6 	beq.w	800bcec <_dtoa_r+0x8e4>
 800bb60:	2c00      	cmp	r4, #0
 800bb62:	f000 80c0 	beq.w	800bce6 <_dtoa_r+0x8de>
 800bb66:	4629      	mov	r1, r5
 800bb68:	4622      	mov	r2, r4
 800bb6a:	4648      	mov	r0, r9
 800bb6c:	f000 fd12 	bl	800c594 <__pow5mult>
 800bb70:	9a02      	ldr	r2, [sp, #8]
 800bb72:	4601      	mov	r1, r0
 800bb74:	4605      	mov	r5, r0
 800bb76:	4648      	mov	r0, r9
 800bb78:	f000 fc6a 	bl	800c450 <__multiply>
 800bb7c:	9902      	ldr	r1, [sp, #8]
 800bb7e:	4680      	mov	r8, r0
 800bb80:	4648      	mov	r0, r9
 800bb82:	f000 fb51 	bl	800c228 <_Bfree>
 800bb86:	9b08      	ldr	r3, [sp, #32]
 800bb88:	1b1b      	subs	r3, r3, r4
 800bb8a:	9308      	str	r3, [sp, #32]
 800bb8c:	f000 80b1 	beq.w	800bcf2 <_dtoa_r+0x8ea>
 800bb90:	9a08      	ldr	r2, [sp, #32]
 800bb92:	4641      	mov	r1, r8
 800bb94:	4648      	mov	r0, r9
 800bb96:	f000 fcfd 	bl	800c594 <__pow5mult>
 800bb9a:	9002      	str	r0, [sp, #8]
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	4648      	mov	r0, r9
 800bba0:	f000 fc40 	bl	800c424 <__i2b>
 800bba4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bba6:	4604      	mov	r4, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 81d8 	beq.w	800bf5e <_dtoa_r+0xb56>
 800bbae:	461a      	mov	r2, r3
 800bbb0:	4601      	mov	r1, r0
 800bbb2:	4648      	mov	r0, r9
 800bbb4:	f000 fcee 	bl	800c594 <__pow5mult>
 800bbb8:	9b07      	ldr	r3, [sp, #28]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	f300 809f 	bgt.w	800bd00 <_dtoa_r+0x8f8>
 800bbc2:	9b04      	ldr	r3, [sp, #16]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f040 8097 	bne.w	800bcf8 <_dtoa_r+0x8f0>
 800bbca:	9b05      	ldr	r3, [sp, #20]
 800bbcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f040 8093 	bne.w	800bcfc <_dtoa_r+0x8f4>
 800bbd6:	9b05      	ldr	r3, [sp, #20]
 800bbd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbdc:	0d1b      	lsrs	r3, r3, #20
 800bbde:	051b      	lsls	r3, r3, #20
 800bbe0:	b133      	cbz	r3, 800bbf0 <_dtoa_r+0x7e8>
 800bbe2:	9b00      	ldr	r3, [sp, #0]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	9b06      	ldr	r3, [sp, #24]
 800bbea:	3301      	adds	r3, #1
 800bbec:	9306      	str	r3, [sp, #24]
 800bbee:	2301      	movs	r3, #1
 800bbf0:	9308      	str	r3, [sp, #32]
 800bbf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f000 81b8 	beq.w	800bf6a <_dtoa_r+0xb62>
 800bbfa:	6923      	ldr	r3, [r4, #16]
 800bbfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc00:	6918      	ldr	r0, [r3, #16]
 800bc02:	f000 fbc3 	bl	800c38c <__hi0bits>
 800bc06:	f1c0 0020 	rsb	r0, r0, #32
 800bc0a:	9b06      	ldr	r3, [sp, #24]
 800bc0c:	4418      	add	r0, r3
 800bc0e:	f010 001f 	ands.w	r0, r0, #31
 800bc12:	f000 8082 	beq.w	800bd1a <_dtoa_r+0x912>
 800bc16:	f1c0 0320 	rsb	r3, r0, #32
 800bc1a:	2b04      	cmp	r3, #4
 800bc1c:	dd73      	ble.n	800bd06 <_dtoa_r+0x8fe>
 800bc1e:	9b00      	ldr	r3, [sp, #0]
 800bc20:	f1c0 001c 	rsb	r0, r0, #28
 800bc24:	4403      	add	r3, r0
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	9b06      	ldr	r3, [sp, #24]
 800bc2a:	4403      	add	r3, r0
 800bc2c:	4406      	add	r6, r0
 800bc2e:	9306      	str	r3, [sp, #24]
 800bc30:	9b00      	ldr	r3, [sp, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	dd05      	ble.n	800bc42 <_dtoa_r+0x83a>
 800bc36:	9902      	ldr	r1, [sp, #8]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	4648      	mov	r0, r9
 800bc3c:	f000 fd04 	bl	800c648 <__lshift>
 800bc40:	9002      	str	r0, [sp, #8]
 800bc42:	9b06      	ldr	r3, [sp, #24]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dd05      	ble.n	800bc54 <_dtoa_r+0x84c>
 800bc48:	4621      	mov	r1, r4
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	4648      	mov	r0, r9
 800bc4e:	f000 fcfb 	bl	800c648 <__lshift>
 800bc52:	4604      	mov	r4, r0
 800bc54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d061      	beq.n	800bd1e <_dtoa_r+0x916>
 800bc5a:	9802      	ldr	r0, [sp, #8]
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	f000 fd5f 	bl	800c720 <__mcmp>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	da5b      	bge.n	800bd1e <_dtoa_r+0x916>
 800bc66:	2300      	movs	r3, #0
 800bc68:	9902      	ldr	r1, [sp, #8]
 800bc6a:	220a      	movs	r2, #10
 800bc6c:	4648      	mov	r0, r9
 800bc6e:	f000 fafd 	bl	800c26c <__multadd>
 800bc72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc74:	9002      	str	r0, [sp, #8]
 800bc76:	f107 38ff 	add.w	r8, r7, #4294967295
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 8177 	beq.w	800bf6e <_dtoa_r+0xb66>
 800bc80:	4629      	mov	r1, r5
 800bc82:	2300      	movs	r3, #0
 800bc84:	220a      	movs	r2, #10
 800bc86:	4648      	mov	r0, r9
 800bc88:	f000 faf0 	bl	800c26c <__multadd>
 800bc8c:	f1bb 0f00 	cmp.w	fp, #0
 800bc90:	4605      	mov	r5, r0
 800bc92:	dc6f      	bgt.n	800bd74 <_dtoa_r+0x96c>
 800bc94:	9b07      	ldr	r3, [sp, #28]
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	dc49      	bgt.n	800bd2e <_dtoa_r+0x926>
 800bc9a:	e06b      	b.n	800bd74 <_dtoa_r+0x96c>
 800bc9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bc9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bca2:	e73c      	b.n	800bb1e <_dtoa_r+0x716>
 800bca4:	3fe00000 	.word	0x3fe00000
 800bca8:	40240000 	.word	0x40240000
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	1e5c      	subs	r4, r3, #1
 800bcb0:	9b08      	ldr	r3, [sp, #32]
 800bcb2:	42a3      	cmp	r3, r4
 800bcb4:	db09      	blt.n	800bcca <_dtoa_r+0x8c2>
 800bcb6:	1b1c      	subs	r4, r3, r4
 800bcb8:	9b03      	ldr	r3, [sp, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f6bf af30 	bge.w	800bb20 <_dtoa_r+0x718>
 800bcc0:	9b00      	ldr	r3, [sp, #0]
 800bcc2:	9a03      	ldr	r2, [sp, #12]
 800bcc4:	1a9e      	subs	r6, r3, r2
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e72b      	b.n	800bb22 <_dtoa_r+0x71a>
 800bcca:	9b08      	ldr	r3, [sp, #32]
 800bccc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcce:	9408      	str	r4, [sp, #32]
 800bcd0:	1ae3      	subs	r3, r4, r3
 800bcd2:	441a      	add	r2, r3
 800bcd4:	9e00      	ldr	r6, [sp, #0]
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	920d      	str	r2, [sp, #52]	@ 0x34
 800bcda:	2400      	movs	r4, #0
 800bcdc:	e721      	b.n	800bb22 <_dtoa_r+0x71a>
 800bcde:	9c08      	ldr	r4, [sp, #32]
 800bce0:	9e00      	ldr	r6, [sp, #0]
 800bce2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bce4:	e728      	b.n	800bb38 <_dtoa_r+0x730>
 800bce6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bcea:	e751      	b.n	800bb90 <_dtoa_r+0x788>
 800bcec:	9a08      	ldr	r2, [sp, #32]
 800bcee:	9902      	ldr	r1, [sp, #8]
 800bcf0:	e750      	b.n	800bb94 <_dtoa_r+0x78c>
 800bcf2:	f8cd 8008 	str.w	r8, [sp, #8]
 800bcf6:	e751      	b.n	800bb9c <_dtoa_r+0x794>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	e779      	b.n	800bbf0 <_dtoa_r+0x7e8>
 800bcfc:	9b04      	ldr	r3, [sp, #16]
 800bcfe:	e777      	b.n	800bbf0 <_dtoa_r+0x7e8>
 800bd00:	2300      	movs	r3, #0
 800bd02:	9308      	str	r3, [sp, #32]
 800bd04:	e779      	b.n	800bbfa <_dtoa_r+0x7f2>
 800bd06:	d093      	beq.n	800bc30 <_dtoa_r+0x828>
 800bd08:	9a00      	ldr	r2, [sp, #0]
 800bd0a:	331c      	adds	r3, #28
 800bd0c:	441a      	add	r2, r3
 800bd0e:	9200      	str	r2, [sp, #0]
 800bd10:	9a06      	ldr	r2, [sp, #24]
 800bd12:	441a      	add	r2, r3
 800bd14:	441e      	add	r6, r3
 800bd16:	9206      	str	r2, [sp, #24]
 800bd18:	e78a      	b.n	800bc30 <_dtoa_r+0x828>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	e7f4      	b.n	800bd08 <_dtoa_r+0x900>
 800bd1e:	9b03      	ldr	r3, [sp, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	46b8      	mov	r8, r7
 800bd24:	dc20      	bgt.n	800bd68 <_dtoa_r+0x960>
 800bd26:	469b      	mov	fp, r3
 800bd28:	9b07      	ldr	r3, [sp, #28]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	dd1e      	ble.n	800bd6c <_dtoa_r+0x964>
 800bd2e:	f1bb 0f00 	cmp.w	fp, #0
 800bd32:	f47f adb1 	bne.w	800b898 <_dtoa_r+0x490>
 800bd36:	4621      	mov	r1, r4
 800bd38:	465b      	mov	r3, fp
 800bd3a:	2205      	movs	r2, #5
 800bd3c:	4648      	mov	r0, r9
 800bd3e:	f000 fa95 	bl	800c26c <__multadd>
 800bd42:	4601      	mov	r1, r0
 800bd44:	4604      	mov	r4, r0
 800bd46:	9802      	ldr	r0, [sp, #8]
 800bd48:	f000 fcea 	bl	800c720 <__mcmp>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	f77f ada3 	ble.w	800b898 <_dtoa_r+0x490>
 800bd52:	4656      	mov	r6, sl
 800bd54:	2331      	movs	r3, #49	@ 0x31
 800bd56:	f806 3b01 	strb.w	r3, [r6], #1
 800bd5a:	f108 0801 	add.w	r8, r8, #1
 800bd5e:	e59f      	b.n	800b8a0 <_dtoa_r+0x498>
 800bd60:	9c03      	ldr	r4, [sp, #12]
 800bd62:	46b8      	mov	r8, r7
 800bd64:	4625      	mov	r5, r4
 800bd66:	e7f4      	b.n	800bd52 <_dtoa_r+0x94a>
 800bd68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f000 8101 	beq.w	800bf76 <_dtoa_r+0xb6e>
 800bd74:	2e00      	cmp	r6, #0
 800bd76:	dd05      	ble.n	800bd84 <_dtoa_r+0x97c>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4632      	mov	r2, r6
 800bd7c:	4648      	mov	r0, r9
 800bd7e:	f000 fc63 	bl	800c648 <__lshift>
 800bd82:	4605      	mov	r5, r0
 800bd84:	9b08      	ldr	r3, [sp, #32]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d05c      	beq.n	800be44 <_dtoa_r+0xa3c>
 800bd8a:	6869      	ldr	r1, [r5, #4]
 800bd8c:	4648      	mov	r0, r9
 800bd8e:	f000 fa0b 	bl	800c1a8 <_Balloc>
 800bd92:	4606      	mov	r6, r0
 800bd94:	b928      	cbnz	r0, 800bda2 <_dtoa_r+0x99a>
 800bd96:	4b82      	ldr	r3, [pc, #520]	@ (800bfa0 <_dtoa_r+0xb98>)
 800bd98:	4602      	mov	r2, r0
 800bd9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd9e:	f7ff bb4a 	b.w	800b436 <_dtoa_r+0x2e>
 800bda2:	692a      	ldr	r2, [r5, #16]
 800bda4:	3202      	adds	r2, #2
 800bda6:	0092      	lsls	r2, r2, #2
 800bda8:	f105 010c 	add.w	r1, r5, #12
 800bdac:	300c      	adds	r0, #12
 800bdae:	f001 ff69 	bl	800dc84 <memcpy>
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	4631      	mov	r1, r6
 800bdb6:	4648      	mov	r0, r9
 800bdb8:	f000 fc46 	bl	800c648 <__lshift>
 800bdbc:	f10a 0301 	add.w	r3, sl, #1
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	eb0a 030b 	add.w	r3, sl, fp
 800bdc6:	9308      	str	r3, [sp, #32]
 800bdc8:	9b04      	ldr	r3, [sp, #16]
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	462f      	mov	r7, r5
 800bdd0:	9306      	str	r3, [sp, #24]
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	9b00      	ldr	r3, [sp, #0]
 800bdd6:	9802      	ldr	r0, [sp, #8]
 800bdd8:	4621      	mov	r1, r4
 800bdda:	f103 3bff 	add.w	fp, r3, #4294967295
 800bdde:	f7ff fa89 	bl	800b2f4 <quorem>
 800bde2:	4603      	mov	r3, r0
 800bde4:	3330      	adds	r3, #48	@ 0x30
 800bde6:	9003      	str	r0, [sp, #12]
 800bde8:	4639      	mov	r1, r7
 800bdea:	9802      	ldr	r0, [sp, #8]
 800bdec:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdee:	f000 fc97 	bl	800c720 <__mcmp>
 800bdf2:	462a      	mov	r2, r5
 800bdf4:	9004      	str	r0, [sp, #16]
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	4648      	mov	r0, r9
 800bdfa:	f000 fcad 	bl	800c758 <__mdiff>
 800bdfe:	68c2      	ldr	r2, [r0, #12]
 800be00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be02:	4606      	mov	r6, r0
 800be04:	bb02      	cbnz	r2, 800be48 <_dtoa_r+0xa40>
 800be06:	4601      	mov	r1, r0
 800be08:	9802      	ldr	r0, [sp, #8]
 800be0a:	f000 fc89 	bl	800c720 <__mcmp>
 800be0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be10:	4602      	mov	r2, r0
 800be12:	4631      	mov	r1, r6
 800be14:	4648      	mov	r0, r9
 800be16:	920c      	str	r2, [sp, #48]	@ 0x30
 800be18:	9309      	str	r3, [sp, #36]	@ 0x24
 800be1a:	f000 fa05 	bl	800c228 <_Bfree>
 800be1e:	9b07      	ldr	r3, [sp, #28]
 800be20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800be22:	9e00      	ldr	r6, [sp, #0]
 800be24:	ea42 0103 	orr.w	r1, r2, r3
 800be28:	9b06      	ldr	r3, [sp, #24]
 800be2a:	4319      	orrs	r1, r3
 800be2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be2e:	d10d      	bne.n	800be4c <_dtoa_r+0xa44>
 800be30:	2b39      	cmp	r3, #57	@ 0x39
 800be32:	d027      	beq.n	800be84 <_dtoa_r+0xa7c>
 800be34:	9a04      	ldr	r2, [sp, #16]
 800be36:	2a00      	cmp	r2, #0
 800be38:	dd01      	ble.n	800be3e <_dtoa_r+0xa36>
 800be3a:	9b03      	ldr	r3, [sp, #12]
 800be3c:	3331      	adds	r3, #49	@ 0x31
 800be3e:	f88b 3000 	strb.w	r3, [fp]
 800be42:	e52e      	b.n	800b8a2 <_dtoa_r+0x49a>
 800be44:	4628      	mov	r0, r5
 800be46:	e7b9      	b.n	800bdbc <_dtoa_r+0x9b4>
 800be48:	2201      	movs	r2, #1
 800be4a:	e7e2      	b.n	800be12 <_dtoa_r+0xa0a>
 800be4c:	9904      	ldr	r1, [sp, #16]
 800be4e:	2900      	cmp	r1, #0
 800be50:	db04      	blt.n	800be5c <_dtoa_r+0xa54>
 800be52:	9807      	ldr	r0, [sp, #28]
 800be54:	4301      	orrs	r1, r0
 800be56:	9806      	ldr	r0, [sp, #24]
 800be58:	4301      	orrs	r1, r0
 800be5a:	d120      	bne.n	800be9e <_dtoa_r+0xa96>
 800be5c:	2a00      	cmp	r2, #0
 800be5e:	ddee      	ble.n	800be3e <_dtoa_r+0xa36>
 800be60:	9902      	ldr	r1, [sp, #8]
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	2201      	movs	r2, #1
 800be66:	4648      	mov	r0, r9
 800be68:	f000 fbee 	bl	800c648 <__lshift>
 800be6c:	4621      	mov	r1, r4
 800be6e:	9002      	str	r0, [sp, #8]
 800be70:	f000 fc56 	bl	800c720 <__mcmp>
 800be74:	2800      	cmp	r0, #0
 800be76:	9b00      	ldr	r3, [sp, #0]
 800be78:	dc02      	bgt.n	800be80 <_dtoa_r+0xa78>
 800be7a:	d1e0      	bne.n	800be3e <_dtoa_r+0xa36>
 800be7c:	07da      	lsls	r2, r3, #31
 800be7e:	d5de      	bpl.n	800be3e <_dtoa_r+0xa36>
 800be80:	2b39      	cmp	r3, #57	@ 0x39
 800be82:	d1da      	bne.n	800be3a <_dtoa_r+0xa32>
 800be84:	2339      	movs	r3, #57	@ 0x39
 800be86:	f88b 3000 	strb.w	r3, [fp]
 800be8a:	4633      	mov	r3, r6
 800be8c:	461e      	mov	r6, r3
 800be8e:	3b01      	subs	r3, #1
 800be90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be94:	2a39      	cmp	r2, #57	@ 0x39
 800be96:	d04e      	beq.n	800bf36 <_dtoa_r+0xb2e>
 800be98:	3201      	adds	r2, #1
 800be9a:	701a      	strb	r2, [r3, #0]
 800be9c:	e501      	b.n	800b8a2 <_dtoa_r+0x49a>
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	dd03      	ble.n	800beaa <_dtoa_r+0xaa2>
 800bea2:	2b39      	cmp	r3, #57	@ 0x39
 800bea4:	d0ee      	beq.n	800be84 <_dtoa_r+0xa7c>
 800bea6:	3301      	adds	r3, #1
 800bea8:	e7c9      	b.n	800be3e <_dtoa_r+0xa36>
 800beaa:	9a00      	ldr	r2, [sp, #0]
 800beac:	9908      	ldr	r1, [sp, #32]
 800beae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800beb2:	428a      	cmp	r2, r1
 800beb4:	d028      	beq.n	800bf08 <_dtoa_r+0xb00>
 800beb6:	9902      	ldr	r1, [sp, #8]
 800beb8:	2300      	movs	r3, #0
 800beba:	220a      	movs	r2, #10
 800bebc:	4648      	mov	r0, r9
 800bebe:	f000 f9d5 	bl	800c26c <__multadd>
 800bec2:	42af      	cmp	r7, r5
 800bec4:	9002      	str	r0, [sp, #8]
 800bec6:	f04f 0300 	mov.w	r3, #0
 800beca:	f04f 020a 	mov.w	r2, #10
 800bece:	4639      	mov	r1, r7
 800bed0:	4648      	mov	r0, r9
 800bed2:	d107      	bne.n	800bee4 <_dtoa_r+0xadc>
 800bed4:	f000 f9ca 	bl	800c26c <__multadd>
 800bed8:	4607      	mov	r7, r0
 800beda:	4605      	mov	r5, r0
 800bedc:	9b00      	ldr	r3, [sp, #0]
 800bede:	3301      	adds	r3, #1
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	e777      	b.n	800bdd4 <_dtoa_r+0x9cc>
 800bee4:	f000 f9c2 	bl	800c26c <__multadd>
 800bee8:	4629      	mov	r1, r5
 800beea:	4607      	mov	r7, r0
 800beec:	2300      	movs	r3, #0
 800beee:	220a      	movs	r2, #10
 800bef0:	4648      	mov	r0, r9
 800bef2:	f000 f9bb 	bl	800c26c <__multadd>
 800bef6:	4605      	mov	r5, r0
 800bef8:	e7f0      	b.n	800bedc <_dtoa_r+0xad4>
 800befa:	f1bb 0f00 	cmp.w	fp, #0
 800befe:	bfcc      	ite	gt
 800bf00:	465e      	movgt	r6, fp
 800bf02:	2601      	movle	r6, #1
 800bf04:	4456      	add	r6, sl
 800bf06:	2700      	movs	r7, #0
 800bf08:	9902      	ldr	r1, [sp, #8]
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	4648      	mov	r0, r9
 800bf10:	f000 fb9a 	bl	800c648 <__lshift>
 800bf14:	4621      	mov	r1, r4
 800bf16:	9002      	str	r0, [sp, #8]
 800bf18:	f000 fc02 	bl	800c720 <__mcmp>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	dcb4      	bgt.n	800be8a <_dtoa_r+0xa82>
 800bf20:	d102      	bne.n	800bf28 <_dtoa_r+0xb20>
 800bf22:	9b00      	ldr	r3, [sp, #0]
 800bf24:	07db      	lsls	r3, r3, #31
 800bf26:	d4b0      	bmi.n	800be8a <_dtoa_r+0xa82>
 800bf28:	4633      	mov	r3, r6
 800bf2a:	461e      	mov	r6, r3
 800bf2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf30:	2a30      	cmp	r2, #48	@ 0x30
 800bf32:	d0fa      	beq.n	800bf2a <_dtoa_r+0xb22>
 800bf34:	e4b5      	b.n	800b8a2 <_dtoa_r+0x49a>
 800bf36:	459a      	cmp	sl, r3
 800bf38:	d1a8      	bne.n	800be8c <_dtoa_r+0xa84>
 800bf3a:	2331      	movs	r3, #49	@ 0x31
 800bf3c:	f108 0801 	add.w	r8, r8, #1
 800bf40:	f88a 3000 	strb.w	r3, [sl]
 800bf44:	e4ad      	b.n	800b8a2 <_dtoa_r+0x49a>
 800bf46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bfa4 <_dtoa_r+0xb9c>
 800bf4c:	b11b      	cbz	r3, 800bf56 <_dtoa_r+0xb4e>
 800bf4e:	f10a 0308 	add.w	r3, sl, #8
 800bf52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	4650      	mov	r0, sl
 800bf58:	b017      	add	sp, #92	@ 0x5c
 800bf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf5e:	9b07      	ldr	r3, [sp, #28]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	f77f ae2e 	ble.w	800bbc2 <_dtoa_r+0x7ba>
 800bf66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf68:	9308      	str	r3, [sp, #32]
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	e64d      	b.n	800bc0a <_dtoa_r+0x802>
 800bf6e:	f1bb 0f00 	cmp.w	fp, #0
 800bf72:	f77f aed9 	ble.w	800bd28 <_dtoa_r+0x920>
 800bf76:	4656      	mov	r6, sl
 800bf78:	9802      	ldr	r0, [sp, #8]
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	f7ff f9ba 	bl	800b2f4 <quorem>
 800bf80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bf84:	f806 3b01 	strb.w	r3, [r6], #1
 800bf88:	eba6 020a 	sub.w	r2, r6, sl
 800bf8c:	4593      	cmp	fp, r2
 800bf8e:	ddb4      	ble.n	800befa <_dtoa_r+0xaf2>
 800bf90:	9902      	ldr	r1, [sp, #8]
 800bf92:	2300      	movs	r3, #0
 800bf94:	220a      	movs	r2, #10
 800bf96:	4648      	mov	r0, r9
 800bf98:	f000 f968 	bl	800c26c <__multadd>
 800bf9c:	9002      	str	r0, [sp, #8]
 800bf9e:	e7eb      	b.n	800bf78 <_dtoa_r+0xb70>
 800bfa0:	08028e91 	.word	0x08028e91
 800bfa4:	08028e15 	.word	0x08028e15

0800bfa8 <_free_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4605      	mov	r5, r0
 800bfac:	2900      	cmp	r1, #0
 800bfae:	d041      	beq.n	800c034 <_free_r+0x8c>
 800bfb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfb4:	1f0c      	subs	r4, r1, #4
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	bfb8      	it	lt
 800bfba:	18e4      	addlt	r4, r4, r3
 800bfbc:	f000 f8e8 	bl	800c190 <__malloc_lock>
 800bfc0:	4a1d      	ldr	r2, [pc, #116]	@ (800c038 <_free_r+0x90>)
 800bfc2:	6813      	ldr	r3, [r2, #0]
 800bfc4:	b933      	cbnz	r3, 800bfd4 <_free_r+0x2c>
 800bfc6:	6063      	str	r3, [r4, #4]
 800bfc8:	6014      	str	r4, [r2, #0]
 800bfca:	4628      	mov	r0, r5
 800bfcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd0:	f000 b8e4 	b.w	800c19c <__malloc_unlock>
 800bfd4:	42a3      	cmp	r3, r4
 800bfd6:	d908      	bls.n	800bfea <_free_r+0x42>
 800bfd8:	6820      	ldr	r0, [r4, #0]
 800bfda:	1821      	adds	r1, r4, r0
 800bfdc:	428b      	cmp	r3, r1
 800bfde:	bf01      	itttt	eq
 800bfe0:	6819      	ldreq	r1, [r3, #0]
 800bfe2:	685b      	ldreq	r3, [r3, #4]
 800bfe4:	1809      	addeq	r1, r1, r0
 800bfe6:	6021      	streq	r1, [r4, #0]
 800bfe8:	e7ed      	b.n	800bfc6 <_free_r+0x1e>
 800bfea:	461a      	mov	r2, r3
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	b10b      	cbz	r3, 800bff4 <_free_r+0x4c>
 800bff0:	42a3      	cmp	r3, r4
 800bff2:	d9fa      	bls.n	800bfea <_free_r+0x42>
 800bff4:	6811      	ldr	r1, [r2, #0]
 800bff6:	1850      	adds	r0, r2, r1
 800bff8:	42a0      	cmp	r0, r4
 800bffa:	d10b      	bne.n	800c014 <_free_r+0x6c>
 800bffc:	6820      	ldr	r0, [r4, #0]
 800bffe:	4401      	add	r1, r0
 800c000:	1850      	adds	r0, r2, r1
 800c002:	4283      	cmp	r3, r0
 800c004:	6011      	str	r1, [r2, #0]
 800c006:	d1e0      	bne.n	800bfca <_free_r+0x22>
 800c008:	6818      	ldr	r0, [r3, #0]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	6053      	str	r3, [r2, #4]
 800c00e:	4408      	add	r0, r1
 800c010:	6010      	str	r0, [r2, #0]
 800c012:	e7da      	b.n	800bfca <_free_r+0x22>
 800c014:	d902      	bls.n	800c01c <_free_r+0x74>
 800c016:	230c      	movs	r3, #12
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	e7d6      	b.n	800bfca <_free_r+0x22>
 800c01c:	6820      	ldr	r0, [r4, #0]
 800c01e:	1821      	adds	r1, r4, r0
 800c020:	428b      	cmp	r3, r1
 800c022:	bf04      	itt	eq
 800c024:	6819      	ldreq	r1, [r3, #0]
 800c026:	685b      	ldreq	r3, [r3, #4]
 800c028:	6063      	str	r3, [r4, #4]
 800c02a:	bf04      	itt	eq
 800c02c:	1809      	addeq	r1, r1, r0
 800c02e:	6021      	streq	r1, [r4, #0]
 800c030:	6054      	str	r4, [r2, #4]
 800c032:	e7ca      	b.n	800bfca <_free_r+0x22>
 800c034:	bd38      	pop	{r3, r4, r5, pc}
 800c036:	bf00      	nop
 800c038:	20007000 	.word	0x20007000

0800c03c <malloc>:
 800c03c:	4b02      	ldr	r3, [pc, #8]	@ (800c048 <malloc+0xc>)
 800c03e:	4601      	mov	r1, r0
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	f000 b825 	b.w	800c090 <_malloc_r>
 800c046:	bf00      	nop
 800c048:	20000108 	.word	0x20000108

0800c04c <sbrk_aligned>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	4e0f      	ldr	r6, [pc, #60]	@ (800c08c <sbrk_aligned+0x40>)
 800c050:	460c      	mov	r4, r1
 800c052:	6831      	ldr	r1, [r6, #0]
 800c054:	4605      	mov	r5, r0
 800c056:	b911      	cbnz	r1, 800c05e <sbrk_aligned+0x12>
 800c058:	f001 fe04 	bl	800dc64 <_sbrk_r>
 800c05c:	6030      	str	r0, [r6, #0]
 800c05e:	4621      	mov	r1, r4
 800c060:	4628      	mov	r0, r5
 800c062:	f001 fdff 	bl	800dc64 <_sbrk_r>
 800c066:	1c43      	adds	r3, r0, #1
 800c068:	d103      	bne.n	800c072 <sbrk_aligned+0x26>
 800c06a:	f04f 34ff 	mov.w	r4, #4294967295
 800c06e:	4620      	mov	r0, r4
 800c070:	bd70      	pop	{r4, r5, r6, pc}
 800c072:	1cc4      	adds	r4, r0, #3
 800c074:	f024 0403 	bic.w	r4, r4, #3
 800c078:	42a0      	cmp	r0, r4
 800c07a:	d0f8      	beq.n	800c06e <sbrk_aligned+0x22>
 800c07c:	1a21      	subs	r1, r4, r0
 800c07e:	4628      	mov	r0, r5
 800c080:	f001 fdf0 	bl	800dc64 <_sbrk_r>
 800c084:	3001      	adds	r0, #1
 800c086:	d1f2      	bne.n	800c06e <sbrk_aligned+0x22>
 800c088:	e7ef      	b.n	800c06a <sbrk_aligned+0x1e>
 800c08a:	bf00      	nop
 800c08c:	20006ffc 	.word	0x20006ffc

0800c090 <_malloc_r>:
 800c090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c094:	1ccd      	adds	r5, r1, #3
 800c096:	f025 0503 	bic.w	r5, r5, #3
 800c09a:	3508      	adds	r5, #8
 800c09c:	2d0c      	cmp	r5, #12
 800c09e:	bf38      	it	cc
 800c0a0:	250c      	movcc	r5, #12
 800c0a2:	2d00      	cmp	r5, #0
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	db01      	blt.n	800c0ac <_malloc_r+0x1c>
 800c0a8:	42a9      	cmp	r1, r5
 800c0aa:	d904      	bls.n	800c0b6 <_malloc_r+0x26>
 800c0ac:	230c      	movs	r3, #12
 800c0ae:	6033      	str	r3, [r6, #0]
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c18c <_malloc_r+0xfc>
 800c0ba:	f000 f869 	bl	800c190 <__malloc_lock>
 800c0be:	f8d8 3000 	ldr.w	r3, [r8]
 800c0c2:	461c      	mov	r4, r3
 800c0c4:	bb44      	cbnz	r4, 800c118 <_malloc_r+0x88>
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	f7ff ffbf 	bl	800c04c <sbrk_aligned>
 800c0ce:	1c43      	adds	r3, r0, #1
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	d158      	bne.n	800c186 <_malloc_r+0xf6>
 800c0d4:	f8d8 4000 	ldr.w	r4, [r8]
 800c0d8:	4627      	mov	r7, r4
 800c0da:	2f00      	cmp	r7, #0
 800c0dc:	d143      	bne.n	800c166 <_malloc_r+0xd6>
 800c0de:	2c00      	cmp	r4, #0
 800c0e0:	d04b      	beq.n	800c17a <_malloc_r+0xea>
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	4639      	mov	r1, r7
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	eb04 0903 	add.w	r9, r4, r3
 800c0ec:	f001 fdba 	bl	800dc64 <_sbrk_r>
 800c0f0:	4581      	cmp	r9, r0
 800c0f2:	d142      	bne.n	800c17a <_malloc_r+0xea>
 800c0f4:	6821      	ldr	r1, [r4, #0]
 800c0f6:	1a6d      	subs	r5, r5, r1
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7ff ffa6 	bl	800c04c <sbrk_aligned>
 800c100:	3001      	adds	r0, #1
 800c102:	d03a      	beq.n	800c17a <_malloc_r+0xea>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	442b      	add	r3, r5
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	f8d8 3000 	ldr.w	r3, [r8]
 800c10e:	685a      	ldr	r2, [r3, #4]
 800c110:	bb62      	cbnz	r2, 800c16c <_malloc_r+0xdc>
 800c112:	f8c8 7000 	str.w	r7, [r8]
 800c116:	e00f      	b.n	800c138 <_malloc_r+0xa8>
 800c118:	6822      	ldr	r2, [r4, #0]
 800c11a:	1b52      	subs	r2, r2, r5
 800c11c:	d420      	bmi.n	800c160 <_malloc_r+0xd0>
 800c11e:	2a0b      	cmp	r2, #11
 800c120:	d917      	bls.n	800c152 <_malloc_r+0xc2>
 800c122:	1961      	adds	r1, r4, r5
 800c124:	42a3      	cmp	r3, r4
 800c126:	6025      	str	r5, [r4, #0]
 800c128:	bf18      	it	ne
 800c12a:	6059      	strne	r1, [r3, #4]
 800c12c:	6863      	ldr	r3, [r4, #4]
 800c12e:	bf08      	it	eq
 800c130:	f8c8 1000 	streq.w	r1, [r8]
 800c134:	5162      	str	r2, [r4, r5]
 800c136:	604b      	str	r3, [r1, #4]
 800c138:	4630      	mov	r0, r6
 800c13a:	f000 f82f 	bl	800c19c <__malloc_unlock>
 800c13e:	f104 000b 	add.w	r0, r4, #11
 800c142:	1d23      	adds	r3, r4, #4
 800c144:	f020 0007 	bic.w	r0, r0, #7
 800c148:	1ac2      	subs	r2, r0, r3
 800c14a:	bf1c      	itt	ne
 800c14c:	1a1b      	subne	r3, r3, r0
 800c14e:	50a3      	strne	r3, [r4, r2]
 800c150:	e7af      	b.n	800c0b2 <_malloc_r+0x22>
 800c152:	6862      	ldr	r2, [r4, #4]
 800c154:	42a3      	cmp	r3, r4
 800c156:	bf0c      	ite	eq
 800c158:	f8c8 2000 	streq.w	r2, [r8]
 800c15c:	605a      	strne	r2, [r3, #4]
 800c15e:	e7eb      	b.n	800c138 <_malloc_r+0xa8>
 800c160:	4623      	mov	r3, r4
 800c162:	6864      	ldr	r4, [r4, #4]
 800c164:	e7ae      	b.n	800c0c4 <_malloc_r+0x34>
 800c166:	463c      	mov	r4, r7
 800c168:	687f      	ldr	r7, [r7, #4]
 800c16a:	e7b6      	b.n	800c0da <_malloc_r+0x4a>
 800c16c:	461a      	mov	r2, r3
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	42a3      	cmp	r3, r4
 800c172:	d1fb      	bne.n	800c16c <_malloc_r+0xdc>
 800c174:	2300      	movs	r3, #0
 800c176:	6053      	str	r3, [r2, #4]
 800c178:	e7de      	b.n	800c138 <_malloc_r+0xa8>
 800c17a:	230c      	movs	r3, #12
 800c17c:	6033      	str	r3, [r6, #0]
 800c17e:	4630      	mov	r0, r6
 800c180:	f000 f80c 	bl	800c19c <__malloc_unlock>
 800c184:	e794      	b.n	800c0b0 <_malloc_r+0x20>
 800c186:	6005      	str	r5, [r0, #0]
 800c188:	e7d6      	b.n	800c138 <_malloc_r+0xa8>
 800c18a:	bf00      	nop
 800c18c:	20007000 	.word	0x20007000

0800c190 <__malloc_lock>:
 800c190:	4801      	ldr	r0, [pc, #4]	@ (800c198 <__malloc_lock+0x8>)
 800c192:	f7ff b8a6 	b.w	800b2e2 <__retarget_lock_acquire_recursive>
 800c196:	bf00      	nop
 800c198:	20006ff8 	.word	0x20006ff8

0800c19c <__malloc_unlock>:
 800c19c:	4801      	ldr	r0, [pc, #4]	@ (800c1a4 <__malloc_unlock+0x8>)
 800c19e:	f7ff b8a1 	b.w	800b2e4 <__retarget_lock_release_recursive>
 800c1a2:	bf00      	nop
 800c1a4:	20006ff8 	.word	0x20006ff8

0800c1a8 <_Balloc>:
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	69c6      	ldr	r6, [r0, #28]
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	460d      	mov	r5, r1
 800c1b0:	b976      	cbnz	r6, 800c1d0 <_Balloc+0x28>
 800c1b2:	2010      	movs	r0, #16
 800c1b4:	f7ff ff42 	bl	800c03c <malloc>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	61e0      	str	r0, [r4, #28]
 800c1bc:	b920      	cbnz	r0, 800c1c8 <_Balloc+0x20>
 800c1be:	4b18      	ldr	r3, [pc, #96]	@ (800c220 <_Balloc+0x78>)
 800c1c0:	4818      	ldr	r0, [pc, #96]	@ (800c224 <_Balloc+0x7c>)
 800c1c2:	216b      	movs	r1, #107	@ 0x6b
 800c1c4:	f001 fd74 	bl	800dcb0 <__assert_func>
 800c1c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1cc:	6006      	str	r6, [r0, #0]
 800c1ce:	60c6      	str	r6, [r0, #12]
 800c1d0:	69e6      	ldr	r6, [r4, #28]
 800c1d2:	68f3      	ldr	r3, [r6, #12]
 800c1d4:	b183      	cbz	r3, 800c1f8 <_Balloc+0x50>
 800c1d6:	69e3      	ldr	r3, [r4, #28]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1de:	b9b8      	cbnz	r0, 800c210 <_Balloc+0x68>
 800c1e0:	2101      	movs	r1, #1
 800c1e2:	fa01 f605 	lsl.w	r6, r1, r5
 800c1e6:	1d72      	adds	r2, r6, #5
 800c1e8:	0092      	lsls	r2, r2, #2
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f001 fd7e 	bl	800dcec <_calloc_r>
 800c1f0:	b160      	cbz	r0, 800c20c <_Balloc+0x64>
 800c1f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1f6:	e00e      	b.n	800c216 <_Balloc+0x6e>
 800c1f8:	2221      	movs	r2, #33	@ 0x21
 800c1fa:	2104      	movs	r1, #4
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f001 fd75 	bl	800dcec <_calloc_r>
 800c202:	69e3      	ldr	r3, [r4, #28]
 800c204:	60f0      	str	r0, [r6, #12]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1e4      	bne.n	800c1d6 <_Balloc+0x2e>
 800c20c:	2000      	movs	r0, #0
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
 800c210:	6802      	ldr	r2, [r0, #0]
 800c212:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c216:	2300      	movs	r3, #0
 800c218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c21c:	e7f7      	b.n	800c20e <_Balloc+0x66>
 800c21e:	bf00      	nop
 800c220:	08028e22 	.word	0x08028e22
 800c224:	08028ea2 	.word	0x08028ea2

0800c228 <_Bfree>:
 800c228:	b570      	push	{r4, r5, r6, lr}
 800c22a:	69c6      	ldr	r6, [r0, #28]
 800c22c:	4605      	mov	r5, r0
 800c22e:	460c      	mov	r4, r1
 800c230:	b976      	cbnz	r6, 800c250 <_Bfree+0x28>
 800c232:	2010      	movs	r0, #16
 800c234:	f7ff ff02 	bl	800c03c <malloc>
 800c238:	4602      	mov	r2, r0
 800c23a:	61e8      	str	r0, [r5, #28]
 800c23c:	b920      	cbnz	r0, 800c248 <_Bfree+0x20>
 800c23e:	4b09      	ldr	r3, [pc, #36]	@ (800c264 <_Bfree+0x3c>)
 800c240:	4809      	ldr	r0, [pc, #36]	@ (800c268 <_Bfree+0x40>)
 800c242:	218f      	movs	r1, #143	@ 0x8f
 800c244:	f001 fd34 	bl	800dcb0 <__assert_func>
 800c248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c24c:	6006      	str	r6, [r0, #0]
 800c24e:	60c6      	str	r6, [r0, #12]
 800c250:	b13c      	cbz	r4, 800c262 <_Bfree+0x3a>
 800c252:	69eb      	ldr	r3, [r5, #28]
 800c254:	6862      	ldr	r2, [r4, #4]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c25c:	6021      	str	r1, [r4, #0]
 800c25e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	08028e22 	.word	0x08028e22
 800c268:	08028ea2 	.word	0x08028ea2

0800c26c <__multadd>:
 800c26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c270:	690d      	ldr	r5, [r1, #16]
 800c272:	4607      	mov	r7, r0
 800c274:	460c      	mov	r4, r1
 800c276:	461e      	mov	r6, r3
 800c278:	f101 0c14 	add.w	ip, r1, #20
 800c27c:	2000      	movs	r0, #0
 800c27e:	f8dc 3000 	ldr.w	r3, [ip]
 800c282:	b299      	uxth	r1, r3
 800c284:	fb02 6101 	mla	r1, r2, r1, r6
 800c288:	0c1e      	lsrs	r6, r3, #16
 800c28a:	0c0b      	lsrs	r3, r1, #16
 800c28c:	fb02 3306 	mla	r3, r2, r6, r3
 800c290:	b289      	uxth	r1, r1
 800c292:	3001      	adds	r0, #1
 800c294:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c298:	4285      	cmp	r5, r0
 800c29a:	f84c 1b04 	str.w	r1, [ip], #4
 800c29e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2a2:	dcec      	bgt.n	800c27e <__multadd+0x12>
 800c2a4:	b30e      	cbz	r6, 800c2ea <__multadd+0x7e>
 800c2a6:	68a3      	ldr	r3, [r4, #8]
 800c2a8:	42ab      	cmp	r3, r5
 800c2aa:	dc19      	bgt.n	800c2e0 <__multadd+0x74>
 800c2ac:	6861      	ldr	r1, [r4, #4]
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	3101      	adds	r1, #1
 800c2b2:	f7ff ff79 	bl	800c1a8 <_Balloc>
 800c2b6:	4680      	mov	r8, r0
 800c2b8:	b928      	cbnz	r0, 800c2c6 <__multadd+0x5a>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c2f0 <__multadd+0x84>)
 800c2be:	480d      	ldr	r0, [pc, #52]	@ (800c2f4 <__multadd+0x88>)
 800c2c0:	21ba      	movs	r1, #186	@ 0xba
 800c2c2:	f001 fcf5 	bl	800dcb0 <__assert_func>
 800c2c6:	6922      	ldr	r2, [r4, #16]
 800c2c8:	3202      	adds	r2, #2
 800c2ca:	f104 010c 	add.w	r1, r4, #12
 800c2ce:	0092      	lsls	r2, r2, #2
 800c2d0:	300c      	adds	r0, #12
 800c2d2:	f001 fcd7 	bl	800dc84 <memcpy>
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	4638      	mov	r0, r7
 800c2da:	f7ff ffa5 	bl	800c228 <_Bfree>
 800c2de:	4644      	mov	r4, r8
 800c2e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	615e      	str	r6, [r3, #20]
 800c2e8:	6125      	str	r5, [r4, #16]
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f0:	08028e91 	.word	0x08028e91
 800c2f4:	08028ea2 	.word	0x08028ea2

0800c2f8 <__s2b>:
 800c2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2fc:	460c      	mov	r4, r1
 800c2fe:	4615      	mov	r5, r2
 800c300:	461f      	mov	r7, r3
 800c302:	2209      	movs	r2, #9
 800c304:	3308      	adds	r3, #8
 800c306:	4606      	mov	r6, r0
 800c308:	fb93 f3f2 	sdiv	r3, r3, r2
 800c30c:	2100      	movs	r1, #0
 800c30e:	2201      	movs	r2, #1
 800c310:	429a      	cmp	r2, r3
 800c312:	db09      	blt.n	800c328 <__s2b+0x30>
 800c314:	4630      	mov	r0, r6
 800c316:	f7ff ff47 	bl	800c1a8 <_Balloc>
 800c31a:	b940      	cbnz	r0, 800c32e <__s2b+0x36>
 800c31c:	4602      	mov	r2, r0
 800c31e:	4b19      	ldr	r3, [pc, #100]	@ (800c384 <__s2b+0x8c>)
 800c320:	4819      	ldr	r0, [pc, #100]	@ (800c388 <__s2b+0x90>)
 800c322:	21d3      	movs	r1, #211	@ 0xd3
 800c324:	f001 fcc4 	bl	800dcb0 <__assert_func>
 800c328:	0052      	lsls	r2, r2, #1
 800c32a:	3101      	adds	r1, #1
 800c32c:	e7f0      	b.n	800c310 <__s2b+0x18>
 800c32e:	9b08      	ldr	r3, [sp, #32]
 800c330:	6143      	str	r3, [r0, #20]
 800c332:	2d09      	cmp	r5, #9
 800c334:	f04f 0301 	mov.w	r3, #1
 800c338:	6103      	str	r3, [r0, #16]
 800c33a:	dd16      	ble.n	800c36a <__s2b+0x72>
 800c33c:	f104 0909 	add.w	r9, r4, #9
 800c340:	46c8      	mov	r8, r9
 800c342:	442c      	add	r4, r5
 800c344:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c348:	4601      	mov	r1, r0
 800c34a:	3b30      	subs	r3, #48	@ 0x30
 800c34c:	220a      	movs	r2, #10
 800c34e:	4630      	mov	r0, r6
 800c350:	f7ff ff8c 	bl	800c26c <__multadd>
 800c354:	45a0      	cmp	r8, r4
 800c356:	d1f5      	bne.n	800c344 <__s2b+0x4c>
 800c358:	f1a5 0408 	sub.w	r4, r5, #8
 800c35c:	444c      	add	r4, r9
 800c35e:	1b2d      	subs	r5, r5, r4
 800c360:	1963      	adds	r3, r4, r5
 800c362:	42bb      	cmp	r3, r7
 800c364:	db04      	blt.n	800c370 <__s2b+0x78>
 800c366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c36a:	340a      	adds	r4, #10
 800c36c:	2509      	movs	r5, #9
 800c36e:	e7f6      	b.n	800c35e <__s2b+0x66>
 800c370:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c374:	4601      	mov	r1, r0
 800c376:	3b30      	subs	r3, #48	@ 0x30
 800c378:	220a      	movs	r2, #10
 800c37a:	4630      	mov	r0, r6
 800c37c:	f7ff ff76 	bl	800c26c <__multadd>
 800c380:	e7ee      	b.n	800c360 <__s2b+0x68>
 800c382:	bf00      	nop
 800c384:	08028e91 	.word	0x08028e91
 800c388:	08028ea2 	.word	0x08028ea2

0800c38c <__hi0bits>:
 800c38c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c390:	4603      	mov	r3, r0
 800c392:	bf36      	itet	cc
 800c394:	0403      	lslcc	r3, r0, #16
 800c396:	2000      	movcs	r0, #0
 800c398:	2010      	movcc	r0, #16
 800c39a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c39e:	bf3c      	itt	cc
 800c3a0:	021b      	lslcc	r3, r3, #8
 800c3a2:	3008      	addcc	r0, #8
 800c3a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3a8:	bf3c      	itt	cc
 800c3aa:	011b      	lslcc	r3, r3, #4
 800c3ac:	3004      	addcc	r0, #4
 800c3ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3b2:	bf3c      	itt	cc
 800c3b4:	009b      	lslcc	r3, r3, #2
 800c3b6:	3002      	addcc	r0, #2
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	db05      	blt.n	800c3c8 <__hi0bits+0x3c>
 800c3bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c3c0:	f100 0001 	add.w	r0, r0, #1
 800c3c4:	bf08      	it	eq
 800c3c6:	2020      	moveq	r0, #32
 800c3c8:	4770      	bx	lr

0800c3ca <__lo0bits>:
 800c3ca:	6803      	ldr	r3, [r0, #0]
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	f013 0007 	ands.w	r0, r3, #7
 800c3d2:	d00b      	beq.n	800c3ec <__lo0bits+0x22>
 800c3d4:	07d9      	lsls	r1, r3, #31
 800c3d6:	d421      	bmi.n	800c41c <__lo0bits+0x52>
 800c3d8:	0798      	lsls	r0, r3, #30
 800c3da:	bf49      	itett	mi
 800c3dc:	085b      	lsrmi	r3, r3, #1
 800c3de:	089b      	lsrpl	r3, r3, #2
 800c3e0:	2001      	movmi	r0, #1
 800c3e2:	6013      	strmi	r3, [r2, #0]
 800c3e4:	bf5c      	itt	pl
 800c3e6:	6013      	strpl	r3, [r2, #0]
 800c3e8:	2002      	movpl	r0, #2
 800c3ea:	4770      	bx	lr
 800c3ec:	b299      	uxth	r1, r3
 800c3ee:	b909      	cbnz	r1, 800c3f4 <__lo0bits+0x2a>
 800c3f0:	0c1b      	lsrs	r3, r3, #16
 800c3f2:	2010      	movs	r0, #16
 800c3f4:	b2d9      	uxtb	r1, r3
 800c3f6:	b909      	cbnz	r1, 800c3fc <__lo0bits+0x32>
 800c3f8:	3008      	adds	r0, #8
 800c3fa:	0a1b      	lsrs	r3, r3, #8
 800c3fc:	0719      	lsls	r1, r3, #28
 800c3fe:	bf04      	itt	eq
 800c400:	091b      	lsreq	r3, r3, #4
 800c402:	3004      	addeq	r0, #4
 800c404:	0799      	lsls	r1, r3, #30
 800c406:	bf04      	itt	eq
 800c408:	089b      	lsreq	r3, r3, #2
 800c40a:	3002      	addeq	r0, #2
 800c40c:	07d9      	lsls	r1, r3, #31
 800c40e:	d403      	bmi.n	800c418 <__lo0bits+0x4e>
 800c410:	085b      	lsrs	r3, r3, #1
 800c412:	f100 0001 	add.w	r0, r0, #1
 800c416:	d003      	beq.n	800c420 <__lo0bits+0x56>
 800c418:	6013      	str	r3, [r2, #0]
 800c41a:	4770      	bx	lr
 800c41c:	2000      	movs	r0, #0
 800c41e:	4770      	bx	lr
 800c420:	2020      	movs	r0, #32
 800c422:	4770      	bx	lr

0800c424 <__i2b>:
 800c424:	b510      	push	{r4, lr}
 800c426:	460c      	mov	r4, r1
 800c428:	2101      	movs	r1, #1
 800c42a:	f7ff febd 	bl	800c1a8 <_Balloc>
 800c42e:	4602      	mov	r2, r0
 800c430:	b928      	cbnz	r0, 800c43e <__i2b+0x1a>
 800c432:	4b05      	ldr	r3, [pc, #20]	@ (800c448 <__i2b+0x24>)
 800c434:	4805      	ldr	r0, [pc, #20]	@ (800c44c <__i2b+0x28>)
 800c436:	f240 1145 	movw	r1, #325	@ 0x145
 800c43a:	f001 fc39 	bl	800dcb0 <__assert_func>
 800c43e:	2301      	movs	r3, #1
 800c440:	6144      	str	r4, [r0, #20]
 800c442:	6103      	str	r3, [r0, #16]
 800c444:	bd10      	pop	{r4, pc}
 800c446:	bf00      	nop
 800c448:	08028e91 	.word	0x08028e91
 800c44c:	08028ea2 	.word	0x08028ea2

0800c450 <__multiply>:
 800c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c454:	4617      	mov	r7, r2
 800c456:	690a      	ldr	r2, [r1, #16]
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	bfa8      	it	ge
 800c45e:	463b      	movge	r3, r7
 800c460:	4689      	mov	r9, r1
 800c462:	bfa4      	itt	ge
 800c464:	460f      	movge	r7, r1
 800c466:	4699      	movge	r9, r3
 800c468:	693d      	ldr	r5, [r7, #16]
 800c46a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	eb05 060a 	add.w	r6, r5, sl
 800c476:	42b3      	cmp	r3, r6
 800c478:	b085      	sub	sp, #20
 800c47a:	bfb8      	it	lt
 800c47c:	3101      	addlt	r1, #1
 800c47e:	f7ff fe93 	bl	800c1a8 <_Balloc>
 800c482:	b930      	cbnz	r0, 800c492 <__multiply+0x42>
 800c484:	4602      	mov	r2, r0
 800c486:	4b41      	ldr	r3, [pc, #260]	@ (800c58c <__multiply+0x13c>)
 800c488:	4841      	ldr	r0, [pc, #260]	@ (800c590 <__multiply+0x140>)
 800c48a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c48e:	f001 fc0f 	bl	800dcb0 <__assert_func>
 800c492:	f100 0414 	add.w	r4, r0, #20
 800c496:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c49a:	4623      	mov	r3, r4
 800c49c:	2200      	movs	r2, #0
 800c49e:	4573      	cmp	r3, lr
 800c4a0:	d320      	bcc.n	800c4e4 <__multiply+0x94>
 800c4a2:	f107 0814 	add.w	r8, r7, #20
 800c4a6:	f109 0114 	add.w	r1, r9, #20
 800c4aa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c4ae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c4b2:	9302      	str	r3, [sp, #8]
 800c4b4:	1beb      	subs	r3, r5, r7
 800c4b6:	3b15      	subs	r3, #21
 800c4b8:	f023 0303 	bic.w	r3, r3, #3
 800c4bc:	3304      	adds	r3, #4
 800c4be:	3715      	adds	r7, #21
 800c4c0:	42bd      	cmp	r5, r7
 800c4c2:	bf38      	it	cc
 800c4c4:	2304      	movcc	r3, #4
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	9b02      	ldr	r3, [sp, #8]
 800c4ca:	9103      	str	r1, [sp, #12]
 800c4cc:	428b      	cmp	r3, r1
 800c4ce:	d80c      	bhi.n	800c4ea <__multiply+0x9a>
 800c4d0:	2e00      	cmp	r6, #0
 800c4d2:	dd03      	ble.n	800c4dc <__multiply+0x8c>
 800c4d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d055      	beq.n	800c588 <__multiply+0x138>
 800c4dc:	6106      	str	r6, [r0, #16]
 800c4de:	b005      	add	sp, #20
 800c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e4:	f843 2b04 	str.w	r2, [r3], #4
 800c4e8:	e7d9      	b.n	800c49e <__multiply+0x4e>
 800c4ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800c4ee:	f1ba 0f00 	cmp.w	sl, #0
 800c4f2:	d01f      	beq.n	800c534 <__multiply+0xe4>
 800c4f4:	46c4      	mov	ip, r8
 800c4f6:	46a1      	mov	r9, r4
 800c4f8:	2700      	movs	r7, #0
 800c4fa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c4fe:	f8d9 3000 	ldr.w	r3, [r9]
 800c502:	fa1f fb82 	uxth.w	fp, r2
 800c506:	b29b      	uxth	r3, r3
 800c508:	fb0a 330b 	mla	r3, sl, fp, r3
 800c50c:	443b      	add	r3, r7
 800c50e:	f8d9 7000 	ldr.w	r7, [r9]
 800c512:	0c12      	lsrs	r2, r2, #16
 800c514:	0c3f      	lsrs	r7, r7, #16
 800c516:	fb0a 7202 	mla	r2, sl, r2, r7
 800c51a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c51e:	b29b      	uxth	r3, r3
 800c520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c524:	4565      	cmp	r5, ip
 800c526:	f849 3b04 	str.w	r3, [r9], #4
 800c52a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c52e:	d8e4      	bhi.n	800c4fa <__multiply+0xaa>
 800c530:	9b01      	ldr	r3, [sp, #4]
 800c532:	50e7      	str	r7, [r4, r3]
 800c534:	9b03      	ldr	r3, [sp, #12]
 800c536:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c53a:	3104      	adds	r1, #4
 800c53c:	f1b9 0f00 	cmp.w	r9, #0
 800c540:	d020      	beq.n	800c584 <__multiply+0x134>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	4647      	mov	r7, r8
 800c546:	46a4      	mov	ip, r4
 800c548:	f04f 0a00 	mov.w	sl, #0
 800c54c:	f8b7 b000 	ldrh.w	fp, [r7]
 800c550:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c554:	fb09 220b 	mla	r2, r9, fp, r2
 800c558:	4452      	add	r2, sl
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c560:	f84c 3b04 	str.w	r3, [ip], #4
 800c564:	f857 3b04 	ldr.w	r3, [r7], #4
 800c568:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c56c:	f8bc 3000 	ldrh.w	r3, [ip]
 800c570:	fb09 330a 	mla	r3, r9, sl, r3
 800c574:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c578:	42bd      	cmp	r5, r7
 800c57a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c57e:	d8e5      	bhi.n	800c54c <__multiply+0xfc>
 800c580:	9a01      	ldr	r2, [sp, #4]
 800c582:	50a3      	str	r3, [r4, r2]
 800c584:	3404      	adds	r4, #4
 800c586:	e79f      	b.n	800c4c8 <__multiply+0x78>
 800c588:	3e01      	subs	r6, #1
 800c58a:	e7a1      	b.n	800c4d0 <__multiply+0x80>
 800c58c:	08028e91 	.word	0x08028e91
 800c590:	08028ea2 	.word	0x08028ea2

0800c594 <__pow5mult>:
 800c594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c598:	4615      	mov	r5, r2
 800c59a:	f012 0203 	ands.w	r2, r2, #3
 800c59e:	4607      	mov	r7, r0
 800c5a0:	460e      	mov	r6, r1
 800c5a2:	d007      	beq.n	800c5b4 <__pow5mult+0x20>
 800c5a4:	4c25      	ldr	r4, [pc, #148]	@ (800c63c <__pow5mult+0xa8>)
 800c5a6:	3a01      	subs	r2, #1
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5ae:	f7ff fe5d 	bl	800c26c <__multadd>
 800c5b2:	4606      	mov	r6, r0
 800c5b4:	10ad      	asrs	r5, r5, #2
 800c5b6:	d03d      	beq.n	800c634 <__pow5mult+0xa0>
 800c5b8:	69fc      	ldr	r4, [r7, #28]
 800c5ba:	b97c      	cbnz	r4, 800c5dc <__pow5mult+0x48>
 800c5bc:	2010      	movs	r0, #16
 800c5be:	f7ff fd3d 	bl	800c03c <malloc>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	61f8      	str	r0, [r7, #28]
 800c5c6:	b928      	cbnz	r0, 800c5d4 <__pow5mult+0x40>
 800c5c8:	4b1d      	ldr	r3, [pc, #116]	@ (800c640 <__pow5mult+0xac>)
 800c5ca:	481e      	ldr	r0, [pc, #120]	@ (800c644 <__pow5mult+0xb0>)
 800c5cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c5d0:	f001 fb6e 	bl	800dcb0 <__assert_func>
 800c5d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5d8:	6004      	str	r4, [r0, #0]
 800c5da:	60c4      	str	r4, [r0, #12]
 800c5dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c5e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5e4:	b94c      	cbnz	r4, 800c5fa <__pow5mult+0x66>
 800c5e6:	f240 2171 	movw	r1, #625	@ 0x271
 800c5ea:	4638      	mov	r0, r7
 800c5ec:	f7ff ff1a 	bl	800c424 <__i2b>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	6003      	str	r3, [r0, #0]
 800c5fa:	f04f 0900 	mov.w	r9, #0
 800c5fe:	07eb      	lsls	r3, r5, #31
 800c600:	d50a      	bpl.n	800c618 <__pow5mult+0x84>
 800c602:	4631      	mov	r1, r6
 800c604:	4622      	mov	r2, r4
 800c606:	4638      	mov	r0, r7
 800c608:	f7ff ff22 	bl	800c450 <__multiply>
 800c60c:	4631      	mov	r1, r6
 800c60e:	4680      	mov	r8, r0
 800c610:	4638      	mov	r0, r7
 800c612:	f7ff fe09 	bl	800c228 <_Bfree>
 800c616:	4646      	mov	r6, r8
 800c618:	106d      	asrs	r5, r5, #1
 800c61a:	d00b      	beq.n	800c634 <__pow5mult+0xa0>
 800c61c:	6820      	ldr	r0, [r4, #0]
 800c61e:	b938      	cbnz	r0, 800c630 <__pow5mult+0x9c>
 800c620:	4622      	mov	r2, r4
 800c622:	4621      	mov	r1, r4
 800c624:	4638      	mov	r0, r7
 800c626:	f7ff ff13 	bl	800c450 <__multiply>
 800c62a:	6020      	str	r0, [r4, #0]
 800c62c:	f8c0 9000 	str.w	r9, [r0]
 800c630:	4604      	mov	r4, r0
 800c632:	e7e4      	b.n	800c5fe <__pow5mult+0x6a>
 800c634:	4630      	mov	r0, r6
 800c636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c63a:	bf00      	nop
 800c63c:	08028fb4 	.word	0x08028fb4
 800c640:	08028e22 	.word	0x08028e22
 800c644:	08028ea2 	.word	0x08028ea2

0800c648 <__lshift>:
 800c648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c64c:	460c      	mov	r4, r1
 800c64e:	6849      	ldr	r1, [r1, #4]
 800c650:	6923      	ldr	r3, [r4, #16]
 800c652:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c656:	68a3      	ldr	r3, [r4, #8]
 800c658:	4607      	mov	r7, r0
 800c65a:	4691      	mov	r9, r2
 800c65c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c660:	f108 0601 	add.w	r6, r8, #1
 800c664:	42b3      	cmp	r3, r6
 800c666:	db0b      	blt.n	800c680 <__lshift+0x38>
 800c668:	4638      	mov	r0, r7
 800c66a:	f7ff fd9d 	bl	800c1a8 <_Balloc>
 800c66e:	4605      	mov	r5, r0
 800c670:	b948      	cbnz	r0, 800c686 <__lshift+0x3e>
 800c672:	4602      	mov	r2, r0
 800c674:	4b28      	ldr	r3, [pc, #160]	@ (800c718 <__lshift+0xd0>)
 800c676:	4829      	ldr	r0, [pc, #164]	@ (800c71c <__lshift+0xd4>)
 800c678:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c67c:	f001 fb18 	bl	800dcb0 <__assert_func>
 800c680:	3101      	adds	r1, #1
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	e7ee      	b.n	800c664 <__lshift+0x1c>
 800c686:	2300      	movs	r3, #0
 800c688:	f100 0114 	add.w	r1, r0, #20
 800c68c:	f100 0210 	add.w	r2, r0, #16
 800c690:	4618      	mov	r0, r3
 800c692:	4553      	cmp	r3, sl
 800c694:	db33      	blt.n	800c6fe <__lshift+0xb6>
 800c696:	6920      	ldr	r0, [r4, #16]
 800c698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c69c:	f104 0314 	add.w	r3, r4, #20
 800c6a0:	f019 091f 	ands.w	r9, r9, #31
 800c6a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6ac:	d02b      	beq.n	800c706 <__lshift+0xbe>
 800c6ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c6b2:	468a      	mov	sl, r1
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	fa00 f009 	lsl.w	r0, r0, r9
 800c6bc:	4310      	orrs	r0, r2
 800c6be:	f84a 0b04 	str.w	r0, [sl], #4
 800c6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c6:	459c      	cmp	ip, r3
 800c6c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c6cc:	d8f3      	bhi.n	800c6b6 <__lshift+0x6e>
 800c6ce:	ebac 0304 	sub.w	r3, ip, r4
 800c6d2:	3b15      	subs	r3, #21
 800c6d4:	f023 0303 	bic.w	r3, r3, #3
 800c6d8:	3304      	adds	r3, #4
 800c6da:	f104 0015 	add.w	r0, r4, #21
 800c6de:	4560      	cmp	r0, ip
 800c6e0:	bf88      	it	hi
 800c6e2:	2304      	movhi	r3, #4
 800c6e4:	50ca      	str	r2, [r1, r3]
 800c6e6:	b10a      	cbz	r2, 800c6ec <__lshift+0xa4>
 800c6e8:	f108 0602 	add.w	r6, r8, #2
 800c6ec:	3e01      	subs	r6, #1
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	612e      	str	r6, [r5, #16]
 800c6f2:	4621      	mov	r1, r4
 800c6f4:	f7ff fd98 	bl	800c228 <_Bfree>
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c702:	3301      	adds	r3, #1
 800c704:	e7c5      	b.n	800c692 <__lshift+0x4a>
 800c706:	3904      	subs	r1, #4
 800c708:	f853 2b04 	ldr.w	r2, [r3], #4
 800c70c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c710:	459c      	cmp	ip, r3
 800c712:	d8f9      	bhi.n	800c708 <__lshift+0xc0>
 800c714:	e7ea      	b.n	800c6ec <__lshift+0xa4>
 800c716:	bf00      	nop
 800c718:	08028e91 	.word	0x08028e91
 800c71c:	08028ea2 	.word	0x08028ea2

0800c720 <__mcmp>:
 800c720:	690a      	ldr	r2, [r1, #16]
 800c722:	4603      	mov	r3, r0
 800c724:	6900      	ldr	r0, [r0, #16]
 800c726:	1a80      	subs	r0, r0, r2
 800c728:	b530      	push	{r4, r5, lr}
 800c72a:	d10e      	bne.n	800c74a <__mcmp+0x2a>
 800c72c:	3314      	adds	r3, #20
 800c72e:	3114      	adds	r1, #20
 800c730:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c734:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c738:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c73c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c740:	4295      	cmp	r5, r2
 800c742:	d003      	beq.n	800c74c <__mcmp+0x2c>
 800c744:	d205      	bcs.n	800c752 <__mcmp+0x32>
 800c746:	f04f 30ff 	mov.w	r0, #4294967295
 800c74a:	bd30      	pop	{r4, r5, pc}
 800c74c:	42a3      	cmp	r3, r4
 800c74e:	d3f3      	bcc.n	800c738 <__mcmp+0x18>
 800c750:	e7fb      	b.n	800c74a <__mcmp+0x2a>
 800c752:	2001      	movs	r0, #1
 800c754:	e7f9      	b.n	800c74a <__mcmp+0x2a>
	...

0800c758 <__mdiff>:
 800c758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	4689      	mov	r9, r1
 800c75e:	4606      	mov	r6, r0
 800c760:	4611      	mov	r1, r2
 800c762:	4648      	mov	r0, r9
 800c764:	4614      	mov	r4, r2
 800c766:	f7ff ffdb 	bl	800c720 <__mcmp>
 800c76a:	1e05      	subs	r5, r0, #0
 800c76c:	d112      	bne.n	800c794 <__mdiff+0x3c>
 800c76e:	4629      	mov	r1, r5
 800c770:	4630      	mov	r0, r6
 800c772:	f7ff fd19 	bl	800c1a8 <_Balloc>
 800c776:	4602      	mov	r2, r0
 800c778:	b928      	cbnz	r0, 800c786 <__mdiff+0x2e>
 800c77a:	4b3f      	ldr	r3, [pc, #252]	@ (800c878 <__mdiff+0x120>)
 800c77c:	f240 2137 	movw	r1, #567	@ 0x237
 800c780:	483e      	ldr	r0, [pc, #248]	@ (800c87c <__mdiff+0x124>)
 800c782:	f001 fa95 	bl	800dcb0 <__assert_func>
 800c786:	2301      	movs	r3, #1
 800c788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c78c:	4610      	mov	r0, r2
 800c78e:	b003      	add	sp, #12
 800c790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c794:	bfbc      	itt	lt
 800c796:	464b      	movlt	r3, r9
 800c798:	46a1      	movlt	r9, r4
 800c79a:	4630      	mov	r0, r6
 800c79c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c7a0:	bfba      	itte	lt
 800c7a2:	461c      	movlt	r4, r3
 800c7a4:	2501      	movlt	r5, #1
 800c7a6:	2500      	movge	r5, #0
 800c7a8:	f7ff fcfe 	bl	800c1a8 <_Balloc>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	b918      	cbnz	r0, 800c7b8 <__mdiff+0x60>
 800c7b0:	4b31      	ldr	r3, [pc, #196]	@ (800c878 <__mdiff+0x120>)
 800c7b2:	f240 2145 	movw	r1, #581	@ 0x245
 800c7b6:	e7e3      	b.n	800c780 <__mdiff+0x28>
 800c7b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c7bc:	6926      	ldr	r6, [r4, #16]
 800c7be:	60c5      	str	r5, [r0, #12]
 800c7c0:	f109 0310 	add.w	r3, r9, #16
 800c7c4:	f109 0514 	add.w	r5, r9, #20
 800c7c8:	f104 0e14 	add.w	lr, r4, #20
 800c7cc:	f100 0b14 	add.w	fp, r0, #20
 800c7d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c7d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c7d8:	9301      	str	r3, [sp, #4]
 800c7da:	46d9      	mov	r9, fp
 800c7dc:	f04f 0c00 	mov.w	ip, #0
 800c7e0:	9b01      	ldr	r3, [sp, #4]
 800c7e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c7e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	fa1f f38a 	uxth.w	r3, sl
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	b283      	uxth	r3, r0
 800c7f4:	1acb      	subs	r3, r1, r3
 800c7f6:	0c00      	lsrs	r0, r0, #16
 800c7f8:	4463      	add	r3, ip
 800c7fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c7fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c802:	b29b      	uxth	r3, r3
 800c804:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c808:	4576      	cmp	r6, lr
 800c80a:	f849 3b04 	str.w	r3, [r9], #4
 800c80e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c812:	d8e5      	bhi.n	800c7e0 <__mdiff+0x88>
 800c814:	1b33      	subs	r3, r6, r4
 800c816:	3b15      	subs	r3, #21
 800c818:	f023 0303 	bic.w	r3, r3, #3
 800c81c:	3415      	adds	r4, #21
 800c81e:	3304      	adds	r3, #4
 800c820:	42a6      	cmp	r6, r4
 800c822:	bf38      	it	cc
 800c824:	2304      	movcc	r3, #4
 800c826:	441d      	add	r5, r3
 800c828:	445b      	add	r3, fp
 800c82a:	461e      	mov	r6, r3
 800c82c:	462c      	mov	r4, r5
 800c82e:	4544      	cmp	r4, r8
 800c830:	d30e      	bcc.n	800c850 <__mdiff+0xf8>
 800c832:	f108 0103 	add.w	r1, r8, #3
 800c836:	1b49      	subs	r1, r1, r5
 800c838:	f021 0103 	bic.w	r1, r1, #3
 800c83c:	3d03      	subs	r5, #3
 800c83e:	45a8      	cmp	r8, r5
 800c840:	bf38      	it	cc
 800c842:	2100      	movcc	r1, #0
 800c844:	440b      	add	r3, r1
 800c846:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c84a:	b191      	cbz	r1, 800c872 <__mdiff+0x11a>
 800c84c:	6117      	str	r7, [r2, #16]
 800c84e:	e79d      	b.n	800c78c <__mdiff+0x34>
 800c850:	f854 1b04 	ldr.w	r1, [r4], #4
 800c854:	46e6      	mov	lr, ip
 800c856:	0c08      	lsrs	r0, r1, #16
 800c858:	fa1c fc81 	uxtah	ip, ip, r1
 800c85c:	4471      	add	r1, lr
 800c85e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c862:	b289      	uxth	r1, r1
 800c864:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c868:	f846 1b04 	str.w	r1, [r6], #4
 800c86c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c870:	e7dd      	b.n	800c82e <__mdiff+0xd6>
 800c872:	3f01      	subs	r7, #1
 800c874:	e7e7      	b.n	800c846 <__mdiff+0xee>
 800c876:	bf00      	nop
 800c878:	08028e91 	.word	0x08028e91
 800c87c:	08028ea2 	.word	0x08028ea2

0800c880 <__ulp>:
 800c880:	b082      	sub	sp, #8
 800c882:	ed8d 0b00 	vstr	d0, [sp]
 800c886:	9a01      	ldr	r2, [sp, #4]
 800c888:	4b0f      	ldr	r3, [pc, #60]	@ (800c8c8 <__ulp+0x48>)
 800c88a:	4013      	ands	r3, r2
 800c88c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c890:	2b00      	cmp	r3, #0
 800c892:	dc08      	bgt.n	800c8a6 <__ulp+0x26>
 800c894:	425b      	negs	r3, r3
 800c896:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c89a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c89e:	da04      	bge.n	800c8aa <__ulp+0x2a>
 800c8a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c8a4:	4113      	asrs	r3, r2
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	e008      	b.n	800c8bc <__ulp+0x3c>
 800c8aa:	f1a2 0314 	sub.w	r3, r2, #20
 800c8ae:	2b1e      	cmp	r3, #30
 800c8b0:	bfda      	itte	le
 800c8b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c8b6:	40da      	lsrle	r2, r3
 800c8b8:	2201      	movgt	r2, #1
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4610      	mov	r0, r2
 800c8c0:	ec41 0b10 	vmov	d0, r0, r1
 800c8c4:	b002      	add	sp, #8
 800c8c6:	4770      	bx	lr
 800c8c8:	7ff00000 	.word	0x7ff00000

0800c8cc <__b2d>:
 800c8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d0:	6906      	ldr	r6, [r0, #16]
 800c8d2:	f100 0814 	add.w	r8, r0, #20
 800c8d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c8da:	1f37      	subs	r7, r6, #4
 800c8dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	f7ff fd53 	bl	800c38c <__hi0bits>
 800c8e6:	f1c0 0320 	rsb	r3, r0, #32
 800c8ea:	280a      	cmp	r0, #10
 800c8ec:	600b      	str	r3, [r1, #0]
 800c8ee:	491b      	ldr	r1, [pc, #108]	@ (800c95c <__b2d+0x90>)
 800c8f0:	dc15      	bgt.n	800c91e <__b2d+0x52>
 800c8f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c8f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c8fa:	45b8      	cmp	r8, r7
 800c8fc:	ea43 0501 	orr.w	r5, r3, r1
 800c900:	bf34      	ite	cc
 800c902:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c906:	2300      	movcs	r3, #0
 800c908:	3015      	adds	r0, #21
 800c90a:	fa02 f000 	lsl.w	r0, r2, r0
 800c90e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c912:	4303      	orrs	r3, r0
 800c914:	461c      	mov	r4, r3
 800c916:	ec45 4b10 	vmov	d0, r4, r5
 800c91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91e:	45b8      	cmp	r8, r7
 800c920:	bf3a      	itte	cc
 800c922:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c926:	f1a6 0708 	subcc.w	r7, r6, #8
 800c92a:	2300      	movcs	r3, #0
 800c92c:	380b      	subs	r0, #11
 800c92e:	d012      	beq.n	800c956 <__b2d+0x8a>
 800c930:	f1c0 0120 	rsb	r1, r0, #32
 800c934:	fa23 f401 	lsr.w	r4, r3, r1
 800c938:	4082      	lsls	r2, r0
 800c93a:	4322      	orrs	r2, r4
 800c93c:	4547      	cmp	r7, r8
 800c93e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c942:	bf8c      	ite	hi
 800c944:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c948:	2200      	movls	r2, #0
 800c94a:	4083      	lsls	r3, r0
 800c94c:	40ca      	lsrs	r2, r1
 800c94e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c952:	4313      	orrs	r3, r2
 800c954:	e7de      	b.n	800c914 <__b2d+0x48>
 800c956:	ea42 0501 	orr.w	r5, r2, r1
 800c95a:	e7db      	b.n	800c914 <__b2d+0x48>
 800c95c:	3ff00000 	.word	0x3ff00000

0800c960 <__d2b>:
 800c960:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c964:	460f      	mov	r7, r1
 800c966:	2101      	movs	r1, #1
 800c968:	ec59 8b10 	vmov	r8, r9, d0
 800c96c:	4616      	mov	r6, r2
 800c96e:	f7ff fc1b 	bl	800c1a8 <_Balloc>
 800c972:	4604      	mov	r4, r0
 800c974:	b930      	cbnz	r0, 800c984 <__d2b+0x24>
 800c976:	4602      	mov	r2, r0
 800c978:	4b23      	ldr	r3, [pc, #140]	@ (800ca08 <__d2b+0xa8>)
 800c97a:	4824      	ldr	r0, [pc, #144]	@ (800ca0c <__d2b+0xac>)
 800c97c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c980:	f001 f996 	bl	800dcb0 <__assert_func>
 800c984:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c98c:	b10d      	cbz	r5, 800c992 <__d2b+0x32>
 800c98e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	f1b8 0300 	subs.w	r3, r8, #0
 800c998:	d023      	beq.n	800c9e2 <__d2b+0x82>
 800c99a:	4668      	mov	r0, sp
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	f7ff fd14 	bl	800c3ca <__lo0bits>
 800c9a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9a6:	b1d0      	cbz	r0, 800c9de <__d2b+0x7e>
 800c9a8:	f1c0 0320 	rsb	r3, r0, #32
 800c9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c9b0:	430b      	orrs	r3, r1
 800c9b2:	40c2      	lsrs	r2, r0
 800c9b4:	6163      	str	r3, [r4, #20]
 800c9b6:	9201      	str	r2, [sp, #4]
 800c9b8:	9b01      	ldr	r3, [sp, #4]
 800c9ba:	61a3      	str	r3, [r4, #24]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	bf0c      	ite	eq
 800c9c0:	2201      	moveq	r2, #1
 800c9c2:	2202      	movne	r2, #2
 800c9c4:	6122      	str	r2, [r4, #16]
 800c9c6:	b1a5      	cbz	r5, 800c9f2 <__d2b+0x92>
 800c9c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c9cc:	4405      	add	r5, r0
 800c9ce:	603d      	str	r5, [r7, #0]
 800c9d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c9d4:	6030      	str	r0, [r6, #0]
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	b003      	add	sp, #12
 800c9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9de:	6161      	str	r1, [r4, #20]
 800c9e0:	e7ea      	b.n	800c9b8 <__d2b+0x58>
 800c9e2:	a801      	add	r0, sp, #4
 800c9e4:	f7ff fcf1 	bl	800c3ca <__lo0bits>
 800c9e8:	9b01      	ldr	r3, [sp, #4]
 800c9ea:	6163      	str	r3, [r4, #20]
 800c9ec:	3020      	adds	r0, #32
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	e7e8      	b.n	800c9c4 <__d2b+0x64>
 800c9f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c9f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c9fa:	6038      	str	r0, [r7, #0]
 800c9fc:	6918      	ldr	r0, [r3, #16]
 800c9fe:	f7ff fcc5 	bl	800c38c <__hi0bits>
 800ca02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca06:	e7e5      	b.n	800c9d4 <__d2b+0x74>
 800ca08:	08028e91 	.word	0x08028e91
 800ca0c:	08028ea2 	.word	0x08028ea2

0800ca10 <__ratio>:
 800ca10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca14:	b085      	sub	sp, #20
 800ca16:	e9cd 1000 	strd	r1, r0, [sp]
 800ca1a:	a902      	add	r1, sp, #8
 800ca1c:	f7ff ff56 	bl	800c8cc <__b2d>
 800ca20:	9800      	ldr	r0, [sp, #0]
 800ca22:	a903      	add	r1, sp, #12
 800ca24:	ec55 4b10 	vmov	r4, r5, d0
 800ca28:	f7ff ff50 	bl	800c8cc <__b2d>
 800ca2c:	9b01      	ldr	r3, [sp, #4]
 800ca2e:	6919      	ldr	r1, [r3, #16]
 800ca30:	9b00      	ldr	r3, [sp, #0]
 800ca32:	691b      	ldr	r3, [r3, #16]
 800ca34:	1ac9      	subs	r1, r1, r3
 800ca36:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ca3a:	1a9b      	subs	r3, r3, r2
 800ca3c:	ec5b ab10 	vmov	sl, fp, d0
 800ca40:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	bfce      	itee	gt
 800ca48:	462a      	movgt	r2, r5
 800ca4a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca4e:	465a      	movle	r2, fp
 800ca50:	462f      	mov	r7, r5
 800ca52:	46d9      	mov	r9, fp
 800ca54:	bfcc      	ite	gt
 800ca56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ca5a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ca5e:	464b      	mov	r3, r9
 800ca60:	4652      	mov	r2, sl
 800ca62:	4620      	mov	r0, r4
 800ca64:	4639      	mov	r1, r7
 800ca66:	f7f3 fef1 	bl	800084c <__aeabi_ddiv>
 800ca6a:	ec41 0b10 	vmov	d0, r0, r1
 800ca6e:	b005      	add	sp, #20
 800ca70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca74 <__copybits>:
 800ca74:	3901      	subs	r1, #1
 800ca76:	b570      	push	{r4, r5, r6, lr}
 800ca78:	1149      	asrs	r1, r1, #5
 800ca7a:	6914      	ldr	r4, [r2, #16]
 800ca7c:	3101      	adds	r1, #1
 800ca7e:	f102 0314 	add.w	r3, r2, #20
 800ca82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca8a:	1f05      	subs	r5, r0, #4
 800ca8c:	42a3      	cmp	r3, r4
 800ca8e:	d30c      	bcc.n	800caaa <__copybits+0x36>
 800ca90:	1aa3      	subs	r3, r4, r2
 800ca92:	3b11      	subs	r3, #17
 800ca94:	f023 0303 	bic.w	r3, r3, #3
 800ca98:	3211      	adds	r2, #17
 800ca9a:	42a2      	cmp	r2, r4
 800ca9c:	bf88      	it	hi
 800ca9e:	2300      	movhi	r3, #0
 800caa0:	4418      	add	r0, r3
 800caa2:	2300      	movs	r3, #0
 800caa4:	4288      	cmp	r0, r1
 800caa6:	d305      	bcc.n	800cab4 <__copybits+0x40>
 800caa8:	bd70      	pop	{r4, r5, r6, pc}
 800caaa:	f853 6b04 	ldr.w	r6, [r3], #4
 800caae:	f845 6f04 	str.w	r6, [r5, #4]!
 800cab2:	e7eb      	b.n	800ca8c <__copybits+0x18>
 800cab4:	f840 3b04 	str.w	r3, [r0], #4
 800cab8:	e7f4      	b.n	800caa4 <__copybits+0x30>

0800caba <__any_on>:
 800caba:	f100 0214 	add.w	r2, r0, #20
 800cabe:	6900      	ldr	r0, [r0, #16]
 800cac0:	114b      	asrs	r3, r1, #5
 800cac2:	4298      	cmp	r0, r3
 800cac4:	b510      	push	{r4, lr}
 800cac6:	db11      	blt.n	800caec <__any_on+0x32>
 800cac8:	dd0a      	ble.n	800cae0 <__any_on+0x26>
 800caca:	f011 011f 	ands.w	r1, r1, #31
 800cace:	d007      	beq.n	800cae0 <__any_on+0x26>
 800cad0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cad4:	fa24 f001 	lsr.w	r0, r4, r1
 800cad8:	fa00 f101 	lsl.w	r1, r0, r1
 800cadc:	428c      	cmp	r4, r1
 800cade:	d10b      	bne.n	800caf8 <__any_on+0x3e>
 800cae0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d803      	bhi.n	800caf0 <__any_on+0x36>
 800cae8:	2000      	movs	r0, #0
 800caea:	bd10      	pop	{r4, pc}
 800caec:	4603      	mov	r3, r0
 800caee:	e7f7      	b.n	800cae0 <__any_on+0x26>
 800caf0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800caf4:	2900      	cmp	r1, #0
 800caf6:	d0f5      	beq.n	800cae4 <__any_on+0x2a>
 800caf8:	2001      	movs	r0, #1
 800cafa:	e7f6      	b.n	800caea <__any_on+0x30>

0800cafc <sulp>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	4604      	mov	r4, r0
 800cb00:	460d      	mov	r5, r1
 800cb02:	ec45 4b10 	vmov	d0, r4, r5
 800cb06:	4616      	mov	r6, r2
 800cb08:	f7ff feba 	bl	800c880 <__ulp>
 800cb0c:	ec51 0b10 	vmov	r0, r1, d0
 800cb10:	b17e      	cbz	r6, 800cb32 <sulp+0x36>
 800cb12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cb16:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	dd09      	ble.n	800cb32 <sulp+0x36>
 800cb1e:	051b      	lsls	r3, r3, #20
 800cb20:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cb24:	2400      	movs	r4, #0
 800cb26:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	462b      	mov	r3, r5
 800cb2e:	f7f3 fd63 	bl	80005f8 <__aeabi_dmul>
 800cb32:	ec41 0b10 	vmov	d0, r0, r1
 800cb36:	bd70      	pop	{r4, r5, r6, pc}

0800cb38 <_strtod_l>:
 800cb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3c:	b09f      	sub	sp, #124	@ 0x7c
 800cb3e:	460c      	mov	r4, r1
 800cb40:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cb42:	2200      	movs	r2, #0
 800cb44:	921a      	str	r2, [sp, #104]	@ 0x68
 800cb46:	9005      	str	r0, [sp, #20]
 800cb48:	f04f 0a00 	mov.w	sl, #0
 800cb4c:	f04f 0b00 	mov.w	fp, #0
 800cb50:	460a      	mov	r2, r1
 800cb52:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb54:	7811      	ldrb	r1, [r2, #0]
 800cb56:	292b      	cmp	r1, #43	@ 0x2b
 800cb58:	d04a      	beq.n	800cbf0 <_strtod_l+0xb8>
 800cb5a:	d838      	bhi.n	800cbce <_strtod_l+0x96>
 800cb5c:	290d      	cmp	r1, #13
 800cb5e:	d832      	bhi.n	800cbc6 <_strtod_l+0x8e>
 800cb60:	2908      	cmp	r1, #8
 800cb62:	d832      	bhi.n	800cbca <_strtod_l+0x92>
 800cb64:	2900      	cmp	r1, #0
 800cb66:	d03b      	beq.n	800cbe0 <_strtod_l+0xa8>
 800cb68:	2200      	movs	r2, #0
 800cb6a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cb6e:	782a      	ldrb	r2, [r5, #0]
 800cb70:	2a30      	cmp	r2, #48	@ 0x30
 800cb72:	f040 80b2 	bne.w	800ccda <_strtod_l+0x1a2>
 800cb76:	786a      	ldrb	r2, [r5, #1]
 800cb78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cb7c:	2a58      	cmp	r2, #88	@ 0x58
 800cb7e:	d16e      	bne.n	800cc5e <_strtod_l+0x126>
 800cb80:	9302      	str	r3, [sp, #8]
 800cb82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	4a8f      	ldr	r2, [pc, #572]	@ (800cdc8 <_strtod_l+0x290>)
 800cb8c:	9805      	ldr	r0, [sp, #20]
 800cb8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cb90:	a919      	add	r1, sp, #100	@ 0x64
 800cb92:	f001 f927 	bl	800dde4 <__gethex>
 800cb96:	f010 060f 	ands.w	r6, r0, #15
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	d005      	beq.n	800cbaa <_strtod_l+0x72>
 800cb9e:	2e06      	cmp	r6, #6
 800cba0:	d128      	bne.n	800cbf4 <_strtod_l+0xbc>
 800cba2:	3501      	adds	r5, #1
 800cba4:	2300      	movs	r3, #0
 800cba6:	9519      	str	r5, [sp, #100]	@ 0x64
 800cba8:	930e      	str	r3, [sp, #56]	@ 0x38
 800cbaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f040 858e 	bne.w	800d6ce <_strtod_l+0xb96>
 800cbb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbb4:	b1cb      	cbz	r3, 800cbea <_strtod_l+0xb2>
 800cbb6:	4652      	mov	r2, sl
 800cbb8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cbbc:	ec43 2b10 	vmov	d0, r2, r3
 800cbc0:	b01f      	add	sp, #124	@ 0x7c
 800cbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc6:	2920      	cmp	r1, #32
 800cbc8:	d1ce      	bne.n	800cb68 <_strtod_l+0x30>
 800cbca:	3201      	adds	r2, #1
 800cbcc:	e7c1      	b.n	800cb52 <_strtod_l+0x1a>
 800cbce:	292d      	cmp	r1, #45	@ 0x2d
 800cbd0:	d1ca      	bne.n	800cb68 <_strtod_l+0x30>
 800cbd2:	2101      	movs	r1, #1
 800cbd4:	910e      	str	r1, [sp, #56]	@ 0x38
 800cbd6:	1c51      	adds	r1, r2, #1
 800cbd8:	9119      	str	r1, [sp, #100]	@ 0x64
 800cbda:	7852      	ldrb	r2, [r2, #1]
 800cbdc:	2a00      	cmp	r2, #0
 800cbde:	d1c5      	bne.n	800cb6c <_strtod_l+0x34>
 800cbe0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cbe2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f040 8570 	bne.w	800d6ca <_strtod_l+0xb92>
 800cbea:	4652      	mov	r2, sl
 800cbec:	465b      	mov	r3, fp
 800cbee:	e7e5      	b.n	800cbbc <_strtod_l+0x84>
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	e7ef      	b.n	800cbd4 <_strtod_l+0x9c>
 800cbf4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbf6:	b13a      	cbz	r2, 800cc08 <_strtod_l+0xd0>
 800cbf8:	2135      	movs	r1, #53	@ 0x35
 800cbfa:	a81c      	add	r0, sp, #112	@ 0x70
 800cbfc:	f7ff ff3a 	bl	800ca74 <__copybits>
 800cc00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc02:	9805      	ldr	r0, [sp, #20]
 800cc04:	f7ff fb10 	bl	800c228 <_Bfree>
 800cc08:	3e01      	subs	r6, #1
 800cc0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cc0c:	2e04      	cmp	r6, #4
 800cc0e:	d806      	bhi.n	800cc1e <_strtod_l+0xe6>
 800cc10:	e8df f006 	tbb	[pc, r6]
 800cc14:	201d0314 	.word	0x201d0314
 800cc18:	14          	.byte	0x14
 800cc19:	00          	.byte	0x00
 800cc1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cc1e:	05e1      	lsls	r1, r4, #23
 800cc20:	bf48      	it	mi
 800cc22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cc26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc2a:	0d1b      	lsrs	r3, r3, #20
 800cc2c:	051b      	lsls	r3, r3, #20
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1bb      	bne.n	800cbaa <_strtod_l+0x72>
 800cc32:	f7fe fb2b 	bl	800b28c <__errno>
 800cc36:	2322      	movs	r3, #34	@ 0x22
 800cc38:	6003      	str	r3, [r0, #0]
 800cc3a:	e7b6      	b.n	800cbaa <_strtod_l+0x72>
 800cc3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cc40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cc44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cc48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cc4c:	e7e7      	b.n	800cc1e <_strtod_l+0xe6>
 800cc4e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cdd0 <_strtod_l+0x298>
 800cc52:	e7e4      	b.n	800cc1e <_strtod_l+0xe6>
 800cc54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cc58:	f04f 3aff 	mov.w	sl, #4294967295
 800cc5c:	e7df      	b.n	800cc1e <_strtod_l+0xe6>
 800cc5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc60:	1c5a      	adds	r2, r3, #1
 800cc62:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc64:	785b      	ldrb	r3, [r3, #1]
 800cc66:	2b30      	cmp	r3, #48	@ 0x30
 800cc68:	d0f9      	beq.n	800cc5e <_strtod_l+0x126>
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d09d      	beq.n	800cbaa <_strtod_l+0x72>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	2700      	movs	r7, #0
 800cc72:	9308      	str	r3, [sp, #32]
 800cc74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc76:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc78:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cc7a:	46b9      	mov	r9, r7
 800cc7c:	220a      	movs	r2, #10
 800cc7e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cc80:	7805      	ldrb	r5, [r0, #0]
 800cc82:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cc86:	b2d9      	uxtb	r1, r3
 800cc88:	2909      	cmp	r1, #9
 800cc8a:	d928      	bls.n	800ccde <_strtod_l+0x1a6>
 800cc8c:	494f      	ldr	r1, [pc, #316]	@ (800cdcc <_strtod_l+0x294>)
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f000 ffd6 	bl	800dc40 <strncmp>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d032      	beq.n	800ccfe <_strtod_l+0x1c6>
 800cc98:	2000      	movs	r0, #0
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc9e:	464d      	mov	r5, r9
 800cca0:	4603      	mov	r3, r0
 800cca2:	2a65      	cmp	r2, #101	@ 0x65
 800cca4:	d001      	beq.n	800ccaa <_strtod_l+0x172>
 800cca6:	2a45      	cmp	r2, #69	@ 0x45
 800cca8:	d114      	bne.n	800ccd4 <_strtod_l+0x19c>
 800ccaa:	b91d      	cbnz	r5, 800ccb4 <_strtod_l+0x17c>
 800ccac:	9a08      	ldr	r2, [sp, #32]
 800ccae:	4302      	orrs	r2, r0
 800ccb0:	d096      	beq.n	800cbe0 <_strtod_l+0xa8>
 800ccb2:	2500      	movs	r5, #0
 800ccb4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ccb6:	1c62      	adds	r2, r4, #1
 800ccb8:	9219      	str	r2, [sp, #100]	@ 0x64
 800ccba:	7862      	ldrb	r2, [r4, #1]
 800ccbc:	2a2b      	cmp	r2, #43	@ 0x2b
 800ccbe:	d07a      	beq.n	800cdb6 <_strtod_l+0x27e>
 800ccc0:	2a2d      	cmp	r2, #45	@ 0x2d
 800ccc2:	d07e      	beq.n	800cdc2 <_strtod_l+0x28a>
 800ccc4:	f04f 0c00 	mov.w	ip, #0
 800ccc8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cccc:	2909      	cmp	r1, #9
 800ccce:	f240 8085 	bls.w	800cddc <_strtod_l+0x2a4>
 800ccd2:	9419      	str	r4, [sp, #100]	@ 0x64
 800ccd4:	f04f 0800 	mov.w	r8, #0
 800ccd8:	e0a5      	b.n	800ce26 <_strtod_l+0x2ee>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	e7c8      	b.n	800cc70 <_strtod_l+0x138>
 800ccde:	f1b9 0f08 	cmp.w	r9, #8
 800cce2:	bfd8      	it	le
 800cce4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800cce6:	f100 0001 	add.w	r0, r0, #1
 800ccea:	bfda      	itte	le
 800ccec:	fb02 3301 	mlale	r3, r2, r1, r3
 800ccf0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ccf2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ccf6:	f109 0901 	add.w	r9, r9, #1
 800ccfa:	9019      	str	r0, [sp, #100]	@ 0x64
 800ccfc:	e7bf      	b.n	800cc7e <_strtod_l+0x146>
 800ccfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd00:	1c5a      	adds	r2, r3, #1
 800cd02:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd04:	785a      	ldrb	r2, [r3, #1]
 800cd06:	f1b9 0f00 	cmp.w	r9, #0
 800cd0a:	d03b      	beq.n	800cd84 <_strtod_l+0x24c>
 800cd0c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cd0e:	464d      	mov	r5, r9
 800cd10:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cd14:	2b09      	cmp	r3, #9
 800cd16:	d912      	bls.n	800cd3e <_strtod_l+0x206>
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e7c2      	b.n	800cca2 <_strtod_l+0x16a>
 800cd1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd1e:	1c5a      	adds	r2, r3, #1
 800cd20:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd22:	785a      	ldrb	r2, [r3, #1]
 800cd24:	3001      	adds	r0, #1
 800cd26:	2a30      	cmp	r2, #48	@ 0x30
 800cd28:	d0f8      	beq.n	800cd1c <_strtod_l+0x1e4>
 800cd2a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cd2e:	2b08      	cmp	r3, #8
 800cd30:	f200 84d2 	bhi.w	800d6d8 <_strtod_l+0xba0>
 800cd34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd36:	900a      	str	r0, [sp, #40]	@ 0x28
 800cd38:	2000      	movs	r0, #0
 800cd3a:	930c      	str	r3, [sp, #48]	@ 0x30
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	3a30      	subs	r2, #48	@ 0x30
 800cd40:	f100 0301 	add.w	r3, r0, #1
 800cd44:	d018      	beq.n	800cd78 <_strtod_l+0x240>
 800cd46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd48:	4419      	add	r1, r3
 800cd4a:	910a      	str	r1, [sp, #40]	@ 0x28
 800cd4c:	462e      	mov	r6, r5
 800cd4e:	f04f 0e0a 	mov.w	lr, #10
 800cd52:	1c71      	adds	r1, r6, #1
 800cd54:	eba1 0c05 	sub.w	ip, r1, r5
 800cd58:	4563      	cmp	r3, ip
 800cd5a:	dc15      	bgt.n	800cd88 <_strtod_l+0x250>
 800cd5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cd60:	182b      	adds	r3, r5, r0
 800cd62:	2b08      	cmp	r3, #8
 800cd64:	f105 0501 	add.w	r5, r5, #1
 800cd68:	4405      	add	r5, r0
 800cd6a:	dc1a      	bgt.n	800cda2 <_strtod_l+0x26a>
 800cd6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd6e:	230a      	movs	r3, #10
 800cd70:	fb03 2301 	mla	r3, r3, r1, r2
 800cd74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd76:	2300      	movs	r3, #0
 800cd78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd7a:	1c51      	adds	r1, r2, #1
 800cd7c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd7e:	7852      	ldrb	r2, [r2, #1]
 800cd80:	4618      	mov	r0, r3
 800cd82:	e7c5      	b.n	800cd10 <_strtod_l+0x1d8>
 800cd84:	4648      	mov	r0, r9
 800cd86:	e7ce      	b.n	800cd26 <_strtod_l+0x1ee>
 800cd88:	2e08      	cmp	r6, #8
 800cd8a:	dc05      	bgt.n	800cd98 <_strtod_l+0x260>
 800cd8c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cd8e:	fb0e f606 	mul.w	r6, lr, r6
 800cd92:	960b      	str	r6, [sp, #44]	@ 0x2c
 800cd94:	460e      	mov	r6, r1
 800cd96:	e7dc      	b.n	800cd52 <_strtod_l+0x21a>
 800cd98:	2910      	cmp	r1, #16
 800cd9a:	bfd8      	it	le
 800cd9c:	fb0e f707 	mulle.w	r7, lr, r7
 800cda0:	e7f8      	b.n	800cd94 <_strtod_l+0x25c>
 800cda2:	2b0f      	cmp	r3, #15
 800cda4:	bfdc      	itt	le
 800cda6:	230a      	movle	r3, #10
 800cda8:	fb03 2707 	mlale	r7, r3, r7, r2
 800cdac:	e7e3      	b.n	800cd76 <_strtod_l+0x23e>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e77a      	b.n	800ccac <_strtod_l+0x174>
 800cdb6:	f04f 0c00 	mov.w	ip, #0
 800cdba:	1ca2      	adds	r2, r4, #2
 800cdbc:	9219      	str	r2, [sp, #100]	@ 0x64
 800cdbe:	78a2      	ldrb	r2, [r4, #2]
 800cdc0:	e782      	b.n	800ccc8 <_strtod_l+0x190>
 800cdc2:	f04f 0c01 	mov.w	ip, #1
 800cdc6:	e7f8      	b.n	800cdba <_strtod_l+0x282>
 800cdc8:	080290c4 	.word	0x080290c4
 800cdcc:	08028efb 	.word	0x08028efb
 800cdd0:	7ff00000 	.word	0x7ff00000
 800cdd4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cdd6:	1c51      	adds	r1, r2, #1
 800cdd8:	9119      	str	r1, [sp, #100]	@ 0x64
 800cdda:	7852      	ldrb	r2, [r2, #1]
 800cddc:	2a30      	cmp	r2, #48	@ 0x30
 800cdde:	d0f9      	beq.n	800cdd4 <_strtod_l+0x29c>
 800cde0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cde4:	2908      	cmp	r1, #8
 800cde6:	f63f af75 	bhi.w	800ccd4 <_strtod_l+0x19c>
 800cdea:	3a30      	subs	r2, #48	@ 0x30
 800cdec:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cdf0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cdf2:	f04f 080a 	mov.w	r8, #10
 800cdf6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cdf8:	1c56      	adds	r6, r2, #1
 800cdfa:	9619      	str	r6, [sp, #100]	@ 0x64
 800cdfc:	7852      	ldrb	r2, [r2, #1]
 800cdfe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ce02:	f1be 0f09 	cmp.w	lr, #9
 800ce06:	d939      	bls.n	800ce7c <_strtod_l+0x344>
 800ce08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ce0a:	1a76      	subs	r6, r6, r1
 800ce0c:	2e08      	cmp	r6, #8
 800ce0e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ce12:	dc03      	bgt.n	800ce1c <_strtod_l+0x2e4>
 800ce14:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce16:	4588      	cmp	r8, r1
 800ce18:	bfa8      	it	ge
 800ce1a:	4688      	movge	r8, r1
 800ce1c:	f1bc 0f00 	cmp.w	ip, #0
 800ce20:	d001      	beq.n	800ce26 <_strtod_l+0x2ee>
 800ce22:	f1c8 0800 	rsb	r8, r8, #0
 800ce26:	2d00      	cmp	r5, #0
 800ce28:	d14e      	bne.n	800cec8 <_strtod_l+0x390>
 800ce2a:	9908      	ldr	r1, [sp, #32]
 800ce2c:	4308      	orrs	r0, r1
 800ce2e:	f47f aebc 	bne.w	800cbaa <_strtod_l+0x72>
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	f47f aed4 	bne.w	800cbe0 <_strtod_l+0xa8>
 800ce38:	2a69      	cmp	r2, #105	@ 0x69
 800ce3a:	d028      	beq.n	800ce8e <_strtod_l+0x356>
 800ce3c:	dc25      	bgt.n	800ce8a <_strtod_l+0x352>
 800ce3e:	2a49      	cmp	r2, #73	@ 0x49
 800ce40:	d025      	beq.n	800ce8e <_strtod_l+0x356>
 800ce42:	2a4e      	cmp	r2, #78	@ 0x4e
 800ce44:	f47f aecc 	bne.w	800cbe0 <_strtod_l+0xa8>
 800ce48:	499a      	ldr	r1, [pc, #616]	@ (800d0b4 <_strtod_l+0x57c>)
 800ce4a:	a819      	add	r0, sp, #100	@ 0x64
 800ce4c:	f001 f9ec 	bl	800e228 <__match>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	f43f aec5 	beq.w	800cbe0 <_strtod_l+0xa8>
 800ce56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	2b28      	cmp	r3, #40	@ 0x28
 800ce5c:	d12e      	bne.n	800cebc <_strtod_l+0x384>
 800ce5e:	4996      	ldr	r1, [pc, #600]	@ (800d0b8 <_strtod_l+0x580>)
 800ce60:	aa1c      	add	r2, sp, #112	@ 0x70
 800ce62:	a819      	add	r0, sp, #100	@ 0x64
 800ce64:	f001 f9f4 	bl	800e250 <__hexnan>
 800ce68:	2805      	cmp	r0, #5
 800ce6a:	d127      	bne.n	800cebc <_strtod_l+0x384>
 800ce6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce6e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ce72:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ce76:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ce7a:	e696      	b.n	800cbaa <_strtod_l+0x72>
 800ce7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce7e:	fb08 2101 	mla	r1, r8, r1, r2
 800ce82:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ce86:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce88:	e7b5      	b.n	800cdf6 <_strtod_l+0x2be>
 800ce8a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ce8c:	e7da      	b.n	800ce44 <_strtod_l+0x30c>
 800ce8e:	498b      	ldr	r1, [pc, #556]	@ (800d0bc <_strtod_l+0x584>)
 800ce90:	a819      	add	r0, sp, #100	@ 0x64
 800ce92:	f001 f9c9 	bl	800e228 <__match>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	f43f aea2 	beq.w	800cbe0 <_strtod_l+0xa8>
 800ce9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce9e:	4988      	ldr	r1, [pc, #544]	@ (800d0c0 <_strtod_l+0x588>)
 800cea0:	3b01      	subs	r3, #1
 800cea2:	a819      	add	r0, sp, #100	@ 0x64
 800cea4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cea6:	f001 f9bf 	bl	800e228 <__match>
 800ceaa:	b910      	cbnz	r0, 800ceb2 <_strtod_l+0x37a>
 800ceac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ceae:	3301      	adds	r3, #1
 800ceb0:	9319      	str	r3, [sp, #100]	@ 0x64
 800ceb2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d0d0 <_strtod_l+0x598>
 800ceb6:	f04f 0a00 	mov.w	sl, #0
 800ceba:	e676      	b.n	800cbaa <_strtod_l+0x72>
 800cebc:	4881      	ldr	r0, [pc, #516]	@ (800d0c4 <_strtod_l+0x58c>)
 800cebe:	f000 feef 	bl	800dca0 <nan>
 800cec2:	ec5b ab10 	vmov	sl, fp, d0
 800cec6:	e670      	b.n	800cbaa <_strtod_l+0x72>
 800cec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cecc:	eba8 0303 	sub.w	r3, r8, r3
 800ced0:	f1b9 0f00 	cmp.w	r9, #0
 800ced4:	bf08      	it	eq
 800ced6:	46a9      	moveq	r9, r5
 800ced8:	2d10      	cmp	r5, #16
 800ceda:	9309      	str	r3, [sp, #36]	@ 0x24
 800cedc:	462c      	mov	r4, r5
 800cede:	bfa8      	it	ge
 800cee0:	2410      	movge	r4, #16
 800cee2:	f7f3 fb0f 	bl	8000504 <__aeabi_ui2d>
 800cee6:	2d09      	cmp	r5, #9
 800cee8:	4682      	mov	sl, r0
 800ceea:	468b      	mov	fp, r1
 800ceec:	dc13      	bgt.n	800cf16 <_strtod_l+0x3de>
 800ceee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f43f ae5a 	beq.w	800cbaa <_strtod_l+0x72>
 800cef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cef8:	dd78      	ble.n	800cfec <_strtod_l+0x4b4>
 800cefa:	2b16      	cmp	r3, #22
 800cefc:	dc5f      	bgt.n	800cfbe <_strtod_l+0x486>
 800cefe:	4972      	ldr	r1, [pc, #456]	@ (800d0c8 <_strtod_l+0x590>)
 800cf00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf08:	4652      	mov	r2, sl
 800cf0a:	465b      	mov	r3, fp
 800cf0c:	f7f3 fb74 	bl	80005f8 <__aeabi_dmul>
 800cf10:	4682      	mov	sl, r0
 800cf12:	468b      	mov	fp, r1
 800cf14:	e649      	b.n	800cbaa <_strtod_l+0x72>
 800cf16:	4b6c      	ldr	r3, [pc, #432]	@ (800d0c8 <_strtod_l+0x590>)
 800cf18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cf20:	f7f3 fb6a 	bl	80005f8 <__aeabi_dmul>
 800cf24:	4682      	mov	sl, r0
 800cf26:	4638      	mov	r0, r7
 800cf28:	468b      	mov	fp, r1
 800cf2a:	f7f3 faeb 	bl	8000504 <__aeabi_ui2d>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	460b      	mov	r3, r1
 800cf32:	4650      	mov	r0, sl
 800cf34:	4659      	mov	r1, fp
 800cf36:	f7f3 f9a9 	bl	800028c <__adddf3>
 800cf3a:	2d0f      	cmp	r5, #15
 800cf3c:	4682      	mov	sl, r0
 800cf3e:	468b      	mov	fp, r1
 800cf40:	ddd5      	ble.n	800ceee <_strtod_l+0x3b6>
 800cf42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf44:	1b2c      	subs	r4, r5, r4
 800cf46:	441c      	add	r4, r3
 800cf48:	2c00      	cmp	r4, #0
 800cf4a:	f340 8093 	ble.w	800d074 <_strtod_l+0x53c>
 800cf4e:	f014 030f 	ands.w	r3, r4, #15
 800cf52:	d00a      	beq.n	800cf6a <_strtod_l+0x432>
 800cf54:	495c      	ldr	r1, [pc, #368]	@ (800d0c8 <_strtod_l+0x590>)
 800cf56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf5a:	4652      	mov	r2, sl
 800cf5c:	465b      	mov	r3, fp
 800cf5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf62:	f7f3 fb49 	bl	80005f8 <__aeabi_dmul>
 800cf66:	4682      	mov	sl, r0
 800cf68:	468b      	mov	fp, r1
 800cf6a:	f034 040f 	bics.w	r4, r4, #15
 800cf6e:	d073      	beq.n	800d058 <_strtod_l+0x520>
 800cf70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cf74:	dd49      	ble.n	800d00a <_strtod_l+0x4d2>
 800cf76:	2400      	movs	r4, #0
 800cf78:	46a0      	mov	r8, r4
 800cf7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf7c:	46a1      	mov	r9, r4
 800cf7e:	9a05      	ldr	r2, [sp, #20]
 800cf80:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d0d0 <_strtod_l+0x598>
 800cf84:	2322      	movs	r3, #34	@ 0x22
 800cf86:	6013      	str	r3, [r2, #0]
 800cf88:	f04f 0a00 	mov.w	sl, #0
 800cf8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f43f ae0b 	beq.w	800cbaa <_strtod_l+0x72>
 800cf94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf96:	9805      	ldr	r0, [sp, #20]
 800cf98:	f7ff f946 	bl	800c228 <_Bfree>
 800cf9c:	9805      	ldr	r0, [sp, #20]
 800cf9e:	4649      	mov	r1, r9
 800cfa0:	f7ff f942 	bl	800c228 <_Bfree>
 800cfa4:	9805      	ldr	r0, [sp, #20]
 800cfa6:	4641      	mov	r1, r8
 800cfa8:	f7ff f93e 	bl	800c228 <_Bfree>
 800cfac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfae:	9805      	ldr	r0, [sp, #20]
 800cfb0:	f7ff f93a 	bl	800c228 <_Bfree>
 800cfb4:	9805      	ldr	r0, [sp, #20]
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	f7ff f936 	bl	800c228 <_Bfree>
 800cfbc:	e5f5      	b.n	800cbaa <_strtod_l+0x72>
 800cfbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfc0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	dbbc      	blt.n	800cf42 <_strtod_l+0x40a>
 800cfc8:	4c3f      	ldr	r4, [pc, #252]	@ (800d0c8 <_strtod_l+0x590>)
 800cfca:	f1c5 050f 	rsb	r5, r5, #15
 800cfce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cfd2:	4652      	mov	r2, sl
 800cfd4:	465b      	mov	r3, fp
 800cfd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfda:	f7f3 fb0d 	bl	80005f8 <__aeabi_dmul>
 800cfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe0:	1b5d      	subs	r5, r3, r5
 800cfe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cfe6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cfea:	e78f      	b.n	800cf0c <_strtod_l+0x3d4>
 800cfec:	3316      	adds	r3, #22
 800cfee:	dba8      	blt.n	800cf42 <_strtod_l+0x40a>
 800cff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cff2:	eba3 0808 	sub.w	r8, r3, r8
 800cff6:	4b34      	ldr	r3, [pc, #208]	@ (800d0c8 <_strtod_l+0x590>)
 800cff8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cffc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d000:	4650      	mov	r0, sl
 800d002:	4659      	mov	r1, fp
 800d004:	f7f3 fc22 	bl	800084c <__aeabi_ddiv>
 800d008:	e782      	b.n	800cf10 <_strtod_l+0x3d8>
 800d00a:	2300      	movs	r3, #0
 800d00c:	4f2f      	ldr	r7, [pc, #188]	@ (800d0cc <_strtod_l+0x594>)
 800d00e:	1124      	asrs	r4, r4, #4
 800d010:	4650      	mov	r0, sl
 800d012:	4659      	mov	r1, fp
 800d014:	461e      	mov	r6, r3
 800d016:	2c01      	cmp	r4, #1
 800d018:	dc21      	bgt.n	800d05e <_strtod_l+0x526>
 800d01a:	b10b      	cbz	r3, 800d020 <_strtod_l+0x4e8>
 800d01c:	4682      	mov	sl, r0
 800d01e:	468b      	mov	fp, r1
 800d020:	492a      	ldr	r1, [pc, #168]	@ (800d0cc <_strtod_l+0x594>)
 800d022:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d026:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d02a:	4652      	mov	r2, sl
 800d02c:	465b      	mov	r3, fp
 800d02e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d032:	f7f3 fae1 	bl	80005f8 <__aeabi_dmul>
 800d036:	4b26      	ldr	r3, [pc, #152]	@ (800d0d0 <_strtod_l+0x598>)
 800d038:	460a      	mov	r2, r1
 800d03a:	400b      	ands	r3, r1
 800d03c:	4925      	ldr	r1, [pc, #148]	@ (800d0d4 <_strtod_l+0x59c>)
 800d03e:	428b      	cmp	r3, r1
 800d040:	4682      	mov	sl, r0
 800d042:	d898      	bhi.n	800cf76 <_strtod_l+0x43e>
 800d044:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d048:	428b      	cmp	r3, r1
 800d04a:	bf86      	itte	hi
 800d04c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d0d8 <_strtod_l+0x5a0>
 800d050:	f04f 3aff 	movhi.w	sl, #4294967295
 800d054:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d058:	2300      	movs	r3, #0
 800d05a:	9308      	str	r3, [sp, #32]
 800d05c:	e076      	b.n	800d14c <_strtod_l+0x614>
 800d05e:	07e2      	lsls	r2, r4, #31
 800d060:	d504      	bpl.n	800d06c <_strtod_l+0x534>
 800d062:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d066:	f7f3 fac7 	bl	80005f8 <__aeabi_dmul>
 800d06a:	2301      	movs	r3, #1
 800d06c:	3601      	adds	r6, #1
 800d06e:	1064      	asrs	r4, r4, #1
 800d070:	3708      	adds	r7, #8
 800d072:	e7d0      	b.n	800d016 <_strtod_l+0x4de>
 800d074:	d0f0      	beq.n	800d058 <_strtod_l+0x520>
 800d076:	4264      	negs	r4, r4
 800d078:	f014 020f 	ands.w	r2, r4, #15
 800d07c:	d00a      	beq.n	800d094 <_strtod_l+0x55c>
 800d07e:	4b12      	ldr	r3, [pc, #72]	@ (800d0c8 <_strtod_l+0x590>)
 800d080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d084:	4650      	mov	r0, sl
 800d086:	4659      	mov	r1, fp
 800d088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08c:	f7f3 fbde 	bl	800084c <__aeabi_ddiv>
 800d090:	4682      	mov	sl, r0
 800d092:	468b      	mov	fp, r1
 800d094:	1124      	asrs	r4, r4, #4
 800d096:	d0df      	beq.n	800d058 <_strtod_l+0x520>
 800d098:	2c1f      	cmp	r4, #31
 800d09a:	dd1f      	ble.n	800d0dc <_strtod_l+0x5a4>
 800d09c:	2400      	movs	r4, #0
 800d09e:	46a0      	mov	r8, r4
 800d0a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d0a2:	46a1      	mov	r9, r4
 800d0a4:	9a05      	ldr	r2, [sp, #20]
 800d0a6:	2322      	movs	r3, #34	@ 0x22
 800d0a8:	f04f 0a00 	mov.w	sl, #0
 800d0ac:	f04f 0b00 	mov.w	fp, #0
 800d0b0:	6013      	str	r3, [r2, #0]
 800d0b2:	e76b      	b.n	800cf8c <_strtod_l+0x454>
 800d0b4:	08028de9 	.word	0x08028de9
 800d0b8:	080290b0 	.word	0x080290b0
 800d0bc:	08028de1 	.word	0x08028de1
 800d0c0:	08028e18 	.word	0x08028e18
 800d0c4:	08028f51 	.word	0x08028f51
 800d0c8:	08028fe8 	.word	0x08028fe8
 800d0cc:	08028fc0 	.word	0x08028fc0
 800d0d0:	7ff00000 	.word	0x7ff00000
 800d0d4:	7ca00000 	.word	0x7ca00000
 800d0d8:	7fefffff 	.word	0x7fefffff
 800d0dc:	f014 0310 	ands.w	r3, r4, #16
 800d0e0:	bf18      	it	ne
 800d0e2:	236a      	movne	r3, #106	@ 0x6a
 800d0e4:	4ea9      	ldr	r6, [pc, #676]	@ (800d38c <_strtod_l+0x854>)
 800d0e6:	9308      	str	r3, [sp, #32]
 800d0e8:	4650      	mov	r0, sl
 800d0ea:	4659      	mov	r1, fp
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	07e7      	lsls	r7, r4, #31
 800d0f0:	d504      	bpl.n	800d0fc <_strtod_l+0x5c4>
 800d0f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d0f6:	f7f3 fa7f 	bl	80005f8 <__aeabi_dmul>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	1064      	asrs	r4, r4, #1
 800d0fe:	f106 0608 	add.w	r6, r6, #8
 800d102:	d1f4      	bne.n	800d0ee <_strtod_l+0x5b6>
 800d104:	b10b      	cbz	r3, 800d10a <_strtod_l+0x5d2>
 800d106:	4682      	mov	sl, r0
 800d108:	468b      	mov	fp, r1
 800d10a:	9b08      	ldr	r3, [sp, #32]
 800d10c:	b1b3      	cbz	r3, 800d13c <_strtod_l+0x604>
 800d10e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d112:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d116:	2b00      	cmp	r3, #0
 800d118:	4659      	mov	r1, fp
 800d11a:	dd0f      	ble.n	800d13c <_strtod_l+0x604>
 800d11c:	2b1f      	cmp	r3, #31
 800d11e:	dd56      	ble.n	800d1ce <_strtod_l+0x696>
 800d120:	2b34      	cmp	r3, #52	@ 0x34
 800d122:	bfde      	ittt	le
 800d124:	f04f 33ff 	movle.w	r3, #4294967295
 800d128:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d12c:	4093      	lslle	r3, r2
 800d12e:	f04f 0a00 	mov.w	sl, #0
 800d132:	bfcc      	ite	gt
 800d134:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d138:	ea03 0b01 	andle.w	fp, r3, r1
 800d13c:	2200      	movs	r2, #0
 800d13e:	2300      	movs	r3, #0
 800d140:	4650      	mov	r0, sl
 800d142:	4659      	mov	r1, fp
 800d144:	f7f3 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d148:	2800      	cmp	r0, #0
 800d14a:	d1a7      	bne.n	800d09c <_strtod_l+0x564>
 800d14c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d152:	9805      	ldr	r0, [sp, #20]
 800d154:	462b      	mov	r3, r5
 800d156:	464a      	mov	r2, r9
 800d158:	f7ff f8ce 	bl	800c2f8 <__s2b>
 800d15c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d15e:	2800      	cmp	r0, #0
 800d160:	f43f af09 	beq.w	800cf76 <_strtod_l+0x43e>
 800d164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d166:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d168:	2a00      	cmp	r2, #0
 800d16a:	eba3 0308 	sub.w	r3, r3, r8
 800d16e:	bfa8      	it	ge
 800d170:	2300      	movge	r3, #0
 800d172:	9312      	str	r3, [sp, #72]	@ 0x48
 800d174:	2400      	movs	r4, #0
 800d176:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d17a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d17c:	46a0      	mov	r8, r4
 800d17e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d180:	9805      	ldr	r0, [sp, #20]
 800d182:	6859      	ldr	r1, [r3, #4]
 800d184:	f7ff f810 	bl	800c1a8 <_Balloc>
 800d188:	4681      	mov	r9, r0
 800d18a:	2800      	cmp	r0, #0
 800d18c:	f43f aef7 	beq.w	800cf7e <_strtod_l+0x446>
 800d190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d192:	691a      	ldr	r2, [r3, #16]
 800d194:	3202      	adds	r2, #2
 800d196:	f103 010c 	add.w	r1, r3, #12
 800d19a:	0092      	lsls	r2, r2, #2
 800d19c:	300c      	adds	r0, #12
 800d19e:	f000 fd71 	bl	800dc84 <memcpy>
 800d1a2:	ec4b ab10 	vmov	d0, sl, fp
 800d1a6:	9805      	ldr	r0, [sp, #20]
 800d1a8:	aa1c      	add	r2, sp, #112	@ 0x70
 800d1aa:	a91b      	add	r1, sp, #108	@ 0x6c
 800d1ac:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d1b0:	f7ff fbd6 	bl	800c960 <__d2b>
 800d1b4:	901a      	str	r0, [sp, #104]	@ 0x68
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	f43f aee1 	beq.w	800cf7e <_strtod_l+0x446>
 800d1bc:	9805      	ldr	r0, [sp, #20]
 800d1be:	2101      	movs	r1, #1
 800d1c0:	f7ff f930 	bl	800c424 <__i2b>
 800d1c4:	4680      	mov	r8, r0
 800d1c6:	b948      	cbnz	r0, 800d1dc <_strtod_l+0x6a4>
 800d1c8:	f04f 0800 	mov.w	r8, #0
 800d1cc:	e6d7      	b.n	800cf7e <_strtod_l+0x446>
 800d1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d6:	ea03 0a0a 	and.w	sl, r3, sl
 800d1da:	e7af      	b.n	800d13c <_strtod_l+0x604>
 800d1dc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d1de:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d1e0:	2d00      	cmp	r5, #0
 800d1e2:	bfab      	itete	ge
 800d1e4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d1e6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d1e8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d1ea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d1ec:	bfac      	ite	ge
 800d1ee:	18ef      	addge	r7, r5, r3
 800d1f0:	1b5e      	sublt	r6, r3, r5
 800d1f2:	9b08      	ldr	r3, [sp, #32]
 800d1f4:	1aed      	subs	r5, r5, r3
 800d1f6:	4415      	add	r5, r2
 800d1f8:	4b65      	ldr	r3, [pc, #404]	@ (800d390 <_strtod_l+0x858>)
 800d1fa:	3d01      	subs	r5, #1
 800d1fc:	429d      	cmp	r5, r3
 800d1fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d202:	da50      	bge.n	800d2a6 <_strtod_l+0x76e>
 800d204:	1b5b      	subs	r3, r3, r5
 800d206:	2b1f      	cmp	r3, #31
 800d208:	eba2 0203 	sub.w	r2, r2, r3
 800d20c:	f04f 0101 	mov.w	r1, #1
 800d210:	dc3d      	bgt.n	800d28e <_strtod_l+0x756>
 800d212:	fa01 f303 	lsl.w	r3, r1, r3
 800d216:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d218:	2300      	movs	r3, #0
 800d21a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d21c:	18bd      	adds	r5, r7, r2
 800d21e:	9b08      	ldr	r3, [sp, #32]
 800d220:	42af      	cmp	r7, r5
 800d222:	4416      	add	r6, r2
 800d224:	441e      	add	r6, r3
 800d226:	463b      	mov	r3, r7
 800d228:	bfa8      	it	ge
 800d22a:	462b      	movge	r3, r5
 800d22c:	42b3      	cmp	r3, r6
 800d22e:	bfa8      	it	ge
 800d230:	4633      	movge	r3, r6
 800d232:	2b00      	cmp	r3, #0
 800d234:	bfc2      	ittt	gt
 800d236:	1aed      	subgt	r5, r5, r3
 800d238:	1af6      	subgt	r6, r6, r3
 800d23a:	1aff      	subgt	r7, r7, r3
 800d23c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d23e:	2b00      	cmp	r3, #0
 800d240:	dd16      	ble.n	800d270 <_strtod_l+0x738>
 800d242:	4641      	mov	r1, r8
 800d244:	9805      	ldr	r0, [sp, #20]
 800d246:	461a      	mov	r2, r3
 800d248:	f7ff f9a4 	bl	800c594 <__pow5mult>
 800d24c:	4680      	mov	r8, r0
 800d24e:	2800      	cmp	r0, #0
 800d250:	d0ba      	beq.n	800d1c8 <_strtod_l+0x690>
 800d252:	4601      	mov	r1, r0
 800d254:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d256:	9805      	ldr	r0, [sp, #20]
 800d258:	f7ff f8fa 	bl	800c450 <__multiply>
 800d25c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d25e:	2800      	cmp	r0, #0
 800d260:	f43f ae8d 	beq.w	800cf7e <_strtod_l+0x446>
 800d264:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d266:	9805      	ldr	r0, [sp, #20]
 800d268:	f7fe ffde 	bl	800c228 <_Bfree>
 800d26c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d26e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d270:	2d00      	cmp	r5, #0
 800d272:	dc1d      	bgt.n	800d2b0 <_strtod_l+0x778>
 800d274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d276:	2b00      	cmp	r3, #0
 800d278:	dd23      	ble.n	800d2c2 <_strtod_l+0x78a>
 800d27a:	4649      	mov	r1, r9
 800d27c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d27e:	9805      	ldr	r0, [sp, #20]
 800d280:	f7ff f988 	bl	800c594 <__pow5mult>
 800d284:	4681      	mov	r9, r0
 800d286:	b9e0      	cbnz	r0, 800d2c2 <_strtod_l+0x78a>
 800d288:	f04f 0900 	mov.w	r9, #0
 800d28c:	e677      	b.n	800cf7e <_strtod_l+0x446>
 800d28e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d292:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d296:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d29a:	35e2      	adds	r5, #226	@ 0xe2
 800d29c:	fa01 f305 	lsl.w	r3, r1, r5
 800d2a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2a2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d2a4:	e7ba      	b.n	800d21c <_strtod_l+0x6e4>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2ae:	e7b5      	b.n	800d21c <_strtod_l+0x6e4>
 800d2b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2b2:	9805      	ldr	r0, [sp, #20]
 800d2b4:	462a      	mov	r2, r5
 800d2b6:	f7ff f9c7 	bl	800c648 <__lshift>
 800d2ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d1d9      	bne.n	800d274 <_strtod_l+0x73c>
 800d2c0:	e65d      	b.n	800cf7e <_strtod_l+0x446>
 800d2c2:	2e00      	cmp	r6, #0
 800d2c4:	dd07      	ble.n	800d2d6 <_strtod_l+0x79e>
 800d2c6:	4649      	mov	r1, r9
 800d2c8:	9805      	ldr	r0, [sp, #20]
 800d2ca:	4632      	mov	r2, r6
 800d2cc:	f7ff f9bc 	bl	800c648 <__lshift>
 800d2d0:	4681      	mov	r9, r0
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d0d8      	beq.n	800d288 <_strtod_l+0x750>
 800d2d6:	2f00      	cmp	r7, #0
 800d2d8:	dd08      	ble.n	800d2ec <_strtod_l+0x7b4>
 800d2da:	4641      	mov	r1, r8
 800d2dc:	9805      	ldr	r0, [sp, #20]
 800d2de:	463a      	mov	r2, r7
 800d2e0:	f7ff f9b2 	bl	800c648 <__lshift>
 800d2e4:	4680      	mov	r8, r0
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	f43f ae49 	beq.w	800cf7e <_strtod_l+0x446>
 800d2ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2ee:	9805      	ldr	r0, [sp, #20]
 800d2f0:	464a      	mov	r2, r9
 800d2f2:	f7ff fa31 	bl	800c758 <__mdiff>
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	f43f ae40 	beq.w	800cf7e <_strtod_l+0x446>
 800d2fe:	68c3      	ldr	r3, [r0, #12]
 800d300:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d302:	2300      	movs	r3, #0
 800d304:	60c3      	str	r3, [r0, #12]
 800d306:	4641      	mov	r1, r8
 800d308:	f7ff fa0a 	bl	800c720 <__mcmp>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	da45      	bge.n	800d39c <_strtod_l+0x864>
 800d310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d312:	ea53 030a 	orrs.w	r3, r3, sl
 800d316:	d16b      	bne.n	800d3f0 <_strtod_l+0x8b8>
 800d318:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d167      	bne.n	800d3f0 <_strtod_l+0x8b8>
 800d320:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d324:	0d1b      	lsrs	r3, r3, #20
 800d326:	051b      	lsls	r3, r3, #20
 800d328:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d32c:	d960      	bls.n	800d3f0 <_strtod_l+0x8b8>
 800d32e:	6963      	ldr	r3, [r4, #20]
 800d330:	b913      	cbnz	r3, 800d338 <_strtod_l+0x800>
 800d332:	6923      	ldr	r3, [r4, #16]
 800d334:	2b01      	cmp	r3, #1
 800d336:	dd5b      	ble.n	800d3f0 <_strtod_l+0x8b8>
 800d338:	4621      	mov	r1, r4
 800d33a:	2201      	movs	r2, #1
 800d33c:	9805      	ldr	r0, [sp, #20]
 800d33e:	f7ff f983 	bl	800c648 <__lshift>
 800d342:	4641      	mov	r1, r8
 800d344:	4604      	mov	r4, r0
 800d346:	f7ff f9eb 	bl	800c720 <__mcmp>
 800d34a:	2800      	cmp	r0, #0
 800d34c:	dd50      	ble.n	800d3f0 <_strtod_l+0x8b8>
 800d34e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d352:	9a08      	ldr	r2, [sp, #32]
 800d354:	0d1b      	lsrs	r3, r3, #20
 800d356:	051b      	lsls	r3, r3, #20
 800d358:	2a00      	cmp	r2, #0
 800d35a:	d06a      	beq.n	800d432 <_strtod_l+0x8fa>
 800d35c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d360:	d867      	bhi.n	800d432 <_strtod_l+0x8fa>
 800d362:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d366:	f67f ae9d 	bls.w	800d0a4 <_strtod_l+0x56c>
 800d36a:	4b0a      	ldr	r3, [pc, #40]	@ (800d394 <_strtod_l+0x85c>)
 800d36c:	4650      	mov	r0, sl
 800d36e:	4659      	mov	r1, fp
 800d370:	2200      	movs	r2, #0
 800d372:	f7f3 f941 	bl	80005f8 <__aeabi_dmul>
 800d376:	4b08      	ldr	r3, [pc, #32]	@ (800d398 <_strtod_l+0x860>)
 800d378:	400b      	ands	r3, r1
 800d37a:	4682      	mov	sl, r0
 800d37c:	468b      	mov	fp, r1
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f47f ae08 	bne.w	800cf94 <_strtod_l+0x45c>
 800d384:	9a05      	ldr	r2, [sp, #20]
 800d386:	2322      	movs	r3, #34	@ 0x22
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	e603      	b.n	800cf94 <_strtod_l+0x45c>
 800d38c:	080290d8 	.word	0x080290d8
 800d390:	fffffc02 	.word	0xfffffc02
 800d394:	39500000 	.word	0x39500000
 800d398:	7ff00000 	.word	0x7ff00000
 800d39c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d3a0:	d165      	bne.n	800d46e <_strtod_l+0x936>
 800d3a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d3a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3a8:	b35a      	cbz	r2, 800d402 <_strtod_l+0x8ca>
 800d3aa:	4a9f      	ldr	r2, [pc, #636]	@ (800d628 <_strtod_l+0xaf0>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d12b      	bne.n	800d408 <_strtod_l+0x8d0>
 800d3b0:	9b08      	ldr	r3, [sp, #32]
 800d3b2:	4651      	mov	r1, sl
 800d3b4:	b303      	cbz	r3, 800d3f8 <_strtod_l+0x8c0>
 800d3b6:	4b9d      	ldr	r3, [pc, #628]	@ (800d62c <_strtod_l+0xaf4>)
 800d3b8:	465a      	mov	r2, fp
 800d3ba:	4013      	ands	r3, r2
 800d3bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c4:	d81b      	bhi.n	800d3fe <_strtod_l+0x8c6>
 800d3c6:	0d1b      	lsrs	r3, r3, #20
 800d3c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d3d0:	4299      	cmp	r1, r3
 800d3d2:	d119      	bne.n	800d408 <_strtod_l+0x8d0>
 800d3d4:	4b96      	ldr	r3, [pc, #600]	@ (800d630 <_strtod_l+0xaf8>)
 800d3d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d102      	bne.n	800d3e2 <_strtod_l+0x8aa>
 800d3dc:	3101      	adds	r1, #1
 800d3de:	f43f adce 	beq.w	800cf7e <_strtod_l+0x446>
 800d3e2:	4b92      	ldr	r3, [pc, #584]	@ (800d62c <_strtod_l+0xaf4>)
 800d3e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3e6:	401a      	ands	r2, r3
 800d3e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d3ec:	f04f 0a00 	mov.w	sl, #0
 800d3f0:	9b08      	ldr	r3, [sp, #32]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1b9      	bne.n	800d36a <_strtod_l+0x832>
 800d3f6:	e5cd      	b.n	800cf94 <_strtod_l+0x45c>
 800d3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3fc:	e7e8      	b.n	800d3d0 <_strtod_l+0x898>
 800d3fe:	4613      	mov	r3, r2
 800d400:	e7e6      	b.n	800d3d0 <_strtod_l+0x898>
 800d402:	ea53 030a 	orrs.w	r3, r3, sl
 800d406:	d0a2      	beq.n	800d34e <_strtod_l+0x816>
 800d408:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d40a:	b1db      	cbz	r3, 800d444 <_strtod_l+0x90c>
 800d40c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d40e:	4213      	tst	r3, r2
 800d410:	d0ee      	beq.n	800d3f0 <_strtod_l+0x8b8>
 800d412:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d414:	9a08      	ldr	r2, [sp, #32]
 800d416:	4650      	mov	r0, sl
 800d418:	4659      	mov	r1, fp
 800d41a:	b1bb      	cbz	r3, 800d44c <_strtod_l+0x914>
 800d41c:	f7ff fb6e 	bl	800cafc <sulp>
 800d420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d424:	ec53 2b10 	vmov	r2, r3, d0
 800d428:	f7f2 ff30 	bl	800028c <__adddf3>
 800d42c:	4682      	mov	sl, r0
 800d42e:	468b      	mov	fp, r1
 800d430:	e7de      	b.n	800d3f0 <_strtod_l+0x8b8>
 800d432:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d436:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d43a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d43e:	f04f 3aff 	mov.w	sl, #4294967295
 800d442:	e7d5      	b.n	800d3f0 <_strtod_l+0x8b8>
 800d444:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d446:	ea13 0f0a 	tst.w	r3, sl
 800d44a:	e7e1      	b.n	800d410 <_strtod_l+0x8d8>
 800d44c:	f7ff fb56 	bl	800cafc <sulp>
 800d450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d454:	ec53 2b10 	vmov	r2, r3, d0
 800d458:	f7f2 ff16 	bl	8000288 <__aeabi_dsub>
 800d45c:	2200      	movs	r2, #0
 800d45e:	2300      	movs	r3, #0
 800d460:	4682      	mov	sl, r0
 800d462:	468b      	mov	fp, r1
 800d464:	f7f3 fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 800d468:	2800      	cmp	r0, #0
 800d46a:	d0c1      	beq.n	800d3f0 <_strtod_l+0x8b8>
 800d46c:	e61a      	b.n	800d0a4 <_strtod_l+0x56c>
 800d46e:	4641      	mov	r1, r8
 800d470:	4620      	mov	r0, r4
 800d472:	f7ff facd 	bl	800ca10 <__ratio>
 800d476:	ec57 6b10 	vmov	r6, r7, d0
 800d47a:	2200      	movs	r2, #0
 800d47c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d480:	4630      	mov	r0, r6
 800d482:	4639      	mov	r1, r7
 800d484:	f7f3 fb34 	bl	8000af0 <__aeabi_dcmple>
 800d488:	2800      	cmp	r0, #0
 800d48a:	d06f      	beq.n	800d56c <_strtod_l+0xa34>
 800d48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d17a      	bne.n	800d588 <_strtod_l+0xa50>
 800d492:	f1ba 0f00 	cmp.w	sl, #0
 800d496:	d158      	bne.n	800d54a <_strtod_l+0xa12>
 800d498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d49a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d15a      	bne.n	800d558 <_strtod_l+0xa20>
 800d4a2:	4b64      	ldr	r3, [pc, #400]	@ (800d634 <_strtod_l+0xafc>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	4639      	mov	r1, r7
 800d4aa:	f7f3 fb17 	bl	8000adc <__aeabi_dcmplt>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d159      	bne.n	800d566 <_strtod_l+0xa2e>
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	4639      	mov	r1, r7
 800d4b6:	4b60      	ldr	r3, [pc, #384]	@ (800d638 <_strtod_l+0xb00>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f7f3 f89d 	bl	80005f8 <__aeabi_dmul>
 800d4be:	4606      	mov	r6, r0
 800d4c0:	460f      	mov	r7, r1
 800d4c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d4c6:	9606      	str	r6, [sp, #24]
 800d4c8:	9307      	str	r3, [sp, #28]
 800d4ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4ce:	4d57      	ldr	r5, [pc, #348]	@ (800d62c <_strtod_l+0xaf4>)
 800d4d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4d6:	401d      	ands	r5, r3
 800d4d8:	4b58      	ldr	r3, [pc, #352]	@ (800d63c <_strtod_l+0xb04>)
 800d4da:	429d      	cmp	r5, r3
 800d4dc:	f040 80b2 	bne.w	800d644 <_strtod_l+0xb0c>
 800d4e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d4e6:	ec4b ab10 	vmov	d0, sl, fp
 800d4ea:	f7ff f9c9 	bl	800c880 <__ulp>
 800d4ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4f2:	ec51 0b10 	vmov	r0, r1, d0
 800d4f6:	f7f3 f87f 	bl	80005f8 <__aeabi_dmul>
 800d4fa:	4652      	mov	r2, sl
 800d4fc:	465b      	mov	r3, fp
 800d4fe:	f7f2 fec5 	bl	800028c <__adddf3>
 800d502:	460b      	mov	r3, r1
 800d504:	4949      	ldr	r1, [pc, #292]	@ (800d62c <_strtod_l+0xaf4>)
 800d506:	4a4e      	ldr	r2, [pc, #312]	@ (800d640 <_strtod_l+0xb08>)
 800d508:	4019      	ands	r1, r3
 800d50a:	4291      	cmp	r1, r2
 800d50c:	4682      	mov	sl, r0
 800d50e:	d942      	bls.n	800d596 <_strtod_l+0xa5e>
 800d510:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d512:	4b47      	ldr	r3, [pc, #284]	@ (800d630 <_strtod_l+0xaf8>)
 800d514:	429a      	cmp	r2, r3
 800d516:	d103      	bne.n	800d520 <_strtod_l+0x9e8>
 800d518:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d51a:	3301      	adds	r3, #1
 800d51c:	f43f ad2f 	beq.w	800cf7e <_strtod_l+0x446>
 800d520:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d630 <_strtod_l+0xaf8>
 800d524:	f04f 3aff 	mov.w	sl, #4294967295
 800d528:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d52a:	9805      	ldr	r0, [sp, #20]
 800d52c:	f7fe fe7c 	bl	800c228 <_Bfree>
 800d530:	9805      	ldr	r0, [sp, #20]
 800d532:	4649      	mov	r1, r9
 800d534:	f7fe fe78 	bl	800c228 <_Bfree>
 800d538:	9805      	ldr	r0, [sp, #20]
 800d53a:	4641      	mov	r1, r8
 800d53c:	f7fe fe74 	bl	800c228 <_Bfree>
 800d540:	9805      	ldr	r0, [sp, #20]
 800d542:	4621      	mov	r1, r4
 800d544:	f7fe fe70 	bl	800c228 <_Bfree>
 800d548:	e619      	b.n	800d17e <_strtod_l+0x646>
 800d54a:	f1ba 0f01 	cmp.w	sl, #1
 800d54e:	d103      	bne.n	800d558 <_strtod_l+0xa20>
 800d550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d552:	2b00      	cmp	r3, #0
 800d554:	f43f ada6 	beq.w	800d0a4 <_strtod_l+0x56c>
 800d558:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d608 <_strtod_l+0xad0>
 800d55c:	4f35      	ldr	r7, [pc, #212]	@ (800d634 <_strtod_l+0xafc>)
 800d55e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d562:	2600      	movs	r6, #0
 800d564:	e7b1      	b.n	800d4ca <_strtod_l+0x992>
 800d566:	4f34      	ldr	r7, [pc, #208]	@ (800d638 <_strtod_l+0xb00>)
 800d568:	2600      	movs	r6, #0
 800d56a:	e7aa      	b.n	800d4c2 <_strtod_l+0x98a>
 800d56c:	4b32      	ldr	r3, [pc, #200]	@ (800d638 <_strtod_l+0xb00>)
 800d56e:	4630      	mov	r0, r6
 800d570:	4639      	mov	r1, r7
 800d572:	2200      	movs	r2, #0
 800d574:	f7f3 f840 	bl	80005f8 <__aeabi_dmul>
 800d578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d57a:	4606      	mov	r6, r0
 800d57c:	460f      	mov	r7, r1
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d09f      	beq.n	800d4c2 <_strtod_l+0x98a>
 800d582:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d586:	e7a0      	b.n	800d4ca <_strtod_l+0x992>
 800d588:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d610 <_strtod_l+0xad8>
 800d58c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d590:	ec57 6b17 	vmov	r6, r7, d7
 800d594:	e799      	b.n	800d4ca <_strtod_l+0x992>
 800d596:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d59a:	9b08      	ldr	r3, [sp, #32]
 800d59c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1c1      	bne.n	800d528 <_strtod_l+0x9f0>
 800d5a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d5a8:	0d1b      	lsrs	r3, r3, #20
 800d5aa:	051b      	lsls	r3, r3, #20
 800d5ac:	429d      	cmp	r5, r3
 800d5ae:	d1bb      	bne.n	800d528 <_strtod_l+0x9f0>
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	f7f3 fb80 	bl	8000cb8 <__aeabi_d2lz>
 800d5b8:	f7f2 fff0 	bl	800059c <__aeabi_l2d>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	460b      	mov	r3, r1
 800d5c0:	4630      	mov	r0, r6
 800d5c2:	4639      	mov	r1, r7
 800d5c4:	f7f2 fe60 	bl	8000288 <__aeabi_dsub>
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d5d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5d6:	ea46 060a 	orr.w	r6, r6, sl
 800d5da:	431e      	orrs	r6, r3
 800d5dc:	d06f      	beq.n	800d6be <_strtod_l+0xb86>
 800d5de:	a30e      	add	r3, pc, #56	@ (adr r3, 800d618 <_strtod_l+0xae0>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	f7f3 fa7a 	bl	8000adc <__aeabi_dcmplt>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	f47f acd3 	bne.w	800cf94 <_strtod_l+0x45c>
 800d5ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800d620 <_strtod_l+0xae8>)
 800d5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5f8:	f7f3 fa8e 	bl	8000b18 <__aeabi_dcmpgt>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d093      	beq.n	800d528 <_strtod_l+0x9f0>
 800d600:	e4c8      	b.n	800cf94 <_strtod_l+0x45c>
 800d602:	bf00      	nop
 800d604:	f3af 8000 	nop.w
 800d608:	00000000 	.word	0x00000000
 800d60c:	bff00000 	.word	0xbff00000
 800d610:	00000000 	.word	0x00000000
 800d614:	3ff00000 	.word	0x3ff00000
 800d618:	94a03595 	.word	0x94a03595
 800d61c:	3fdfffff 	.word	0x3fdfffff
 800d620:	35afe535 	.word	0x35afe535
 800d624:	3fe00000 	.word	0x3fe00000
 800d628:	000fffff 	.word	0x000fffff
 800d62c:	7ff00000 	.word	0x7ff00000
 800d630:	7fefffff 	.word	0x7fefffff
 800d634:	3ff00000 	.word	0x3ff00000
 800d638:	3fe00000 	.word	0x3fe00000
 800d63c:	7fe00000 	.word	0x7fe00000
 800d640:	7c9fffff 	.word	0x7c9fffff
 800d644:	9b08      	ldr	r3, [sp, #32]
 800d646:	b323      	cbz	r3, 800d692 <_strtod_l+0xb5a>
 800d648:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d64c:	d821      	bhi.n	800d692 <_strtod_l+0xb5a>
 800d64e:	a328      	add	r3, pc, #160	@ (adr r3, 800d6f0 <_strtod_l+0xbb8>)
 800d650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d654:	4630      	mov	r0, r6
 800d656:	4639      	mov	r1, r7
 800d658:	f7f3 fa4a 	bl	8000af0 <__aeabi_dcmple>
 800d65c:	b1a0      	cbz	r0, 800d688 <_strtod_l+0xb50>
 800d65e:	4639      	mov	r1, r7
 800d660:	4630      	mov	r0, r6
 800d662:	f7f3 faa1 	bl	8000ba8 <__aeabi_d2uiz>
 800d666:	2801      	cmp	r0, #1
 800d668:	bf38      	it	cc
 800d66a:	2001      	movcc	r0, #1
 800d66c:	f7f2 ff4a 	bl	8000504 <__aeabi_ui2d>
 800d670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d672:	4606      	mov	r6, r0
 800d674:	460f      	mov	r7, r1
 800d676:	b9fb      	cbnz	r3, 800d6b8 <_strtod_l+0xb80>
 800d678:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d67c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d67e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d680:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d684:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d688:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d68a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d68e:	1b5b      	subs	r3, r3, r5
 800d690:	9311      	str	r3, [sp, #68]	@ 0x44
 800d692:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d696:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d69a:	f7ff f8f1 	bl	800c880 <__ulp>
 800d69e:	4650      	mov	r0, sl
 800d6a0:	ec53 2b10 	vmov	r2, r3, d0
 800d6a4:	4659      	mov	r1, fp
 800d6a6:	f7f2 ffa7 	bl	80005f8 <__aeabi_dmul>
 800d6aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d6ae:	f7f2 fded 	bl	800028c <__adddf3>
 800d6b2:	4682      	mov	sl, r0
 800d6b4:	468b      	mov	fp, r1
 800d6b6:	e770      	b.n	800d59a <_strtod_l+0xa62>
 800d6b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d6bc:	e7e0      	b.n	800d680 <_strtod_l+0xb48>
 800d6be:	a30e      	add	r3, pc, #56	@ (adr r3, 800d6f8 <_strtod_l+0xbc0>)
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	f7f3 fa0a 	bl	8000adc <__aeabi_dcmplt>
 800d6c8:	e798      	b.n	800d5fc <_strtod_l+0xac4>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	930e      	str	r3, [sp, #56]	@ 0x38
 800d6ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d6d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6d2:	6013      	str	r3, [r2, #0]
 800d6d4:	f7ff ba6d 	b.w	800cbb2 <_strtod_l+0x7a>
 800d6d8:	2a65      	cmp	r2, #101	@ 0x65
 800d6da:	f43f ab68 	beq.w	800cdae <_strtod_l+0x276>
 800d6de:	2a45      	cmp	r2, #69	@ 0x45
 800d6e0:	f43f ab65 	beq.w	800cdae <_strtod_l+0x276>
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	f7ff bba0 	b.w	800ce2a <_strtod_l+0x2f2>
 800d6ea:	bf00      	nop
 800d6ec:	f3af 8000 	nop.w
 800d6f0:	ffc00000 	.word	0xffc00000
 800d6f4:	41dfffff 	.word	0x41dfffff
 800d6f8:	94a03595 	.word	0x94a03595
 800d6fc:	3fcfffff 	.word	0x3fcfffff

0800d700 <_strtod_r>:
 800d700:	4b01      	ldr	r3, [pc, #4]	@ (800d708 <_strtod_r+0x8>)
 800d702:	f7ff ba19 	b.w	800cb38 <_strtod_l>
 800d706:	bf00      	nop
 800d708:	20000158 	.word	0x20000158

0800d70c <_strtol_l.isra.0>:
 800d70c:	2b24      	cmp	r3, #36	@ 0x24
 800d70e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d712:	4686      	mov	lr, r0
 800d714:	4690      	mov	r8, r2
 800d716:	d801      	bhi.n	800d71c <_strtol_l.isra.0+0x10>
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d106      	bne.n	800d72a <_strtol_l.isra.0+0x1e>
 800d71c:	f7fd fdb6 	bl	800b28c <__errno>
 800d720:	2316      	movs	r3, #22
 800d722:	6003      	str	r3, [r0, #0]
 800d724:	2000      	movs	r0, #0
 800d726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d72a:	4834      	ldr	r0, [pc, #208]	@ (800d7fc <_strtol_l.isra.0+0xf0>)
 800d72c:	460d      	mov	r5, r1
 800d72e:	462a      	mov	r2, r5
 800d730:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d734:	5d06      	ldrb	r6, [r0, r4]
 800d736:	f016 0608 	ands.w	r6, r6, #8
 800d73a:	d1f8      	bne.n	800d72e <_strtol_l.isra.0+0x22>
 800d73c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d73e:	d110      	bne.n	800d762 <_strtol_l.isra.0+0x56>
 800d740:	782c      	ldrb	r4, [r5, #0]
 800d742:	2601      	movs	r6, #1
 800d744:	1c95      	adds	r5, r2, #2
 800d746:	f033 0210 	bics.w	r2, r3, #16
 800d74a:	d115      	bne.n	800d778 <_strtol_l.isra.0+0x6c>
 800d74c:	2c30      	cmp	r4, #48	@ 0x30
 800d74e:	d10d      	bne.n	800d76c <_strtol_l.isra.0+0x60>
 800d750:	782a      	ldrb	r2, [r5, #0]
 800d752:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d756:	2a58      	cmp	r2, #88	@ 0x58
 800d758:	d108      	bne.n	800d76c <_strtol_l.isra.0+0x60>
 800d75a:	786c      	ldrb	r4, [r5, #1]
 800d75c:	3502      	adds	r5, #2
 800d75e:	2310      	movs	r3, #16
 800d760:	e00a      	b.n	800d778 <_strtol_l.isra.0+0x6c>
 800d762:	2c2b      	cmp	r4, #43	@ 0x2b
 800d764:	bf04      	itt	eq
 800d766:	782c      	ldrbeq	r4, [r5, #0]
 800d768:	1c95      	addeq	r5, r2, #2
 800d76a:	e7ec      	b.n	800d746 <_strtol_l.isra.0+0x3a>
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1f6      	bne.n	800d75e <_strtol_l.isra.0+0x52>
 800d770:	2c30      	cmp	r4, #48	@ 0x30
 800d772:	bf14      	ite	ne
 800d774:	230a      	movne	r3, #10
 800d776:	2308      	moveq	r3, #8
 800d778:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d77c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d780:	2200      	movs	r2, #0
 800d782:	fbbc f9f3 	udiv	r9, ip, r3
 800d786:	4610      	mov	r0, r2
 800d788:	fb03 ca19 	mls	sl, r3, r9, ip
 800d78c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d790:	2f09      	cmp	r7, #9
 800d792:	d80f      	bhi.n	800d7b4 <_strtol_l.isra.0+0xa8>
 800d794:	463c      	mov	r4, r7
 800d796:	42a3      	cmp	r3, r4
 800d798:	dd1b      	ble.n	800d7d2 <_strtol_l.isra.0+0xc6>
 800d79a:	1c57      	adds	r7, r2, #1
 800d79c:	d007      	beq.n	800d7ae <_strtol_l.isra.0+0xa2>
 800d79e:	4581      	cmp	r9, r0
 800d7a0:	d314      	bcc.n	800d7cc <_strtol_l.isra.0+0xc0>
 800d7a2:	d101      	bne.n	800d7a8 <_strtol_l.isra.0+0x9c>
 800d7a4:	45a2      	cmp	sl, r4
 800d7a6:	db11      	blt.n	800d7cc <_strtol_l.isra.0+0xc0>
 800d7a8:	fb00 4003 	mla	r0, r0, r3, r4
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7b2:	e7eb      	b.n	800d78c <_strtol_l.isra.0+0x80>
 800d7b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d7b8:	2f19      	cmp	r7, #25
 800d7ba:	d801      	bhi.n	800d7c0 <_strtol_l.isra.0+0xb4>
 800d7bc:	3c37      	subs	r4, #55	@ 0x37
 800d7be:	e7ea      	b.n	800d796 <_strtol_l.isra.0+0x8a>
 800d7c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d7c4:	2f19      	cmp	r7, #25
 800d7c6:	d804      	bhi.n	800d7d2 <_strtol_l.isra.0+0xc6>
 800d7c8:	3c57      	subs	r4, #87	@ 0x57
 800d7ca:	e7e4      	b.n	800d796 <_strtol_l.isra.0+0x8a>
 800d7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d0:	e7ed      	b.n	800d7ae <_strtol_l.isra.0+0xa2>
 800d7d2:	1c53      	adds	r3, r2, #1
 800d7d4:	d108      	bne.n	800d7e8 <_strtol_l.isra.0+0xdc>
 800d7d6:	2322      	movs	r3, #34	@ 0x22
 800d7d8:	f8ce 3000 	str.w	r3, [lr]
 800d7dc:	4660      	mov	r0, ip
 800d7de:	f1b8 0f00 	cmp.w	r8, #0
 800d7e2:	d0a0      	beq.n	800d726 <_strtol_l.isra.0+0x1a>
 800d7e4:	1e69      	subs	r1, r5, #1
 800d7e6:	e006      	b.n	800d7f6 <_strtol_l.isra.0+0xea>
 800d7e8:	b106      	cbz	r6, 800d7ec <_strtol_l.isra.0+0xe0>
 800d7ea:	4240      	negs	r0, r0
 800d7ec:	f1b8 0f00 	cmp.w	r8, #0
 800d7f0:	d099      	beq.n	800d726 <_strtol_l.isra.0+0x1a>
 800d7f2:	2a00      	cmp	r2, #0
 800d7f4:	d1f6      	bne.n	800d7e4 <_strtol_l.isra.0+0xd8>
 800d7f6:	f8c8 1000 	str.w	r1, [r8]
 800d7fa:	e794      	b.n	800d726 <_strtol_l.isra.0+0x1a>
 800d7fc:	08029101 	.word	0x08029101

0800d800 <_strtol_r>:
 800d800:	f7ff bf84 	b.w	800d70c <_strtol_l.isra.0>

0800d804 <__ssputs_r>:
 800d804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d808:	688e      	ldr	r6, [r1, #8]
 800d80a:	461f      	mov	r7, r3
 800d80c:	42be      	cmp	r6, r7
 800d80e:	680b      	ldr	r3, [r1, #0]
 800d810:	4682      	mov	sl, r0
 800d812:	460c      	mov	r4, r1
 800d814:	4690      	mov	r8, r2
 800d816:	d82d      	bhi.n	800d874 <__ssputs_r+0x70>
 800d818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d81c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d820:	d026      	beq.n	800d870 <__ssputs_r+0x6c>
 800d822:	6965      	ldr	r5, [r4, #20]
 800d824:	6909      	ldr	r1, [r1, #16]
 800d826:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d82a:	eba3 0901 	sub.w	r9, r3, r1
 800d82e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d832:	1c7b      	adds	r3, r7, #1
 800d834:	444b      	add	r3, r9
 800d836:	106d      	asrs	r5, r5, #1
 800d838:	429d      	cmp	r5, r3
 800d83a:	bf38      	it	cc
 800d83c:	461d      	movcc	r5, r3
 800d83e:	0553      	lsls	r3, r2, #21
 800d840:	d527      	bpl.n	800d892 <__ssputs_r+0x8e>
 800d842:	4629      	mov	r1, r5
 800d844:	f7fe fc24 	bl	800c090 <_malloc_r>
 800d848:	4606      	mov	r6, r0
 800d84a:	b360      	cbz	r0, 800d8a6 <__ssputs_r+0xa2>
 800d84c:	6921      	ldr	r1, [r4, #16]
 800d84e:	464a      	mov	r2, r9
 800d850:	f000 fa18 	bl	800dc84 <memcpy>
 800d854:	89a3      	ldrh	r3, [r4, #12]
 800d856:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d85e:	81a3      	strh	r3, [r4, #12]
 800d860:	6126      	str	r6, [r4, #16]
 800d862:	6165      	str	r5, [r4, #20]
 800d864:	444e      	add	r6, r9
 800d866:	eba5 0509 	sub.w	r5, r5, r9
 800d86a:	6026      	str	r6, [r4, #0]
 800d86c:	60a5      	str	r5, [r4, #8]
 800d86e:	463e      	mov	r6, r7
 800d870:	42be      	cmp	r6, r7
 800d872:	d900      	bls.n	800d876 <__ssputs_r+0x72>
 800d874:	463e      	mov	r6, r7
 800d876:	6820      	ldr	r0, [r4, #0]
 800d878:	4632      	mov	r2, r6
 800d87a:	4641      	mov	r1, r8
 800d87c:	f000 f9c6 	bl	800dc0c <memmove>
 800d880:	68a3      	ldr	r3, [r4, #8]
 800d882:	1b9b      	subs	r3, r3, r6
 800d884:	60a3      	str	r3, [r4, #8]
 800d886:	6823      	ldr	r3, [r4, #0]
 800d888:	4433      	add	r3, r6
 800d88a:	6023      	str	r3, [r4, #0]
 800d88c:	2000      	movs	r0, #0
 800d88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d892:	462a      	mov	r2, r5
 800d894:	f000 fd89 	bl	800e3aa <_realloc_r>
 800d898:	4606      	mov	r6, r0
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d1e0      	bne.n	800d860 <__ssputs_r+0x5c>
 800d89e:	6921      	ldr	r1, [r4, #16]
 800d8a0:	4650      	mov	r0, sl
 800d8a2:	f7fe fb81 	bl	800bfa8 <_free_r>
 800d8a6:	230c      	movs	r3, #12
 800d8a8:	f8ca 3000 	str.w	r3, [sl]
 800d8ac:	89a3      	ldrh	r3, [r4, #12]
 800d8ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8b2:	81a3      	strh	r3, [r4, #12]
 800d8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b8:	e7e9      	b.n	800d88e <__ssputs_r+0x8a>
	...

0800d8bc <_svfiprintf_r>:
 800d8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c0:	4698      	mov	r8, r3
 800d8c2:	898b      	ldrh	r3, [r1, #12]
 800d8c4:	061b      	lsls	r3, r3, #24
 800d8c6:	b09d      	sub	sp, #116	@ 0x74
 800d8c8:	4607      	mov	r7, r0
 800d8ca:	460d      	mov	r5, r1
 800d8cc:	4614      	mov	r4, r2
 800d8ce:	d510      	bpl.n	800d8f2 <_svfiprintf_r+0x36>
 800d8d0:	690b      	ldr	r3, [r1, #16]
 800d8d2:	b973      	cbnz	r3, 800d8f2 <_svfiprintf_r+0x36>
 800d8d4:	2140      	movs	r1, #64	@ 0x40
 800d8d6:	f7fe fbdb 	bl	800c090 <_malloc_r>
 800d8da:	6028      	str	r0, [r5, #0]
 800d8dc:	6128      	str	r0, [r5, #16]
 800d8de:	b930      	cbnz	r0, 800d8ee <_svfiprintf_r+0x32>
 800d8e0:	230c      	movs	r3, #12
 800d8e2:	603b      	str	r3, [r7, #0]
 800d8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e8:	b01d      	add	sp, #116	@ 0x74
 800d8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ee:	2340      	movs	r3, #64	@ 0x40
 800d8f0:	616b      	str	r3, [r5, #20]
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8f6:	2320      	movs	r3, #32
 800d8f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d900:	2330      	movs	r3, #48	@ 0x30
 800d902:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800daa0 <_svfiprintf_r+0x1e4>
 800d906:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d90a:	f04f 0901 	mov.w	r9, #1
 800d90e:	4623      	mov	r3, r4
 800d910:	469a      	mov	sl, r3
 800d912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d916:	b10a      	cbz	r2, 800d91c <_svfiprintf_r+0x60>
 800d918:	2a25      	cmp	r2, #37	@ 0x25
 800d91a:	d1f9      	bne.n	800d910 <_svfiprintf_r+0x54>
 800d91c:	ebba 0b04 	subs.w	fp, sl, r4
 800d920:	d00b      	beq.n	800d93a <_svfiprintf_r+0x7e>
 800d922:	465b      	mov	r3, fp
 800d924:	4622      	mov	r2, r4
 800d926:	4629      	mov	r1, r5
 800d928:	4638      	mov	r0, r7
 800d92a:	f7ff ff6b 	bl	800d804 <__ssputs_r>
 800d92e:	3001      	adds	r0, #1
 800d930:	f000 80a7 	beq.w	800da82 <_svfiprintf_r+0x1c6>
 800d934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d936:	445a      	add	r2, fp
 800d938:	9209      	str	r2, [sp, #36]	@ 0x24
 800d93a:	f89a 3000 	ldrb.w	r3, [sl]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f000 809f 	beq.w	800da82 <_svfiprintf_r+0x1c6>
 800d944:	2300      	movs	r3, #0
 800d946:	f04f 32ff 	mov.w	r2, #4294967295
 800d94a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d94e:	f10a 0a01 	add.w	sl, sl, #1
 800d952:	9304      	str	r3, [sp, #16]
 800d954:	9307      	str	r3, [sp, #28]
 800d956:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d95a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d95c:	4654      	mov	r4, sl
 800d95e:	2205      	movs	r2, #5
 800d960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d964:	484e      	ldr	r0, [pc, #312]	@ (800daa0 <_svfiprintf_r+0x1e4>)
 800d966:	f7f2 fc33 	bl	80001d0 <memchr>
 800d96a:	9a04      	ldr	r2, [sp, #16]
 800d96c:	b9d8      	cbnz	r0, 800d9a6 <_svfiprintf_r+0xea>
 800d96e:	06d0      	lsls	r0, r2, #27
 800d970:	bf44      	itt	mi
 800d972:	2320      	movmi	r3, #32
 800d974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d978:	0711      	lsls	r1, r2, #28
 800d97a:	bf44      	itt	mi
 800d97c:	232b      	movmi	r3, #43	@ 0x2b
 800d97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d982:	f89a 3000 	ldrb.w	r3, [sl]
 800d986:	2b2a      	cmp	r3, #42	@ 0x2a
 800d988:	d015      	beq.n	800d9b6 <_svfiprintf_r+0xfa>
 800d98a:	9a07      	ldr	r2, [sp, #28]
 800d98c:	4654      	mov	r4, sl
 800d98e:	2000      	movs	r0, #0
 800d990:	f04f 0c0a 	mov.w	ip, #10
 800d994:	4621      	mov	r1, r4
 800d996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d99a:	3b30      	subs	r3, #48	@ 0x30
 800d99c:	2b09      	cmp	r3, #9
 800d99e:	d94b      	bls.n	800da38 <_svfiprintf_r+0x17c>
 800d9a0:	b1b0      	cbz	r0, 800d9d0 <_svfiprintf_r+0x114>
 800d9a2:	9207      	str	r2, [sp, #28]
 800d9a4:	e014      	b.n	800d9d0 <_svfiprintf_r+0x114>
 800d9a6:	eba0 0308 	sub.w	r3, r0, r8
 800d9aa:	fa09 f303 	lsl.w	r3, r9, r3
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	9304      	str	r3, [sp, #16]
 800d9b2:	46a2      	mov	sl, r4
 800d9b4:	e7d2      	b.n	800d95c <_svfiprintf_r+0xa0>
 800d9b6:	9b03      	ldr	r3, [sp, #12]
 800d9b8:	1d19      	adds	r1, r3, #4
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	9103      	str	r1, [sp, #12]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	bfbb      	ittet	lt
 800d9c2:	425b      	neglt	r3, r3
 800d9c4:	f042 0202 	orrlt.w	r2, r2, #2
 800d9c8:	9307      	strge	r3, [sp, #28]
 800d9ca:	9307      	strlt	r3, [sp, #28]
 800d9cc:	bfb8      	it	lt
 800d9ce:	9204      	strlt	r2, [sp, #16]
 800d9d0:	7823      	ldrb	r3, [r4, #0]
 800d9d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9d4:	d10a      	bne.n	800d9ec <_svfiprintf_r+0x130>
 800d9d6:	7863      	ldrb	r3, [r4, #1]
 800d9d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9da:	d132      	bne.n	800da42 <_svfiprintf_r+0x186>
 800d9dc:	9b03      	ldr	r3, [sp, #12]
 800d9de:	1d1a      	adds	r2, r3, #4
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	9203      	str	r2, [sp, #12]
 800d9e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9e8:	3402      	adds	r4, #2
 800d9ea:	9305      	str	r3, [sp, #20]
 800d9ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dab0 <_svfiprintf_r+0x1f4>
 800d9f0:	7821      	ldrb	r1, [r4, #0]
 800d9f2:	2203      	movs	r2, #3
 800d9f4:	4650      	mov	r0, sl
 800d9f6:	f7f2 fbeb 	bl	80001d0 <memchr>
 800d9fa:	b138      	cbz	r0, 800da0c <_svfiprintf_r+0x150>
 800d9fc:	9b04      	ldr	r3, [sp, #16]
 800d9fe:	eba0 000a 	sub.w	r0, r0, sl
 800da02:	2240      	movs	r2, #64	@ 0x40
 800da04:	4082      	lsls	r2, r0
 800da06:	4313      	orrs	r3, r2
 800da08:	3401      	adds	r4, #1
 800da0a:	9304      	str	r3, [sp, #16]
 800da0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da10:	4824      	ldr	r0, [pc, #144]	@ (800daa4 <_svfiprintf_r+0x1e8>)
 800da12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da16:	2206      	movs	r2, #6
 800da18:	f7f2 fbda 	bl	80001d0 <memchr>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d036      	beq.n	800da8e <_svfiprintf_r+0x1d2>
 800da20:	4b21      	ldr	r3, [pc, #132]	@ (800daa8 <_svfiprintf_r+0x1ec>)
 800da22:	bb1b      	cbnz	r3, 800da6c <_svfiprintf_r+0x1b0>
 800da24:	9b03      	ldr	r3, [sp, #12]
 800da26:	3307      	adds	r3, #7
 800da28:	f023 0307 	bic.w	r3, r3, #7
 800da2c:	3308      	adds	r3, #8
 800da2e:	9303      	str	r3, [sp, #12]
 800da30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da32:	4433      	add	r3, r6
 800da34:	9309      	str	r3, [sp, #36]	@ 0x24
 800da36:	e76a      	b.n	800d90e <_svfiprintf_r+0x52>
 800da38:	fb0c 3202 	mla	r2, ip, r2, r3
 800da3c:	460c      	mov	r4, r1
 800da3e:	2001      	movs	r0, #1
 800da40:	e7a8      	b.n	800d994 <_svfiprintf_r+0xd8>
 800da42:	2300      	movs	r3, #0
 800da44:	3401      	adds	r4, #1
 800da46:	9305      	str	r3, [sp, #20]
 800da48:	4619      	mov	r1, r3
 800da4a:	f04f 0c0a 	mov.w	ip, #10
 800da4e:	4620      	mov	r0, r4
 800da50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da54:	3a30      	subs	r2, #48	@ 0x30
 800da56:	2a09      	cmp	r2, #9
 800da58:	d903      	bls.n	800da62 <_svfiprintf_r+0x1a6>
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0c6      	beq.n	800d9ec <_svfiprintf_r+0x130>
 800da5e:	9105      	str	r1, [sp, #20]
 800da60:	e7c4      	b.n	800d9ec <_svfiprintf_r+0x130>
 800da62:	fb0c 2101 	mla	r1, ip, r1, r2
 800da66:	4604      	mov	r4, r0
 800da68:	2301      	movs	r3, #1
 800da6a:	e7f0      	b.n	800da4e <_svfiprintf_r+0x192>
 800da6c:	ab03      	add	r3, sp, #12
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	462a      	mov	r2, r5
 800da72:	4b0e      	ldr	r3, [pc, #56]	@ (800daac <_svfiprintf_r+0x1f0>)
 800da74:	a904      	add	r1, sp, #16
 800da76:	4638      	mov	r0, r7
 800da78:	f7fc fc82 	bl	800a380 <_printf_float>
 800da7c:	1c42      	adds	r2, r0, #1
 800da7e:	4606      	mov	r6, r0
 800da80:	d1d6      	bne.n	800da30 <_svfiprintf_r+0x174>
 800da82:	89ab      	ldrh	r3, [r5, #12]
 800da84:	065b      	lsls	r3, r3, #25
 800da86:	f53f af2d 	bmi.w	800d8e4 <_svfiprintf_r+0x28>
 800da8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da8c:	e72c      	b.n	800d8e8 <_svfiprintf_r+0x2c>
 800da8e:	ab03      	add	r3, sp, #12
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	462a      	mov	r2, r5
 800da94:	4b05      	ldr	r3, [pc, #20]	@ (800daac <_svfiprintf_r+0x1f0>)
 800da96:	a904      	add	r1, sp, #16
 800da98:	4638      	mov	r0, r7
 800da9a:	f7fc ff09 	bl	800a8b0 <_printf_i>
 800da9e:	e7ed      	b.n	800da7c <_svfiprintf_r+0x1c0>
 800daa0:	08028efd 	.word	0x08028efd
 800daa4:	08028f07 	.word	0x08028f07
 800daa8:	0800a381 	.word	0x0800a381
 800daac:	0800d805 	.word	0x0800d805
 800dab0:	08028f03 	.word	0x08028f03

0800dab4 <__sflush_r>:
 800dab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dabc:	0716      	lsls	r6, r2, #28
 800dabe:	4605      	mov	r5, r0
 800dac0:	460c      	mov	r4, r1
 800dac2:	d454      	bmi.n	800db6e <__sflush_r+0xba>
 800dac4:	684b      	ldr	r3, [r1, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	dc02      	bgt.n	800dad0 <__sflush_r+0x1c>
 800daca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dacc:	2b00      	cmp	r3, #0
 800dace:	dd48      	ble.n	800db62 <__sflush_r+0xae>
 800dad0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dad2:	2e00      	cmp	r6, #0
 800dad4:	d045      	beq.n	800db62 <__sflush_r+0xae>
 800dad6:	2300      	movs	r3, #0
 800dad8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dadc:	682f      	ldr	r7, [r5, #0]
 800dade:	6a21      	ldr	r1, [r4, #32]
 800dae0:	602b      	str	r3, [r5, #0]
 800dae2:	d030      	beq.n	800db46 <__sflush_r+0x92>
 800dae4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	0759      	lsls	r1, r3, #29
 800daea:	d505      	bpl.n	800daf8 <__sflush_r+0x44>
 800daec:	6863      	ldr	r3, [r4, #4]
 800daee:	1ad2      	subs	r2, r2, r3
 800daf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800daf2:	b10b      	cbz	r3, 800daf8 <__sflush_r+0x44>
 800daf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800daf6:	1ad2      	subs	r2, r2, r3
 800daf8:	2300      	movs	r3, #0
 800dafa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dafc:	6a21      	ldr	r1, [r4, #32]
 800dafe:	4628      	mov	r0, r5
 800db00:	47b0      	blx	r6
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	89a3      	ldrh	r3, [r4, #12]
 800db06:	d106      	bne.n	800db16 <__sflush_r+0x62>
 800db08:	6829      	ldr	r1, [r5, #0]
 800db0a:	291d      	cmp	r1, #29
 800db0c:	d82b      	bhi.n	800db66 <__sflush_r+0xb2>
 800db0e:	4a2a      	ldr	r2, [pc, #168]	@ (800dbb8 <__sflush_r+0x104>)
 800db10:	40ca      	lsrs	r2, r1
 800db12:	07d6      	lsls	r6, r2, #31
 800db14:	d527      	bpl.n	800db66 <__sflush_r+0xb2>
 800db16:	2200      	movs	r2, #0
 800db18:	6062      	str	r2, [r4, #4]
 800db1a:	04d9      	lsls	r1, r3, #19
 800db1c:	6922      	ldr	r2, [r4, #16]
 800db1e:	6022      	str	r2, [r4, #0]
 800db20:	d504      	bpl.n	800db2c <__sflush_r+0x78>
 800db22:	1c42      	adds	r2, r0, #1
 800db24:	d101      	bne.n	800db2a <__sflush_r+0x76>
 800db26:	682b      	ldr	r3, [r5, #0]
 800db28:	b903      	cbnz	r3, 800db2c <__sflush_r+0x78>
 800db2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800db2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db2e:	602f      	str	r7, [r5, #0]
 800db30:	b1b9      	cbz	r1, 800db62 <__sflush_r+0xae>
 800db32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db36:	4299      	cmp	r1, r3
 800db38:	d002      	beq.n	800db40 <__sflush_r+0x8c>
 800db3a:	4628      	mov	r0, r5
 800db3c:	f7fe fa34 	bl	800bfa8 <_free_r>
 800db40:	2300      	movs	r3, #0
 800db42:	6363      	str	r3, [r4, #52]	@ 0x34
 800db44:	e00d      	b.n	800db62 <__sflush_r+0xae>
 800db46:	2301      	movs	r3, #1
 800db48:	4628      	mov	r0, r5
 800db4a:	47b0      	blx	r6
 800db4c:	4602      	mov	r2, r0
 800db4e:	1c50      	adds	r0, r2, #1
 800db50:	d1c9      	bne.n	800dae6 <__sflush_r+0x32>
 800db52:	682b      	ldr	r3, [r5, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d0c6      	beq.n	800dae6 <__sflush_r+0x32>
 800db58:	2b1d      	cmp	r3, #29
 800db5a:	d001      	beq.n	800db60 <__sflush_r+0xac>
 800db5c:	2b16      	cmp	r3, #22
 800db5e:	d11e      	bne.n	800db9e <__sflush_r+0xea>
 800db60:	602f      	str	r7, [r5, #0]
 800db62:	2000      	movs	r0, #0
 800db64:	e022      	b.n	800dbac <__sflush_r+0xf8>
 800db66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db6a:	b21b      	sxth	r3, r3
 800db6c:	e01b      	b.n	800dba6 <__sflush_r+0xf2>
 800db6e:	690f      	ldr	r7, [r1, #16]
 800db70:	2f00      	cmp	r7, #0
 800db72:	d0f6      	beq.n	800db62 <__sflush_r+0xae>
 800db74:	0793      	lsls	r3, r2, #30
 800db76:	680e      	ldr	r6, [r1, #0]
 800db78:	bf08      	it	eq
 800db7a:	694b      	ldreq	r3, [r1, #20]
 800db7c:	600f      	str	r7, [r1, #0]
 800db7e:	bf18      	it	ne
 800db80:	2300      	movne	r3, #0
 800db82:	eba6 0807 	sub.w	r8, r6, r7
 800db86:	608b      	str	r3, [r1, #8]
 800db88:	f1b8 0f00 	cmp.w	r8, #0
 800db8c:	dde9      	ble.n	800db62 <__sflush_r+0xae>
 800db8e:	6a21      	ldr	r1, [r4, #32]
 800db90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800db92:	4643      	mov	r3, r8
 800db94:	463a      	mov	r2, r7
 800db96:	4628      	mov	r0, r5
 800db98:	47b0      	blx	r6
 800db9a:	2800      	cmp	r0, #0
 800db9c:	dc08      	bgt.n	800dbb0 <__sflush_r+0xfc>
 800db9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dba6:	81a3      	strh	r3, [r4, #12]
 800dba8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb0:	4407      	add	r7, r0
 800dbb2:	eba8 0800 	sub.w	r8, r8, r0
 800dbb6:	e7e7      	b.n	800db88 <__sflush_r+0xd4>
 800dbb8:	20400001 	.word	0x20400001

0800dbbc <_fflush_r>:
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	690b      	ldr	r3, [r1, #16]
 800dbc0:	4605      	mov	r5, r0
 800dbc2:	460c      	mov	r4, r1
 800dbc4:	b913      	cbnz	r3, 800dbcc <_fflush_r+0x10>
 800dbc6:	2500      	movs	r5, #0
 800dbc8:	4628      	mov	r0, r5
 800dbca:	bd38      	pop	{r3, r4, r5, pc}
 800dbcc:	b118      	cbz	r0, 800dbd6 <_fflush_r+0x1a>
 800dbce:	6a03      	ldr	r3, [r0, #32]
 800dbd0:	b90b      	cbnz	r3, 800dbd6 <_fflush_r+0x1a>
 800dbd2:	f7fd fa25 	bl	800b020 <__sinit>
 800dbd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0f3      	beq.n	800dbc6 <_fflush_r+0xa>
 800dbde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dbe0:	07d0      	lsls	r0, r2, #31
 800dbe2:	d404      	bmi.n	800dbee <_fflush_r+0x32>
 800dbe4:	0599      	lsls	r1, r3, #22
 800dbe6:	d402      	bmi.n	800dbee <_fflush_r+0x32>
 800dbe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbea:	f7fd fb7a 	bl	800b2e2 <__retarget_lock_acquire_recursive>
 800dbee:	4628      	mov	r0, r5
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	f7ff ff5f 	bl	800dab4 <__sflush_r>
 800dbf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbf8:	07da      	lsls	r2, r3, #31
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	d4e4      	bmi.n	800dbc8 <_fflush_r+0xc>
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	059b      	lsls	r3, r3, #22
 800dc02:	d4e1      	bmi.n	800dbc8 <_fflush_r+0xc>
 800dc04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc06:	f7fd fb6d 	bl	800b2e4 <__retarget_lock_release_recursive>
 800dc0a:	e7dd      	b.n	800dbc8 <_fflush_r+0xc>

0800dc0c <memmove>:
 800dc0c:	4288      	cmp	r0, r1
 800dc0e:	b510      	push	{r4, lr}
 800dc10:	eb01 0402 	add.w	r4, r1, r2
 800dc14:	d902      	bls.n	800dc1c <memmove+0x10>
 800dc16:	4284      	cmp	r4, r0
 800dc18:	4623      	mov	r3, r4
 800dc1a:	d807      	bhi.n	800dc2c <memmove+0x20>
 800dc1c:	1e43      	subs	r3, r0, #1
 800dc1e:	42a1      	cmp	r1, r4
 800dc20:	d008      	beq.n	800dc34 <memmove+0x28>
 800dc22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc2a:	e7f8      	b.n	800dc1e <memmove+0x12>
 800dc2c:	4402      	add	r2, r0
 800dc2e:	4601      	mov	r1, r0
 800dc30:	428a      	cmp	r2, r1
 800dc32:	d100      	bne.n	800dc36 <memmove+0x2a>
 800dc34:	bd10      	pop	{r4, pc}
 800dc36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc3e:	e7f7      	b.n	800dc30 <memmove+0x24>

0800dc40 <strncmp>:
 800dc40:	b510      	push	{r4, lr}
 800dc42:	b16a      	cbz	r2, 800dc60 <strncmp+0x20>
 800dc44:	3901      	subs	r1, #1
 800dc46:	1884      	adds	r4, r0, r2
 800dc48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d103      	bne.n	800dc5c <strncmp+0x1c>
 800dc54:	42a0      	cmp	r0, r4
 800dc56:	d001      	beq.n	800dc5c <strncmp+0x1c>
 800dc58:	2a00      	cmp	r2, #0
 800dc5a:	d1f5      	bne.n	800dc48 <strncmp+0x8>
 800dc5c:	1ad0      	subs	r0, r2, r3
 800dc5e:	bd10      	pop	{r4, pc}
 800dc60:	4610      	mov	r0, r2
 800dc62:	e7fc      	b.n	800dc5e <strncmp+0x1e>

0800dc64 <_sbrk_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4d06      	ldr	r5, [pc, #24]	@ (800dc80 <_sbrk_r+0x1c>)
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	4608      	mov	r0, r1
 800dc6e:	602b      	str	r3, [r5, #0]
 800dc70:	f7f4 f9dc 	bl	800202c <_sbrk>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	d102      	bne.n	800dc7e <_sbrk_r+0x1a>
 800dc78:	682b      	ldr	r3, [r5, #0]
 800dc7a:	b103      	cbz	r3, 800dc7e <_sbrk_r+0x1a>
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	20006ff4 	.word	0x20006ff4

0800dc84 <memcpy>:
 800dc84:	440a      	add	r2, r1
 800dc86:	4291      	cmp	r1, r2
 800dc88:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc8c:	d100      	bne.n	800dc90 <memcpy+0xc>
 800dc8e:	4770      	bx	lr
 800dc90:	b510      	push	{r4, lr}
 800dc92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc9a:	4291      	cmp	r1, r2
 800dc9c:	d1f9      	bne.n	800dc92 <memcpy+0xe>
 800dc9e:	bd10      	pop	{r4, pc}

0800dca0 <nan>:
 800dca0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dca8 <nan+0x8>
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	00000000 	.word	0x00000000
 800dcac:	7ff80000 	.word	0x7ff80000

0800dcb0 <__assert_func>:
 800dcb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcb2:	4614      	mov	r4, r2
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	4b09      	ldr	r3, [pc, #36]	@ (800dcdc <__assert_func+0x2c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4605      	mov	r5, r0
 800dcbc:	68d8      	ldr	r0, [r3, #12]
 800dcbe:	b14c      	cbz	r4, 800dcd4 <__assert_func+0x24>
 800dcc0:	4b07      	ldr	r3, [pc, #28]	@ (800dce0 <__assert_func+0x30>)
 800dcc2:	9100      	str	r1, [sp, #0]
 800dcc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcc8:	4906      	ldr	r1, [pc, #24]	@ (800dce4 <__assert_func+0x34>)
 800dcca:	462b      	mov	r3, r5
 800dccc:	f000 fba8 	bl	800e420 <fiprintf>
 800dcd0:	f000 fbb8 	bl	800e444 <abort>
 800dcd4:	4b04      	ldr	r3, [pc, #16]	@ (800dce8 <__assert_func+0x38>)
 800dcd6:	461c      	mov	r4, r3
 800dcd8:	e7f3      	b.n	800dcc2 <__assert_func+0x12>
 800dcda:	bf00      	nop
 800dcdc:	20000108 	.word	0x20000108
 800dce0:	08028f16 	.word	0x08028f16
 800dce4:	08028f23 	.word	0x08028f23
 800dce8:	08028f51 	.word	0x08028f51

0800dcec <_calloc_r>:
 800dcec:	b570      	push	{r4, r5, r6, lr}
 800dcee:	fba1 5402 	umull	r5, r4, r1, r2
 800dcf2:	b934      	cbnz	r4, 800dd02 <_calloc_r+0x16>
 800dcf4:	4629      	mov	r1, r5
 800dcf6:	f7fe f9cb 	bl	800c090 <_malloc_r>
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	b928      	cbnz	r0, 800dd0a <_calloc_r+0x1e>
 800dcfe:	4630      	mov	r0, r6
 800dd00:	bd70      	pop	{r4, r5, r6, pc}
 800dd02:	220c      	movs	r2, #12
 800dd04:	6002      	str	r2, [r0, #0]
 800dd06:	2600      	movs	r6, #0
 800dd08:	e7f9      	b.n	800dcfe <_calloc_r+0x12>
 800dd0a:	462a      	mov	r2, r5
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	f7fd fa58 	bl	800b1c2 <memset>
 800dd12:	e7f4      	b.n	800dcfe <_calloc_r+0x12>

0800dd14 <rshift>:
 800dd14:	6903      	ldr	r3, [r0, #16]
 800dd16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd22:	f100 0414 	add.w	r4, r0, #20
 800dd26:	dd45      	ble.n	800ddb4 <rshift+0xa0>
 800dd28:	f011 011f 	ands.w	r1, r1, #31
 800dd2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd34:	d10c      	bne.n	800dd50 <rshift+0x3c>
 800dd36:	f100 0710 	add.w	r7, r0, #16
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	42b1      	cmp	r1, r6
 800dd3e:	d334      	bcc.n	800ddaa <rshift+0x96>
 800dd40:	1a9b      	subs	r3, r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	1eea      	subs	r2, r5, #3
 800dd46:	4296      	cmp	r6, r2
 800dd48:	bf38      	it	cc
 800dd4a:	2300      	movcc	r3, #0
 800dd4c:	4423      	add	r3, r4
 800dd4e:	e015      	b.n	800dd7c <rshift+0x68>
 800dd50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd54:	f1c1 0820 	rsb	r8, r1, #32
 800dd58:	40cf      	lsrs	r7, r1
 800dd5a:	f105 0e04 	add.w	lr, r5, #4
 800dd5e:	46a1      	mov	r9, r4
 800dd60:	4576      	cmp	r6, lr
 800dd62:	46f4      	mov	ip, lr
 800dd64:	d815      	bhi.n	800dd92 <rshift+0x7e>
 800dd66:	1a9a      	subs	r2, r3, r2
 800dd68:	0092      	lsls	r2, r2, #2
 800dd6a:	3a04      	subs	r2, #4
 800dd6c:	3501      	adds	r5, #1
 800dd6e:	42ae      	cmp	r6, r5
 800dd70:	bf38      	it	cc
 800dd72:	2200      	movcc	r2, #0
 800dd74:	18a3      	adds	r3, r4, r2
 800dd76:	50a7      	str	r7, [r4, r2]
 800dd78:	b107      	cbz	r7, 800dd7c <rshift+0x68>
 800dd7a:	3304      	adds	r3, #4
 800dd7c:	1b1a      	subs	r2, r3, r4
 800dd7e:	42a3      	cmp	r3, r4
 800dd80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd84:	bf08      	it	eq
 800dd86:	2300      	moveq	r3, #0
 800dd88:	6102      	str	r2, [r0, #16]
 800dd8a:	bf08      	it	eq
 800dd8c:	6143      	streq	r3, [r0, #20]
 800dd8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd92:	f8dc c000 	ldr.w	ip, [ip]
 800dd96:	fa0c fc08 	lsl.w	ip, ip, r8
 800dd9a:	ea4c 0707 	orr.w	r7, ip, r7
 800dd9e:	f849 7b04 	str.w	r7, [r9], #4
 800dda2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dda6:	40cf      	lsrs	r7, r1
 800dda8:	e7da      	b.n	800dd60 <rshift+0x4c>
 800ddaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800ddae:	f847 cf04 	str.w	ip, [r7, #4]!
 800ddb2:	e7c3      	b.n	800dd3c <rshift+0x28>
 800ddb4:	4623      	mov	r3, r4
 800ddb6:	e7e1      	b.n	800dd7c <rshift+0x68>

0800ddb8 <__hexdig_fun>:
 800ddb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ddbc:	2b09      	cmp	r3, #9
 800ddbe:	d802      	bhi.n	800ddc6 <__hexdig_fun+0xe>
 800ddc0:	3820      	subs	r0, #32
 800ddc2:	b2c0      	uxtb	r0, r0
 800ddc4:	4770      	bx	lr
 800ddc6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ddca:	2b05      	cmp	r3, #5
 800ddcc:	d801      	bhi.n	800ddd2 <__hexdig_fun+0x1a>
 800ddce:	3847      	subs	r0, #71	@ 0x47
 800ddd0:	e7f7      	b.n	800ddc2 <__hexdig_fun+0xa>
 800ddd2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ddd6:	2b05      	cmp	r3, #5
 800ddd8:	d801      	bhi.n	800ddde <__hexdig_fun+0x26>
 800ddda:	3827      	subs	r0, #39	@ 0x27
 800dddc:	e7f1      	b.n	800ddc2 <__hexdig_fun+0xa>
 800ddde:	2000      	movs	r0, #0
 800dde0:	4770      	bx	lr
	...

0800dde4 <__gethex>:
 800dde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde8:	b085      	sub	sp, #20
 800ddea:	468a      	mov	sl, r1
 800ddec:	9302      	str	r3, [sp, #8]
 800ddee:	680b      	ldr	r3, [r1, #0]
 800ddf0:	9001      	str	r0, [sp, #4]
 800ddf2:	4690      	mov	r8, r2
 800ddf4:	1c9c      	adds	r4, r3, #2
 800ddf6:	46a1      	mov	r9, r4
 800ddf8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ddfc:	2830      	cmp	r0, #48	@ 0x30
 800ddfe:	d0fa      	beq.n	800ddf6 <__gethex+0x12>
 800de00:	eba9 0303 	sub.w	r3, r9, r3
 800de04:	f1a3 0b02 	sub.w	fp, r3, #2
 800de08:	f7ff ffd6 	bl	800ddb8 <__hexdig_fun>
 800de0c:	4605      	mov	r5, r0
 800de0e:	2800      	cmp	r0, #0
 800de10:	d168      	bne.n	800dee4 <__gethex+0x100>
 800de12:	49a0      	ldr	r1, [pc, #640]	@ (800e094 <__gethex+0x2b0>)
 800de14:	2201      	movs	r2, #1
 800de16:	4648      	mov	r0, r9
 800de18:	f7ff ff12 	bl	800dc40 <strncmp>
 800de1c:	4607      	mov	r7, r0
 800de1e:	2800      	cmp	r0, #0
 800de20:	d167      	bne.n	800def2 <__gethex+0x10e>
 800de22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800de26:	4626      	mov	r6, r4
 800de28:	f7ff ffc6 	bl	800ddb8 <__hexdig_fun>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	d062      	beq.n	800def6 <__gethex+0x112>
 800de30:	4623      	mov	r3, r4
 800de32:	7818      	ldrb	r0, [r3, #0]
 800de34:	2830      	cmp	r0, #48	@ 0x30
 800de36:	4699      	mov	r9, r3
 800de38:	f103 0301 	add.w	r3, r3, #1
 800de3c:	d0f9      	beq.n	800de32 <__gethex+0x4e>
 800de3e:	f7ff ffbb 	bl	800ddb8 <__hexdig_fun>
 800de42:	fab0 f580 	clz	r5, r0
 800de46:	096d      	lsrs	r5, r5, #5
 800de48:	f04f 0b01 	mov.w	fp, #1
 800de4c:	464a      	mov	r2, r9
 800de4e:	4616      	mov	r6, r2
 800de50:	3201      	adds	r2, #1
 800de52:	7830      	ldrb	r0, [r6, #0]
 800de54:	f7ff ffb0 	bl	800ddb8 <__hexdig_fun>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d1f8      	bne.n	800de4e <__gethex+0x6a>
 800de5c:	498d      	ldr	r1, [pc, #564]	@ (800e094 <__gethex+0x2b0>)
 800de5e:	2201      	movs	r2, #1
 800de60:	4630      	mov	r0, r6
 800de62:	f7ff feed 	bl	800dc40 <strncmp>
 800de66:	2800      	cmp	r0, #0
 800de68:	d13f      	bne.n	800deea <__gethex+0x106>
 800de6a:	b944      	cbnz	r4, 800de7e <__gethex+0x9a>
 800de6c:	1c74      	adds	r4, r6, #1
 800de6e:	4622      	mov	r2, r4
 800de70:	4616      	mov	r6, r2
 800de72:	3201      	adds	r2, #1
 800de74:	7830      	ldrb	r0, [r6, #0]
 800de76:	f7ff ff9f 	bl	800ddb8 <__hexdig_fun>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d1f8      	bne.n	800de70 <__gethex+0x8c>
 800de7e:	1ba4      	subs	r4, r4, r6
 800de80:	00a7      	lsls	r7, r4, #2
 800de82:	7833      	ldrb	r3, [r6, #0]
 800de84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800de88:	2b50      	cmp	r3, #80	@ 0x50
 800de8a:	d13e      	bne.n	800df0a <__gethex+0x126>
 800de8c:	7873      	ldrb	r3, [r6, #1]
 800de8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800de90:	d033      	beq.n	800defa <__gethex+0x116>
 800de92:	2b2d      	cmp	r3, #45	@ 0x2d
 800de94:	d034      	beq.n	800df00 <__gethex+0x11c>
 800de96:	1c71      	adds	r1, r6, #1
 800de98:	2400      	movs	r4, #0
 800de9a:	7808      	ldrb	r0, [r1, #0]
 800de9c:	f7ff ff8c 	bl	800ddb8 <__hexdig_fun>
 800dea0:	1e43      	subs	r3, r0, #1
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	2b18      	cmp	r3, #24
 800dea6:	d830      	bhi.n	800df0a <__gethex+0x126>
 800dea8:	f1a0 0210 	sub.w	r2, r0, #16
 800deac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800deb0:	f7ff ff82 	bl	800ddb8 <__hexdig_fun>
 800deb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800deb8:	fa5f fc8c 	uxtb.w	ip, ip
 800debc:	f1bc 0f18 	cmp.w	ip, #24
 800dec0:	f04f 030a 	mov.w	r3, #10
 800dec4:	d91e      	bls.n	800df04 <__gethex+0x120>
 800dec6:	b104      	cbz	r4, 800deca <__gethex+0xe6>
 800dec8:	4252      	negs	r2, r2
 800deca:	4417      	add	r7, r2
 800decc:	f8ca 1000 	str.w	r1, [sl]
 800ded0:	b1ed      	cbz	r5, 800df0e <__gethex+0x12a>
 800ded2:	f1bb 0f00 	cmp.w	fp, #0
 800ded6:	bf0c      	ite	eq
 800ded8:	2506      	moveq	r5, #6
 800deda:	2500      	movne	r5, #0
 800dedc:	4628      	mov	r0, r5
 800dede:	b005      	add	sp, #20
 800dee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee4:	2500      	movs	r5, #0
 800dee6:	462c      	mov	r4, r5
 800dee8:	e7b0      	b.n	800de4c <__gethex+0x68>
 800deea:	2c00      	cmp	r4, #0
 800deec:	d1c7      	bne.n	800de7e <__gethex+0x9a>
 800deee:	4627      	mov	r7, r4
 800def0:	e7c7      	b.n	800de82 <__gethex+0x9e>
 800def2:	464e      	mov	r6, r9
 800def4:	462f      	mov	r7, r5
 800def6:	2501      	movs	r5, #1
 800def8:	e7c3      	b.n	800de82 <__gethex+0x9e>
 800defa:	2400      	movs	r4, #0
 800defc:	1cb1      	adds	r1, r6, #2
 800defe:	e7cc      	b.n	800de9a <__gethex+0xb6>
 800df00:	2401      	movs	r4, #1
 800df02:	e7fb      	b.n	800defc <__gethex+0x118>
 800df04:	fb03 0002 	mla	r0, r3, r2, r0
 800df08:	e7ce      	b.n	800dea8 <__gethex+0xc4>
 800df0a:	4631      	mov	r1, r6
 800df0c:	e7de      	b.n	800decc <__gethex+0xe8>
 800df0e:	eba6 0309 	sub.w	r3, r6, r9
 800df12:	3b01      	subs	r3, #1
 800df14:	4629      	mov	r1, r5
 800df16:	2b07      	cmp	r3, #7
 800df18:	dc0a      	bgt.n	800df30 <__gethex+0x14c>
 800df1a:	9801      	ldr	r0, [sp, #4]
 800df1c:	f7fe f944 	bl	800c1a8 <_Balloc>
 800df20:	4604      	mov	r4, r0
 800df22:	b940      	cbnz	r0, 800df36 <__gethex+0x152>
 800df24:	4b5c      	ldr	r3, [pc, #368]	@ (800e098 <__gethex+0x2b4>)
 800df26:	4602      	mov	r2, r0
 800df28:	21e4      	movs	r1, #228	@ 0xe4
 800df2a:	485c      	ldr	r0, [pc, #368]	@ (800e09c <__gethex+0x2b8>)
 800df2c:	f7ff fec0 	bl	800dcb0 <__assert_func>
 800df30:	3101      	adds	r1, #1
 800df32:	105b      	asrs	r3, r3, #1
 800df34:	e7ef      	b.n	800df16 <__gethex+0x132>
 800df36:	f100 0a14 	add.w	sl, r0, #20
 800df3a:	2300      	movs	r3, #0
 800df3c:	4655      	mov	r5, sl
 800df3e:	469b      	mov	fp, r3
 800df40:	45b1      	cmp	r9, r6
 800df42:	d337      	bcc.n	800dfb4 <__gethex+0x1d0>
 800df44:	f845 bb04 	str.w	fp, [r5], #4
 800df48:	eba5 050a 	sub.w	r5, r5, sl
 800df4c:	10ad      	asrs	r5, r5, #2
 800df4e:	6125      	str	r5, [r4, #16]
 800df50:	4658      	mov	r0, fp
 800df52:	f7fe fa1b 	bl	800c38c <__hi0bits>
 800df56:	016d      	lsls	r5, r5, #5
 800df58:	f8d8 6000 	ldr.w	r6, [r8]
 800df5c:	1a2d      	subs	r5, r5, r0
 800df5e:	42b5      	cmp	r5, r6
 800df60:	dd54      	ble.n	800e00c <__gethex+0x228>
 800df62:	1bad      	subs	r5, r5, r6
 800df64:	4629      	mov	r1, r5
 800df66:	4620      	mov	r0, r4
 800df68:	f7fe fda7 	bl	800caba <__any_on>
 800df6c:	4681      	mov	r9, r0
 800df6e:	b178      	cbz	r0, 800df90 <__gethex+0x1ac>
 800df70:	1e6b      	subs	r3, r5, #1
 800df72:	1159      	asrs	r1, r3, #5
 800df74:	f003 021f 	and.w	r2, r3, #31
 800df78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800df7c:	f04f 0901 	mov.w	r9, #1
 800df80:	fa09 f202 	lsl.w	r2, r9, r2
 800df84:	420a      	tst	r2, r1
 800df86:	d003      	beq.n	800df90 <__gethex+0x1ac>
 800df88:	454b      	cmp	r3, r9
 800df8a:	dc36      	bgt.n	800dffa <__gethex+0x216>
 800df8c:	f04f 0902 	mov.w	r9, #2
 800df90:	4629      	mov	r1, r5
 800df92:	4620      	mov	r0, r4
 800df94:	f7ff febe 	bl	800dd14 <rshift>
 800df98:	442f      	add	r7, r5
 800df9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df9e:	42bb      	cmp	r3, r7
 800dfa0:	da42      	bge.n	800e028 <__gethex+0x244>
 800dfa2:	9801      	ldr	r0, [sp, #4]
 800dfa4:	4621      	mov	r1, r4
 800dfa6:	f7fe f93f 	bl	800c228 <_Bfree>
 800dfaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfac:	2300      	movs	r3, #0
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	25a3      	movs	r5, #163	@ 0xa3
 800dfb2:	e793      	b.n	800dedc <__gethex+0xf8>
 800dfb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dfb8:	2a2e      	cmp	r2, #46	@ 0x2e
 800dfba:	d012      	beq.n	800dfe2 <__gethex+0x1fe>
 800dfbc:	2b20      	cmp	r3, #32
 800dfbe:	d104      	bne.n	800dfca <__gethex+0x1e6>
 800dfc0:	f845 bb04 	str.w	fp, [r5], #4
 800dfc4:	f04f 0b00 	mov.w	fp, #0
 800dfc8:	465b      	mov	r3, fp
 800dfca:	7830      	ldrb	r0, [r6, #0]
 800dfcc:	9303      	str	r3, [sp, #12]
 800dfce:	f7ff fef3 	bl	800ddb8 <__hexdig_fun>
 800dfd2:	9b03      	ldr	r3, [sp, #12]
 800dfd4:	f000 000f 	and.w	r0, r0, #15
 800dfd8:	4098      	lsls	r0, r3
 800dfda:	ea4b 0b00 	orr.w	fp, fp, r0
 800dfde:	3304      	adds	r3, #4
 800dfe0:	e7ae      	b.n	800df40 <__gethex+0x15c>
 800dfe2:	45b1      	cmp	r9, r6
 800dfe4:	d8ea      	bhi.n	800dfbc <__gethex+0x1d8>
 800dfe6:	492b      	ldr	r1, [pc, #172]	@ (800e094 <__gethex+0x2b0>)
 800dfe8:	9303      	str	r3, [sp, #12]
 800dfea:	2201      	movs	r2, #1
 800dfec:	4630      	mov	r0, r6
 800dfee:	f7ff fe27 	bl	800dc40 <strncmp>
 800dff2:	9b03      	ldr	r3, [sp, #12]
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d1e1      	bne.n	800dfbc <__gethex+0x1d8>
 800dff8:	e7a2      	b.n	800df40 <__gethex+0x15c>
 800dffa:	1ea9      	subs	r1, r5, #2
 800dffc:	4620      	mov	r0, r4
 800dffe:	f7fe fd5c 	bl	800caba <__any_on>
 800e002:	2800      	cmp	r0, #0
 800e004:	d0c2      	beq.n	800df8c <__gethex+0x1a8>
 800e006:	f04f 0903 	mov.w	r9, #3
 800e00a:	e7c1      	b.n	800df90 <__gethex+0x1ac>
 800e00c:	da09      	bge.n	800e022 <__gethex+0x23e>
 800e00e:	1b75      	subs	r5, r6, r5
 800e010:	4621      	mov	r1, r4
 800e012:	9801      	ldr	r0, [sp, #4]
 800e014:	462a      	mov	r2, r5
 800e016:	f7fe fb17 	bl	800c648 <__lshift>
 800e01a:	1b7f      	subs	r7, r7, r5
 800e01c:	4604      	mov	r4, r0
 800e01e:	f100 0a14 	add.w	sl, r0, #20
 800e022:	f04f 0900 	mov.w	r9, #0
 800e026:	e7b8      	b.n	800df9a <__gethex+0x1b6>
 800e028:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e02c:	42bd      	cmp	r5, r7
 800e02e:	dd6f      	ble.n	800e110 <__gethex+0x32c>
 800e030:	1bed      	subs	r5, r5, r7
 800e032:	42ae      	cmp	r6, r5
 800e034:	dc34      	bgt.n	800e0a0 <__gethex+0x2bc>
 800e036:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e03a:	2b02      	cmp	r3, #2
 800e03c:	d022      	beq.n	800e084 <__gethex+0x2a0>
 800e03e:	2b03      	cmp	r3, #3
 800e040:	d024      	beq.n	800e08c <__gethex+0x2a8>
 800e042:	2b01      	cmp	r3, #1
 800e044:	d115      	bne.n	800e072 <__gethex+0x28e>
 800e046:	42ae      	cmp	r6, r5
 800e048:	d113      	bne.n	800e072 <__gethex+0x28e>
 800e04a:	2e01      	cmp	r6, #1
 800e04c:	d10b      	bne.n	800e066 <__gethex+0x282>
 800e04e:	9a02      	ldr	r2, [sp, #8]
 800e050:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e054:	6013      	str	r3, [r2, #0]
 800e056:	2301      	movs	r3, #1
 800e058:	6123      	str	r3, [r4, #16]
 800e05a:	f8ca 3000 	str.w	r3, [sl]
 800e05e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e060:	2562      	movs	r5, #98	@ 0x62
 800e062:	601c      	str	r4, [r3, #0]
 800e064:	e73a      	b.n	800dedc <__gethex+0xf8>
 800e066:	1e71      	subs	r1, r6, #1
 800e068:	4620      	mov	r0, r4
 800e06a:	f7fe fd26 	bl	800caba <__any_on>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d1ed      	bne.n	800e04e <__gethex+0x26a>
 800e072:	9801      	ldr	r0, [sp, #4]
 800e074:	4621      	mov	r1, r4
 800e076:	f7fe f8d7 	bl	800c228 <_Bfree>
 800e07a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e07c:	2300      	movs	r3, #0
 800e07e:	6013      	str	r3, [r2, #0]
 800e080:	2550      	movs	r5, #80	@ 0x50
 800e082:	e72b      	b.n	800dedc <__gethex+0xf8>
 800e084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1f3      	bne.n	800e072 <__gethex+0x28e>
 800e08a:	e7e0      	b.n	800e04e <__gethex+0x26a>
 800e08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1dd      	bne.n	800e04e <__gethex+0x26a>
 800e092:	e7ee      	b.n	800e072 <__gethex+0x28e>
 800e094:	08028efb 	.word	0x08028efb
 800e098:	08028e91 	.word	0x08028e91
 800e09c:	08028f52 	.word	0x08028f52
 800e0a0:	1e6f      	subs	r7, r5, #1
 800e0a2:	f1b9 0f00 	cmp.w	r9, #0
 800e0a6:	d130      	bne.n	800e10a <__gethex+0x326>
 800e0a8:	b127      	cbz	r7, 800e0b4 <__gethex+0x2d0>
 800e0aa:	4639      	mov	r1, r7
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f7fe fd04 	bl	800caba <__any_on>
 800e0b2:	4681      	mov	r9, r0
 800e0b4:	117a      	asrs	r2, r7, #5
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e0bc:	f007 071f 	and.w	r7, r7, #31
 800e0c0:	40bb      	lsls	r3, r7
 800e0c2:	4213      	tst	r3, r2
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	bf18      	it	ne
 800e0ca:	f049 0902 	orrne.w	r9, r9, #2
 800e0ce:	f7ff fe21 	bl	800dd14 <rshift>
 800e0d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e0d6:	1b76      	subs	r6, r6, r5
 800e0d8:	2502      	movs	r5, #2
 800e0da:	f1b9 0f00 	cmp.w	r9, #0
 800e0de:	d047      	beq.n	800e170 <__gethex+0x38c>
 800e0e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	d015      	beq.n	800e114 <__gethex+0x330>
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d017      	beq.n	800e11c <__gethex+0x338>
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d109      	bne.n	800e104 <__gethex+0x320>
 800e0f0:	f019 0f02 	tst.w	r9, #2
 800e0f4:	d006      	beq.n	800e104 <__gethex+0x320>
 800e0f6:	f8da 3000 	ldr.w	r3, [sl]
 800e0fa:	ea49 0903 	orr.w	r9, r9, r3
 800e0fe:	f019 0f01 	tst.w	r9, #1
 800e102:	d10e      	bne.n	800e122 <__gethex+0x33e>
 800e104:	f045 0510 	orr.w	r5, r5, #16
 800e108:	e032      	b.n	800e170 <__gethex+0x38c>
 800e10a:	f04f 0901 	mov.w	r9, #1
 800e10e:	e7d1      	b.n	800e0b4 <__gethex+0x2d0>
 800e110:	2501      	movs	r5, #1
 800e112:	e7e2      	b.n	800e0da <__gethex+0x2f6>
 800e114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e116:	f1c3 0301 	rsb	r3, r3, #1
 800e11a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e11c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d0f0      	beq.n	800e104 <__gethex+0x320>
 800e122:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e126:	f104 0314 	add.w	r3, r4, #20
 800e12a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e12e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e132:	f04f 0c00 	mov.w	ip, #0
 800e136:	4618      	mov	r0, r3
 800e138:	f853 2b04 	ldr.w	r2, [r3], #4
 800e13c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e140:	d01b      	beq.n	800e17a <__gethex+0x396>
 800e142:	3201      	adds	r2, #1
 800e144:	6002      	str	r2, [r0, #0]
 800e146:	2d02      	cmp	r5, #2
 800e148:	f104 0314 	add.w	r3, r4, #20
 800e14c:	d13c      	bne.n	800e1c8 <__gethex+0x3e4>
 800e14e:	f8d8 2000 	ldr.w	r2, [r8]
 800e152:	3a01      	subs	r2, #1
 800e154:	42b2      	cmp	r2, r6
 800e156:	d109      	bne.n	800e16c <__gethex+0x388>
 800e158:	1171      	asrs	r1, r6, #5
 800e15a:	2201      	movs	r2, #1
 800e15c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e160:	f006 061f 	and.w	r6, r6, #31
 800e164:	fa02 f606 	lsl.w	r6, r2, r6
 800e168:	421e      	tst	r6, r3
 800e16a:	d13a      	bne.n	800e1e2 <__gethex+0x3fe>
 800e16c:	f045 0520 	orr.w	r5, r5, #32
 800e170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e172:	601c      	str	r4, [r3, #0]
 800e174:	9b02      	ldr	r3, [sp, #8]
 800e176:	601f      	str	r7, [r3, #0]
 800e178:	e6b0      	b.n	800dedc <__gethex+0xf8>
 800e17a:	4299      	cmp	r1, r3
 800e17c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e180:	d8d9      	bhi.n	800e136 <__gethex+0x352>
 800e182:	68a3      	ldr	r3, [r4, #8]
 800e184:	459b      	cmp	fp, r3
 800e186:	db17      	blt.n	800e1b8 <__gethex+0x3d4>
 800e188:	6861      	ldr	r1, [r4, #4]
 800e18a:	9801      	ldr	r0, [sp, #4]
 800e18c:	3101      	adds	r1, #1
 800e18e:	f7fe f80b 	bl	800c1a8 <_Balloc>
 800e192:	4681      	mov	r9, r0
 800e194:	b918      	cbnz	r0, 800e19e <__gethex+0x3ba>
 800e196:	4b1a      	ldr	r3, [pc, #104]	@ (800e200 <__gethex+0x41c>)
 800e198:	4602      	mov	r2, r0
 800e19a:	2184      	movs	r1, #132	@ 0x84
 800e19c:	e6c5      	b.n	800df2a <__gethex+0x146>
 800e19e:	6922      	ldr	r2, [r4, #16]
 800e1a0:	3202      	adds	r2, #2
 800e1a2:	f104 010c 	add.w	r1, r4, #12
 800e1a6:	0092      	lsls	r2, r2, #2
 800e1a8:	300c      	adds	r0, #12
 800e1aa:	f7ff fd6b 	bl	800dc84 <memcpy>
 800e1ae:	4621      	mov	r1, r4
 800e1b0:	9801      	ldr	r0, [sp, #4]
 800e1b2:	f7fe f839 	bl	800c228 <_Bfree>
 800e1b6:	464c      	mov	r4, r9
 800e1b8:	6923      	ldr	r3, [r4, #16]
 800e1ba:	1c5a      	adds	r2, r3, #1
 800e1bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e1c0:	6122      	str	r2, [r4, #16]
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	615a      	str	r2, [r3, #20]
 800e1c6:	e7be      	b.n	800e146 <__gethex+0x362>
 800e1c8:	6922      	ldr	r2, [r4, #16]
 800e1ca:	455a      	cmp	r2, fp
 800e1cc:	dd0b      	ble.n	800e1e6 <__gethex+0x402>
 800e1ce:	2101      	movs	r1, #1
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f7ff fd9f 	bl	800dd14 <rshift>
 800e1d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1da:	3701      	adds	r7, #1
 800e1dc:	42bb      	cmp	r3, r7
 800e1de:	f6ff aee0 	blt.w	800dfa2 <__gethex+0x1be>
 800e1e2:	2501      	movs	r5, #1
 800e1e4:	e7c2      	b.n	800e16c <__gethex+0x388>
 800e1e6:	f016 061f 	ands.w	r6, r6, #31
 800e1ea:	d0fa      	beq.n	800e1e2 <__gethex+0x3fe>
 800e1ec:	4453      	add	r3, sl
 800e1ee:	f1c6 0620 	rsb	r6, r6, #32
 800e1f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e1f6:	f7fe f8c9 	bl	800c38c <__hi0bits>
 800e1fa:	42b0      	cmp	r0, r6
 800e1fc:	dbe7      	blt.n	800e1ce <__gethex+0x3ea>
 800e1fe:	e7f0      	b.n	800e1e2 <__gethex+0x3fe>
 800e200:	08028e91 	.word	0x08028e91

0800e204 <L_shift>:
 800e204:	f1c2 0208 	rsb	r2, r2, #8
 800e208:	0092      	lsls	r2, r2, #2
 800e20a:	b570      	push	{r4, r5, r6, lr}
 800e20c:	f1c2 0620 	rsb	r6, r2, #32
 800e210:	6843      	ldr	r3, [r0, #4]
 800e212:	6804      	ldr	r4, [r0, #0]
 800e214:	fa03 f506 	lsl.w	r5, r3, r6
 800e218:	432c      	orrs	r4, r5
 800e21a:	40d3      	lsrs	r3, r2
 800e21c:	6004      	str	r4, [r0, #0]
 800e21e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e222:	4288      	cmp	r0, r1
 800e224:	d3f4      	bcc.n	800e210 <L_shift+0xc>
 800e226:	bd70      	pop	{r4, r5, r6, pc}

0800e228 <__match>:
 800e228:	b530      	push	{r4, r5, lr}
 800e22a:	6803      	ldr	r3, [r0, #0]
 800e22c:	3301      	adds	r3, #1
 800e22e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e232:	b914      	cbnz	r4, 800e23a <__match+0x12>
 800e234:	6003      	str	r3, [r0, #0]
 800e236:	2001      	movs	r0, #1
 800e238:	bd30      	pop	{r4, r5, pc}
 800e23a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e23e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e242:	2d19      	cmp	r5, #25
 800e244:	bf98      	it	ls
 800e246:	3220      	addls	r2, #32
 800e248:	42a2      	cmp	r2, r4
 800e24a:	d0f0      	beq.n	800e22e <__match+0x6>
 800e24c:	2000      	movs	r0, #0
 800e24e:	e7f3      	b.n	800e238 <__match+0x10>

0800e250 <__hexnan>:
 800e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	680b      	ldr	r3, [r1, #0]
 800e256:	6801      	ldr	r1, [r0, #0]
 800e258:	115e      	asrs	r6, r3, #5
 800e25a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e25e:	f013 031f 	ands.w	r3, r3, #31
 800e262:	b087      	sub	sp, #28
 800e264:	bf18      	it	ne
 800e266:	3604      	addne	r6, #4
 800e268:	2500      	movs	r5, #0
 800e26a:	1f37      	subs	r7, r6, #4
 800e26c:	4682      	mov	sl, r0
 800e26e:	4690      	mov	r8, r2
 800e270:	9301      	str	r3, [sp, #4]
 800e272:	f846 5c04 	str.w	r5, [r6, #-4]
 800e276:	46b9      	mov	r9, r7
 800e278:	463c      	mov	r4, r7
 800e27a:	9502      	str	r5, [sp, #8]
 800e27c:	46ab      	mov	fp, r5
 800e27e:	784a      	ldrb	r2, [r1, #1]
 800e280:	1c4b      	adds	r3, r1, #1
 800e282:	9303      	str	r3, [sp, #12]
 800e284:	b342      	cbz	r2, 800e2d8 <__hexnan+0x88>
 800e286:	4610      	mov	r0, r2
 800e288:	9105      	str	r1, [sp, #20]
 800e28a:	9204      	str	r2, [sp, #16]
 800e28c:	f7ff fd94 	bl	800ddb8 <__hexdig_fun>
 800e290:	2800      	cmp	r0, #0
 800e292:	d151      	bne.n	800e338 <__hexnan+0xe8>
 800e294:	9a04      	ldr	r2, [sp, #16]
 800e296:	9905      	ldr	r1, [sp, #20]
 800e298:	2a20      	cmp	r2, #32
 800e29a:	d818      	bhi.n	800e2ce <__hexnan+0x7e>
 800e29c:	9b02      	ldr	r3, [sp, #8]
 800e29e:	459b      	cmp	fp, r3
 800e2a0:	dd13      	ble.n	800e2ca <__hexnan+0x7a>
 800e2a2:	454c      	cmp	r4, r9
 800e2a4:	d206      	bcs.n	800e2b4 <__hexnan+0x64>
 800e2a6:	2d07      	cmp	r5, #7
 800e2a8:	dc04      	bgt.n	800e2b4 <__hexnan+0x64>
 800e2aa:	462a      	mov	r2, r5
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f7ff ffa8 	bl	800e204 <L_shift>
 800e2b4:	4544      	cmp	r4, r8
 800e2b6:	d952      	bls.n	800e35e <__hexnan+0x10e>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f1a4 0904 	sub.w	r9, r4, #4
 800e2be:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2c2:	f8cd b008 	str.w	fp, [sp, #8]
 800e2c6:	464c      	mov	r4, r9
 800e2c8:	461d      	mov	r5, r3
 800e2ca:	9903      	ldr	r1, [sp, #12]
 800e2cc:	e7d7      	b.n	800e27e <__hexnan+0x2e>
 800e2ce:	2a29      	cmp	r2, #41	@ 0x29
 800e2d0:	d157      	bne.n	800e382 <__hexnan+0x132>
 800e2d2:	3102      	adds	r1, #2
 800e2d4:	f8ca 1000 	str.w	r1, [sl]
 800e2d8:	f1bb 0f00 	cmp.w	fp, #0
 800e2dc:	d051      	beq.n	800e382 <__hexnan+0x132>
 800e2de:	454c      	cmp	r4, r9
 800e2e0:	d206      	bcs.n	800e2f0 <__hexnan+0xa0>
 800e2e2:	2d07      	cmp	r5, #7
 800e2e4:	dc04      	bgt.n	800e2f0 <__hexnan+0xa0>
 800e2e6:	462a      	mov	r2, r5
 800e2e8:	4649      	mov	r1, r9
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f7ff ff8a 	bl	800e204 <L_shift>
 800e2f0:	4544      	cmp	r4, r8
 800e2f2:	d936      	bls.n	800e362 <__hexnan+0x112>
 800e2f4:	f1a8 0204 	sub.w	r2, r8, #4
 800e2f8:	4623      	mov	r3, r4
 800e2fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800e302:	429f      	cmp	r7, r3
 800e304:	d2f9      	bcs.n	800e2fa <__hexnan+0xaa>
 800e306:	1b3b      	subs	r3, r7, r4
 800e308:	f023 0303 	bic.w	r3, r3, #3
 800e30c:	3304      	adds	r3, #4
 800e30e:	3401      	adds	r4, #1
 800e310:	3e03      	subs	r6, #3
 800e312:	42b4      	cmp	r4, r6
 800e314:	bf88      	it	hi
 800e316:	2304      	movhi	r3, #4
 800e318:	4443      	add	r3, r8
 800e31a:	2200      	movs	r2, #0
 800e31c:	f843 2b04 	str.w	r2, [r3], #4
 800e320:	429f      	cmp	r7, r3
 800e322:	d2fb      	bcs.n	800e31c <__hexnan+0xcc>
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	b91b      	cbnz	r3, 800e330 <__hexnan+0xe0>
 800e328:	4547      	cmp	r7, r8
 800e32a:	d128      	bne.n	800e37e <__hexnan+0x12e>
 800e32c:	2301      	movs	r3, #1
 800e32e:	603b      	str	r3, [r7, #0]
 800e330:	2005      	movs	r0, #5
 800e332:	b007      	add	sp, #28
 800e334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e338:	3501      	adds	r5, #1
 800e33a:	2d08      	cmp	r5, #8
 800e33c:	f10b 0b01 	add.w	fp, fp, #1
 800e340:	dd06      	ble.n	800e350 <__hexnan+0x100>
 800e342:	4544      	cmp	r4, r8
 800e344:	d9c1      	bls.n	800e2ca <__hexnan+0x7a>
 800e346:	2300      	movs	r3, #0
 800e348:	f844 3c04 	str.w	r3, [r4, #-4]
 800e34c:	2501      	movs	r5, #1
 800e34e:	3c04      	subs	r4, #4
 800e350:	6822      	ldr	r2, [r4, #0]
 800e352:	f000 000f 	and.w	r0, r0, #15
 800e356:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e35a:	6020      	str	r0, [r4, #0]
 800e35c:	e7b5      	b.n	800e2ca <__hexnan+0x7a>
 800e35e:	2508      	movs	r5, #8
 800e360:	e7b3      	b.n	800e2ca <__hexnan+0x7a>
 800e362:	9b01      	ldr	r3, [sp, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d0dd      	beq.n	800e324 <__hexnan+0xd4>
 800e368:	f1c3 0320 	rsb	r3, r3, #32
 800e36c:	f04f 32ff 	mov.w	r2, #4294967295
 800e370:	40da      	lsrs	r2, r3
 800e372:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e376:	4013      	ands	r3, r2
 800e378:	f846 3c04 	str.w	r3, [r6, #-4]
 800e37c:	e7d2      	b.n	800e324 <__hexnan+0xd4>
 800e37e:	3f04      	subs	r7, #4
 800e380:	e7d0      	b.n	800e324 <__hexnan+0xd4>
 800e382:	2004      	movs	r0, #4
 800e384:	e7d5      	b.n	800e332 <__hexnan+0xe2>

0800e386 <__ascii_mbtowc>:
 800e386:	b082      	sub	sp, #8
 800e388:	b901      	cbnz	r1, 800e38c <__ascii_mbtowc+0x6>
 800e38a:	a901      	add	r1, sp, #4
 800e38c:	b142      	cbz	r2, 800e3a0 <__ascii_mbtowc+0x1a>
 800e38e:	b14b      	cbz	r3, 800e3a4 <__ascii_mbtowc+0x1e>
 800e390:	7813      	ldrb	r3, [r2, #0]
 800e392:	600b      	str	r3, [r1, #0]
 800e394:	7812      	ldrb	r2, [r2, #0]
 800e396:	1e10      	subs	r0, r2, #0
 800e398:	bf18      	it	ne
 800e39a:	2001      	movne	r0, #1
 800e39c:	b002      	add	sp, #8
 800e39e:	4770      	bx	lr
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	e7fb      	b.n	800e39c <__ascii_mbtowc+0x16>
 800e3a4:	f06f 0001 	mvn.w	r0, #1
 800e3a8:	e7f8      	b.n	800e39c <__ascii_mbtowc+0x16>

0800e3aa <_realloc_r>:
 800e3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ae:	4607      	mov	r7, r0
 800e3b0:	4614      	mov	r4, r2
 800e3b2:	460d      	mov	r5, r1
 800e3b4:	b921      	cbnz	r1, 800e3c0 <_realloc_r+0x16>
 800e3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ba:	4611      	mov	r1, r2
 800e3bc:	f7fd be68 	b.w	800c090 <_malloc_r>
 800e3c0:	b92a      	cbnz	r2, 800e3ce <_realloc_r+0x24>
 800e3c2:	f7fd fdf1 	bl	800bfa8 <_free_r>
 800e3c6:	4625      	mov	r5, r4
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3ce:	f000 f840 	bl	800e452 <_malloc_usable_size_r>
 800e3d2:	4284      	cmp	r4, r0
 800e3d4:	4606      	mov	r6, r0
 800e3d6:	d802      	bhi.n	800e3de <_realloc_r+0x34>
 800e3d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3dc:	d8f4      	bhi.n	800e3c8 <_realloc_r+0x1e>
 800e3de:	4621      	mov	r1, r4
 800e3e0:	4638      	mov	r0, r7
 800e3e2:	f7fd fe55 	bl	800c090 <_malloc_r>
 800e3e6:	4680      	mov	r8, r0
 800e3e8:	b908      	cbnz	r0, 800e3ee <_realloc_r+0x44>
 800e3ea:	4645      	mov	r5, r8
 800e3ec:	e7ec      	b.n	800e3c8 <_realloc_r+0x1e>
 800e3ee:	42b4      	cmp	r4, r6
 800e3f0:	4622      	mov	r2, r4
 800e3f2:	4629      	mov	r1, r5
 800e3f4:	bf28      	it	cs
 800e3f6:	4632      	movcs	r2, r6
 800e3f8:	f7ff fc44 	bl	800dc84 <memcpy>
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	4638      	mov	r0, r7
 800e400:	f7fd fdd2 	bl	800bfa8 <_free_r>
 800e404:	e7f1      	b.n	800e3ea <_realloc_r+0x40>

0800e406 <__ascii_wctomb>:
 800e406:	4603      	mov	r3, r0
 800e408:	4608      	mov	r0, r1
 800e40a:	b141      	cbz	r1, 800e41e <__ascii_wctomb+0x18>
 800e40c:	2aff      	cmp	r2, #255	@ 0xff
 800e40e:	d904      	bls.n	800e41a <__ascii_wctomb+0x14>
 800e410:	228a      	movs	r2, #138	@ 0x8a
 800e412:	601a      	str	r2, [r3, #0]
 800e414:	f04f 30ff 	mov.w	r0, #4294967295
 800e418:	4770      	bx	lr
 800e41a:	700a      	strb	r2, [r1, #0]
 800e41c:	2001      	movs	r0, #1
 800e41e:	4770      	bx	lr

0800e420 <fiprintf>:
 800e420:	b40e      	push	{r1, r2, r3}
 800e422:	b503      	push	{r0, r1, lr}
 800e424:	4601      	mov	r1, r0
 800e426:	ab03      	add	r3, sp, #12
 800e428:	4805      	ldr	r0, [pc, #20]	@ (800e440 <fiprintf+0x20>)
 800e42a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e42e:	6800      	ldr	r0, [r0, #0]
 800e430:	9301      	str	r3, [sp, #4]
 800e432:	f000 f83f 	bl	800e4b4 <_vfiprintf_r>
 800e436:	b002      	add	sp, #8
 800e438:	f85d eb04 	ldr.w	lr, [sp], #4
 800e43c:	b003      	add	sp, #12
 800e43e:	4770      	bx	lr
 800e440:	20000108 	.word	0x20000108

0800e444 <abort>:
 800e444:	b508      	push	{r3, lr}
 800e446:	2006      	movs	r0, #6
 800e448:	f000 fa08 	bl	800e85c <raise>
 800e44c:	2001      	movs	r0, #1
 800e44e:	f7f3 fd75 	bl	8001f3c <_exit>

0800e452 <_malloc_usable_size_r>:
 800e452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e456:	1f18      	subs	r0, r3, #4
 800e458:	2b00      	cmp	r3, #0
 800e45a:	bfbc      	itt	lt
 800e45c:	580b      	ldrlt	r3, [r1, r0]
 800e45e:	18c0      	addlt	r0, r0, r3
 800e460:	4770      	bx	lr

0800e462 <__sfputc_r>:
 800e462:	6893      	ldr	r3, [r2, #8]
 800e464:	3b01      	subs	r3, #1
 800e466:	2b00      	cmp	r3, #0
 800e468:	b410      	push	{r4}
 800e46a:	6093      	str	r3, [r2, #8]
 800e46c:	da08      	bge.n	800e480 <__sfputc_r+0x1e>
 800e46e:	6994      	ldr	r4, [r2, #24]
 800e470:	42a3      	cmp	r3, r4
 800e472:	db01      	blt.n	800e478 <__sfputc_r+0x16>
 800e474:	290a      	cmp	r1, #10
 800e476:	d103      	bne.n	800e480 <__sfputc_r+0x1e>
 800e478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e47c:	f000 b932 	b.w	800e6e4 <__swbuf_r>
 800e480:	6813      	ldr	r3, [r2, #0]
 800e482:	1c58      	adds	r0, r3, #1
 800e484:	6010      	str	r0, [r2, #0]
 800e486:	7019      	strb	r1, [r3, #0]
 800e488:	4608      	mov	r0, r1
 800e48a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <__sfputs_r>:
 800e490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e492:	4606      	mov	r6, r0
 800e494:	460f      	mov	r7, r1
 800e496:	4614      	mov	r4, r2
 800e498:	18d5      	adds	r5, r2, r3
 800e49a:	42ac      	cmp	r4, r5
 800e49c:	d101      	bne.n	800e4a2 <__sfputs_r+0x12>
 800e49e:	2000      	movs	r0, #0
 800e4a0:	e007      	b.n	800e4b2 <__sfputs_r+0x22>
 800e4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a6:	463a      	mov	r2, r7
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f7ff ffda 	bl	800e462 <__sfputc_r>
 800e4ae:	1c43      	adds	r3, r0, #1
 800e4b0:	d1f3      	bne.n	800e49a <__sfputs_r+0xa>
 800e4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e4b4 <_vfiprintf_r>:
 800e4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b8:	460d      	mov	r5, r1
 800e4ba:	b09d      	sub	sp, #116	@ 0x74
 800e4bc:	4614      	mov	r4, r2
 800e4be:	4698      	mov	r8, r3
 800e4c0:	4606      	mov	r6, r0
 800e4c2:	b118      	cbz	r0, 800e4cc <_vfiprintf_r+0x18>
 800e4c4:	6a03      	ldr	r3, [r0, #32]
 800e4c6:	b90b      	cbnz	r3, 800e4cc <_vfiprintf_r+0x18>
 800e4c8:	f7fc fdaa 	bl	800b020 <__sinit>
 800e4cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4ce:	07d9      	lsls	r1, r3, #31
 800e4d0:	d405      	bmi.n	800e4de <_vfiprintf_r+0x2a>
 800e4d2:	89ab      	ldrh	r3, [r5, #12]
 800e4d4:	059a      	lsls	r2, r3, #22
 800e4d6:	d402      	bmi.n	800e4de <_vfiprintf_r+0x2a>
 800e4d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4da:	f7fc ff02 	bl	800b2e2 <__retarget_lock_acquire_recursive>
 800e4de:	89ab      	ldrh	r3, [r5, #12]
 800e4e0:	071b      	lsls	r3, r3, #28
 800e4e2:	d501      	bpl.n	800e4e8 <_vfiprintf_r+0x34>
 800e4e4:	692b      	ldr	r3, [r5, #16]
 800e4e6:	b99b      	cbnz	r3, 800e510 <_vfiprintf_r+0x5c>
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f000 f938 	bl	800e760 <__swsetup_r>
 800e4f0:	b170      	cbz	r0, 800e510 <_vfiprintf_r+0x5c>
 800e4f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4f4:	07dc      	lsls	r4, r3, #31
 800e4f6:	d504      	bpl.n	800e502 <_vfiprintf_r+0x4e>
 800e4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fc:	b01d      	add	sp, #116	@ 0x74
 800e4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e502:	89ab      	ldrh	r3, [r5, #12]
 800e504:	0598      	lsls	r0, r3, #22
 800e506:	d4f7      	bmi.n	800e4f8 <_vfiprintf_r+0x44>
 800e508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e50a:	f7fc feeb 	bl	800b2e4 <__retarget_lock_release_recursive>
 800e50e:	e7f3      	b.n	800e4f8 <_vfiprintf_r+0x44>
 800e510:	2300      	movs	r3, #0
 800e512:	9309      	str	r3, [sp, #36]	@ 0x24
 800e514:	2320      	movs	r3, #32
 800e516:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e51a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e51e:	2330      	movs	r3, #48	@ 0x30
 800e520:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e6d0 <_vfiprintf_r+0x21c>
 800e524:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e528:	f04f 0901 	mov.w	r9, #1
 800e52c:	4623      	mov	r3, r4
 800e52e:	469a      	mov	sl, r3
 800e530:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e534:	b10a      	cbz	r2, 800e53a <_vfiprintf_r+0x86>
 800e536:	2a25      	cmp	r2, #37	@ 0x25
 800e538:	d1f9      	bne.n	800e52e <_vfiprintf_r+0x7a>
 800e53a:	ebba 0b04 	subs.w	fp, sl, r4
 800e53e:	d00b      	beq.n	800e558 <_vfiprintf_r+0xa4>
 800e540:	465b      	mov	r3, fp
 800e542:	4622      	mov	r2, r4
 800e544:	4629      	mov	r1, r5
 800e546:	4630      	mov	r0, r6
 800e548:	f7ff ffa2 	bl	800e490 <__sfputs_r>
 800e54c:	3001      	adds	r0, #1
 800e54e:	f000 80a7 	beq.w	800e6a0 <_vfiprintf_r+0x1ec>
 800e552:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e554:	445a      	add	r2, fp
 800e556:	9209      	str	r2, [sp, #36]	@ 0x24
 800e558:	f89a 3000 	ldrb.w	r3, [sl]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f000 809f 	beq.w	800e6a0 <_vfiprintf_r+0x1ec>
 800e562:	2300      	movs	r3, #0
 800e564:	f04f 32ff 	mov.w	r2, #4294967295
 800e568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e56c:	f10a 0a01 	add.w	sl, sl, #1
 800e570:	9304      	str	r3, [sp, #16]
 800e572:	9307      	str	r3, [sp, #28]
 800e574:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e578:	931a      	str	r3, [sp, #104]	@ 0x68
 800e57a:	4654      	mov	r4, sl
 800e57c:	2205      	movs	r2, #5
 800e57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e582:	4853      	ldr	r0, [pc, #332]	@ (800e6d0 <_vfiprintf_r+0x21c>)
 800e584:	f7f1 fe24 	bl	80001d0 <memchr>
 800e588:	9a04      	ldr	r2, [sp, #16]
 800e58a:	b9d8      	cbnz	r0, 800e5c4 <_vfiprintf_r+0x110>
 800e58c:	06d1      	lsls	r1, r2, #27
 800e58e:	bf44      	itt	mi
 800e590:	2320      	movmi	r3, #32
 800e592:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e596:	0713      	lsls	r3, r2, #28
 800e598:	bf44      	itt	mi
 800e59a:	232b      	movmi	r3, #43	@ 0x2b
 800e59c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e5a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5a6:	d015      	beq.n	800e5d4 <_vfiprintf_r+0x120>
 800e5a8:	9a07      	ldr	r2, [sp, #28]
 800e5aa:	4654      	mov	r4, sl
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	f04f 0c0a 	mov.w	ip, #10
 800e5b2:	4621      	mov	r1, r4
 800e5b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5b8:	3b30      	subs	r3, #48	@ 0x30
 800e5ba:	2b09      	cmp	r3, #9
 800e5bc:	d94b      	bls.n	800e656 <_vfiprintf_r+0x1a2>
 800e5be:	b1b0      	cbz	r0, 800e5ee <_vfiprintf_r+0x13a>
 800e5c0:	9207      	str	r2, [sp, #28]
 800e5c2:	e014      	b.n	800e5ee <_vfiprintf_r+0x13a>
 800e5c4:	eba0 0308 	sub.w	r3, r0, r8
 800e5c8:	fa09 f303 	lsl.w	r3, r9, r3
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	9304      	str	r3, [sp, #16]
 800e5d0:	46a2      	mov	sl, r4
 800e5d2:	e7d2      	b.n	800e57a <_vfiprintf_r+0xc6>
 800e5d4:	9b03      	ldr	r3, [sp, #12]
 800e5d6:	1d19      	adds	r1, r3, #4
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	9103      	str	r1, [sp, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	bfbb      	ittet	lt
 800e5e0:	425b      	neglt	r3, r3
 800e5e2:	f042 0202 	orrlt.w	r2, r2, #2
 800e5e6:	9307      	strge	r3, [sp, #28]
 800e5e8:	9307      	strlt	r3, [sp, #28]
 800e5ea:	bfb8      	it	lt
 800e5ec:	9204      	strlt	r2, [sp, #16]
 800e5ee:	7823      	ldrb	r3, [r4, #0]
 800e5f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5f2:	d10a      	bne.n	800e60a <_vfiprintf_r+0x156>
 800e5f4:	7863      	ldrb	r3, [r4, #1]
 800e5f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5f8:	d132      	bne.n	800e660 <_vfiprintf_r+0x1ac>
 800e5fa:	9b03      	ldr	r3, [sp, #12]
 800e5fc:	1d1a      	adds	r2, r3, #4
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	9203      	str	r2, [sp, #12]
 800e602:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e606:	3402      	adds	r4, #2
 800e608:	9305      	str	r3, [sp, #20]
 800e60a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e6e0 <_vfiprintf_r+0x22c>
 800e60e:	7821      	ldrb	r1, [r4, #0]
 800e610:	2203      	movs	r2, #3
 800e612:	4650      	mov	r0, sl
 800e614:	f7f1 fddc 	bl	80001d0 <memchr>
 800e618:	b138      	cbz	r0, 800e62a <_vfiprintf_r+0x176>
 800e61a:	9b04      	ldr	r3, [sp, #16]
 800e61c:	eba0 000a 	sub.w	r0, r0, sl
 800e620:	2240      	movs	r2, #64	@ 0x40
 800e622:	4082      	lsls	r2, r0
 800e624:	4313      	orrs	r3, r2
 800e626:	3401      	adds	r4, #1
 800e628:	9304      	str	r3, [sp, #16]
 800e62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e62e:	4829      	ldr	r0, [pc, #164]	@ (800e6d4 <_vfiprintf_r+0x220>)
 800e630:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e634:	2206      	movs	r2, #6
 800e636:	f7f1 fdcb 	bl	80001d0 <memchr>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d03f      	beq.n	800e6be <_vfiprintf_r+0x20a>
 800e63e:	4b26      	ldr	r3, [pc, #152]	@ (800e6d8 <_vfiprintf_r+0x224>)
 800e640:	bb1b      	cbnz	r3, 800e68a <_vfiprintf_r+0x1d6>
 800e642:	9b03      	ldr	r3, [sp, #12]
 800e644:	3307      	adds	r3, #7
 800e646:	f023 0307 	bic.w	r3, r3, #7
 800e64a:	3308      	adds	r3, #8
 800e64c:	9303      	str	r3, [sp, #12]
 800e64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e650:	443b      	add	r3, r7
 800e652:	9309      	str	r3, [sp, #36]	@ 0x24
 800e654:	e76a      	b.n	800e52c <_vfiprintf_r+0x78>
 800e656:	fb0c 3202 	mla	r2, ip, r2, r3
 800e65a:	460c      	mov	r4, r1
 800e65c:	2001      	movs	r0, #1
 800e65e:	e7a8      	b.n	800e5b2 <_vfiprintf_r+0xfe>
 800e660:	2300      	movs	r3, #0
 800e662:	3401      	adds	r4, #1
 800e664:	9305      	str	r3, [sp, #20]
 800e666:	4619      	mov	r1, r3
 800e668:	f04f 0c0a 	mov.w	ip, #10
 800e66c:	4620      	mov	r0, r4
 800e66e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e672:	3a30      	subs	r2, #48	@ 0x30
 800e674:	2a09      	cmp	r2, #9
 800e676:	d903      	bls.n	800e680 <_vfiprintf_r+0x1cc>
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d0c6      	beq.n	800e60a <_vfiprintf_r+0x156>
 800e67c:	9105      	str	r1, [sp, #20]
 800e67e:	e7c4      	b.n	800e60a <_vfiprintf_r+0x156>
 800e680:	fb0c 2101 	mla	r1, ip, r1, r2
 800e684:	4604      	mov	r4, r0
 800e686:	2301      	movs	r3, #1
 800e688:	e7f0      	b.n	800e66c <_vfiprintf_r+0x1b8>
 800e68a:	ab03      	add	r3, sp, #12
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	462a      	mov	r2, r5
 800e690:	4b12      	ldr	r3, [pc, #72]	@ (800e6dc <_vfiprintf_r+0x228>)
 800e692:	a904      	add	r1, sp, #16
 800e694:	4630      	mov	r0, r6
 800e696:	f7fb fe73 	bl	800a380 <_printf_float>
 800e69a:	4607      	mov	r7, r0
 800e69c:	1c78      	adds	r0, r7, #1
 800e69e:	d1d6      	bne.n	800e64e <_vfiprintf_r+0x19a>
 800e6a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6a2:	07d9      	lsls	r1, r3, #31
 800e6a4:	d405      	bmi.n	800e6b2 <_vfiprintf_r+0x1fe>
 800e6a6:	89ab      	ldrh	r3, [r5, #12]
 800e6a8:	059a      	lsls	r2, r3, #22
 800e6aa:	d402      	bmi.n	800e6b2 <_vfiprintf_r+0x1fe>
 800e6ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6ae:	f7fc fe19 	bl	800b2e4 <__retarget_lock_release_recursive>
 800e6b2:	89ab      	ldrh	r3, [r5, #12]
 800e6b4:	065b      	lsls	r3, r3, #25
 800e6b6:	f53f af1f 	bmi.w	800e4f8 <_vfiprintf_r+0x44>
 800e6ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e6bc:	e71e      	b.n	800e4fc <_vfiprintf_r+0x48>
 800e6be:	ab03      	add	r3, sp, #12
 800e6c0:	9300      	str	r3, [sp, #0]
 800e6c2:	462a      	mov	r2, r5
 800e6c4:	4b05      	ldr	r3, [pc, #20]	@ (800e6dc <_vfiprintf_r+0x228>)
 800e6c6:	a904      	add	r1, sp, #16
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	f7fc f8f1 	bl	800a8b0 <_printf_i>
 800e6ce:	e7e4      	b.n	800e69a <_vfiprintf_r+0x1e6>
 800e6d0:	08028efd 	.word	0x08028efd
 800e6d4:	08028f07 	.word	0x08028f07
 800e6d8:	0800a381 	.word	0x0800a381
 800e6dc:	0800e491 	.word	0x0800e491
 800e6e0:	08028f03 	.word	0x08028f03

0800e6e4 <__swbuf_r>:
 800e6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e6:	460e      	mov	r6, r1
 800e6e8:	4614      	mov	r4, r2
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	b118      	cbz	r0, 800e6f6 <__swbuf_r+0x12>
 800e6ee:	6a03      	ldr	r3, [r0, #32]
 800e6f0:	b90b      	cbnz	r3, 800e6f6 <__swbuf_r+0x12>
 800e6f2:	f7fc fc95 	bl	800b020 <__sinit>
 800e6f6:	69a3      	ldr	r3, [r4, #24]
 800e6f8:	60a3      	str	r3, [r4, #8]
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	071a      	lsls	r2, r3, #28
 800e6fe:	d501      	bpl.n	800e704 <__swbuf_r+0x20>
 800e700:	6923      	ldr	r3, [r4, #16]
 800e702:	b943      	cbnz	r3, 800e716 <__swbuf_r+0x32>
 800e704:	4621      	mov	r1, r4
 800e706:	4628      	mov	r0, r5
 800e708:	f000 f82a 	bl	800e760 <__swsetup_r>
 800e70c:	b118      	cbz	r0, 800e716 <__swbuf_r+0x32>
 800e70e:	f04f 37ff 	mov.w	r7, #4294967295
 800e712:	4638      	mov	r0, r7
 800e714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	6922      	ldr	r2, [r4, #16]
 800e71a:	1a98      	subs	r0, r3, r2
 800e71c:	6963      	ldr	r3, [r4, #20]
 800e71e:	b2f6      	uxtb	r6, r6
 800e720:	4283      	cmp	r3, r0
 800e722:	4637      	mov	r7, r6
 800e724:	dc05      	bgt.n	800e732 <__swbuf_r+0x4e>
 800e726:	4621      	mov	r1, r4
 800e728:	4628      	mov	r0, r5
 800e72a:	f7ff fa47 	bl	800dbbc <_fflush_r>
 800e72e:	2800      	cmp	r0, #0
 800e730:	d1ed      	bne.n	800e70e <__swbuf_r+0x2a>
 800e732:	68a3      	ldr	r3, [r4, #8]
 800e734:	3b01      	subs	r3, #1
 800e736:	60a3      	str	r3, [r4, #8]
 800e738:	6823      	ldr	r3, [r4, #0]
 800e73a:	1c5a      	adds	r2, r3, #1
 800e73c:	6022      	str	r2, [r4, #0]
 800e73e:	701e      	strb	r6, [r3, #0]
 800e740:	6962      	ldr	r2, [r4, #20]
 800e742:	1c43      	adds	r3, r0, #1
 800e744:	429a      	cmp	r2, r3
 800e746:	d004      	beq.n	800e752 <__swbuf_r+0x6e>
 800e748:	89a3      	ldrh	r3, [r4, #12]
 800e74a:	07db      	lsls	r3, r3, #31
 800e74c:	d5e1      	bpl.n	800e712 <__swbuf_r+0x2e>
 800e74e:	2e0a      	cmp	r6, #10
 800e750:	d1df      	bne.n	800e712 <__swbuf_r+0x2e>
 800e752:	4621      	mov	r1, r4
 800e754:	4628      	mov	r0, r5
 800e756:	f7ff fa31 	bl	800dbbc <_fflush_r>
 800e75a:	2800      	cmp	r0, #0
 800e75c:	d0d9      	beq.n	800e712 <__swbuf_r+0x2e>
 800e75e:	e7d6      	b.n	800e70e <__swbuf_r+0x2a>

0800e760 <__swsetup_r>:
 800e760:	b538      	push	{r3, r4, r5, lr}
 800e762:	4b29      	ldr	r3, [pc, #164]	@ (800e808 <__swsetup_r+0xa8>)
 800e764:	4605      	mov	r5, r0
 800e766:	6818      	ldr	r0, [r3, #0]
 800e768:	460c      	mov	r4, r1
 800e76a:	b118      	cbz	r0, 800e774 <__swsetup_r+0x14>
 800e76c:	6a03      	ldr	r3, [r0, #32]
 800e76e:	b90b      	cbnz	r3, 800e774 <__swsetup_r+0x14>
 800e770:	f7fc fc56 	bl	800b020 <__sinit>
 800e774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e778:	0719      	lsls	r1, r3, #28
 800e77a:	d422      	bmi.n	800e7c2 <__swsetup_r+0x62>
 800e77c:	06da      	lsls	r2, r3, #27
 800e77e:	d407      	bmi.n	800e790 <__swsetup_r+0x30>
 800e780:	2209      	movs	r2, #9
 800e782:	602a      	str	r2, [r5, #0]
 800e784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e788:	81a3      	strh	r3, [r4, #12]
 800e78a:	f04f 30ff 	mov.w	r0, #4294967295
 800e78e:	e033      	b.n	800e7f8 <__swsetup_r+0x98>
 800e790:	0758      	lsls	r0, r3, #29
 800e792:	d512      	bpl.n	800e7ba <__swsetup_r+0x5a>
 800e794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e796:	b141      	cbz	r1, 800e7aa <__swsetup_r+0x4a>
 800e798:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e79c:	4299      	cmp	r1, r3
 800e79e:	d002      	beq.n	800e7a6 <__swsetup_r+0x46>
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	f7fd fc01 	bl	800bfa8 <_free_r>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7aa:	89a3      	ldrh	r3, [r4, #12]
 800e7ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e7b0:	81a3      	strh	r3, [r4, #12]
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	6063      	str	r3, [r4, #4]
 800e7b6:	6923      	ldr	r3, [r4, #16]
 800e7b8:	6023      	str	r3, [r4, #0]
 800e7ba:	89a3      	ldrh	r3, [r4, #12]
 800e7bc:	f043 0308 	orr.w	r3, r3, #8
 800e7c0:	81a3      	strh	r3, [r4, #12]
 800e7c2:	6923      	ldr	r3, [r4, #16]
 800e7c4:	b94b      	cbnz	r3, 800e7da <__swsetup_r+0x7a>
 800e7c6:	89a3      	ldrh	r3, [r4, #12]
 800e7c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e7cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7d0:	d003      	beq.n	800e7da <__swsetup_r+0x7a>
 800e7d2:	4621      	mov	r1, r4
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	f000 f883 	bl	800e8e0 <__smakebuf_r>
 800e7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7de:	f013 0201 	ands.w	r2, r3, #1
 800e7e2:	d00a      	beq.n	800e7fa <__swsetup_r+0x9a>
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	60a2      	str	r2, [r4, #8]
 800e7e8:	6962      	ldr	r2, [r4, #20]
 800e7ea:	4252      	negs	r2, r2
 800e7ec:	61a2      	str	r2, [r4, #24]
 800e7ee:	6922      	ldr	r2, [r4, #16]
 800e7f0:	b942      	cbnz	r2, 800e804 <__swsetup_r+0xa4>
 800e7f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e7f6:	d1c5      	bne.n	800e784 <__swsetup_r+0x24>
 800e7f8:	bd38      	pop	{r3, r4, r5, pc}
 800e7fa:	0799      	lsls	r1, r3, #30
 800e7fc:	bf58      	it	pl
 800e7fe:	6962      	ldrpl	r2, [r4, #20]
 800e800:	60a2      	str	r2, [r4, #8]
 800e802:	e7f4      	b.n	800e7ee <__swsetup_r+0x8e>
 800e804:	2000      	movs	r0, #0
 800e806:	e7f7      	b.n	800e7f8 <__swsetup_r+0x98>
 800e808:	20000108 	.word	0x20000108

0800e80c <_raise_r>:
 800e80c:	291f      	cmp	r1, #31
 800e80e:	b538      	push	{r3, r4, r5, lr}
 800e810:	4605      	mov	r5, r0
 800e812:	460c      	mov	r4, r1
 800e814:	d904      	bls.n	800e820 <_raise_r+0x14>
 800e816:	2316      	movs	r3, #22
 800e818:	6003      	str	r3, [r0, #0]
 800e81a:	f04f 30ff 	mov.w	r0, #4294967295
 800e81e:	bd38      	pop	{r3, r4, r5, pc}
 800e820:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e822:	b112      	cbz	r2, 800e82a <_raise_r+0x1e>
 800e824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e828:	b94b      	cbnz	r3, 800e83e <_raise_r+0x32>
 800e82a:	4628      	mov	r0, r5
 800e82c:	f000 f830 	bl	800e890 <_getpid_r>
 800e830:	4622      	mov	r2, r4
 800e832:	4601      	mov	r1, r0
 800e834:	4628      	mov	r0, r5
 800e836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e83a:	f000 b817 	b.w	800e86c <_kill_r>
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d00a      	beq.n	800e858 <_raise_r+0x4c>
 800e842:	1c59      	adds	r1, r3, #1
 800e844:	d103      	bne.n	800e84e <_raise_r+0x42>
 800e846:	2316      	movs	r3, #22
 800e848:	6003      	str	r3, [r0, #0]
 800e84a:	2001      	movs	r0, #1
 800e84c:	e7e7      	b.n	800e81e <_raise_r+0x12>
 800e84e:	2100      	movs	r1, #0
 800e850:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e854:	4620      	mov	r0, r4
 800e856:	4798      	blx	r3
 800e858:	2000      	movs	r0, #0
 800e85a:	e7e0      	b.n	800e81e <_raise_r+0x12>

0800e85c <raise>:
 800e85c:	4b02      	ldr	r3, [pc, #8]	@ (800e868 <raise+0xc>)
 800e85e:	4601      	mov	r1, r0
 800e860:	6818      	ldr	r0, [r3, #0]
 800e862:	f7ff bfd3 	b.w	800e80c <_raise_r>
 800e866:	bf00      	nop
 800e868:	20000108 	.word	0x20000108

0800e86c <_kill_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	4d07      	ldr	r5, [pc, #28]	@ (800e88c <_kill_r+0x20>)
 800e870:	2300      	movs	r3, #0
 800e872:	4604      	mov	r4, r0
 800e874:	4608      	mov	r0, r1
 800e876:	4611      	mov	r1, r2
 800e878:	602b      	str	r3, [r5, #0]
 800e87a:	f7f3 fb4f 	bl	8001f1c <_kill>
 800e87e:	1c43      	adds	r3, r0, #1
 800e880:	d102      	bne.n	800e888 <_kill_r+0x1c>
 800e882:	682b      	ldr	r3, [r5, #0]
 800e884:	b103      	cbz	r3, 800e888 <_kill_r+0x1c>
 800e886:	6023      	str	r3, [r4, #0]
 800e888:	bd38      	pop	{r3, r4, r5, pc}
 800e88a:	bf00      	nop
 800e88c:	20006ff4 	.word	0x20006ff4

0800e890 <_getpid_r>:
 800e890:	f7f3 bb3c 	b.w	8001f0c <_getpid>

0800e894 <__swhatbuf_r>:
 800e894:	b570      	push	{r4, r5, r6, lr}
 800e896:	460c      	mov	r4, r1
 800e898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e89c:	2900      	cmp	r1, #0
 800e89e:	b096      	sub	sp, #88	@ 0x58
 800e8a0:	4615      	mov	r5, r2
 800e8a2:	461e      	mov	r6, r3
 800e8a4:	da0d      	bge.n	800e8c2 <__swhatbuf_r+0x2e>
 800e8a6:	89a3      	ldrh	r3, [r4, #12]
 800e8a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8ac:	f04f 0100 	mov.w	r1, #0
 800e8b0:	bf14      	ite	ne
 800e8b2:	2340      	movne	r3, #64	@ 0x40
 800e8b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	6031      	str	r1, [r6, #0]
 800e8bc:	602b      	str	r3, [r5, #0]
 800e8be:	b016      	add	sp, #88	@ 0x58
 800e8c0:	bd70      	pop	{r4, r5, r6, pc}
 800e8c2:	466a      	mov	r2, sp
 800e8c4:	f000 f848 	bl	800e958 <_fstat_r>
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	dbec      	blt.n	800e8a6 <__swhatbuf_r+0x12>
 800e8cc:	9901      	ldr	r1, [sp, #4]
 800e8ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e8d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e8d6:	4259      	negs	r1, r3
 800e8d8:	4159      	adcs	r1, r3
 800e8da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8de:	e7eb      	b.n	800e8b8 <__swhatbuf_r+0x24>

0800e8e0 <__smakebuf_r>:
 800e8e0:	898b      	ldrh	r3, [r1, #12]
 800e8e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8e4:	079d      	lsls	r5, r3, #30
 800e8e6:	4606      	mov	r6, r0
 800e8e8:	460c      	mov	r4, r1
 800e8ea:	d507      	bpl.n	800e8fc <__smakebuf_r+0x1c>
 800e8ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e8f0:	6023      	str	r3, [r4, #0]
 800e8f2:	6123      	str	r3, [r4, #16]
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	6163      	str	r3, [r4, #20]
 800e8f8:	b003      	add	sp, #12
 800e8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8fc:	ab01      	add	r3, sp, #4
 800e8fe:	466a      	mov	r2, sp
 800e900:	f7ff ffc8 	bl	800e894 <__swhatbuf_r>
 800e904:	9f00      	ldr	r7, [sp, #0]
 800e906:	4605      	mov	r5, r0
 800e908:	4639      	mov	r1, r7
 800e90a:	4630      	mov	r0, r6
 800e90c:	f7fd fbc0 	bl	800c090 <_malloc_r>
 800e910:	b948      	cbnz	r0, 800e926 <__smakebuf_r+0x46>
 800e912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e916:	059a      	lsls	r2, r3, #22
 800e918:	d4ee      	bmi.n	800e8f8 <__smakebuf_r+0x18>
 800e91a:	f023 0303 	bic.w	r3, r3, #3
 800e91e:	f043 0302 	orr.w	r3, r3, #2
 800e922:	81a3      	strh	r3, [r4, #12]
 800e924:	e7e2      	b.n	800e8ec <__smakebuf_r+0xc>
 800e926:	89a3      	ldrh	r3, [r4, #12]
 800e928:	6020      	str	r0, [r4, #0]
 800e92a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e92e:	81a3      	strh	r3, [r4, #12]
 800e930:	9b01      	ldr	r3, [sp, #4]
 800e932:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e936:	b15b      	cbz	r3, 800e950 <__smakebuf_r+0x70>
 800e938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e93c:	4630      	mov	r0, r6
 800e93e:	f000 f81d 	bl	800e97c <_isatty_r>
 800e942:	b128      	cbz	r0, 800e950 <__smakebuf_r+0x70>
 800e944:	89a3      	ldrh	r3, [r4, #12]
 800e946:	f023 0303 	bic.w	r3, r3, #3
 800e94a:	f043 0301 	orr.w	r3, r3, #1
 800e94e:	81a3      	strh	r3, [r4, #12]
 800e950:	89a3      	ldrh	r3, [r4, #12]
 800e952:	431d      	orrs	r5, r3
 800e954:	81a5      	strh	r5, [r4, #12]
 800e956:	e7cf      	b.n	800e8f8 <__smakebuf_r+0x18>

0800e958 <_fstat_r>:
 800e958:	b538      	push	{r3, r4, r5, lr}
 800e95a:	4d07      	ldr	r5, [pc, #28]	@ (800e978 <_fstat_r+0x20>)
 800e95c:	2300      	movs	r3, #0
 800e95e:	4604      	mov	r4, r0
 800e960:	4608      	mov	r0, r1
 800e962:	4611      	mov	r1, r2
 800e964:	602b      	str	r3, [r5, #0]
 800e966:	f7f3 fb39 	bl	8001fdc <_fstat>
 800e96a:	1c43      	adds	r3, r0, #1
 800e96c:	d102      	bne.n	800e974 <_fstat_r+0x1c>
 800e96e:	682b      	ldr	r3, [r5, #0]
 800e970:	b103      	cbz	r3, 800e974 <_fstat_r+0x1c>
 800e972:	6023      	str	r3, [r4, #0]
 800e974:	bd38      	pop	{r3, r4, r5, pc}
 800e976:	bf00      	nop
 800e978:	20006ff4 	.word	0x20006ff4

0800e97c <_isatty_r>:
 800e97c:	b538      	push	{r3, r4, r5, lr}
 800e97e:	4d06      	ldr	r5, [pc, #24]	@ (800e998 <_isatty_r+0x1c>)
 800e980:	2300      	movs	r3, #0
 800e982:	4604      	mov	r4, r0
 800e984:	4608      	mov	r0, r1
 800e986:	602b      	str	r3, [r5, #0]
 800e988:	f7f3 fb38 	bl	8001ffc <_isatty>
 800e98c:	1c43      	adds	r3, r0, #1
 800e98e:	d102      	bne.n	800e996 <_isatty_r+0x1a>
 800e990:	682b      	ldr	r3, [r5, #0]
 800e992:	b103      	cbz	r3, 800e996 <_isatty_r+0x1a>
 800e994:	6023      	str	r3, [r4, #0]
 800e996:	bd38      	pop	{r3, r4, r5, pc}
 800e998:	20006ff4 	.word	0x20006ff4

0800e99c <_init>:
 800e99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e99e:	bf00      	nop
 800e9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9a2:	bc08      	pop	{r3}
 800e9a4:	469e      	mov	lr, r3
 800e9a6:	4770      	bx	lr

0800e9a8 <_fini>:
 800e9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9aa:	bf00      	nop
 800e9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ae:	bc08      	pop	{r3}
 800e9b0:	469e      	mov	lr, r3
 800e9b2:	4770      	bx	lr
