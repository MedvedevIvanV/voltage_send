
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f480  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005180  0800f610  0800f610  00010610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014790  08014790  000162c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014790  08014790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014798  08014798  000162c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014798  08014798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801479c  0801479c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  080147a0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000162c8  2**0
                  CONTENTS
 10 .bss          0000b04c  200002c8  200002c8  000162c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b314  2000b314  000162c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000162c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e97b  00000000  00000000  000162f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ba8  00000000  00000000  00034c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  00039820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b7  00000000  00000000  0003afe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248a2  00000000  00000000  0003c19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d7a8  00000000  00000000  00060a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdb94  00000000  00000000  0007e1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0014bd7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000079cc  00000000  00000000  0014be3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00153808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  00153878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  001546b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f5f8 	.word	0x0800f5f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800f5f8 	.word	0x0800f5f8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <InitializeParameters>:
/* USER CODE BEGIN 0 */

/**
  * @brief Инициализация переменных параметров
  */
void InitializeParameters(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8001044:	4b2a      	ldr	r3, [pc, #168]	@ (80010f0 <InitializeParameters+0xb0>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	f083 0301 	eor.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d04b      	beq.n	80010ea <InitializeParameters+0xaa>
        // Выделяем память для всех переменных параметров
        start_index = (uint32_t*)malloc(sizeof(uint32_t));
 8001052:	2004      	movs	r0, #4
 8001054:	f009 fe42 	bl	800acdc <malloc>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <InitializeParameters+0xb4>)
 800105e:	601a      	str	r2, [r3, #0]
        wave_speed = (float*)malloc(sizeof(float));
 8001060:	2004      	movs	r0, #4
 8001062:	f009 fe3b 	bl	800acdc <malloc>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <InitializeParameters+0xb8>)
 800106c:	601a      	str	r2, [r3, #0]
        first_left_strobe = (uint32_t*)malloc(sizeof(uint32_t));
 800106e:	2004      	movs	r0, #4
 8001070:	f009 fe34 	bl	800acdc <malloc>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <InitializeParameters+0xbc>)
 800107a:	601a      	str	r2, [r3, #0]
        first_right_strobe = (uint32_t*)malloc(sizeof(uint32_t));
 800107c:	2004      	movs	r0, #4
 800107e:	f009 fe2d 	bl	800acdc <malloc>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <InitializeParameters+0xc0>)
 8001088:	601a      	str	r2, [r3, #0]
        second_left_strobe = (uint32_t*)malloc(sizeof(uint32_t));
 800108a:	2004      	movs	r0, #4
 800108c:	f009 fe26 	bl	800acdc <malloc>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <InitializeParameters+0xc4>)
 8001096:	601a      	str	r2, [r3, #0]
        second_right_strobe = (uint32_t*)malloc(sizeof(uint32_t));
 8001098:	2004      	movs	r0, #4
 800109a:	f009 fe1f 	bl	800acdc <malloc>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <InitializeParameters+0xc8>)
 80010a4:	601a      	str	r2, [r3, #0]
        threshold = (float*)malloc(sizeof(float));
 80010a6:	2004      	movs	r0, #4
 80010a8:	f009 fe18 	bl	800acdc <malloc>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b16      	ldr	r3, [pc, #88]	@ (800110c <InitializeParameters+0xcc>)
 80010b2:	601a      	str	r2, [r3, #0]
        threshold_zero_crossing = (float*)malloc(sizeof(float));
 80010b4:	2004      	movs	r0, #4
 80010b6:	f009 fe11 	bl	800acdc <malloc>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <InitializeParameters+0xd0>)
 80010c0:	601a      	str	r2, [r3, #0]
        probe_length = (uint32_t*)malloc(sizeof(uint32_t));
 80010c2:	2004      	movs	r0, #4
 80010c4:	f009 fe0a 	bl	800acdc <malloc>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <InitializeParameters+0xd4>)
 80010ce:	601a      	str	r2, [r3, #0]
        method = (uint32_t*)malloc(sizeof(uint32_t)); // Выделяем память для метода
 80010d0:	2004      	movs	r0, #4
 80010d2:	f009 fe03 	bl	800acdc <malloc>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <InitializeParameters+0xd8>)
 80010dc:	601a      	str	r2, [r3, #0]

        parameters_initialized = true;
 80010de:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <InitializeParameters+0xb0>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
        SendUSBDebugMessage("Parameters memory allocated");
 80010e4:	480d      	ldr	r0, [pc, #52]	@ (800111c <InitializeParameters+0xdc>)
 80010e6:	f000 f81b 	bl	8001120 <SendUSBDebugMessage>
    }
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200094d0 	.word	0x200094d0
 80010f4:	200094a8 	.word	0x200094a8
 80010f8:	200094ac 	.word	0x200094ac
 80010fc:	200094b0 	.word	0x200094b0
 8001100:	200094b4 	.word	0x200094b4
 8001104:	200094b8 	.word	0x200094b8
 8001108:	200094bc 	.word	0x200094bc
 800110c:	200094c0 	.word	0x200094c0
 8001110:	200094c4 	.word	0x200094c4
 8001114:	200094c8 	.word	0x200094c8
 8001118:	200094cc 	.word	0x200094cc
 800111c:	0800f610 	.word	0x0800f610

08001120 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af02      	add	r7, sp, #8
 8001126:	6078      	str	r0, [r7, #4]
    snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 8001128:	f001 fbc6 	bl	80028b8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	4613      	mov	r3, r2
 8001134:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <SendUSBDebugMessage+0x40>)
 8001136:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800113a:	480a      	ldr	r0, [pc, #40]	@ (8001164 <SendUSBDebugMessage+0x44>)
 800113c:	f00b fc72 	bl	800ca24 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001140:	4808      	ldr	r0, [pc, #32]	@ (8001164 <SendUSBDebugMessage+0x44>)
 8001142:	f7ff f8a5 	bl	8000290 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29b      	uxth	r3, r3
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <SendUSBDebugMessage+0x44>)
 800114e:	f008 ff95 	bl	800a07c <CDC_Transmit_FS>
    HAL_Delay(10); // Задержка для стабильной работы USB
 8001152:	200a      	movs	r0, #10
 8001154:	f001 fbbc 	bl	80028d0 <HAL_Delay>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800f644 	.word	0x0800f644
 8001164:	200003d8 	.word	0x200003d8

08001168 <ParseParameters>:

/**
  * @brief Парсинг параметров из строки
  * @param params_str Строка с параметрами (после "SETPARAMS=")
  */
void ParseParameters(const char* params_str) {
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b0c7      	sub	sp, #284	@ 0x11c
 800116c:	af00      	add	r7, sp, #0
 800116e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001172:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001176:	6018      	str	r0, [r3, #0]
    char buffer[USB_RX_BUFFER_SIZE];
    strncpy(buffer, params_str, sizeof(buffer) - 1);
 8001178:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800117c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001180:	f107 0008 	add.w	r0, r7, #8
 8001184:	22ff      	movs	r2, #255	@ 0xff
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	f00b fd21 	bl	800cbce <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 800118c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001190:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001194:	2200      	movs	r2, #0
 8001196:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    // Инициализируем параметры перед парсингом
    InitializeParameters();
 800119a:	f7ff ff51 	bl	8001040 <InitializeParameters>

    char* token = strtok(buffer, "|");
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	4975      	ldr	r1, [pc, #468]	@ (8001378 <ParseParameters+0x210>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00b fd25 	bl	800cbf4 <strtok>
 80011aa:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (token != NULL) {
 80011ae:	e0d3      	b.n	8001358 <ParseParameters+0x1f0>
        char* equals_sign = strchr(token, '=');
 80011b0:	213d      	movs	r1, #61	@ 0x3d
 80011b2:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80011b6:	f00b fcd8 	bl	800cb6a <strchr>
 80011ba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
        if (equals_sign != NULL) {
 80011be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80c2 	beq.w	800134c <ParseParameters+0x1e4>
            *equals_sign = '\0'; // Разделяем на имя и значение
 80011c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 80011d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            char* param_value = equals_sign + 1;
 80011d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80011dc:	3301      	adds	r3, #1
 80011de:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

            // Парсим параметры
            if (strcmp(param_name, "wave_speed") == 0) {
 80011e2:	4966      	ldr	r1, [pc, #408]	@ (800137c <ParseParameters+0x214>)
 80011e4:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80011e8:	f7fe fff2 	bl	80001d0 <strcmp>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <ParseParameters+0xa4>
                *wave_speed = atof(param_value);
 80011f2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80011f6:	f009 fd69 	bl	800accc <atof>
 80011fa:	ec51 0b10 	vmov	r0, r1, d0
 80011fe:	4b60      	ldr	r3, [pc, #384]	@ (8001380 <ParseParameters+0x218>)
 8001200:	681c      	ldr	r4, [r3, #0]
 8001202:	f7ff fd01 	bl	8000c08 <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	6023      	str	r3, [r4, #0]
 800120a:	e09f      	b.n	800134c <ParseParameters+0x1e4>
            } else if (strcmp(param_name, "threshold") == 0) {
 800120c:	495d      	ldr	r1, [pc, #372]	@ (8001384 <ParseParameters+0x21c>)
 800120e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001212:	f7fe ffdd 	bl	80001d0 <strcmp>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10c      	bne.n	8001236 <ParseParameters+0xce>
                *threshold = atof(param_value);
 800121c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001220:	f009 fd54 	bl	800accc <atof>
 8001224:	ec51 0b10 	vmov	r0, r1, d0
 8001228:	4b57      	ldr	r3, [pc, #348]	@ (8001388 <ParseParameters+0x220>)
 800122a:	681c      	ldr	r4, [r3, #0]
 800122c:	f7ff fcec 	bl	8000c08 <__aeabi_d2f>
 8001230:	4603      	mov	r3, r0
 8001232:	6023      	str	r3, [r4, #0]
 8001234:	e08a      	b.n	800134c <ParseParameters+0x1e4>
            } else if (strcmp(param_name, "threshold_zero_crossing") == 0) {
 8001236:	4955      	ldr	r1, [pc, #340]	@ (800138c <ParseParameters+0x224>)
 8001238:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800123c:	f7fe ffc8 	bl	80001d0 <strcmp>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <ParseParameters+0xf8>
                *threshold_zero_crossing = atof(param_value);
 8001246:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800124a:	f009 fd3f 	bl	800accc <atof>
 800124e:	ec51 0b10 	vmov	r0, r1, d0
 8001252:	4b4f      	ldr	r3, [pc, #316]	@ (8001390 <ParseParameters+0x228>)
 8001254:	681c      	ldr	r4, [r3, #0]
 8001256:	f7ff fcd7 	bl	8000c08 <__aeabi_d2f>
 800125a:	4603      	mov	r3, r0
 800125c:	6023      	str	r3, [r4, #0]
 800125e:	e075      	b.n	800134c <ParseParameters+0x1e4>
            } else if (strcmp(param_name, "start_index") == 0) {
 8001260:	494c      	ldr	r1, [pc, #304]	@ (8001394 <ParseParameters+0x22c>)
 8001262:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001266:	f7fe ffb3 	bl	80001d0 <strcmp>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d108      	bne.n	8001282 <ParseParameters+0x11a>
                *start_index = atoi(param_value);
 8001270:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001274:	f009 fd2d 	bl	800acd2 <atoi>
 8001278:	4602      	mov	r2, r0
 800127a:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <ParseParameters+0x230>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e064      	b.n	800134c <ParseParameters+0x1e4>
            } else if (strcmp(param_name, "probe_length") == 0) {
 8001282:	4946      	ldr	r1, [pc, #280]	@ (800139c <ParseParameters+0x234>)
 8001284:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001288:	f7fe ffa2 	bl	80001d0 <strcmp>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d108      	bne.n	80012a4 <ParseParameters+0x13c>
                *probe_length = atoi(param_value);
 8001292:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001296:	f009 fd1c 	bl	800acd2 <atoi>
 800129a:	4602      	mov	r2, r0
 800129c:	4b40      	ldr	r3, [pc, #256]	@ (80013a0 <ParseParameters+0x238>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e053      	b.n	800134c <ParseParameters+0x1e4>
            } else if (strcmp(param_name, "strobe_left1") == 0) {
 80012a4:	493f      	ldr	r1, [pc, #252]	@ (80013a4 <ParseParameters+0x23c>)
 80012a6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80012aa:	f7fe ff91 	bl	80001d0 <strcmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d108      	bne.n	80012c6 <ParseParameters+0x15e>
                *first_left_strobe = atoi(param_value);
 80012b4:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80012b8:	f009 fd0b 	bl	800acd2 <atoi>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b3a      	ldr	r3, [pc, #232]	@ (80013a8 <ParseParameters+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e042      	b.n	800134c <ParseParameters+0x1e4>
            } else if (strcmp(param_name, "strobe_right1") == 0) {
 80012c6:	4939      	ldr	r1, [pc, #228]	@ (80013ac <ParseParameters+0x244>)
 80012c8:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80012cc:	f7fe ff80 	bl	80001d0 <strcmp>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d108      	bne.n	80012e8 <ParseParameters+0x180>
                *first_right_strobe = atoi(param_value);
 80012d6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80012da:	f009 fcfa 	bl	800acd2 <atoi>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <ParseParameters+0x248>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e031      	b.n	800134c <ParseParameters+0x1e4>
            } else if (strcmp(param_name, "strobe_left2") == 0) {
 80012e8:	4932      	ldr	r1, [pc, #200]	@ (80013b4 <ParseParameters+0x24c>)
 80012ea:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80012ee:	f7fe ff6f 	bl	80001d0 <strcmp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <ParseParameters+0x1a2>
                *second_left_strobe = atoi(param_value);
 80012f8:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80012fc:	f009 fce9 	bl	800acd2 <atoi>
 8001300:	4602      	mov	r2, r0
 8001302:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <ParseParameters+0x250>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e020      	b.n	800134c <ParseParameters+0x1e4>
            } else if (strcmp(param_name, "strobe_right2") == 0) {
 800130a:	492c      	ldr	r1, [pc, #176]	@ (80013bc <ParseParameters+0x254>)
 800130c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001310:	f7fe ff5e 	bl	80001d0 <strcmp>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d108      	bne.n	800132c <ParseParameters+0x1c4>
                *second_right_strobe = atoi(param_value);
 800131a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800131e:	f009 fcd8 	bl	800acd2 <atoi>
 8001322:	4602      	mov	r2, r0
 8001324:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <ParseParameters+0x258>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e00f      	b.n	800134c <ParseParameters+0x1e4>
            } else if (strcmp(param_name, "method") == 0) {
 800132c:	4925      	ldr	r1, [pc, #148]	@ (80013c4 <ParseParameters+0x25c>)
 800132e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001332:	f7fe ff4d 	bl	80001d0 <strcmp>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d107      	bne.n	800134c <ParseParameters+0x1e4>
                *method = atoi(param_value); // Парсим метод
 800133c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001340:	f009 fcc7 	bl	800acd2 <atoi>
 8001344:	4602      	mov	r2, r0
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <ParseParameters+0x260>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	601a      	str	r2, [r3, #0]
            }
        }
        token = strtok(NULL, "|");
 800134c:	490a      	ldr	r1, [pc, #40]	@ (8001378 <ParseParameters+0x210>)
 800134e:	2000      	movs	r0, #0
 8001350:	f00b fc50 	bl	800cbf4 <strtok>
 8001354:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    while (token != NULL) {
 8001358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800135c:	2b00      	cmp	r3, #0
 800135e:	f47f af27 	bne.w	80011b0 <ParseParameters+0x48>
    }

    // Устанавливаем флаг для запуска расчета
    calculate_thickness_requested = true;
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <ParseParameters+0x264>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("Parameters parsed successfully - calculation requested");
 8001368:	4819      	ldr	r0, [pc, #100]	@ (80013d0 <ParseParameters+0x268>)
 800136a:	f7ff fed9 	bl	8001120 <SendUSBDebugMessage>
}
 800136e:	bf00      	nop
 8001370:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	0800f650 	.word	0x0800f650
 800137c:	0800f654 	.word	0x0800f654
 8001380:	200094ac 	.word	0x200094ac
 8001384:	0800f660 	.word	0x0800f660
 8001388:	200094c0 	.word	0x200094c0
 800138c:	0800f66c 	.word	0x0800f66c
 8001390:	200094c4 	.word	0x200094c4
 8001394:	0800f684 	.word	0x0800f684
 8001398:	200094a8 	.word	0x200094a8
 800139c:	0800f690 	.word	0x0800f690
 80013a0:	200094c8 	.word	0x200094c8
 80013a4:	0800f6a0 	.word	0x0800f6a0
 80013a8:	200094b0 	.word	0x200094b0
 80013ac:	0800f6b0 	.word	0x0800f6b0
 80013b0:	200094b4 	.word	0x200094b4
 80013b4:	0800f6c0 	.word	0x0800f6c0
 80013b8:	200094b8 	.word	0x200094b8
 80013bc:	0800f6d0 	.word	0x0800f6d0
 80013c0:	200094bc 	.word	0x200094bc
 80013c4:	0800f6e0 	.word	0x0800f6e0
 80013c8:	200094cc 	.word	0x200094cc
 80013cc:	200094d1 	.word	0x200094d1
 80013d0:	0800f6e8 	.word	0x0800f6e8

080013d4 <SendParametersResponse>:

/**
  * @brief Отправка текущих параметров обратно в приложение
  */
void SendParametersResponse(void) {
 80013d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013d8:	b091      	sub	sp, #68	@ 0x44
 80013da:	af0e      	add	r7, sp, #56	@ 0x38
    if (!parameters_initialized) {
 80013dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001498 <SendParametersResponse+0xc4>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f083 0301 	eor.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <SendParametersResponse+0x1e>
        SendUSBDebugMessage("Parameters not initialized yet");
 80013ea:	482c      	ldr	r0, [pc, #176]	@ (800149c <SendParametersResponse+0xc8>)
 80013ec:	f7ff fe98 	bl	8001120 <SendUSBDebugMessage>
        return;
 80013f0:	e04d      	b.n	800148e <SendParametersResponse+0xba>

    snprintf(usb_msg, sizeof(usb_msg),
        "wave_speed=%.1f|threshold=%.1f|threshold_zero_crossing=%.1f|"
        "start_index=%lu|probe_length=%lu|strobe_left1=%lu|strobe_right1=%lu|"
        "strobe_left2=%lu|strobe_right2=%lu|method=%lu\r\n",
        *wave_speed, *threshold, *threshold_zero_crossing,
 80013f2:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <SendParametersResponse+0xcc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
    snprintf(usb_msg, sizeof(usb_msg),
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8b5 	bl	8000568 <__aeabi_f2d>
 80013fe:	4682      	mov	sl, r0
 8001400:	468b      	mov	fp, r1
        *wave_speed, *threshold, *threshold_zero_crossing,
 8001402:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <SendParametersResponse+0xd0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
    snprintf(usb_msg, sizeof(usb_msg),
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8ad 	bl	8000568 <__aeabi_f2d>
 800140e:	4680      	mov	r8, r0
 8001410:	4689      	mov	r9, r1
        *wave_speed, *threshold, *threshold_zero_crossing,
 8001412:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <SendParametersResponse+0xd4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
    snprintf(usb_msg, sizeof(usb_msg),
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f8a5 	bl	8000568 <__aeabi_f2d>
 800141e:	e9c7 0100 	strd	r0, r1, [r7]
 8001422:	4922      	ldr	r1, [pc, #136]	@ (80014ac <SendParametersResponse+0xd8>)
 8001424:	6809      	ldr	r1, [r1, #0]
 8001426:	6809      	ldr	r1, [r1, #0]
 8001428:	4821      	ldr	r0, [pc, #132]	@ (80014b0 <SendParametersResponse+0xdc>)
 800142a:	6800      	ldr	r0, [r0, #0]
 800142c:	6800      	ldr	r0, [r0, #0]
 800142e:	4e21      	ldr	r6, [pc, #132]	@ (80014b4 <SendParametersResponse+0xe0>)
 8001430:	6836      	ldr	r6, [r6, #0]
 8001432:	6836      	ldr	r6, [r6, #0]
 8001434:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <SendParametersResponse+0xe4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a20      	ldr	r2, [pc, #128]	@ (80014bc <SendParametersResponse+0xe8>)
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	4c1f      	ldr	r4, [pc, #124]	@ (80014c0 <SendParametersResponse+0xec>)
 8001442:	6824      	ldr	r4, [r4, #0]
 8001444:	6824      	ldr	r4, [r4, #0]
 8001446:	4d1f      	ldr	r5, [pc, #124]	@ (80014c4 <SendParametersResponse+0xf0>)
 8001448:	682d      	ldr	r5, [r5, #0]
 800144a:	682d      	ldr	r5, [r5, #0]
 800144c:	950c      	str	r5, [sp, #48]	@ 0x30
 800144e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001450:	920a      	str	r2, [sp, #40]	@ 0x28
 8001452:	9309      	str	r3, [sp, #36]	@ 0x24
 8001454:	9608      	str	r6, [sp, #32]
 8001456:	9007      	str	r0, [sp, #28]
 8001458:	9106      	str	r1, [sp, #24]
 800145a:	ed97 7b00 	vldr	d7, [r7]
 800145e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001462:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001466:	e9cd ab00 	strd	sl, fp, [sp]
 800146a:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <SendParametersResponse+0xf4>)
 800146c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001470:	4816      	ldr	r0, [pc, #88]	@ (80014cc <SendParametersResponse+0xf8>)
 8001472:	f00b fad7 	bl	800ca24 <sniprintf>
        *start_index, *probe_length, *first_left_strobe, *first_right_strobe,
        *second_left_strobe, *second_right_strobe, *method);

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001476:	4815      	ldr	r0, [pc, #84]	@ (80014cc <SendParametersResponse+0xf8>)
 8001478:	f7fe ff0a 	bl	8000290 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	b29b      	uxth	r3, r3
 8001480:	4619      	mov	r1, r3
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <SendParametersResponse+0xf8>)
 8001484:	f008 fdfa 	bl	800a07c <CDC_Transmit_FS>
    HAL_Delay(10);
 8001488:	200a      	movs	r0, #10
 800148a:	f001 fa21 	bl	80028d0 <HAL_Delay>
}
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001496:	bf00      	nop
 8001498:	200094d0 	.word	0x200094d0
 800149c:	0800f720 	.word	0x0800f720
 80014a0:	200094ac 	.word	0x200094ac
 80014a4:	200094c0 	.word	0x200094c0
 80014a8:	200094c4 	.word	0x200094c4
 80014ac:	200094a8 	.word	0x200094a8
 80014b0:	200094c8 	.word	0x200094c8
 80014b4:	200094b0 	.word	0x200094b0
 80014b8:	200094b4 	.word	0x200094b4
 80014bc:	200094b8 	.word	0x200094b8
 80014c0:	200094bc 	.word	0x200094bc
 80014c4:	200094cc 	.word	0x200094cc
 80014c8:	0800f740 	.word	0x0800f740
 80014cc:	200003d8 	.word	0x200003d8

080014d0 <NormalizeData>:
            SendUSBDebugMessage("Unknown command received");
            break;
    }
}

void NormalizeData(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 80014d6:	b098      	sub	sp, #96	@ 0x60
 80014d8:	af00      	add	r7, sp, #0
    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 80014da:	4a24      	ldr	r2, [pc, #144]	@ (800156c <NormalizeData+0x9c>)
 80014dc:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80014e0:	4823      	ldr	r0, [pc, #140]	@ (8001570 <NormalizeData+0xa0>)
 80014e2:	f009 fa7b 	bl	800a9dc <arm_mean_f32>
    float32_t subtracted_mean[DATA_VALUES_COUNT];
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <NormalizeData+0x9c>)
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	eef1 7a67 	vneg.f32	s15, s15
 80014f0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014f4:	3b60      	subs	r3, #96	@ 0x60
 80014f6:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80014fa:	4619      	mov	r1, r3
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	481b      	ldr	r0, [pc, #108]	@ (8001570 <NormalizeData+0xa0>)
 8001502:	f009 faef 	bl	800aae4 <arm_offset_f32>
    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 8001506:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800150a:	3b60      	subs	r3, #96	@ 0x60
 800150c:	4a19      	ldr	r2, [pc, #100]	@ (8001574 <NormalizeData+0xa4>)
 800150e:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 8001512:	4618      	mov	r0, r3
 8001514:	f009 fa40 	bl	800a998 <arm_std_f32>

    if (std_dev != 0.0f) {
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <NormalizeData+0xa4>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	d012      	beq.n	800154e <NormalizeData+0x7e>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <NormalizeData+0xa4>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001536:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800153a:	3b60      	subs	r3, #96	@ 0x60
 800153c:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8001540:	490b      	ldr	r1, [pc, #44]	@ (8001570 <NormalizeData+0xa0>)
 8001542:	eeb0 0a47 	vmov.f32	s0, s14
 8001546:	4618      	mov	r0, r3
 8001548:	f009 fa86 	bl	800aa58 <arm_scale_f32>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
    }
}
 800154c:	e008      	b.n	8001560 <NormalizeData+0x90>
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 800154e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001552:	3b60      	subs	r3, #96	@ 0x60
 8001554:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8001558:	4905      	ldr	r1, [pc, #20]	@ (8001570 <NormalizeData+0xa0>)
 800155a:	4618      	mov	r0, r3
 800155c:	f009 f9ea 	bl	800a934 <arm_copy_f32>
}
 8001560:	bf00      	nop
 8001562:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 8001566:	3760      	adds	r7, #96	@ 0x60
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20009498 	.word	0x20009498
 8001570:	200004d8 	.word	0x200004d8
 8001574:	2000949c 	.word	0x2000949c

08001578 <CalculateAutocorrelation>:

void CalculateAutocorrelation(void) {
 8001578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e053      	b.n	800162e <CalculateAutocorrelation+0xb6>
        double sum = 0.0;
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        uint32_t count = DATA_VALUES_COUNT - lag;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 8001598:	3318      	adds	r3, #24
 800159a:	603b      	str	r3, [r7, #0]

        for (uint32_t i = 0; i < count; i++) {
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	e026      	b.n	80015f0 <CalculateAutocorrelation+0x78>
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 80015a2:	4a28      	ldr	r2, [pc, #160]	@ (8001644 <CalculateAutocorrelation+0xcc>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffdb 	bl	8000568 <__aeabi_f2d>
 80015b2:	4680      	mov	r8, r0
 80015b4:	4689      	mov	r9, r1
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a21      	ldr	r2, [pc, #132]	@ (8001644 <CalculateAutocorrelation+0xcc>)
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffcf 	bl	8000568 <__aeabi_f2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4640      	mov	r0, r8
 80015d0:	4649      	mov	r1, r9
 80015d2:	f7ff f821 	bl	8000618 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015de:	f7fe fe65 	bl	80002ac <__adddf3>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t i = 0; i < count; i++) {
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3301      	adds	r3, #1
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3d4      	bcc.n	80015a2 <CalculateAutocorrelation+0x2a>
        }

        autocorrelation_result[lag] = (float32_t)fabs(sum / count);
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f7fe ff93 	bl	8000524 <__aeabi_ui2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001606:	f7ff f931 	bl	800086c <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4614      	mov	r4, r2
 8001610:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001614:	4620      	mov	r0, r4
 8001616:	4629      	mov	r1, r5
 8001618:	f7ff faf6 	bl	8000c08 <__aeabi_d2f>
 800161c:	4602      	mov	r2, r0
 800161e:	490a      	ldr	r1, [pc, #40]	@ (8001648 <CalculateAutocorrelation+0xd0>)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001634:	4293      	cmp	r3, r2
 8001636:	d9a6      	bls.n	8001586 <CalculateAutocorrelation+0xe>
    }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001644:	200004d8 	.word	0x200004d8
 8001648:	20004cb8 	.word	0x20004cb8

0800164c <FindMaxAutocorrelationIndex>:

uint32_t FindMaxAutocorrelationIndex(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
    if (!parameters_initialized || start_index == NULL) {
 8001652:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <FindMaxAutocorrelationIndex+0x8c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	f083 0301 	eor.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d103      	bne.n	8001668 <FindMaxAutocorrelationIndex+0x1c>
 8001660:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <FindMaxAutocorrelationIndex+0x90>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d104      	bne.n	8001672 <FindMaxAutocorrelationIndex+0x26>
        SendUSBDebugMessage("Parameters not initialized for ACF");
 8001668:	481d      	ldr	r0, [pc, #116]	@ (80016e0 <FindMaxAutocorrelationIndex+0x94>)
 800166a:	f7ff fd59 	bl	8001120 <SendUSBDebugMessage>
        return 0;
 800166e:	2300      	movs	r3, #0
 8001670:	e02d      	b.n	80016ce <FindMaxAutocorrelationIndex+0x82>
    }

    float32_t max_value = 0.0f;
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
    uint32_t max_idx = *start_index;
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <FindMaxAutocorrelationIndex+0x90>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = *start_index; i < DATA_VALUES_COUNT - *start_index; i++) {
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <FindMaxAutocorrelationIndex+0x90>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	e017      	b.n	80016ba <FindMaxAutocorrelationIndex+0x6e>
        if (autocorrelation_result[i] > max_value) {
 800168a:	4a16      	ldr	r2, [pc, #88]	@ (80016e4 <FindMaxAutocorrelationIndex+0x98>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ed97 7a03 	vldr	s14, [r7, #12]
 800169a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	d507      	bpl.n	80016b4 <FindMaxAutocorrelationIndex+0x68>
            max_value = autocorrelation_result[i];
 80016a4:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <FindMaxAutocorrelationIndex+0x98>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
            max_idx = i;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = *start_index; i < DATA_VALUES_COUNT - *start_index; i++) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <FindMaxAutocorrelationIndex+0x90>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 80016c4:	3318      	adds	r3, #24
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3de      	bcc.n	800168a <FindMaxAutocorrelationIndex+0x3e>
        }
    }

    return max_idx;
 80016cc:	68bb      	ldr	r3, [r7, #8]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200094d0 	.word	0x200094d0
 80016dc:	200094a8 	.word	0x200094a8
 80016e0:	0800f824 	.word	0x0800f824
 80016e4:	20004cb8 	.word	0x20004cb8

080016e8 <CalculateZeroCrossingThickness>:

/**
  * @brief Расчет толщины методом перехода через ноль
  */
void CalculateZeroCrossingThickness(const float32_t* data) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	@ 0x30
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized || threshold_zero_crossing == NULL || probe_length == NULL || wave_speed == NULL) {
 80016f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001870 <CalculateZeroCrossingThickness+0x188>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f083 0301 	eor.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10b      	bne.n	8001716 <CalculateZeroCrossingThickness+0x2e>
 80016fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001874 <CalculateZeroCrossingThickness+0x18c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <CalculateZeroCrossingThickness+0x2e>
 8001706:	4b5c      	ldr	r3, [pc, #368]	@ (8001878 <CalculateZeroCrossingThickness+0x190>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <CalculateZeroCrossingThickness+0x2e>
 800170e:	4b5b      	ldr	r3, [pc, #364]	@ (800187c <CalculateZeroCrossingThickness+0x194>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <CalculateZeroCrossingThickness+0x36>
        SendUSBDebugMessage("Parameters not initialized for zero crossing");
 8001716:	485a      	ldr	r0, [pc, #360]	@ (8001880 <CalculateZeroCrossingThickness+0x198>)
 8001718:	f7ff fd02 	bl	8001120 <SendUSBDebugMessage>
        return;
 800171c:	e0a5      	b.n	800186a <CalculateZeroCrossingThickness+0x182>
    }

    // ВАЖНО: вычисляем one_point_mm здесь для методов 1 и 2
    one_point_mm = 1.0f / (*wave_speed * 1000.0f * frequency);
 800171e:	4b57      	ldr	r3, [pc, #348]	@ (800187c <CalculateZeroCrossingThickness+0x194>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001884 <CalculateZeroCrossingThickness+0x19c>
 800172a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800172e:	4b56      	ldr	r3, [pc, #344]	@ (8001888 <CalculateZeroCrossingThickness+0x1a0>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001738:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800173c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001740:	4b52      	ldr	r3, [pc, #328]	@ (800188c <CalculateZeroCrossingThickness+0x1a4>)
 8001742:	edc3 7a00 	vstr	s15, [r3]

    uint32_t first_above_threshold_index = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t zero_crossing_index = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
    bool found_threshold = false;
 800174e:	2300      	movs	r3, #0
 8001750:	77fb      	strb	r3, [r7, #31]

    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	e016      	b.n	8001786 <CalculateZeroCrossingThickness+0x9e>
        if (data[i] >= *threshold_zero_crossing) {
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	4b43      	ldr	r3, [pc, #268]	@ (8001874 <CalculateZeroCrossingThickness+0x18c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	db04      	blt.n	8001780 <CalculateZeroCrossingThickness+0x98>
            first_above_threshold_index = i;
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
            found_threshold = true;
 800177a:	2301      	movs	r3, #1
 800177c:	77fb      	strb	r3, [r7, #31]
            break;
 800177e:	e007      	b.n	8001790 <CalculateZeroCrossingThickness+0xa8>
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	3301      	adds	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 800178c:	4293      	cmp	r3, r2
 800178e:	d9e3      	bls.n	8001758 <CalculateZeroCrossingThickness+0x70>
        }
    }

    if (!found_threshold) {
 8001790:	7ffb      	ldrb	r3, [r7, #31]
 8001792:	f083 0301 	eor.w	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <CalculateZeroCrossingThickness+0xbc>
        SendUSBDebugMessage("Zero crossing: threshold not found");
 800179c:	483c      	ldr	r0, [pc, #240]	@ (8001890 <CalculateZeroCrossingThickness+0x1a8>)
 800179e:	f7ff fcbf 	bl	8001120 <SendUSBDebugMessage>
        return;
 80017a2:	e062      	b.n	800186a <CalculateZeroCrossingThickness+0x182>
    }

    bool sign_positive = (data[first_above_threshold_index] >= 0);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	bfac      	ite	ge
 80017ba:	2301      	movge	r3, #1
 80017bc:	2300      	movlt	r3, #0
 80017be:	74fb      	strb	r3, [r7, #19]
    for (uint32_t i = first_above_threshold_index + 1; i < DATA_VALUES_COUNT; i++) {
 80017c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e017      	b.n	80017f8 <CalculateZeroCrossingThickness+0x110>
        bool current_sign_positive = (data[i] >= 0);
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	bfac      	ite	ge
 80017de:	2301      	movge	r3, #1
 80017e0:	2300      	movlt	r3, #0
 80017e2:	74bb      	strb	r3, [r7, #18]
        if (current_sign_positive != sign_positive) {
 80017e4:	7cba      	ldrb	r2, [r7, #18]
 80017e6:	7cfb      	ldrb	r3, [r7, #19]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d002      	beq.n	80017f2 <CalculateZeroCrossingThickness+0x10a>
            zero_crossing_index = i;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	623b      	str	r3, [r7, #32]
            break;
 80017f0:	e007      	b.n	8001802 <CalculateZeroCrossingThickness+0x11a>
    for (uint32_t i = first_above_threshold_index + 1; i < DATA_VALUES_COUNT; i++) {
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 80017fe:	4293      	cmp	r3, r2
 8001800:	d9e2      	bls.n	80017c8 <CalculateZeroCrossingThickness+0xe0>
        }
    }

    if (zero_crossing_index == 0) {
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d103      	bne.n	8001810 <CalculateZeroCrossingThickness+0x128>
        SendUSBDebugMessage("Zero crossing: zero crossing not found");
 8001808:	4822      	ldr	r0, [pc, #136]	@ (8001894 <CalculateZeroCrossingThickness+0x1ac>)
 800180a:	f7ff fc89 	bl	8001120 <SendUSBDebugMessage>
        return;
 800180e:	e02c      	b.n	800186a <CalculateZeroCrossingThickness+0x182>
    }

    uint32_t final_index = zero_crossing_index + *probe_length;
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <CalculateZeroCrossingThickness+0x190>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a3a      	ldr	r2, [r7, #32]
 8001818:	4413      	add	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
    float thickness = final_index / (2.0f * one_point_mm);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <CalculateZeroCrossingThickness+0x1a4>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001834:	edc7 7a02 	vstr	s15, [r7, #8]

    snprintf(usb_msg, sizeof(usb_msg), "Zero_crossing:%.3f\r\n", thickness);
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f7fe fe95 	bl	8000568 <__aeabi_f2d>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	e9cd 2300 	strd	r2, r3, [sp]
 8001846:	4a14      	ldr	r2, [pc, #80]	@ (8001898 <CalculateZeroCrossingThickness+0x1b0>)
 8001848:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800184c:	4813      	ldr	r0, [pc, #76]	@ (800189c <CalculateZeroCrossingThickness+0x1b4>)
 800184e:	f00b f8e9 	bl	800ca24 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001852:	4812      	ldr	r0, [pc, #72]	@ (800189c <CalculateZeroCrossingThickness+0x1b4>)
 8001854:	f7fe fd1c 	bl	8000290 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	b29b      	uxth	r3, r3
 800185c:	4619      	mov	r1, r3
 800185e:	480f      	ldr	r0, [pc, #60]	@ (800189c <CalculateZeroCrossingThickness+0x1b4>)
 8001860:	f008 fc0c 	bl	800a07c <CDC_Transmit_FS>
    HAL_Delay(10);
 8001864:	200a      	movs	r0, #10
 8001866:	f001 f833 	bl	80028d0 <HAL_Delay>
}
 800186a:	3728      	adds	r7, #40	@ 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200094d0 	.word	0x200094d0
 8001874:	200094c4 	.word	0x200094c4
 8001878:	200094c8 	.word	0x200094c8
 800187c:	200094ac 	.word	0x200094ac
 8001880:	0800f848 	.word	0x0800f848
 8001884:	447a0000 	.word	0x447a0000
 8001888:	20000000 	.word	0x20000000
 800188c:	200094a0 	.word	0x200094a0
 8001890:	0800f878 	.word	0x0800f878
 8001894:	0800f89c 	.word	0x0800f89c
 8001898:	0800f8c4 	.word	0x0800f8c4
 800189c:	200003d8 	.word	0x200003d8

080018a0 <CalculateStrobeThickness>:

/**
  * @brief Расчет толщины методом по стробам
  */
void CalculateStrobeThickness(const float32_t* data) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	@ 0x30
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized || first_left_strobe == NULL || first_right_strobe == NULL ||
 80018a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a54 <CalculateStrobeThickness+0x1b4>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	f083 0301 	eor.w	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d113      	bne.n	80018de <CalculateStrobeThickness+0x3e>
 80018b6:	4b68      	ldr	r3, [pc, #416]	@ (8001a58 <CalculateStrobeThickness+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00f      	beq.n	80018de <CalculateStrobeThickness+0x3e>
 80018be:	4b67      	ldr	r3, [pc, #412]	@ (8001a5c <CalculateStrobeThickness+0x1bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <CalculateStrobeThickness+0x3e>
        second_left_strobe == NULL || second_right_strobe == NULL || wave_speed == NULL) {
 80018c6:	4b66      	ldr	r3, [pc, #408]	@ (8001a60 <CalculateStrobeThickness+0x1c0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
    if (!parameters_initialized || first_left_strobe == NULL || first_right_strobe == NULL ||
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <CalculateStrobeThickness+0x3e>
        second_left_strobe == NULL || second_right_strobe == NULL || wave_speed == NULL) {
 80018ce:	4b65      	ldr	r3, [pc, #404]	@ (8001a64 <CalculateStrobeThickness+0x1c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <CalculateStrobeThickness+0x3e>
 80018d6:	4b64      	ldr	r3, [pc, #400]	@ (8001a68 <CalculateStrobeThickness+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <CalculateStrobeThickness+0x46>
        SendUSBDebugMessage("Parameters not initialized for strobe method");
 80018de:	4863      	ldr	r0, [pc, #396]	@ (8001a6c <CalculateStrobeThickness+0x1cc>)
 80018e0:	f7ff fc1e 	bl	8001120 <SendUSBDebugMessage>
        return;
 80018e4:	e0b2      	b.n	8001a4c <CalculateStrobeThickness+0x1ac>
    }

    // ВАЖНО: вычисляем one_point_mm здесь для методов 1 и 2
    one_point_mm = 1.0f / (*wave_speed * 1000.0f * frequency);
 80018e6:	4b60      	ldr	r3, [pc, #384]	@ (8001a68 <CalculateStrobeThickness+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001a70 <CalculateStrobeThickness+0x1d0>
 80018f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a74 <CalculateStrobeThickness+0x1d4>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001900:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001908:	4b5b      	ldr	r3, [pc, #364]	@ (8001a78 <CalculateStrobeThickness+0x1d8>)
 800190a:	edc3 7a00 	vstr	s15, [r3]

    float32_t max_value_first = -FLT_MAX;
 800190e:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index_first = *first_left_strobe;
 8001914:	4b50      	ldr	r3, [pc, #320]	@ (8001a58 <CalculateStrobeThickness+0x1b8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	623b      	str	r3, [r7, #32]
    float32_t max_value_second = -FLT_MAX;
 800191c:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8001920:	61fb      	str	r3, [r7, #28]
    uint32_t max_index_second = *second_left_strobe;
 8001922:	4b4f      	ldr	r3, [pc, #316]	@ (8001a60 <CalculateStrobeThickness+0x1c0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = *first_left_strobe; i <= *first_right_strobe; i++) {
 800192a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a58 <CalculateStrobeThickness+0x1b8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e01c      	b.n	800196e <CalculateStrobeThickness+0xce>
        if (i < DATA_VALUES_COUNT && data[i] > max_value_first) {
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 800193a:	4293      	cmp	r3, r2
 800193c:	d814      	bhi.n	8001968 <CalculateStrobeThickness+0xc8>
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800194e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001956:	d507      	bpl.n	8001968 <CalculateStrobeThickness+0xc8>
            max_value_first = data[i];
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index_first = i;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	623b      	str	r3, [r7, #32]
    for (uint32_t i = *first_left_strobe; i <= *first_right_strobe; i++) {
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <CalculateStrobeThickness+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	429a      	cmp	r2, r3
 8001978:	d9dc      	bls.n	8001934 <CalculateStrobeThickness+0x94>
        }
    }

    for (uint32_t i = *second_left_strobe; i <= *second_right_strobe; i++) {
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <CalculateStrobeThickness+0x1c0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e01c      	b.n	80019be <CalculateStrobeThickness+0x11e>
        if (i < DATA_VALUES_COUNT && data[i] > max_value_second) {
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 800198a:	4293      	cmp	r3, r2
 800198c:	d814      	bhi.n	80019b8 <CalculateStrobeThickness+0x118>
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ed97 7a07 	vldr	s14, [r7, #28]
 800199e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	d507      	bpl.n	80019b8 <CalculateStrobeThickness+0x118>
            max_value_second = data[i];
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61fb      	str	r3, [r7, #28]
            max_index_second = i;
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = *second_left_strobe; i <= *second_right_strobe; i++) {
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	3301      	adds	r3, #1
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <CalculateStrobeThickness+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d9dc      	bls.n	8001984 <CalculateStrobeThickness+0xe4>
        }
    }

    if (max_value_first == -FLT_MAX || max_value_second == -FLT_MAX) {
 80019ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019ce:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001a7c <CalculateStrobeThickness+0x1dc>
 80019d2:	eef4 7a47 	vcmp.f32	s15, s14
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d008      	beq.n	80019ee <CalculateStrobeThickness+0x14e>
 80019dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80019e0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001a7c <CalculateStrobeThickness+0x1dc>
 80019e4:	eef4 7a47 	vcmp.f32	s15, s14
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d103      	bne.n	80019f6 <CalculateStrobeThickness+0x156>
        SendUSBDebugMessage("Strobe method: max values not found");
 80019ee:	4824      	ldr	r0, [pc, #144]	@ (8001a80 <CalculateStrobeThickness+0x1e0>)
 80019f0:	f7ff fb96 	bl	8001120 <SendUSBDebugMessage>
        return;
 80019f4:	e02a      	b.n	8001a4c <CalculateStrobeThickness+0x1ac>
    }

    uint32_t index_difference = max_index_second - max_index_first;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	60fb      	str	r3, [r7, #12]
    float thickness = index_difference / (2.0f * one_point_mm);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <CalculateStrobeThickness+0x1d8>)
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a16:	edc7 7a02 	vstr	s15, [r7, #8]

    snprintf(usb_msg, sizeof(usb_msg), "Strobe:%.3f\r\n", thickness);
 8001a1a:	68b8      	ldr	r0, [r7, #8]
 8001a1c:	f7fe fda4 	bl	8000568 <__aeabi_f2d>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	e9cd 2300 	strd	r2, r3, [sp]
 8001a28:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <CalculateStrobeThickness+0x1e4>)
 8001a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a2e:	4816      	ldr	r0, [pc, #88]	@ (8001a88 <CalculateStrobeThickness+0x1e8>)
 8001a30:	f00a fff8 	bl	800ca24 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001a34:	4814      	ldr	r0, [pc, #80]	@ (8001a88 <CalculateStrobeThickness+0x1e8>)
 8001a36:	f7fe fc2b 	bl	8000290 <strlen>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4811      	ldr	r0, [pc, #68]	@ (8001a88 <CalculateStrobeThickness+0x1e8>)
 8001a42:	f008 fb1b 	bl	800a07c <CDC_Transmit_FS>
    HAL_Delay(10);
 8001a46:	200a      	movs	r0, #10
 8001a48:	f000 ff42 	bl	80028d0 <HAL_Delay>
}
 8001a4c:	3728      	adds	r7, #40	@ 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200094d0 	.word	0x200094d0
 8001a58:	200094b0 	.word	0x200094b0
 8001a5c:	200094b4 	.word	0x200094b4
 8001a60:	200094b8 	.word	0x200094b8
 8001a64:	200094bc 	.word	0x200094bc
 8001a68:	200094ac 	.word	0x200094ac
 8001a6c:	0800f8dc 	.word	0x0800f8dc
 8001a70:	447a0000 	.word	0x447a0000
 8001a74:	20000000 	.word	0x20000000
 8001a78:	200094a0 	.word	0x200094a0
 8001a7c:	ff7fffff 	.word	0xff7fffff
 8001a80:	0800f90c 	.word	0x0800f90c
 8001a84:	0800f930 	.word	0x0800f930
 8001a88:	200003d8 	.word	0x200003d8

08001a8c <CalculateAndSendACFThickness>:

/**
  * @brief Расчет толщины автокорреляционным методом и отправка результата по USB
  */
void CalculateAndSendACFThickness(void) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af02      	add	r7, sp, #8
    if (!parameters_initialized || wave_speed == NULL) {
 8001a92:	4b29      	ldr	r3, [pc, #164]	@ (8001b38 <CalculateAndSendACFThickness+0xac>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f083 0301 	eor.w	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d103      	bne.n	8001aa8 <CalculateAndSendACFThickness+0x1c>
 8001aa0:	4b26      	ldr	r3, [pc, #152]	@ (8001b3c <CalculateAndSendACFThickness+0xb0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d103      	bne.n	8001ab0 <CalculateAndSendACFThickness+0x24>
        SendUSBDebugMessage("Parameters not initialized for ACF thickness calculation");
 8001aa8:	4825      	ldr	r0, [pc, #148]	@ (8001b40 <CalculateAndSendACFThickness+0xb4>)
 8001aaa:	f7ff fb39 	bl	8001120 <SendUSBDebugMessage>
        return;
 8001aae:	e040      	b.n	8001b32 <CalculateAndSendACFThickness+0xa6>
    }

    one_point_mm = 1.0f / (*wave_speed * 1000.0f * frequency);
 8001ab0:	4b22      	ldr	r3, [pc, #136]	@ (8001b3c <CalculateAndSendACFThickness+0xb0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001b44 <CalculateAndSendACFThickness+0xb8>
 8001abc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ac0:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <CalculateAndSendACFThickness+0xbc>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <CalculateAndSendACFThickness+0xc0>)
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
    max_index = FindMaxAutocorrelationIndex();
 8001ad8:	f7ff fdb8 	bl	800164c <FindMaxAutocorrelationIndex>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <CalculateAndSendACFThickness+0xc4>)
 8001ae0:	6013      	str	r3, [r2, #0]
    float thickness = max_index / (2.0f * one_point_mm);
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <CalculateAndSendACFThickness+0xc4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <CalculateAndSendACFThickness+0xc0>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001afc:	edc7 7a01 	vstr	s15, [r7, #4]

    snprintf(usb_msg, sizeof(usb_msg), "ACF:%.3f\r\n", thickness);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7fe fd31 	bl	8000568 <__aeabi_f2d>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	e9cd 2300 	strd	r2, r3, [sp]
 8001b0e:	4a11      	ldr	r2, [pc, #68]	@ (8001b54 <CalculateAndSendACFThickness+0xc8>)
 8001b10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b14:	4810      	ldr	r0, [pc, #64]	@ (8001b58 <CalculateAndSendACFThickness+0xcc>)
 8001b16:	f00a ff85 	bl	800ca24 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001b1a:	480f      	ldr	r0, [pc, #60]	@ (8001b58 <CalculateAndSendACFThickness+0xcc>)
 8001b1c:	f7fe fbb8 	bl	8000290 <strlen>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <CalculateAndSendACFThickness+0xcc>)
 8001b28:	f008 faa8 	bl	800a07c <CDC_Transmit_FS>
    HAL_Delay(10);
 8001b2c:	200a      	movs	r0, #10
 8001b2e:	f000 fecf 	bl	80028d0 <HAL_Delay>
}
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200094d0 	.word	0x200094d0
 8001b3c:	200094ac 	.word	0x200094ac
 8001b40:	0800f940 	.word	0x0800f940
 8001b44:	447a0000 	.word	0x447a0000
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	200094a0 	.word	0x200094a0
 8001b50:	200094a4 	.word	0x200094a4
 8001b54:	0800f97c 	.word	0x0800f97c
 8001b58:	200003d8 	.word	0x200003d8

08001b5c <PrintMeasurementDataToUSB>:

void PrintMeasurementDataToUSB(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0a8      	sub	sp, #160	@ 0xa0
 8001b60:	af02      	add	r7, sp, #8
    snprintf(usb_msg, sizeof(usb_msg), "Autocorrelation Result [0-%d]:\r\n", DATA_VALUES_COUNT-1);
 8001b62:	f241 13f7 	movw	r3, #4599	@ 0x11f7
 8001b66:	4a41      	ldr	r2, [pc, #260]	@ (8001c6c <PrintMeasurementDataToUSB+0x110>)
 8001b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b6c:	4840      	ldr	r0, [pc, #256]	@ (8001c70 <PrintMeasurementDataToUSB+0x114>)
 8001b6e:	f00a ff59 	bl	800ca24 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001b72:	483f      	ldr	r0, [pc, #252]	@ (8001c70 <PrintMeasurementDataToUSB+0x114>)
 8001b74:	f7fe fb8c 	bl	8000290 <strlen>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	483c      	ldr	r0, [pc, #240]	@ (8001c70 <PrintMeasurementDataToUSB+0x114>)
 8001b80:	f008 fa7c 	bl	800a07c <CDC_Transmit_FS>
    HAL_Delay(10);
 8001b84:	200a      	movs	r0, #10
 8001b86:	f000 fea3 	bl	80028d0 <HAL_Delay>

    char data_line[128] = "";
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	2280      	movs	r2, #128	@ 0x80
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f00a ffe1 	bl	800cb5a <memset>
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b9e:	e05a      	b.n	8001c56 <PrintMeasurementDataToUSB+0xfa>
        char val_str[16];
        snprintf(val_str, sizeof(val_str), "%7.2f ", autocorrelation_result[i]);
 8001ba0:	4a34      	ldr	r2, [pc, #208]	@ (8001c74 <PrintMeasurementDataToUSB+0x118>)
 8001ba2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fcdb 	bl	8000568 <__aeabi_f2d>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	1d38      	adds	r0, r7, #4
 8001bb8:	e9cd 2300 	strd	r2, r3, [sp]
 8001bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c78 <PrintMeasurementDataToUSB+0x11c>)
 8001bbe:	2110      	movs	r1, #16
 8001bc0:	f00a ff30 	bl	800ca24 <sniprintf>
        strncat(data_line, val_str, sizeof(data_line) - strlen(data_line) - 1);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fb61 	bl	8000290 <strlen>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001bd4:	1d39      	adds	r1, r7, #4
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00a ffd2 	bl	800cb84 <strncat>

        if ((i+1) % VALUES_PER_LINE == 0 || i == DATA_VALUES_COUNT-1) {
 8001be0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001be4:	1c59      	adds	r1, r3, #1
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <PrintMeasurementDataToUSB+0x120>)
 8001be8:	fb83 2301 	smull	r2, r3, r3, r1
 8001bec:	109a      	asrs	r2, r3, #2
 8001bee:	17cb      	asrs	r3, r1, #31
 8001bf0:	1ad2      	subs	r2, r2, r3
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	1aca      	subs	r2, r1, r3
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	d005      	beq.n	8001c0c <PrintMeasurementDataToUSB+0xb0>
 8001c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c04:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d11f      	bne.n	8001c4c <PrintMeasurementDataToUSB+0xf0>
            strncat(data_line, "\r\n", sizeof(data_line) - strlen(data_line) - 1);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fb3d 	bl	8000290 <strlen>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4917      	ldr	r1, [pc, #92]	@ (8001c80 <PrintMeasurementDataToUSB+0x124>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f00a ffae 	bl	800cb84 <strncat>
            CDC_Transmit_FS((uint8_t*)data_line, strlen(data_line));
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fb2f 	bl	8000290 <strlen>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f008 fa1d 	bl	800a07c <CDC_Transmit_FS>
            HAL_Delay(10);
 8001c42:	200a      	movs	r0, #10
 8001c44:	f000 fe44 	bl	80028d0 <HAL_Delay>
            data_line[0] = '\0';
 8001c48:	2300      	movs	r3, #0
 8001c4a:	753b      	strb	r3, [r7, #20]
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001c4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c50:	3301      	adds	r3, #1
 8001c52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c5a:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	dd9e      	ble.n	8001ba0 <PrintMeasurementDataToUSB+0x44>
        }
    }
}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	3798      	adds	r7, #152	@ 0x98
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	0800f988 	.word	0x0800f988
 8001c70:	200003d8 	.word	0x200003d8
 8001c74:	20004cb8 	.word	0x20004cb8
 8001c78:	0800f9ac 	.word	0x0800f9ac
 8001c7c:	66666667 	.word	0x66666667
 8001c80:	0800f9b4 	.word	0x0800f9b4

08001c84 <CheckThreshold>:

/**
  * @brief Проверка данных на превышение threshold
  */
bool CheckThreshold(const float32_t* data) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized || threshold == NULL) {
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <CheckThreshold+0x70>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	f083 0301 	eor.w	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <CheckThreshold+0x1e>
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <CheckThreshold+0x74>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d104      	bne.n	8001cac <CheckThreshold+0x28>
        SendUSBDebugMessage("Threshold parameter not initialized");
 8001ca2:	4816      	ldr	r0, [pc, #88]	@ (8001cfc <CheckThreshold+0x78>)
 8001ca4:	f7ff fa3c 	bl	8001120 <SendUSBDebugMessage>
        return true; // Не пропускаем обработку если параметры не инициализированы
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e01e      	b.n	8001cea <CheckThreshold+0x66>
    }

    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e015      	b.n	8001cde <CheckThreshold+0x5a>
        if (fabsf(data[i]) > *threshold) {
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	eeb0 7ae7 	vabs.f32	s14, s15
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <CheckThreshold+0x74>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	dd01      	ble.n	8001cd8 <CheckThreshold+0x54>
            return false;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e008      	b.n	8001cea <CheckThreshold+0x66>
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d9e4      	bls.n	8001cb2 <CheckThreshold+0x2e>
        }
    }
    return true;
 8001ce8:	2301      	movs	r3, #1
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200094d0 	.word	0x200094d0
 8001cf8:	200094c0 	.word	0x200094c0
 8001cfc:	0800f9b8 	.word	0x0800f9b8

08001d00 <ProcessDataByMethod>:

/**
  * @brief Обработка данных в зависимости от выбранного метода
  */
void ProcessDataByMethod(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
    if (!parameters_initialized || method == NULL) {
 8001d04:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <ProcessDataByMethod+0x74>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <ProcessDataByMethod+0x1a>
 8001d12:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <ProcessDataByMethod+0x78>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <ProcessDataByMethod+0x22>
        SendUSBDebugMessage("Method parameter not initialized");
 8001d1a:	4818      	ldr	r0, [pc, #96]	@ (8001d7c <ProcessDataByMethod+0x7c>)
 8001d1c:	f7ff fa00 	bl	8001120 <SendUSBDebugMessage>
        return;
 8001d20:	e026      	b.n	8001d70 <ProcessDataByMethod+0x70>
    }

    switch (*method) {
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <ProcessDataByMethod+0x78>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d019      	beq.n	8001d60 <ProcessDataByMethod+0x60>
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d81b      	bhi.n	8001d68 <ProcessDataByMethod+0x68>
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <ProcessDataByMethod+0x3a>
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d00f      	beq.n	8001d58 <ProcessDataByMethod+0x58>
 8001d38:	e016      	b.n	8001d68 <ProcessDataByMethod+0x68>
        case 0: // Автокорреляционный метод
            // Копируем и нормализуем данные для АКФ
            arm_copy_f32(measurement_data, normalized_data, DATA_VALUES_COUNT);
 8001d3a:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8001d3e:	4910      	ldr	r1, [pc, #64]	@ (8001d80 <ProcessDataByMethod+0x80>)
 8001d40:	4810      	ldr	r0, [pc, #64]	@ (8001d84 <ProcessDataByMethod+0x84>)
 8001d42:	f008 fdf7 	bl	800a934 <arm_copy_f32>
            NormalizeData();
 8001d46:	f7ff fbc3 	bl	80014d0 <NormalizeData>
            CalculateAutocorrelation();
 8001d4a:	f7ff fc15 	bl	8001578 <CalculateAutocorrelation>
            CalculateAndSendACFThickness();
 8001d4e:	f7ff fe9d 	bl	8001a8c <CalculateAndSendACFThickness>
            PrintMeasurementDataToUSB();
 8001d52:	f7ff ff03 	bl	8001b5c <PrintMeasurementDataToUSB>
            break;
 8001d56:	e00b      	b.n	8001d70 <ProcessDataByMethod+0x70>

        case 1: // Только метод перехода через ноль
            CalculateZeroCrossingThickness(measurement_data);
 8001d58:	480a      	ldr	r0, [pc, #40]	@ (8001d84 <ProcessDataByMethod+0x84>)
 8001d5a:	f7ff fcc5 	bl	80016e8 <CalculateZeroCrossingThickness>
            break;
 8001d5e:	e007      	b.n	8001d70 <ProcessDataByMethod+0x70>

        case 2: // Только метод по стробам
            CalculateStrobeThickness(measurement_data);
 8001d60:	4808      	ldr	r0, [pc, #32]	@ (8001d84 <ProcessDataByMethod+0x84>)
 8001d62:	f7ff fd9d 	bl	80018a0 <CalculateStrobeThickness>
            break;
 8001d66:	e003      	b.n	8001d70 <ProcessDataByMethod+0x70>

        default:
            SendUSBDebugMessage("Unknown method specified");
 8001d68:	4807      	ldr	r0, [pc, #28]	@ (8001d88 <ProcessDataByMethod+0x88>)
 8001d6a:	f7ff f9d9 	bl	8001120 <SendUSBDebugMessage>
            break;
 8001d6e:	bf00      	nop
    }
}
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200094d0 	.word	0x200094d0
 8001d78:	200094cc 	.word	0x200094cc
 8001d7c:	0800f9dc 	.word	0x0800f9dc
 8001d80:	200004d8 	.word	0x200004d8
 8001d84:	0800fabc 	.word	0x0800fabc
 8001d88:	0800fa00 	.word	0x0800fa00

08001d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d90:	f000 fd2c 	bl	80027ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d94:	f000 f870 	bl	8001e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d98:	f000 f97a 	bl	8002090 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001d9c:	f000 f94e 	bl	800203c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001da0:	f008 f872 	bl	8009e88 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 8001da4:	f000 f8d2 	bl	8001f4c <MX_DAC_Init>
  MX_TIM3_Init();
 8001da8:	f000 f8fa 	bl	8001fa0 <MX_TIM3_Init>
  MX_FSMC_Init();
 8001dac:	f000 fa30 	bl	8002210 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001db0:	4825      	ldr	r0, [pc, #148]	@ (8001e48 <main+0xbc>)
 8001db2:	f003 f907 	bl	8004fc4 <HAL_TIM_Base_Start>
  // one_point_mm будет вычисляться позже, когда wave_speed будет установлен
  srand(HAL_GetTick());
 8001db6:	f000 fd7f 	bl	80028b8 <HAL_GetTick>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f009 f843 	bl	800ae48 <srand>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
      if (new_data_received) { SendUSBDebugMessage("Unknown method specified");
 8001dc2:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <main+0xc0>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01c      	beq.n	8001e06 <main+0x7a>
 8001dcc:	4820      	ldr	r0, [pc, #128]	@ (8001e50 <main+0xc4>)
 8001dce:	f7ff f9a7 	bl	8001120 <SendUSBDebugMessage>
          // Проверяем, является ли сообщение командой SETPARAMS
          if (strncmp((char*)usb_rx_buffer, "SETPARAMS=", 10) == 0) {
 8001dd2:	220a      	movs	r2, #10
 8001dd4:	491f      	ldr	r1, [pc, #124]	@ (8001e54 <main+0xc8>)
 8001dd6:	4820      	ldr	r0, [pc, #128]	@ (8001e58 <main+0xcc>)
 8001dd8:	f00a fee7 	bl	800cbaa <strncmp>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d105      	bne.n	8001dee <main+0x62>
              // Парсим параметры
              ParseParameters((char*)usb_rx_buffer + 10);
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <main+0xd0>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f9bf 	bl	8001168 <ParseParameters>

              // Отправляем подтверждение с текущими значениями
              SendParametersResponse();
 8001dea:	f7ff faf3 	bl	80013d4 <SendParametersResponse>
          }
          // Сбрасываем буфер и флаг
          memset((void*)usb_rx_buffer, 0, USB_RX_BUFFER_SIZE);
 8001dee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001df2:	2100      	movs	r1, #0
 8001df4:	4818      	ldr	r0, [pc, #96]	@ (8001e58 <main+0xcc>)
 8001df6:	f00a feb0 	bl	800cb5a <memset>
          usb_rx_index = 0;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <main+0xd4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	801a      	strh	r2, [r3, #0]
          new_data_received = 0;
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <main+0xc0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
      }

      // Проверяем, нужно ли выполнить расчет толщин
      if (calculate_thickness_requested && parameters_initialized) {
 8001e06:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <main+0xd8>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d018      	beq.n	8001e40 <main+0xb4>
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <main+0xdc>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d014      	beq.n	8001e40 <main+0xb4>
          calculate_thickness_requested = false; // Сбрасываем флаг
 8001e16:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <main+0xd8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]

          if (!CheckThreshold(measurement_data)) {
 8001e1c:	4813      	ldr	r0, [pc, #76]	@ (8001e6c <main+0xe0>)
 8001e1e:	f7ff ff31 	bl	8001c84 <CheckThreshold>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f083 0301 	eor.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <main+0xaa>
              SendUSBDebugMessage("Data exceeds threshold, skipping processing");
 8001e2e:	4810      	ldr	r0, [pc, #64]	@ (8001e70 <main+0xe4>)
 8001e30:	f7ff f976 	bl	8001120 <SendUSBDebugMessage>
 8001e34:	e004      	b.n	8001e40 <main+0xb4>
          } else {
              // Обрабатываем данные в зависимости от выбранного метода
              ProcessDataByMethod();
 8001e36:	f7ff ff63 	bl	8001d00 <ProcessDataByMethod>
              SendUSBDebugMessage("Thickness calculation completed");
 8001e3a:	480e      	ldr	r0, [pc, #56]	@ (8001e74 <main+0xe8>)
 8001e3c:	f7ff f970 	bl	8001120 <SendUSBDebugMessage>
          }
      }

      HAL_Delay(100);
 8001e40:	2064      	movs	r0, #100	@ 0x64
 8001e42:	f000 fd45 	bl	80028d0 <HAL_Delay>
      if (new_data_received) { SendUSBDebugMessage("Unknown method specified");
 8001e46:	e7bc      	b.n	8001dc2 <main+0x36>
 8001e48:	200002f8 	.word	0x200002f8
 8001e4c:	200098c2 	.word	0x200098c2
 8001e50:	0800fa00 	.word	0x0800fa00
 8001e54:	0800fa1c 	.word	0x0800fa1c
 8001e58:	200097c0 	.word	0x200097c0
 8001e5c:	200097ca 	.word	0x200097ca
 8001e60:	200098c0 	.word	0x200098c0
 8001e64:	200094d1 	.word	0x200094d1
 8001e68:	200094d0 	.word	0x200094d0
 8001e6c:	0800fabc 	.word	0x0800fabc
 8001e70:	0800fa28 	.word	0x0800fa28
 8001e74:	0800fa54 	.word	0x0800fa54

08001e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b094      	sub	sp, #80	@ 0x50
 8001e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	2230      	movs	r2, #48	@ 0x30
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f00a fe67 	bl	800cb5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <SystemClock_Config+0xcc>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <SystemClock_Config+0xcc>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <SystemClock_Config+0xcc>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <SystemClock_Config+0xd0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a21      	ldr	r2, [pc, #132]	@ (8001f48 <SystemClock_Config+0xd0>)
 8001ec2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <SystemClock_Config+0xd0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ef0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efa:	f107 0320 	add.w	r3, r7, #32
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 fb30 	bl	8004564 <HAL_RCC_OscConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f0a:	f000 f9e1 	bl	80022d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f0e:	230f      	movs	r3, #15
 8001f10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f12:	2302      	movs	r3, #2
 8001f14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	2105      	movs	r1, #5
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 fd91 	bl	8004a54 <HAL_RCC_ClockConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f38:	f000 f9ca 	bl	80022d0 <Error_Handler>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3750      	adds	r7, #80	@ 0x50
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40007000 	.word	0x40007000

08001f4c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f52:	463b      	mov	r3, r7
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <MX_DAC_Init+0x4c>)
 8001f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f9c <MX_DAC_Init+0x50>)
 8001f5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f60:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <MX_DAC_Init+0x4c>)
 8001f62:	f000 fdea 	bl	8002b3a <HAL_DAC_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001f6c:	f000 f9b0 	bl	80022d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4806      	ldr	r0, [pc, #24]	@ (8001f98 <MX_DAC_Init+0x4c>)
 8001f80:	f000 fdfd 	bl	8002b7e <HAL_DAC_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001f8a:	f000 f9a1 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200002e4 	.word	0x200002e4
 8001f9c:	40007400 	.word	0x40007400

08001fa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <MX_TIM3_Init+0x98>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fc4:	22a7      	movs	r2, #167	@ 0xa7
 8001fc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fde:	2280      	movs	r2, #128	@ 0x80
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fe2:	4814      	ldr	r0, [pc, #80]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fe4:	f002 ff9e 	bl	8004f24 <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001fee:	f000 f96f 	bl	80022d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	480d      	ldr	r0, [pc, #52]	@ (8002034 <MX_TIM3_Init+0x94>)
 8002000:	f003 f938 	bl	8005274 <HAL_TIM_ConfigClockSource>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800200a:	f000 f961 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002016:	463b      	mov	r3, r7
 8002018:	4619      	mov	r1, r3
 800201a:	4806      	ldr	r0, [pc, #24]	@ (8002034 <MX_TIM3_Init+0x94>)
 800201c:	f003 fb64 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002026:	f000 f953 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200002f8 	.word	0x200002f8
 8002038:	40000400 	.word	0x40000400

0800203c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <MX_USART1_UART_Init+0x4c>)
 8002042:	4a12      	ldr	r2, [pc, #72]	@ (800208c <MX_USART1_UART_Init+0x50>)
 8002044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <MX_USART1_UART_Init+0x4c>)
 8002048:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800204c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <MX_USART1_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <MX_USART1_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <MX_USART1_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <MX_USART1_UART_Init+0x4c>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <MX_USART1_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <MX_USART1_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	@ (8002088 <MX_USART1_UART_Init+0x4c>)
 8002074:	f003 fbc8 	bl	8005808 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800207e:	f000 f927 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000340 	.word	0x20000340
 800208c:	40011000 	.word	0x40011000

08002090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	@ 0x30
 8002094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	4b54      	ldr	r3, [pc, #336]	@ (80021fc <MX_GPIO_Init+0x16c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	4a53      	ldr	r2, [pc, #332]	@ (80021fc <MX_GPIO_Init+0x16c>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b6:	4b51      	ldr	r3, [pc, #324]	@ (80021fc <MX_GPIO_Init+0x16c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	4b4d      	ldr	r3, [pc, #308]	@ (80021fc <MX_GPIO_Init+0x16c>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	4a4c      	ldr	r2, [pc, #304]	@ (80021fc <MX_GPIO_Init+0x16c>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d2:	4b4a      	ldr	r3, [pc, #296]	@ (80021fc <MX_GPIO_Init+0x16c>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	4b46      	ldr	r3, [pc, #280]	@ (80021fc <MX_GPIO_Init+0x16c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4a45      	ldr	r2, [pc, #276]	@ (80021fc <MX_GPIO_Init+0x16c>)
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <MX_GPIO_Init+0x16c>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b3f      	ldr	r3, [pc, #252]	@ (80021fc <MX_GPIO_Init+0x16c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4a3e      	ldr	r2, [pc, #248]	@ (80021fc <MX_GPIO_Init+0x16c>)
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4b3c      	ldr	r3, [pc, #240]	@ (80021fc <MX_GPIO_Init+0x16c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b38      	ldr	r3, [pc, #224]	@ (80021fc <MX_GPIO_Init+0x16c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	4a37      	ldr	r2, [pc, #220]	@ (80021fc <MX_GPIO_Init+0x16c>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6313      	str	r3, [r2, #48]	@ 0x30
 8002126:	4b35      	ldr	r3, [pc, #212]	@ (80021fc <MX_GPIO_Init+0x16c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b31      	ldr	r3, [pc, #196]	@ (80021fc <MX_GPIO_Init+0x16c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a30      	ldr	r2, [pc, #192]	@ (80021fc <MX_GPIO_Init+0x16c>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b2e      	ldr	r3, [pc, #184]	@ (80021fc <MX_GPIO_Init+0x16c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f248 0120 	movw	r1, #32800	@ 0x8020
 8002154:	482a      	ldr	r0, [pc, #168]	@ (8002200 <MX_GPIO_Init+0x170>)
 8002156:	f000 ff99 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8002160:	4828      	ldr	r0, [pc, #160]	@ (8002204 <MX_GPIO_Init+0x174>)
 8002162:	f000 ff93 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	2140      	movs	r1, #64	@ 0x40
 800216a:	4827      	ldr	r0, [pc, #156]	@ (8002208 <MX_GPIO_Init+0x178>)
 800216c:	f000 ff8e 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002170:	2200      	movs	r2, #0
 8002172:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002176:	4825      	ldr	r0, [pc, #148]	@ (800220c <MX_GPIO_Init+0x17c>)
 8002178:	f000 ff88 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 800217c:	f248 0320 	movw	r3, #32800	@ 0x8020
 8002180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002182:	2301      	movs	r3, #1
 8002184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	4619      	mov	r1, r3
 8002194:	481a      	ldr	r0, [pc, #104]	@ (8002200 <MX_GPIO_Init+0x170>)
 8002196:	f000 fddd 	bl	8002d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800219a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800219e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	4814      	ldr	r0, [pc, #80]	@ (8002204 <MX_GPIO_Init+0x174>)
 80021b4:	f000 fdce 	bl	8002d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021b8:	2340      	movs	r3, #64	@ 0x40
 80021ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021bc:	2301      	movs	r3, #1
 80021be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	4619      	mov	r1, r3
 80021ce:	480e      	ldr	r0, [pc, #56]	@ (8002208 <MX_GPIO_Init+0x178>)
 80021d0:	f000 fdc0 	bl	8002d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021da:	2301      	movs	r3, #1
 80021dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	4619      	mov	r1, r3
 80021ec:	4807      	ldr	r0, [pc, #28]	@ (800220c <MX_GPIO_Init+0x17c>)
 80021ee:	f000 fdb1 	bl	8002d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80021f2:	bf00      	nop
 80021f4:	3730      	adds	r7, #48	@ 0x30
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020000 	.word	0x40020000
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40020400 	.word	0x40020400

08002210 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
 8002224:	615a      	str	r2, [r3, #20]
 8002226:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002228:	4b27      	ldr	r3, [pc, #156]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 800222a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800222e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002230:	4b25      	ldr	r3, [pc, #148]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002232:	4a26      	ldr	r2, [pc, #152]	@ (80022cc <MX_FSMC_Init+0xbc>)
 8002234:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002236:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 800223e:	2202      	movs	r2, #2
 8002240:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 8002242:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002244:	2204      	movs	r2, #4
 8002246:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002248:	4b1f      	ldr	r3, [pc, #124]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 800224a:	2210      	movs	r2, #16
 800224c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800224e:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002254:	4b1c      	ldr	r3, [pc, #112]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800225a:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002266:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002268:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800226c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800226e:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002270:	2200      	movs	r2, #0
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002276:	2200      	movs	r2, #0
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800227a:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 800227c:	2200      	movs	r2, #0
 800227e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002282:	2200      	movs	r2, #0
 8002284:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 8002288:	2200      	movs	r2, #0
 800228a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800228c:	230f      	movs	r3, #15
 800228e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002290:	230f      	movs	r3, #15
 8002292:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002294:	23ff      	movs	r3, #255	@ 0xff
 8002296:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002298:	230f      	movs	r3, #15
 800229a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800229c:	2310      	movs	r3, #16
 800229e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80022a0:	2311      	movs	r3, #17
 80022a2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	2200      	movs	r2, #0
 80022ac:	4619      	mov	r1, r3
 80022ae:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <MX_FSMC_Init+0xb8>)
 80022b0:	f002 fdf0 	bl	8004e94 <HAL_SRAM_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80022ba:	f000 f809 	bl	80022d0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80022be:	bf00      	nop
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000388 	.word	0x20000388
 80022cc:	a0000104 	.word	0xa0000104

080022d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <Error_Handler+0x4>

080022d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <HAL_MspInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <HAL_MspInit+0x4c>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_MspInit+0x4c>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <HAL_MspInit+0x4c>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	4a08      	ldr	r2, [pc, #32]	@ (8002324 <HAL_MspInit+0x4c>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	@ 0x40
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_MspInit+0x4c>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a17      	ldr	r2, [pc, #92]	@ (80023a4 <HAL_DAC_MspInit+0x7c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d127      	bne.n	800239a <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_DAC_MspInit+0x80>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	4a15      	ldr	r2, [pc, #84]	@ (80023a8 <HAL_DAC_MspInit+0x80>)
 8002354:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002358:	6413      	str	r3, [r2, #64]	@ 0x40
 800235a:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <HAL_DAC_MspInit+0x80>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <HAL_DAC_MspInit+0x80>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a0e      	ldr	r2, [pc, #56]	@ (80023a8 <HAL_DAC_MspInit+0x80>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <HAL_DAC_MspInit+0x80>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002382:	2310      	movs	r3, #16
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002386:	2303      	movs	r3, #3
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	@ (80023ac <HAL_DAC_MspInit+0x84>)
 8002396:	f000 fcdd 	bl	8002d54 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 800239a:	bf00      	nop
 800239c:	3728      	adds	r7, #40	@ 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40007400 	.word	0x40007400
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020000 	.word	0x40020000

080023b0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0e      	ldr	r2, [pc, #56]	@ (80023f8 <HAL_TIM_Base_MspInit+0x48>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d115      	bne.n	80023ee <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_TIM_Base_MspInit+0x4c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a0c      	ldr	r2, [pc, #48]	@ (80023fc <HAL_TIM_Base_MspInit+0x4c>)
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <HAL_TIM_Base_MspInit+0x4c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	201d      	movs	r0, #29
 80023e4:	f000 fb73 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023e8:	201d      	movs	r0, #29
 80023ea:	f000 fb8c 	bl	8002b06 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40000400 	.word	0x40000400
 80023fc:	40023800 	.word	0x40023800

08002400 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1d      	ldr	r2, [pc, #116]	@ (8002494 <HAL_UART_MspInit+0x94>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d133      	bne.n	800248a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <HAL_UART_MspInit+0x98>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	4a1b      	ldr	r2, [pc, #108]	@ (8002498 <HAL_UART_MspInit+0x98>)
 800242c:	f043 0310 	orr.w	r3, r3, #16
 8002430:	6453      	str	r3, [r2, #68]	@ 0x44
 8002432:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_UART_MspInit+0x98>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <HAL_UART_MspInit+0x98>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a14      	ldr	r2, [pc, #80]	@ (8002498 <HAL_UART_MspInit+0x98>)
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <HAL_UART_MspInit+0x98>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800245a:	23c0      	movs	r3, #192	@ 0xc0
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800246a:	2307      	movs	r3, #7
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	4809      	ldr	r0, [pc, #36]	@ (800249c <HAL_UART_MspInit+0x9c>)
 8002476:	f000 fc6d 	bl	8002d54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	2025      	movs	r0, #37	@ 0x25
 8002480:	f000 fb25 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002484:	2025      	movs	r0, #37	@ 0x25
 8002486:	f000 fb3e 	bl	8002b06 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800248a:	bf00      	nop
 800248c:	3728      	adds	r7, #40	@ 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40011000 	.word	0x40011000
 8002498:	40023800 	.word	0x40023800
 800249c:	40020400 	.word	0x40020400

080024a0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80024b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <HAL_FSMC_MspInit+0x88>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d131      	bne.n	8002520 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80024bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <HAL_FSMC_MspInit+0x88>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_FSMC_MspInit+0x8c>)
 80024c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ca:	4a18      	ldr	r2, [pc, #96]	@ (800252c <HAL_FSMC_MspInit+0x8c>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80024d2:	4b16      	ldr	r3, [pc, #88]	@ (800252c <HAL_FSMC_MspInit+0x8c>)
 80024d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80024de:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80024e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80024f0:	230c      	movs	r3, #12
 80024f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	480d      	ldr	r0, [pc, #52]	@ (8002530 <HAL_FSMC_MspInit+0x90>)
 80024fa:	f000 fc2b 	bl	8002d54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80024fe:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 8002502:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002510:	230c      	movs	r3, #12
 8002512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	4619      	mov	r1, r3
 8002518:	4806      	ldr	r0, [pc, #24]	@ (8002534 <HAL_FSMC_MspInit+0x94>)
 800251a:	f000 fc1b 	bl	8002d54 <HAL_GPIO_Init>
 800251e:	e000      	b.n	8002522 <HAL_FSMC_MspInit+0x82>
    return;
 8002520:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200094d4 	.word	0x200094d4
 800252c:	40023800 	.word	0x40023800
 8002530:	40021000 	.word	0x40021000
 8002534:	40020c00 	.word	0x40020c00

08002538 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002540:	f7ff ffae 	bl	80024a0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <NMI_Handler+0x4>

08002554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <HardFault_Handler+0x4>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <MemManage_Handler+0x4>

08002564 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <UsageFault_Handler+0x4>

08002574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a2:	f000 f975 	bl	8002890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025b0:	4802      	ldr	r0, [pc, #8]	@ (80025bc <TIM3_IRQHandler+0x10>)
 80025b2:	f002 fd6f 	bl	8005094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200002f8 	.word	0x200002f8

080025c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <USART1_IRQHandler+0x10>)
 80025c6:	f003 f96f 	bl	80058a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000340 	.word	0x20000340

080025d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025d8:	4802      	ldr	r0, [pc, #8]	@ (80025e4 <OTG_FS_IRQHandler+0x10>)
 80025da:	f000 feb4 	bl	8003346 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	2000aac4 	.word	0x2000aac4

080025e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return 1;
 80025ec:	2301      	movs	r3, #1
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_kill>:

int _kill(int pid, int sig)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002602:	f00a fbad 	bl	800cd60 <__errno>
 8002606:	4603      	mov	r3, r0
 8002608:	2216      	movs	r2, #22
 800260a:	601a      	str	r2, [r3, #0]
  return -1;
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_exit>:

void _exit (int status)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ffe7 	bl	80025f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800262a:	bf00      	nop
 800262c:	e7fd      	b.n	800262a <_exit+0x12>

0800262e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e00a      	b.n	8002656 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002640:	f3af 8000 	nop.w
 8002644:	4601      	mov	r1, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	60ba      	str	r2, [r7, #8]
 800264c:	b2ca      	uxtb	r2, r1
 800264e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	429a      	cmp	r2, r3
 800265c:	dbf0      	blt.n	8002640 <_read+0x12>
  }

  return len;
 800265e:	687b      	ldr	r3, [r7, #4]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e009      	b.n	800268e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	60ba      	str	r2, [r7, #8]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3301      	adds	r3, #1
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	dbf1      	blt.n	800267a <_write+0x12>
  }
  return len;
 8002696:	687b      	ldr	r3, [r7, #4]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_close>:

int _close(int file)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026c8:	605a      	str	r2, [r3, #4]
  return 0;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_isatty>:

int _isatty(int file)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026e0:	2301      	movs	r3, #1
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002710:	4a14      	ldr	r2, [pc, #80]	@ (8002764 <_sbrk+0x5c>)
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <_sbrk+0x60>)
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800271c:	4b13      	ldr	r3, [pc, #76]	@ (800276c <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <_sbrk+0x64>)
 8002726:	4a12      	ldr	r2, [pc, #72]	@ (8002770 <_sbrk+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272a:	4b10      	ldr	r3, [pc, #64]	@ (800276c <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	429a      	cmp	r2, r3
 8002736:	d207      	bcs.n	8002748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002738:	f00a fb12 	bl	800cd60 <__errno>
 800273c:	4603      	mov	r3, r0
 800273e:	220c      	movs	r2, #12
 8002740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	e009      	b.n	800275c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <_sbrk+0x64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274e:	4b07      	ldr	r3, [pc, #28]	@ (800276c <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	4a05      	ldr	r2, [pc, #20]	@ (800276c <_sbrk+0x64>)
 8002758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20020000 	.word	0x20020000
 8002768:	00000400 	.word	0x00000400
 800276c:	200094d8 	.word	0x200094d8
 8002770:	2000b318 	.word	0x2000b318

08002774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <SystemInit+0x20>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	4a05      	ldr	r2, [pc, #20]	@ (8002794 <SystemInit+0x20>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002798:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800279c:	f7ff ffea 	bl	8002774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027a0:	480c      	ldr	r0, [pc, #48]	@ (80027d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027a2:	490d      	ldr	r1, [pc, #52]	@ (80027d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027a4:	4a0d      	ldr	r2, [pc, #52]	@ (80027dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a8:	e002      	b.n	80027b0 <LoopCopyDataInit>

080027aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ae:	3304      	adds	r3, #4

080027b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b4:	d3f9      	bcc.n	80027aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b6:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027b8:	4c0a      	ldr	r4, [pc, #40]	@ (80027e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027bc:	e001      	b.n	80027c2 <LoopFillZerobss>

080027be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c0:	3204      	adds	r2, #4

080027c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c4:	d3fb      	bcc.n	80027be <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80027c6:	f00a fad1 	bl	800cd6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ca:	f7ff fadf 	bl	8001d8c <main>
  bx  lr    
 80027ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d8:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 80027dc:	080147a0 	.word	0x080147a0
  ldr r2, =_sbss
 80027e0:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80027e4:	2000b314 	.word	0x2000b314

080027e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC_IRQHandler>
	...

080027ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027f0:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0d      	ldr	r2, [pc, #52]	@ (800282c <HAL_Init+0x40>)
 80027f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <HAL_Init+0x40>)
 8002802:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002808:	4b08      	ldr	r3, [pc, #32]	@ (800282c <HAL_Init+0x40>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a07      	ldr	r2, [pc, #28]	@ (800282c <HAL_Init+0x40>)
 800280e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002814:	2003      	movs	r0, #3
 8002816:	f000 f94f 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281a:	200f      	movs	r0, #15
 800281c:	f000 f808 	bl	8002830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002820:	f7ff fd5a 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00

08002830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002838:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <HAL_InitTick+0x54>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <HAL_InitTick+0x58>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002846:	fbb3 f3f1 	udiv	r3, r3, r1
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f967 	bl	8002b22 <HAL_SYSTICK_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e00e      	b.n	800287c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b0f      	cmp	r3, #15
 8002862:	d80a      	bhi.n	800287a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002864:	2200      	movs	r2, #0
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f000 f92f 	bl	8002ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002870:	4a06      	ldr	r2, [pc, #24]	@ (800288c <HAL_InitTick+0x5c>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e000      	b.n	800287c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000004 	.word	0x20000004
 8002888:	2000000c 	.word	0x2000000c
 800288c:	20000008 	.word	0x20000008

08002890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_IncTick+0x20>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_IncTick+0x24>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <HAL_IncTick+0x24>)
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	2000000c 	.word	0x2000000c
 80028b4:	200094dc 	.word	0x200094dc

080028b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return uwTick;
 80028bc:	4b03      	ldr	r3, [pc, #12]	@ (80028cc <HAL_GetTick+0x14>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	200094dc 	.word	0x200094dc

080028d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff ffee 	bl	80028b8 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d005      	beq.n	80028f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <HAL_Delay+0x44>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028f6:	bf00      	nop
 80028f8:	f7ff ffde 	bl	80028b8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	429a      	cmp	r2, r3
 8002906:	d8f7      	bhi.n	80028f8 <HAL_Delay+0x28>
  {
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	2000000c 	.word	0x2000000c

08002918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002928:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002934:	4013      	ands	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294a:	4a04      	ldr	r2, [pc, #16]	@ (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	60d3      	str	r3, [r2, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002964:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <__NVIC_GetPriorityGrouping+0x18>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	f003 0307 	and.w	r3, r3, #7
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0b      	blt.n	80029a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4907      	ldr	r1, [pc, #28]	@ (80029b4 <__NVIC_EnableIRQ+0x38>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	db0a      	blt.n	80029e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	490c      	ldr	r1, [pc, #48]	@ (8002a04 <__NVIC_SetPriority+0x4c>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	440b      	add	r3, r1
 80029dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e0:	e00a      	b.n	80029f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4908      	ldr	r1, [pc, #32]	@ (8002a08 <__NVIC_SetPriority+0x50>)
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3b04      	subs	r3, #4
 80029f0:	0112      	lsls	r2, r2, #4
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	440b      	add	r3, r1
 80029f6:	761a      	strb	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000e100 	.word	0xe000e100
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	@ 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f1c3 0307 	rsb	r3, r3, #7
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	bf28      	it	cs
 8002a2a:	2304      	movcs	r3, #4
 8002a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d902      	bls.n	8002a3c <NVIC_EncodePriority+0x30>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3b03      	subs	r3, #3
 8002a3a:	e000      	b.n	8002a3e <NVIC_EncodePriority+0x32>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	4313      	orrs	r3, r2
         );
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	@ 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a84:	d301      	bcc.n	8002a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00f      	b.n	8002aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <SysTick_Config+0x40>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a92:	210f      	movs	r1, #15
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f7ff ff8e 	bl	80029b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <SysTick_Config+0x40>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <SysTick_Config+0x40>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff29 	bl	8002918 <__NVIC_SetPriorityGrouping>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae0:	f7ff ff3e 	bl	8002960 <__NVIC_GetPriorityGrouping>
 8002ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f7ff ff8e 	bl	8002a0c <NVIC_EncodePriority>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff5d 	bl	80029b8 <__NVIC_SetPriority>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff31 	bl	800297c <__NVIC_EnableIRQ>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffa2 	bl	8002a74 <SysTick_Config>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e014      	b.n	8002b76 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	791b      	ldrb	r3, [r3, #4]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff fbe3 	bl	8002328 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b089      	sub	sp, #36	@ 0x24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_DAC_ConfigChannel+0x1c>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e042      	b.n	8002c24 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	795b      	ldrb	r3, [r3, #5]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_DAC_ConfigChannel+0x2c>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e03c      	b.n	8002c24 <HAL_DAC_ConfigChannel+0xa6>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6819      	ldr	r1, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	22c0      	movs	r2, #192	@ 0xc0
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	400a      	ands	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3724      	adds	r7, #36	@ 0x24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c3e:	f7ff fe3b 	bl	80028b8 <HAL_GetTick>
 8002c42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d008      	beq.n	8002c62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e052      	b.n	8002d08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0216 	bic.w	r2, r2, #22
 8002c70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_DMA_Abort+0x62>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0208 	bic.w	r2, r2, #8
 8002ca0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0201 	bic.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb2:	e013      	b.n	8002cdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cb4:	f7ff fe00 	bl	80028b8 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d90c      	bls.n	8002cdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e015      	b.n	8002d08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1e4      	bne.n	8002cb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cee:	223f      	movs	r2, #63	@ 0x3f
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d004      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2280      	movs	r2, #128	@ 0x80
 8002d28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00c      	b.n	8002d48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2205      	movs	r2, #5
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0201 	bic.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	@ 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e16b      	b.n	8003048 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d70:	2201      	movs	r2, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	f040 815a 	bne.w	8003042 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d005      	beq.n	8002da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d130      	bne.n	8002e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 0201 	and.w	r2, r3, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d017      	beq.n	8002e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d123      	bne.n	8002e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	08da      	lsrs	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3208      	adds	r2, #8
 8002e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	08da      	lsrs	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3208      	adds	r2, #8
 8002e92:	69b9      	ldr	r1, [r7, #24]
 8002e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0203 	and.w	r2, r3, #3
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80b4 	beq.w	8003042 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b60      	ldr	r3, [pc, #384]	@ (8003060 <HAL_GPIO_Init+0x30c>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	4a5f      	ldr	r2, [pc, #380]	@ (8003060 <HAL_GPIO_Init+0x30c>)
 8002ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eea:	4b5d      	ldr	r3, [pc, #372]	@ (8003060 <HAL_GPIO_Init+0x30c>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef6:	4a5b      	ldr	r2, [pc, #364]	@ (8003064 <HAL_GPIO_Init+0x310>)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	3302      	adds	r3, #2
 8002efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	@ (8003068 <HAL_GPIO_Init+0x314>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02b      	beq.n	8002f7a <HAL_GPIO_Init+0x226>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a51      	ldr	r2, [pc, #324]	@ (800306c <HAL_GPIO_Init+0x318>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d025      	beq.n	8002f76 <HAL_GPIO_Init+0x222>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a50      	ldr	r2, [pc, #320]	@ (8003070 <HAL_GPIO_Init+0x31c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01f      	beq.n	8002f72 <HAL_GPIO_Init+0x21e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a4f      	ldr	r2, [pc, #316]	@ (8003074 <HAL_GPIO_Init+0x320>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d019      	beq.n	8002f6e <HAL_GPIO_Init+0x21a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a4e      	ldr	r2, [pc, #312]	@ (8003078 <HAL_GPIO_Init+0x324>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_GPIO_Init+0x216>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a4d      	ldr	r2, [pc, #308]	@ (800307c <HAL_GPIO_Init+0x328>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00d      	beq.n	8002f66 <HAL_GPIO_Init+0x212>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8003080 <HAL_GPIO_Init+0x32c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d007      	beq.n	8002f62 <HAL_GPIO_Init+0x20e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4b      	ldr	r2, [pc, #300]	@ (8003084 <HAL_GPIO_Init+0x330>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <HAL_GPIO_Init+0x20a>
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	e00e      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f5e:	2308      	movs	r3, #8
 8002f60:	e00c      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f62:	2306      	movs	r3, #6
 8002f64:	e00a      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f66:	2305      	movs	r3, #5
 8002f68:	e008      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e004      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e002      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	f002 0203 	and.w	r2, r2, #3
 8002f82:	0092      	lsls	r2, r2, #2
 8002f84:	4093      	lsls	r3, r2
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f8c:	4935      	ldr	r1, [pc, #212]	@ (8003064 <HAL_GPIO_Init+0x310>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fbe:	4a32      	ldr	r2, [pc, #200]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc4:	4b30      	ldr	r3, [pc, #192]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe8:	4a27      	ldr	r2, [pc, #156]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fee:	4b26      	ldr	r3, [pc, #152]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003012:	4a1d      	ldr	r2, [pc, #116]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003018:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <HAL_GPIO_Init+0x334>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800303c:	4a12      	ldr	r2, [pc, #72]	@ (8003088 <HAL_GPIO_Init+0x334>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	f67f ae90 	bls.w	8002d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40013800 	.word	0x40013800
 8003068:	40020000 	.word	0x40020000
 800306c:	40020400 	.word	0x40020400
 8003070:	40020800 	.word	0x40020800
 8003074:	40020c00 	.word	0x40020c00
 8003078:	40021000 	.word	0x40021000
 800307c:	40021400 	.word	0x40021400
 8003080:	40021800 	.word	0x40021800
 8003084:	40021c00 	.word	0x40021c00
 8003088:	40013c00 	.word	0x40013c00

0800308c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
 8003098:	4613      	mov	r3, r2
 800309a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800309c:	787b      	ldrb	r3, [r7, #1]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030a8:	e003      	b.n	80030b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030aa:	887b      	ldrh	r3, [r7, #2]
 80030ac:	041a      	lsls	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	619a      	str	r2, [r3, #24]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b086      	sub	sp, #24
 80030c2:	af02      	add	r7, sp, #8
 80030c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e101      	b.n	80032d4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f007 f90e 	bl	800a30c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2203      	movs	r2, #3
 80030f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030fe:	d102      	bne.n	8003106 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fc95 	bl	8006a3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7c1a      	ldrb	r2, [r3, #16]
 8003118:	f88d 2000 	strb.w	r2, [sp]
 800311c:	3304      	adds	r3, #4
 800311e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003120:	f003 fb74 	bl	800680c <USB_CoreInit>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0ce      	b.n	80032d4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fc8d 	bl	8006a5c <USB_SetCurrentMode>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0bf      	b.n	80032d4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e04a      	b.n	80031f0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3315      	adds	r3, #21
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3314      	adds	r3, #20
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003182:	7bfa      	ldrb	r2, [r7, #15]
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	b298      	uxth	r0, r3
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	332e      	adds	r3, #46	@ 0x2e
 8003196:	4602      	mov	r2, r0
 8003198:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3318      	adds	r3, #24
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	331c      	adds	r3, #28
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3320      	adds	r3, #32
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	3324      	adds	r3, #36	@ 0x24
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	3301      	adds	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	791b      	ldrb	r3, [r3, #4]
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d3af      	bcc.n	800315a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	e044      	b.n	800328a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	3301      	adds	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	791b      	ldrb	r3, [r3, #4]
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	429a      	cmp	r2, r3
 8003292:	d3b5      	bcc.n	8003200 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7c1a      	ldrb	r2, [r3, #16]
 800329c:	f88d 2000 	strb.w	r2, [sp]
 80032a0:	3304      	adds	r3, #4
 80032a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a4:	f003 fc26 	bl	8006af4 <USB_DevInit>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e00c      	b.n	80032d4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f004 fc70 	bl	8007bb2 <USB_DevDisconnect>

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_PCD_Start+0x1c>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e022      	b.n	800333e <HAL_PCD_Start+0x62>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f003 fb77 	bl	8006a18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f004 fc1e 	bl	8007b70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003346:	b590      	push	{r4, r7, lr}
 8003348:	b08d      	sub	sp, #52	@ 0x34
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fcdc 	bl	8007d1a <USB_GetMode>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 848c 	bne.w	8003c82 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f004 fc40 	bl	8007bf4 <USB_ReadInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8482 	beq.w	8003c80 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f004 fc2d 	bl	8007bf4 <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d107      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f002 0202 	and.w	r2, r2, #2
 80033b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f004 fc1b 	bl	8007bf4 <USB_ReadInterrupts>
 80033be:	4603      	mov	r3, r0
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d161      	bne.n	800348c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0210 	bic.w	r2, r2, #16
 80033d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f003 020f 	and.w	r2, r3, #15
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	3304      	adds	r3, #4
 80033f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80033fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003402:	d124      	bne.n	800344e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d035      	beq.n	800347c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800341a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800341e:	b29b      	uxth	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	6a38      	ldr	r0, [r7, #32]
 8003424:	f004 fa52 	bl	80078cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003434:	441a      	add	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003446:	441a      	add	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	615a      	str	r2, [r3, #20]
 800344c:	e016      	b.n	800347c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003454:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003458:	d110      	bne.n	800347c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003460:	2208      	movs	r2, #8
 8003462:	4619      	mov	r1, r3
 8003464:	6a38      	ldr	r0, [r7, #32]
 8003466:	f004 fa31 	bl	80078cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003476:	441a      	add	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0210 	orr.w	r2, r2, #16
 800348a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f004 fbaf 	bl	8007bf4 <USB_ReadInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800349c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034a0:	f040 80a7 	bne.w	80035f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 fbb4 	bl	8007c1a <USB_ReadDevAllOutEpInterrupt>
 80034b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80034b4:	e099      	b.n	80035ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 808e 	beq.w	80035de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fbd8 	bl	8007c82 <USB_ReadDevOutEPInterrupt>
 80034d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ea:	461a      	mov	r2, r3
 80034ec:	2301      	movs	r3, #1
 80034ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fea4 	bl	8004240 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800350e:	461a      	mov	r2, r3
 8003510:	2308      	movs	r3, #8
 8003512:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003514:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 ff7a 	bl	8004410 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003532:	461a      	mov	r2, r3
 8003534:	2310      	movs	r3, #16
 8003536:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d030      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354a:	2b80      	cmp	r3, #128	@ 0x80
 800354c:	d109      	bne.n	8003562 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800355c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003560:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	3304      	adds	r3, #4
 8003576:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	78db      	ldrb	r3, [r3, #3]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d108      	bne.n	8003592 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	b2db      	uxtb	r3, r3
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f006 ffc3 	bl	800a518 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800359e:	461a      	mov	r2, r3
 80035a0:	2302      	movs	r3, #2
 80035a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ba:	461a      	mov	r2, r3
 80035bc:	2320      	movs	r3, #32
 80035be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d6:	461a      	mov	r2, r3
 80035d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	3301      	adds	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f47f af62 	bne.w	80034b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 fafc 	bl	8007bf4 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003602:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003606:	f040 80db 	bne.w	80037c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f004 fb1d 	bl	8007c4e <USB_ReadDevAllInEpInterrupt>
 8003614:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800361a:	e0cd      	b.n	80037b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80c2 	beq.w	80037ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f004 fb43 	bl	8007cbe <USB_ReadDevInEPInterrupt>
 8003638:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d057      	beq.n	80036f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	2201      	movs	r2, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	43db      	mvns	r3, r3
 800365e:	69f9      	ldr	r1, [r7, #28]
 8003660:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003664:	4013      	ands	r3, r2
 8003666:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003674:	461a      	mov	r2, r3
 8003676:	2301      	movs	r3, #1
 8003678:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	799b      	ldrb	r3, [r3, #6]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d132      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	3320      	adds	r3, #32
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4403      	add	r3, r0
 80036a2:	331c      	adds	r3, #28
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4419      	add	r1, r3
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4403      	add	r3, r0
 80036b6:	3320      	adds	r3, #32
 80036b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d113      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x3a2>
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	3324      	adds	r3, #36	@ 0x24
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036e0:	461a      	mov	r2, r3
 80036e2:	2101      	movs	r1, #1
 80036e4:	f004 fb4a 	bl	8007d7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f006 fe8d 	bl	800a40e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800370a:	461a      	mov	r2, r3
 800370c:	2308      	movs	r3, #8
 800370e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003726:	461a      	mov	r2, r3
 8003728:	2310      	movs	r3, #16
 800372a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003742:	461a      	mov	r2, r3
 8003744:	2340      	movs	r3, #64	@ 0x40
 8003746:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d023      	beq.n	800379a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003752:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003754:	6a38      	ldr	r0, [r7, #32]
 8003756:	f003 fb31 	bl	8006dbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800375a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	3310      	adds	r3, #16
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	3304      	adds	r3, #4
 800376c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	78db      	ldrb	r3, [r3, #3]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d108      	bne.n	8003788 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2200      	movs	r2, #0
 800377a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	b2db      	uxtb	r3, r3
 8003780:	4619      	mov	r1, r3
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f006 feda 	bl	800a53c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003794:	461a      	mov	r2, r3
 8003796:	2302      	movs	r3, #2
 8003798:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fcbd 	bl	8004126 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	3301      	adds	r3, #1
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f47f af2e 	bne.w	800361c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 fa15 	bl	8007bf4 <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037d4:	d122      	bne.n	800381c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d108      	bne.n	8003806 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037fc:	2100      	movs	r1, #0
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fea4 	bl	800454c <HAL_PCDEx_LPM_Callback>
 8003804:	e002      	b.n	800380c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f006 fe78 	bl	800a4fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800381a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f004 f9e7 	bl	8007bf4 <USB_ReadInterrupts>
 8003826:	4603      	mov	r3, r0
 8003828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800382c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003830:	d112      	bne.n	8003858 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d102      	bne.n	8003848 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f006 fe34 	bl	800a4b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003856:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f004 f9c9 	bl	8007bf4 <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800386c:	f040 80b7 	bne.w	80039de <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2110      	movs	r1, #16
 800388a:	4618      	mov	r0, r3
 800388c:	f003 fa96 	bl	8006dbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003890:	2300      	movs	r3, #0
 8003892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003894:	e046      	b.n	8003924 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a2:	461a      	mov	r2, r3
 80038a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ba:	0151      	lsls	r1, r2, #5
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	440a      	add	r2, r1
 80038c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d6:	461a      	mov	r2, r3
 80038d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ee:	0151      	lsls	r1, r2, #5
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	440a      	add	r2, r1
 80038f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800390e:	0151      	lsls	r1, r2, #5
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	440a      	add	r2, r1
 8003914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003918:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800391c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003920:	3301      	adds	r3, #1
 8003922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	791b      	ldrb	r3, [r3, #4]
 8003928:	461a      	mov	r2, r3
 800392a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392c:	4293      	cmp	r3, r2
 800392e:	d3b2      	bcc.n	8003896 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800393e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003942:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	7bdb      	ldrb	r3, [r3, #15]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d016      	beq.n	800397a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800395c:	f043 030b 	orr.w	r3, r3, #11
 8003960:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003972:	f043 030b 	orr.w	r3, r3, #11
 8003976:	6453      	str	r3, [r2, #68]	@ 0x44
 8003978:	e015      	b.n	80039a6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003988:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800398c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003990:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039a0:	f043 030b 	orr.w	r3, r3, #11
 80039a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039b4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80039b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039c8:	461a      	mov	r2, r3
 80039ca:	f004 f9d7 	bl	8007d7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80039dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f004 f906 	bl	8007bf4 <USB_ReadInterrupts>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039f2:	d123      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f004 f99c 	bl	8007d36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f003 fa53 	bl	8006eae <USB_GetDevSpeed>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681c      	ldr	r4, [r3, #0]
 8003a14:	f001 fa0a 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8003a18:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4620      	mov	r0, r4
 8003a22:	f002 ff57 	bl	80068d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f006 fd19 	bl	800a45e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f004 f8d7 	bl	8007bf4 <USB_ReadInterrupts>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d10a      	bne.n	8003a66 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f006 fcf6 	bl	800a442 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f002 0208 	and.w	r2, r2, #8
 8003a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 f8c2 	bl	8007bf4 <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a76:	2b80      	cmp	r3, #128	@ 0x80
 8003a78:	d123      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a86:	2301      	movs	r3, #1
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8a:	e014      	b.n	8003ab6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d105      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fb0a 	bl	80040c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	791b      	ldrb	r3, [r3, #4]
 8003aba:	461a      	mov	r2, r3
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d3e4      	bcc.n	8003a8c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 f894 	bl	8007bf4 <USB_ReadInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ad6:	d13c      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ad8:	2301      	movs	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8003adc:	e02b      	b.n	8003b36 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3318      	adds	r3, #24
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d115      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	da12      	bge.n	8003b30 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	3317      	adds	r3, #23
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 faca 	bl	80040c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	3301      	adds	r3, #1
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	791b      	ldrb	r3, [r3, #4]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d3cd      	bcc.n	8003ade <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f004 f84c 	bl	8007bf4 <USB_ReadInterrupts>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b66:	d156      	bne.n	8003c16 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b68:	2301      	movs	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6c:	e045      	b.n	8003bfa <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d12e      	bne.n	8003bf4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b96:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	da2b      	bge.n	8003bf4 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	0c1a      	lsrs	r2, r3, #16
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003ba6:	4053      	eors	r3, r2
 8003ba8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d121      	bne.n	8003bf4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bf0:	6053      	str	r3, [r2, #4]
            break;
 8003bf2:	e008      	b.n	8003c06 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	791b      	ldrb	r3, [r3, #4]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d3b3      	bcc.n	8003b6e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 ffea 	bl	8007bf4 <USB_ReadInterrupts>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2a:	d10a      	bne.n	8003c42 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f006 fc97 	bl	800a560 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f003 ffd4 	bl	8007bf4 <USB_ReadInterrupts>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d115      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f006 fc87 	bl	800a57c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
 8003c7e:	e000      	b.n	8003c82 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003c80:	bf00      	nop
    }
  }
}
 8003c82:	3734      	adds	r7, #52	@ 0x34
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd90      	pop	{r4, r7, pc}

08003c88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_PCD_SetAddress+0x1a>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e012      	b.n	8003cc8 <HAL_PCD_SetAddress+0x40>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 ff33 	bl	8007b24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	70fb      	strb	r3, [r7, #3]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	803b      	strh	r3, [r7, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	da0f      	bge.n	8003d16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	f003 020f 	and.w	r2, r3, #15
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	3310      	adds	r3, #16
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	705a      	strb	r2, [r3, #1]
 8003d14:	e00f      	b.n	8003d36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 020f 	and.w	r2, r3, #15
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003d42:	883b      	ldrh	r3, [r7, #0]
 8003d44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	78ba      	ldrb	r2, [r7, #2]
 8003d50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	785b      	ldrb	r3, [r3, #1]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d64:	78bb      	ldrb	r3, [r7, #2]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d102      	bne.n	8003d70 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_PCD_EP_Open+0xae>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e00e      	b.n	8003d9c <HAL_PCD_EP_Open+0xcc>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f003 f8b3 	bl	8006ef8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	da0f      	bge.n	8003dd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	3310      	adds	r3, #16
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	705a      	strb	r2, [r3, #1]
 8003dd6:	e00f      	b.n	8003df8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	3304      	adds	r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_PCD_EP_Close+0x6e>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e00e      	b.n	8003e30 <HAL_PCD_EP_Close+0x8c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f003 f8f1 	bl	8007008 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	460b      	mov	r3, r1
 8003e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e48:	7afb      	ldrb	r3, [r7, #11]
 8003e4a:	f003 020f 	and.w	r2, r3, #15
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3304      	adds	r3, #4
 8003e60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2200      	movs	r2, #0
 8003e78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	799b      	ldrb	r3, [r3, #6]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d102      	bne.n	8003e94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	799b      	ldrb	r3, [r3, #6]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6979      	ldr	r1, [r7, #20]
 8003ea0:	f003 f98e 	bl	80071c0 <USB_EPStartXfer>

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003ed0:	681b      	ldr	r3, [r3, #0]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	460b      	mov	r3, r1
 8003eec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eee:	7afb      	ldrb	r3, [r7, #11]
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	3310      	adds	r3, #16
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	3304      	adds	r3, #4
 8003f04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	799b      	ldrb	r3, [r3, #6]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d102      	bne.n	8003f38 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	799b      	ldrb	r3, [r3, #6]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6979      	ldr	r1, [r7, #20]
 8003f44:	f003 f93c 	bl	80071c0 <USB_EPStartXfer>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	7912      	ldrb	r2, [r2, #4]
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d901      	bls.n	8003f70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e04f      	b.n	8004010 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	da0f      	bge.n	8003f98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	f003 020f 	and.w	r2, r3, #15
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	3310      	adds	r3, #16
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	705a      	strb	r2, [r3, #1]
 8003f96:	e00d      	b.n	8003fb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	3304      	adds	r3, #4
 8003fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_PCD_EP_SetStall+0x82>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e01d      	b.n	8004010 <HAL_PCD_EP_SetStall+0xbe>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f003 fcca 	bl	800797c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7999      	ldrb	r1, [r3, #6]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004000:	461a      	mov	r2, r3
 8004002:	f003 febb 	bl	8007d7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	7912      	ldrb	r2, [r2, #4]
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e042      	b.n	80040bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800403a:	2b00      	cmp	r3, #0
 800403c:	da0f      	bge.n	800405e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	f003 020f 	and.w	r2, r3, #15
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	3310      	adds	r3, #16
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	3304      	adds	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	705a      	strb	r2, [r3, #1]
 800405c:	e00f      	b.n	800407e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	f003 020f 	and.w	r2, r3, #15
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	3304      	adds	r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	b2da      	uxtb	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_PCD_EP_ClrStall+0x86>
 800409a:	2302      	movs	r3, #2
 800409c:	e00e      	b.n	80040bc <HAL_PCD_EP_ClrStall+0xa4>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68f9      	ldr	r1, [r7, #12]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 fcd3 	bl	8007a58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	da0c      	bge.n	80040f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	3310      	adds	r3, #16
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
 80040ec:	3304      	adds	r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e00c      	b.n	800410c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	f003 020f 	and.w	r2, r3, #15
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	3304      	adds	r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	4618      	mov	r0, r3
 8004114:	f003 faf2 	bl	80076fc <USB_EPStopXfer>
 8004118:	4603      	mov	r3, r0
 800411a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800411c:	7afb      	ldrb	r3, [r7, #11]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b08a      	sub	sp, #40	@ 0x28
 800412a:	af02      	add	r7, sp, #8
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	3310      	adds	r3, #16
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	3304      	adds	r3, #4
 800414c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	429a      	cmp	r2, r3
 8004158:	d901      	bls.n	800415e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e06b      	b.n	8004236 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	429a      	cmp	r2, r3
 8004172:	d902      	bls.n	800417a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3303      	adds	r3, #3
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004182:	e02a      	b.n	80041da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	429a      	cmp	r2, r3
 8004198:	d902      	bls.n	80041a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3303      	adds	r3, #3
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68d9      	ldr	r1, [r3, #12]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	4603      	mov	r3, r0
 80041bc:	6978      	ldr	r0, [r7, #20]
 80041be:	f003 fb47 	bl	8007850 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	441a      	add	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	441a      	add	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d809      	bhi.n	8004204 <PCD_WriteEmptyTxFifo+0xde>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d203      	bcs.n	8004204 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1bf      	bne.n	8004184 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	429a      	cmp	r2, r3
 800420e:	d811      	bhi.n	8004234 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	2201      	movs	r2, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	43db      	mvns	r3, r3
 800422a:	6939      	ldr	r1, [r7, #16]
 800422c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004230:	4013      	ands	r3, r2
 8004232:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	333c      	adds	r3, #60	@ 0x3c
 8004258:	3304      	adds	r3, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	799b      	ldrb	r3, [r3, #6]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d17b      	bne.n	800436e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	4a61      	ldr	r2, [pc, #388]	@ (8004408 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	f240 80b9 	bls.w	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80b3 	beq.w	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a2:	461a      	mov	r2, r3
 80042a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042a8:	6093      	str	r3, [r2, #8]
 80042aa:	e0a7      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c2:	461a      	mov	r2, r3
 80042c4:	2320      	movs	r3, #32
 80042c6:	6093      	str	r3, [r2, #8]
 80042c8:	e098      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 8093 	bne.w	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004408 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d90f      	bls.n	80042fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f4:	461a      	mov	r2, r3
 80042f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042fa:	6093      	str	r3, [r2, #8]
 80042fc:	e07e      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	3304      	adds	r3, #4
 8004312:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a1a      	ldr	r2, [r3, #32]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	0159      	lsls	r1, r3, #5
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	440b      	add	r3, r1
 8004320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d114      	bne.n	8004360 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004348:	461a      	mov	r2, r3
 800434a:	2101      	movs	r1, #1
 800434c:	f003 fd16 	bl	8007d7c <USB_EP0_OutStart>
 8004350:	e006      	b.n	8004360 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	441a      	add	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f006 f836 	bl	800a3d8 <HAL_PCD_DataOutStageCallback>
 800436c:	e046      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	4a26      	ldr	r2, [pc, #152]	@ (800440c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d124      	bne.n	80043c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438c:	461a      	mov	r2, r3
 800438e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004392:	6093      	str	r3, [r2, #8]
 8004394:	e032      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ac:	461a      	mov	r2, r3
 80043ae:	2320      	movs	r3, #32
 80043b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f006 f80d 	bl	800a3d8 <HAL_PCD_DataOutStageCallback>
 80043be:	e01d      	b.n	80043fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d114      	bne.n	80043f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d108      	bne.n	80043f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043e8:	461a      	mov	r2, r3
 80043ea:	2100      	movs	r1, #0
 80043ec:	f003 fcc6 	bl	8007d7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f005 ffee 	bl	800a3d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	4f54300a 	.word	0x4f54300a
 800440c:	4f54310a 	.word	0x4f54310a

08004410 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	333c      	adds	r3, #60	@ 0x3c
 8004428:	3304      	adds	r3, #4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a15      	ldr	r2, [pc, #84]	@ (8004498 <PCD_EP_OutSetupPacket_int+0x88>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d90e      	bls.n	8004464 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800444c:	2b00      	cmp	r3, #0
 800444e:	d009      	beq.n	8004464 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445c:	461a      	mov	r2, r3
 800445e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004462:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f005 ffa5 	bl	800a3b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a0a      	ldr	r2, [pc, #40]	@ (8004498 <PCD_EP_OutSetupPacket_int+0x88>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d90c      	bls.n	800448c <PCD_EP_OutSetupPacket_int+0x7c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	799b      	ldrb	r3, [r3, #6]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d108      	bne.n	800448c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004484:	461a      	mov	r2, r3
 8004486:	2101      	movs	r1, #1
 8004488:	f003 fc78 	bl	8007d7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	4f54300a 	.word	0x4f54300a

0800449c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	70fb      	strb	r3, [r7, #3]
 80044a8:	4613      	mov	r3, r2
 80044aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044ba:	883b      	ldrh	r3, [r7, #0]
 80044bc:	0419      	lsls	r1, r3, #16
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80044c8:	e028      	b.n	800451c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4413      	add	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044d8:	2300      	movs	r3, #0
 80044da:	73fb      	strb	r3, [r7, #15]
 80044dc:	e00d      	b.n	80044fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	3340      	adds	r3, #64	@ 0x40
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4413      	add	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	3301      	adds	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	3b01      	subs	r3, #1
 8004500:	429a      	cmp	r2, r3
 8004502:	d3ec      	bcc.n	80044de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004504:	883b      	ldrh	r3, [r7, #0]
 8004506:	0418      	lsls	r0, r3, #16
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6819      	ldr	r1, [r3, #0]
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	3b01      	subs	r3, #1
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	4302      	orrs	r2, r0
 8004514:	3340      	adds	r3, #64	@ 0x40
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	887a      	ldrh	r2, [r7, #2]
 800453c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e267      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d075      	beq.n	800466e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004582:	4b88      	ldr	r3, [pc, #544]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b04      	cmp	r3, #4
 800458c:	d00c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b85      	ldr	r3, [pc, #532]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004596:	2b08      	cmp	r3, #8
 8004598:	d112      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b82      	ldr	r3, [pc, #520]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b7e      	ldr	r3, [pc, #504]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x108>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e242      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x74>
 80045ca:	4b76      	ldr	r3, [pc, #472]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a75      	ldr	r2, [pc, #468]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x98>
 80045e2:	4b70      	ldr	r3, [pc, #448]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6f      	ldr	r2, [pc, #444]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b6d      	ldr	r3, [pc, #436]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6c      	ldr	r2, [pc, #432]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045fc:	4b69      	ldr	r3, [pc, #420]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a68      	ldr	r2, [pc, #416]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b66      	ldr	r3, [pc, #408]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a65      	ldr	r2, [pc, #404]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fe f94c 	bl	80028b8 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004624:	f7fe f948 	bl	80028b8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	@ 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e207      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	4b5b      	ldr	r3, [pc, #364]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xc0>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe f938 	bl	80028b8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7fe f934 	bl	80028b8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	@ 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e1f3      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	4b51      	ldr	r3, [pc, #324]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0xe8>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d063      	beq.n	8004742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800467a:	4b4a      	ldr	r3, [pc, #296]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004686:	4b47      	ldr	r3, [pc, #284]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800468e:	2b08      	cmp	r3, #8
 8004690:	d11c      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b44      	ldr	r3, [pc, #272]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d116      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469e:	4b41      	ldr	r3, [pc, #260]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d001      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e1c7      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b6:	4b3b      	ldr	r3, [pc, #236]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4937      	ldr	r1, [pc, #220]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ca:	e03a      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d4:	4b34      	ldr	r3, [pc, #208]	@ (80047a8 <HAL_RCC_OscConfig+0x244>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fe f8ed 	bl	80028b8 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e2:	f7fe f8e9 	bl	80028b8 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1a8      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f4:	4b2b      	ldr	r3, [pc, #172]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b28      	ldr	r3, [pc, #160]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4925      	ldr	r1, [pc, #148]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]
 8004714:	e015      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004716:	4b24      	ldr	r3, [pc, #144]	@ (80047a8 <HAL_RCC_OscConfig+0x244>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe f8cc 	bl	80028b8 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004724:	f7fe f8c8 	bl	80028b8 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e187      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004736:	4b1b      	ldr	r3, [pc, #108]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d036      	beq.n	80047bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d016      	beq.n	8004784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004756:	4b15      	ldr	r3, [pc, #84]	@ (80047ac <HAL_RCC_OscConfig+0x248>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fe f8ac 	bl	80028b8 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004764:	f7fe f8a8 	bl	80028b8 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e167      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004776:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x200>
 8004782:	e01b      	b.n	80047bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004784:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <HAL_RCC_OscConfig+0x248>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fe f895 	bl	80028b8 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	e00e      	b.n	80047b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004792:	f7fe f891 	bl	80028b8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d907      	bls.n	80047b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e150      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 80047a4:	40023800 	.word	0x40023800
 80047a8:	42470000 	.word	0x42470000
 80047ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b0:	4b88      	ldr	r3, [pc, #544]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ea      	bne.n	8004792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8097 	beq.w	80048f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ce:	4b81      	ldr	r3, [pc, #516]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	4b7d      	ldr	r3, [pc, #500]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	4a7c      	ldr	r2, [pc, #496]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047ea:	4b7a      	ldr	r3, [pc, #488]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fa:	4b77      	ldr	r3, [pc, #476]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d118      	bne.n	8004838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004806:	4b74      	ldr	r3, [pc, #464]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a73      	ldr	r2, [pc, #460]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004812:	f7fe f851 	bl	80028b8 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fe f84d 	bl	80028b8 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e10c      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	4b6a      	ldr	r3, [pc, #424]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x2ea>
 8004840:	4b64      	ldr	r3, [pc, #400]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004844:	4a63      	ldr	r2, [pc, #396]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	@ 0x70
 800484c:	e01c      	b.n	8004888 <HAL_RCC_OscConfig+0x324>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b05      	cmp	r3, #5
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x30c>
 8004856:	4b5f      	ldr	r3, [pc, #380]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	4a5e      	ldr	r2, [pc, #376]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	6713      	str	r3, [r2, #112]	@ 0x70
 8004862:	4b5c      	ldr	r3, [pc, #368]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004866:	4a5b      	ldr	r2, [pc, #364]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6713      	str	r3, [r2, #112]	@ 0x70
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0x324>
 8004870:	4b58      	ldr	r3, [pc, #352]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004874:	4a57      	ldr	r2, [pc, #348]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	6713      	str	r3, [r2, #112]	@ 0x70
 800487c:	4b55      	ldr	r3, [pc, #340]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004880:	4a54      	ldr	r2, [pc, #336]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004882:	f023 0304 	bic.w	r3, r3, #4
 8004886:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fe f812 	bl	80028b8 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fe f80e 	bl	80028b8 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0cb      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	4b49      	ldr	r3, [pc, #292]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ee      	beq.n	8004898 <HAL_RCC_OscConfig+0x334>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048bc:	f7fd fffc 	bl	80028b8 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c2:	e00a      	b.n	80048da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c4:	f7fd fff8 	bl	80028b8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0b5      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048da:	4b3e      	ldr	r3, [pc, #248]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ee      	bne.n	80048c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d105      	bne.n	80048f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ec:	4b39      	ldr	r3, [pc, #228]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f0:	4a38      	ldr	r2, [pc, #224]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a1 	beq.w	8004a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004902:	4b34      	ldr	r3, [pc, #208]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b08      	cmp	r3, #8
 800490c:	d05c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d141      	bne.n	800499a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b31      	ldr	r3, [pc, #196]	@ (80049dc <HAL_RCC_OscConfig+0x478>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fd ffcc 	bl	80028b8 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fd ffc8 	bl	80028b8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e087      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004936:	4b27      	ldr	r3, [pc, #156]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	019b      	lsls	r3, r3, #6
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	3b01      	subs	r3, #1
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	491b      	ldr	r1, [pc, #108]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496c:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <HAL_RCC_OscConfig+0x478>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004972:	f7fd ffa1 	bl	80028b8 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497a:	f7fd ff9d 	bl	80028b8 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e05c      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498c:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x416>
 8004998:	e054      	b.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499a:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <HAL_RCC_OscConfig+0x478>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fd ff8a 	bl	80028b8 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fd ff86 	bl	80028b8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e045      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ba:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x444>
 80049c6:	e03d      	b.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e038      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40007000 	.word	0x40007000
 80049dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a50 <HAL_RCC_OscConfig+0x4ec>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d028      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d121      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d11a      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d111      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800

08004a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0cc      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b68      	ldr	r3, [pc, #416]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d90c      	bls.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b65      	ldr	r3, [pc, #404]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b63      	ldr	r3, [pc, #396]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0b8      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa8:	4b59      	ldr	r3, [pc, #356]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a58      	ldr	r2, [pc, #352]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac0:	4b53      	ldr	r3, [pc, #332]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a52      	ldr	r2, [pc, #328]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004acc:	4b50      	ldr	r3, [pc, #320]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	494d      	ldr	r1, [pc, #308]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d044      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	4b47      	ldr	r3, [pc, #284]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d119      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	4b3f      	ldr	r3, [pc, #252]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e06f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e067      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b32:	4b37      	ldr	r3, [pc, #220]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4934      	ldr	r1, [pc, #208]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b44:	f7fd feb8 	bl	80028b8 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fd feb4 	bl	80028b8 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e04f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2b      	ldr	r3, [pc, #172]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 020c 	and.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1eb      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d20c      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b22      	ldr	r3, [pc, #136]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b20      	ldr	r3, [pc, #128]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e032      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba8:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4916      	ldr	r1, [pc, #88]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc6:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	490e      	ldr	r1, [pc, #56]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bda:	f000 f821 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	490a      	ldr	r1, [pc, #40]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	5ccb      	ldrb	r3, [r1, r3]
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	4a09      	ldr	r2, [pc, #36]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004bf6:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fd fe18 	bl	8002830 <HAL_InitTick>

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023c00 	.word	0x40023c00
 8004c10:	40023800 	.word	0x40023800
 8004c14:	0801429c 	.word	0x0801429c
 8004c18:	20000004 	.word	0x20000004
 8004c1c:	20000008 	.word	0x20000008

08004c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c24:	b094      	sub	sp, #80	@ 0x50
 8004c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c38:	4b79      	ldr	r3, [pc, #484]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d00d      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0x40>
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	f200 80e1 	bhi.w	8004e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x34>
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d003      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c52:	e0db      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c54:	4b73      	ldr	r3, [pc, #460]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c58:	e0db      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c5a:	4b73      	ldr	r3, [pc, #460]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c5e:	e0d8      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c60:	4b6f      	ldr	r3, [pc, #444]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d063      	beq.n	8004d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c76:	4b6a      	ldr	r3, [pc, #424]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c92:	4622      	mov	r2, r4
 8004c94:	462b      	mov	r3, r5
 8004c96:	f04f 0000 	mov.w	r0, #0
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	0159      	lsls	r1, r3, #5
 8004ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca4:	0150      	lsls	r0, r2, #5
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4621      	mov	r1, r4
 8004cac:	1a51      	subs	r1, r2, r1
 8004cae:	6139      	str	r1, [r7, #16]
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	018b      	lsls	r3, r1, #6
 8004cc8:	4651      	mov	r1, sl
 8004cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cce:	4651      	mov	r1, sl
 8004cd0:	018a      	lsls	r2, r1, #6
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8004cd8:	4659      	mov	r1, fp
 8004cda:	eb63 0901 	sbc.w	r9, r3, r1
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cf2:	4690      	mov	r8, r2
 8004cf4:	4699      	mov	r9, r3
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	eb18 0303 	adds.w	r3, r8, r3
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	462b      	mov	r3, r5
 8004d00:	eb49 0303 	adc.w	r3, r9, r3
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d12:	4629      	mov	r1, r5
 8004d14:	024b      	lsls	r3, r1, #9
 8004d16:	4621      	mov	r1, r4
 8004d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	024a      	lsls	r2, r1, #9
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d26:	2200      	movs	r2, #0
 8004d28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d30:	f7fb ffba 	bl	8000ca8 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d3c:	e058      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3e:	4b38      	ldr	r3, [pc, #224]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	099b      	lsrs	r3, r3, #6
 8004d44:	2200      	movs	r2, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	4611      	mov	r1, r2
 8004d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d4e:	623b      	str	r3, [r7, #32]
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d58:	4642      	mov	r2, r8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	f04f 0000 	mov.w	r0, #0
 8004d60:	f04f 0100 	mov.w	r1, #0
 8004d64:	0159      	lsls	r1, r3, #5
 8004d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d6a:	0150      	lsls	r0, r2, #5
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4641      	mov	r1, r8
 8004d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d76:	4649      	mov	r1, r9
 8004d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d90:	ebb2 040a 	subs.w	r4, r2, sl
 8004d94:	eb63 050b 	sbc.w	r5, r3, fp
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	00eb      	lsls	r3, r5, #3
 8004da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da6:	00e2      	lsls	r2, r4, #3
 8004da8:	4614      	mov	r4, r2
 8004daa:	461d      	mov	r5, r3
 8004dac:	4643      	mov	r3, r8
 8004dae:	18e3      	adds	r3, r4, r3
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	464b      	mov	r3, r9
 8004db4:	eb45 0303 	adc.w	r3, r5, r3
 8004db8:	607b      	str	r3, [r7, #4]
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	028b      	lsls	r3, r1, #10
 8004dca:	4621      	mov	r1, r4
 8004dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	028a      	lsls	r2, r1, #10
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dda:	2200      	movs	r2, #0
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	61fa      	str	r2, [r7, #28]
 8004de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004de4:	f7fb ff60 	bl	8000ca8 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4613      	mov	r3, r2
 8004dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004df0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3750      	adds	r7, #80	@ 0x50
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	007a1200 	.word	0x007a1200

08004e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e30:	4b03      	ldr	r3, [pc, #12]	@ (8004e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000004 	.word	0x20000004

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	@ (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	080142ac 	.word	0x080142ac

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e70:	f7ff ffdc 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4903      	ldr	r1, [pc, #12]	@ (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	080142ac 	.word	0x080142ac

08004e94 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e038      	b.n	8004f1c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7fd fb3a 	bl	8002538 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f001 fbcc 	bl	800666c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	461a      	mov	r2, r3
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	f001 fc2e 	bl	8006740 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6858      	ldr	r0, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	f001 fc53 	bl	800679c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	6892      	ldr	r2, [r2, #8]
 8004efe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	6892      	ldr	r2, [r2, #8]
 8004f0a:	f041 0101 	orr.w	r1, r1, #1
 8004f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e041      	b.n	8004fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fd fa30 	bl	80023b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f000 fa80 	bl	8005468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d001      	beq.n	8004fdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e046      	b.n	800506a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a23      	ldr	r2, [pc, #140]	@ (8005078 <HAL_TIM_Base_Start+0xb4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d022      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff6:	d01d      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800507c <HAL_TIM_Base_Start+0xb8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d018      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1e      	ldr	r2, [pc, #120]	@ (8005080 <HAL_TIM_Base_Start+0xbc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1c      	ldr	r2, [pc, #112]	@ (8005084 <HAL_TIM_Base_Start+0xc0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00e      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1b      	ldr	r2, [pc, #108]	@ (8005088 <HAL_TIM_Base_Start+0xc4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d009      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a19      	ldr	r2, [pc, #100]	@ (800508c <HAL_TIM_Base_Start+0xc8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a18      	ldr	r2, [pc, #96]	@ (8005090 <HAL_TIM_Base_Start+0xcc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d111      	bne.n	8005058 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b06      	cmp	r3, #6
 8005044:	d010      	beq.n	8005068 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005056:	e007      	b.n	8005068 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800
 8005084:	40000c00 	.word	0x40000c00
 8005088:	40010400 	.word	0x40010400
 800508c:	40014000 	.word	0x40014000
 8005090:	40001800 	.word	0x40001800

08005094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d020      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01b      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0202 	mvn.w	r2, #2
 80050c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f9a3 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 80050e4:	e005      	b.n	80050f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f995 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f9a6 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d020      	beq.n	8005144 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01b      	beq.n	8005144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0204 	mvn.w	r2, #4
 8005114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2202      	movs	r2, #2
 800511a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f97d 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 8005130:	e005      	b.n	800513e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f96f 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f980 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d020      	beq.n	8005190 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01b      	beq.n	8005190 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0208 	mvn.w	r2, #8
 8005160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2204      	movs	r2, #4
 8005166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f957 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 800517c:	e005      	b.n	800518a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f949 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f95a 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b00      	cmp	r3, #0
 8005198:	d020      	beq.n	80051dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01b      	beq.n	80051dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0210 	mvn.w	r2, #16
 80051ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2208      	movs	r2, #8
 80051b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f931 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f923 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f934 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00c      	beq.n	8005200 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0201 	mvn.w	r2, #1
 80051f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f901 	bl	8005402 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00c      	beq.n	8005224 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fae8 	bl	80057f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f905 	bl	8005452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00c      	beq.n	800526c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0220 	mvn.w	r2, #32
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 faba 	bl	80057e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_TIM_ConfigClockSource+0x1c>
 800528c:	2302      	movs	r3, #2
 800528e:	e0b4      	b.n	80053fa <HAL_TIM_ConfigClockSource+0x186>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c8:	d03e      	beq.n	8005348 <HAL_TIM_ConfigClockSource+0xd4>
 80052ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ce:	f200 8087 	bhi.w	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d6:	f000 8086 	beq.w	80053e6 <HAL_TIM_ConfigClockSource+0x172>
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052de:	d87f      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052e0:	2b70      	cmp	r3, #112	@ 0x70
 80052e2:	d01a      	beq.n	800531a <HAL_TIM_ConfigClockSource+0xa6>
 80052e4:	2b70      	cmp	r3, #112	@ 0x70
 80052e6:	d87b      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052e8:	2b60      	cmp	r3, #96	@ 0x60
 80052ea:	d050      	beq.n	800538e <HAL_TIM_ConfigClockSource+0x11a>
 80052ec:	2b60      	cmp	r3, #96	@ 0x60
 80052ee:	d877      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052f0:	2b50      	cmp	r3, #80	@ 0x50
 80052f2:	d03c      	beq.n	800536e <HAL_TIM_ConfigClockSource+0xfa>
 80052f4:	2b50      	cmp	r3, #80	@ 0x50
 80052f6:	d873      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b40      	cmp	r3, #64	@ 0x40
 80052fa:	d058      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0x13a>
 80052fc:	2b40      	cmp	r3, #64	@ 0x40
 80052fe:	d86f      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005300:	2b30      	cmp	r3, #48	@ 0x30
 8005302:	d064      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x15a>
 8005304:	2b30      	cmp	r3, #48	@ 0x30
 8005306:	d86b      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005308:	2b20      	cmp	r3, #32
 800530a:	d060      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x15a>
 800530c:	2b20      	cmp	r3, #32
 800530e:	d867      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d05c      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x15a>
 8005314:	2b10      	cmp	r3, #16
 8005316:	d05a      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x15a>
 8005318:	e062      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800532a:	f000 f9bd 	bl	80056a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800533c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	609a      	str	r2, [r3, #8]
      break;
 8005346:	e04f      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005358:	f000 f9a6 	bl	80056a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800536a:	609a      	str	r2, [r3, #8]
      break;
 800536c:	e03c      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800537a:	461a      	mov	r2, r3
 800537c:	f000 f91a 	bl	80055b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2150      	movs	r1, #80	@ 0x50
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f973 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 800538c:	e02c      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800539a:	461a      	mov	r2, r3
 800539c:	f000 f939 	bl	8005612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2160      	movs	r1, #96	@ 0x60
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f963 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 80053ac:	e01c      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ba:	461a      	mov	r2, r3
 80053bc:	f000 f8fa 	bl	80055b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2140      	movs	r1, #64	@ 0x40
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f953 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 80053cc:	e00c      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f000 f94a 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 80053de:	e003      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
      break;
 80053e4:	e000      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a43      	ldr	r2, [pc, #268]	@ (8005588 <TIM_Base_SetConfig+0x120>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005486:	d00f      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a40      	ldr	r2, [pc, #256]	@ (800558c <TIM_Base_SetConfig+0x124>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a3f      	ldr	r2, [pc, #252]	@ (8005590 <TIM_Base_SetConfig+0x128>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a3e      	ldr	r2, [pc, #248]	@ (8005594 <TIM_Base_SetConfig+0x12c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005598 <TIM_Base_SetConfig+0x130>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d108      	bne.n	80054ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a32      	ldr	r2, [pc, #200]	@ (8005588 <TIM_Base_SetConfig+0x120>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d02b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c8:	d027      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2f      	ldr	r2, [pc, #188]	@ (800558c <TIM_Base_SetConfig+0x124>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d023      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005590 <TIM_Base_SetConfig+0x128>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01f      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005594 <TIM_Base_SetConfig+0x12c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005598 <TIM_Base_SetConfig+0x130>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d017      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2b      	ldr	r2, [pc, #172]	@ (800559c <TIM_Base_SetConfig+0x134>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2a      	ldr	r2, [pc, #168]	@ (80055a0 <TIM_Base_SetConfig+0x138>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a29      	ldr	r2, [pc, #164]	@ (80055a4 <TIM_Base_SetConfig+0x13c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a28      	ldr	r2, [pc, #160]	@ (80055a8 <TIM_Base_SetConfig+0x140>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a27      	ldr	r2, [pc, #156]	@ (80055ac <TIM_Base_SetConfig+0x144>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a26      	ldr	r2, [pc, #152]	@ (80055b0 <TIM_Base_SetConfig+0x148>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a0e      	ldr	r2, [pc, #56]	@ (8005588 <TIM_Base_SetConfig+0x120>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_Base_SetConfig+0xf2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a10      	ldr	r2, [pc, #64]	@ (8005598 <TIM_Base_SetConfig+0x130>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d103      	bne.n	8005562 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f043 0204 	orr.w	r2, r3, #4
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40010000 	.word	0x40010000
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40010400 	.word	0x40010400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800
 80055a8:	40001800 	.word	0x40001800
 80055ac:	40001c00 	.word	0x40001c00
 80055b0:	40002000 	.word	0x40002000

080055b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f023 0201 	bic.w	r2, r3, #1
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f023 030a 	bic.w	r3, r3, #10
 80055f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005612:	b480      	push	{r7}
 8005614:	b087      	sub	sp, #28
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	f023 0210 	bic.w	r2, r3, #16
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800563c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	031b      	lsls	r3, r3, #12
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800564e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	f043 0307 	orr.w	r3, r3, #7
 8005694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	609a      	str	r2, [r3, #8]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	021a      	lsls	r2, r3, #8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	609a      	str	r2, [r3, #8]
}
 80056dc:	bf00      	nop
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e05a      	b.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a21      	ldr	r2, [pc, #132]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800574c:	d01d      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1d      	ldr	r2, [pc, #116]	@ (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1b      	ldr	r2, [pc, #108]	@ (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1a      	ldr	r2, [pc, #104]	@ (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a18      	ldr	r2, [pc, #96]	@ (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a17      	ldr	r2, [pc, #92]	@ (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a15      	ldr	r2, [pc, #84]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d10c      	bne.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4313      	orrs	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40010400 	.word	0x40010400
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40001800 	.word	0x40001800

080057e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e042      	b.n	80058a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fc fde6 	bl	8002400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2224      	movs	r2, #36	@ 0x24
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800584a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fc99 	bl	8006184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005860:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005870:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005880:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b0ba      	sub	sp, #232	@ 0xe8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80058e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10f      	bne.n	800590e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_UART_IRQHandler+0x66>
 80058fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fb7e 	bl	8006008 <UART_Receive_IT>
      return;
 800590c:	e273      	b.n	8005df6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800590e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 80de 	beq.w	8005ad4 <HAL_UART_IRQHandler+0x22c>
 8005918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005928:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 80d1 	beq.w	8005ad4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <HAL_UART_IRQHandler+0xae>
 800593e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594e:	f043 0201 	orr.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <HAL_UART_IRQHandler+0xd2>
 8005962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005972:	f043 0202 	orr.w	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <HAL_UART_IRQHandler+0xf6>
 8005986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d011      	beq.n	80059ce <HAL_UART_IRQHandler+0x126>
 80059aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d105      	bne.n	80059c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c6:	f043 0208 	orr.w	r2, r3, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 820a 	beq.w	8005dec <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_UART_IRQHandler+0x14e>
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fb09 	bl	8006008 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b40      	cmp	r3, #64	@ 0x40
 8005a02:	bf0c      	ite	eq
 8005a04:	2301      	moveq	r3, #1
 8005a06:	2300      	movne	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d103      	bne.n	8005a22 <HAL_UART_IRQHandler+0x17a>
 8005a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d04f      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa14 	bl	8005e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a32:	2b40      	cmp	r3, #64	@ 0x40
 8005a34:	d141      	bne.n	8005aba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1d9      	bne.n	8005a36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d013      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a8e:	4a8a      	ldr	r2, [pc, #552]	@ (8005cb8 <HAL_UART_IRQHandler+0x410>)
 8005a90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fd f93a 	bl	8002d10 <HAL_DMA_Abort_IT>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005aac:	4610      	mov	r0, r2
 8005aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	e00e      	b.n	8005ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f9b6 	bl	8005e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e00a      	b.n	8005ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9b2 	bl	8005e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	e006      	b.n	8005ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9ae 	bl	8005e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005ace:	e18d      	b.n	8005dec <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	bf00      	nop
    return;
 8005ad2:	e18b      	b.n	8005dec <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	f040 8167 	bne.w	8005dac <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 8160 	beq.w	8005dac <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8159 	beq.w	8005dac <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005afa:	2300      	movs	r3, #0
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1a:	2b40      	cmp	r3, #64	@ 0x40
 8005b1c:	f040 80ce 	bne.w	8005cbc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80a9 	beq.w	8005c88 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	f080 80a2 	bcs.w	8005c88 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b56:	f000 8088 	beq.w	8005c6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	330c      	adds	r3, #12
 8005b82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1d9      	bne.n	8005b5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005bdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e1      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005bf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3314      	adds	r3, #20
 8005c02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e3      	bne.n	8005be2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c3a:	f023 0310 	bic.w	r3, r3, #16
 8005c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e3      	bne.n	8005c28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fc ffe3 	bl	8002c30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f8d9 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005c86:	e0b3      	b.n	8005df0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c90:	429a      	cmp	r2, r3
 8005c92:	f040 80ad 	bne.w	8005df0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca0:	f040 80a6 	bne.w	8005df0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8c1 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
      return;
 8005cb6:	e09b      	b.n	8005df0 <HAL_UART_IRQHandler+0x548>
 8005cb8:	08005f17 	.word	0x08005f17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 808e 	beq.w	8005df4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8089 	beq.w	8005df4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	330c      	adds	r3, #12
 8005ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d06:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e3      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	623b      	str	r3, [r7, #32]
   return(result);
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3314      	adds	r3, #20
 8005d3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e3      	bne.n	8005d1a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	330c      	adds	r3, #12
 8005d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0310 	bic.w	r3, r3, #16
 8005d76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d84:	61fa      	str	r2, [r7, #28]
 8005d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	69b9      	ldr	r1, [r7, #24]
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	617b      	str	r3, [r7, #20]
   return(result);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e3      	bne.n	8005d60 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f847 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005daa:	e023      	b.n	8005df4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d009      	beq.n	8005dcc <HAL_UART_IRQHandler+0x524>
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f8b7 	bl	8005f38 <UART_Transmit_IT>
    return;
 8005dca:	e014      	b.n	8005df6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00e      	beq.n	8005df6 <HAL_UART_IRQHandler+0x54e>
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f8f7 	bl	8005fd8 <UART_EndTransmit_IT>
    return;
 8005dea:	e004      	b.n	8005df6 <HAL_UART_IRQHandler+0x54e>
    return;
 8005dec:	bf00      	nop
 8005dee:	e002      	b.n	8005df6 <HAL_UART_IRQHandler+0x54e>
      return;
 8005df0:	bf00      	nop
 8005df2:	e000      	b.n	8005df6 <HAL_UART_IRQHandler+0x54e>
      return;
 8005df4:	bf00      	nop
  }
}
 8005df6:	37e8      	adds	r7, #232	@ 0xe8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b095      	sub	sp, #84	@ 0x54
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	330c      	adds	r3, #12
 8005e76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e78:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e5      	bne.n	8005e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3314      	adds	r3, #20
 8005e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	e853 3f00 	ldrex	r3, [r3]
 8005e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3314      	adds	r3, #20
 8005eaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eb4:	e841 2300 	strex	r3, r2, [r1]
 8005eb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e5      	bne.n	8005e8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d119      	bne.n	8005efc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f023 0310 	bic.w	r3, r3, #16
 8005ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ee8:	61ba      	str	r2, [r7, #24]
 8005eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6979      	ldr	r1, [r7, #20]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e5      	bne.n	8005ec8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f0a:	bf00      	nop
 8005f0c:	3754      	adds	r7, #84	@ 0x54
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff ff7a 	bl	8005e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b21      	cmp	r3, #33	@ 0x21
 8005f4a:	d13e      	bne.n	8005fca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f54:	d114      	bne.n	8005f80 <UART_Transmit_IT+0x48>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d110      	bne.n	8005f80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	1c9a      	adds	r2, r3, #2
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	621a      	str	r2, [r3, #32]
 8005f7e:	e008      	b.n	8005f92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	1c59      	adds	r1, r3, #1
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6211      	str	r1, [r2, #32]
 8005f8a:	781a      	ldrb	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10f      	bne.n	8005fc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e000      	b.n	8005fcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fca:	2302      	movs	r3, #2
  }
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff feff 	bl	8005dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08c      	sub	sp, #48	@ 0x30
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006010:	2300      	movs	r3, #0
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b22      	cmp	r3, #34	@ 0x22
 8006022:	f040 80aa 	bne.w	800617a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602e:	d115      	bne.n	800605c <UART_Receive_IT+0x54>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d111      	bne.n	800605c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604a:	b29a      	uxth	r2, r3
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006054:	1c9a      	adds	r2, r3, #2
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	629a      	str	r2, [r3, #40]	@ 0x28
 800605a:	e024      	b.n	80060a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606a:	d007      	beq.n	800607c <UART_Receive_IT+0x74>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <UART_Receive_IT+0x82>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e008      	b.n	800609c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006096:	b2da      	uxtb	r2, r3
 8006098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4619      	mov	r1, r3
 80060b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d15d      	bne.n	8006176 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0220 	bic.w	r2, r2, #32
 80060c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695a      	ldr	r2, [r3, #20]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0201 	bic.w	r2, r2, #1
 80060e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d135      	bne.n	800616c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	613b      	str	r3, [r7, #16]
   return(result);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f023 0310 	bic.w	r3, r3, #16
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006126:	623a      	str	r2, [r7, #32]
 8006128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	69f9      	ldr	r1, [r7, #28]
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	61bb      	str	r3, [r7, #24]
   return(result);
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e5      	bne.n	8006106 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	2b10      	cmp	r3, #16
 8006146:	d10a      	bne.n	800615e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff fe67 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
 800616a:	e002      	b.n	8006172 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff fe4f 	bl	8005e10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	e002      	b.n	800617c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	e000      	b.n	800617c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800617a:	2302      	movs	r3, #2
  }
}
 800617c:	4618      	mov	r0, r3
 800617e:	3730      	adds	r7, #48	@ 0x30
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006188:	b0c0      	sub	sp, #256	@ 0x100
 800618a:	af00      	add	r7, sp, #0
 800618c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a0:	68d9      	ldr	r1, [r3, #12]
 80061a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	ea40 0301 	orr.w	r3, r0, r1
 80061ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061dc:	f021 010c 	bic.w	r1, r1, #12
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061ea:	430b      	orrs	r3, r1
 80061ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fe:	6999      	ldr	r1, [r3, #24]
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	ea40 0301 	orr.w	r3, r0, r1
 800620a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4b8f      	ldr	r3, [pc, #572]	@ (8006450 <UART_SetConfig+0x2cc>)
 8006214:	429a      	cmp	r2, r3
 8006216:	d005      	beq.n	8006224 <UART_SetConfig+0xa0>
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b8d      	ldr	r3, [pc, #564]	@ (8006454 <UART_SetConfig+0x2d0>)
 8006220:	429a      	cmp	r2, r3
 8006222:	d104      	bne.n	800622e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006224:	f7fe fe22 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8006228:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800622c:	e003      	b.n	8006236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800622e:	f7fe fe09 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8006232:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006240:	f040 810c 	bne.w	800645c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006248:	2200      	movs	r2, #0
 800624a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800624e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006256:	4622      	mov	r2, r4
 8006258:	462b      	mov	r3, r5
 800625a:	1891      	adds	r1, r2, r2
 800625c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800625e:	415b      	adcs	r3, r3
 8006260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006266:	4621      	mov	r1, r4
 8006268:	eb12 0801 	adds.w	r8, r2, r1
 800626c:	4629      	mov	r1, r5
 800626e:	eb43 0901 	adc.w	r9, r3, r1
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800627e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006286:	4690      	mov	r8, r2
 8006288:	4699      	mov	r9, r3
 800628a:	4623      	mov	r3, r4
 800628c:	eb18 0303 	adds.w	r3, r8, r3
 8006290:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006294:	462b      	mov	r3, r5
 8006296:	eb49 0303 	adc.w	r3, r9, r3
 800629a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80062ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062b2:	460b      	mov	r3, r1
 80062b4:	18db      	adds	r3, r3, r3
 80062b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80062b8:	4613      	mov	r3, r2
 80062ba:	eb42 0303 	adc.w	r3, r2, r3
 80062be:	657b      	str	r3, [r7, #84]	@ 0x54
 80062c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062c8:	f7fa fcee 	bl	8000ca8 <__aeabi_uldivmod>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4b61      	ldr	r3, [pc, #388]	@ (8006458 <UART_SetConfig+0x2d4>)
 80062d2:	fba3 2302 	umull	r2, r3, r3, r2
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	011c      	lsls	r4, r3, #4
 80062da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062ec:	4642      	mov	r2, r8
 80062ee:	464b      	mov	r3, r9
 80062f0:	1891      	adds	r1, r2, r2
 80062f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062f4:	415b      	adcs	r3, r3
 80062f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062fc:	4641      	mov	r1, r8
 80062fe:	eb12 0a01 	adds.w	sl, r2, r1
 8006302:	4649      	mov	r1, r9
 8006304:	eb43 0b01 	adc.w	fp, r3, r1
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	f04f 0300 	mov.w	r3, #0
 8006310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800631c:	4692      	mov	sl, r2
 800631e:	469b      	mov	fp, r3
 8006320:	4643      	mov	r3, r8
 8006322:	eb1a 0303 	adds.w	r3, sl, r3
 8006326:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800632a:	464b      	mov	r3, r9
 800632c:	eb4b 0303 	adc.w	r3, fp, r3
 8006330:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006340:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006348:	460b      	mov	r3, r1
 800634a:	18db      	adds	r3, r3, r3
 800634c:	643b      	str	r3, [r7, #64]	@ 0x40
 800634e:	4613      	mov	r3, r2
 8006350:	eb42 0303 	adc.w	r3, r2, r3
 8006354:	647b      	str	r3, [r7, #68]	@ 0x44
 8006356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800635a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800635e:	f7fa fca3 	bl	8000ca8 <__aeabi_uldivmod>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4611      	mov	r1, r2
 8006368:	4b3b      	ldr	r3, [pc, #236]	@ (8006458 <UART_SetConfig+0x2d4>)
 800636a:	fba3 2301 	umull	r2, r3, r3, r1
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	2264      	movs	r2, #100	@ 0x64
 8006372:	fb02 f303 	mul.w	r3, r2, r3
 8006376:	1acb      	subs	r3, r1, r3
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800637e:	4b36      	ldr	r3, [pc, #216]	@ (8006458 <UART_SetConfig+0x2d4>)
 8006380:	fba3 2302 	umull	r2, r3, r3, r2
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800638c:	441c      	add	r4, r3
 800638e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006392:	2200      	movs	r2, #0
 8006394:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006398:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800639c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80063a0:	4642      	mov	r2, r8
 80063a2:	464b      	mov	r3, r9
 80063a4:	1891      	adds	r1, r2, r2
 80063a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80063a8:	415b      	adcs	r3, r3
 80063aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80063b0:	4641      	mov	r1, r8
 80063b2:	1851      	adds	r1, r2, r1
 80063b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80063b6:	4649      	mov	r1, r9
 80063b8:	414b      	adcs	r3, r1
 80063ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063c8:	4659      	mov	r1, fp
 80063ca:	00cb      	lsls	r3, r1, #3
 80063cc:	4651      	mov	r1, sl
 80063ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d2:	4651      	mov	r1, sl
 80063d4:	00ca      	lsls	r2, r1, #3
 80063d6:	4610      	mov	r0, r2
 80063d8:	4619      	mov	r1, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	4642      	mov	r2, r8
 80063de:	189b      	adds	r3, r3, r2
 80063e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063e4:	464b      	mov	r3, r9
 80063e6:	460a      	mov	r2, r1
 80063e8:	eb42 0303 	adc.w	r3, r2, r3
 80063ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006404:	460b      	mov	r3, r1
 8006406:	18db      	adds	r3, r3, r3
 8006408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800640a:	4613      	mov	r3, r2
 800640c:	eb42 0303 	adc.w	r3, r2, r3
 8006410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800641a:	f7fa fc45 	bl	8000ca8 <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <UART_SetConfig+0x2d4>)
 8006424:	fba3 1302 	umull	r1, r3, r3, r2
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	2164      	movs	r1, #100	@ 0x64
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	3332      	adds	r3, #50	@ 0x32
 8006436:	4a08      	ldr	r2, [pc, #32]	@ (8006458 <UART_SetConfig+0x2d4>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	f003 0207 	and.w	r2, r3, #7
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4422      	add	r2, r4
 800644a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800644c:	e106      	b.n	800665c <UART_SetConfig+0x4d8>
 800644e:	bf00      	nop
 8006450:	40011000 	.word	0x40011000
 8006454:	40011400 	.word	0x40011400
 8006458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800645c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006460:	2200      	movs	r2, #0
 8006462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006466:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800646a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800646e:	4642      	mov	r2, r8
 8006470:	464b      	mov	r3, r9
 8006472:	1891      	adds	r1, r2, r2
 8006474:	6239      	str	r1, [r7, #32]
 8006476:	415b      	adcs	r3, r3
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
 800647a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800647e:	4641      	mov	r1, r8
 8006480:	1854      	adds	r4, r2, r1
 8006482:	4649      	mov	r1, r9
 8006484:	eb43 0501 	adc.w	r5, r3, r1
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	00eb      	lsls	r3, r5, #3
 8006492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006496:	00e2      	lsls	r2, r4, #3
 8006498:	4614      	mov	r4, r2
 800649a:	461d      	mov	r5, r3
 800649c:	4643      	mov	r3, r8
 800649e:	18e3      	adds	r3, r4, r3
 80064a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064a4:	464b      	mov	r3, r9
 80064a6:	eb45 0303 	adc.w	r3, r5, r3
 80064aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064ca:	4629      	mov	r1, r5
 80064cc:	008b      	lsls	r3, r1, #2
 80064ce:	4621      	mov	r1, r4
 80064d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064d4:	4621      	mov	r1, r4
 80064d6:	008a      	lsls	r2, r1, #2
 80064d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064dc:	f7fa fbe4 	bl	8000ca8 <__aeabi_uldivmod>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4b60      	ldr	r3, [pc, #384]	@ (8006668 <UART_SetConfig+0x4e4>)
 80064e6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	011c      	lsls	r4, r3, #4
 80064ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006500:	4642      	mov	r2, r8
 8006502:	464b      	mov	r3, r9
 8006504:	1891      	adds	r1, r2, r2
 8006506:	61b9      	str	r1, [r7, #24]
 8006508:	415b      	adcs	r3, r3
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006510:	4641      	mov	r1, r8
 8006512:	1851      	adds	r1, r2, r1
 8006514:	6139      	str	r1, [r7, #16]
 8006516:	4649      	mov	r1, r9
 8006518:	414b      	adcs	r3, r1
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006528:	4659      	mov	r1, fp
 800652a:	00cb      	lsls	r3, r1, #3
 800652c:	4651      	mov	r1, sl
 800652e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006532:	4651      	mov	r1, sl
 8006534:	00ca      	lsls	r2, r1, #3
 8006536:	4610      	mov	r0, r2
 8006538:	4619      	mov	r1, r3
 800653a:	4603      	mov	r3, r0
 800653c:	4642      	mov	r2, r8
 800653e:	189b      	adds	r3, r3, r2
 8006540:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006544:	464b      	mov	r3, r9
 8006546:	460a      	mov	r2, r1
 8006548:	eb42 0303 	adc.w	r3, r2, r3
 800654c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	67bb      	str	r3, [r7, #120]	@ 0x78
 800655a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006568:	4649      	mov	r1, r9
 800656a:	008b      	lsls	r3, r1, #2
 800656c:	4641      	mov	r1, r8
 800656e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006572:	4641      	mov	r1, r8
 8006574:	008a      	lsls	r2, r1, #2
 8006576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800657a:	f7fa fb95 	bl	8000ca8 <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4611      	mov	r1, r2
 8006584:	4b38      	ldr	r3, [pc, #224]	@ (8006668 <UART_SetConfig+0x4e4>)
 8006586:	fba3 2301 	umull	r2, r3, r3, r1
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	2264      	movs	r2, #100	@ 0x64
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	1acb      	subs	r3, r1, r3
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	3332      	adds	r3, #50	@ 0x32
 8006598:	4a33      	ldr	r2, [pc, #204]	@ (8006668 <UART_SetConfig+0x4e4>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065a4:	441c      	add	r4, r3
 80065a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065aa:	2200      	movs	r2, #0
 80065ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80065ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80065b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80065b4:	4642      	mov	r2, r8
 80065b6:	464b      	mov	r3, r9
 80065b8:	1891      	adds	r1, r2, r2
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	415b      	adcs	r3, r3
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065c4:	4641      	mov	r1, r8
 80065c6:	1851      	adds	r1, r2, r1
 80065c8:	6039      	str	r1, [r7, #0]
 80065ca:	4649      	mov	r1, r9
 80065cc:	414b      	adcs	r3, r1
 80065ce:	607b      	str	r3, [r7, #4]
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065dc:	4659      	mov	r1, fp
 80065de:	00cb      	lsls	r3, r1, #3
 80065e0:	4651      	mov	r1, sl
 80065e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e6:	4651      	mov	r1, sl
 80065e8:	00ca      	lsls	r2, r1, #3
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	4642      	mov	r2, r8
 80065f2:	189b      	adds	r3, r3, r2
 80065f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065f6:	464b      	mov	r3, r9
 80065f8:	460a      	mov	r2, r1
 80065fa:	eb42 0303 	adc.w	r3, r2, r3
 80065fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	663b      	str	r3, [r7, #96]	@ 0x60
 800660a:	667a      	str	r2, [r7, #100]	@ 0x64
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006618:	4649      	mov	r1, r9
 800661a:	008b      	lsls	r3, r1, #2
 800661c:	4641      	mov	r1, r8
 800661e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006622:	4641      	mov	r1, r8
 8006624:	008a      	lsls	r2, r1, #2
 8006626:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800662a:	f7fa fb3d 	bl	8000ca8 <__aeabi_uldivmod>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4b0d      	ldr	r3, [pc, #52]	@ (8006668 <UART_SetConfig+0x4e4>)
 8006634:	fba3 1302 	umull	r1, r3, r3, r2
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	2164      	movs	r1, #100	@ 0x64
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	3332      	adds	r3, #50	@ 0x32
 8006646:	4a08      	ldr	r2, [pc, #32]	@ (8006668 <UART_SetConfig+0x4e4>)
 8006648:	fba2 2303 	umull	r2, r3, r2, r3
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	f003 020f 	and.w	r2, r3, #15
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4422      	add	r2, r4
 800665a:	609a      	str	r2, [r3, #8]
}
 800665c:	bf00      	nop
 800665e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006662:	46bd      	mov	sp, r7
 8006664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006668:	51eb851f 	.word	0x51eb851f

0800666c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	6812      	ldr	r2, [r2, #0]
 8006684:	f023 0101 	bic.w	r1, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b08      	cmp	r3, #8
 8006694:	d102      	bne.n	800669c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006696:	2340      	movs	r3, #64	@ 0x40
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e001      	b.n	80066a0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80066ac:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80066b2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80066b8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80066be:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80066c4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80066ca:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80066d0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80066d6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80066dc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80066fa:	4b10      	ldr	r3, [pc, #64]	@ (800673c <FSMC_NORSRAM_Init+0xd0>)
 80066fc:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006704:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800670c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	43db      	mvns	r3, r3
 800671c:	ea02 0103 	and.w	r1, r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4319      	orrs	r1, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	371c      	adds	r7, #28
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	0008fb7f 	.word	0x0008fb7f

08006740 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8006756:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800675e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8006766:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	3b01      	subs	r3, #1
 800676e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8006770:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	3b02      	subs	r3, #2
 8006778:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800677a:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8006786:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067b0:	d11d      	bne.n	80067ee <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067ba:	4b13      	ldr	r3, [pc, #76]	@ (8006808 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80067bc:	4013      	ands	r3, r2
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	6811      	ldr	r1, [r2, #0]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	6852      	ldr	r2, [r2, #4]
 80067c6:	0112      	lsls	r2, r2, #4
 80067c8:	4311      	orrs	r1, r2
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	6892      	ldr	r2, [r2, #8]
 80067ce:	0212      	lsls	r2, r2, #8
 80067d0:	4311      	orrs	r1, r2
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	6992      	ldr	r2, [r2, #24]
 80067d6:	4311      	orrs	r1, r2
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	68d2      	ldr	r2, [r2, #12]
 80067dc:	0412      	lsls	r2, r2, #16
 80067de:	430a      	orrs	r2, r1
 80067e0:	ea43 0102 	orr.w	r1, r3, r2
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80067ec:	e005      	b.n	80067fa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80067f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	cff00000 	.word	0xcff00000

0800680c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800680c:	b084      	sub	sp, #16
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	f107 001c 	add.w	r0, r7, #28
 800681a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800681e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006822:	2b01      	cmp	r3, #1
 8006824:	d123      	bne.n	800686e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800683a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800684e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006852:	2b01      	cmp	r3, #1
 8006854:	d105      	bne.n	8006862 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 fae8 	bl	8007e38 <USB_CoreReset>
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
 800686c:	e01b      	b.n	80068a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fadc 	bl	8007e38 <USB_CoreReset>
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006884:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006890:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	639a      	str	r2, [r3, #56]	@ 0x38
 8006898:	e005      	b.n	80068a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068a6:	7fbb      	ldrb	r3, [r7, #30]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d10b      	bne.n	80068c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f043 0206 	orr.w	r2, r3, #6
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f043 0220 	orr.w	r2, r3, #32
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068d0:	b004      	add	sp, #16
 80068d2:	4770      	bx	lr

080068d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d165      	bne.n	80069b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4a41      	ldr	r2, [pc, #260]	@ (80069f0 <USB_SetTurnaroundTime+0x11c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d906      	bls.n	80068fe <USB_SetTurnaroundTime+0x2a>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4a40      	ldr	r2, [pc, #256]	@ (80069f4 <USB_SetTurnaroundTime+0x120>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d202      	bcs.n	80068fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80068f8:	230f      	movs	r3, #15
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	e062      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4a3c      	ldr	r2, [pc, #240]	@ (80069f4 <USB_SetTurnaroundTime+0x120>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d306      	bcc.n	8006914 <USB_SetTurnaroundTime+0x40>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4a3b      	ldr	r2, [pc, #236]	@ (80069f8 <USB_SetTurnaroundTime+0x124>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d202      	bcs.n	8006914 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800690e:	230e      	movs	r3, #14
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	e057      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4a38      	ldr	r2, [pc, #224]	@ (80069f8 <USB_SetTurnaroundTime+0x124>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d306      	bcc.n	800692a <USB_SetTurnaroundTime+0x56>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4a37      	ldr	r2, [pc, #220]	@ (80069fc <USB_SetTurnaroundTime+0x128>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d202      	bcs.n	800692a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006924:	230d      	movs	r3, #13
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e04c      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4a33      	ldr	r2, [pc, #204]	@ (80069fc <USB_SetTurnaroundTime+0x128>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d306      	bcc.n	8006940 <USB_SetTurnaroundTime+0x6c>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4a32      	ldr	r2, [pc, #200]	@ (8006a00 <USB_SetTurnaroundTime+0x12c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d802      	bhi.n	8006940 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800693a:	230c      	movs	r3, #12
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	e041      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4a2f      	ldr	r2, [pc, #188]	@ (8006a00 <USB_SetTurnaroundTime+0x12c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d906      	bls.n	8006956 <USB_SetTurnaroundTime+0x82>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4a2e      	ldr	r2, [pc, #184]	@ (8006a04 <USB_SetTurnaroundTime+0x130>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d802      	bhi.n	8006956 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006950:	230b      	movs	r3, #11
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e036      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a2a      	ldr	r2, [pc, #168]	@ (8006a04 <USB_SetTurnaroundTime+0x130>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d906      	bls.n	800696c <USB_SetTurnaroundTime+0x98>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4a29      	ldr	r2, [pc, #164]	@ (8006a08 <USB_SetTurnaroundTime+0x134>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d802      	bhi.n	800696c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006966:	230a      	movs	r3, #10
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	e02b      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4a26      	ldr	r2, [pc, #152]	@ (8006a08 <USB_SetTurnaroundTime+0x134>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d906      	bls.n	8006982 <USB_SetTurnaroundTime+0xae>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4a25      	ldr	r2, [pc, #148]	@ (8006a0c <USB_SetTurnaroundTime+0x138>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d202      	bcs.n	8006982 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800697c:	2309      	movs	r3, #9
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e020      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4a21      	ldr	r2, [pc, #132]	@ (8006a0c <USB_SetTurnaroundTime+0x138>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d306      	bcc.n	8006998 <USB_SetTurnaroundTime+0xc4>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	4a20      	ldr	r2, [pc, #128]	@ (8006a10 <USB_SetTurnaroundTime+0x13c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d802      	bhi.n	8006998 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006992:	2308      	movs	r3, #8
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	e015      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a10 <USB_SetTurnaroundTime+0x13c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d906      	bls.n	80069ae <USB_SetTurnaroundTime+0xda>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006a14 <USB_SetTurnaroundTime+0x140>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d202      	bcs.n	80069ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069a8:	2307      	movs	r3, #7
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e00a      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80069ae:	2306      	movs	r3, #6
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	e007      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d102      	bne.n	80069c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80069ba:	2309      	movs	r3, #9
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	e001      	b.n	80069c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80069c0:	2309      	movs	r3, #9
 80069c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	029b      	lsls	r3, r3, #10
 80069d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	00d8acbf 	.word	0x00d8acbf
 80069f4:	00e4e1c0 	.word	0x00e4e1c0
 80069f8:	00f42400 	.word	0x00f42400
 80069fc:	01067380 	.word	0x01067380
 8006a00:	011a499f 	.word	0x011a499f
 8006a04:	01312cff 	.word	0x01312cff
 8006a08:	014ca43f 	.word	0x014ca43f
 8006a0c:	016e3600 	.word	0x016e3600
 8006a10:	01a6ab1f 	.word	0x01a6ab1f
 8006a14:	01e84800 	.word	0x01e84800

08006a18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f043 0201 	orr.w	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f023 0201 	bic.w	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d115      	bne.n	8006aaa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a8a:	200a      	movs	r0, #10
 8006a8c:	f7fb ff20 	bl	80028d0 <HAL_Delay>
      ms += 10U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	330a      	adds	r3, #10
 8006a94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 f93f 	bl	8007d1a <USB_GetMode>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d01e      	beq.n	8006ae0 <USB_SetCurrentMode+0x84>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006aa6:	d9f0      	bls.n	8006a8a <USB_SetCurrentMode+0x2e>
 8006aa8:	e01a      	b.n	8006ae0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d115      	bne.n	8006adc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006abc:	200a      	movs	r0, #10
 8006abe:	f7fb ff07 	bl	80028d0 <HAL_Delay>
      ms += 10U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	330a      	adds	r3, #10
 8006ac6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 f926 	bl	8007d1a <USB_GetMode>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <USB_SetCurrentMode+0x84>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ad8:	d9f0      	bls.n	8006abc <USB_SetCurrentMode+0x60>
 8006ada:	e001      	b.n	8006ae0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e005      	b.n	8006aec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ae4:	d101      	bne.n	8006aea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006af4:	b084      	sub	sp, #16
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b086      	sub	sp, #24
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b0e:	2300      	movs	r3, #0
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	e009      	b.n	8006b28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	3340      	adds	r3, #64	@ 0x40
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	2200      	movs	r2, #0
 8006b20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	3301      	adds	r3, #1
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b0e      	cmp	r3, #14
 8006b2c:	d9f2      	bls.n	8006b14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d11c      	bne.n	8006b70 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b6e:	e00b      	b.n	8006b88 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b8e:	461a      	mov	r2, r3
 8006b90:	2300      	movs	r3, #0
 8006b92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d10d      	bne.n	8006bb8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f968 	bl	8006e7c <USB_SetDevSpeed>
 8006bac:	e008      	b.n	8006bc0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006bae:	2101      	movs	r1, #1
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f963 	bl	8006e7c <USB_SetDevSpeed>
 8006bb6:	e003      	b.n	8006bc0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bb8:	2103      	movs	r1, #3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f95e 	bl	8006e7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bc0:	2110      	movs	r1, #16
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f8fa 	bl	8006dbc <USB_FlushTxFifo>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f924 	bl	8006e20 <USB_FlushRxFifo>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be8:	461a      	mov	r2, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c00:	461a      	mov	r2, r3
 8006c02:	2300      	movs	r3, #0
 8006c04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	e043      	b.n	8006c94 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c22:	d118      	bne.n	8006c56 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c36:	461a      	mov	r2, r3
 8006c38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e013      	b.n	8006c68 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	e008      	b.n	8006c68 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c62:	461a      	mov	r2, r3
 8006c64:	2300      	movs	r3, #0
 8006c66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c74:	461a      	mov	r2, r3
 8006c76:	2300      	movs	r3, #0
 8006c78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c86:	461a      	mov	r2, r3
 8006c88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	3301      	adds	r3, #1
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c98:	461a      	mov	r2, r3
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d3b5      	bcc.n	8006c0c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	613b      	str	r3, [r7, #16]
 8006ca4:	e043      	b.n	8006d2e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cbc:	d118      	bne.n	8006cf0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	e013      	b.n	8006d02 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	e008      	b.n	8006d02 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d0e:	461a      	mov	r2, r3
 8006d10:	2300      	movs	r3, #0
 8006d12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d20:	461a      	mov	r2, r3
 8006d22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d32:	461a      	mov	r2, r3
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d3b5      	bcc.n	8006ca6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d105      	bne.n	8006d70 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f043 0210 	orr.w	r2, r3, #16
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	4b10      	ldr	r3, [pc, #64]	@ (8006db8 <USB_DevInit+0x2c4>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	f043 0208 	orr.w	r2, r3, #8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d107      	bne.n	8006da8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006da0:	f043 0304 	orr.w	r3, r3, #4
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006db4:	b004      	add	sp, #16
 8006db6:	4770      	bx	lr
 8006db8:	803c3800 	.word	0x803c3800

08006dbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dd6:	d901      	bls.n	8006ddc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e01b      	b.n	8006e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	daf2      	bge.n	8006dca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	019b      	lsls	r3, r3, #6
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e00:	d901      	bls.n	8006e06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e006      	b.n	8006e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d0f0      	beq.n	8006df4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e38:	d901      	bls.n	8006e3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e018      	b.n	8006e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	daf2      	bge.n	8006e2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2210      	movs	r2, #16
 8006e4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e5c:	d901      	bls.n	8006e62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e006      	b.n	8006e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d0f0      	beq.n	8006e50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	68f9      	ldr	r1, [r7, #12]
 8006e98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b087      	sub	sp, #28
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f003 0306 	and.w	r3, r3, #6
 8006ec6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	75fb      	strb	r3, [r7, #23]
 8006ed2:	e00a      	b.n	8006eea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d002      	beq.n	8006ee0 <USB_GetDevSpeed+0x32>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b06      	cmp	r3, #6
 8006ede:	d102      	bne.n	8006ee6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	75fb      	strb	r3, [r7, #23]
 8006ee4:	e001      	b.n	8006eea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ee6:	230f      	movs	r3, #15
 8006ee8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d13a      	bne.n	8006f8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f1a:	69da      	ldr	r2, [r3, #28]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	2101      	movs	r1, #1
 8006f26:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	68f9      	ldr	r1, [r7, #12]
 8006f2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f32:	4313      	orrs	r3, r2
 8006f34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d155      	bne.n	8006ff8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	791b      	ldrb	r3, [r3, #4]
 8006f66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	059b      	lsls	r3, r3, #22
 8006f6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f70:	4313      	orrs	r3, r2
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	e036      	b.n	8006ff8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f90:	69da      	ldr	r2, [r3, #28]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	68f9      	ldr	r1, [r7, #12]
 8006fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d11a      	bne.n	8006ff8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	791b      	ldrb	r3, [r3, #4]
 8006fdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ff6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
	...

08007008 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d161      	bne.n	80070e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007036:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800703a:	d11f      	bne.n	800707c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007056:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800705a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	440a      	add	r2, r1
 8007072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007076:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800707a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	2101      	movs	r1, #1
 800708e:	fa01 f303 	lsl.w	r3, r1, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	43db      	mvns	r3, r3
 8007096:	68f9      	ldr	r1, [r7, #12]
 8007098:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800709c:	4013      	ands	r3, r2
 800709e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a6:	69da      	ldr	r2, [r3, #28]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	f003 030f 	and.w	r3, r3, #15
 80070b0:	2101      	movs	r1, #1
 80070b2:	fa01 f303 	lsl.w	r3, r1, r3
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	43db      	mvns	r3, r3
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070c0:	4013      	ands	r3, r2
 80070c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	0159      	lsls	r1, r3, #5
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	440b      	add	r3, r1
 80070da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070de:	4619      	mov	r1, r3
 80070e0:	4b35      	ldr	r3, [pc, #212]	@ (80071b8 <USB_DeactivateEndpoint+0x1b0>)
 80070e2:	4013      	ands	r3, r2
 80070e4:	600b      	str	r3, [r1, #0]
 80070e6:	e060      	b.n	80071aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070fe:	d11f      	bne.n	8007140 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800711a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800711e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800713a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800713e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	2101      	movs	r1, #1
 8007152:	fa01 f303 	lsl.w	r3, r1, r3
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	43db      	mvns	r3, r3
 800715a:	68f9      	ldr	r1, [r7, #12]
 800715c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007160:	4013      	ands	r3, r2
 8007162:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800716a:	69da      	ldr	r2, [r3, #28]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	2101      	movs	r1, #1
 8007176:	fa01 f303 	lsl.w	r3, r1, r3
 800717a:	041b      	lsls	r3, r3, #16
 800717c:	43db      	mvns	r3, r3
 800717e:	68f9      	ldr	r1, [r7, #12]
 8007180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007184:	4013      	ands	r3, r2
 8007186:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	0159      	lsls	r1, r3, #5
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	440b      	add	r3, r1
 800719e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a2:	4619      	mov	r1, r3
 80071a4:	4b05      	ldr	r3, [pc, #20]	@ (80071bc <USB_DeactivateEndpoint+0x1b4>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	ec337800 	.word	0xec337800
 80071bc:	eff37800 	.word	0xeff37800

080071c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	@ 0x28
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	f040 817f 	bne.w	80074e0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d132      	bne.n	8007250 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	0151      	lsls	r1, r2, #5
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	440a      	add	r2, r1
 8007200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007204:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007208:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800720c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	0151      	lsls	r1, r2, #5
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	440a      	add	r2, r1
 8007224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007228:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800722c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007248:	0cdb      	lsrs	r3, r3, #19
 800724a:	04db      	lsls	r3, r3, #19
 800724c:	6113      	str	r3, [r2, #16]
 800724e:	e097      	b.n	8007380 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	0151      	lsls	r1, r2, #5
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	440a      	add	r2, r1
 8007266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800726a:	0cdb      	lsrs	r3, r3, #19
 800726c:	04db      	lsls	r3, r3, #19
 800726e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	440a      	add	r2, r1
 8007286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800728a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800728e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007292:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d11a      	bne.n	80072d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d903      	bls.n	80072ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072cc:	6113      	str	r3, [r2, #16]
 80072ce:	e044      	b.n	800735a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	4413      	add	r3, r2
 80072da:	1e5a      	subs	r2, r3, #1
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	8afb      	ldrh	r3, [r7, #22]
 80072f6:	04d9      	lsls	r1, r3, #19
 80072f8:	4ba4      	ldr	r3, [pc, #656]	@ (800758c <USB_EPStartXfer+0x3cc>)
 80072fa:	400b      	ands	r3, r1
 80072fc:	69b9      	ldr	r1, [r7, #24]
 80072fe:	0148      	lsls	r0, r1, #5
 8007300:	69f9      	ldr	r1, [r7, #28]
 8007302:	4401      	add	r1, r0
 8007304:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007308:	4313      	orrs	r3, r2
 800730a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	791b      	ldrb	r3, [r3, #4]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d122      	bne.n	800735a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800732e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007332:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	8afb      	ldrh	r3, [r7, #22]
 8007344:	075b      	lsls	r3, r3, #29
 8007346:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800734a:	69b9      	ldr	r1, [r7, #24]
 800734c:	0148      	lsls	r0, r1, #5
 800734e:	69f9      	ldr	r1, [r7, #28]
 8007350:	4401      	add	r1, r0
 8007352:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007356:	4313      	orrs	r3, r2
 8007358:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007370:	69b9      	ldr	r1, [r7, #24]
 8007372:	0148      	lsls	r0, r1, #5
 8007374:	69f9      	ldr	r1, [r7, #28]
 8007376:	4401      	add	r1, r0
 8007378:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800737c:	4313      	orrs	r3, r2
 800737e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d14b      	bne.n	800741e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800739a:	461a      	mov	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	791b      	ldrb	r3, [r3, #4]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d128      	bne.n	80073fc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d110      	bne.n	80073dc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	0151      	lsls	r1, r2, #5
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	440a      	add	r2, r1
 80073d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	e00f      	b.n	80073fc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073fa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	0151      	lsls	r1, r2, #5
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	440a      	add	r2, r1
 8007412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007416:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	e166      	b.n	80076ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	0151      	lsls	r1, r2, #5
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	440a      	add	r2, r1
 8007434:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007438:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800743c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	791b      	ldrb	r3, [r3, #4]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d015      	beq.n	8007472 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 814e 	beq.w	80076ec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	2101      	movs	r1, #1
 8007462:	fa01 f303 	lsl.w	r3, r1, r3
 8007466:	69f9      	ldr	r1, [r7, #28]
 8007468:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800746c:	4313      	orrs	r3, r2
 800746e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007470:	e13c      	b.n	80076ec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800747e:	2b00      	cmp	r3, #0
 8007480:	d110      	bne.n	80074a4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800749c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	e00f      	b.n	80074c4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	0151      	lsls	r1, r2, #5
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	440a      	add	r2, r1
 80074ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074c2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	68d9      	ldr	r1, [r3, #12]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	b298      	uxth	r0, r3
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	4603      	mov	r3, r0
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f9b9 	bl	8007850 <USB_WritePacket>
 80074de:	e105      	b.n	80076ec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	0151      	lsls	r1, r2, #5
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	440a      	add	r2, r1
 80074f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074fa:	0cdb      	lsrs	r3, r3, #19
 80074fc:	04db      	lsls	r3, r3, #19
 80074fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	440a      	add	r2, r1
 8007516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800751a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800751e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007522:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d132      	bne.n	8007590 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007558:	69b9      	ldr	r1, [r7, #24]
 800755a:	0148      	lsls	r0, r1, #5
 800755c:	69f9      	ldr	r1, [r7, #28]
 800755e:	4401      	add	r1, r0
 8007560:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007564:	4313      	orrs	r3, r2
 8007566:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	0151      	lsls	r1, r2, #5
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	440a      	add	r2, r1
 800757e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007582:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007586:	6113      	str	r3, [r2, #16]
 8007588:	e062      	b.n	8007650 <USB_EPStartXfer+0x490>
 800758a:	bf00      	nop
 800758c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d123      	bne.n	80075e0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a4:	691a      	ldr	r2, [r3, #16]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ae:	69b9      	ldr	r1, [r7, #24]
 80075b0:	0148      	lsls	r0, r1, #5
 80075b2:	69f9      	ldr	r1, [r7, #28]
 80075b4:	4401      	add	r1, r0
 80075b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80075ba:	4313      	orrs	r3, r2
 80075bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075dc:	6113      	str	r3, [r2, #16]
 80075de:	e037      	b.n	8007650 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	4413      	add	r3, r2
 80075ea:	1e5a      	subs	r2, r3, #1
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	8afa      	ldrh	r2, [r7, #22]
 80075fc:	fb03 f202 	mul.w	r2, r3, r2
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007610:	691a      	ldr	r2, [r3, #16]
 8007612:	8afb      	ldrh	r3, [r7, #22]
 8007614:	04d9      	lsls	r1, r3, #19
 8007616:	4b38      	ldr	r3, [pc, #224]	@ (80076f8 <USB_EPStartXfer+0x538>)
 8007618:	400b      	ands	r3, r1
 800761a:	69b9      	ldr	r1, [r7, #24]
 800761c:	0148      	lsls	r0, r1, #5
 800761e:	69f9      	ldr	r1, [r7, #28]
 8007620:	4401      	add	r1, r0
 8007622:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007626:	4313      	orrs	r3, r2
 8007628:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007640:	69b9      	ldr	r1, [r7, #24]
 8007642:	0148      	lsls	r0, r1, #5
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	4401      	add	r1, r0
 8007648:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800764c:	4313      	orrs	r3, r2
 800764e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d10d      	bne.n	8007672 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	68d9      	ldr	r1, [r3, #12]
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766e:	460a      	mov	r2, r1
 8007670:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	791b      	ldrb	r3, [r3, #4]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d128      	bne.n	80076cc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007686:	2b00      	cmp	r3, #0
 8007688:	d110      	bne.n	80076ac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	0151      	lsls	r1, r2, #5
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	440a      	add	r2, r1
 80076a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	e00f      	b.n	80076cc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	0151      	lsls	r1, r2, #5
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	440a      	add	r2, r1
 80076c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	1ff80000 	.word	0x1ff80000

080076fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d14a      	bne.n	80077b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800772e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007732:	f040 8086 	bne.w	8007842 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	7812      	ldrb	r2, [r2, #0]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007754:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007758:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	7812      	ldrb	r2, [r2, #0]
 800776e:	0151      	lsls	r1, r2, #5
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	440a      	add	r2, r1
 8007774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007778:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800777c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3301      	adds	r3, #1
 8007782:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f242 7210 	movw	r2, #10000	@ 0x2710
 800778a:	4293      	cmp	r3, r2
 800778c:	d902      	bls.n	8007794 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	75fb      	strb	r3, [r7, #23]
          break;
 8007792:	e056      	b.n	8007842 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077ac:	d0e7      	beq.n	800777e <USB_EPStopXfer+0x82>
 80077ae:	e048      	b.n	8007842 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077c8:	d13b      	bne.n	8007842 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	7812      	ldrb	r2, [r2, #0]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	7812      	ldrb	r2, [r2, #0]
 8007802:	0151      	lsls	r1, r2, #5
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	440a      	add	r2, r1
 8007808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800780c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007810:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3301      	adds	r3, #1
 8007816:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800781e:	4293      	cmp	r3, r2
 8007820:	d902      	bls.n	8007828 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	75fb      	strb	r3, [r7, #23]
          break;
 8007826:	e00c      	b.n	8007842 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800783c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007840:	d0e7      	beq.n	8007812 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
}
 8007844:	4618      	mov	r0, r3
 8007846:	371c      	adds	r7, #28
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007850:	b480      	push	{r7}
 8007852:	b089      	sub	sp, #36	@ 0x24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4611      	mov	r1, r2
 800785c:	461a      	mov	r2, r3
 800785e:	460b      	mov	r3, r1
 8007860:	71fb      	strb	r3, [r7, #7]
 8007862:	4613      	mov	r3, r2
 8007864:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800786e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007872:	2b00      	cmp	r3, #0
 8007874:	d123      	bne.n	80078be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007876:	88bb      	ldrh	r3, [r7, #4]
 8007878:	3303      	adds	r3, #3
 800787a:	089b      	lsrs	r3, r3, #2
 800787c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800787e:	2300      	movs	r3, #0
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	e018      	b.n	80078b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	031a      	lsls	r2, r3, #12
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	4413      	add	r3, r2
 800788c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007890:	461a      	mov	r2, r3
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	3301      	adds	r3, #1
 800789c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	3301      	adds	r3, #1
 80078a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	3301      	adds	r3, #1
 80078a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	3301      	adds	r3, #1
 80078ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	3301      	adds	r3, #1
 80078b4:	61bb      	str	r3, [r7, #24]
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d3e2      	bcc.n	8007884 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3724      	adds	r7, #36	@ 0x24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b08b      	sub	sp, #44	@ 0x2c
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	4613      	mov	r3, r2
 80078d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	089b      	lsrs	r3, r3, #2
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	f003 0303 	and.w	r3, r3, #3
 80078f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078f2:	2300      	movs	r3, #0
 80078f4:	623b      	str	r3, [r7, #32]
 80078f6:	e014      	b.n	8007922 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	601a      	str	r2, [r3, #0]
    pDest++;
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	3301      	adds	r3, #1
 8007908:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800790a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790c:	3301      	adds	r3, #1
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	3301      	adds	r3, #1
 8007914:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	3301      	adds	r3, #1
 800791a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	3301      	adds	r3, #1
 8007920:	623b      	str	r3, [r7, #32]
 8007922:	6a3a      	ldr	r2, [r7, #32]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	429a      	cmp	r2, r3
 8007928:	d3e6      	bcc.n	80078f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800792a:	8bfb      	ldrh	r3, [r7, #30]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01e      	beq.n	800796e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800793a:	461a      	mov	r2, r3
 800793c:	f107 0310 	add.w	r3, r7, #16
 8007940:	6812      	ldr	r2, [r2, #0]
 8007942:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	fa22 f303 	lsr.w	r3, r2, r3
 8007950:	b2da      	uxtb	r2, r3
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	701a      	strb	r2, [r3, #0]
      i++;
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	3301      	adds	r3, #1
 800795a:	623b      	str	r3, [r7, #32]
      pDest++;
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	3301      	adds	r3, #1
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007962:	8bfb      	ldrh	r3, [r7, #30]
 8007964:	3b01      	subs	r3, #1
 8007966:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007968:	8bfb      	ldrh	r3, [r7, #30]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1ea      	bne.n	8007944 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007970:	4618      	mov	r0, r3
 8007972:	372c      	adds	r7, #44	@ 0x2c
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d12c      	bne.n	80079f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	db12      	blt.n	80079d0 <USB_EPSetStall+0x54>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00f      	beq.n	80079d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	0151      	lsls	r1, r2, #5
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	440a      	add	r2, r1
 80079c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80079ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	0151      	lsls	r1, r2, #5
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	440a      	add	r2, r1
 80079e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	e02b      	b.n	8007a4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	db12      	blt.n	8007a2a <USB_EPSetStall+0xae>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00f      	beq.n	8007a2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	0151      	lsls	r1, r2, #5
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	440a      	add	r2, r1
 8007a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	0151      	lsls	r1, r2, #5
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	440a      	add	r2, r1
 8007a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	785b      	ldrb	r3, [r3, #1]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d128      	bne.n	8007ac6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	791b      	ldrb	r3, [r3, #4]
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d003      	beq.n	8007aa4 <USB_EPClearStall+0x4c>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	791b      	ldrb	r3, [r3, #4]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d138      	bne.n	8007b16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	0151      	lsls	r1, r2, #5
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	440a      	add	r2, r1
 8007aba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	e027      	b.n	8007b16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ae0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ae4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	791b      	ldrb	r3, [r3, #4]
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d003      	beq.n	8007af6 <USB_EPClearStall+0x9e>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	791b      	ldrb	r3, [r3, #4]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d10f      	bne.n	8007b16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007b46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007b58:	68f9      	ldr	r1, [r7, #12]
 8007b5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b8a:	f023 0303 	bic.w	r3, r3, #3
 8007b8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b9e:	f023 0302 	bic.w	r3, r3, #2
 8007ba2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bcc:	f023 0303 	bic.w	r3, r3, #3
 8007bd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007be0:	f043 0302 	orr.w	r3, r3, #2
 8007be4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b085      	sub	sp, #20
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	0c1b      	lsrs	r3, r3, #16
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	b29b      	uxth	r3, r3
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	4013      	ands	r3, r2
 8007cae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b087      	sub	sp, #28
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ce2:	78fb      	ldrb	r3, [r7, #3]
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	fa22 f303 	lsr.w	r3, r2, r3
 8007cee:	01db      	lsls	r3, r3, #7
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	4013      	ands	r3, r2
 8007d0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	f003 0301 	and.w	r3, r3, #1
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007d54:	f023 0307 	bic.w	r3, r3, #7
 8007d58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	460b      	mov	r3, r1
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	333c      	adds	r3, #60	@ 0x3c
 8007d92:	3304      	adds	r3, #4
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	4a26      	ldr	r2, [pc, #152]	@ (8007e34 <USB_EP0_OutStart+0xb8>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d90a      	bls.n	8007db6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007db0:	d101      	bne.n	8007db6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	e037      	b.n	8007e26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007de4:	f043 0318 	orr.w	r3, r3, #24
 8007de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007df8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007dfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d10f      	bne.n	8007e24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	4f54300a 	.word	0x4f54300a

08007e38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e50:	d901      	bls.n	8007e56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e022      	b.n	8007e9c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	daf2      	bge.n	8007e44 <USB_CoreReset+0xc>

  count = 10U;
 8007e5e:	230a      	movs	r3, #10
 8007e60:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007e62:	e002      	b.n	8007e6a <USB_CoreReset+0x32>
  {
    count--;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1f9      	bne.n	8007e64 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	f043 0201 	orr.w	r2, r3, #1
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e88:	d901      	bls.n	8007e8e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e006      	b.n	8007e9c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d0f0      	beq.n	8007e7c <USB_CoreReset+0x44>

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007eb4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007eb8:	f002 fcf8 	bl	800a8ac <USBD_static_malloc>
 8007ebc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	32b0      	adds	r2, #176	@ 0xb0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e0d4      	b.n	8008082 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ed8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007edc:	2100      	movs	r1, #0
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f004 fe3b 	bl	800cb5a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	32b0      	adds	r2, #176	@ 0xb0
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	32b0      	adds	r2, #176	@ 0xb0
 8007efe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7c1b      	ldrb	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d138      	bne.n	8007f82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f10:	4b5e      	ldr	r3, [pc, #376]	@ (800808c <USBD_CDC_Init+0x1e4>)
 8007f12:	7819      	ldrb	r1, [r3, #0]
 8007f14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f18:	2202      	movs	r2, #2
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f002 fba3 	bl	800a666 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f20:	4b5a      	ldr	r3, [pc, #360]	@ (800808c <USBD_CDC_Init+0x1e4>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 020f 	and.w	r2, r3, #15
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	3323      	adds	r3, #35	@ 0x23
 8007f36:	2201      	movs	r2, #1
 8007f38:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f3a:	4b55      	ldr	r3, [pc, #340]	@ (8008090 <USBD_CDC_Init+0x1e8>)
 8007f3c:	7819      	ldrb	r1, [r3, #0]
 8007f3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f42:	2202      	movs	r2, #2
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f002 fb8e 	bl	800a666 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f4a:	4b51      	ldr	r3, [pc, #324]	@ (8008090 <USBD_CDC_Init+0x1e8>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	f003 020f 	and.w	r2, r3, #15
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007f62:	2201      	movs	r2, #1
 8007f64:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f66:	4b4b      	ldr	r3, [pc, #300]	@ (8008094 <USBD_CDC_Init+0x1ec>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	f003 020f 	and.w	r2, r3, #15
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	331c      	adds	r3, #28
 8007f7c:	2210      	movs	r2, #16
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	e035      	b.n	8007fee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f82:	4b42      	ldr	r3, [pc, #264]	@ (800808c <USBD_CDC_Init+0x1e4>)
 8007f84:	7819      	ldrb	r1, [r3, #0]
 8007f86:	2340      	movs	r3, #64	@ 0x40
 8007f88:	2202      	movs	r2, #2
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f002 fb6b 	bl	800a666 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f90:	4b3e      	ldr	r3, [pc, #248]	@ (800808c <USBD_CDC_Init+0x1e4>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	f003 020f 	and.w	r2, r3, #15
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3323      	adds	r3, #35	@ 0x23
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007faa:	4b39      	ldr	r3, [pc, #228]	@ (8008090 <USBD_CDC_Init+0x1e8>)
 8007fac:	7819      	ldrb	r1, [r3, #0]
 8007fae:	2340      	movs	r3, #64	@ 0x40
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f002 fb57 	bl	800a666 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fb8:	4b35      	ldr	r3, [pc, #212]	@ (8008090 <USBD_CDC_Init+0x1e8>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	f003 020f 	and.w	r2, r3, #15
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8008094 <USBD_CDC_Init+0x1ec>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	f003 020f 	and.w	r2, r3, #15
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	331c      	adds	r3, #28
 8007fea:	2210      	movs	r2, #16
 8007fec:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fee:	4b29      	ldr	r3, [pc, #164]	@ (8008094 <USBD_CDC_Init+0x1ec>)
 8007ff0:	7819      	ldrb	r1, [r3, #0]
 8007ff2:	2308      	movs	r3, #8
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f002 fb35 	bl	800a666 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007ffc:	4b25      	ldr	r3, [pc, #148]	@ (8008094 <USBD_CDC_Init+0x1ec>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	f003 020f 	and.w	r2, r3, #15
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	3323      	adds	r3, #35	@ 0x23
 8008012:	2201      	movs	r2, #1
 8008014:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	33b0      	adds	r3, #176	@ 0xb0
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800804c:	2302      	movs	r3, #2
 800804e:	e018      	b.n	8008082 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7c1b      	ldrb	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008058:	4b0d      	ldr	r3, [pc, #52]	@ (8008090 <USBD_CDC_Init+0x1e8>)
 800805a:	7819      	ldrb	r1, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008062:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f002 fbec 	bl	800a844 <USBD_LL_PrepareReceive>
 800806c:	e008      	b.n	8008080 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800806e:	4b08      	ldr	r3, [pc, #32]	@ (8008090 <USBD_CDC_Init+0x1e8>)
 8008070:	7819      	ldrb	r1, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008078:	2340      	movs	r3, #64	@ 0x40
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f002 fbe2 	bl	800a844 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000097 	.word	0x20000097
 8008090:	20000098 	.word	0x20000098
 8008094:	20000099 	.word	0x20000099

08008098 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80080a4:	4b3a      	ldr	r3, [pc, #232]	@ (8008190 <USBD_CDC_DeInit+0xf8>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f002 fb01 	bl	800a6b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80080b0:	4b37      	ldr	r3, [pc, #220]	@ (8008190 <USBD_CDC_DeInit+0xf8>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	f003 020f 	and.w	r2, r3, #15
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	4613      	mov	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	440b      	add	r3, r1
 80080c4:	3323      	adds	r3, #35	@ 0x23
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80080ca:	4b32      	ldr	r3, [pc, #200]	@ (8008194 <USBD_CDC_DeInit+0xfc>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f002 faee 	bl	800a6b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80080d6:	4b2f      	ldr	r3, [pc, #188]	@ (8008194 <USBD_CDC_DeInit+0xfc>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f003 020f 	and.w	r2, r3, #15
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80080ee:	2200      	movs	r2, #0
 80080f0:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80080f2:	4b29      	ldr	r3, [pc, #164]	@ (8008198 <USBD_CDC_DeInit+0x100>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f002 fada 	bl	800a6b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80080fe:	4b26      	ldr	r3, [pc, #152]	@ (8008198 <USBD_CDC_DeInit+0x100>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	f003 020f 	and.w	r2, r3, #15
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	440b      	add	r3, r1
 8008112:	3323      	adds	r3, #35	@ 0x23
 8008114:	2200      	movs	r2, #0
 8008116:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008118:	4b1f      	ldr	r3, [pc, #124]	@ (8008198 <USBD_CDC_DeInit+0x100>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 020f 	and.w	r2, r3, #15
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	331c      	adds	r3, #28
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32b0      	adds	r2, #176	@ 0xb0
 800813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01f      	beq.n	8008184 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	33b0      	adds	r3, #176	@ 0xb0
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	32b0      	adds	r2, #176	@ 0xb0
 8008162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008166:	4618      	mov	r0, r3
 8008168:	f002 fbae 	bl	800a8c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	32b0      	adds	r2, #176	@ 0xb0
 8008176:	2100      	movs	r1, #0
 8008178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000097 	.word	0x20000097
 8008194:	20000098 	.word	0x20000098
 8008198:	20000099 	.word	0x20000099

0800819c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	32b0      	adds	r2, #176	@ 0xb0
 80081b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e0bf      	b.n	800834c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d050      	beq.n	800827a <USBD_CDC_Setup+0xde>
 80081d8:	2b20      	cmp	r3, #32
 80081da:	f040 80af 	bne.w	800833c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	88db      	ldrh	r3, [r3, #6]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d03a      	beq.n	800825c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	b25b      	sxtb	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	da1b      	bge.n	8008228 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	33b0      	adds	r3, #176	@ 0xb0
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008206:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	88d2      	ldrh	r2, [r2, #6]
 800820c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	88db      	ldrh	r3, [r3, #6]
 8008212:	2b07      	cmp	r3, #7
 8008214:	bf28      	it	cs
 8008216:	2307      	movcs	r3, #7
 8008218:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	89fa      	ldrh	r2, [r7, #14]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 fda9 	bl	8009d78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008226:	e090      	b.n	800834a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	785a      	ldrb	r2, [r3, #1]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	88db      	ldrh	r3, [r3, #6]
 8008236:	2b3f      	cmp	r3, #63	@ 0x3f
 8008238:	d803      	bhi.n	8008242 <USBD_CDC_Setup+0xa6>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	88db      	ldrh	r3, [r3, #6]
 800823e:	b2da      	uxtb	r2, r3
 8008240:	e000      	b.n	8008244 <USBD_CDC_Setup+0xa8>
 8008242:	2240      	movs	r2, #64	@ 0x40
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800824a:	6939      	ldr	r1, [r7, #16]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008252:	461a      	mov	r2, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 fdbe 	bl	8009dd6 <USBD_CtlPrepareRx>
      break;
 800825a:	e076      	b.n	800834a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	33b0      	adds	r3, #176	@ 0xb0
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	7850      	ldrb	r0, [r2, #1]
 8008272:	2200      	movs	r2, #0
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	4798      	blx	r3
      break;
 8008278:	e067      	b.n	800834a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	2b0b      	cmp	r3, #11
 8008280:	d851      	bhi.n	8008326 <USBD_CDC_Setup+0x18a>
 8008282:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <USBD_CDC_Setup+0xec>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082b9 	.word	0x080082b9
 800828c:	08008335 	.word	0x08008335
 8008290:	08008327 	.word	0x08008327
 8008294:	08008327 	.word	0x08008327
 8008298:	08008327 	.word	0x08008327
 800829c:	08008327 	.word	0x08008327
 80082a0:	08008327 	.word	0x08008327
 80082a4:	08008327 	.word	0x08008327
 80082a8:	08008327 	.word	0x08008327
 80082ac:	08008327 	.word	0x08008327
 80082b0:	080082e3 	.word	0x080082e3
 80082b4:	0800830d 	.word	0x0800830d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d107      	bne.n	80082d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082c4:	f107 030a 	add.w	r3, r7, #10
 80082c8:	2202      	movs	r2, #2
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f001 fd53 	bl	8009d78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082d2:	e032      	b.n	800833a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fcd1 	bl	8009c7e <USBD_CtlError>
            ret = USBD_FAIL;
 80082dc:	2303      	movs	r3, #3
 80082de:	75fb      	strb	r3, [r7, #23]
          break;
 80082e0:	e02b      	b.n	800833a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d107      	bne.n	80082fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80082ee:	f107 030d 	add.w	r3, r7, #13
 80082f2:	2201      	movs	r2, #1
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 fd3e 	bl	8009d78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082fc:	e01d      	b.n	800833a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 fcbc 	bl	8009c7e <USBD_CtlError>
            ret = USBD_FAIL;
 8008306:	2303      	movs	r3, #3
 8008308:	75fb      	strb	r3, [r7, #23]
          break;
 800830a:	e016      	b.n	800833a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b03      	cmp	r3, #3
 8008316:	d00f      	beq.n	8008338 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 fcaf 	bl	8009c7e <USBD_CtlError>
            ret = USBD_FAIL;
 8008320:	2303      	movs	r3, #3
 8008322:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008324:	e008      	b.n	8008338 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f001 fca8 	bl	8009c7e <USBD_CtlError>
          ret = USBD_FAIL;
 800832e:	2303      	movs	r3, #3
 8008330:	75fb      	strb	r3, [r7, #23]
          break;
 8008332:	e002      	b.n	800833a <USBD_CDC_Setup+0x19e>
          break;
 8008334:	bf00      	nop
 8008336:	e008      	b.n	800834a <USBD_CDC_Setup+0x1ae>
          break;
 8008338:	bf00      	nop
      }
      break;
 800833a:	e006      	b.n	800834a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 fc9d 	bl	8009c7e <USBD_CtlError>
      ret = USBD_FAIL;
 8008344:	2303      	movs	r3, #3
 8008346:	75fb      	strb	r3, [r7, #23]
      break;
 8008348:	bf00      	nop
  }

  return (uint8_t)ret;
 800834a:	7dfb      	ldrb	r3, [r7, #23]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3718      	adds	r7, #24
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008366:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	32b0      	adds	r2, #176	@ 0xb0
 8008372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800837a:	2303      	movs	r3, #3
 800837c:	e065      	b.n	800844a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	32b0      	adds	r2, #176	@ 0xb0
 8008388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800838e:	78fb      	ldrb	r3, [r7, #3]
 8008390:	f003 020f 	and.w	r2, r3, #15
 8008394:	6879      	ldr	r1, [r7, #4]
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	440b      	add	r3, r1
 80083a0:	3314      	adds	r3, #20
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d02f      	beq.n	8008408 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	f003 020f 	and.w	r2, r3, #15
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	440b      	add	r3, r1
 80083ba:	3314      	adds	r3, #20
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	f003 010f 	and.w	r1, r3, #15
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	460b      	mov	r3, r1
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	440b      	add	r3, r1
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4403      	add	r3, r0
 80083d0:	331c      	adds	r3, #28
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80083d8:	fb01 f303 	mul.w	r3, r1, r3
 80083dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d112      	bne.n	8008408 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	f003 020f 	and.w	r2, r3, #15
 80083e8:	6879      	ldr	r1, [r7, #4]
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	440b      	add	r3, r1
 80083f4:	3314      	adds	r3, #20
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083fa:	78f9      	ldrb	r1, [r7, #3]
 80083fc:	2300      	movs	r3, #0
 80083fe:	2200      	movs	r2, #0
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f002 f9fe 	bl	800a802 <USBD_LL_Transmit>
 8008406:	e01f      	b.n	8008448 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	33b0      	adds	r3, #176	@ 0xb0
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d010      	beq.n	8008448 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	33b0      	adds	r3, #176	@ 0xb0
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008444:	78fa      	ldrb	r2, [r7, #3]
 8008446:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	460b      	mov	r3, r1
 800845c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	32b0      	adds	r2, #176	@ 0xb0
 8008468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	32b0      	adds	r2, #176	@ 0xb0
 8008478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008480:	2303      	movs	r3, #3
 8008482:	e01a      	b.n	80084ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f002 f9fc 	bl	800a886 <USBD_LL_GetRxDataSize>
 800848e:	4602      	mov	r2, r0
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	33b0      	adds	r3, #176	@ 0xb0
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80084b4:	4611      	mov	r1, r2
 80084b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	32b0      	adds	r2, #176	@ 0xb0
 80084d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e024      	b.n	800852e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	33b0      	adds	r3, #176	@ 0xb0
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d019      	beq.n	800852c <USBD_CDC_EP0_RxReady+0x6a>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80084fe:	2bff      	cmp	r3, #255	@ 0xff
 8008500:	d014      	beq.n	800852c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	33b0      	adds	r3, #176	@ 0xb0
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800851a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008522:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	22ff      	movs	r2, #255	@ 0xff
 8008528:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008540:	2182      	movs	r1, #130	@ 0x82
 8008542:	4818      	ldr	r0, [pc, #96]	@ (80085a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008544:	f000 fd62 	bl	800900c <USBD_GetEpDesc>
 8008548:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800854a:	2101      	movs	r1, #1
 800854c:	4815      	ldr	r0, [pc, #84]	@ (80085a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800854e:	f000 fd5d 	bl	800900c <USBD_GetEpDesc>
 8008552:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008554:	2181      	movs	r1, #129	@ 0x81
 8008556:	4813      	ldr	r0, [pc, #76]	@ (80085a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008558:	f000 fd58 	bl	800900c <USBD_GetEpDesc>
 800855c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2210      	movs	r2, #16
 8008568:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d006      	beq.n	800857e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2200      	movs	r2, #0
 8008574:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008578:	711a      	strb	r2, [r3, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d006      	beq.n	8008592 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800858c:	711a      	strb	r2, [r3, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2243      	movs	r2, #67	@ 0x43
 8008596:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008598:	4b02      	ldr	r3, [pc, #8]	@ (80085a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000054 	.word	0x20000054

080085a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085b0:	2182      	movs	r1, #130	@ 0x82
 80085b2:	4818      	ldr	r0, [pc, #96]	@ (8008614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085b4:	f000 fd2a 	bl	800900c <USBD_GetEpDesc>
 80085b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085ba:	2101      	movs	r1, #1
 80085bc:	4815      	ldr	r0, [pc, #84]	@ (8008614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085be:	f000 fd25 	bl	800900c <USBD_GetEpDesc>
 80085c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085c4:	2181      	movs	r1, #129	@ 0x81
 80085c6:	4813      	ldr	r0, [pc, #76]	@ (8008614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085c8:	f000 fd20 	bl	800900c <USBD_GetEpDesc>
 80085cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2210      	movs	r2, #16
 80085d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d006      	beq.n	80085ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2200      	movs	r2, #0
 80085e4:	711a      	strb	r2, [r3, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f042 0202 	orr.w	r2, r2, #2
 80085ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d006      	beq.n	8008602 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	711a      	strb	r2, [r3, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f042 0202 	orr.w	r2, r2, #2
 8008600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2243      	movs	r2, #67	@ 0x43
 8008606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008608:	4b02      	ldr	r3, [pc, #8]	@ (8008614 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20000054 	.word	0x20000054

08008618 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008620:	2182      	movs	r1, #130	@ 0x82
 8008622:	4818      	ldr	r0, [pc, #96]	@ (8008684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008624:	f000 fcf2 	bl	800900c <USBD_GetEpDesc>
 8008628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800862a:	2101      	movs	r1, #1
 800862c:	4815      	ldr	r0, [pc, #84]	@ (8008684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800862e:	f000 fced 	bl	800900c <USBD_GetEpDesc>
 8008632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008634:	2181      	movs	r1, #129	@ 0x81
 8008636:	4813      	ldr	r0, [pc, #76]	@ (8008684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008638:	f000 fce8 	bl	800900c <USBD_GetEpDesc>
 800863c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2210      	movs	r2, #16
 8008648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d006      	beq.n	800865e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2200      	movs	r2, #0
 8008654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008658:	711a      	strb	r2, [r3, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d006      	beq.n	8008672 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800866c:	711a      	strb	r2, [r3, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2243      	movs	r2, #67	@ 0x43
 8008676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008678:	4b02      	ldr	r3, [pc, #8]	@ (8008684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000054 	.word	0x20000054

08008688 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	220a      	movs	r2, #10
 8008694:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008696:	4b03      	ldr	r3, [pc, #12]	@ (80086a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	20000010 	.word	0x20000010

080086a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e009      	b.n	80086d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	33b0      	adds	r3, #176	@ 0xb0
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	32b0      	adds	r2, #176	@ 0xb0
 80086f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80086fe:	2303      	movs	r3, #3
 8008700:	e008      	b.n	8008714 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	371c      	adds	r7, #28
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	32b0      	adds	r2, #176	@ 0xb0
 8008734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008738:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008740:	2303      	movs	r3, #3
 8008742:	e004      	b.n	800874e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
	...

0800875c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	32b0      	adds	r2, #176	@ 0xb0
 800876e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008772:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008774:	2301      	movs	r3, #1
 8008776:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800877e:	2303      	movs	r3, #3
 8008780:	e025      	b.n	80087ce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008788:	2b00      	cmp	r3, #0
 800878a:	d11f      	bne.n	80087cc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2201      	movs	r2, #1
 8008790:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008794:	4b10      	ldr	r3, [pc, #64]	@ (80087d8 <USBD_CDC_TransmitPacket+0x7c>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	f003 020f 	and.w	r2, r3, #15
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4403      	add	r3, r0
 80087ae:	3314      	adds	r3, #20
 80087b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80087b2:	4b09      	ldr	r3, [pc, #36]	@ (80087d8 <USBD_CDC_TransmitPacket+0x7c>)
 80087b4:	7819      	ldrb	r1, [r3, #0]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f002 f81d 	bl	800a802 <USBD_LL_Transmit>

    ret = USBD_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000097 	.word	0x20000097

080087dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	32b0      	adds	r2, #176	@ 0xb0
 80087ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	32b0      	adds	r2, #176	@ 0xb0
 80087fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008806:	2303      	movs	r3, #3
 8008808:	e018      	b.n	800883c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7c1b      	ldrb	r3, [r3, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008812:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <USBD_CDC_ReceivePacket+0x68>)
 8008814:	7819      	ldrb	r1, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800881c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f002 f80f 	bl	800a844 <USBD_LL_PrepareReceive>
 8008826:	e008      	b.n	800883a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008828:	4b06      	ldr	r3, [pc, #24]	@ (8008844 <USBD_CDC_ReceivePacket+0x68>)
 800882a:	7819      	ldrb	r1, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008832:	2340      	movs	r3, #64	@ 0x40
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f002 f805 	bl	800a844 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	20000098 	.word	0x20000098

08008848 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800885c:	2303      	movs	r3, #3
 800885e:	e01f      	b.n	80088a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	79fa      	ldrb	r2, [r7, #7]
 8008892:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f001 fe7f 	bl	800a598 <USBD_LL_Init>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800889e:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088bc:	2303      	movs	r3, #3
 80088be:	e025      	b.n	800890c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	32ae      	adds	r2, #174	@ 0xae
 80088d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00f      	beq.n	80088fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	32ae      	adds	r2, #174	@ 0xae
 80088e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ec:	f107 020e 	add.w	r2, r7, #14
 80088f0:	4610      	mov	r0, r2
 80088f2:	4798      	blx	r3
 80088f4:	4602      	mov	r2, r0
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 fe87 	bl	800a630 <USBD_LL_Start>
 8008922:	4603      	mov	r3, r0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008934:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008958:	2b00      	cmp	r3, #0
 800895a:	d009      	beq.n	8008970 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	78fa      	ldrb	r2, [r7, #3]
 8008966:	4611      	mov	r1, r2
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	4798      	blx	r3
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	78fa      	ldrb	r2, [r7, #3]
 8008994:	4611      	mov	r1, r2
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	4798      	blx	r3
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80089a0:	2303      	movs	r3, #3
 80089a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 f922 	bl	8009c0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80089d4:	461a      	mov	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80089e2:	f003 031f 	and.w	r3, r3, #31
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d01a      	beq.n	8008a20 <USBD_LL_SetupStage+0x72>
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d822      	bhi.n	8008a34 <USBD_LL_SetupStage+0x86>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <USBD_LL_SetupStage+0x4a>
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d00a      	beq.n	8008a0c <USBD_LL_SetupStage+0x5e>
 80089f6:	e01d      	b.n	8008a34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fb77 	bl	80090f4 <USBD_StdDevReq>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73fb      	strb	r3, [r7, #15]
      break;
 8008a0a:	e020      	b.n	8008a4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fbdf 	bl	80091d8 <USBD_StdItfReq>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a1e:	e016      	b.n	8008a4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fc41 	bl	80092b0 <USBD_StdEPReq>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	73fb      	strb	r3, [r7, #15]
      break;
 8008a32:	e00c      	b.n	8008a4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f001 fe54 	bl	800a6f0 <USBD_LL_StallEP>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a4c:	bf00      	nop
  }

  return ret;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	460b      	mov	r3, r1
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d177      	bne.n	8008b60 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008a76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	f040 80a1 	bne.w	8008bc6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	8992      	ldrh	r2, [r2, #12]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d91c      	bls.n	8008aca <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	8992      	ldrh	r2, [r2, #12]
 8008a98:	1a9a      	subs	r2, r3, r2
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	8992      	ldrh	r2, [r2, #12]
 8008aa6:	441a      	add	r2, r3
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	6919      	ldr	r1, [r3, #16]
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	899b      	ldrh	r3, [r3, #12]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	4293      	cmp	r3, r2
 8008abc:	bf38      	it	cc
 8008abe:	4613      	movcc	r3, r2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f001 f9a8 	bl	8009e18 <USBD_CtlContinueRx>
 8008ac8:	e07d      	b.n	8008bc6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ad0:	f003 031f 	and.w	r3, r3, #31
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d014      	beq.n	8008b02 <USBD_LL_DataOutStage+0xaa>
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d81d      	bhi.n	8008b18 <USBD_LL_DataOutStage+0xc0>
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <USBD_LL_DataOutStage+0x8e>
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d003      	beq.n	8008aec <USBD_LL_DataOutStage+0x94>
 8008ae4:	e018      	b.n	8008b18 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	75bb      	strb	r3, [r7, #22]
            break;
 8008aea:	e018      	b.n	8008b1e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	4619      	mov	r1, r3
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fa6e 	bl	8008fd8 <USBD_CoreFindIF>
 8008afc:	4603      	mov	r3, r0
 8008afe:	75bb      	strb	r3, [r7, #22]
            break;
 8008b00:	e00d      	b.n	8008b1e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 fa70 	bl	8008ff2 <USBD_CoreFindEP>
 8008b12:	4603      	mov	r3, r0
 8008b14:	75bb      	strb	r3, [r7, #22]
            break;
 8008b16:	e002      	b.n	8008b1e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	75bb      	strb	r3, [r7, #22]
            break;
 8008b1c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b1e:	7dbb      	ldrb	r3, [r7, #22]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d119      	bne.n	8008b58 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d113      	bne.n	8008b58 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b30:	7dba      	ldrb	r2, [r7, #22]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	32ae      	adds	r2, #174	@ 0xae
 8008b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008b40:	7dba      	ldrb	r2, [r7, #22]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b48:	7dba      	ldrb	r2, [r7, #22]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	32ae      	adds	r2, #174	@ 0xae
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f001 f96e 	bl	8009e3a <USBD_CtlSendStatus>
 8008b5e:	e032      	b.n	8008bc6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b60:	7afb      	ldrb	r3, [r7, #11]
 8008b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	4619      	mov	r1, r3
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 fa41 	bl	8008ff2 <USBD_CoreFindEP>
 8008b70:	4603      	mov	r3, r0
 8008b72:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b74:	7dbb      	ldrb	r3, [r7, #22]
 8008b76:	2bff      	cmp	r3, #255	@ 0xff
 8008b78:	d025      	beq.n	8008bc6 <USBD_LL_DataOutStage+0x16e>
 8008b7a:	7dbb      	ldrb	r3, [r7, #22]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d122      	bne.n	8008bc6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d117      	bne.n	8008bbc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b8c:	7dba      	ldrb	r2, [r7, #22]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	32ae      	adds	r2, #174	@ 0xae
 8008b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00f      	beq.n	8008bbc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008b9c:	7dba      	ldrb	r2, [r7, #22]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008ba4:	7dba      	ldrb	r2, [r7, #22]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	32ae      	adds	r2, #174	@ 0xae
 8008baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	7afa      	ldrb	r2, [r7, #11]
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	4798      	blx	r3
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	e000      	b.n	8008bc8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008bde:	7afb      	ldrb	r3, [r7, #11]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d178      	bne.n	8008cd6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3314      	adds	r3, #20
 8008be8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d163      	bne.n	8008cbc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	8992      	ldrh	r2, [r2, #12]
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d91c      	bls.n	8008c3a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	8992      	ldrh	r2, [r2, #12]
 8008c08:	1a9a      	subs	r2, r3, r2
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	8992      	ldrh	r2, [r2, #12]
 8008c16:	441a      	add	r2, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	6919      	ldr	r1, [r3, #16]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	461a      	mov	r2, r3
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f001 f8c4 	bl	8009db4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2100      	movs	r1, #0
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f001 fe06 	bl	800a844 <USBD_LL_PrepareReceive>
 8008c38:	e040      	b.n	8008cbc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	899b      	ldrh	r3, [r3, #12]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d11c      	bne.n	8008c82 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d316      	bcc.n	8008c82 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d20f      	bcs.n	8008c82 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f001 f8a4 	bl	8009db4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c74:	2300      	movs	r3, #0
 8008c76:	2200      	movs	r2, #0
 8008c78:	2100      	movs	r1, #0
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f001 fde2 	bl	800a844 <USBD_LL_PrepareReceive>
 8008c80:	e01c      	b.n	8008cbc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d10f      	bne.n	8008cae <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d009      	beq.n	8008cae <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cae:	2180      	movs	r1, #128	@ 0x80
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f001 fd1d 	bl	800a6f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f001 f8d2 	bl	8009e60 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d03a      	beq.n	8008d3c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f7ff fe30 	bl	800892c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008cd4:	e032      	b.n	8008d3c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
 8008cd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 f986 	bl	8008ff2 <USBD_CoreFindEP>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	2bff      	cmp	r3, #255	@ 0xff
 8008cee:	d025      	beq.n	8008d3c <USBD_LL_DataInStage+0x16c>
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d122      	bne.n	8008d3c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d11c      	bne.n	8008d3c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d02:	7dfa      	ldrb	r2, [r7, #23]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	32ae      	adds	r2, #174	@ 0xae
 8008d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d014      	beq.n	8008d3c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008d12:	7dfa      	ldrb	r2, [r7, #23]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d1a:	7dfa      	ldrb	r2, [r7, #23]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	32ae      	adds	r2, #174	@ 0xae
 8008d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	7afa      	ldrb	r2, [r7, #11]
 8008d28:	4611      	mov	r1, r2
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	4798      	blx	r3
 8008d2e:	4603      	mov	r3, r0
 8008d30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d32:	7dbb      	ldrb	r3, [r7, #22]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008d38:	7dbb      	ldrb	r3, [r7, #22]
 8008d3a:	e000      	b.n	8008d3e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d014      	beq.n	8008dac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00e      	beq.n	8008dac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	6852      	ldr	r2, [r2, #4]
 8008d9a:	b2d2      	uxtb	r2, r2
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008da8:	2303      	movs	r3, #3
 8008daa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dac:	2340      	movs	r3, #64	@ 0x40
 8008dae:	2200      	movs	r2, #0
 8008db0:	2100      	movs	r1, #0
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fc57 	bl	800a666 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2240      	movs	r2, #64	@ 0x40
 8008dc4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dc8:	2340      	movs	r3, #64	@ 0x40
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2180      	movs	r1, #128	@ 0x80
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fc49 	bl	800a666 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2240      	movs	r2, #64	@ 0x40
 8008de0:	841a      	strh	r2, [r3, #32]

  return ret;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	78fa      	ldrb	r2, [r7, #3]
 8008dfc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	d006      	beq.n	8008e2e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2204      	movs	r2, #4
 8008e32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b04      	cmp	r3, #4
 8008e56:	d106      	bne.n	8008e66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d110      	bne.n	8008eaa <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d005      	beq.n	8008eaa <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	32ae      	adds	r2, #174	@ 0xae
 8008eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e01c      	b.n	8008f10 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d115      	bne.n	8008f0e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	32ae      	adds	r2, #174	@ 0xae
 8008eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00b      	beq.n	8008f0e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	32ae      	adds	r2, #174	@ 0xae
 8008f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	78fa      	ldrb	r2, [r7, #3]
 8008f08:	4611      	mov	r1, r2
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	32ae      	adds	r2, #174	@ 0xae
 8008f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e01c      	b.n	8008f74 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d115      	bne.n	8008f72 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	32ae      	adds	r2, #174	@ 0xae
 8008f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00b      	beq.n	8008f72 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	32ae      	adds	r2, #174	@ 0xae
 8008f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00e      	beq.n	8008fce <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	6852      	ldr	r2, [r2, #4]
 8008fbc:	b2d2      	uxtb	r2, r2
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	4798      	blx	r3
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fe4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ffe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009020:	2300      	movs	r3, #0
 8009022:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	885b      	ldrh	r3, [r3, #2]
 8009028:	b29b      	uxth	r3, r3
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	7812      	ldrb	r2, [r2, #0]
 800902e:	4293      	cmp	r3, r2
 8009030:	d91f      	bls.n	8009072 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009038:	e013      	b.n	8009062 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800903a:	f107 030a 	add.w	r3, r7, #10
 800903e:	4619      	mov	r1, r3
 8009040:	6978      	ldr	r0, [r7, #20]
 8009042:	f000 f81b 	bl	800907c <USBD_GetNextDesc>
 8009046:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	2b05      	cmp	r3, #5
 800904e:	d108      	bne.n	8009062 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	789b      	ldrb	r3, [r3, #2]
 8009058:	78fa      	ldrb	r2, [r7, #3]
 800905a:	429a      	cmp	r2, r3
 800905c:	d008      	beq.n	8009070 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800905e:	2300      	movs	r3, #0
 8009060:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	885b      	ldrh	r3, [r3, #2]
 8009066:	b29a      	uxth	r2, r3
 8009068:	897b      	ldrh	r3, [r7, #10]
 800906a:	429a      	cmp	r2, r3
 800906c:	d8e5      	bhi.n	800903a <USBD_GetEpDesc+0x2e>
 800906e:	e000      	b.n	8009072 <USBD_GetEpDesc+0x66>
          break;
 8009070:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009072:	693b      	ldr	r3, [r7, #16]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	7812      	ldrb	r2, [r2, #0]
 8009092:	4413      	add	r3, r2
 8009094:	b29a      	uxth	r2, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4413      	add	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090a6:	68fb      	ldr	r3, [r7, #12]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	3301      	adds	r3, #1
 80090ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80090d6:	021b      	lsls	r3, r3, #8
 80090d8:	b21a      	sxth	r2, r3
 80090da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090de:	4313      	orrs	r3, r2
 80090e0:	b21b      	sxth	r3, r3
 80090e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090e4:	89fb      	ldrh	r3, [r7, #14]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800910a:	2b40      	cmp	r3, #64	@ 0x40
 800910c:	d005      	beq.n	800911a <USBD_StdDevReq+0x26>
 800910e:	2b40      	cmp	r3, #64	@ 0x40
 8009110:	d857      	bhi.n	80091c2 <USBD_StdDevReq+0xce>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00f      	beq.n	8009136 <USBD_StdDevReq+0x42>
 8009116:	2b20      	cmp	r3, #32
 8009118:	d153      	bne.n	80091c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	32ae      	adds	r2, #174	@ 0xae
 8009124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	4798      	blx	r3
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]
      break;
 8009134:	e04a      	b.n	80091cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	785b      	ldrb	r3, [r3, #1]
 800913a:	2b09      	cmp	r3, #9
 800913c:	d83b      	bhi.n	80091b6 <USBD_StdDevReq+0xc2>
 800913e:	a201      	add	r2, pc, #4	@ (adr r2, 8009144 <USBD_StdDevReq+0x50>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	08009199 	.word	0x08009199
 8009148:	080091ad 	.word	0x080091ad
 800914c:	080091b7 	.word	0x080091b7
 8009150:	080091a3 	.word	0x080091a3
 8009154:	080091b7 	.word	0x080091b7
 8009158:	08009177 	.word	0x08009177
 800915c:	0800916d 	.word	0x0800916d
 8009160:	080091b7 	.word	0x080091b7
 8009164:	0800918f 	.word	0x0800918f
 8009168:	08009181 	.word	0x08009181
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fa3e 	bl	80095f0 <USBD_GetDescriptor>
          break;
 8009174:	e024      	b.n	80091c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fba3 	bl	80098c4 <USBD_SetAddress>
          break;
 800917e:	e01f      	b.n	80091c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fbe2 	bl	800994c <USBD_SetConfig>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]
          break;
 800918c:	e018      	b.n	80091c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fc85 	bl	8009aa0 <USBD_GetConfig>
          break;
 8009196:	e013      	b.n	80091c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fcb6 	bl	8009b0c <USBD_GetStatus>
          break;
 80091a0:	e00e      	b.n	80091c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fce5 	bl	8009b74 <USBD_SetFeature>
          break;
 80091aa:	e009      	b.n	80091c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fd09 	bl	8009bc6 <USBD_ClrFeature>
          break;
 80091b4:	e004      	b.n	80091c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fd60 	bl	8009c7e <USBD_CtlError>
          break;
 80091be:	bf00      	nop
      }
      break;
 80091c0:	e004      	b.n	80091cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fd5a 	bl	8009c7e <USBD_CtlError>
      break;
 80091ca:	bf00      	nop
  }

  return ret;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop

080091d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091ee:	2b40      	cmp	r3, #64	@ 0x40
 80091f0:	d005      	beq.n	80091fe <USBD_StdItfReq+0x26>
 80091f2:	2b40      	cmp	r3, #64	@ 0x40
 80091f4:	d852      	bhi.n	800929c <USBD_StdItfReq+0xc4>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <USBD_StdItfReq+0x26>
 80091fa:	2b20      	cmp	r3, #32
 80091fc:	d14e      	bne.n	800929c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009204:	b2db      	uxtb	r3, r3
 8009206:	3b01      	subs	r3, #1
 8009208:	2b02      	cmp	r3, #2
 800920a:	d840      	bhi.n	800928e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	889b      	ldrh	r3, [r3, #4]
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b01      	cmp	r3, #1
 8009214:	d836      	bhi.n	8009284 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	889b      	ldrh	r3, [r3, #4]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff feda 	bl	8008fd8 <USBD_CoreFindIF>
 8009224:	4603      	mov	r3, r0
 8009226:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2bff      	cmp	r3, #255	@ 0xff
 800922c:	d01d      	beq.n	800926a <USBD_StdItfReq+0x92>
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d11a      	bne.n	800926a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009234:	7bba      	ldrb	r2, [r7, #14]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	32ae      	adds	r2, #174	@ 0xae
 800923a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00f      	beq.n	8009264 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009244:	7bba      	ldrb	r2, [r7, #14]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800924c:	7bba      	ldrb	r2, [r7, #14]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	32ae      	adds	r2, #174	@ 0xae
 8009252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4798      	blx	r3
 800925e:	4603      	mov	r3, r0
 8009260:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009262:	e004      	b.n	800926e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009264:	2303      	movs	r3, #3
 8009266:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009268:	e001      	b.n	800926e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800926a:	2303      	movs	r3, #3
 800926c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	88db      	ldrh	r3, [r3, #6]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d110      	bne.n	8009298 <USBD_StdItfReq+0xc0>
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10d      	bne.n	8009298 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fddc 	bl	8009e3a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009282:	e009      	b.n	8009298 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fcf9 	bl	8009c7e <USBD_CtlError>
          break;
 800928c:	e004      	b.n	8009298 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fcf4 	bl	8009c7e <USBD_CtlError>
          break;
 8009296:	e000      	b.n	800929a <USBD_StdItfReq+0xc2>
          break;
 8009298:	bf00      	nop
      }
      break;
 800929a:	e004      	b.n	80092a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fced 	bl	8009c7e <USBD_CtlError>
      break;
 80092a4:	bf00      	nop
  }

  return ret;
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	889b      	ldrh	r3, [r3, #4]
 80092c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092cc:	2b40      	cmp	r3, #64	@ 0x40
 80092ce:	d007      	beq.n	80092e0 <USBD_StdEPReq+0x30>
 80092d0:	2b40      	cmp	r3, #64	@ 0x40
 80092d2:	f200 8181 	bhi.w	80095d8 <USBD_StdEPReq+0x328>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d02a      	beq.n	8009330 <USBD_StdEPReq+0x80>
 80092da:	2b20      	cmp	r3, #32
 80092dc:	f040 817c 	bne.w	80095d8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff fe84 	bl	8008ff2 <USBD_CoreFindEP>
 80092ea:	4603      	mov	r3, r0
 80092ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092ee:	7b7b      	ldrb	r3, [r7, #13]
 80092f0:	2bff      	cmp	r3, #255	@ 0xff
 80092f2:	f000 8176 	beq.w	80095e2 <USBD_StdEPReq+0x332>
 80092f6:	7b7b      	ldrb	r3, [r7, #13]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f040 8172 	bne.w	80095e2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80092fe:	7b7a      	ldrb	r2, [r7, #13]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009306:	7b7a      	ldrb	r2, [r7, #13]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	32ae      	adds	r2, #174	@ 0xae
 800930c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 8165 	beq.w	80095e2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009318:	7b7a      	ldrb	r2, [r7, #13]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	32ae      	adds	r2, #174	@ 0xae
 800931e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	4798      	blx	r3
 800932a:	4603      	mov	r3, r0
 800932c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800932e:	e158      	b.n	80095e2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	2b03      	cmp	r3, #3
 8009336:	d008      	beq.n	800934a <USBD_StdEPReq+0x9a>
 8009338:	2b03      	cmp	r3, #3
 800933a:	f300 8147 	bgt.w	80095cc <USBD_StdEPReq+0x31c>
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 809b 	beq.w	800947a <USBD_StdEPReq+0x1ca>
 8009344:	2b01      	cmp	r3, #1
 8009346:	d03c      	beq.n	80093c2 <USBD_StdEPReq+0x112>
 8009348:	e140      	b.n	80095cc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d002      	beq.n	800935c <USBD_StdEPReq+0xac>
 8009356:	2b03      	cmp	r3, #3
 8009358:	d016      	beq.n	8009388 <USBD_StdEPReq+0xd8>
 800935a:	e02c      	b.n	80093b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800935c:	7bbb      	ldrb	r3, [r7, #14]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00d      	beq.n	800937e <USBD_StdEPReq+0xce>
 8009362:	7bbb      	ldrb	r3, [r7, #14]
 8009364:	2b80      	cmp	r3, #128	@ 0x80
 8009366:	d00a      	beq.n	800937e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009368:	7bbb      	ldrb	r3, [r7, #14]
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 f9bf 	bl	800a6f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009372:	2180      	movs	r1, #128	@ 0x80
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f001 f9bb 	bl	800a6f0 <USBD_LL_StallEP>
 800937a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800937c:	e020      	b.n	80093c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fc7c 	bl	8009c7e <USBD_CtlError>
              break;
 8009386:	e01b      	b.n	80093c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	885b      	ldrh	r3, [r3, #2]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10e      	bne.n	80093ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00b      	beq.n	80093ae <USBD_StdEPReq+0xfe>
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	2b80      	cmp	r3, #128	@ 0x80
 800939a:	d008      	beq.n	80093ae <USBD_StdEPReq+0xfe>
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	88db      	ldrh	r3, [r3, #6]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d104      	bne.n	80093ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 f9a1 	bl	800a6f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fd43 	bl	8009e3a <USBD_CtlSendStatus>

              break;
 80093b4:	e004      	b.n	80093c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc60 	bl	8009c7e <USBD_CtlError>
              break;
 80093be:	bf00      	nop
          }
          break;
 80093c0:	e109      	b.n	80095d6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d002      	beq.n	80093d4 <USBD_StdEPReq+0x124>
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d016      	beq.n	8009400 <USBD_StdEPReq+0x150>
 80093d2:	e04b      	b.n	800946c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00d      	beq.n	80093f6 <USBD_StdEPReq+0x146>
 80093da:	7bbb      	ldrb	r3, [r7, #14]
 80093dc:	2b80      	cmp	r3, #128	@ 0x80
 80093de:	d00a      	beq.n	80093f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 f983 	bl	800a6f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093ea:	2180      	movs	r1, #128	@ 0x80
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 f97f 	bl	800a6f0 <USBD_LL_StallEP>
 80093f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093f4:	e040      	b.n	8009478 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fc40 	bl	8009c7e <USBD_CtlError>
              break;
 80093fe:	e03b      	b.n	8009478 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	885b      	ldrh	r3, [r3, #2]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d136      	bne.n	8009476 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800940e:	2b00      	cmp	r3, #0
 8009410:	d004      	beq.n	800941c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f001 f989 	bl	800a72e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fd0c 	bl	8009e3a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009422:	7bbb      	ldrb	r3, [r7, #14]
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7ff fde3 	bl	8008ff2 <USBD_CoreFindEP>
 800942c:	4603      	mov	r3, r0
 800942e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009430:	7b7b      	ldrb	r3, [r7, #13]
 8009432:	2bff      	cmp	r3, #255	@ 0xff
 8009434:	d01f      	beq.n	8009476 <USBD_StdEPReq+0x1c6>
 8009436:	7b7b      	ldrb	r3, [r7, #13]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d11c      	bne.n	8009476 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800943c:	7b7a      	ldrb	r2, [r7, #13]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009444:	7b7a      	ldrb	r2, [r7, #13]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	32ae      	adds	r2, #174	@ 0xae
 800944a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d010      	beq.n	8009476 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009454:	7b7a      	ldrb	r2, [r7, #13]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	32ae      	adds	r2, #174	@ 0xae
 800945a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	4798      	blx	r3
 8009466:	4603      	mov	r3, r0
 8009468:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800946a:	e004      	b.n	8009476 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fc05 	bl	8009c7e <USBD_CtlError>
              break;
 8009474:	e000      	b.n	8009478 <USBD_StdEPReq+0x1c8>
              break;
 8009476:	bf00      	nop
          }
          break;
 8009478:	e0ad      	b.n	80095d6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d002      	beq.n	800948c <USBD_StdEPReq+0x1dc>
 8009486:	2b03      	cmp	r3, #3
 8009488:	d033      	beq.n	80094f2 <USBD_StdEPReq+0x242>
 800948a:	e099      	b.n	80095c0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800948c:	7bbb      	ldrb	r3, [r7, #14]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d007      	beq.n	80094a2 <USBD_StdEPReq+0x1f2>
 8009492:	7bbb      	ldrb	r3, [r7, #14]
 8009494:	2b80      	cmp	r3, #128	@ 0x80
 8009496:	d004      	beq.n	80094a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fbef 	bl	8009c7e <USBD_CtlError>
                break;
 80094a0:	e093      	b.n	80095ca <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	da0b      	bge.n	80094c2 <USBD_StdEPReq+0x212>
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	3310      	adds	r3, #16
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	4413      	add	r3, r2
 80094be:	3304      	adds	r3, #4
 80094c0:	e00b      	b.n	80094da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	4413      	add	r3, r2
 80094d8:	3304      	adds	r3, #4
 80094da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2200      	movs	r2, #0
 80094e0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	330e      	adds	r3, #14
 80094e6:	2202      	movs	r2, #2
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fc44 	bl	8009d78 <USBD_CtlSendData>
              break;
 80094f0:	e06b      	b.n	80095ca <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	da11      	bge.n	800951e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	f003 020f 	and.w	r2, r3, #15
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	440b      	add	r3, r1
 800950c:	3323      	adds	r3, #35	@ 0x23
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d117      	bne.n	8009544 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fbb1 	bl	8009c7e <USBD_CtlError>
                  break;
 800951c:	e055      	b.n	80095ca <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	f003 020f 	and.w	r2, r3, #15
 8009524:	6879      	ldr	r1, [r7, #4]
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	440b      	add	r3, r1
 8009530:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d104      	bne.n	8009544 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fb9e 	bl	8009c7e <USBD_CtlError>
                  break;
 8009542:	e042      	b.n	80095ca <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009548:	2b00      	cmp	r3, #0
 800954a:	da0b      	bge.n	8009564 <USBD_StdEPReq+0x2b4>
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009552:	4613      	mov	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	3310      	adds	r3, #16
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	4413      	add	r3, r2
 8009560:	3304      	adds	r3, #4
 8009562:	e00b      	b.n	800957c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	4413      	add	r3, r2
 800957a:	3304      	adds	r3, #4
 800957c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <USBD_StdEPReq+0x2da>
 8009584:	7bbb      	ldrb	r3, [r7, #14]
 8009586:	2b80      	cmp	r3, #128	@ 0x80
 8009588:	d103      	bne.n	8009592 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2200      	movs	r2, #0
 800958e:	739a      	strb	r2, [r3, #14]
 8009590:	e00e      	b.n	80095b0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 f8e8 	bl	800a76c <USBD_LL_IsStallEP>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d003      	beq.n	80095aa <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2201      	movs	r2, #1
 80095a6:	739a      	strb	r2, [r3, #14]
 80095a8:	e002      	b.n	80095b0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2200      	movs	r2, #0
 80095ae:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	330e      	adds	r3, #14
 80095b4:	2202      	movs	r2, #2
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fbdd 	bl	8009d78 <USBD_CtlSendData>
              break;
 80095be:	e004      	b.n	80095ca <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fb5b 	bl	8009c7e <USBD_CtlError>
              break;
 80095c8:	bf00      	nop
          }
          break;
 80095ca:	e004      	b.n	80095d6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fb55 	bl	8009c7e <USBD_CtlError>
          break;
 80095d4:	bf00      	nop
      }
      break;
 80095d6:	e005      	b.n	80095e4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fb4f 	bl	8009c7e <USBD_CtlError>
      break;
 80095e0:	e000      	b.n	80095e4 <USBD_StdEPReq+0x334>
      break;
 80095e2:	bf00      	nop
  }

  return ret;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009602:	2300      	movs	r3, #0
 8009604:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	885b      	ldrh	r3, [r3, #2]
 800960a:	0a1b      	lsrs	r3, r3, #8
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	2b06      	cmp	r3, #6
 8009612:	f200 8128 	bhi.w	8009866 <USBD_GetDescriptor+0x276>
 8009616:	a201      	add	r2, pc, #4	@ (adr r2, 800961c <USBD_GetDescriptor+0x2c>)
 8009618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961c:	08009639 	.word	0x08009639
 8009620:	08009651 	.word	0x08009651
 8009624:	08009691 	.word	0x08009691
 8009628:	08009867 	.word	0x08009867
 800962c:	08009867 	.word	0x08009867
 8009630:	08009807 	.word	0x08009807
 8009634:	08009833 	.word	0x08009833
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	7c12      	ldrb	r2, [r2, #16]
 8009644:	f107 0108 	add.w	r1, r7, #8
 8009648:	4610      	mov	r0, r2
 800964a:	4798      	blx	r3
 800964c:	60f8      	str	r0, [r7, #12]
      break;
 800964e:	e112      	b.n	8009876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	7c1b      	ldrb	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10d      	bne.n	8009674 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800965e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009660:	f107 0208 	add.w	r2, r7, #8
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
 8009668:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3301      	adds	r3, #1
 800966e:	2202      	movs	r2, #2
 8009670:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009672:	e100      	b.n	8009876 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967c:	f107 0208 	add.w	r2, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3301      	adds	r3, #1
 800968a:	2202      	movs	r2, #2
 800968c:	701a      	strb	r2, [r3, #0]
      break;
 800968e:	e0f2      	b.n	8009876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	885b      	ldrh	r3, [r3, #2]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b05      	cmp	r3, #5
 8009698:	f200 80ac 	bhi.w	80097f4 <USBD_GetDescriptor+0x204>
 800969c:	a201      	add	r2, pc, #4	@ (adr r2, 80096a4 <USBD_GetDescriptor+0xb4>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096bd 	.word	0x080096bd
 80096a8:	080096f1 	.word	0x080096f1
 80096ac:	08009725 	.word	0x08009725
 80096b0:	08009759 	.word	0x08009759
 80096b4:	0800978d 	.word	0x0800978d
 80096b8:	080097c1 	.word	0x080097c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7c12      	ldrb	r2, [r2, #16]
 80096d4:	f107 0108 	add.w	r1, r7, #8
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096de:	e091      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 facb 	bl	8009c7e <USBD_CtlError>
            err++;
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	3301      	adds	r3, #1
 80096ec:	72fb      	strb	r3, [r7, #11]
          break;
 80096ee:	e089      	b.n	8009804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	7c12      	ldrb	r2, [r2, #16]
 8009708:	f107 0108 	add.w	r1, r7, #8
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
 8009710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009712:	e077      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fab1 	bl	8009c7e <USBD_CtlError>
            err++;
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	3301      	adds	r3, #1
 8009720:	72fb      	strb	r3, [r7, #11]
          break;
 8009722:	e06f      	b.n	8009804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7c12      	ldrb	r2, [r2, #16]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009746:	e05d      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa97 	bl	8009c7e <USBD_CtlError>
            err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
          break;
 8009756:	e055      	b.n	8009804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	7c12      	ldrb	r2, [r2, #16]
 8009770:	f107 0108 	add.w	r1, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800977a:	e043      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa7d 	bl	8009c7e <USBD_CtlError>
            err++;
 8009784:	7afb      	ldrb	r3, [r7, #11]
 8009786:	3301      	adds	r3, #1
 8009788:	72fb      	strb	r3, [r7, #11]
          break;
 800978a:	e03b      	b.n	8009804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7c12      	ldrb	r2, [r2, #16]
 80097a4:	f107 0108 	add.w	r1, r7, #8
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ae:	e029      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa63 	bl	8009c7e <USBD_CtlError>
            err++;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	3301      	adds	r3, #1
 80097bc:	72fb      	strb	r3, [r7, #11]
          break;
 80097be:	e021      	b.n	8009804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	7c12      	ldrb	r2, [r2, #16]
 80097d8:	f107 0108 	add.w	r1, r7, #8
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097e2:	e00f      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa49 	bl	8009c7e <USBD_CtlError>
            err++;
 80097ec:	7afb      	ldrb	r3, [r7, #11]
 80097ee:	3301      	adds	r3, #1
 80097f0:	72fb      	strb	r3, [r7, #11]
          break;
 80097f2:	e007      	b.n	8009804 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fa41 	bl	8009c7e <USBD_CtlError>
          err++;
 80097fc:	7afb      	ldrb	r3, [r7, #11]
 80097fe:	3301      	adds	r3, #1
 8009800:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009802:	bf00      	nop
      }
      break;
 8009804:	e037      	b.n	8009876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	7c1b      	ldrb	r3, [r3, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d109      	bne.n	8009822 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009816:	f107 0208 	add.w	r2, r7, #8
 800981a:	4610      	mov	r0, r2
 800981c:	4798      	blx	r3
 800981e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009820:	e029      	b.n	8009876 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fa2a 	bl	8009c7e <USBD_CtlError>
        err++;
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	3301      	adds	r3, #1
 800982e:	72fb      	strb	r3, [r7, #11]
      break;
 8009830:	e021      	b.n	8009876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	7c1b      	ldrb	r3, [r3, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10d      	bne.n	8009856 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009842:	f107 0208 	add.w	r2, r7, #8
 8009846:	4610      	mov	r0, r2
 8009848:	4798      	blx	r3
 800984a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	2207      	movs	r2, #7
 8009852:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009854:	e00f      	b.n	8009876 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fa10 	bl	8009c7e <USBD_CtlError>
        err++;
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	3301      	adds	r3, #1
 8009862:	72fb      	strb	r3, [r7, #11]
      break;
 8009864:	e007      	b.n	8009876 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fa08 	bl	8009c7e <USBD_CtlError>
      err++;
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	3301      	adds	r3, #1
 8009872:	72fb      	strb	r3, [r7, #11]
      break;
 8009874:	bf00      	nop
  }

  if (err != 0U)
 8009876:	7afb      	ldrb	r3, [r7, #11]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d11e      	bne.n	80098ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	88db      	ldrh	r3, [r3, #6]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d016      	beq.n	80098b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009884:	893b      	ldrh	r3, [r7, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00e      	beq.n	80098a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	88da      	ldrh	r2, [r3, #6]
 800988e:	893b      	ldrh	r3, [r7, #8]
 8009890:	4293      	cmp	r3, r2
 8009892:	bf28      	it	cs
 8009894:	4613      	movcs	r3, r2
 8009896:	b29b      	uxth	r3, r3
 8009898:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800989a:	893b      	ldrh	r3, [r7, #8]
 800989c:	461a      	mov	r2, r3
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fa69 	bl	8009d78 <USBD_CtlSendData>
 80098a6:	e009      	b.n	80098bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f9e7 	bl	8009c7e <USBD_CtlError>
 80098b0:	e004      	b.n	80098bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fac1 	bl	8009e3a <USBD_CtlSendStatus>
 80098b8:	e000      	b.n	80098bc <USBD_GetDescriptor+0x2cc>
    return;
 80098ba:	bf00      	nop
  }
}
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop

080098c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	889b      	ldrh	r3, [r3, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d131      	bne.n	800993a <USBD_SetAddress+0x76>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	88db      	ldrh	r3, [r3, #6]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d12d      	bne.n	800993a <USBD_SetAddress+0x76>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	885b      	ldrh	r3, [r3, #2]
 80098e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80098e4:	d829      	bhi.n	800993a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	885b      	ldrh	r3, [r3, #2]
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d104      	bne.n	8009908 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f9bc 	bl	8009c7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009906:	e01d      	b.n	8009944 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	7bfa      	ldrb	r2, [r7, #15]
 800990c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 ff55 	bl	800a7c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fa8d 	bl	8009e3a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009920:	7bfb      	ldrb	r3, [r7, #15]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d004      	beq.n	8009930 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2202      	movs	r2, #2
 800992a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992e:	e009      	b.n	8009944 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009938:	e004      	b.n	8009944 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f99e 	bl	8009c7e <USBD_CtlError>
  }
}
 8009942:	bf00      	nop
 8009944:	bf00      	nop
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	885b      	ldrh	r3, [r3, #2]
 800995e:	b2da      	uxtb	r2, r3
 8009960:	4b4e      	ldr	r3, [pc, #312]	@ (8009a9c <USBD_SetConfig+0x150>)
 8009962:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009964:	4b4d      	ldr	r3, [pc, #308]	@ (8009a9c <USBD_SetConfig+0x150>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d905      	bls.n	8009978 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f985 	bl	8009c7e <USBD_CtlError>
    return USBD_FAIL;
 8009974:	2303      	movs	r3, #3
 8009976:	e08c      	b.n	8009a92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b02      	cmp	r3, #2
 8009982:	d002      	beq.n	800998a <USBD_SetConfig+0x3e>
 8009984:	2b03      	cmp	r3, #3
 8009986:	d029      	beq.n	80099dc <USBD_SetConfig+0x90>
 8009988:	e075      	b.n	8009a76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800998a:	4b44      	ldr	r3, [pc, #272]	@ (8009a9c <USBD_SetConfig+0x150>)
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d020      	beq.n	80099d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009992:	4b42      	ldr	r3, [pc, #264]	@ (8009a9c <USBD_SetConfig+0x150>)
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800999c:	4b3f      	ldr	r3, [pc, #252]	@ (8009a9c <USBD_SetConfig+0x150>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7fe ffcd 	bl	8008942 <USBD_SetClassConfig>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d008      	beq.n	80099c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f962 	bl	8009c7e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2202      	movs	r2, #2
 80099be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099c2:	e065      	b.n	8009a90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fa38 	bl	8009e3a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2203      	movs	r2, #3
 80099ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80099d2:	e05d      	b.n	8009a90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fa30 	bl	8009e3a <USBD_CtlSendStatus>
      break;
 80099da:	e059      	b.n	8009a90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099dc:	4b2f      	ldr	r3, [pc, #188]	@ (8009a9c <USBD_SetConfig+0x150>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d112      	bne.n	8009a0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80099ec:	4b2b      	ldr	r3, [pc, #172]	@ (8009a9c <USBD_SetConfig+0x150>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	461a      	mov	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099f6:	4b29      	ldr	r3, [pc, #164]	@ (8009a9c <USBD_SetConfig+0x150>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7fe ffbc 	bl	800897a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fa19 	bl	8009e3a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a08:	e042      	b.n	8009a90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a0a:	4b24      	ldr	r3, [pc, #144]	@ (8009a9c <USBD_SetConfig+0x150>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d02a      	beq.n	8009a6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	4619      	mov	r1, r3
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7fe ffaa 	bl	800897a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a26:	4b1d      	ldr	r3, [pc, #116]	@ (8009a9c <USBD_SetConfig+0x150>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a30:	4b1a      	ldr	r3, [pc, #104]	@ (8009a9c <USBD_SetConfig+0x150>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7fe ff83 	bl	8008942 <USBD_SetClassConfig>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00f      	beq.n	8009a66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f918 	bl	8009c7e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7fe ff8f 	bl	800897a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a64:	e014      	b.n	8009a90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f9e7 	bl	8009e3a <USBD_CtlSendStatus>
      break;
 8009a6c:	e010      	b.n	8009a90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f9e3 	bl	8009e3a <USBD_CtlSendStatus>
      break;
 8009a74:	e00c      	b.n	8009a90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f900 	bl	8009c7e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a7e:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <USBD_SetConfig+0x150>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7fe ff78 	bl	800897a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a8e:	bf00      	nop
  }

  return ret;
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	200094e0 	.word	0x200094e0

08009aa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	88db      	ldrh	r3, [r3, #6]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d004      	beq.n	8009abc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f8e2 	bl	8009c7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009aba:	e023      	b.n	8009b04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	dc02      	bgt.n	8009ace <USBD_GetConfig+0x2e>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	dc03      	bgt.n	8009ad4 <USBD_GetConfig+0x34>
 8009acc:	e015      	b.n	8009afa <USBD_GetConfig+0x5a>
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d00b      	beq.n	8009aea <USBD_GetConfig+0x4a>
 8009ad2:	e012      	b.n	8009afa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	3308      	adds	r3, #8
 8009ade:	2201      	movs	r2, #1
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f948 	bl	8009d78 <USBD_CtlSendData>
        break;
 8009ae8:	e00c      	b.n	8009b04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3304      	adds	r3, #4
 8009aee:	2201      	movs	r2, #1
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f940 	bl	8009d78 <USBD_CtlSendData>
        break;
 8009af8:	e004      	b.n	8009b04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f8be 	bl	8009c7e <USBD_CtlError>
        break;
 8009b02:	bf00      	nop
}
 8009b04:	bf00      	nop
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d81e      	bhi.n	8009b62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	88db      	ldrh	r3, [r3, #6]
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d004      	beq.n	8009b36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f8a5 	bl	8009c7e <USBD_CtlError>
        break;
 8009b34:	e01a      	b.n	8009b6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d005      	beq.n	8009b52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f043 0202 	orr.w	r2, r3, #2
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	330c      	adds	r3, #12
 8009b56:	2202      	movs	r2, #2
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f90c 	bl	8009d78 <USBD_CtlSendData>
      break;
 8009b60:	e004      	b.n	8009b6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f88a 	bl	8009c7e <USBD_CtlError>
      break;
 8009b6a:	bf00      	nop
  }
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	885b      	ldrh	r3, [r3, #2]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d107      	bne.n	8009b96 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f953 	bl	8009e3a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b94:	e013      	b.n	8009bbe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	885b      	ldrh	r3, [r3, #2]
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d10b      	bne.n	8009bb6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	889b      	ldrh	r3, [r3, #4]
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f943 	bl	8009e3a <USBD_CtlSendStatus>
}
 8009bb4:	e003      	b.n	8009bbe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f860 	bl	8009c7e <USBD_CtlError>
}
 8009bbe:	bf00      	nop
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b082      	sub	sp, #8
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d80b      	bhi.n	8009bf6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	885b      	ldrh	r3, [r3, #2]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d10c      	bne.n	8009c00 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f923 	bl	8009e3a <USBD_CtlSendStatus>
      }
      break;
 8009bf4:	e004      	b.n	8009c00 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f840 	bl	8009c7e <USBD_CtlError>
      break;
 8009bfe:	e000      	b.n	8009c02 <USBD_ClrFeature+0x3c>
      break;
 8009c00:	bf00      	nop
  }
}
 8009c02:	bf00      	nop
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	781a      	ldrb	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	3301      	adds	r3, #1
 8009c24:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	781a      	ldrb	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f7ff fa3d 	bl	80090b4 <SWAPBYTE>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3301      	adds	r3, #1
 8009c46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff fa30 	bl	80090b4 <SWAPBYTE>
 8009c54:	4603      	mov	r3, r0
 8009c56:	461a      	mov	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
 8009c66:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff fa23 	bl	80090b4 <SWAPBYTE>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	461a      	mov	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	80da      	strh	r2, [r3, #6]
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c88:	2180      	movs	r1, #128	@ 0x80
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fd30 	bl	800a6f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c90:	2100      	movs	r1, #0
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fd2c 	bl	800a6f0 <USBD_LL_StallEP>
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d042      	beq.n	8009d3c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009cba:	6938      	ldr	r0, [r7, #16]
 8009cbc:	f000 f842 	bl	8009d44 <USBD_GetLen>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cca:	d808      	bhi.n	8009cde <USBD_GetString+0x3e>
 8009ccc:	6938      	ldr	r0, [r7, #16]
 8009cce:	f000 f839 	bl	8009d44 <USBD_GetLen>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	e001      	b.n	8009ce2 <USBD_GetString+0x42>
 8009cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	4413      	add	r3, r2
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	7812      	ldrb	r2, [r2, #0]
 8009cf0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	2203      	movs	r2, #3
 8009d00:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	3301      	adds	r3, #1
 8009d06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d08:	e013      	b.n	8009d32 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	4413      	add	r3, r2
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	7812      	ldrb	r2, [r2, #0]
 8009d14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	613b      	str	r3, [r7, #16]
    idx++;
 8009d1c:	7dfb      	ldrb	r3, [r7, #23]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	4413      	add	r3, r2
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e7      	bne.n	8009d0a <USBD_GetString+0x6a>
 8009d3a:	e000      	b.n	8009d3e <USBD_GetString+0x9e>
    return;
 8009d3c:	bf00      	nop
  }
}
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d54:	e005      	b.n	8009d62 <USBD_GetLen+0x1e>
  {
    len++;
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1f5      	bne.n	8009d56 <USBD_GetLen+0x12>
  }

  return len;
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2202      	movs	r2, #2
 8009d88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	2100      	movs	r1, #0
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 fd2c 	bl	800a802 <USBD_LL_Transmit>

  return USBD_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 fd1b 	bl	800a802 <USBD_LL_Transmit>

  return USBD_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	60f8      	str	r0, [r7, #12]
 8009dde:	60b9      	str	r1, [r7, #8]
 8009de0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2203      	movs	r2, #3
 8009de6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	2100      	movs	r1, #0
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 fd1b 	bl	800a844 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	2100      	movs	r1, #0
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 fd0a 	bl	800a844 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2204      	movs	r2, #4
 8009e46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2100      	movs	r1, #0
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fcd6 	bl	800a802 <USBD_LL_Transmit>

  return USBD_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2205      	movs	r2, #5
 8009e6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e70:	2300      	movs	r3, #0
 8009e72:	2200      	movs	r2, #0
 8009e74:	2100      	movs	r1, #0
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fce4 	bl	800a844 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
	...

08009e88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	4912      	ldr	r1, [pc, #72]	@ (8009ed8 <MX_USB_DEVICE_Init+0x50>)
 8009e90:	4812      	ldr	r0, [pc, #72]	@ (8009edc <MX_USB_DEVICE_Init+0x54>)
 8009e92:	f7fe fcd9 	bl	8008848 <USBD_Init>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e9c:	f7f8 fa18 	bl	80022d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009ea0:	490f      	ldr	r1, [pc, #60]	@ (8009ee0 <MX_USB_DEVICE_Init+0x58>)
 8009ea2:	480e      	ldr	r0, [pc, #56]	@ (8009edc <MX_USB_DEVICE_Init+0x54>)
 8009ea4:	f7fe fd00 	bl	80088a8 <USBD_RegisterClass>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009eae:	f7f8 fa0f 	bl	80022d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009eb2:	490c      	ldr	r1, [pc, #48]	@ (8009ee4 <MX_USB_DEVICE_Init+0x5c>)
 8009eb4:	4809      	ldr	r0, [pc, #36]	@ (8009edc <MX_USB_DEVICE_Init+0x54>)
 8009eb6:	f7fe fbf7 	bl	80086a8 <USBD_CDC_RegisterInterface>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ec0:	f7f8 fa06 	bl	80022d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ec4:	4805      	ldr	r0, [pc, #20]	@ (8009edc <MX_USB_DEVICE_Init+0x54>)
 8009ec6:	f7fe fd25 	bl	8008914 <USBD_Start>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d001      	beq.n	8009ed4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ed0:	f7f8 f9fe 	bl	80022d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ed4:	bf00      	nop
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	200000b0 	.word	0x200000b0
 8009edc:	200094e4 	.word	0x200094e4
 8009ee0:	2000001c 	.word	0x2000001c
 8009ee4:	2000009c 	.word	0x2000009c

08009ee8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009eec:	2200      	movs	r2, #0
 8009eee:	4905      	ldr	r1, [pc, #20]	@ (8009f04 <CDC_Init_FS+0x1c>)
 8009ef0:	4805      	ldr	r0, [pc, #20]	@ (8009f08 <CDC_Init_FS+0x20>)
 8009ef2:	f7fe fbf3 	bl	80086dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ef6:	4905      	ldr	r1, [pc, #20]	@ (8009f0c <CDC_Init_FS+0x24>)
 8009ef8:	4803      	ldr	r0, [pc, #12]	@ (8009f08 <CDC_Init_FS+0x20>)
 8009efa:	f7fe fc11 	bl	8008720 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009efe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	2000a0c4 	.word	0x2000a0c4
 8009f08:	200094e4 	.word	0x200094e4
 8009f0c:	200098c4 	.word	0x200098c4

08009f10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	6039      	str	r1, [r7, #0]
 8009f2a:	71fb      	strb	r3, [r7, #7]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f30:	79fb      	ldrb	r3, [r7, #7]
 8009f32:	2b23      	cmp	r3, #35	@ 0x23
 8009f34:	d84a      	bhi.n	8009fcc <CDC_Control_FS+0xac>
 8009f36:	a201      	add	r2, pc, #4	@ (adr r2, 8009f3c <CDC_Control_FS+0x1c>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	08009fcd 	.word	0x08009fcd
 8009f40:	08009fcd 	.word	0x08009fcd
 8009f44:	08009fcd 	.word	0x08009fcd
 8009f48:	08009fcd 	.word	0x08009fcd
 8009f4c:	08009fcd 	.word	0x08009fcd
 8009f50:	08009fcd 	.word	0x08009fcd
 8009f54:	08009fcd 	.word	0x08009fcd
 8009f58:	08009fcd 	.word	0x08009fcd
 8009f5c:	08009fcd 	.word	0x08009fcd
 8009f60:	08009fcd 	.word	0x08009fcd
 8009f64:	08009fcd 	.word	0x08009fcd
 8009f68:	08009fcd 	.word	0x08009fcd
 8009f6c:	08009fcd 	.word	0x08009fcd
 8009f70:	08009fcd 	.word	0x08009fcd
 8009f74:	08009fcd 	.word	0x08009fcd
 8009f78:	08009fcd 	.word	0x08009fcd
 8009f7c:	08009fcd 	.word	0x08009fcd
 8009f80:	08009fcd 	.word	0x08009fcd
 8009f84:	08009fcd 	.word	0x08009fcd
 8009f88:	08009fcd 	.word	0x08009fcd
 8009f8c:	08009fcd 	.word	0x08009fcd
 8009f90:	08009fcd 	.word	0x08009fcd
 8009f94:	08009fcd 	.word	0x08009fcd
 8009f98:	08009fcd 	.word	0x08009fcd
 8009f9c:	08009fcd 	.word	0x08009fcd
 8009fa0:	08009fcd 	.word	0x08009fcd
 8009fa4:	08009fcd 	.word	0x08009fcd
 8009fa8:	08009fcd 	.word	0x08009fcd
 8009fac:	08009fcd 	.word	0x08009fcd
 8009fb0:	08009fcd 	.word	0x08009fcd
 8009fb4:	08009fcd 	.word	0x08009fcd
 8009fb8:	08009fcd 	.word	0x08009fcd
 8009fbc:	08009fcd 	.word	0x08009fcd
 8009fc0:	08009fcd 	.word	0x08009fcd
 8009fc4:	08009fcd 	.word	0x08009fcd
 8009fc8:	08009fcd 	.word	0x08009fcd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009fcc:	bf00      	nop
  }

  return (USBD_OK);
 8009fce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a20      	ldr	r2, [pc, #128]	@ (800a06c <CDC_Receive_FS+0x90>)
 8009fec:	8812      	ldrh	r2, [r2, #0]
 8009fee:	b292      	uxth	r2, r2
 8009ff0:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
                            (USB_RX_BUFFER_SIZE - usb_rx_index) : *Len;
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d905      	bls.n	800a004 <CDC_Receive_FS+0x28>
 8009ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800a06c <CDC_Receive_FS+0x90>)
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800a002:	e001      	b.n	800a008 <CDC_Receive_FS+0x2c>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800a008:	60fb      	str	r3, [r7, #12]

    memcpy((void*)&usb_rx_buffer[usb_rx_index], Buf, bytes_to_copy);
 800a00a:	4b18      	ldr	r3, [pc, #96]	@ (800a06c <CDC_Receive_FS+0x90>)
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	461a      	mov	r2, r3
 800a012:	4b17      	ldr	r3, [pc, #92]	@ (800a070 <CDC_Receive_FS+0x94>)
 800a014:	4413      	add	r3, r2
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	6879      	ldr	r1, [r7, #4]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f002 fecd 	bl	800cdba <memcpy>
    usb_rx_index += bytes_to_copy;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	b29a      	uxth	r2, r3
 800a024:	4b11      	ldr	r3, [pc, #68]	@ (800a06c <CDC_Receive_FS+0x90>)
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	4413      	add	r3, r2
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	4b0f      	ldr	r3, [pc, #60]	@ (800a06c <CDC_Receive_FS+0x90>)
 800a030:	801a      	strh	r2, [r3, #0]

    // Проверяем наличие завершающего символа
    if (usb_rx_index > 0 && usb_rx_buffer[usb_rx_index - 1] == '\n') {
 800a032:	4b0e      	ldr	r3, [pc, #56]	@ (800a06c <CDC_Receive_FS+0x90>)
 800a034:	881b      	ldrh	r3, [r3, #0]
 800a036:	b29b      	uxth	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00b      	beq.n	800a054 <CDC_Receive_FS+0x78>
 800a03c:	4b0b      	ldr	r3, [pc, #44]	@ (800a06c <CDC_Receive_FS+0x90>)
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	4a0a      	ldr	r2, [pc, #40]	@ (800a070 <CDC_Receive_FS+0x94>)
 800a046:	5cd3      	ldrb	r3, [r2, r3]
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b0a      	cmp	r3, #10
 800a04c:	d102      	bne.n	800a054 <CDC_Receive_FS+0x78>
        new_data_received = 1;
 800a04e:	4b09      	ldr	r3, [pc, #36]	@ (800a074 <CDC_Receive_FS+0x98>)
 800a050:	2201      	movs	r2, #1
 800a052:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a054:	6879      	ldr	r1, [r7, #4]
 800a056:	4808      	ldr	r0, [pc, #32]	@ (800a078 <CDC_Receive_FS+0x9c>)
 800a058:	f7fe fb62 	bl	8008720 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a05c:	4806      	ldr	r0, [pc, #24]	@ (800a078 <CDC_Receive_FS+0x9c>)
 800a05e:	f7fe fbbd 	bl	80087dc <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	200098c0 	.word	0x200098c0
 800a070:	200097c0 	.word	0x200097c0
 800a074:	200098c2 	.word	0x200098c2
 800a078:	200094e4 	.word	0x200094e4

0800a07c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a08c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c4 <CDC_Transmit_FS+0x48>)
 800a08e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a092:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e00b      	b.n	800a0ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a0a2:	887b      	ldrh	r3, [r7, #2]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	4806      	ldr	r0, [pc, #24]	@ (800a0c4 <CDC_Transmit_FS+0x48>)
 800a0aa:	f7fe fb17 	bl	80086dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a0ae:	4805      	ldr	r0, [pc, #20]	@ (800a0c4 <CDC_Transmit_FS+0x48>)
 800a0b0:	f7fe fb54 	bl	800875c <USBD_CDC_TransmitPacket>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	200094e4 	.word	0x200094e4

0800a0c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a0da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
	...

0800a0ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	6039      	str	r1, [r7, #0]
 800a0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2212      	movs	r2, #18
 800a0fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0fe:	4b03      	ldr	r3, [pc, #12]	@ (800a10c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	200000cc 	.word	0x200000cc

0800a110 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	6039      	str	r1, [r7, #0]
 800a11a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2204      	movs	r2, #4
 800a120:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a122:	4b03      	ldr	r3, [pc, #12]	@ (800a130 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a124:	4618      	mov	r0, r3
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	200000e0 	.word	0x200000e0

0800a134 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	4603      	mov	r3, r0
 800a13c:	6039      	str	r1, [r7, #0]
 800a13e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d105      	bne.n	800a152 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	4907      	ldr	r1, [pc, #28]	@ (800a168 <USBD_FS_ProductStrDescriptor+0x34>)
 800a14a:	4808      	ldr	r0, [pc, #32]	@ (800a16c <USBD_FS_ProductStrDescriptor+0x38>)
 800a14c:	f7ff fda8 	bl	8009ca0 <USBD_GetString>
 800a150:	e004      	b.n	800a15c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	4904      	ldr	r1, [pc, #16]	@ (800a168 <USBD_FS_ProductStrDescriptor+0x34>)
 800a156:	4805      	ldr	r0, [pc, #20]	@ (800a16c <USBD_FS_ProductStrDescriptor+0x38>)
 800a158:	f7ff fda2 	bl	8009ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a15c:	4b02      	ldr	r3, [pc, #8]	@ (800a168 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	2000a8c4 	.word	0x2000a8c4
 800a16c:	0800fa74 	.word	0x0800fa74

0800a170 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	6039      	str	r1, [r7, #0]
 800a17a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	4904      	ldr	r1, [pc, #16]	@ (800a190 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a180:	4804      	ldr	r0, [pc, #16]	@ (800a194 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a182:	f7ff fd8d 	bl	8009ca0 <USBD_GetString>
  return USBD_StrDesc;
 800a186:	4b02      	ldr	r3, [pc, #8]	@ (800a190 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	2000a8c4 	.word	0x2000a8c4
 800a194:	0800fa8c 	.word	0x0800fa8c

0800a198 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	6039      	str	r1, [r7, #0]
 800a1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	221a      	movs	r2, #26
 800a1a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a1aa:	f000 f843 	bl	800a234 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1ae:	4b02      	ldr	r3, [pc, #8]	@ (800a1b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	200000e4 	.word	0x200000e4

0800a1bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	6039      	str	r1, [r7, #0]
 800a1c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d105      	bne.n	800a1da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	4907      	ldr	r1, [pc, #28]	@ (800a1f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1d2:	4808      	ldr	r0, [pc, #32]	@ (800a1f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1d4:	f7ff fd64 	bl	8009ca0 <USBD_GetString>
 800a1d8:	e004      	b.n	800a1e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	4904      	ldr	r1, [pc, #16]	@ (800a1f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1de:	4805      	ldr	r0, [pc, #20]	@ (800a1f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1e0:	f7ff fd5e 	bl	8009ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1e4:	4b02      	ldr	r3, [pc, #8]	@ (800a1f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	2000a8c4 	.word	0x2000a8c4
 800a1f4:	0800faa0 	.word	0x0800faa0

0800a1f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	6039      	str	r1, [r7, #0]
 800a202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d105      	bne.n	800a216 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	4907      	ldr	r1, [pc, #28]	@ (800a22c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a20e:	4808      	ldr	r0, [pc, #32]	@ (800a230 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a210:	f7ff fd46 	bl	8009ca0 <USBD_GetString>
 800a214:	e004      	b.n	800a220 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	4904      	ldr	r1, [pc, #16]	@ (800a22c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a21a:	4805      	ldr	r0, [pc, #20]	@ (800a230 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a21c:	f7ff fd40 	bl	8009ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a220:	4b02      	ldr	r3, [pc, #8]	@ (800a22c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	2000a8c4 	.word	0x2000a8c4
 800a230:	0800faac 	.word	0x0800faac

0800a234 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a23a:	4b0f      	ldr	r3, [pc, #60]	@ (800a278 <Get_SerialNum+0x44>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a240:	4b0e      	ldr	r3, [pc, #56]	@ (800a27c <Get_SerialNum+0x48>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a246:	4b0e      	ldr	r3, [pc, #56]	@ (800a280 <Get_SerialNum+0x4c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4413      	add	r3, r2
 800a252:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d009      	beq.n	800a26e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a25a:	2208      	movs	r2, #8
 800a25c:	4909      	ldr	r1, [pc, #36]	@ (800a284 <Get_SerialNum+0x50>)
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f000 f814 	bl	800a28c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a264:	2204      	movs	r2, #4
 800a266:	4908      	ldr	r1, [pc, #32]	@ (800a288 <Get_SerialNum+0x54>)
 800a268:	68b8      	ldr	r0, [r7, #8]
 800a26a:	f000 f80f 	bl	800a28c <IntToUnicode>
  }
}
 800a26e:	bf00      	nop
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	1fff7a10 	.word	0x1fff7a10
 800a27c:	1fff7a14 	.word	0x1fff7a14
 800a280:	1fff7a18 	.word	0x1fff7a18
 800a284:	200000e6 	.word	0x200000e6
 800a288:	200000f6 	.word	0x200000f6

0800a28c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b087      	sub	sp, #28
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4613      	mov	r3, r2
 800a298:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a29e:	2300      	movs	r3, #0
 800a2a0:	75fb      	strb	r3, [r7, #23]
 800a2a2:	e027      	b.n	800a2f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	0f1b      	lsrs	r3, r3, #28
 800a2a8:	2b09      	cmp	r3, #9
 800a2aa:	d80b      	bhi.n	800a2c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	0f1b      	lsrs	r3, r3, #28
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	440b      	add	r3, r1
 800a2bc:	3230      	adds	r2, #48	@ 0x30
 800a2be:	b2d2      	uxtb	r2, r2
 800a2c0:	701a      	strb	r2, [r3, #0]
 800a2c2:	e00a      	b.n	800a2da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	0f1b      	lsrs	r3, r3, #28
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
 800a2cc:	005b      	lsls	r3, r3, #1
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	440b      	add	r3, r1
 800a2d4:	3237      	adds	r2, #55	@ 0x37
 800a2d6:	b2d2      	uxtb	r2, r2
 800a2d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	011b      	lsls	r3, r3, #4
 800a2de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	75fb      	strb	r3, [r7, #23]
 800a2f4:	7dfa      	ldrb	r2, [r7, #23]
 800a2f6:	79fb      	ldrb	r3, [r7, #7]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d3d3      	bcc.n	800a2a4 <IntToUnicode+0x18>
  }
}
 800a2fc:	bf00      	nop
 800a2fe:	bf00      	nop
 800a300:	371c      	adds	r7, #28
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
	...

0800a30c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08a      	sub	sp, #40	@ 0x28
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a314:	f107 0314 	add.w	r3, r7, #20
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	605a      	str	r2, [r3, #4]
 800a31e:	609a      	str	r2, [r3, #8]
 800a320:	60da      	str	r2, [r3, #12]
 800a322:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a32c:	d13a      	bne.n	800a3a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a32e:	2300      	movs	r3, #0
 800a330:	613b      	str	r3, [r7, #16]
 800a332:	4b1e      	ldr	r3, [pc, #120]	@ (800a3ac <HAL_PCD_MspInit+0xa0>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a336:	4a1d      	ldr	r2, [pc, #116]	@ (800a3ac <HAL_PCD_MspInit+0xa0>)
 800a338:	f043 0301 	orr.w	r3, r3, #1
 800a33c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a33e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3ac <HAL_PCD_MspInit+0xa0>)
 800a340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a34a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a34e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a350:	2302      	movs	r3, #2
 800a352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a354:	2300      	movs	r3, #0
 800a356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a358:	2303      	movs	r3, #3
 800a35a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a35c:	230a      	movs	r3, #10
 800a35e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a360:	f107 0314 	add.w	r3, r7, #20
 800a364:	4619      	mov	r1, r3
 800a366:	4812      	ldr	r0, [pc, #72]	@ (800a3b0 <HAL_PCD_MspInit+0xa4>)
 800a368:	f7f8 fcf4 	bl	8002d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a36c:	4b0f      	ldr	r3, [pc, #60]	@ (800a3ac <HAL_PCD_MspInit+0xa0>)
 800a36e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a370:	4a0e      	ldr	r2, [pc, #56]	@ (800a3ac <HAL_PCD_MspInit+0xa0>)
 800a372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a376:	6353      	str	r3, [r2, #52]	@ 0x34
 800a378:	2300      	movs	r3, #0
 800a37a:	60fb      	str	r3, [r7, #12]
 800a37c:	4b0b      	ldr	r3, [pc, #44]	@ (800a3ac <HAL_PCD_MspInit+0xa0>)
 800a37e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a380:	4a0a      	ldr	r2, [pc, #40]	@ (800a3ac <HAL_PCD_MspInit+0xa0>)
 800a382:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a386:	6453      	str	r3, [r2, #68]	@ 0x44
 800a388:	4b08      	ldr	r3, [pc, #32]	@ (800a3ac <HAL_PCD_MspInit+0xa0>)
 800a38a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a38c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a394:	2200      	movs	r2, #0
 800a396:	2100      	movs	r1, #0
 800a398:	2043      	movs	r0, #67	@ 0x43
 800a39a:	f7f8 fb98 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a39e:	2043      	movs	r0, #67	@ 0x43
 800a3a0:	f7f8 fbb1 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3a4:	bf00      	nop
 800a3a6:	3728      	adds	r7, #40	@ 0x28
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	40023800 	.word	0x40023800
 800a3b0:	40020000 	.word	0x40020000

0800a3b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	f7fe faef 	bl	80089ae <USBD_LL_SetupStage>
}
 800a3d0:	bf00      	nop
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a3ea:	78fa      	ldrb	r2, [r7, #3]
 800a3ec:	6879      	ldr	r1, [r7, #4]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	00db      	lsls	r3, r3, #3
 800a3f2:	4413      	add	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	440b      	add	r3, r1
 800a3f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	78fb      	ldrb	r3, [r7, #3]
 800a400:	4619      	mov	r1, r3
 800a402:	f7fe fb29 	bl	8008a58 <USBD_LL_DataOutStage>
}
 800a406:	bf00      	nop
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b082      	sub	sp, #8
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	460b      	mov	r3, r1
 800a418:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	4613      	mov	r3, r2
 800a426:	00db      	lsls	r3, r3, #3
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	440b      	add	r3, r1
 800a42e:	3320      	adds	r3, #32
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	78fb      	ldrb	r3, [r7, #3]
 800a434:	4619      	mov	r1, r3
 800a436:	f7fe fbcb 	bl	8008bd0 <USBD_LL_DataInStage>
}
 800a43a:	bf00      	nop
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b082      	sub	sp, #8
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe fd0f 	bl	8008e74 <USBD_LL_SOF>
}
 800a456:	bf00      	nop
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b084      	sub	sp, #16
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a466:	2301      	movs	r3, #1
 800a468:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	79db      	ldrb	r3, [r3, #7]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d102      	bne.n	800a478 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a472:	2300      	movs	r3, #0
 800a474:	73fb      	strb	r3, [r7, #15]
 800a476:	e008      	b.n	800a48a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	79db      	ldrb	r3, [r3, #7]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d102      	bne.n	800a486 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a480:	2301      	movs	r3, #1
 800a482:	73fb      	strb	r3, [r7, #15]
 800a484:	e001      	b.n	800a48a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a486:	f7f7 ff23 	bl	80022d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a490:	7bfa      	ldrb	r2, [r7, #15]
 800a492:	4611      	mov	r1, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f7fe fca9 	bl	8008dec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe fc50 	bl	8008d46 <USBD_LL_Reset>
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fca4 	bl	8008e0c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	6812      	ldr	r2, [r2, #0]
 800a4d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4d6:	f043 0301 	orr.w	r3, r3, #1
 800a4da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	7adb      	ldrb	r3, [r3, #11]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4e4:	4b04      	ldr	r3, [pc, #16]	@ (800a4f8 <HAL_PCD_SuspendCallback+0x48>)
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	4a03      	ldr	r2, [pc, #12]	@ (800a4f8 <HAL_PCD_SuspendCallback+0x48>)
 800a4ea:	f043 0306 	orr.w	r3, r3, #6
 800a4ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	e000ed00 	.word	0xe000ed00

0800a4fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe fc9a 	bl	8008e44 <USBD_LL_Resume>
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a52a:	78fa      	ldrb	r2, [r7, #3]
 800a52c:	4611      	mov	r1, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe fcf2 	bl	8008f18 <USBD_LL_IsoOUTIncomplete>
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a54e:	78fa      	ldrb	r2, [r7, #3]
 800a550:	4611      	mov	r1, r2
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe fcae 	bl	8008eb4 <USBD_LL_IsoINIncomplete>
}
 800a558:	bf00      	nop
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fd04 	bl	8008f7c <USBD_LL_DevConnected>
}
 800a574:	bf00      	nop
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fe fd01 	bl	8008f92 <USBD_LL_DevDisconnected>
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d13c      	bne.n	800a622 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a5a8:	4a20      	ldr	r2, [pc, #128]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a1e      	ldr	r2, [pc, #120]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a5b8:	4b1c      	ldr	r3, [pc, #112]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a5be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a5c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5c2:	2204      	movs	r2, #4
 800a5c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a5c6:	4b19      	ldr	r3, [pc, #100]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a5cc:	4b17      	ldr	r3, [pc, #92]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a5d2:	4b16      	ldr	r3, [pc, #88]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5d4:	2202      	movs	r2, #2
 800a5d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a5d8:	4b14      	ldr	r3, [pc, #80]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a5de:	4b13      	ldr	r3, [pc, #76]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a5e4:	4b11      	ldr	r3, [pc, #68]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a5ea:	4b10      	ldr	r3, [pc, #64]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a5f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a5f6:	480d      	ldr	r0, [pc, #52]	@ (800a62c <USBD_LL_Init+0x94>)
 800a5f8:	f7f8 fd61 	bl	80030be <HAL_PCD_Init>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a602:	f7f7 fe65 	bl	80022d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a606:	2180      	movs	r1, #128	@ 0x80
 800a608:	4808      	ldr	r0, [pc, #32]	@ (800a62c <USBD_LL_Init+0x94>)
 800a60a:	f7f9 ff8e 	bl	800452a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a60e:	2240      	movs	r2, #64	@ 0x40
 800a610:	2100      	movs	r1, #0
 800a612:	4806      	ldr	r0, [pc, #24]	@ (800a62c <USBD_LL_Init+0x94>)
 800a614:	f7f9 ff42 	bl	800449c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a618:	2280      	movs	r2, #128	@ 0x80
 800a61a:	2101      	movs	r1, #1
 800a61c:	4803      	ldr	r0, [pc, #12]	@ (800a62c <USBD_LL_Init+0x94>)
 800a61e:	f7f9 ff3d 	bl	800449c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	2000aac4 	.word	0x2000aac4

0800a630 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a646:	4618      	mov	r0, r3
 800a648:	f7f8 fe48 	bl	80032dc <HAL_PCD_Start>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 f942 	bl	800a8dc <USBD_Get_USB_Status>
 800a658:	4603      	mov	r3, r0
 800a65a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b084      	sub	sp, #16
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	4608      	mov	r0, r1
 800a670:	4611      	mov	r1, r2
 800a672:	461a      	mov	r2, r3
 800a674:	4603      	mov	r3, r0
 800a676:	70fb      	strb	r3, [r7, #3]
 800a678:	460b      	mov	r3, r1
 800a67a:	70bb      	strb	r3, [r7, #2]
 800a67c:	4613      	mov	r3, r2
 800a67e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a68e:	78bb      	ldrb	r3, [r7, #2]
 800a690:	883a      	ldrh	r2, [r7, #0]
 800a692:	78f9      	ldrb	r1, [r7, #3]
 800a694:	f7f9 fb1c 	bl	8003cd0 <HAL_PCD_EP_Open>
 800a698:	4603      	mov	r3, r0
 800a69a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 f91c 	bl	800a8dc <USBD_Get_USB_Status>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b084      	sub	sp, #16
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6cc:	78fa      	ldrb	r2, [r7, #3]
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7f9 fb67 	bl	8003da4 <HAL_PCD_EP_Close>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 f8fd 	bl	800a8dc <USBD_Get_USB_Status>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a70a:	78fa      	ldrb	r2, [r7, #3]
 800a70c:	4611      	mov	r1, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f9 fc1f 	bl	8003f52 <HAL_PCD_EP_SetStall>
 800a714:	4603      	mov	r3, r0
 800a716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a718:	7bfb      	ldrb	r3, [r7, #15]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 f8de 	bl	800a8dc <USBD_Get_USB_Status>
 800a720:	4603      	mov	r3, r0
 800a722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a724:	7bbb      	ldrb	r3, [r7, #14]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	460b      	mov	r3, r1
 800a738:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a748:	78fa      	ldrb	r2, [r7, #3]
 800a74a:	4611      	mov	r1, r2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7f9 fc63 	bl	8004018 <HAL_PCD_EP_ClrStall>
 800a752:	4603      	mov	r3, r0
 800a754:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a756:	7bfb      	ldrb	r3, [r7, #15]
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 f8bf 	bl	800a8dc <USBD_Get_USB_Status>
 800a75e:	4603      	mov	r3, r0
 800a760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a762:	7bbb      	ldrb	r3, [r7, #14]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a77e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a784:	2b00      	cmp	r3, #0
 800a786:	da0b      	bge.n	800a7a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a788:	78fb      	ldrb	r3, [r7, #3]
 800a78a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	4613      	mov	r3, r2
 800a792:	00db      	lsls	r3, r3, #3
 800a794:	4413      	add	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	440b      	add	r3, r1
 800a79a:	3316      	adds	r3, #22
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	e00b      	b.n	800a7b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7a0:	78fb      	ldrb	r3, [r7, #3]
 800a7a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7a6:	68f9      	ldr	r1, [r7, #12]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	440b      	add	r3, r1
 800a7b2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a7b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7de:	78fa      	ldrb	r2, [r7, #3]
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7f9 fa50 	bl	8003c88 <HAL_PCD_SetAddress>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 f874 	bl	800a8dc <USBD_Get_USB_Status>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b086      	sub	sp, #24
 800a806:	af00      	add	r7, sp, #0
 800a808:	60f8      	str	r0, [r7, #12]
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
 800a80e:	460b      	mov	r3, r1
 800a810:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a820:	7af9      	ldrb	r1, [r7, #11]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	f7f9 fb5a 	bl	8003ede <HAL_PCD_EP_Transmit>
 800a82a:	4603      	mov	r3, r0
 800a82c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
 800a830:	4618      	mov	r0, r3
 800a832:	f000 f853 	bl	800a8dc <USBD_Get_USB_Status>
 800a836:	4603      	mov	r3, r0
 800a838:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a83a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3718      	adds	r7, #24
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	607a      	str	r2, [r7, #4]
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	460b      	mov	r3, r1
 800a852:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a862:	7af9      	ldrb	r1, [r7, #11]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	f7f9 fae6 	bl	8003e38 <HAL_PCD_EP_Receive>
 800a86c:	4603      	mov	r3, r0
 800a86e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a870:	7dfb      	ldrb	r3, [r7, #23]
 800a872:	4618      	mov	r0, r3
 800a874:	f000 f832 	bl	800a8dc <USBD_Get_USB_Status>
 800a878:	4603      	mov	r3, r0
 800a87a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a87c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	460b      	mov	r3, r1
 800a890:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a898:	78fa      	ldrb	r2, [r7, #3]
 800a89a:	4611      	mov	r1, r2
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7f9 fb06 	bl	8003eae <HAL_PCD_EP_GetRxCount>
 800a8a2:	4603      	mov	r3, r0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a8b4:	4b03      	ldr	r3, [pc, #12]	@ (800a8c4 <USBD_static_malloc+0x18>)
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	2000afa8 	.word	0x2000afa8

0800a8c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]

}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8ea:	79fb      	ldrb	r3, [r7, #7]
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d817      	bhi.n	800a920 <USBD_Get_USB_Status+0x44>
 800a8f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f8 <USBD_Get_USB_Status+0x1c>)
 800a8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f6:	bf00      	nop
 800a8f8:	0800a909 	.word	0x0800a909
 800a8fc:	0800a90f 	.word	0x0800a90f
 800a900:	0800a915 	.word	0x0800a915
 800a904:	0800a91b 	.word	0x0800a91b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73fb      	strb	r3, [r7, #15]
    break;
 800a90c:	e00b      	b.n	800a926 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a90e:	2303      	movs	r3, #3
 800a910:	73fb      	strb	r3, [r7, #15]
    break;
 800a912:	e008      	b.n	800a926 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a914:	2301      	movs	r3, #1
 800a916:	73fb      	strb	r3, [r7, #15]
    break;
 800a918:	e005      	b.n	800a926 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a91a:	2303      	movs	r3, #3
 800a91c:	73fb      	strb	r3, [r7, #15]
    break;
 800a91e:	e002      	b.n	800a926 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a920:	2303      	movs	r3, #3
 800a922:	73fb      	strb	r3, [r7, #15]
    break;
 800a924:	bf00      	nop
  }
  return usb_status;
 800a926:	7bfb      	ldrb	r3, [r7, #15]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <arm_copy_f32>:
 800a934:	b4f0      	push	{r4, r5, r6, r7}
 800a936:	0897      	lsrs	r7, r2, #2
 800a938:	d01e      	beq.n	800a978 <arm_copy_f32+0x44>
 800a93a:	f100 0410 	add.w	r4, r0, #16
 800a93e:	f101 0310 	add.w	r3, r1, #16
 800a942:	463d      	mov	r5, r7
 800a944:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800a948:	f843 6c10 	str.w	r6, [r3, #-16]
 800a94c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800a950:	f843 6c0c 	str.w	r6, [r3, #-12]
 800a954:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800a958:	f843 6c08 	str.w	r6, [r3, #-8]
 800a95c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800a960:	f843 6c04 	str.w	r6, [r3, #-4]
 800a964:	3d01      	subs	r5, #1
 800a966:	f104 0410 	add.w	r4, r4, #16
 800a96a:	f103 0310 	add.w	r3, r3, #16
 800a96e:	d1e9      	bne.n	800a944 <arm_copy_f32+0x10>
 800a970:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800a974:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800a978:	f012 0203 	ands.w	r2, r2, #3
 800a97c:	d009      	beq.n	800a992 <arm_copy_f32+0x5e>
 800a97e:	6803      	ldr	r3, [r0, #0]
 800a980:	600b      	str	r3, [r1, #0]
 800a982:	3a01      	subs	r2, #1
 800a984:	d005      	beq.n	800a992 <arm_copy_f32+0x5e>
 800a986:	6843      	ldr	r3, [r0, #4]
 800a988:	604b      	str	r3, [r1, #4]
 800a98a:	2a01      	cmp	r2, #1
 800a98c:	bf1c      	itt	ne
 800a98e:	6883      	ldrne	r3, [r0, #8]
 800a990:	608b      	strne	r3, [r1, #8]
 800a992:	bcf0      	pop	{r4, r5, r6, r7}
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop

0800a998 <arm_std_f32>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	ed2d 8b02 	vpush	{d8}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	aa01      	add	r2, sp, #4
 800a9a4:	f000 f8e4 	bl	800ab70 <arm_var_f32>
 800a9a8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a9ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b4:	db0c      	blt.n	800a9d0 <arm_std_f32+0x38>
 800a9b6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9be:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a9c2:	d408      	bmi.n	800a9d6 <arm_std_f32+0x3e>
 800a9c4:	ed84 8a00 	vstr	s16, [r4]
 800a9c8:	b002      	add	sp, #8
 800a9ca:	ecbd 8b02 	vpop	{d8}
 800a9ce:	bd10      	pop	{r4, pc}
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	6023      	str	r3, [r4, #0]
 800a9d4:	e7f8      	b.n	800a9c8 <arm_std_f32+0x30>
 800a9d6:	f004 fded 	bl	800f5b4 <sqrtf>
 800a9da:	e7f3      	b.n	800a9c4 <arm_std_f32+0x2c>

0800a9dc <arm_mean_f32>:
 800a9dc:	b430      	push	{r4, r5}
 800a9de:	088d      	lsrs	r5, r1, #2
 800a9e0:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800aa54 <arm_mean_f32+0x78>
 800a9e4:	d018      	beq.n	800aa18 <arm_mean_f32+0x3c>
 800a9e6:	f100 0310 	add.w	r3, r0, #16
 800a9ea:	462c      	mov	r4, r5
 800a9ec:	ed53 5a04 	vldr	s11, [r3, #-16]
 800a9f0:	ed13 6a03 	vldr	s12, [r3, #-12]
 800a9f4:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a9f8:	ed13 7a01 	vldr	s14, [r3, #-4]
 800a9fc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800aa00:	3c01      	subs	r4, #1
 800aa02:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aa06:	f103 0310 	add.w	r3, r3, #16
 800aa0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa12:	d1eb      	bne.n	800a9ec <arm_mean_f32+0x10>
 800aa14:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800aa18:	f011 0303 	ands.w	r3, r1, #3
 800aa1c:	d00f      	beq.n	800aa3e <arm_mean_f32+0x62>
 800aa1e:	ed90 7a00 	vldr	s14, [r0]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa28:	d009      	beq.n	800aa3e <arm_mean_f32+0x62>
 800aa2a:	ed90 7a01 	vldr	s14, [r0, #4]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa34:	bf1c      	itt	ne
 800aa36:	ed90 7a02 	vldrne	s14, [r0, #8]
 800aa3a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800aa3e:	ee07 1a10 	vmov	s14, r1
 800aa42:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aa46:	bc30      	pop	{r4, r5}
 800aa48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa4c:	edc2 6a00 	vstr	s13, [r2]
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	00000000 	.word	0x00000000

0800aa58 <arm_scale_f32>:
 800aa58:	b470      	push	{r4, r5, r6}
 800aa5a:	0896      	lsrs	r6, r2, #2
 800aa5c:	d026      	beq.n	800aaac <arm_scale_f32+0x54>
 800aa5e:	f100 0410 	add.w	r4, r0, #16
 800aa62:	f101 0310 	add.w	r3, r1, #16
 800aa66:	4635      	mov	r5, r6
 800aa68:	ed14 6a03 	vldr	s12, [r4, #-12]
 800aa6c:	ed54 6a02 	vldr	s13, [r4, #-8]
 800aa70:	ed14 7a01 	vldr	s14, [r4, #-4]
 800aa74:	ed54 7a04 	vldr	s15, [r4, #-16]
 800aa78:	ee20 6a06 	vmul.f32	s12, s0, s12
 800aa7c:	ee60 6a26 	vmul.f32	s13, s0, s13
 800aa80:	ee20 7a07 	vmul.f32	s14, s0, s14
 800aa84:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aa88:	3d01      	subs	r5, #1
 800aa8a:	ed03 6a03 	vstr	s12, [r3, #-12]
 800aa8e:	ed43 6a02 	vstr	s13, [r3, #-8]
 800aa92:	ed03 7a01 	vstr	s14, [r3, #-4]
 800aa96:	ed43 7a04 	vstr	s15, [r3, #-16]
 800aa9a:	f104 0410 	add.w	r4, r4, #16
 800aa9e:	f103 0310 	add.w	r3, r3, #16
 800aaa2:	d1e1      	bne.n	800aa68 <arm_scale_f32+0x10>
 800aaa4:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800aaa8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800aaac:	f012 0203 	ands.w	r2, r2, #3
 800aab0:	d015      	beq.n	800aade <arm_scale_f32+0x86>
 800aab2:	edd0 7a00 	vldr	s15, [r0]
 800aab6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aaba:	3a01      	subs	r2, #1
 800aabc:	edc1 7a00 	vstr	s15, [r1]
 800aac0:	d00d      	beq.n	800aade <arm_scale_f32+0x86>
 800aac2:	edd0 7a01 	vldr	s15, [r0, #4]
 800aac6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aaca:	2a01      	cmp	r2, #1
 800aacc:	edc1 7a01 	vstr	s15, [r1, #4]
 800aad0:	d005      	beq.n	800aade <arm_scale_f32+0x86>
 800aad2:	edd0 7a02 	vldr	s15, [r0, #8]
 800aad6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aada:	ed81 0a02 	vstr	s0, [r1, #8]
 800aade:	bc70      	pop	{r4, r5, r6}
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop

0800aae4 <arm_offset_f32>:
 800aae4:	b470      	push	{r4, r5, r6}
 800aae6:	0896      	lsrs	r6, r2, #2
 800aae8:	d026      	beq.n	800ab38 <arm_offset_f32+0x54>
 800aaea:	f100 0410 	add.w	r4, r0, #16
 800aaee:	f101 0310 	add.w	r3, r1, #16
 800aaf2:	4635      	mov	r5, r6
 800aaf4:	ed54 7a04 	vldr	s15, [r4, #-16]
 800aaf8:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aafc:	3d01      	subs	r5, #1
 800aafe:	ed43 7a04 	vstr	s15, [r3, #-16]
 800ab02:	ed54 7a03 	vldr	s15, [r4, #-12]
 800ab06:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ab0a:	f104 0410 	add.w	r4, r4, #16
 800ab0e:	ed43 7a03 	vstr	s15, [r3, #-12]
 800ab12:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800ab16:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ab1a:	f103 0310 	add.w	r3, r3, #16
 800ab1e:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800ab22:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800ab26:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ab2a:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800ab2e:	d1e1      	bne.n	800aaf4 <arm_offset_f32+0x10>
 800ab30:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800ab34:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800ab38:	f012 0203 	ands.w	r2, r2, #3
 800ab3c:	d015      	beq.n	800ab6a <arm_offset_f32+0x86>
 800ab3e:	edd0 7a00 	vldr	s15, [r0]
 800ab42:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ab46:	3a01      	subs	r2, #1
 800ab48:	edc1 7a00 	vstr	s15, [r1]
 800ab4c:	d00d      	beq.n	800ab6a <arm_offset_f32+0x86>
 800ab4e:	edd0 7a01 	vldr	s15, [r0, #4]
 800ab52:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ab56:	2a01      	cmp	r2, #1
 800ab58:	edc1 7a01 	vstr	s15, [r1, #4]
 800ab5c:	d005      	beq.n	800ab6a <arm_offset_f32+0x86>
 800ab5e:	edd0 7a02 	vldr	s15, [r0, #8]
 800ab62:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ab66:	ed81 0a02 	vstr	s0, [r1, #8]
 800ab6a:	bc70      	pop	{r4, r5, r6}
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop

0800ab70 <arm_var_f32>:
 800ab70:	2901      	cmp	r1, #1
 800ab72:	f240 809a 	bls.w	800acaa <arm_var_f32+0x13a>
 800ab76:	b4f0      	push	{r4, r5, r6, r7}
 800ab78:	088d      	lsrs	r5, r1, #2
 800ab7a:	f000 80a0 	beq.w	800acbe <arm_var_f32+0x14e>
 800ab7e:	f100 0310 	add.w	r3, r0, #16
 800ab82:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800acc8 <arm_var_f32+0x158>
 800ab86:	461c      	mov	r4, r3
 800ab88:	462e      	mov	r6, r5
 800ab8a:	ed54 5a04 	vldr	s11, [r4, #-16]
 800ab8e:	ed14 6a03 	vldr	s12, [r4, #-12]
 800ab92:	ed54 6a02 	vldr	s13, [r4, #-8]
 800ab96:	ed14 7a01 	vldr	s14, [r4, #-4]
 800ab9a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ab9e:	3e01      	subs	r6, #1
 800aba0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aba4:	f104 0410 	add.w	r4, r4, #16
 800aba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abb0:	d1eb      	bne.n	800ab8a <arm_var_f32+0x1a>
 800abb2:	f011 0403 	ands.w	r4, r1, #3
 800abb6:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800abba:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800abbe:	d077      	beq.n	800acb0 <arm_var_f32+0x140>
 800abc0:	ed96 7a00 	vldr	s14, [r6]
 800abc4:	1e63      	subs	r3, r4, #1
 800abc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abca:	d063      	beq.n	800ac94 <arm_var_f32+0x124>
 800abcc:	ed96 7a01 	vldr	s14, [r6, #4]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abd6:	d05d      	beq.n	800ac94 <arm_var_f32+0x124>
 800abd8:	ed96 7a02 	vldr	s14, [r6, #8]
 800abdc:	ee06 1a90 	vmov	s13, r1
 800abe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abe4:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800abe8:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800abec:	2d00      	cmp	r5, #0
 800abee:	d059      	beq.n	800aca4 <arm_var_f32+0x134>
 800abf0:	f100 0310 	add.w	r3, r0, #16
 800abf4:	012f      	lsls	r7, r5, #4
 800abf6:	4629      	mov	r1, r5
 800abf8:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800acc8 <arm_var_f32+0x158>
 800abfc:	ed13 6a04 	vldr	s12, [r3, #-16]
 800ac00:	ed53 6a03 	vldr	s13, [r3, #-12]
 800ac04:	ed13 7a02 	vldr	s14, [r3, #-8]
 800ac08:	ed53 5a01 	vldr	s11, [r3, #-4]
 800ac0c:	ee36 6a45 	vsub.f32	s12, s12, s10
 800ac10:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800ac14:	ee26 6a06 	vmul.f32	s12, s12, s12
 800ac18:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800ac1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ac20:	ee77 7a45 	vsub.f32	s15, s14, s10
 800ac24:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ac28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac2c:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800ac30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac34:	ee26 6a06 	vmul.f32	s12, s12, s12
 800ac38:	3901      	subs	r1, #1
 800ac3a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ac3e:	f103 0310 	add.w	r3, r3, #16
 800ac42:	d1db      	bne.n	800abfc <arm_var_f32+0x8c>
 800ac44:	4438      	add	r0, r7
 800ac46:	b1dc      	cbz	r4, 800ac80 <arm_var_f32+0x110>
 800ac48:	1e63      	subs	r3, r4, #1
 800ac4a:	ed90 7a00 	vldr	s14, [r0]
 800ac4e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ac52:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ac56:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac5a:	b18b      	cbz	r3, 800ac80 <arm_var_f32+0x110>
 800ac5c:	ed90 7a01 	vldr	s14, [r0, #4]
 800ac60:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ac6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac6e:	d007      	beq.n	800ac80 <arm_var_f32+0x110>
 800ac70:	ed90 7a02 	vldr	s14, [r0, #8]
 800ac74:	ee37 5a45 	vsub.f32	s10, s14, s10
 800ac78:	ee25 5a05 	vmul.f32	s10, s10, s10
 800ac7c:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ac80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac84:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800ac88:	bcf0      	pop	{r4, r5, r6, r7}
 800ac8a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ac8e:	ed82 7a00 	vstr	s14, [r2]
 800ac92:	4770      	bx	lr
 800ac94:	ee07 1a10 	vmov	s14, r1
 800ac98:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800ac9c:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800aca0:	2d00      	cmp	r5, #0
 800aca2:	d1a5      	bne.n	800abf0 <arm_var_f32+0x80>
 800aca4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800acc8 <arm_var_f32+0x158>
 800aca8:	e7cf      	b.n	800ac4a <arm_var_f32+0xda>
 800acaa:	2300      	movs	r3, #0
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	4770      	bx	lr
 800acb0:	ee07 1a10 	vmov	s14, r1
 800acb4:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800acb8:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800acbc:	e79b      	b.n	800abf6 <arm_var_f32+0x86>
 800acbe:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800acc8 <arm_var_f32+0x158>
 800acc2:	4606      	mov	r6, r0
 800acc4:	460c      	mov	r4, r1
 800acc6:	e77b      	b.n	800abc0 <arm_var_f32+0x50>
 800acc8:	00000000 	.word	0x00000000

0800accc <atof>:
 800accc:	2100      	movs	r1, #0
 800acce:	f000 bef1 	b.w	800bab4 <strtod>

0800acd2 <atoi>:
 800acd2:	220a      	movs	r2, #10
 800acd4:	2100      	movs	r1, #0
 800acd6:	f000 bf75 	b.w	800bbc4 <strtol>
	...

0800acdc <malloc>:
 800acdc:	4b02      	ldr	r3, [pc, #8]	@ (800ace8 <malloc+0xc>)
 800acde:	4601      	mov	r1, r0
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	f000 b825 	b.w	800ad30 <_malloc_r>
 800ace6:	bf00      	nop
 800ace8:	20000278 	.word	0x20000278

0800acec <sbrk_aligned>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	4e0f      	ldr	r6, [pc, #60]	@ (800ad2c <sbrk_aligned+0x40>)
 800acf0:	460c      	mov	r4, r1
 800acf2:	6831      	ldr	r1, [r6, #0]
 800acf4:	4605      	mov	r5, r0
 800acf6:	b911      	cbnz	r1, 800acfe <sbrk_aligned+0x12>
 800acf8:	f002 f810 	bl	800cd1c <_sbrk_r>
 800acfc:	6030      	str	r0, [r6, #0]
 800acfe:	4621      	mov	r1, r4
 800ad00:	4628      	mov	r0, r5
 800ad02:	f002 f80b 	bl	800cd1c <_sbrk_r>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	d103      	bne.n	800ad12 <sbrk_aligned+0x26>
 800ad0a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad0e:	4620      	mov	r0, r4
 800ad10:	bd70      	pop	{r4, r5, r6, pc}
 800ad12:	1cc4      	adds	r4, r0, #3
 800ad14:	f024 0403 	bic.w	r4, r4, #3
 800ad18:	42a0      	cmp	r0, r4
 800ad1a:	d0f8      	beq.n	800ad0e <sbrk_aligned+0x22>
 800ad1c:	1a21      	subs	r1, r4, r0
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f001 fffc 	bl	800cd1c <_sbrk_r>
 800ad24:	3001      	adds	r0, #1
 800ad26:	d1f2      	bne.n	800ad0e <sbrk_aligned+0x22>
 800ad28:	e7ef      	b.n	800ad0a <sbrk_aligned+0x1e>
 800ad2a:	bf00      	nop
 800ad2c:	2000b1c8 	.word	0x2000b1c8

0800ad30 <_malloc_r>:
 800ad30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad34:	1ccd      	adds	r5, r1, #3
 800ad36:	f025 0503 	bic.w	r5, r5, #3
 800ad3a:	3508      	adds	r5, #8
 800ad3c:	2d0c      	cmp	r5, #12
 800ad3e:	bf38      	it	cc
 800ad40:	250c      	movcc	r5, #12
 800ad42:	2d00      	cmp	r5, #0
 800ad44:	4606      	mov	r6, r0
 800ad46:	db01      	blt.n	800ad4c <_malloc_r+0x1c>
 800ad48:	42a9      	cmp	r1, r5
 800ad4a:	d904      	bls.n	800ad56 <_malloc_r+0x26>
 800ad4c:	230c      	movs	r3, #12
 800ad4e:	6033      	str	r3, [r6, #0]
 800ad50:	2000      	movs	r0, #0
 800ad52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae2c <_malloc_r+0xfc>
 800ad5a:	f000 f869 	bl	800ae30 <__malloc_lock>
 800ad5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ad62:	461c      	mov	r4, r3
 800ad64:	bb44      	cbnz	r4, 800adb8 <_malloc_r+0x88>
 800ad66:	4629      	mov	r1, r5
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f7ff ffbf 	bl	800acec <sbrk_aligned>
 800ad6e:	1c43      	adds	r3, r0, #1
 800ad70:	4604      	mov	r4, r0
 800ad72:	d158      	bne.n	800ae26 <_malloc_r+0xf6>
 800ad74:	f8d8 4000 	ldr.w	r4, [r8]
 800ad78:	4627      	mov	r7, r4
 800ad7a:	2f00      	cmp	r7, #0
 800ad7c:	d143      	bne.n	800ae06 <_malloc_r+0xd6>
 800ad7e:	2c00      	cmp	r4, #0
 800ad80:	d04b      	beq.n	800ae1a <_malloc_r+0xea>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	4639      	mov	r1, r7
 800ad86:	4630      	mov	r0, r6
 800ad88:	eb04 0903 	add.w	r9, r4, r3
 800ad8c:	f001 ffc6 	bl	800cd1c <_sbrk_r>
 800ad90:	4581      	cmp	r9, r0
 800ad92:	d142      	bne.n	800ae1a <_malloc_r+0xea>
 800ad94:	6821      	ldr	r1, [r4, #0]
 800ad96:	1a6d      	subs	r5, r5, r1
 800ad98:	4629      	mov	r1, r5
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f7ff ffa6 	bl	800acec <sbrk_aligned>
 800ada0:	3001      	adds	r0, #1
 800ada2:	d03a      	beq.n	800ae1a <_malloc_r+0xea>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	442b      	add	r3, r5
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	f8d8 3000 	ldr.w	r3, [r8]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	bb62      	cbnz	r2, 800ae0c <_malloc_r+0xdc>
 800adb2:	f8c8 7000 	str.w	r7, [r8]
 800adb6:	e00f      	b.n	800add8 <_malloc_r+0xa8>
 800adb8:	6822      	ldr	r2, [r4, #0]
 800adba:	1b52      	subs	r2, r2, r5
 800adbc:	d420      	bmi.n	800ae00 <_malloc_r+0xd0>
 800adbe:	2a0b      	cmp	r2, #11
 800adc0:	d917      	bls.n	800adf2 <_malloc_r+0xc2>
 800adc2:	1961      	adds	r1, r4, r5
 800adc4:	42a3      	cmp	r3, r4
 800adc6:	6025      	str	r5, [r4, #0]
 800adc8:	bf18      	it	ne
 800adca:	6059      	strne	r1, [r3, #4]
 800adcc:	6863      	ldr	r3, [r4, #4]
 800adce:	bf08      	it	eq
 800add0:	f8c8 1000 	streq.w	r1, [r8]
 800add4:	5162      	str	r2, [r4, r5]
 800add6:	604b      	str	r3, [r1, #4]
 800add8:	4630      	mov	r0, r6
 800adda:	f000 f82f 	bl	800ae3c <__malloc_unlock>
 800adde:	f104 000b 	add.w	r0, r4, #11
 800ade2:	1d23      	adds	r3, r4, #4
 800ade4:	f020 0007 	bic.w	r0, r0, #7
 800ade8:	1ac2      	subs	r2, r0, r3
 800adea:	bf1c      	itt	ne
 800adec:	1a1b      	subne	r3, r3, r0
 800adee:	50a3      	strne	r3, [r4, r2]
 800adf0:	e7af      	b.n	800ad52 <_malloc_r+0x22>
 800adf2:	6862      	ldr	r2, [r4, #4]
 800adf4:	42a3      	cmp	r3, r4
 800adf6:	bf0c      	ite	eq
 800adf8:	f8c8 2000 	streq.w	r2, [r8]
 800adfc:	605a      	strne	r2, [r3, #4]
 800adfe:	e7eb      	b.n	800add8 <_malloc_r+0xa8>
 800ae00:	4623      	mov	r3, r4
 800ae02:	6864      	ldr	r4, [r4, #4]
 800ae04:	e7ae      	b.n	800ad64 <_malloc_r+0x34>
 800ae06:	463c      	mov	r4, r7
 800ae08:	687f      	ldr	r7, [r7, #4]
 800ae0a:	e7b6      	b.n	800ad7a <_malloc_r+0x4a>
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	d1fb      	bne.n	800ae0c <_malloc_r+0xdc>
 800ae14:	2300      	movs	r3, #0
 800ae16:	6053      	str	r3, [r2, #4]
 800ae18:	e7de      	b.n	800add8 <_malloc_r+0xa8>
 800ae1a:	230c      	movs	r3, #12
 800ae1c:	6033      	str	r3, [r6, #0]
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f000 f80c 	bl	800ae3c <__malloc_unlock>
 800ae24:	e794      	b.n	800ad50 <_malloc_r+0x20>
 800ae26:	6005      	str	r5, [r0, #0]
 800ae28:	e7d6      	b.n	800add8 <_malloc_r+0xa8>
 800ae2a:	bf00      	nop
 800ae2c:	2000b1cc 	.word	0x2000b1cc

0800ae30 <__malloc_lock>:
 800ae30:	4801      	ldr	r0, [pc, #4]	@ (800ae38 <__malloc_lock+0x8>)
 800ae32:	f001 bfc0 	b.w	800cdb6 <__retarget_lock_acquire_recursive>
 800ae36:	bf00      	nop
 800ae38:	2000b310 	.word	0x2000b310

0800ae3c <__malloc_unlock>:
 800ae3c:	4801      	ldr	r0, [pc, #4]	@ (800ae44 <__malloc_unlock+0x8>)
 800ae3e:	f001 bfbb 	b.w	800cdb8 <__retarget_lock_release_recursive>
 800ae42:	bf00      	nop
 800ae44:	2000b310 	.word	0x2000b310

0800ae48 <srand>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4b10      	ldr	r3, [pc, #64]	@ (800ae8c <srand+0x44>)
 800ae4c:	681d      	ldr	r5, [r3, #0]
 800ae4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ae50:	4604      	mov	r4, r0
 800ae52:	b9b3      	cbnz	r3, 800ae82 <srand+0x3a>
 800ae54:	2018      	movs	r0, #24
 800ae56:	f7ff ff41 	bl	800acdc <malloc>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	6328      	str	r0, [r5, #48]	@ 0x30
 800ae5e:	b920      	cbnz	r0, 800ae6a <srand+0x22>
 800ae60:	4b0b      	ldr	r3, [pc, #44]	@ (800ae90 <srand+0x48>)
 800ae62:	480c      	ldr	r0, [pc, #48]	@ (800ae94 <srand+0x4c>)
 800ae64:	2146      	movs	r1, #70	@ 0x46
 800ae66:	f001 ffc5 	bl	800cdf4 <__assert_func>
 800ae6a:	490b      	ldr	r1, [pc, #44]	@ (800ae98 <srand+0x50>)
 800ae6c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae9c <srand+0x54>)
 800ae6e:	e9c0 1300 	strd	r1, r3, [r0]
 800ae72:	4b0b      	ldr	r3, [pc, #44]	@ (800aea0 <srand+0x58>)
 800ae74:	6083      	str	r3, [r0, #8]
 800ae76:	230b      	movs	r3, #11
 800ae78:	8183      	strh	r3, [r0, #12]
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	2001      	movs	r0, #1
 800ae7e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ae82:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ae84:	2200      	movs	r2, #0
 800ae86:	611c      	str	r4, [r3, #16]
 800ae88:	615a      	str	r2, [r3, #20]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	20000278 	.word	0x20000278
 800ae90:	080142b4 	.word	0x080142b4
 800ae94:	080142cb 	.word	0x080142cb
 800ae98:	abcd330e 	.word	0xabcd330e
 800ae9c:	e66d1234 	.word	0xe66d1234
 800aea0:	0005deec 	.word	0x0005deec

0800aea4 <sulp>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	4604      	mov	r4, r0
 800aea8:	460d      	mov	r5, r1
 800aeaa:	ec45 4b10 	vmov	d0, r4, r5
 800aeae:	4616      	mov	r6, r2
 800aeb0:	f003 fd18 	bl	800e8e4 <__ulp>
 800aeb4:	ec51 0b10 	vmov	r0, r1, d0
 800aeb8:	b17e      	cbz	r6, 800aeda <sulp+0x36>
 800aeba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aebe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	dd09      	ble.n	800aeda <sulp+0x36>
 800aec6:	051b      	lsls	r3, r3, #20
 800aec8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aecc:	2400      	movs	r4, #0
 800aece:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aed2:	4622      	mov	r2, r4
 800aed4:	462b      	mov	r3, r5
 800aed6:	f7f5 fb9f 	bl	8000618 <__aeabi_dmul>
 800aeda:	ec41 0b10 	vmov	d0, r0, r1
 800aede:	bd70      	pop	{r4, r5, r6, pc}

0800aee0 <_strtod_l>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	b09f      	sub	sp, #124	@ 0x7c
 800aee6:	460c      	mov	r4, r1
 800aee8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aeea:	2200      	movs	r2, #0
 800aeec:	921a      	str	r2, [sp, #104]	@ 0x68
 800aeee:	9005      	str	r0, [sp, #20]
 800aef0:	f04f 0a00 	mov.w	sl, #0
 800aef4:	f04f 0b00 	mov.w	fp, #0
 800aef8:	460a      	mov	r2, r1
 800aefa:	9219      	str	r2, [sp, #100]	@ 0x64
 800aefc:	7811      	ldrb	r1, [r2, #0]
 800aefe:	292b      	cmp	r1, #43	@ 0x2b
 800af00:	d04a      	beq.n	800af98 <_strtod_l+0xb8>
 800af02:	d838      	bhi.n	800af76 <_strtod_l+0x96>
 800af04:	290d      	cmp	r1, #13
 800af06:	d832      	bhi.n	800af6e <_strtod_l+0x8e>
 800af08:	2908      	cmp	r1, #8
 800af0a:	d832      	bhi.n	800af72 <_strtod_l+0x92>
 800af0c:	2900      	cmp	r1, #0
 800af0e:	d03b      	beq.n	800af88 <_strtod_l+0xa8>
 800af10:	2200      	movs	r2, #0
 800af12:	920e      	str	r2, [sp, #56]	@ 0x38
 800af14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800af16:	782a      	ldrb	r2, [r5, #0]
 800af18:	2a30      	cmp	r2, #48	@ 0x30
 800af1a:	f040 80b2 	bne.w	800b082 <_strtod_l+0x1a2>
 800af1e:	786a      	ldrb	r2, [r5, #1]
 800af20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af24:	2a58      	cmp	r2, #88	@ 0x58
 800af26:	d16e      	bne.n	800b006 <_strtod_l+0x126>
 800af28:	9302      	str	r3, [sp, #8]
 800af2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	ab1a      	add	r3, sp, #104	@ 0x68
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	4a8f      	ldr	r2, [pc, #572]	@ (800b170 <_strtod_l+0x290>)
 800af34:	9805      	ldr	r0, [sp, #20]
 800af36:	ab1b      	add	r3, sp, #108	@ 0x6c
 800af38:	a919      	add	r1, sp, #100	@ 0x64
 800af3a:	f002 fe83 	bl	800dc44 <__gethex>
 800af3e:	f010 060f 	ands.w	r6, r0, #15
 800af42:	4604      	mov	r4, r0
 800af44:	d005      	beq.n	800af52 <_strtod_l+0x72>
 800af46:	2e06      	cmp	r6, #6
 800af48:	d128      	bne.n	800af9c <_strtod_l+0xbc>
 800af4a:	3501      	adds	r5, #1
 800af4c:	2300      	movs	r3, #0
 800af4e:	9519      	str	r5, [sp, #100]	@ 0x64
 800af50:	930e      	str	r3, [sp, #56]	@ 0x38
 800af52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af54:	2b00      	cmp	r3, #0
 800af56:	f040 858e 	bne.w	800ba76 <_strtod_l+0xb96>
 800af5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af5c:	b1cb      	cbz	r3, 800af92 <_strtod_l+0xb2>
 800af5e:	4652      	mov	r2, sl
 800af60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800af64:	ec43 2b10 	vmov	d0, r2, r3
 800af68:	b01f      	add	sp, #124	@ 0x7c
 800af6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6e:	2920      	cmp	r1, #32
 800af70:	d1ce      	bne.n	800af10 <_strtod_l+0x30>
 800af72:	3201      	adds	r2, #1
 800af74:	e7c1      	b.n	800aefa <_strtod_l+0x1a>
 800af76:	292d      	cmp	r1, #45	@ 0x2d
 800af78:	d1ca      	bne.n	800af10 <_strtod_l+0x30>
 800af7a:	2101      	movs	r1, #1
 800af7c:	910e      	str	r1, [sp, #56]	@ 0x38
 800af7e:	1c51      	adds	r1, r2, #1
 800af80:	9119      	str	r1, [sp, #100]	@ 0x64
 800af82:	7852      	ldrb	r2, [r2, #1]
 800af84:	2a00      	cmp	r2, #0
 800af86:	d1c5      	bne.n	800af14 <_strtod_l+0x34>
 800af88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af8a:	9419      	str	r4, [sp, #100]	@ 0x64
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f040 8570 	bne.w	800ba72 <_strtod_l+0xb92>
 800af92:	4652      	mov	r2, sl
 800af94:	465b      	mov	r3, fp
 800af96:	e7e5      	b.n	800af64 <_strtod_l+0x84>
 800af98:	2100      	movs	r1, #0
 800af9a:	e7ef      	b.n	800af7c <_strtod_l+0x9c>
 800af9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af9e:	b13a      	cbz	r2, 800afb0 <_strtod_l+0xd0>
 800afa0:	2135      	movs	r1, #53	@ 0x35
 800afa2:	a81c      	add	r0, sp, #112	@ 0x70
 800afa4:	f003 fd98 	bl	800ead8 <__copybits>
 800afa8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afaa:	9805      	ldr	r0, [sp, #20]
 800afac:	f003 f96e 	bl	800e28c <_Bfree>
 800afb0:	3e01      	subs	r6, #1
 800afb2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800afb4:	2e04      	cmp	r6, #4
 800afb6:	d806      	bhi.n	800afc6 <_strtod_l+0xe6>
 800afb8:	e8df f006 	tbb	[pc, r6]
 800afbc:	201d0314 	.word	0x201d0314
 800afc0:	14          	.byte	0x14
 800afc1:	00          	.byte	0x00
 800afc2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800afc6:	05e1      	lsls	r1, r4, #23
 800afc8:	bf48      	it	mi
 800afca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800afce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800afd2:	0d1b      	lsrs	r3, r3, #20
 800afd4:	051b      	lsls	r3, r3, #20
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1bb      	bne.n	800af52 <_strtod_l+0x72>
 800afda:	f001 fec1 	bl	800cd60 <__errno>
 800afde:	2322      	movs	r3, #34	@ 0x22
 800afe0:	6003      	str	r3, [r0, #0]
 800afe2:	e7b6      	b.n	800af52 <_strtod_l+0x72>
 800afe4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800afe8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800afec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aff0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aff4:	e7e7      	b.n	800afc6 <_strtod_l+0xe6>
 800aff6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b178 <_strtod_l+0x298>
 800affa:	e7e4      	b.n	800afc6 <_strtod_l+0xe6>
 800affc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b000:	f04f 3aff 	mov.w	sl, #4294967295
 800b004:	e7df      	b.n	800afc6 <_strtod_l+0xe6>
 800b006:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b00c:	785b      	ldrb	r3, [r3, #1]
 800b00e:	2b30      	cmp	r3, #48	@ 0x30
 800b010:	d0f9      	beq.n	800b006 <_strtod_l+0x126>
 800b012:	2b00      	cmp	r3, #0
 800b014:	d09d      	beq.n	800af52 <_strtod_l+0x72>
 800b016:	2301      	movs	r3, #1
 800b018:	2700      	movs	r7, #0
 800b01a:	9308      	str	r3, [sp, #32]
 800b01c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b01e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b020:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b022:	46b9      	mov	r9, r7
 800b024:	220a      	movs	r2, #10
 800b026:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b028:	7805      	ldrb	r5, [r0, #0]
 800b02a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b02e:	b2d9      	uxtb	r1, r3
 800b030:	2909      	cmp	r1, #9
 800b032:	d928      	bls.n	800b086 <_strtod_l+0x1a6>
 800b034:	494f      	ldr	r1, [pc, #316]	@ (800b174 <_strtod_l+0x294>)
 800b036:	2201      	movs	r2, #1
 800b038:	f001 fdb7 	bl	800cbaa <strncmp>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d032      	beq.n	800b0a6 <_strtod_l+0x1c6>
 800b040:	2000      	movs	r0, #0
 800b042:	462a      	mov	r2, r5
 800b044:	900a      	str	r0, [sp, #40]	@ 0x28
 800b046:	464d      	mov	r5, r9
 800b048:	4603      	mov	r3, r0
 800b04a:	2a65      	cmp	r2, #101	@ 0x65
 800b04c:	d001      	beq.n	800b052 <_strtod_l+0x172>
 800b04e:	2a45      	cmp	r2, #69	@ 0x45
 800b050:	d114      	bne.n	800b07c <_strtod_l+0x19c>
 800b052:	b91d      	cbnz	r5, 800b05c <_strtod_l+0x17c>
 800b054:	9a08      	ldr	r2, [sp, #32]
 800b056:	4302      	orrs	r2, r0
 800b058:	d096      	beq.n	800af88 <_strtod_l+0xa8>
 800b05a:	2500      	movs	r5, #0
 800b05c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b05e:	1c62      	adds	r2, r4, #1
 800b060:	9219      	str	r2, [sp, #100]	@ 0x64
 800b062:	7862      	ldrb	r2, [r4, #1]
 800b064:	2a2b      	cmp	r2, #43	@ 0x2b
 800b066:	d07a      	beq.n	800b15e <_strtod_l+0x27e>
 800b068:	2a2d      	cmp	r2, #45	@ 0x2d
 800b06a:	d07e      	beq.n	800b16a <_strtod_l+0x28a>
 800b06c:	f04f 0c00 	mov.w	ip, #0
 800b070:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b074:	2909      	cmp	r1, #9
 800b076:	f240 8085 	bls.w	800b184 <_strtod_l+0x2a4>
 800b07a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b07c:	f04f 0800 	mov.w	r8, #0
 800b080:	e0a5      	b.n	800b1ce <_strtod_l+0x2ee>
 800b082:	2300      	movs	r3, #0
 800b084:	e7c8      	b.n	800b018 <_strtod_l+0x138>
 800b086:	f1b9 0f08 	cmp.w	r9, #8
 800b08a:	bfd8      	it	le
 800b08c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b08e:	f100 0001 	add.w	r0, r0, #1
 800b092:	bfda      	itte	le
 800b094:	fb02 3301 	mlale	r3, r2, r1, r3
 800b098:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b09a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b09e:	f109 0901 	add.w	r9, r9, #1
 800b0a2:	9019      	str	r0, [sp, #100]	@ 0x64
 800b0a4:	e7bf      	b.n	800b026 <_strtod_l+0x146>
 800b0a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0a8:	1c5a      	adds	r2, r3, #1
 800b0aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0ac:	785a      	ldrb	r2, [r3, #1]
 800b0ae:	f1b9 0f00 	cmp.w	r9, #0
 800b0b2:	d03b      	beq.n	800b12c <_strtod_l+0x24c>
 800b0b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b0b6:	464d      	mov	r5, r9
 800b0b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b0bc:	2b09      	cmp	r3, #9
 800b0be:	d912      	bls.n	800b0e6 <_strtod_l+0x206>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e7c2      	b.n	800b04a <_strtod_l+0x16a>
 800b0c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0ca:	785a      	ldrb	r2, [r3, #1]
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	2a30      	cmp	r2, #48	@ 0x30
 800b0d0:	d0f8      	beq.n	800b0c4 <_strtod_l+0x1e4>
 800b0d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b0d6:	2b08      	cmp	r3, #8
 800b0d8:	f200 84d2 	bhi.w	800ba80 <_strtod_l+0xba0>
 800b0dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0de:	900a      	str	r0, [sp, #40]	@ 0x28
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	3a30      	subs	r2, #48	@ 0x30
 800b0e8:	f100 0301 	add.w	r3, r0, #1
 800b0ec:	d018      	beq.n	800b120 <_strtod_l+0x240>
 800b0ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0f0:	4419      	add	r1, r3
 800b0f2:	910a      	str	r1, [sp, #40]	@ 0x28
 800b0f4:	462e      	mov	r6, r5
 800b0f6:	f04f 0e0a 	mov.w	lr, #10
 800b0fa:	1c71      	adds	r1, r6, #1
 800b0fc:	eba1 0c05 	sub.w	ip, r1, r5
 800b100:	4563      	cmp	r3, ip
 800b102:	dc15      	bgt.n	800b130 <_strtod_l+0x250>
 800b104:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b108:	182b      	adds	r3, r5, r0
 800b10a:	2b08      	cmp	r3, #8
 800b10c:	f105 0501 	add.w	r5, r5, #1
 800b110:	4405      	add	r5, r0
 800b112:	dc1a      	bgt.n	800b14a <_strtod_l+0x26a>
 800b114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b116:	230a      	movs	r3, #10
 800b118:	fb03 2301 	mla	r3, r3, r1, r2
 800b11c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b11e:	2300      	movs	r3, #0
 800b120:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b122:	1c51      	adds	r1, r2, #1
 800b124:	9119      	str	r1, [sp, #100]	@ 0x64
 800b126:	7852      	ldrb	r2, [r2, #1]
 800b128:	4618      	mov	r0, r3
 800b12a:	e7c5      	b.n	800b0b8 <_strtod_l+0x1d8>
 800b12c:	4648      	mov	r0, r9
 800b12e:	e7ce      	b.n	800b0ce <_strtod_l+0x1ee>
 800b130:	2e08      	cmp	r6, #8
 800b132:	dc05      	bgt.n	800b140 <_strtod_l+0x260>
 800b134:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b136:	fb0e f606 	mul.w	r6, lr, r6
 800b13a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b13c:	460e      	mov	r6, r1
 800b13e:	e7dc      	b.n	800b0fa <_strtod_l+0x21a>
 800b140:	2910      	cmp	r1, #16
 800b142:	bfd8      	it	le
 800b144:	fb0e f707 	mulle.w	r7, lr, r7
 800b148:	e7f8      	b.n	800b13c <_strtod_l+0x25c>
 800b14a:	2b0f      	cmp	r3, #15
 800b14c:	bfdc      	itt	le
 800b14e:	230a      	movle	r3, #10
 800b150:	fb03 2707 	mlale	r7, r3, r7, r2
 800b154:	e7e3      	b.n	800b11e <_strtod_l+0x23e>
 800b156:	2300      	movs	r3, #0
 800b158:	930a      	str	r3, [sp, #40]	@ 0x28
 800b15a:	2301      	movs	r3, #1
 800b15c:	e77a      	b.n	800b054 <_strtod_l+0x174>
 800b15e:	f04f 0c00 	mov.w	ip, #0
 800b162:	1ca2      	adds	r2, r4, #2
 800b164:	9219      	str	r2, [sp, #100]	@ 0x64
 800b166:	78a2      	ldrb	r2, [r4, #2]
 800b168:	e782      	b.n	800b070 <_strtod_l+0x190>
 800b16a:	f04f 0c01 	mov.w	ip, #1
 800b16e:	e7f8      	b.n	800b162 <_strtod_l+0x282>
 800b170:	08014550 	.word	0x08014550
 800b174:	08014323 	.word	0x08014323
 800b178:	7ff00000 	.word	0x7ff00000
 800b17c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b17e:	1c51      	adds	r1, r2, #1
 800b180:	9119      	str	r1, [sp, #100]	@ 0x64
 800b182:	7852      	ldrb	r2, [r2, #1]
 800b184:	2a30      	cmp	r2, #48	@ 0x30
 800b186:	d0f9      	beq.n	800b17c <_strtod_l+0x29c>
 800b188:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b18c:	2908      	cmp	r1, #8
 800b18e:	f63f af75 	bhi.w	800b07c <_strtod_l+0x19c>
 800b192:	3a30      	subs	r2, #48	@ 0x30
 800b194:	9209      	str	r2, [sp, #36]	@ 0x24
 800b196:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b198:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b19a:	f04f 080a 	mov.w	r8, #10
 800b19e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b1a0:	1c56      	adds	r6, r2, #1
 800b1a2:	9619      	str	r6, [sp, #100]	@ 0x64
 800b1a4:	7852      	ldrb	r2, [r2, #1]
 800b1a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b1aa:	f1be 0f09 	cmp.w	lr, #9
 800b1ae:	d939      	bls.n	800b224 <_strtod_l+0x344>
 800b1b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b1b2:	1a76      	subs	r6, r6, r1
 800b1b4:	2e08      	cmp	r6, #8
 800b1b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b1ba:	dc03      	bgt.n	800b1c4 <_strtod_l+0x2e4>
 800b1bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1be:	4588      	cmp	r8, r1
 800b1c0:	bfa8      	it	ge
 800b1c2:	4688      	movge	r8, r1
 800b1c4:	f1bc 0f00 	cmp.w	ip, #0
 800b1c8:	d001      	beq.n	800b1ce <_strtod_l+0x2ee>
 800b1ca:	f1c8 0800 	rsb	r8, r8, #0
 800b1ce:	2d00      	cmp	r5, #0
 800b1d0:	d14e      	bne.n	800b270 <_strtod_l+0x390>
 800b1d2:	9908      	ldr	r1, [sp, #32]
 800b1d4:	4308      	orrs	r0, r1
 800b1d6:	f47f aebc 	bne.w	800af52 <_strtod_l+0x72>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f47f aed4 	bne.w	800af88 <_strtod_l+0xa8>
 800b1e0:	2a69      	cmp	r2, #105	@ 0x69
 800b1e2:	d028      	beq.n	800b236 <_strtod_l+0x356>
 800b1e4:	dc25      	bgt.n	800b232 <_strtod_l+0x352>
 800b1e6:	2a49      	cmp	r2, #73	@ 0x49
 800b1e8:	d025      	beq.n	800b236 <_strtod_l+0x356>
 800b1ea:	2a4e      	cmp	r2, #78	@ 0x4e
 800b1ec:	f47f aecc 	bne.w	800af88 <_strtod_l+0xa8>
 800b1f0:	499a      	ldr	r1, [pc, #616]	@ (800b45c <_strtod_l+0x57c>)
 800b1f2:	a819      	add	r0, sp, #100	@ 0x64
 800b1f4:	f002 ff48 	bl	800e088 <__match>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	f43f aec5 	beq.w	800af88 <_strtod_l+0xa8>
 800b1fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	2b28      	cmp	r3, #40	@ 0x28
 800b204:	d12e      	bne.n	800b264 <_strtod_l+0x384>
 800b206:	4996      	ldr	r1, [pc, #600]	@ (800b460 <_strtod_l+0x580>)
 800b208:	aa1c      	add	r2, sp, #112	@ 0x70
 800b20a:	a819      	add	r0, sp, #100	@ 0x64
 800b20c:	f002 ff50 	bl	800e0b0 <__hexnan>
 800b210:	2805      	cmp	r0, #5
 800b212:	d127      	bne.n	800b264 <_strtod_l+0x384>
 800b214:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b216:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b21a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b21e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b222:	e696      	b.n	800af52 <_strtod_l+0x72>
 800b224:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b226:	fb08 2101 	mla	r1, r8, r1, r2
 800b22a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b22e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b230:	e7b5      	b.n	800b19e <_strtod_l+0x2be>
 800b232:	2a6e      	cmp	r2, #110	@ 0x6e
 800b234:	e7da      	b.n	800b1ec <_strtod_l+0x30c>
 800b236:	498b      	ldr	r1, [pc, #556]	@ (800b464 <_strtod_l+0x584>)
 800b238:	a819      	add	r0, sp, #100	@ 0x64
 800b23a:	f002 ff25 	bl	800e088 <__match>
 800b23e:	2800      	cmp	r0, #0
 800b240:	f43f aea2 	beq.w	800af88 <_strtod_l+0xa8>
 800b244:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b246:	4988      	ldr	r1, [pc, #544]	@ (800b468 <_strtod_l+0x588>)
 800b248:	3b01      	subs	r3, #1
 800b24a:	a819      	add	r0, sp, #100	@ 0x64
 800b24c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b24e:	f002 ff1b 	bl	800e088 <__match>
 800b252:	b910      	cbnz	r0, 800b25a <_strtod_l+0x37a>
 800b254:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b256:	3301      	adds	r3, #1
 800b258:	9319      	str	r3, [sp, #100]	@ 0x64
 800b25a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b478 <_strtod_l+0x598>
 800b25e:	f04f 0a00 	mov.w	sl, #0
 800b262:	e676      	b.n	800af52 <_strtod_l+0x72>
 800b264:	4881      	ldr	r0, [pc, #516]	@ (800b46c <_strtod_l+0x58c>)
 800b266:	f001 fdb7 	bl	800cdd8 <nan>
 800b26a:	ec5b ab10 	vmov	sl, fp, d0
 800b26e:	e670      	b.n	800af52 <_strtod_l+0x72>
 800b270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b272:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b274:	eba8 0303 	sub.w	r3, r8, r3
 800b278:	f1b9 0f00 	cmp.w	r9, #0
 800b27c:	bf08      	it	eq
 800b27e:	46a9      	moveq	r9, r5
 800b280:	2d10      	cmp	r5, #16
 800b282:	9309      	str	r3, [sp, #36]	@ 0x24
 800b284:	462c      	mov	r4, r5
 800b286:	bfa8      	it	ge
 800b288:	2410      	movge	r4, #16
 800b28a:	f7f5 f94b 	bl	8000524 <__aeabi_ui2d>
 800b28e:	2d09      	cmp	r5, #9
 800b290:	4682      	mov	sl, r0
 800b292:	468b      	mov	fp, r1
 800b294:	dc13      	bgt.n	800b2be <_strtod_l+0x3de>
 800b296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f43f ae5a 	beq.w	800af52 <_strtod_l+0x72>
 800b29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2a0:	dd78      	ble.n	800b394 <_strtod_l+0x4b4>
 800b2a2:	2b16      	cmp	r3, #22
 800b2a4:	dc5f      	bgt.n	800b366 <_strtod_l+0x486>
 800b2a6:	4972      	ldr	r1, [pc, #456]	@ (800b470 <_strtod_l+0x590>)
 800b2a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	465b      	mov	r3, fp
 800b2b4:	f7f5 f9b0 	bl	8000618 <__aeabi_dmul>
 800b2b8:	4682      	mov	sl, r0
 800b2ba:	468b      	mov	fp, r1
 800b2bc:	e649      	b.n	800af52 <_strtod_l+0x72>
 800b2be:	4b6c      	ldr	r3, [pc, #432]	@ (800b470 <_strtod_l+0x590>)
 800b2c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b2c8:	f7f5 f9a6 	bl	8000618 <__aeabi_dmul>
 800b2cc:	4682      	mov	sl, r0
 800b2ce:	4638      	mov	r0, r7
 800b2d0:	468b      	mov	fp, r1
 800b2d2:	f7f5 f927 	bl	8000524 <__aeabi_ui2d>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4650      	mov	r0, sl
 800b2dc:	4659      	mov	r1, fp
 800b2de:	f7f4 ffe5 	bl	80002ac <__adddf3>
 800b2e2:	2d0f      	cmp	r5, #15
 800b2e4:	4682      	mov	sl, r0
 800b2e6:	468b      	mov	fp, r1
 800b2e8:	ddd5      	ble.n	800b296 <_strtod_l+0x3b6>
 800b2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2ec:	1b2c      	subs	r4, r5, r4
 800b2ee:	441c      	add	r4, r3
 800b2f0:	2c00      	cmp	r4, #0
 800b2f2:	f340 8093 	ble.w	800b41c <_strtod_l+0x53c>
 800b2f6:	f014 030f 	ands.w	r3, r4, #15
 800b2fa:	d00a      	beq.n	800b312 <_strtod_l+0x432>
 800b2fc:	495c      	ldr	r1, [pc, #368]	@ (800b470 <_strtod_l+0x590>)
 800b2fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b302:	4652      	mov	r2, sl
 800b304:	465b      	mov	r3, fp
 800b306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b30a:	f7f5 f985 	bl	8000618 <__aeabi_dmul>
 800b30e:	4682      	mov	sl, r0
 800b310:	468b      	mov	fp, r1
 800b312:	f034 040f 	bics.w	r4, r4, #15
 800b316:	d073      	beq.n	800b400 <_strtod_l+0x520>
 800b318:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b31c:	dd49      	ble.n	800b3b2 <_strtod_l+0x4d2>
 800b31e:	2400      	movs	r4, #0
 800b320:	46a0      	mov	r8, r4
 800b322:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b324:	46a1      	mov	r9, r4
 800b326:	9a05      	ldr	r2, [sp, #20]
 800b328:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b478 <_strtod_l+0x598>
 800b32c:	2322      	movs	r3, #34	@ 0x22
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	f04f 0a00 	mov.w	sl, #0
 800b334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b336:	2b00      	cmp	r3, #0
 800b338:	f43f ae0b 	beq.w	800af52 <_strtod_l+0x72>
 800b33c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b33e:	9805      	ldr	r0, [sp, #20]
 800b340:	f002 ffa4 	bl	800e28c <_Bfree>
 800b344:	9805      	ldr	r0, [sp, #20]
 800b346:	4649      	mov	r1, r9
 800b348:	f002 ffa0 	bl	800e28c <_Bfree>
 800b34c:	9805      	ldr	r0, [sp, #20]
 800b34e:	4641      	mov	r1, r8
 800b350:	f002 ff9c 	bl	800e28c <_Bfree>
 800b354:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b356:	9805      	ldr	r0, [sp, #20]
 800b358:	f002 ff98 	bl	800e28c <_Bfree>
 800b35c:	9805      	ldr	r0, [sp, #20]
 800b35e:	4621      	mov	r1, r4
 800b360:	f002 ff94 	bl	800e28c <_Bfree>
 800b364:	e5f5      	b.n	800af52 <_strtod_l+0x72>
 800b366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b368:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b36c:	4293      	cmp	r3, r2
 800b36e:	dbbc      	blt.n	800b2ea <_strtod_l+0x40a>
 800b370:	4c3f      	ldr	r4, [pc, #252]	@ (800b470 <_strtod_l+0x590>)
 800b372:	f1c5 050f 	rsb	r5, r5, #15
 800b376:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b37a:	4652      	mov	r2, sl
 800b37c:	465b      	mov	r3, fp
 800b37e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b382:	f7f5 f949 	bl	8000618 <__aeabi_dmul>
 800b386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b388:	1b5d      	subs	r5, r3, r5
 800b38a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b38e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b392:	e78f      	b.n	800b2b4 <_strtod_l+0x3d4>
 800b394:	3316      	adds	r3, #22
 800b396:	dba8      	blt.n	800b2ea <_strtod_l+0x40a>
 800b398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b39a:	eba3 0808 	sub.w	r8, r3, r8
 800b39e:	4b34      	ldr	r3, [pc, #208]	@ (800b470 <_strtod_l+0x590>)
 800b3a0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b3a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b3a8:	4650      	mov	r0, sl
 800b3aa:	4659      	mov	r1, fp
 800b3ac:	f7f5 fa5e 	bl	800086c <__aeabi_ddiv>
 800b3b0:	e782      	b.n	800b2b8 <_strtod_l+0x3d8>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4f2f      	ldr	r7, [pc, #188]	@ (800b474 <_strtod_l+0x594>)
 800b3b6:	1124      	asrs	r4, r4, #4
 800b3b8:	4650      	mov	r0, sl
 800b3ba:	4659      	mov	r1, fp
 800b3bc:	461e      	mov	r6, r3
 800b3be:	2c01      	cmp	r4, #1
 800b3c0:	dc21      	bgt.n	800b406 <_strtod_l+0x526>
 800b3c2:	b10b      	cbz	r3, 800b3c8 <_strtod_l+0x4e8>
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	468b      	mov	fp, r1
 800b3c8:	492a      	ldr	r1, [pc, #168]	@ (800b474 <_strtod_l+0x594>)
 800b3ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b3ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b3d2:	4652      	mov	r2, sl
 800b3d4:	465b      	mov	r3, fp
 800b3d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3da:	f7f5 f91d 	bl	8000618 <__aeabi_dmul>
 800b3de:	4b26      	ldr	r3, [pc, #152]	@ (800b478 <_strtod_l+0x598>)
 800b3e0:	460a      	mov	r2, r1
 800b3e2:	400b      	ands	r3, r1
 800b3e4:	4925      	ldr	r1, [pc, #148]	@ (800b47c <_strtod_l+0x59c>)
 800b3e6:	428b      	cmp	r3, r1
 800b3e8:	4682      	mov	sl, r0
 800b3ea:	d898      	bhi.n	800b31e <_strtod_l+0x43e>
 800b3ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b3f0:	428b      	cmp	r3, r1
 800b3f2:	bf86      	itte	hi
 800b3f4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b480 <_strtod_l+0x5a0>
 800b3f8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b3fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b400:	2300      	movs	r3, #0
 800b402:	9308      	str	r3, [sp, #32]
 800b404:	e076      	b.n	800b4f4 <_strtod_l+0x614>
 800b406:	07e2      	lsls	r2, r4, #31
 800b408:	d504      	bpl.n	800b414 <_strtod_l+0x534>
 800b40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b40e:	f7f5 f903 	bl	8000618 <__aeabi_dmul>
 800b412:	2301      	movs	r3, #1
 800b414:	3601      	adds	r6, #1
 800b416:	1064      	asrs	r4, r4, #1
 800b418:	3708      	adds	r7, #8
 800b41a:	e7d0      	b.n	800b3be <_strtod_l+0x4de>
 800b41c:	d0f0      	beq.n	800b400 <_strtod_l+0x520>
 800b41e:	4264      	negs	r4, r4
 800b420:	f014 020f 	ands.w	r2, r4, #15
 800b424:	d00a      	beq.n	800b43c <_strtod_l+0x55c>
 800b426:	4b12      	ldr	r3, [pc, #72]	@ (800b470 <_strtod_l+0x590>)
 800b428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b42c:	4650      	mov	r0, sl
 800b42e:	4659      	mov	r1, fp
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	f7f5 fa1a 	bl	800086c <__aeabi_ddiv>
 800b438:	4682      	mov	sl, r0
 800b43a:	468b      	mov	fp, r1
 800b43c:	1124      	asrs	r4, r4, #4
 800b43e:	d0df      	beq.n	800b400 <_strtod_l+0x520>
 800b440:	2c1f      	cmp	r4, #31
 800b442:	dd1f      	ble.n	800b484 <_strtod_l+0x5a4>
 800b444:	2400      	movs	r4, #0
 800b446:	46a0      	mov	r8, r4
 800b448:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b44a:	46a1      	mov	r9, r4
 800b44c:	9a05      	ldr	r2, [sp, #20]
 800b44e:	2322      	movs	r3, #34	@ 0x22
 800b450:	f04f 0a00 	mov.w	sl, #0
 800b454:	f04f 0b00 	mov.w	fp, #0
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	e76b      	b.n	800b334 <_strtod_l+0x454>
 800b45c:	08014332 	.word	0x08014332
 800b460:	0801453c 	.word	0x0801453c
 800b464:	0801432a 	.word	0x0801432a
 800b468:	080143ff 	.word	0x080143ff
 800b46c:	080143fb 	.word	0x080143fb
 800b470:	080146c8 	.word	0x080146c8
 800b474:	080146a0 	.word	0x080146a0
 800b478:	7ff00000 	.word	0x7ff00000
 800b47c:	7ca00000 	.word	0x7ca00000
 800b480:	7fefffff 	.word	0x7fefffff
 800b484:	f014 0310 	ands.w	r3, r4, #16
 800b488:	bf18      	it	ne
 800b48a:	236a      	movne	r3, #106	@ 0x6a
 800b48c:	4ea9      	ldr	r6, [pc, #676]	@ (800b734 <_strtod_l+0x854>)
 800b48e:	9308      	str	r3, [sp, #32]
 800b490:	4650      	mov	r0, sl
 800b492:	4659      	mov	r1, fp
 800b494:	2300      	movs	r3, #0
 800b496:	07e7      	lsls	r7, r4, #31
 800b498:	d504      	bpl.n	800b4a4 <_strtod_l+0x5c4>
 800b49a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b49e:	f7f5 f8bb 	bl	8000618 <__aeabi_dmul>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	1064      	asrs	r4, r4, #1
 800b4a6:	f106 0608 	add.w	r6, r6, #8
 800b4aa:	d1f4      	bne.n	800b496 <_strtod_l+0x5b6>
 800b4ac:	b10b      	cbz	r3, 800b4b2 <_strtod_l+0x5d2>
 800b4ae:	4682      	mov	sl, r0
 800b4b0:	468b      	mov	fp, r1
 800b4b2:	9b08      	ldr	r3, [sp, #32]
 800b4b4:	b1b3      	cbz	r3, 800b4e4 <_strtod_l+0x604>
 800b4b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b4ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	4659      	mov	r1, fp
 800b4c2:	dd0f      	ble.n	800b4e4 <_strtod_l+0x604>
 800b4c4:	2b1f      	cmp	r3, #31
 800b4c6:	dd56      	ble.n	800b576 <_strtod_l+0x696>
 800b4c8:	2b34      	cmp	r3, #52	@ 0x34
 800b4ca:	bfde      	ittt	le
 800b4cc:	f04f 33ff 	movle.w	r3, #4294967295
 800b4d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b4d4:	4093      	lslle	r3, r2
 800b4d6:	f04f 0a00 	mov.w	sl, #0
 800b4da:	bfcc      	ite	gt
 800b4dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b4e0:	ea03 0b01 	andle.w	fp, r3, r1
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	4650      	mov	r0, sl
 800b4ea:	4659      	mov	r1, fp
 800b4ec:	f7f5 fafc 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d1a7      	bne.n	800b444 <_strtod_l+0x564>
 800b4f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b4fa:	9805      	ldr	r0, [sp, #20]
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	464a      	mov	r2, r9
 800b500:	f002 ff2c 	bl	800e35c <__s2b>
 800b504:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b506:	2800      	cmp	r0, #0
 800b508:	f43f af09 	beq.w	800b31e <_strtod_l+0x43e>
 800b50c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b50e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b510:	2a00      	cmp	r2, #0
 800b512:	eba3 0308 	sub.w	r3, r3, r8
 800b516:	bfa8      	it	ge
 800b518:	2300      	movge	r3, #0
 800b51a:	9312      	str	r3, [sp, #72]	@ 0x48
 800b51c:	2400      	movs	r4, #0
 800b51e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b522:	9316      	str	r3, [sp, #88]	@ 0x58
 800b524:	46a0      	mov	r8, r4
 800b526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b528:	9805      	ldr	r0, [sp, #20]
 800b52a:	6859      	ldr	r1, [r3, #4]
 800b52c:	f002 fe6e 	bl	800e20c <_Balloc>
 800b530:	4681      	mov	r9, r0
 800b532:	2800      	cmp	r0, #0
 800b534:	f43f aef7 	beq.w	800b326 <_strtod_l+0x446>
 800b538:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b53a:	691a      	ldr	r2, [r3, #16]
 800b53c:	3202      	adds	r2, #2
 800b53e:	f103 010c 	add.w	r1, r3, #12
 800b542:	0092      	lsls	r2, r2, #2
 800b544:	300c      	adds	r0, #12
 800b546:	f001 fc38 	bl	800cdba <memcpy>
 800b54a:	ec4b ab10 	vmov	d0, sl, fp
 800b54e:	9805      	ldr	r0, [sp, #20]
 800b550:	aa1c      	add	r2, sp, #112	@ 0x70
 800b552:	a91b      	add	r1, sp, #108	@ 0x6c
 800b554:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b558:	f003 fa34 	bl	800e9c4 <__d2b>
 800b55c:	901a      	str	r0, [sp, #104]	@ 0x68
 800b55e:	2800      	cmp	r0, #0
 800b560:	f43f aee1 	beq.w	800b326 <_strtod_l+0x446>
 800b564:	9805      	ldr	r0, [sp, #20]
 800b566:	2101      	movs	r1, #1
 800b568:	f002 ff8e 	bl	800e488 <__i2b>
 800b56c:	4680      	mov	r8, r0
 800b56e:	b948      	cbnz	r0, 800b584 <_strtod_l+0x6a4>
 800b570:	f04f 0800 	mov.w	r8, #0
 800b574:	e6d7      	b.n	800b326 <_strtod_l+0x446>
 800b576:	f04f 32ff 	mov.w	r2, #4294967295
 800b57a:	fa02 f303 	lsl.w	r3, r2, r3
 800b57e:	ea03 0a0a 	and.w	sl, r3, sl
 800b582:	e7af      	b.n	800b4e4 <_strtod_l+0x604>
 800b584:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b586:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b588:	2d00      	cmp	r5, #0
 800b58a:	bfab      	itete	ge
 800b58c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b58e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b590:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b592:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b594:	bfac      	ite	ge
 800b596:	18ef      	addge	r7, r5, r3
 800b598:	1b5e      	sublt	r6, r3, r5
 800b59a:	9b08      	ldr	r3, [sp, #32]
 800b59c:	1aed      	subs	r5, r5, r3
 800b59e:	4415      	add	r5, r2
 800b5a0:	4b65      	ldr	r3, [pc, #404]	@ (800b738 <_strtod_l+0x858>)
 800b5a2:	3d01      	subs	r5, #1
 800b5a4:	429d      	cmp	r5, r3
 800b5a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b5aa:	da50      	bge.n	800b64e <_strtod_l+0x76e>
 800b5ac:	1b5b      	subs	r3, r3, r5
 800b5ae:	2b1f      	cmp	r3, #31
 800b5b0:	eba2 0203 	sub.w	r2, r2, r3
 800b5b4:	f04f 0101 	mov.w	r1, #1
 800b5b8:	dc3d      	bgt.n	800b636 <_strtod_l+0x756>
 800b5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b5be:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b5c4:	18bd      	adds	r5, r7, r2
 800b5c6:	9b08      	ldr	r3, [sp, #32]
 800b5c8:	42af      	cmp	r7, r5
 800b5ca:	4416      	add	r6, r2
 800b5cc:	441e      	add	r6, r3
 800b5ce:	463b      	mov	r3, r7
 800b5d0:	bfa8      	it	ge
 800b5d2:	462b      	movge	r3, r5
 800b5d4:	42b3      	cmp	r3, r6
 800b5d6:	bfa8      	it	ge
 800b5d8:	4633      	movge	r3, r6
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	bfc2      	ittt	gt
 800b5de:	1aed      	subgt	r5, r5, r3
 800b5e0:	1af6      	subgt	r6, r6, r3
 800b5e2:	1aff      	subgt	r7, r7, r3
 800b5e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	dd16      	ble.n	800b618 <_strtod_l+0x738>
 800b5ea:	4641      	mov	r1, r8
 800b5ec:	9805      	ldr	r0, [sp, #20]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	f003 f802 	bl	800e5f8 <__pow5mult>
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d0ba      	beq.n	800b570 <_strtod_l+0x690>
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b5fe:	9805      	ldr	r0, [sp, #20]
 800b600:	f002 ff58 	bl	800e4b4 <__multiply>
 800b604:	900a      	str	r0, [sp, #40]	@ 0x28
 800b606:	2800      	cmp	r0, #0
 800b608:	f43f ae8d 	beq.w	800b326 <_strtod_l+0x446>
 800b60c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b60e:	9805      	ldr	r0, [sp, #20]
 800b610:	f002 fe3c 	bl	800e28c <_Bfree>
 800b614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b616:	931a      	str	r3, [sp, #104]	@ 0x68
 800b618:	2d00      	cmp	r5, #0
 800b61a:	dc1d      	bgt.n	800b658 <_strtod_l+0x778>
 800b61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b61e:	2b00      	cmp	r3, #0
 800b620:	dd23      	ble.n	800b66a <_strtod_l+0x78a>
 800b622:	4649      	mov	r1, r9
 800b624:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b626:	9805      	ldr	r0, [sp, #20]
 800b628:	f002 ffe6 	bl	800e5f8 <__pow5mult>
 800b62c:	4681      	mov	r9, r0
 800b62e:	b9e0      	cbnz	r0, 800b66a <_strtod_l+0x78a>
 800b630:	f04f 0900 	mov.w	r9, #0
 800b634:	e677      	b.n	800b326 <_strtod_l+0x446>
 800b636:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b63a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b63e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b642:	35e2      	adds	r5, #226	@ 0xe2
 800b644:	fa01 f305 	lsl.w	r3, r1, r5
 800b648:	9310      	str	r3, [sp, #64]	@ 0x40
 800b64a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b64c:	e7ba      	b.n	800b5c4 <_strtod_l+0x6e4>
 800b64e:	2300      	movs	r3, #0
 800b650:	9310      	str	r3, [sp, #64]	@ 0x40
 800b652:	2301      	movs	r3, #1
 800b654:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b656:	e7b5      	b.n	800b5c4 <_strtod_l+0x6e4>
 800b658:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b65a:	9805      	ldr	r0, [sp, #20]
 800b65c:	462a      	mov	r2, r5
 800b65e:	f003 f825 	bl	800e6ac <__lshift>
 800b662:	901a      	str	r0, [sp, #104]	@ 0x68
 800b664:	2800      	cmp	r0, #0
 800b666:	d1d9      	bne.n	800b61c <_strtod_l+0x73c>
 800b668:	e65d      	b.n	800b326 <_strtod_l+0x446>
 800b66a:	2e00      	cmp	r6, #0
 800b66c:	dd07      	ble.n	800b67e <_strtod_l+0x79e>
 800b66e:	4649      	mov	r1, r9
 800b670:	9805      	ldr	r0, [sp, #20]
 800b672:	4632      	mov	r2, r6
 800b674:	f003 f81a 	bl	800e6ac <__lshift>
 800b678:	4681      	mov	r9, r0
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d0d8      	beq.n	800b630 <_strtod_l+0x750>
 800b67e:	2f00      	cmp	r7, #0
 800b680:	dd08      	ble.n	800b694 <_strtod_l+0x7b4>
 800b682:	4641      	mov	r1, r8
 800b684:	9805      	ldr	r0, [sp, #20]
 800b686:	463a      	mov	r2, r7
 800b688:	f003 f810 	bl	800e6ac <__lshift>
 800b68c:	4680      	mov	r8, r0
 800b68e:	2800      	cmp	r0, #0
 800b690:	f43f ae49 	beq.w	800b326 <_strtod_l+0x446>
 800b694:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b696:	9805      	ldr	r0, [sp, #20]
 800b698:	464a      	mov	r2, r9
 800b69a:	f003 f88f 	bl	800e7bc <__mdiff>
 800b69e:	4604      	mov	r4, r0
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	f43f ae40 	beq.w	800b326 <_strtod_l+0x446>
 800b6a6:	68c3      	ldr	r3, [r0, #12]
 800b6a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	60c3      	str	r3, [r0, #12]
 800b6ae:	4641      	mov	r1, r8
 800b6b0:	f003 f868 	bl	800e784 <__mcmp>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	da45      	bge.n	800b744 <_strtod_l+0x864>
 800b6b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ba:	ea53 030a 	orrs.w	r3, r3, sl
 800b6be:	d16b      	bne.n	800b798 <_strtod_l+0x8b8>
 800b6c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d167      	bne.n	800b798 <_strtod_l+0x8b8>
 800b6c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6cc:	0d1b      	lsrs	r3, r3, #20
 800b6ce:	051b      	lsls	r3, r3, #20
 800b6d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b6d4:	d960      	bls.n	800b798 <_strtod_l+0x8b8>
 800b6d6:	6963      	ldr	r3, [r4, #20]
 800b6d8:	b913      	cbnz	r3, 800b6e0 <_strtod_l+0x800>
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	dd5b      	ble.n	800b798 <_strtod_l+0x8b8>
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	9805      	ldr	r0, [sp, #20]
 800b6e6:	f002 ffe1 	bl	800e6ac <__lshift>
 800b6ea:	4641      	mov	r1, r8
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	f003 f849 	bl	800e784 <__mcmp>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	dd50      	ble.n	800b798 <_strtod_l+0x8b8>
 800b6f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6fa:	9a08      	ldr	r2, [sp, #32]
 800b6fc:	0d1b      	lsrs	r3, r3, #20
 800b6fe:	051b      	lsls	r3, r3, #20
 800b700:	2a00      	cmp	r2, #0
 800b702:	d06a      	beq.n	800b7da <_strtod_l+0x8fa>
 800b704:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b708:	d867      	bhi.n	800b7da <_strtod_l+0x8fa>
 800b70a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b70e:	f67f ae9d 	bls.w	800b44c <_strtod_l+0x56c>
 800b712:	4b0a      	ldr	r3, [pc, #40]	@ (800b73c <_strtod_l+0x85c>)
 800b714:	4650      	mov	r0, sl
 800b716:	4659      	mov	r1, fp
 800b718:	2200      	movs	r2, #0
 800b71a:	f7f4 ff7d 	bl	8000618 <__aeabi_dmul>
 800b71e:	4b08      	ldr	r3, [pc, #32]	@ (800b740 <_strtod_l+0x860>)
 800b720:	400b      	ands	r3, r1
 800b722:	4682      	mov	sl, r0
 800b724:	468b      	mov	fp, r1
 800b726:	2b00      	cmp	r3, #0
 800b728:	f47f ae08 	bne.w	800b33c <_strtod_l+0x45c>
 800b72c:	9a05      	ldr	r2, [sp, #20]
 800b72e:	2322      	movs	r3, #34	@ 0x22
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	e603      	b.n	800b33c <_strtod_l+0x45c>
 800b734:	08014568 	.word	0x08014568
 800b738:	fffffc02 	.word	0xfffffc02
 800b73c:	39500000 	.word	0x39500000
 800b740:	7ff00000 	.word	0x7ff00000
 800b744:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b748:	d165      	bne.n	800b816 <_strtod_l+0x936>
 800b74a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b74c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b750:	b35a      	cbz	r2, 800b7aa <_strtod_l+0x8ca>
 800b752:	4a9f      	ldr	r2, [pc, #636]	@ (800b9d0 <_strtod_l+0xaf0>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d12b      	bne.n	800b7b0 <_strtod_l+0x8d0>
 800b758:	9b08      	ldr	r3, [sp, #32]
 800b75a:	4651      	mov	r1, sl
 800b75c:	b303      	cbz	r3, 800b7a0 <_strtod_l+0x8c0>
 800b75e:	4b9d      	ldr	r3, [pc, #628]	@ (800b9d4 <_strtod_l+0xaf4>)
 800b760:	465a      	mov	r2, fp
 800b762:	4013      	ands	r3, r2
 800b764:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b768:	f04f 32ff 	mov.w	r2, #4294967295
 800b76c:	d81b      	bhi.n	800b7a6 <_strtod_l+0x8c6>
 800b76e:	0d1b      	lsrs	r3, r3, #20
 800b770:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b774:	fa02 f303 	lsl.w	r3, r2, r3
 800b778:	4299      	cmp	r1, r3
 800b77a:	d119      	bne.n	800b7b0 <_strtod_l+0x8d0>
 800b77c:	4b96      	ldr	r3, [pc, #600]	@ (800b9d8 <_strtod_l+0xaf8>)
 800b77e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b780:	429a      	cmp	r2, r3
 800b782:	d102      	bne.n	800b78a <_strtod_l+0x8aa>
 800b784:	3101      	adds	r1, #1
 800b786:	f43f adce 	beq.w	800b326 <_strtod_l+0x446>
 800b78a:	4b92      	ldr	r3, [pc, #584]	@ (800b9d4 <_strtod_l+0xaf4>)
 800b78c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b78e:	401a      	ands	r2, r3
 800b790:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b794:	f04f 0a00 	mov.w	sl, #0
 800b798:	9b08      	ldr	r3, [sp, #32]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1b9      	bne.n	800b712 <_strtod_l+0x832>
 800b79e:	e5cd      	b.n	800b33c <_strtod_l+0x45c>
 800b7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a4:	e7e8      	b.n	800b778 <_strtod_l+0x898>
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	e7e6      	b.n	800b778 <_strtod_l+0x898>
 800b7aa:	ea53 030a 	orrs.w	r3, r3, sl
 800b7ae:	d0a2      	beq.n	800b6f6 <_strtod_l+0x816>
 800b7b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b7b2:	b1db      	cbz	r3, 800b7ec <_strtod_l+0x90c>
 800b7b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b7b6:	4213      	tst	r3, r2
 800b7b8:	d0ee      	beq.n	800b798 <_strtod_l+0x8b8>
 800b7ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7bc:	9a08      	ldr	r2, [sp, #32]
 800b7be:	4650      	mov	r0, sl
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	b1bb      	cbz	r3, 800b7f4 <_strtod_l+0x914>
 800b7c4:	f7ff fb6e 	bl	800aea4 <sulp>
 800b7c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7cc:	ec53 2b10 	vmov	r2, r3, d0
 800b7d0:	f7f4 fd6c 	bl	80002ac <__adddf3>
 800b7d4:	4682      	mov	sl, r0
 800b7d6:	468b      	mov	fp, r1
 800b7d8:	e7de      	b.n	800b798 <_strtod_l+0x8b8>
 800b7da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b7de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7e6:	f04f 3aff 	mov.w	sl, #4294967295
 800b7ea:	e7d5      	b.n	800b798 <_strtod_l+0x8b8>
 800b7ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b7ee:	ea13 0f0a 	tst.w	r3, sl
 800b7f2:	e7e1      	b.n	800b7b8 <_strtod_l+0x8d8>
 800b7f4:	f7ff fb56 	bl	800aea4 <sulp>
 800b7f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7fc:	ec53 2b10 	vmov	r2, r3, d0
 800b800:	f7f4 fd52 	bl	80002a8 <__aeabi_dsub>
 800b804:	2200      	movs	r2, #0
 800b806:	2300      	movs	r3, #0
 800b808:	4682      	mov	sl, r0
 800b80a:	468b      	mov	fp, r1
 800b80c:	f7f5 f96c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b810:	2800      	cmp	r0, #0
 800b812:	d0c1      	beq.n	800b798 <_strtod_l+0x8b8>
 800b814:	e61a      	b.n	800b44c <_strtod_l+0x56c>
 800b816:	4641      	mov	r1, r8
 800b818:	4620      	mov	r0, r4
 800b81a:	f003 f92b 	bl	800ea74 <__ratio>
 800b81e:	ec57 6b10 	vmov	r6, r7, d0
 800b822:	2200      	movs	r2, #0
 800b824:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b828:	4630      	mov	r0, r6
 800b82a:	4639      	mov	r1, r7
 800b82c:	f7f5 f970 	bl	8000b10 <__aeabi_dcmple>
 800b830:	2800      	cmp	r0, #0
 800b832:	d06f      	beq.n	800b914 <_strtod_l+0xa34>
 800b834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d17a      	bne.n	800b930 <_strtod_l+0xa50>
 800b83a:	f1ba 0f00 	cmp.w	sl, #0
 800b83e:	d158      	bne.n	800b8f2 <_strtod_l+0xa12>
 800b840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b846:	2b00      	cmp	r3, #0
 800b848:	d15a      	bne.n	800b900 <_strtod_l+0xa20>
 800b84a:	4b64      	ldr	r3, [pc, #400]	@ (800b9dc <_strtod_l+0xafc>)
 800b84c:	2200      	movs	r2, #0
 800b84e:	4630      	mov	r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	f7f5 f953 	bl	8000afc <__aeabi_dcmplt>
 800b856:	2800      	cmp	r0, #0
 800b858:	d159      	bne.n	800b90e <_strtod_l+0xa2e>
 800b85a:	4630      	mov	r0, r6
 800b85c:	4639      	mov	r1, r7
 800b85e:	4b60      	ldr	r3, [pc, #384]	@ (800b9e0 <_strtod_l+0xb00>)
 800b860:	2200      	movs	r2, #0
 800b862:	f7f4 fed9 	bl	8000618 <__aeabi_dmul>
 800b866:	4606      	mov	r6, r0
 800b868:	460f      	mov	r7, r1
 800b86a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b86e:	9606      	str	r6, [sp, #24]
 800b870:	9307      	str	r3, [sp, #28]
 800b872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b876:	4d57      	ldr	r5, [pc, #348]	@ (800b9d4 <_strtod_l+0xaf4>)
 800b878:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b87c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b87e:	401d      	ands	r5, r3
 800b880:	4b58      	ldr	r3, [pc, #352]	@ (800b9e4 <_strtod_l+0xb04>)
 800b882:	429d      	cmp	r5, r3
 800b884:	f040 80b2 	bne.w	800b9ec <_strtod_l+0xb0c>
 800b888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b88a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b88e:	ec4b ab10 	vmov	d0, sl, fp
 800b892:	f003 f827 	bl	800e8e4 <__ulp>
 800b896:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b89a:	ec51 0b10 	vmov	r0, r1, d0
 800b89e:	f7f4 febb 	bl	8000618 <__aeabi_dmul>
 800b8a2:	4652      	mov	r2, sl
 800b8a4:	465b      	mov	r3, fp
 800b8a6:	f7f4 fd01 	bl	80002ac <__adddf3>
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4949      	ldr	r1, [pc, #292]	@ (800b9d4 <_strtod_l+0xaf4>)
 800b8ae:	4a4e      	ldr	r2, [pc, #312]	@ (800b9e8 <_strtod_l+0xb08>)
 800b8b0:	4019      	ands	r1, r3
 800b8b2:	4291      	cmp	r1, r2
 800b8b4:	4682      	mov	sl, r0
 800b8b6:	d942      	bls.n	800b93e <_strtod_l+0xa5e>
 800b8b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8ba:	4b47      	ldr	r3, [pc, #284]	@ (800b9d8 <_strtod_l+0xaf8>)
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d103      	bne.n	800b8c8 <_strtod_l+0x9e8>
 800b8c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	f43f ad2f 	beq.w	800b326 <_strtod_l+0x446>
 800b8c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b9d8 <_strtod_l+0xaf8>
 800b8cc:	f04f 3aff 	mov.w	sl, #4294967295
 800b8d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8d2:	9805      	ldr	r0, [sp, #20]
 800b8d4:	f002 fcda 	bl	800e28c <_Bfree>
 800b8d8:	9805      	ldr	r0, [sp, #20]
 800b8da:	4649      	mov	r1, r9
 800b8dc:	f002 fcd6 	bl	800e28c <_Bfree>
 800b8e0:	9805      	ldr	r0, [sp, #20]
 800b8e2:	4641      	mov	r1, r8
 800b8e4:	f002 fcd2 	bl	800e28c <_Bfree>
 800b8e8:	9805      	ldr	r0, [sp, #20]
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	f002 fcce 	bl	800e28c <_Bfree>
 800b8f0:	e619      	b.n	800b526 <_strtod_l+0x646>
 800b8f2:	f1ba 0f01 	cmp.w	sl, #1
 800b8f6:	d103      	bne.n	800b900 <_strtod_l+0xa20>
 800b8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f43f ada6 	beq.w	800b44c <_strtod_l+0x56c>
 800b900:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b9b0 <_strtod_l+0xad0>
 800b904:	4f35      	ldr	r7, [pc, #212]	@ (800b9dc <_strtod_l+0xafc>)
 800b906:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b90a:	2600      	movs	r6, #0
 800b90c:	e7b1      	b.n	800b872 <_strtod_l+0x992>
 800b90e:	4f34      	ldr	r7, [pc, #208]	@ (800b9e0 <_strtod_l+0xb00>)
 800b910:	2600      	movs	r6, #0
 800b912:	e7aa      	b.n	800b86a <_strtod_l+0x98a>
 800b914:	4b32      	ldr	r3, [pc, #200]	@ (800b9e0 <_strtod_l+0xb00>)
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	2200      	movs	r2, #0
 800b91c:	f7f4 fe7c 	bl	8000618 <__aeabi_dmul>
 800b920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b922:	4606      	mov	r6, r0
 800b924:	460f      	mov	r7, r1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d09f      	beq.n	800b86a <_strtod_l+0x98a>
 800b92a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b92e:	e7a0      	b.n	800b872 <_strtod_l+0x992>
 800b930:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b9b8 <_strtod_l+0xad8>
 800b934:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b938:	ec57 6b17 	vmov	r6, r7, d7
 800b93c:	e799      	b.n	800b872 <_strtod_l+0x992>
 800b93e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b942:	9b08      	ldr	r3, [sp, #32]
 800b944:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1c1      	bne.n	800b8d0 <_strtod_l+0x9f0>
 800b94c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b950:	0d1b      	lsrs	r3, r3, #20
 800b952:	051b      	lsls	r3, r3, #20
 800b954:	429d      	cmp	r5, r3
 800b956:	d1bb      	bne.n	800b8d0 <_strtod_l+0x9f0>
 800b958:	4630      	mov	r0, r6
 800b95a:	4639      	mov	r1, r7
 800b95c:	f7f5 f9bc 	bl	8000cd8 <__aeabi_d2lz>
 800b960:	f7f4 fe2c 	bl	80005bc <__aeabi_l2d>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	4630      	mov	r0, r6
 800b96a:	4639      	mov	r1, r7
 800b96c:	f7f4 fc9c 	bl	80002a8 <__aeabi_dsub>
 800b970:	460b      	mov	r3, r1
 800b972:	4602      	mov	r2, r0
 800b974:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b978:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b97e:	ea46 060a 	orr.w	r6, r6, sl
 800b982:	431e      	orrs	r6, r3
 800b984:	d06f      	beq.n	800ba66 <_strtod_l+0xb86>
 800b986:	a30e      	add	r3, pc, #56	@ (adr r3, 800b9c0 <_strtod_l+0xae0>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	f7f5 f8b6 	bl	8000afc <__aeabi_dcmplt>
 800b990:	2800      	cmp	r0, #0
 800b992:	f47f acd3 	bne.w	800b33c <_strtod_l+0x45c>
 800b996:	a30c      	add	r3, pc, #48	@ (adr r3, 800b9c8 <_strtod_l+0xae8>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9a0:	f7f5 f8ca 	bl	8000b38 <__aeabi_dcmpgt>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d093      	beq.n	800b8d0 <_strtod_l+0x9f0>
 800b9a8:	e4c8      	b.n	800b33c <_strtod_l+0x45c>
 800b9aa:	bf00      	nop
 800b9ac:	f3af 8000 	nop.w
 800b9b0:	00000000 	.word	0x00000000
 800b9b4:	bff00000 	.word	0xbff00000
 800b9b8:	00000000 	.word	0x00000000
 800b9bc:	3ff00000 	.word	0x3ff00000
 800b9c0:	94a03595 	.word	0x94a03595
 800b9c4:	3fdfffff 	.word	0x3fdfffff
 800b9c8:	35afe535 	.word	0x35afe535
 800b9cc:	3fe00000 	.word	0x3fe00000
 800b9d0:	000fffff 	.word	0x000fffff
 800b9d4:	7ff00000 	.word	0x7ff00000
 800b9d8:	7fefffff 	.word	0x7fefffff
 800b9dc:	3ff00000 	.word	0x3ff00000
 800b9e0:	3fe00000 	.word	0x3fe00000
 800b9e4:	7fe00000 	.word	0x7fe00000
 800b9e8:	7c9fffff 	.word	0x7c9fffff
 800b9ec:	9b08      	ldr	r3, [sp, #32]
 800b9ee:	b323      	cbz	r3, 800ba3a <_strtod_l+0xb5a>
 800b9f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b9f4:	d821      	bhi.n	800ba3a <_strtod_l+0xb5a>
 800b9f6:	a328      	add	r3, pc, #160	@ (adr r3, 800ba98 <_strtod_l+0xbb8>)
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f5 f886 	bl	8000b10 <__aeabi_dcmple>
 800ba04:	b1a0      	cbz	r0, 800ba30 <_strtod_l+0xb50>
 800ba06:	4639      	mov	r1, r7
 800ba08:	4630      	mov	r0, r6
 800ba0a:	f7f5 f8dd 	bl	8000bc8 <__aeabi_d2uiz>
 800ba0e:	2801      	cmp	r0, #1
 800ba10:	bf38      	it	cc
 800ba12:	2001      	movcc	r0, #1
 800ba14:	f7f4 fd86 	bl	8000524 <__aeabi_ui2d>
 800ba18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	460f      	mov	r7, r1
 800ba1e:	b9fb      	cbnz	r3, 800ba60 <_strtod_l+0xb80>
 800ba20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba24:	9014      	str	r0, [sp, #80]	@ 0x50
 800ba26:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ba2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ba30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ba36:	1b5b      	subs	r3, r3, r5
 800ba38:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ba3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ba42:	f002 ff4f 	bl	800e8e4 <__ulp>
 800ba46:	4650      	mov	r0, sl
 800ba48:	ec53 2b10 	vmov	r2, r3, d0
 800ba4c:	4659      	mov	r1, fp
 800ba4e:	f7f4 fde3 	bl	8000618 <__aeabi_dmul>
 800ba52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ba56:	f7f4 fc29 	bl	80002ac <__adddf3>
 800ba5a:	4682      	mov	sl, r0
 800ba5c:	468b      	mov	fp, r1
 800ba5e:	e770      	b.n	800b942 <_strtod_l+0xa62>
 800ba60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ba64:	e7e0      	b.n	800ba28 <_strtod_l+0xb48>
 800ba66:	a30e      	add	r3, pc, #56	@ (adr r3, 800baa0 <_strtod_l+0xbc0>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	f7f5 f846 	bl	8000afc <__aeabi_dcmplt>
 800ba70:	e798      	b.n	800b9a4 <_strtod_l+0xac4>
 800ba72:	2300      	movs	r3, #0
 800ba74:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ba78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	f7ff ba6d 	b.w	800af5a <_strtod_l+0x7a>
 800ba80:	2a65      	cmp	r2, #101	@ 0x65
 800ba82:	f43f ab68 	beq.w	800b156 <_strtod_l+0x276>
 800ba86:	2a45      	cmp	r2, #69	@ 0x45
 800ba88:	f43f ab65 	beq.w	800b156 <_strtod_l+0x276>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	f7ff bba0 	b.w	800b1d2 <_strtod_l+0x2f2>
 800ba92:	bf00      	nop
 800ba94:	f3af 8000 	nop.w
 800ba98:	ffc00000 	.word	0xffc00000
 800ba9c:	41dfffff 	.word	0x41dfffff
 800baa0:	94a03595 	.word	0x94a03595
 800baa4:	3fcfffff 	.word	0x3fcfffff

0800baa8 <_strtod_r>:
 800baa8:	4b01      	ldr	r3, [pc, #4]	@ (800bab0 <_strtod_r+0x8>)
 800baaa:	f7ff ba19 	b.w	800aee0 <_strtod_l>
 800baae:	bf00      	nop
 800bab0:	2000010c 	.word	0x2000010c

0800bab4 <strtod>:
 800bab4:	460a      	mov	r2, r1
 800bab6:	4601      	mov	r1, r0
 800bab8:	4802      	ldr	r0, [pc, #8]	@ (800bac4 <strtod+0x10>)
 800baba:	4b03      	ldr	r3, [pc, #12]	@ (800bac8 <strtod+0x14>)
 800babc:	6800      	ldr	r0, [r0, #0]
 800babe:	f7ff ba0f 	b.w	800aee0 <_strtod_l>
 800bac2:	bf00      	nop
 800bac4:	20000278 	.word	0x20000278
 800bac8:	2000010c 	.word	0x2000010c

0800bacc <_strtol_l.isra.0>:
 800bacc:	2b24      	cmp	r3, #36	@ 0x24
 800bace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad2:	4686      	mov	lr, r0
 800bad4:	4690      	mov	r8, r2
 800bad6:	d801      	bhi.n	800badc <_strtol_l.isra.0+0x10>
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d106      	bne.n	800baea <_strtol_l.isra.0+0x1e>
 800badc:	f001 f940 	bl	800cd60 <__errno>
 800bae0:	2316      	movs	r3, #22
 800bae2:	6003      	str	r3, [r0, #0]
 800bae4:	2000      	movs	r0, #0
 800bae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baea:	4834      	ldr	r0, [pc, #208]	@ (800bbbc <_strtol_l.isra.0+0xf0>)
 800baec:	460d      	mov	r5, r1
 800baee:	462a      	mov	r2, r5
 800baf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800baf4:	5d06      	ldrb	r6, [r0, r4]
 800baf6:	f016 0608 	ands.w	r6, r6, #8
 800bafa:	d1f8      	bne.n	800baee <_strtol_l.isra.0+0x22>
 800bafc:	2c2d      	cmp	r4, #45	@ 0x2d
 800bafe:	d110      	bne.n	800bb22 <_strtol_l.isra.0+0x56>
 800bb00:	782c      	ldrb	r4, [r5, #0]
 800bb02:	2601      	movs	r6, #1
 800bb04:	1c95      	adds	r5, r2, #2
 800bb06:	f033 0210 	bics.w	r2, r3, #16
 800bb0a:	d115      	bne.n	800bb38 <_strtol_l.isra.0+0x6c>
 800bb0c:	2c30      	cmp	r4, #48	@ 0x30
 800bb0e:	d10d      	bne.n	800bb2c <_strtol_l.isra.0+0x60>
 800bb10:	782a      	ldrb	r2, [r5, #0]
 800bb12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bb16:	2a58      	cmp	r2, #88	@ 0x58
 800bb18:	d108      	bne.n	800bb2c <_strtol_l.isra.0+0x60>
 800bb1a:	786c      	ldrb	r4, [r5, #1]
 800bb1c:	3502      	adds	r5, #2
 800bb1e:	2310      	movs	r3, #16
 800bb20:	e00a      	b.n	800bb38 <_strtol_l.isra.0+0x6c>
 800bb22:	2c2b      	cmp	r4, #43	@ 0x2b
 800bb24:	bf04      	itt	eq
 800bb26:	782c      	ldrbeq	r4, [r5, #0]
 800bb28:	1c95      	addeq	r5, r2, #2
 800bb2a:	e7ec      	b.n	800bb06 <_strtol_l.isra.0+0x3a>
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1f6      	bne.n	800bb1e <_strtol_l.isra.0+0x52>
 800bb30:	2c30      	cmp	r4, #48	@ 0x30
 800bb32:	bf14      	ite	ne
 800bb34:	230a      	movne	r3, #10
 800bb36:	2308      	moveq	r3, #8
 800bb38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bb3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bb40:	2200      	movs	r2, #0
 800bb42:	fbbc f9f3 	udiv	r9, ip, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	fb03 ca19 	mls	sl, r3, r9, ip
 800bb4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bb50:	2f09      	cmp	r7, #9
 800bb52:	d80f      	bhi.n	800bb74 <_strtol_l.isra.0+0xa8>
 800bb54:	463c      	mov	r4, r7
 800bb56:	42a3      	cmp	r3, r4
 800bb58:	dd1b      	ble.n	800bb92 <_strtol_l.isra.0+0xc6>
 800bb5a:	1c57      	adds	r7, r2, #1
 800bb5c:	d007      	beq.n	800bb6e <_strtol_l.isra.0+0xa2>
 800bb5e:	4581      	cmp	r9, r0
 800bb60:	d314      	bcc.n	800bb8c <_strtol_l.isra.0+0xc0>
 800bb62:	d101      	bne.n	800bb68 <_strtol_l.isra.0+0x9c>
 800bb64:	45a2      	cmp	sl, r4
 800bb66:	db11      	blt.n	800bb8c <_strtol_l.isra.0+0xc0>
 800bb68:	fb00 4003 	mla	r0, r0, r3, r4
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb72:	e7eb      	b.n	800bb4c <_strtol_l.isra.0+0x80>
 800bb74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bb78:	2f19      	cmp	r7, #25
 800bb7a:	d801      	bhi.n	800bb80 <_strtol_l.isra.0+0xb4>
 800bb7c:	3c37      	subs	r4, #55	@ 0x37
 800bb7e:	e7ea      	b.n	800bb56 <_strtol_l.isra.0+0x8a>
 800bb80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bb84:	2f19      	cmp	r7, #25
 800bb86:	d804      	bhi.n	800bb92 <_strtol_l.isra.0+0xc6>
 800bb88:	3c57      	subs	r4, #87	@ 0x57
 800bb8a:	e7e4      	b.n	800bb56 <_strtol_l.isra.0+0x8a>
 800bb8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb90:	e7ed      	b.n	800bb6e <_strtol_l.isra.0+0xa2>
 800bb92:	1c53      	adds	r3, r2, #1
 800bb94:	d108      	bne.n	800bba8 <_strtol_l.isra.0+0xdc>
 800bb96:	2322      	movs	r3, #34	@ 0x22
 800bb98:	f8ce 3000 	str.w	r3, [lr]
 800bb9c:	4660      	mov	r0, ip
 800bb9e:	f1b8 0f00 	cmp.w	r8, #0
 800bba2:	d0a0      	beq.n	800bae6 <_strtol_l.isra.0+0x1a>
 800bba4:	1e69      	subs	r1, r5, #1
 800bba6:	e006      	b.n	800bbb6 <_strtol_l.isra.0+0xea>
 800bba8:	b106      	cbz	r6, 800bbac <_strtol_l.isra.0+0xe0>
 800bbaa:	4240      	negs	r0, r0
 800bbac:	f1b8 0f00 	cmp.w	r8, #0
 800bbb0:	d099      	beq.n	800bae6 <_strtol_l.isra.0+0x1a>
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	d1f6      	bne.n	800bba4 <_strtol_l.isra.0+0xd8>
 800bbb6:	f8c8 1000 	str.w	r1, [r8]
 800bbba:	e794      	b.n	800bae6 <_strtol_l.isra.0+0x1a>
 800bbbc:	08014591 	.word	0x08014591

0800bbc0 <_strtol_r>:
 800bbc0:	f7ff bf84 	b.w	800bacc <_strtol_l.isra.0>

0800bbc4 <strtol>:
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	460a      	mov	r2, r1
 800bbc8:	4601      	mov	r1, r0
 800bbca:	4802      	ldr	r0, [pc, #8]	@ (800bbd4 <strtol+0x10>)
 800bbcc:	6800      	ldr	r0, [r0, #0]
 800bbce:	f7ff bf7d 	b.w	800bacc <_strtol_l.isra.0>
 800bbd2:	bf00      	nop
 800bbd4:	20000278 	.word	0x20000278

0800bbd8 <__cvt>:
 800bbd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbdc:	ec57 6b10 	vmov	r6, r7, d0
 800bbe0:	2f00      	cmp	r7, #0
 800bbe2:	460c      	mov	r4, r1
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	463b      	mov	r3, r7
 800bbe8:	bfbb      	ittet	lt
 800bbea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bbee:	461f      	movlt	r7, r3
 800bbf0:	2300      	movge	r3, #0
 800bbf2:	232d      	movlt	r3, #45	@ 0x2d
 800bbf4:	700b      	strb	r3, [r1, #0]
 800bbf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbf8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bbfc:	4691      	mov	r9, r2
 800bbfe:	f023 0820 	bic.w	r8, r3, #32
 800bc02:	bfbc      	itt	lt
 800bc04:	4632      	movlt	r2, r6
 800bc06:	4616      	movlt	r6, r2
 800bc08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc0c:	d005      	beq.n	800bc1a <__cvt+0x42>
 800bc0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bc12:	d100      	bne.n	800bc16 <__cvt+0x3e>
 800bc14:	3401      	adds	r4, #1
 800bc16:	2102      	movs	r1, #2
 800bc18:	e000      	b.n	800bc1c <__cvt+0x44>
 800bc1a:	2103      	movs	r1, #3
 800bc1c:	ab03      	add	r3, sp, #12
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	ab02      	add	r3, sp, #8
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	ec47 6b10 	vmov	d0, r6, r7
 800bc28:	4653      	mov	r3, sl
 800bc2a:	4622      	mov	r2, r4
 800bc2c:	f001 f988 	bl	800cf40 <_dtoa_r>
 800bc30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bc34:	4605      	mov	r5, r0
 800bc36:	d119      	bne.n	800bc6c <__cvt+0x94>
 800bc38:	f019 0f01 	tst.w	r9, #1
 800bc3c:	d00e      	beq.n	800bc5c <__cvt+0x84>
 800bc3e:	eb00 0904 	add.w	r9, r0, r4
 800bc42:	2200      	movs	r2, #0
 800bc44:	2300      	movs	r3, #0
 800bc46:	4630      	mov	r0, r6
 800bc48:	4639      	mov	r1, r7
 800bc4a:	f7f4 ff4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc4e:	b108      	cbz	r0, 800bc54 <__cvt+0x7c>
 800bc50:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc54:	2230      	movs	r2, #48	@ 0x30
 800bc56:	9b03      	ldr	r3, [sp, #12]
 800bc58:	454b      	cmp	r3, r9
 800bc5a:	d31e      	bcc.n	800bc9a <__cvt+0xc2>
 800bc5c:	9b03      	ldr	r3, [sp, #12]
 800bc5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc60:	1b5b      	subs	r3, r3, r5
 800bc62:	4628      	mov	r0, r5
 800bc64:	6013      	str	r3, [r2, #0]
 800bc66:	b004      	add	sp, #16
 800bc68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc70:	eb00 0904 	add.w	r9, r0, r4
 800bc74:	d1e5      	bne.n	800bc42 <__cvt+0x6a>
 800bc76:	7803      	ldrb	r3, [r0, #0]
 800bc78:	2b30      	cmp	r3, #48	@ 0x30
 800bc7a:	d10a      	bne.n	800bc92 <__cvt+0xba>
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2300      	movs	r3, #0
 800bc80:	4630      	mov	r0, r6
 800bc82:	4639      	mov	r1, r7
 800bc84:	f7f4 ff30 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc88:	b918      	cbnz	r0, 800bc92 <__cvt+0xba>
 800bc8a:	f1c4 0401 	rsb	r4, r4, #1
 800bc8e:	f8ca 4000 	str.w	r4, [sl]
 800bc92:	f8da 3000 	ldr.w	r3, [sl]
 800bc96:	4499      	add	r9, r3
 800bc98:	e7d3      	b.n	800bc42 <__cvt+0x6a>
 800bc9a:	1c59      	adds	r1, r3, #1
 800bc9c:	9103      	str	r1, [sp, #12]
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	e7d9      	b.n	800bc56 <__cvt+0x7e>

0800bca2 <__exponent>:
 800bca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bca4:	2900      	cmp	r1, #0
 800bca6:	bfba      	itte	lt
 800bca8:	4249      	neglt	r1, r1
 800bcaa:	232d      	movlt	r3, #45	@ 0x2d
 800bcac:	232b      	movge	r3, #43	@ 0x2b
 800bcae:	2909      	cmp	r1, #9
 800bcb0:	7002      	strb	r2, [r0, #0]
 800bcb2:	7043      	strb	r3, [r0, #1]
 800bcb4:	dd29      	ble.n	800bd0a <__exponent+0x68>
 800bcb6:	f10d 0307 	add.w	r3, sp, #7
 800bcba:	461d      	mov	r5, r3
 800bcbc:	270a      	movs	r7, #10
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	fbb1 f6f7 	udiv	r6, r1, r7
 800bcc4:	fb07 1416 	mls	r4, r7, r6, r1
 800bcc8:	3430      	adds	r4, #48	@ 0x30
 800bcca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bcce:	460c      	mov	r4, r1
 800bcd0:	2c63      	cmp	r4, #99	@ 0x63
 800bcd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	dcf1      	bgt.n	800bcbe <__exponent+0x1c>
 800bcda:	3130      	adds	r1, #48	@ 0x30
 800bcdc:	1e94      	subs	r4, r2, #2
 800bcde:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bce2:	1c41      	adds	r1, r0, #1
 800bce4:	4623      	mov	r3, r4
 800bce6:	42ab      	cmp	r3, r5
 800bce8:	d30a      	bcc.n	800bd00 <__exponent+0x5e>
 800bcea:	f10d 0309 	add.w	r3, sp, #9
 800bcee:	1a9b      	subs	r3, r3, r2
 800bcf0:	42ac      	cmp	r4, r5
 800bcf2:	bf88      	it	hi
 800bcf4:	2300      	movhi	r3, #0
 800bcf6:	3302      	adds	r3, #2
 800bcf8:	4403      	add	r3, r0
 800bcfa:	1a18      	subs	r0, r3, r0
 800bcfc:	b003      	add	sp, #12
 800bcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd00:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bd04:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bd08:	e7ed      	b.n	800bce6 <__exponent+0x44>
 800bd0a:	2330      	movs	r3, #48	@ 0x30
 800bd0c:	3130      	adds	r1, #48	@ 0x30
 800bd0e:	7083      	strb	r3, [r0, #2]
 800bd10:	70c1      	strb	r1, [r0, #3]
 800bd12:	1d03      	adds	r3, r0, #4
 800bd14:	e7f1      	b.n	800bcfa <__exponent+0x58>
	...

0800bd18 <_printf_float>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	b08d      	sub	sp, #52	@ 0x34
 800bd1e:	460c      	mov	r4, r1
 800bd20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bd24:	4616      	mov	r6, r2
 800bd26:	461f      	mov	r7, r3
 800bd28:	4605      	mov	r5, r0
 800bd2a:	f000 ffbf 	bl	800ccac <_localeconv_r>
 800bd2e:	6803      	ldr	r3, [r0, #0]
 800bd30:	9304      	str	r3, [sp, #16]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7f4 faac 	bl	8000290 <strlen>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd3c:	f8d8 3000 	ldr.w	r3, [r8]
 800bd40:	9005      	str	r0, [sp, #20]
 800bd42:	3307      	adds	r3, #7
 800bd44:	f023 0307 	bic.w	r3, r3, #7
 800bd48:	f103 0208 	add.w	r2, r3, #8
 800bd4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bd50:	f8d4 b000 	ldr.w	fp, [r4]
 800bd54:	f8c8 2000 	str.w	r2, [r8]
 800bd58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bd60:	9307      	str	r3, [sp, #28]
 800bd62:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bd6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd6e:	4b9c      	ldr	r3, [pc, #624]	@ (800bfe0 <_printf_float+0x2c8>)
 800bd70:	f04f 32ff 	mov.w	r2, #4294967295
 800bd74:	f7f4 feea 	bl	8000b4c <__aeabi_dcmpun>
 800bd78:	bb70      	cbnz	r0, 800bdd8 <_printf_float+0xc0>
 800bd7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd7e:	4b98      	ldr	r3, [pc, #608]	@ (800bfe0 <_printf_float+0x2c8>)
 800bd80:	f04f 32ff 	mov.w	r2, #4294967295
 800bd84:	f7f4 fec4 	bl	8000b10 <__aeabi_dcmple>
 800bd88:	bb30      	cbnz	r0, 800bdd8 <_printf_float+0xc0>
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4640      	mov	r0, r8
 800bd90:	4649      	mov	r1, r9
 800bd92:	f7f4 feb3 	bl	8000afc <__aeabi_dcmplt>
 800bd96:	b110      	cbz	r0, 800bd9e <_printf_float+0x86>
 800bd98:	232d      	movs	r3, #45	@ 0x2d
 800bd9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd9e:	4a91      	ldr	r2, [pc, #580]	@ (800bfe4 <_printf_float+0x2cc>)
 800bda0:	4b91      	ldr	r3, [pc, #580]	@ (800bfe8 <_printf_float+0x2d0>)
 800bda2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bda6:	bf8c      	ite	hi
 800bda8:	4690      	movhi	r8, r2
 800bdaa:	4698      	movls	r8, r3
 800bdac:	2303      	movs	r3, #3
 800bdae:	6123      	str	r3, [r4, #16]
 800bdb0:	f02b 0304 	bic.w	r3, fp, #4
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	f04f 0900 	mov.w	r9, #0
 800bdba:	9700      	str	r7, [sp, #0]
 800bdbc:	4633      	mov	r3, r6
 800bdbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	f000 f9d2 	bl	800c16c <_printf_common>
 800bdc8:	3001      	adds	r0, #1
 800bdca:	f040 808d 	bne.w	800bee8 <_printf_float+0x1d0>
 800bdce:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd2:	b00d      	add	sp, #52	@ 0x34
 800bdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd8:	4642      	mov	r2, r8
 800bdda:	464b      	mov	r3, r9
 800bddc:	4640      	mov	r0, r8
 800bdde:	4649      	mov	r1, r9
 800bde0:	f7f4 feb4 	bl	8000b4c <__aeabi_dcmpun>
 800bde4:	b140      	cbz	r0, 800bdf8 <_printf_float+0xe0>
 800bde6:	464b      	mov	r3, r9
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	bfbc      	itt	lt
 800bdec:	232d      	movlt	r3, #45	@ 0x2d
 800bdee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bdf2:	4a7e      	ldr	r2, [pc, #504]	@ (800bfec <_printf_float+0x2d4>)
 800bdf4:	4b7e      	ldr	r3, [pc, #504]	@ (800bff0 <_printf_float+0x2d8>)
 800bdf6:	e7d4      	b.n	800bda2 <_printf_float+0x8a>
 800bdf8:	6863      	ldr	r3, [r4, #4]
 800bdfa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bdfe:	9206      	str	r2, [sp, #24]
 800be00:	1c5a      	adds	r2, r3, #1
 800be02:	d13b      	bne.n	800be7c <_printf_float+0x164>
 800be04:	2306      	movs	r3, #6
 800be06:	6063      	str	r3, [r4, #4]
 800be08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800be0c:	2300      	movs	r3, #0
 800be0e:	6022      	str	r2, [r4, #0]
 800be10:	9303      	str	r3, [sp, #12]
 800be12:	ab0a      	add	r3, sp, #40	@ 0x28
 800be14:	e9cd a301 	strd	sl, r3, [sp, #4]
 800be18:	ab09      	add	r3, sp, #36	@ 0x24
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	6861      	ldr	r1, [r4, #4]
 800be1e:	ec49 8b10 	vmov	d0, r8, r9
 800be22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800be26:	4628      	mov	r0, r5
 800be28:	f7ff fed6 	bl	800bbd8 <__cvt>
 800be2c:	9b06      	ldr	r3, [sp, #24]
 800be2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be30:	2b47      	cmp	r3, #71	@ 0x47
 800be32:	4680      	mov	r8, r0
 800be34:	d129      	bne.n	800be8a <_printf_float+0x172>
 800be36:	1cc8      	adds	r0, r1, #3
 800be38:	db02      	blt.n	800be40 <_printf_float+0x128>
 800be3a:	6863      	ldr	r3, [r4, #4]
 800be3c:	4299      	cmp	r1, r3
 800be3e:	dd41      	ble.n	800bec4 <_printf_float+0x1ac>
 800be40:	f1aa 0a02 	sub.w	sl, sl, #2
 800be44:	fa5f fa8a 	uxtb.w	sl, sl
 800be48:	3901      	subs	r1, #1
 800be4a:	4652      	mov	r2, sl
 800be4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800be50:	9109      	str	r1, [sp, #36]	@ 0x24
 800be52:	f7ff ff26 	bl	800bca2 <__exponent>
 800be56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be58:	1813      	adds	r3, r2, r0
 800be5a:	2a01      	cmp	r2, #1
 800be5c:	4681      	mov	r9, r0
 800be5e:	6123      	str	r3, [r4, #16]
 800be60:	dc02      	bgt.n	800be68 <_printf_float+0x150>
 800be62:	6822      	ldr	r2, [r4, #0]
 800be64:	07d2      	lsls	r2, r2, #31
 800be66:	d501      	bpl.n	800be6c <_printf_float+0x154>
 800be68:	3301      	adds	r3, #1
 800be6a:	6123      	str	r3, [r4, #16]
 800be6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0a2      	beq.n	800bdba <_printf_float+0xa2>
 800be74:	232d      	movs	r3, #45	@ 0x2d
 800be76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be7a:	e79e      	b.n	800bdba <_printf_float+0xa2>
 800be7c:	9a06      	ldr	r2, [sp, #24]
 800be7e:	2a47      	cmp	r2, #71	@ 0x47
 800be80:	d1c2      	bne.n	800be08 <_printf_float+0xf0>
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1c0      	bne.n	800be08 <_printf_float+0xf0>
 800be86:	2301      	movs	r3, #1
 800be88:	e7bd      	b.n	800be06 <_printf_float+0xee>
 800be8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be8e:	d9db      	bls.n	800be48 <_printf_float+0x130>
 800be90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800be94:	d118      	bne.n	800bec8 <_printf_float+0x1b0>
 800be96:	2900      	cmp	r1, #0
 800be98:	6863      	ldr	r3, [r4, #4]
 800be9a:	dd0b      	ble.n	800beb4 <_printf_float+0x19c>
 800be9c:	6121      	str	r1, [r4, #16]
 800be9e:	b913      	cbnz	r3, 800bea6 <_printf_float+0x18e>
 800bea0:	6822      	ldr	r2, [r4, #0]
 800bea2:	07d0      	lsls	r0, r2, #31
 800bea4:	d502      	bpl.n	800beac <_printf_float+0x194>
 800bea6:	3301      	adds	r3, #1
 800bea8:	440b      	add	r3, r1
 800beaa:	6123      	str	r3, [r4, #16]
 800beac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800beae:	f04f 0900 	mov.w	r9, #0
 800beb2:	e7db      	b.n	800be6c <_printf_float+0x154>
 800beb4:	b913      	cbnz	r3, 800bebc <_printf_float+0x1a4>
 800beb6:	6822      	ldr	r2, [r4, #0]
 800beb8:	07d2      	lsls	r2, r2, #31
 800beba:	d501      	bpl.n	800bec0 <_printf_float+0x1a8>
 800bebc:	3302      	adds	r3, #2
 800bebe:	e7f4      	b.n	800beaa <_printf_float+0x192>
 800bec0:	2301      	movs	r3, #1
 800bec2:	e7f2      	b.n	800beaa <_printf_float+0x192>
 800bec4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beca:	4299      	cmp	r1, r3
 800becc:	db05      	blt.n	800beda <_printf_float+0x1c2>
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	6121      	str	r1, [r4, #16]
 800bed2:	07d8      	lsls	r0, r3, #31
 800bed4:	d5ea      	bpl.n	800beac <_printf_float+0x194>
 800bed6:	1c4b      	adds	r3, r1, #1
 800bed8:	e7e7      	b.n	800beaa <_printf_float+0x192>
 800beda:	2900      	cmp	r1, #0
 800bedc:	bfd4      	ite	le
 800bede:	f1c1 0202 	rsble	r2, r1, #2
 800bee2:	2201      	movgt	r2, #1
 800bee4:	4413      	add	r3, r2
 800bee6:	e7e0      	b.n	800beaa <_printf_float+0x192>
 800bee8:	6823      	ldr	r3, [r4, #0]
 800beea:	055a      	lsls	r2, r3, #21
 800beec:	d407      	bmi.n	800befe <_printf_float+0x1e6>
 800beee:	6923      	ldr	r3, [r4, #16]
 800bef0:	4642      	mov	r2, r8
 800bef2:	4631      	mov	r1, r6
 800bef4:	4628      	mov	r0, r5
 800bef6:	47b8      	blx	r7
 800bef8:	3001      	adds	r0, #1
 800befa:	d12b      	bne.n	800bf54 <_printf_float+0x23c>
 800befc:	e767      	b.n	800bdce <_printf_float+0xb6>
 800befe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf02:	f240 80dd 	bls.w	800c0c0 <_printf_float+0x3a8>
 800bf06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f7f4 fdeb 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d033      	beq.n	800bf7e <_printf_float+0x266>
 800bf16:	4a37      	ldr	r2, [pc, #220]	@ (800bff4 <_printf_float+0x2dc>)
 800bf18:	2301      	movs	r3, #1
 800bf1a:	4631      	mov	r1, r6
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	47b8      	blx	r7
 800bf20:	3001      	adds	r0, #1
 800bf22:	f43f af54 	beq.w	800bdce <_printf_float+0xb6>
 800bf26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bf2a:	4543      	cmp	r3, r8
 800bf2c:	db02      	blt.n	800bf34 <_printf_float+0x21c>
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	07d8      	lsls	r0, r3, #31
 800bf32:	d50f      	bpl.n	800bf54 <_printf_float+0x23c>
 800bf34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf38:	4631      	mov	r1, r6
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	47b8      	blx	r7
 800bf3e:	3001      	adds	r0, #1
 800bf40:	f43f af45 	beq.w	800bdce <_printf_float+0xb6>
 800bf44:	f04f 0900 	mov.w	r9, #0
 800bf48:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf4c:	f104 0a1a 	add.w	sl, r4, #26
 800bf50:	45c8      	cmp	r8, r9
 800bf52:	dc09      	bgt.n	800bf68 <_printf_float+0x250>
 800bf54:	6823      	ldr	r3, [r4, #0]
 800bf56:	079b      	lsls	r3, r3, #30
 800bf58:	f100 8103 	bmi.w	800c162 <_printf_float+0x44a>
 800bf5c:	68e0      	ldr	r0, [r4, #12]
 800bf5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf60:	4298      	cmp	r0, r3
 800bf62:	bfb8      	it	lt
 800bf64:	4618      	movlt	r0, r3
 800bf66:	e734      	b.n	800bdd2 <_printf_float+0xba>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	4652      	mov	r2, sl
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	4628      	mov	r0, r5
 800bf70:	47b8      	blx	r7
 800bf72:	3001      	adds	r0, #1
 800bf74:	f43f af2b 	beq.w	800bdce <_printf_float+0xb6>
 800bf78:	f109 0901 	add.w	r9, r9, #1
 800bf7c:	e7e8      	b.n	800bf50 <_printf_float+0x238>
 800bf7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	dc39      	bgt.n	800bff8 <_printf_float+0x2e0>
 800bf84:	4a1b      	ldr	r2, [pc, #108]	@ (800bff4 <_printf_float+0x2dc>)
 800bf86:	2301      	movs	r3, #1
 800bf88:	4631      	mov	r1, r6
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	47b8      	blx	r7
 800bf8e:	3001      	adds	r0, #1
 800bf90:	f43f af1d 	beq.w	800bdce <_printf_float+0xb6>
 800bf94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bf98:	ea59 0303 	orrs.w	r3, r9, r3
 800bf9c:	d102      	bne.n	800bfa4 <_printf_float+0x28c>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	07d9      	lsls	r1, r3, #31
 800bfa2:	d5d7      	bpl.n	800bf54 <_printf_float+0x23c>
 800bfa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	4628      	mov	r0, r5
 800bfac:	47b8      	blx	r7
 800bfae:	3001      	adds	r0, #1
 800bfb0:	f43f af0d 	beq.w	800bdce <_printf_float+0xb6>
 800bfb4:	f04f 0a00 	mov.w	sl, #0
 800bfb8:	f104 0b1a 	add.w	fp, r4, #26
 800bfbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfbe:	425b      	negs	r3, r3
 800bfc0:	4553      	cmp	r3, sl
 800bfc2:	dc01      	bgt.n	800bfc8 <_printf_float+0x2b0>
 800bfc4:	464b      	mov	r3, r9
 800bfc6:	e793      	b.n	800bef0 <_printf_float+0x1d8>
 800bfc8:	2301      	movs	r3, #1
 800bfca:	465a      	mov	r2, fp
 800bfcc:	4631      	mov	r1, r6
 800bfce:	4628      	mov	r0, r5
 800bfd0:	47b8      	blx	r7
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	f43f aefb 	beq.w	800bdce <_printf_float+0xb6>
 800bfd8:	f10a 0a01 	add.w	sl, sl, #1
 800bfdc:	e7ee      	b.n	800bfbc <_printf_float+0x2a4>
 800bfde:	bf00      	nop
 800bfe0:	7fefffff 	.word	0x7fefffff
 800bfe4:	08014329 	.word	0x08014329
 800bfe8:	08014325 	.word	0x08014325
 800bfec:	08014331 	.word	0x08014331
 800bff0:	0801432d 	.word	0x0801432d
 800bff4:	08014335 	.word	0x08014335
 800bff8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bffa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bffe:	4553      	cmp	r3, sl
 800c000:	bfa8      	it	ge
 800c002:	4653      	movge	r3, sl
 800c004:	2b00      	cmp	r3, #0
 800c006:	4699      	mov	r9, r3
 800c008:	dc36      	bgt.n	800c078 <_printf_float+0x360>
 800c00a:	f04f 0b00 	mov.w	fp, #0
 800c00e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c012:	f104 021a 	add.w	r2, r4, #26
 800c016:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c018:	9306      	str	r3, [sp, #24]
 800c01a:	eba3 0309 	sub.w	r3, r3, r9
 800c01e:	455b      	cmp	r3, fp
 800c020:	dc31      	bgt.n	800c086 <_printf_float+0x36e>
 800c022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c024:	459a      	cmp	sl, r3
 800c026:	dc3a      	bgt.n	800c09e <_printf_float+0x386>
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	07da      	lsls	r2, r3, #31
 800c02c:	d437      	bmi.n	800c09e <_printf_float+0x386>
 800c02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c030:	ebaa 0903 	sub.w	r9, sl, r3
 800c034:	9b06      	ldr	r3, [sp, #24]
 800c036:	ebaa 0303 	sub.w	r3, sl, r3
 800c03a:	4599      	cmp	r9, r3
 800c03c:	bfa8      	it	ge
 800c03e:	4699      	movge	r9, r3
 800c040:	f1b9 0f00 	cmp.w	r9, #0
 800c044:	dc33      	bgt.n	800c0ae <_printf_float+0x396>
 800c046:	f04f 0800 	mov.w	r8, #0
 800c04a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c04e:	f104 0b1a 	add.w	fp, r4, #26
 800c052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c054:	ebaa 0303 	sub.w	r3, sl, r3
 800c058:	eba3 0309 	sub.w	r3, r3, r9
 800c05c:	4543      	cmp	r3, r8
 800c05e:	f77f af79 	ble.w	800bf54 <_printf_float+0x23c>
 800c062:	2301      	movs	r3, #1
 800c064:	465a      	mov	r2, fp
 800c066:	4631      	mov	r1, r6
 800c068:	4628      	mov	r0, r5
 800c06a:	47b8      	blx	r7
 800c06c:	3001      	adds	r0, #1
 800c06e:	f43f aeae 	beq.w	800bdce <_printf_float+0xb6>
 800c072:	f108 0801 	add.w	r8, r8, #1
 800c076:	e7ec      	b.n	800c052 <_printf_float+0x33a>
 800c078:	4642      	mov	r2, r8
 800c07a:	4631      	mov	r1, r6
 800c07c:	4628      	mov	r0, r5
 800c07e:	47b8      	blx	r7
 800c080:	3001      	adds	r0, #1
 800c082:	d1c2      	bne.n	800c00a <_printf_float+0x2f2>
 800c084:	e6a3      	b.n	800bdce <_printf_float+0xb6>
 800c086:	2301      	movs	r3, #1
 800c088:	4631      	mov	r1, r6
 800c08a:	4628      	mov	r0, r5
 800c08c:	9206      	str	r2, [sp, #24]
 800c08e:	47b8      	blx	r7
 800c090:	3001      	adds	r0, #1
 800c092:	f43f ae9c 	beq.w	800bdce <_printf_float+0xb6>
 800c096:	9a06      	ldr	r2, [sp, #24]
 800c098:	f10b 0b01 	add.w	fp, fp, #1
 800c09c:	e7bb      	b.n	800c016 <_printf_float+0x2fe>
 800c09e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	47b8      	blx	r7
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	d1c0      	bne.n	800c02e <_printf_float+0x316>
 800c0ac:	e68f      	b.n	800bdce <_printf_float+0xb6>
 800c0ae:	9a06      	ldr	r2, [sp, #24]
 800c0b0:	464b      	mov	r3, r9
 800c0b2:	4442      	add	r2, r8
 800c0b4:	4631      	mov	r1, r6
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	47b8      	blx	r7
 800c0ba:	3001      	adds	r0, #1
 800c0bc:	d1c3      	bne.n	800c046 <_printf_float+0x32e>
 800c0be:	e686      	b.n	800bdce <_printf_float+0xb6>
 800c0c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c0c4:	f1ba 0f01 	cmp.w	sl, #1
 800c0c8:	dc01      	bgt.n	800c0ce <_printf_float+0x3b6>
 800c0ca:	07db      	lsls	r3, r3, #31
 800c0cc:	d536      	bpl.n	800c13c <_printf_float+0x424>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	4631      	mov	r1, r6
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	47b8      	blx	r7
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f43f ae78 	beq.w	800bdce <_printf_float+0xb6>
 800c0de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0e2:	4631      	mov	r1, r6
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	47b8      	blx	r7
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	f43f ae70 	beq.w	800bdce <_printf_float+0xb6>
 800c0ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0fa:	f7f4 fcf5 	bl	8000ae8 <__aeabi_dcmpeq>
 800c0fe:	b9c0      	cbnz	r0, 800c132 <_printf_float+0x41a>
 800c100:	4653      	mov	r3, sl
 800c102:	f108 0201 	add.w	r2, r8, #1
 800c106:	4631      	mov	r1, r6
 800c108:	4628      	mov	r0, r5
 800c10a:	47b8      	blx	r7
 800c10c:	3001      	adds	r0, #1
 800c10e:	d10c      	bne.n	800c12a <_printf_float+0x412>
 800c110:	e65d      	b.n	800bdce <_printf_float+0xb6>
 800c112:	2301      	movs	r3, #1
 800c114:	465a      	mov	r2, fp
 800c116:	4631      	mov	r1, r6
 800c118:	4628      	mov	r0, r5
 800c11a:	47b8      	blx	r7
 800c11c:	3001      	adds	r0, #1
 800c11e:	f43f ae56 	beq.w	800bdce <_printf_float+0xb6>
 800c122:	f108 0801 	add.w	r8, r8, #1
 800c126:	45d0      	cmp	r8, sl
 800c128:	dbf3      	blt.n	800c112 <_printf_float+0x3fa>
 800c12a:	464b      	mov	r3, r9
 800c12c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c130:	e6df      	b.n	800bef2 <_printf_float+0x1da>
 800c132:	f04f 0800 	mov.w	r8, #0
 800c136:	f104 0b1a 	add.w	fp, r4, #26
 800c13a:	e7f4      	b.n	800c126 <_printf_float+0x40e>
 800c13c:	2301      	movs	r3, #1
 800c13e:	4642      	mov	r2, r8
 800c140:	e7e1      	b.n	800c106 <_printf_float+0x3ee>
 800c142:	2301      	movs	r3, #1
 800c144:	464a      	mov	r2, r9
 800c146:	4631      	mov	r1, r6
 800c148:	4628      	mov	r0, r5
 800c14a:	47b8      	blx	r7
 800c14c:	3001      	adds	r0, #1
 800c14e:	f43f ae3e 	beq.w	800bdce <_printf_float+0xb6>
 800c152:	f108 0801 	add.w	r8, r8, #1
 800c156:	68e3      	ldr	r3, [r4, #12]
 800c158:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c15a:	1a5b      	subs	r3, r3, r1
 800c15c:	4543      	cmp	r3, r8
 800c15e:	dcf0      	bgt.n	800c142 <_printf_float+0x42a>
 800c160:	e6fc      	b.n	800bf5c <_printf_float+0x244>
 800c162:	f04f 0800 	mov.w	r8, #0
 800c166:	f104 0919 	add.w	r9, r4, #25
 800c16a:	e7f4      	b.n	800c156 <_printf_float+0x43e>

0800c16c <_printf_common>:
 800c16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c170:	4616      	mov	r6, r2
 800c172:	4698      	mov	r8, r3
 800c174:	688a      	ldr	r2, [r1, #8]
 800c176:	690b      	ldr	r3, [r1, #16]
 800c178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c17c:	4293      	cmp	r3, r2
 800c17e:	bfb8      	it	lt
 800c180:	4613      	movlt	r3, r2
 800c182:	6033      	str	r3, [r6, #0]
 800c184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c188:	4607      	mov	r7, r0
 800c18a:	460c      	mov	r4, r1
 800c18c:	b10a      	cbz	r2, 800c192 <_printf_common+0x26>
 800c18e:	3301      	adds	r3, #1
 800c190:	6033      	str	r3, [r6, #0]
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	0699      	lsls	r1, r3, #26
 800c196:	bf42      	ittt	mi
 800c198:	6833      	ldrmi	r3, [r6, #0]
 800c19a:	3302      	addmi	r3, #2
 800c19c:	6033      	strmi	r3, [r6, #0]
 800c19e:	6825      	ldr	r5, [r4, #0]
 800c1a0:	f015 0506 	ands.w	r5, r5, #6
 800c1a4:	d106      	bne.n	800c1b4 <_printf_common+0x48>
 800c1a6:	f104 0a19 	add.w	sl, r4, #25
 800c1aa:	68e3      	ldr	r3, [r4, #12]
 800c1ac:	6832      	ldr	r2, [r6, #0]
 800c1ae:	1a9b      	subs	r3, r3, r2
 800c1b0:	42ab      	cmp	r3, r5
 800c1b2:	dc26      	bgt.n	800c202 <_printf_common+0x96>
 800c1b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c1b8:	6822      	ldr	r2, [r4, #0]
 800c1ba:	3b00      	subs	r3, #0
 800c1bc:	bf18      	it	ne
 800c1be:	2301      	movne	r3, #1
 800c1c0:	0692      	lsls	r2, r2, #26
 800c1c2:	d42b      	bmi.n	800c21c <_printf_common+0xb0>
 800c1c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c1c8:	4641      	mov	r1, r8
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	47c8      	blx	r9
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d01e      	beq.n	800c210 <_printf_common+0xa4>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	6922      	ldr	r2, [r4, #16]
 800c1d6:	f003 0306 	and.w	r3, r3, #6
 800c1da:	2b04      	cmp	r3, #4
 800c1dc:	bf02      	ittt	eq
 800c1de:	68e5      	ldreq	r5, [r4, #12]
 800c1e0:	6833      	ldreq	r3, [r6, #0]
 800c1e2:	1aed      	subeq	r5, r5, r3
 800c1e4:	68a3      	ldr	r3, [r4, #8]
 800c1e6:	bf0c      	ite	eq
 800c1e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1ec:	2500      	movne	r5, #0
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	bfc4      	itt	gt
 800c1f2:	1a9b      	subgt	r3, r3, r2
 800c1f4:	18ed      	addgt	r5, r5, r3
 800c1f6:	2600      	movs	r6, #0
 800c1f8:	341a      	adds	r4, #26
 800c1fa:	42b5      	cmp	r5, r6
 800c1fc:	d11a      	bne.n	800c234 <_printf_common+0xc8>
 800c1fe:	2000      	movs	r0, #0
 800c200:	e008      	b.n	800c214 <_printf_common+0xa8>
 800c202:	2301      	movs	r3, #1
 800c204:	4652      	mov	r2, sl
 800c206:	4641      	mov	r1, r8
 800c208:	4638      	mov	r0, r7
 800c20a:	47c8      	blx	r9
 800c20c:	3001      	adds	r0, #1
 800c20e:	d103      	bne.n	800c218 <_printf_common+0xac>
 800c210:	f04f 30ff 	mov.w	r0, #4294967295
 800c214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c218:	3501      	adds	r5, #1
 800c21a:	e7c6      	b.n	800c1aa <_printf_common+0x3e>
 800c21c:	18e1      	adds	r1, r4, r3
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	2030      	movs	r0, #48	@ 0x30
 800c222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c226:	4422      	add	r2, r4
 800c228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c22c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c230:	3302      	adds	r3, #2
 800c232:	e7c7      	b.n	800c1c4 <_printf_common+0x58>
 800c234:	2301      	movs	r3, #1
 800c236:	4622      	mov	r2, r4
 800c238:	4641      	mov	r1, r8
 800c23a:	4638      	mov	r0, r7
 800c23c:	47c8      	blx	r9
 800c23e:	3001      	adds	r0, #1
 800c240:	d0e6      	beq.n	800c210 <_printf_common+0xa4>
 800c242:	3601      	adds	r6, #1
 800c244:	e7d9      	b.n	800c1fa <_printf_common+0x8e>
	...

0800c248 <_printf_i>:
 800c248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c24c:	7e0f      	ldrb	r7, [r1, #24]
 800c24e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c250:	2f78      	cmp	r7, #120	@ 0x78
 800c252:	4691      	mov	r9, r2
 800c254:	4680      	mov	r8, r0
 800c256:	460c      	mov	r4, r1
 800c258:	469a      	mov	sl, r3
 800c25a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c25e:	d807      	bhi.n	800c270 <_printf_i+0x28>
 800c260:	2f62      	cmp	r7, #98	@ 0x62
 800c262:	d80a      	bhi.n	800c27a <_printf_i+0x32>
 800c264:	2f00      	cmp	r7, #0
 800c266:	f000 80d1 	beq.w	800c40c <_printf_i+0x1c4>
 800c26a:	2f58      	cmp	r7, #88	@ 0x58
 800c26c:	f000 80b8 	beq.w	800c3e0 <_printf_i+0x198>
 800c270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c278:	e03a      	b.n	800c2f0 <_printf_i+0xa8>
 800c27a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c27e:	2b15      	cmp	r3, #21
 800c280:	d8f6      	bhi.n	800c270 <_printf_i+0x28>
 800c282:	a101      	add	r1, pc, #4	@ (adr r1, 800c288 <_printf_i+0x40>)
 800c284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c288:	0800c2e1 	.word	0x0800c2e1
 800c28c:	0800c2f5 	.word	0x0800c2f5
 800c290:	0800c271 	.word	0x0800c271
 800c294:	0800c271 	.word	0x0800c271
 800c298:	0800c271 	.word	0x0800c271
 800c29c:	0800c271 	.word	0x0800c271
 800c2a0:	0800c2f5 	.word	0x0800c2f5
 800c2a4:	0800c271 	.word	0x0800c271
 800c2a8:	0800c271 	.word	0x0800c271
 800c2ac:	0800c271 	.word	0x0800c271
 800c2b0:	0800c271 	.word	0x0800c271
 800c2b4:	0800c3f3 	.word	0x0800c3f3
 800c2b8:	0800c31f 	.word	0x0800c31f
 800c2bc:	0800c3ad 	.word	0x0800c3ad
 800c2c0:	0800c271 	.word	0x0800c271
 800c2c4:	0800c271 	.word	0x0800c271
 800c2c8:	0800c415 	.word	0x0800c415
 800c2cc:	0800c271 	.word	0x0800c271
 800c2d0:	0800c31f 	.word	0x0800c31f
 800c2d4:	0800c271 	.word	0x0800c271
 800c2d8:	0800c271 	.word	0x0800c271
 800c2dc:	0800c3b5 	.word	0x0800c3b5
 800c2e0:	6833      	ldr	r3, [r6, #0]
 800c2e2:	1d1a      	adds	r2, r3, #4
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6032      	str	r2, [r6, #0]
 800c2e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e09c      	b.n	800c42e <_printf_i+0x1e6>
 800c2f4:	6833      	ldr	r3, [r6, #0]
 800c2f6:	6820      	ldr	r0, [r4, #0]
 800c2f8:	1d19      	adds	r1, r3, #4
 800c2fa:	6031      	str	r1, [r6, #0]
 800c2fc:	0606      	lsls	r6, r0, #24
 800c2fe:	d501      	bpl.n	800c304 <_printf_i+0xbc>
 800c300:	681d      	ldr	r5, [r3, #0]
 800c302:	e003      	b.n	800c30c <_printf_i+0xc4>
 800c304:	0645      	lsls	r5, r0, #25
 800c306:	d5fb      	bpl.n	800c300 <_printf_i+0xb8>
 800c308:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c30c:	2d00      	cmp	r5, #0
 800c30e:	da03      	bge.n	800c318 <_printf_i+0xd0>
 800c310:	232d      	movs	r3, #45	@ 0x2d
 800c312:	426d      	negs	r5, r5
 800c314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c318:	4858      	ldr	r0, [pc, #352]	@ (800c47c <_printf_i+0x234>)
 800c31a:	230a      	movs	r3, #10
 800c31c:	e011      	b.n	800c342 <_printf_i+0xfa>
 800c31e:	6821      	ldr	r1, [r4, #0]
 800c320:	6833      	ldr	r3, [r6, #0]
 800c322:	0608      	lsls	r0, r1, #24
 800c324:	f853 5b04 	ldr.w	r5, [r3], #4
 800c328:	d402      	bmi.n	800c330 <_printf_i+0xe8>
 800c32a:	0649      	lsls	r1, r1, #25
 800c32c:	bf48      	it	mi
 800c32e:	b2ad      	uxthmi	r5, r5
 800c330:	2f6f      	cmp	r7, #111	@ 0x6f
 800c332:	4852      	ldr	r0, [pc, #328]	@ (800c47c <_printf_i+0x234>)
 800c334:	6033      	str	r3, [r6, #0]
 800c336:	bf14      	ite	ne
 800c338:	230a      	movne	r3, #10
 800c33a:	2308      	moveq	r3, #8
 800c33c:	2100      	movs	r1, #0
 800c33e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c342:	6866      	ldr	r6, [r4, #4]
 800c344:	60a6      	str	r6, [r4, #8]
 800c346:	2e00      	cmp	r6, #0
 800c348:	db05      	blt.n	800c356 <_printf_i+0x10e>
 800c34a:	6821      	ldr	r1, [r4, #0]
 800c34c:	432e      	orrs	r6, r5
 800c34e:	f021 0104 	bic.w	r1, r1, #4
 800c352:	6021      	str	r1, [r4, #0]
 800c354:	d04b      	beq.n	800c3ee <_printf_i+0x1a6>
 800c356:	4616      	mov	r6, r2
 800c358:	fbb5 f1f3 	udiv	r1, r5, r3
 800c35c:	fb03 5711 	mls	r7, r3, r1, r5
 800c360:	5dc7      	ldrb	r7, [r0, r7]
 800c362:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c366:	462f      	mov	r7, r5
 800c368:	42bb      	cmp	r3, r7
 800c36a:	460d      	mov	r5, r1
 800c36c:	d9f4      	bls.n	800c358 <_printf_i+0x110>
 800c36e:	2b08      	cmp	r3, #8
 800c370:	d10b      	bne.n	800c38a <_printf_i+0x142>
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	07df      	lsls	r7, r3, #31
 800c376:	d508      	bpl.n	800c38a <_printf_i+0x142>
 800c378:	6923      	ldr	r3, [r4, #16]
 800c37a:	6861      	ldr	r1, [r4, #4]
 800c37c:	4299      	cmp	r1, r3
 800c37e:	bfde      	ittt	le
 800c380:	2330      	movle	r3, #48	@ 0x30
 800c382:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c386:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c38a:	1b92      	subs	r2, r2, r6
 800c38c:	6122      	str	r2, [r4, #16]
 800c38e:	f8cd a000 	str.w	sl, [sp]
 800c392:	464b      	mov	r3, r9
 800c394:	aa03      	add	r2, sp, #12
 800c396:	4621      	mov	r1, r4
 800c398:	4640      	mov	r0, r8
 800c39a:	f7ff fee7 	bl	800c16c <_printf_common>
 800c39e:	3001      	adds	r0, #1
 800c3a0:	d14a      	bne.n	800c438 <_printf_i+0x1f0>
 800c3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a6:	b004      	add	sp, #16
 800c3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ac:	6823      	ldr	r3, [r4, #0]
 800c3ae:	f043 0320 	orr.w	r3, r3, #32
 800c3b2:	6023      	str	r3, [r4, #0]
 800c3b4:	4832      	ldr	r0, [pc, #200]	@ (800c480 <_printf_i+0x238>)
 800c3b6:	2778      	movs	r7, #120	@ 0x78
 800c3b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c3bc:	6823      	ldr	r3, [r4, #0]
 800c3be:	6831      	ldr	r1, [r6, #0]
 800c3c0:	061f      	lsls	r7, r3, #24
 800c3c2:	f851 5b04 	ldr.w	r5, [r1], #4
 800c3c6:	d402      	bmi.n	800c3ce <_printf_i+0x186>
 800c3c8:	065f      	lsls	r7, r3, #25
 800c3ca:	bf48      	it	mi
 800c3cc:	b2ad      	uxthmi	r5, r5
 800c3ce:	6031      	str	r1, [r6, #0]
 800c3d0:	07d9      	lsls	r1, r3, #31
 800c3d2:	bf44      	itt	mi
 800c3d4:	f043 0320 	orrmi.w	r3, r3, #32
 800c3d8:	6023      	strmi	r3, [r4, #0]
 800c3da:	b11d      	cbz	r5, 800c3e4 <_printf_i+0x19c>
 800c3dc:	2310      	movs	r3, #16
 800c3de:	e7ad      	b.n	800c33c <_printf_i+0xf4>
 800c3e0:	4826      	ldr	r0, [pc, #152]	@ (800c47c <_printf_i+0x234>)
 800c3e2:	e7e9      	b.n	800c3b8 <_printf_i+0x170>
 800c3e4:	6823      	ldr	r3, [r4, #0]
 800c3e6:	f023 0320 	bic.w	r3, r3, #32
 800c3ea:	6023      	str	r3, [r4, #0]
 800c3ec:	e7f6      	b.n	800c3dc <_printf_i+0x194>
 800c3ee:	4616      	mov	r6, r2
 800c3f0:	e7bd      	b.n	800c36e <_printf_i+0x126>
 800c3f2:	6833      	ldr	r3, [r6, #0]
 800c3f4:	6825      	ldr	r5, [r4, #0]
 800c3f6:	6961      	ldr	r1, [r4, #20]
 800c3f8:	1d18      	adds	r0, r3, #4
 800c3fa:	6030      	str	r0, [r6, #0]
 800c3fc:	062e      	lsls	r6, r5, #24
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	d501      	bpl.n	800c406 <_printf_i+0x1be>
 800c402:	6019      	str	r1, [r3, #0]
 800c404:	e002      	b.n	800c40c <_printf_i+0x1c4>
 800c406:	0668      	lsls	r0, r5, #25
 800c408:	d5fb      	bpl.n	800c402 <_printf_i+0x1ba>
 800c40a:	8019      	strh	r1, [r3, #0]
 800c40c:	2300      	movs	r3, #0
 800c40e:	6123      	str	r3, [r4, #16]
 800c410:	4616      	mov	r6, r2
 800c412:	e7bc      	b.n	800c38e <_printf_i+0x146>
 800c414:	6833      	ldr	r3, [r6, #0]
 800c416:	1d1a      	adds	r2, r3, #4
 800c418:	6032      	str	r2, [r6, #0]
 800c41a:	681e      	ldr	r6, [r3, #0]
 800c41c:	6862      	ldr	r2, [r4, #4]
 800c41e:	2100      	movs	r1, #0
 800c420:	4630      	mov	r0, r6
 800c422:	f7f3 fee5 	bl	80001f0 <memchr>
 800c426:	b108      	cbz	r0, 800c42c <_printf_i+0x1e4>
 800c428:	1b80      	subs	r0, r0, r6
 800c42a:	6060      	str	r0, [r4, #4]
 800c42c:	6863      	ldr	r3, [r4, #4]
 800c42e:	6123      	str	r3, [r4, #16]
 800c430:	2300      	movs	r3, #0
 800c432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c436:	e7aa      	b.n	800c38e <_printf_i+0x146>
 800c438:	6923      	ldr	r3, [r4, #16]
 800c43a:	4632      	mov	r2, r6
 800c43c:	4649      	mov	r1, r9
 800c43e:	4640      	mov	r0, r8
 800c440:	47d0      	blx	sl
 800c442:	3001      	adds	r0, #1
 800c444:	d0ad      	beq.n	800c3a2 <_printf_i+0x15a>
 800c446:	6823      	ldr	r3, [r4, #0]
 800c448:	079b      	lsls	r3, r3, #30
 800c44a:	d413      	bmi.n	800c474 <_printf_i+0x22c>
 800c44c:	68e0      	ldr	r0, [r4, #12]
 800c44e:	9b03      	ldr	r3, [sp, #12]
 800c450:	4298      	cmp	r0, r3
 800c452:	bfb8      	it	lt
 800c454:	4618      	movlt	r0, r3
 800c456:	e7a6      	b.n	800c3a6 <_printf_i+0x15e>
 800c458:	2301      	movs	r3, #1
 800c45a:	4632      	mov	r2, r6
 800c45c:	4649      	mov	r1, r9
 800c45e:	4640      	mov	r0, r8
 800c460:	47d0      	blx	sl
 800c462:	3001      	adds	r0, #1
 800c464:	d09d      	beq.n	800c3a2 <_printf_i+0x15a>
 800c466:	3501      	adds	r5, #1
 800c468:	68e3      	ldr	r3, [r4, #12]
 800c46a:	9903      	ldr	r1, [sp, #12]
 800c46c:	1a5b      	subs	r3, r3, r1
 800c46e:	42ab      	cmp	r3, r5
 800c470:	dcf2      	bgt.n	800c458 <_printf_i+0x210>
 800c472:	e7eb      	b.n	800c44c <_printf_i+0x204>
 800c474:	2500      	movs	r5, #0
 800c476:	f104 0619 	add.w	r6, r4, #25
 800c47a:	e7f5      	b.n	800c468 <_printf_i+0x220>
 800c47c:	08014337 	.word	0x08014337
 800c480:	08014348 	.word	0x08014348

0800c484 <_scanf_float>:
 800c484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	b087      	sub	sp, #28
 800c48a:	4691      	mov	r9, r2
 800c48c:	9303      	str	r3, [sp, #12]
 800c48e:	688b      	ldr	r3, [r1, #8]
 800c490:	1e5a      	subs	r2, r3, #1
 800c492:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c496:	bf81      	itttt	hi
 800c498:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c49c:	eb03 0b05 	addhi.w	fp, r3, r5
 800c4a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c4a4:	608b      	strhi	r3, [r1, #8]
 800c4a6:	680b      	ldr	r3, [r1, #0]
 800c4a8:	460a      	mov	r2, r1
 800c4aa:	f04f 0500 	mov.w	r5, #0
 800c4ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c4b2:	f842 3b1c 	str.w	r3, [r2], #28
 800c4b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c4ba:	4680      	mov	r8, r0
 800c4bc:	460c      	mov	r4, r1
 800c4be:	bf98      	it	ls
 800c4c0:	f04f 0b00 	movls.w	fp, #0
 800c4c4:	9201      	str	r2, [sp, #4]
 800c4c6:	4616      	mov	r6, r2
 800c4c8:	46aa      	mov	sl, r5
 800c4ca:	462f      	mov	r7, r5
 800c4cc:	9502      	str	r5, [sp, #8]
 800c4ce:	68a2      	ldr	r2, [r4, #8]
 800c4d0:	b15a      	cbz	r2, 800c4ea <_scanf_float+0x66>
 800c4d2:	f8d9 3000 	ldr.w	r3, [r9]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2b4e      	cmp	r3, #78	@ 0x4e
 800c4da:	d863      	bhi.n	800c5a4 <_scanf_float+0x120>
 800c4dc:	2b40      	cmp	r3, #64	@ 0x40
 800c4de:	d83b      	bhi.n	800c558 <_scanf_float+0xd4>
 800c4e0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c4e4:	b2c8      	uxtb	r0, r1
 800c4e6:	280e      	cmp	r0, #14
 800c4e8:	d939      	bls.n	800c55e <_scanf_float+0xda>
 800c4ea:	b11f      	cbz	r7, 800c4f4 <_scanf_float+0x70>
 800c4ec:	6823      	ldr	r3, [r4, #0]
 800c4ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4f2:	6023      	str	r3, [r4, #0]
 800c4f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4f8:	f1ba 0f01 	cmp.w	sl, #1
 800c4fc:	f200 8114 	bhi.w	800c728 <_scanf_float+0x2a4>
 800c500:	9b01      	ldr	r3, [sp, #4]
 800c502:	429e      	cmp	r6, r3
 800c504:	f200 8105 	bhi.w	800c712 <_scanf_float+0x28e>
 800c508:	2001      	movs	r0, #1
 800c50a:	b007      	add	sp, #28
 800c50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c510:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c514:	2a0d      	cmp	r2, #13
 800c516:	d8e8      	bhi.n	800c4ea <_scanf_float+0x66>
 800c518:	a101      	add	r1, pc, #4	@ (adr r1, 800c520 <_scanf_float+0x9c>)
 800c51a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c51e:	bf00      	nop
 800c520:	0800c669 	.word	0x0800c669
 800c524:	0800c4eb 	.word	0x0800c4eb
 800c528:	0800c4eb 	.word	0x0800c4eb
 800c52c:	0800c4eb 	.word	0x0800c4eb
 800c530:	0800c6c5 	.word	0x0800c6c5
 800c534:	0800c69f 	.word	0x0800c69f
 800c538:	0800c4eb 	.word	0x0800c4eb
 800c53c:	0800c4eb 	.word	0x0800c4eb
 800c540:	0800c677 	.word	0x0800c677
 800c544:	0800c4eb 	.word	0x0800c4eb
 800c548:	0800c4eb 	.word	0x0800c4eb
 800c54c:	0800c4eb 	.word	0x0800c4eb
 800c550:	0800c4eb 	.word	0x0800c4eb
 800c554:	0800c633 	.word	0x0800c633
 800c558:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c55c:	e7da      	b.n	800c514 <_scanf_float+0x90>
 800c55e:	290e      	cmp	r1, #14
 800c560:	d8c3      	bhi.n	800c4ea <_scanf_float+0x66>
 800c562:	a001      	add	r0, pc, #4	@ (adr r0, 800c568 <_scanf_float+0xe4>)
 800c564:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c568:	0800c623 	.word	0x0800c623
 800c56c:	0800c4eb 	.word	0x0800c4eb
 800c570:	0800c623 	.word	0x0800c623
 800c574:	0800c6b3 	.word	0x0800c6b3
 800c578:	0800c4eb 	.word	0x0800c4eb
 800c57c:	0800c5c5 	.word	0x0800c5c5
 800c580:	0800c609 	.word	0x0800c609
 800c584:	0800c609 	.word	0x0800c609
 800c588:	0800c609 	.word	0x0800c609
 800c58c:	0800c609 	.word	0x0800c609
 800c590:	0800c609 	.word	0x0800c609
 800c594:	0800c609 	.word	0x0800c609
 800c598:	0800c609 	.word	0x0800c609
 800c59c:	0800c609 	.word	0x0800c609
 800c5a0:	0800c609 	.word	0x0800c609
 800c5a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800c5a6:	d809      	bhi.n	800c5bc <_scanf_float+0x138>
 800c5a8:	2b60      	cmp	r3, #96	@ 0x60
 800c5aa:	d8b1      	bhi.n	800c510 <_scanf_float+0x8c>
 800c5ac:	2b54      	cmp	r3, #84	@ 0x54
 800c5ae:	d07b      	beq.n	800c6a8 <_scanf_float+0x224>
 800c5b0:	2b59      	cmp	r3, #89	@ 0x59
 800c5b2:	d19a      	bne.n	800c4ea <_scanf_float+0x66>
 800c5b4:	2d07      	cmp	r5, #7
 800c5b6:	d198      	bne.n	800c4ea <_scanf_float+0x66>
 800c5b8:	2508      	movs	r5, #8
 800c5ba:	e02f      	b.n	800c61c <_scanf_float+0x198>
 800c5bc:	2b74      	cmp	r3, #116	@ 0x74
 800c5be:	d073      	beq.n	800c6a8 <_scanf_float+0x224>
 800c5c0:	2b79      	cmp	r3, #121	@ 0x79
 800c5c2:	e7f6      	b.n	800c5b2 <_scanf_float+0x12e>
 800c5c4:	6821      	ldr	r1, [r4, #0]
 800c5c6:	05c8      	lsls	r0, r1, #23
 800c5c8:	d51e      	bpl.n	800c608 <_scanf_float+0x184>
 800c5ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c5ce:	6021      	str	r1, [r4, #0]
 800c5d0:	3701      	adds	r7, #1
 800c5d2:	f1bb 0f00 	cmp.w	fp, #0
 800c5d6:	d003      	beq.n	800c5e0 <_scanf_float+0x15c>
 800c5d8:	3201      	adds	r2, #1
 800c5da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5de:	60a2      	str	r2, [r4, #8]
 800c5e0:	68a3      	ldr	r3, [r4, #8]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	60a3      	str	r3, [r4, #8]
 800c5e6:	6923      	ldr	r3, [r4, #16]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	6123      	str	r3, [r4, #16]
 800c5ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f8c9 3004 	str.w	r3, [r9, #4]
 800c5f8:	f340 8082 	ble.w	800c700 <_scanf_float+0x27c>
 800c5fc:	f8d9 3000 	ldr.w	r3, [r9]
 800c600:	3301      	adds	r3, #1
 800c602:	f8c9 3000 	str.w	r3, [r9]
 800c606:	e762      	b.n	800c4ce <_scanf_float+0x4a>
 800c608:	eb1a 0105 	adds.w	r1, sl, r5
 800c60c:	f47f af6d 	bne.w	800c4ea <_scanf_float+0x66>
 800c610:	6822      	ldr	r2, [r4, #0]
 800c612:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c616:	6022      	str	r2, [r4, #0]
 800c618:	460d      	mov	r5, r1
 800c61a:	468a      	mov	sl, r1
 800c61c:	f806 3b01 	strb.w	r3, [r6], #1
 800c620:	e7de      	b.n	800c5e0 <_scanf_float+0x15c>
 800c622:	6822      	ldr	r2, [r4, #0]
 800c624:	0610      	lsls	r0, r2, #24
 800c626:	f57f af60 	bpl.w	800c4ea <_scanf_float+0x66>
 800c62a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c62e:	6022      	str	r2, [r4, #0]
 800c630:	e7f4      	b.n	800c61c <_scanf_float+0x198>
 800c632:	f1ba 0f00 	cmp.w	sl, #0
 800c636:	d10c      	bne.n	800c652 <_scanf_float+0x1ce>
 800c638:	b977      	cbnz	r7, 800c658 <_scanf_float+0x1d4>
 800c63a:	6822      	ldr	r2, [r4, #0]
 800c63c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c640:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c644:	d108      	bne.n	800c658 <_scanf_float+0x1d4>
 800c646:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c64a:	6022      	str	r2, [r4, #0]
 800c64c:	f04f 0a01 	mov.w	sl, #1
 800c650:	e7e4      	b.n	800c61c <_scanf_float+0x198>
 800c652:	f1ba 0f02 	cmp.w	sl, #2
 800c656:	d050      	beq.n	800c6fa <_scanf_float+0x276>
 800c658:	2d01      	cmp	r5, #1
 800c65a:	d002      	beq.n	800c662 <_scanf_float+0x1de>
 800c65c:	2d04      	cmp	r5, #4
 800c65e:	f47f af44 	bne.w	800c4ea <_scanf_float+0x66>
 800c662:	3501      	adds	r5, #1
 800c664:	b2ed      	uxtb	r5, r5
 800c666:	e7d9      	b.n	800c61c <_scanf_float+0x198>
 800c668:	f1ba 0f01 	cmp.w	sl, #1
 800c66c:	f47f af3d 	bne.w	800c4ea <_scanf_float+0x66>
 800c670:	f04f 0a02 	mov.w	sl, #2
 800c674:	e7d2      	b.n	800c61c <_scanf_float+0x198>
 800c676:	b975      	cbnz	r5, 800c696 <_scanf_float+0x212>
 800c678:	2f00      	cmp	r7, #0
 800c67a:	f47f af37 	bne.w	800c4ec <_scanf_float+0x68>
 800c67e:	6822      	ldr	r2, [r4, #0]
 800c680:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c684:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c688:	f040 8103 	bne.w	800c892 <_scanf_float+0x40e>
 800c68c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c690:	6022      	str	r2, [r4, #0]
 800c692:	2501      	movs	r5, #1
 800c694:	e7c2      	b.n	800c61c <_scanf_float+0x198>
 800c696:	2d03      	cmp	r5, #3
 800c698:	d0e3      	beq.n	800c662 <_scanf_float+0x1de>
 800c69a:	2d05      	cmp	r5, #5
 800c69c:	e7df      	b.n	800c65e <_scanf_float+0x1da>
 800c69e:	2d02      	cmp	r5, #2
 800c6a0:	f47f af23 	bne.w	800c4ea <_scanf_float+0x66>
 800c6a4:	2503      	movs	r5, #3
 800c6a6:	e7b9      	b.n	800c61c <_scanf_float+0x198>
 800c6a8:	2d06      	cmp	r5, #6
 800c6aa:	f47f af1e 	bne.w	800c4ea <_scanf_float+0x66>
 800c6ae:	2507      	movs	r5, #7
 800c6b0:	e7b4      	b.n	800c61c <_scanf_float+0x198>
 800c6b2:	6822      	ldr	r2, [r4, #0]
 800c6b4:	0591      	lsls	r1, r2, #22
 800c6b6:	f57f af18 	bpl.w	800c4ea <_scanf_float+0x66>
 800c6ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c6be:	6022      	str	r2, [r4, #0]
 800c6c0:	9702      	str	r7, [sp, #8]
 800c6c2:	e7ab      	b.n	800c61c <_scanf_float+0x198>
 800c6c4:	6822      	ldr	r2, [r4, #0]
 800c6c6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c6ca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c6ce:	d005      	beq.n	800c6dc <_scanf_float+0x258>
 800c6d0:	0550      	lsls	r0, r2, #21
 800c6d2:	f57f af0a 	bpl.w	800c4ea <_scanf_float+0x66>
 800c6d6:	2f00      	cmp	r7, #0
 800c6d8:	f000 80db 	beq.w	800c892 <_scanf_float+0x40e>
 800c6dc:	0591      	lsls	r1, r2, #22
 800c6de:	bf58      	it	pl
 800c6e0:	9902      	ldrpl	r1, [sp, #8]
 800c6e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c6e6:	bf58      	it	pl
 800c6e8:	1a79      	subpl	r1, r7, r1
 800c6ea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c6ee:	bf58      	it	pl
 800c6f0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c6f4:	6022      	str	r2, [r4, #0]
 800c6f6:	2700      	movs	r7, #0
 800c6f8:	e790      	b.n	800c61c <_scanf_float+0x198>
 800c6fa:	f04f 0a03 	mov.w	sl, #3
 800c6fe:	e78d      	b.n	800c61c <_scanf_float+0x198>
 800c700:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c704:	4649      	mov	r1, r9
 800c706:	4640      	mov	r0, r8
 800c708:	4798      	blx	r3
 800c70a:	2800      	cmp	r0, #0
 800c70c:	f43f aedf 	beq.w	800c4ce <_scanf_float+0x4a>
 800c710:	e6eb      	b.n	800c4ea <_scanf_float+0x66>
 800c712:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c71a:	464a      	mov	r2, r9
 800c71c:	4640      	mov	r0, r8
 800c71e:	4798      	blx	r3
 800c720:	6923      	ldr	r3, [r4, #16]
 800c722:	3b01      	subs	r3, #1
 800c724:	6123      	str	r3, [r4, #16]
 800c726:	e6eb      	b.n	800c500 <_scanf_float+0x7c>
 800c728:	1e6b      	subs	r3, r5, #1
 800c72a:	2b06      	cmp	r3, #6
 800c72c:	d824      	bhi.n	800c778 <_scanf_float+0x2f4>
 800c72e:	2d02      	cmp	r5, #2
 800c730:	d836      	bhi.n	800c7a0 <_scanf_float+0x31c>
 800c732:	9b01      	ldr	r3, [sp, #4]
 800c734:	429e      	cmp	r6, r3
 800c736:	f67f aee7 	bls.w	800c508 <_scanf_float+0x84>
 800c73a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c73e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c742:	464a      	mov	r2, r9
 800c744:	4640      	mov	r0, r8
 800c746:	4798      	blx	r3
 800c748:	6923      	ldr	r3, [r4, #16]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	6123      	str	r3, [r4, #16]
 800c74e:	e7f0      	b.n	800c732 <_scanf_float+0x2ae>
 800c750:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c754:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c758:	464a      	mov	r2, r9
 800c75a:	4640      	mov	r0, r8
 800c75c:	4798      	blx	r3
 800c75e:	6923      	ldr	r3, [r4, #16]
 800c760:	3b01      	subs	r3, #1
 800c762:	6123      	str	r3, [r4, #16]
 800c764:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c768:	fa5f fa8a 	uxtb.w	sl, sl
 800c76c:	f1ba 0f02 	cmp.w	sl, #2
 800c770:	d1ee      	bne.n	800c750 <_scanf_float+0x2cc>
 800c772:	3d03      	subs	r5, #3
 800c774:	b2ed      	uxtb	r5, r5
 800c776:	1b76      	subs	r6, r6, r5
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	05da      	lsls	r2, r3, #23
 800c77c:	d530      	bpl.n	800c7e0 <_scanf_float+0x35c>
 800c77e:	055b      	lsls	r3, r3, #21
 800c780:	d511      	bpl.n	800c7a6 <_scanf_float+0x322>
 800c782:	9b01      	ldr	r3, [sp, #4]
 800c784:	429e      	cmp	r6, r3
 800c786:	f67f aebf 	bls.w	800c508 <_scanf_float+0x84>
 800c78a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c78e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c792:	464a      	mov	r2, r9
 800c794:	4640      	mov	r0, r8
 800c796:	4798      	blx	r3
 800c798:	6923      	ldr	r3, [r4, #16]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	6123      	str	r3, [r4, #16]
 800c79e:	e7f0      	b.n	800c782 <_scanf_float+0x2fe>
 800c7a0:	46aa      	mov	sl, r5
 800c7a2:	46b3      	mov	fp, r6
 800c7a4:	e7de      	b.n	800c764 <_scanf_float+0x2e0>
 800c7a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c7aa:	6923      	ldr	r3, [r4, #16]
 800c7ac:	2965      	cmp	r1, #101	@ 0x65
 800c7ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800c7b2:	f106 35ff 	add.w	r5, r6, #4294967295
 800c7b6:	6123      	str	r3, [r4, #16]
 800c7b8:	d00c      	beq.n	800c7d4 <_scanf_float+0x350>
 800c7ba:	2945      	cmp	r1, #69	@ 0x45
 800c7bc:	d00a      	beq.n	800c7d4 <_scanf_float+0x350>
 800c7be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c7c2:	464a      	mov	r2, r9
 800c7c4:	4640      	mov	r0, r8
 800c7c6:	4798      	blx	r3
 800c7c8:	6923      	ldr	r3, [r4, #16]
 800c7ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	1eb5      	subs	r5, r6, #2
 800c7d2:	6123      	str	r3, [r4, #16]
 800c7d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c7d8:	464a      	mov	r2, r9
 800c7da:	4640      	mov	r0, r8
 800c7dc:	4798      	blx	r3
 800c7de:	462e      	mov	r6, r5
 800c7e0:	6822      	ldr	r2, [r4, #0]
 800c7e2:	f012 0210 	ands.w	r2, r2, #16
 800c7e6:	d001      	beq.n	800c7ec <_scanf_float+0x368>
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	e68e      	b.n	800c50a <_scanf_float+0x86>
 800c7ec:	7032      	strb	r2, [r6, #0]
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c7f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7f8:	d125      	bne.n	800c846 <_scanf_float+0x3c2>
 800c7fa:	9b02      	ldr	r3, [sp, #8]
 800c7fc:	429f      	cmp	r7, r3
 800c7fe:	d00a      	beq.n	800c816 <_scanf_float+0x392>
 800c800:	1bda      	subs	r2, r3, r7
 800c802:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c806:	429e      	cmp	r6, r3
 800c808:	bf28      	it	cs
 800c80a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c80e:	4922      	ldr	r1, [pc, #136]	@ (800c898 <_scanf_float+0x414>)
 800c810:	4630      	mov	r0, r6
 800c812:	f000 f93d 	bl	800ca90 <siprintf>
 800c816:	9901      	ldr	r1, [sp, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	4640      	mov	r0, r8
 800c81c:	f7ff f944 	bl	800baa8 <_strtod_r>
 800c820:	9b03      	ldr	r3, [sp, #12]
 800c822:	6821      	ldr	r1, [r4, #0]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f011 0f02 	tst.w	r1, #2
 800c82a:	ec57 6b10 	vmov	r6, r7, d0
 800c82e:	f103 0204 	add.w	r2, r3, #4
 800c832:	d015      	beq.n	800c860 <_scanf_float+0x3dc>
 800c834:	9903      	ldr	r1, [sp, #12]
 800c836:	600a      	str	r2, [r1, #0]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	e9c3 6700 	strd	r6, r7, [r3]
 800c83e:	68e3      	ldr	r3, [r4, #12]
 800c840:	3301      	adds	r3, #1
 800c842:	60e3      	str	r3, [r4, #12]
 800c844:	e7d0      	b.n	800c7e8 <_scanf_float+0x364>
 800c846:	9b04      	ldr	r3, [sp, #16]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0e4      	beq.n	800c816 <_scanf_float+0x392>
 800c84c:	9905      	ldr	r1, [sp, #20]
 800c84e:	230a      	movs	r3, #10
 800c850:	3101      	adds	r1, #1
 800c852:	4640      	mov	r0, r8
 800c854:	f7ff f9b4 	bl	800bbc0 <_strtol_r>
 800c858:	9b04      	ldr	r3, [sp, #16]
 800c85a:	9e05      	ldr	r6, [sp, #20]
 800c85c:	1ac2      	subs	r2, r0, r3
 800c85e:	e7d0      	b.n	800c802 <_scanf_float+0x37e>
 800c860:	f011 0f04 	tst.w	r1, #4
 800c864:	9903      	ldr	r1, [sp, #12]
 800c866:	600a      	str	r2, [r1, #0]
 800c868:	d1e6      	bne.n	800c838 <_scanf_float+0x3b4>
 800c86a:	681d      	ldr	r5, [r3, #0]
 800c86c:	4632      	mov	r2, r6
 800c86e:	463b      	mov	r3, r7
 800c870:	4630      	mov	r0, r6
 800c872:	4639      	mov	r1, r7
 800c874:	f7f4 f96a 	bl	8000b4c <__aeabi_dcmpun>
 800c878:	b128      	cbz	r0, 800c886 <_scanf_float+0x402>
 800c87a:	4808      	ldr	r0, [pc, #32]	@ (800c89c <_scanf_float+0x418>)
 800c87c:	f000 fab4 	bl	800cde8 <nanf>
 800c880:	ed85 0a00 	vstr	s0, [r5]
 800c884:	e7db      	b.n	800c83e <_scanf_float+0x3ba>
 800c886:	4630      	mov	r0, r6
 800c888:	4639      	mov	r1, r7
 800c88a:	f7f4 f9bd 	bl	8000c08 <__aeabi_d2f>
 800c88e:	6028      	str	r0, [r5, #0]
 800c890:	e7d5      	b.n	800c83e <_scanf_float+0x3ba>
 800c892:	2700      	movs	r7, #0
 800c894:	e62e      	b.n	800c4f4 <_scanf_float+0x70>
 800c896:	bf00      	nop
 800c898:	08014359 	.word	0x08014359
 800c89c:	080143fb 	.word	0x080143fb

0800c8a0 <std>:
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	b510      	push	{r4, lr}
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c8aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c8ae:	6083      	str	r3, [r0, #8]
 800c8b0:	8181      	strh	r1, [r0, #12]
 800c8b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c8b4:	81c2      	strh	r2, [r0, #14]
 800c8b6:	6183      	str	r3, [r0, #24]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	2208      	movs	r2, #8
 800c8bc:	305c      	adds	r0, #92	@ 0x5c
 800c8be:	f000 f94c 	bl	800cb5a <memset>
 800c8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f8 <std+0x58>)
 800c8c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c8fc <std+0x5c>)
 800c8c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c8ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c900 <std+0x60>)
 800c8cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c904 <std+0x64>)
 800c8d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800c8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c908 <std+0x68>)
 800c8d4:	6224      	str	r4, [r4, #32]
 800c8d6:	429c      	cmp	r4, r3
 800c8d8:	d006      	beq.n	800c8e8 <std+0x48>
 800c8da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c8de:	4294      	cmp	r4, r2
 800c8e0:	d002      	beq.n	800c8e8 <std+0x48>
 800c8e2:	33d0      	adds	r3, #208	@ 0xd0
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	d105      	bne.n	800c8f4 <std+0x54>
 800c8e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8f0:	f000 ba60 	b.w	800cdb4 <__retarget_lock_init_recursive>
 800c8f4:	bd10      	pop	{r4, pc}
 800c8f6:	bf00      	nop
 800c8f8:	0800cad5 	.word	0x0800cad5
 800c8fc:	0800caf7 	.word	0x0800caf7
 800c900:	0800cb2f 	.word	0x0800cb2f
 800c904:	0800cb53 	.word	0x0800cb53
 800c908:	2000b1d0 	.word	0x2000b1d0

0800c90c <stdio_exit_handler>:
 800c90c:	4a02      	ldr	r2, [pc, #8]	@ (800c918 <stdio_exit_handler+0xc>)
 800c90e:	4903      	ldr	r1, [pc, #12]	@ (800c91c <stdio_exit_handler+0x10>)
 800c910:	4803      	ldr	r0, [pc, #12]	@ (800c920 <stdio_exit_handler+0x14>)
 800c912:	f000 b869 	b.w	800c9e8 <_fwalk_sglue>
 800c916:	bf00      	nop
 800c918:	20000100 	.word	0x20000100
 800c91c:	0800ef31 	.word	0x0800ef31
 800c920:	2000027c 	.word	0x2000027c

0800c924 <cleanup_stdio>:
 800c924:	6841      	ldr	r1, [r0, #4]
 800c926:	4b0c      	ldr	r3, [pc, #48]	@ (800c958 <cleanup_stdio+0x34>)
 800c928:	4299      	cmp	r1, r3
 800c92a:	b510      	push	{r4, lr}
 800c92c:	4604      	mov	r4, r0
 800c92e:	d001      	beq.n	800c934 <cleanup_stdio+0x10>
 800c930:	f002 fafe 	bl	800ef30 <_fflush_r>
 800c934:	68a1      	ldr	r1, [r4, #8]
 800c936:	4b09      	ldr	r3, [pc, #36]	@ (800c95c <cleanup_stdio+0x38>)
 800c938:	4299      	cmp	r1, r3
 800c93a:	d002      	beq.n	800c942 <cleanup_stdio+0x1e>
 800c93c:	4620      	mov	r0, r4
 800c93e:	f002 faf7 	bl	800ef30 <_fflush_r>
 800c942:	68e1      	ldr	r1, [r4, #12]
 800c944:	4b06      	ldr	r3, [pc, #24]	@ (800c960 <cleanup_stdio+0x3c>)
 800c946:	4299      	cmp	r1, r3
 800c948:	d004      	beq.n	800c954 <cleanup_stdio+0x30>
 800c94a:	4620      	mov	r0, r4
 800c94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c950:	f002 baee 	b.w	800ef30 <_fflush_r>
 800c954:	bd10      	pop	{r4, pc}
 800c956:	bf00      	nop
 800c958:	2000b1d0 	.word	0x2000b1d0
 800c95c:	2000b238 	.word	0x2000b238
 800c960:	2000b2a0 	.word	0x2000b2a0

0800c964 <global_stdio_init.part.0>:
 800c964:	b510      	push	{r4, lr}
 800c966:	4b0b      	ldr	r3, [pc, #44]	@ (800c994 <global_stdio_init.part.0+0x30>)
 800c968:	4c0b      	ldr	r4, [pc, #44]	@ (800c998 <global_stdio_init.part.0+0x34>)
 800c96a:	4a0c      	ldr	r2, [pc, #48]	@ (800c99c <global_stdio_init.part.0+0x38>)
 800c96c:	601a      	str	r2, [r3, #0]
 800c96e:	4620      	mov	r0, r4
 800c970:	2200      	movs	r2, #0
 800c972:	2104      	movs	r1, #4
 800c974:	f7ff ff94 	bl	800c8a0 <std>
 800c978:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c97c:	2201      	movs	r2, #1
 800c97e:	2109      	movs	r1, #9
 800c980:	f7ff ff8e 	bl	800c8a0 <std>
 800c984:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c988:	2202      	movs	r2, #2
 800c98a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c98e:	2112      	movs	r1, #18
 800c990:	f7ff bf86 	b.w	800c8a0 <std>
 800c994:	2000b308 	.word	0x2000b308
 800c998:	2000b1d0 	.word	0x2000b1d0
 800c99c:	0800c90d 	.word	0x0800c90d

0800c9a0 <__sfp_lock_acquire>:
 800c9a0:	4801      	ldr	r0, [pc, #4]	@ (800c9a8 <__sfp_lock_acquire+0x8>)
 800c9a2:	f000 ba08 	b.w	800cdb6 <__retarget_lock_acquire_recursive>
 800c9a6:	bf00      	nop
 800c9a8:	2000b311 	.word	0x2000b311

0800c9ac <__sfp_lock_release>:
 800c9ac:	4801      	ldr	r0, [pc, #4]	@ (800c9b4 <__sfp_lock_release+0x8>)
 800c9ae:	f000 ba03 	b.w	800cdb8 <__retarget_lock_release_recursive>
 800c9b2:	bf00      	nop
 800c9b4:	2000b311 	.word	0x2000b311

0800c9b8 <__sinit>:
 800c9b8:	b510      	push	{r4, lr}
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	f7ff fff0 	bl	800c9a0 <__sfp_lock_acquire>
 800c9c0:	6a23      	ldr	r3, [r4, #32]
 800c9c2:	b11b      	cbz	r3, 800c9cc <__sinit+0x14>
 800c9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9c8:	f7ff bff0 	b.w	800c9ac <__sfp_lock_release>
 800c9cc:	4b04      	ldr	r3, [pc, #16]	@ (800c9e0 <__sinit+0x28>)
 800c9ce:	6223      	str	r3, [r4, #32]
 800c9d0:	4b04      	ldr	r3, [pc, #16]	@ (800c9e4 <__sinit+0x2c>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1f5      	bne.n	800c9c4 <__sinit+0xc>
 800c9d8:	f7ff ffc4 	bl	800c964 <global_stdio_init.part.0>
 800c9dc:	e7f2      	b.n	800c9c4 <__sinit+0xc>
 800c9de:	bf00      	nop
 800c9e0:	0800c925 	.word	0x0800c925
 800c9e4:	2000b308 	.word	0x2000b308

0800c9e8 <_fwalk_sglue>:
 800c9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ec:	4607      	mov	r7, r0
 800c9ee:	4688      	mov	r8, r1
 800c9f0:	4614      	mov	r4, r2
 800c9f2:	2600      	movs	r6, #0
 800c9f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9f8:	f1b9 0901 	subs.w	r9, r9, #1
 800c9fc:	d505      	bpl.n	800ca0a <_fwalk_sglue+0x22>
 800c9fe:	6824      	ldr	r4, [r4, #0]
 800ca00:	2c00      	cmp	r4, #0
 800ca02:	d1f7      	bne.n	800c9f4 <_fwalk_sglue+0xc>
 800ca04:	4630      	mov	r0, r6
 800ca06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca0a:	89ab      	ldrh	r3, [r5, #12]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d907      	bls.n	800ca20 <_fwalk_sglue+0x38>
 800ca10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca14:	3301      	adds	r3, #1
 800ca16:	d003      	beq.n	800ca20 <_fwalk_sglue+0x38>
 800ca18:	4629      	mov	r1, r5
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	47c0      	blx	r8
 800ca1e:	4306      	orrs	r6, r0
 800ca20:	3568      	adds	r5, #104	@ 0x68
 800ca22:	e7e9      	b.n	800c9f8 <_fwalk_sglue+0x10>

0800ca24 <sniprintf>:
 800ca24:	b40c      	push	{r2, r3}
 800ca26:	b530      	push	{r4, r5, lr}
 800ca28:	4b18      	ldr	r3, [pc, #96]	@ (800ca8c <sniprintf+0x68>)
 800ca2a:	1e0c      	subs	r4, r1, #0
 800ca2c:	681d      	ldr	r5, [r3, #0]
 800ca2e:	b09d      	sub	sp, #116	@ 0x74
 800ca30:	da08      	bge.n	800ca44 <sniprintf+0x20>
 800ca32:	238b      	movs	r3, #139	@ 0x8b
 800ca34:	602b      	str	r3, [r5, #0]
 800ca36:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3a:	b01d      	add	sp, #116	@ 0x74
 800ca3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca40:	b002      	add	sp, #8
 800ca42:	4770      	bx	lr
 800ca44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ca48:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ca4c:	f04f 0300 	mov.w	r3, #0
 800ca50:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ca52:	bf14      	ite	ne
 800ca54:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ca58:	4623      	moveq	r3, r4
 800ca5a:	9304      	str	r3, [sp, #16]
 800ca5c:	9307      	str	r3, [sp, #28]
 800ca5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca62:	9002      	str	r0, [sp, #8]
 800ca64:	9006      	str	r0, [sp, #24]
 800ca66:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ca6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ca6c:	ab21      	add	r3, sp, #132	@ 0x84
 800ca6e:	a902      	add	r1, sp, #8
 800ca70:	4628      	mov	r0, r5
 800ca72:	9301      	str	r3, [sp, #4]
 800ca74:	f002 f8dc 	bl	800ec30 <_svfiprintf_r>
 800ca78:	1c43      	adds	r3, r0, #1
 800ca7a:	bfbc      	itt	lt
 800ca7c:	238b      	movlt	r3, #139	@ 0x8b
 800ca7e:	602b      	strlt	r3, [r5, #0]
 800ca80:	2c00      	cmp	r4, #0
 800ca82:	d0da      	beq.n	800ca3a <sniprintf+0x16>
 800ca84:	9b02      	ldr	r3, [sp, #8]
 800ca86:	2200      	movs	r2, #0
 800ca88:	701a      	strb	r2, [r3, #0]
 800ca8a:	e7d6      	b.n	800ca3a <sniprintf+0x16>
 800ca8c:	20000278 	.word	0x20000278

0800ca90 <siprintf>:
 800ca90:	b40e      	push	{r1, r2, r3}
 800ca92:	b510      	push	{r4, lr}
 800ca94:	b09d      	sub	sp, #116	@ 0x74
 800ca96:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ca98:	9002      	str	r0, [sp, #8]
 800ca9a:	9006      	str	r0, [sp, #24]
 800ca9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800caa0:	480a      	ldr	r0, [pc, #40]	@ (800cacc <siprintf+0x3c>)
 800caa2:	9107      	str	r1, [sp, #28]
 800caa4:	9104      	str	r1, [sp, #16]
 800caa6:	490a      	ldr	r1, [pc, #40]	@ (800cad0 <siprintf+0x40>)
 800caa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800caac:	9105      	str	r1, [sp, #20]
 800caae:	2400      	movs	r4, #0
 800cab0:	a902      	add	r1, sp, #8
 800cab2:	6800      	ldr	r0, [r0, #0]
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cab8:	f002 f8ba 	bl	800ec30 <_svfiprintf_r>
 800cabc:	9b02      	ldr	r3, [sp, #8]
 800cabe:	701c      	strb	r4, [r3, #0]
 800cac0:	b01d      	add	sp, #116	@ 0x74
 800cac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac6:	b003      	add	sp, #12
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	20000278 	.word	0x20000278
 800cad0:	ffff0208 	.word	0xffff0208

0800cad4 <__sread>:
 800cad4:	b510      	push	{r4, lr}
 800cad6:	460c      	mov	r4, r1
 800cad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cadc:	f000 f90c 	bl	800ccf8 <_read_r>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	bfab      	itete	ge
 800cae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cae6:	89a3      	ldrhlt	r3, [r4, #12]
 800cae8:	181b      	addge	r3, r3, r0
 800caea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800caee:	bfac      	ite	ge
 800caf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800caf2:	81a3      	strhlt	r3, [r4, #12]
 800caf4:	bd10      	pop	{r4, pc}

0800caf6 <__swrite>:
 800caf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cafa:	461f      	mov	r7, r3
 800cafc:	898b      	ldrh	r3, [r1, #12]
 800cafe:	05db      	lsls	r3, r3, #23
 800cb00:	4605      	mov	r5, r0
 800cb02:	460c      	mov	r4, r1
 800cb04:	4616      	mov	r6, r2
 800cb06:	d505      	bpl.n	800cb14 <__swrite+0x1e>
 800cb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f000 f8e0 	bl	800ccd4 <_lseek_r>
 800cb14:	89a3      	ldrh	r3, [r4, #12]
 800cb16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb1e:	81a3      	strh	r3, [r4, #12]
 800cb20:	4632      	mov	r2, r6
 800cb22:	463b      	mov	r3, r7
 800cb24:	4628      	mov	r0, r5
 800cb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2a:	f000 b907 	b.w	800cd3c <_write_r>

0800cb2e <__sseek>:
 800cb2e:	b510      	push	{r4, lr}
 800cb30:	460c      	mov	r4, r1
 800cb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb36:	f000 f8cd 	bl	800ccd4 <_lseek_r>
 800cb3a:	1c43      	adds	r3, r0, #1
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	bf15      	itete	ne
 800cb40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cb42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cb46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cb4a:	81a3      	strheq	r3, [r4, #12]
 800cb4c:	bf18      	it	ne
 800cb4e:	81a3      	strhne	r3, [r4, #12]
 800cb50:	bd10      	pop	{r4, pc}

0800cb52 <__sclose>:
 800cb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb56:	f000 b8ad 	b.w	800ccb4 <_close_r>

0800cb5a <memset>:
 800cb5a:	4402      	add	r2, r0
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d100      	bne.n	800cb64 <memset+0xa>
 800cb62:	4770      	bx	lr
 800cb64:	f803 1b01 	strb.w	r1, [r3], #1
 800cb68:	e7f9      	b.n	800cb5e <memset+0x4>

0800cb6a <strchr>:
 800cb6a:	b2c9      	uxtb	r1, r1
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb74:	b112      	cbz	r2, 800cb7c <strchr+0x12>
 800cb76:	428a      	cmp	r2, r1
 800cb78:	d1f9      	bne.n	800cb6e <strchr+0x4>
 800cb7a:	4770      	bx	lr
 800cb7c:	2900      	cmp	r1, #0
 800cb7e:	bf18      	it	ne
 800cb80:	2000      	movne	r0, #0
 800cb82:	4770      	bx	lr

0800cb84 <strncat>:
 800cb84:	b530      	push	{r4, r5, lr}
 800cb86:	4604      	mov	r4, r0
 800cb88:	7825      	ldrb	r5, [r4, #0]
 800cb8a:	4623      	mov	r3, r4
 800cb8c:	3401      	adds	r4, #1
 800cb8e:	2d00      	cmp	r5, #0
 800cb90:	d1fa      	bne.n	800cb88 <strncat+0x4>
 800cb92:	3a01      	subs	r2, #1
 800cb94:	d304      	bcc.n	800cba0 <strncat+0x1c>
 800cb96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb9a:	f803 4b01 	strb.w	r4, [r3], #1
 800cb9e:	b904      	cbnz	r4, 800cba2 <strncat+0x1e>
 800cba0:	bd30      	pop	{r4, r5, pc}
 800cba2:	2a00      	cmp	r2, #0
 800cba4:	d1f5      	bne.n	800cb92 <strncat+0xe>
 800cba6:	701a      	strb	r2, [r3, #0]
 800cba8:	e7f3      	b.n	800cb92 <strncat+0xe>

0800cbaa <strncmp>:
 800cbaa:	b510      	push	{r4, lr}
 800cbac:	b16a      	cbz	r2, 800cbca <strncmp+0x20>
 800cbae:	3901      	subs	r1, #1
 800cbb0:	1884      	adds	r4, r0, r2
 800cbb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d103      	bne.n	800cbc6 <strncmp+0x1c>
 800cbbe:	42a0      	cmp	r0, r4
 800cbc0:	d001      	beq.n	800cbc6 <strncmp+0x1c>
 800cbc2:	2a00      	cmp	r2, #0
 800cbc4:	d1f5      	bne.n	800cbb2 <strncmp+0x8>
 800cbc6:	1ad0      	subs	r0, r2, r3
 800cbc8:	bd10      	pop	{r4, pc}
 800cbca:	4610      	mov	r0, r2
 800cbcc:	e7fc      	b.n	800cbc8 <strncmp+0x1e>

0800cbce <strncpy>:
 800cbce:	b510      	push	{r4, lr}
 800cbd0:	3901      	subs	r1, #1
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	b132      	cbz	r2, 800cbe4 <strncpy+0x16>
 800cbd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cbda:	f803 4b01 	strb.w	r4, [r3], #1
 800cbde:	3a01      	subs	r2, #1
 800cbe0:	2c00      	cmp	r4, #0
 800cbe2:	d1f7      	bne.n	800cbd4 <strncpy+0x6>
 800cbe4:	441a      	add	r2, r3
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d100      	bne.n	800cbee <strncpy+0x20>
 800cbec:	bd10      	pop	{r4, pc}
 800cbee:	f803 1b01 	strb.w	r1, [r3], #1
 800cbf2:	e7f9      	b.n	800cbe8 <strncpy+0x1a>

0800cbf4 <strtok>:
 800cbf4:	4b16      	ldr	r3, [pc, #88]	@ (800cc50 <strtok+0x5c>)
 800cbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfa:	681f      	ldr	r7, [r3, #0]
 800cbfc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800cbfe:	4605      	mov	r5, r0
 800cc00:	460e      	mov	r6, r1
 800cc02:	b9ec      	cbnz	r4, 800cc40 <strtok+0x4c>
 800cc04:	2050      	movs	r0, #80	@ 0x50
 800cc06:	f7fe f869 	bl	800acdc <malloc>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	6478      	str	r0, [r7, #68]	@ 0x44
 800cc0e:	b920      	cbnz	r0, 800cc1a <strtok+0x26>
 800cc10:	4b10      	ldr	r3, [pc, #64]	@ (800cc54 <strtok+0x60>)
 800cc12:	4811      	ldr	r0, [pc, #68]	@ (800cc58 <strtok+0x64>)
 800cc14:	215b      	movs	r1, #91	@ 0x5b
 800cc16:	f000 f8ed 	bl	800cdf4 <__assert_func>
 800cc1a:	e9c0 4400 	strd	r4, r4, [r0]
 800cc1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cc22:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cc26:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800cc2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800cc2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800cc32:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800cc36:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800cc3a:	6184      	str	r4, [r0, #24]
 800cc3c:	7704      	strb	r4, [r0, #28]
 800cc3e:	6244      	str	r4, [r0, #36]	@ 0x24
 800cc40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc42:	4631      	mov	r1, r6
 800cc44:	4628      	mov	r0, r5
 800cc46:	2301      	movs	r3, #1
 800cc48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4c:	f000 b806 	b.w	800cc5c <__strtok_r>
 800cc50:	20000278 	.word	0x20000278
 800cc54:	080142b4 	.word	0x080142b4
 800cc58:	0801435e 	.word	0x0801435e

0800cc5c <__strtok_r>:
 800cc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc5e:	4604      	mov	r4, r0
 800cc60:	b908      	cbnz	r0, 800cc66 <__strtok_r+0xa>
 800cc62:	6814      	ldr	r4, [r2, #0]
 800cc64:	b144      	cbz	r4, 800cc78 <__strtok_r+0x1c>
 800cc66:	4620      	mov	r0, r4
 800cc68:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cc6c:	460f      	mov	r7, r1
 800cc6e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cc72:	b91e      	cbnz	r6, 800cc7c <__strtok_r+0x20>
 800cc74:	b965      	cbnz	r5, 800cc90 <__strtok_r+0x34>
 800cc76:	6015      	str	r5, [r2, #0]
 800cc78:	2000      	movs	r0, #0
 800cc7a:	e005      	b.n	800cc88 <__strtok_r+0x2c>
 800cc7c:	42b5      	cmp	r5, r6
 800cc7e:	d1f6      	bne.n	800cc6e <__strtok_r+0x12>
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1f0      	bne.n	800cc66 <__strtok_r+0xa>
 800cc84:	6014      	str	r4, [r2, #0]
 800cc86:	7003      	strb	r3, [r0, #0]
 800cc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc8a:	461c      	mov	r4, r3
 800cc8c:	e00c      	b.n	800cca8 <__strtok_r+0x4c>
 800cc8e:	b91d      	cbnz	r5, 800cc98 <__strtok_r+0x3c>
 800cc90:	4627      	mov	r7, r4
 800cc92:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc96:	460e      	mov	r6, r1
 800cc98:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cc9c:	42ab      	cmp	r3, r5
 800cc9e:	d1f6      	bne.n	800cc8e <__strtok_r+0x32>
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d0f2      	beq.n	800cc8a <__strtok_r+0x2e>
 800cca4:	2300      	movs	r3, #0
 800cca6:	703b      	strb	r3, [r7, #0]
 800cca8:	6014      	str	r4, [r2, #0]
 800ccaa:	e7ed      	b.n	800cc88 <__strtok_r+0x2c>

0800ccac <_localeconv_r>:
 800ccac:	4800      	ldr	r0, [pc, #0]	@ (800ccb0 <_localeconv_r+0x4>)
 800ccae:	4770      	bx	lr
 800ccb0:	200001fc 	.word	0x200001fc

0800ccb4 <_close_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d06      	ldr	r5, [pc, #24]	@ (800ccd0 <_close_r+0x1c>)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7f5 fcee 	bl	80026a0 <_close>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_close_r+0x1a>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_close_r+0x1a>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	2000b30c 	.word	0x2000b30c

0800ccd4 <_lseek_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d07      	ldr	r5, [pc, #28]	@ (800ccf4 <_lseek_r+0x20>)
 800ccd8:	4604      	mov	r4, r0
 800ccda:	4608      	mov	r0, r1
 800ccdc:	4611      	mov	r1, r2
 800ccde:	2200      	movs	r2, #0
 800cce0:	602a      	str	r2, [r5, #0]
 800cce2:	461a      	mov	r2, r3
 800cce4:	f7f5 fd03 	bl	80026ee <_lseek>
 800cce8:	1c43      	adds	r3, r0, #1
 800ccea:	d102      	bne.n	800ccf2 <_lseek_r+0x1e>
 800ccec:	682b      	ldr	r3, [r5, #0]
 800ccee:	b103      	cbz	r3, 800ccf2 <_lseek_r+0x1e>
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	bd38      	pop	{r3, r4, r5, pc}
 800ccf4:	2000b30c 	.word	0x2000b30c

0800ccf8 <_read_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d07      	ldr	r5, [pc, #28]	@ (800cd18 <_read_r+0x20>)
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	4608      	mov	r0, r1
 800cd00:	4611      	mov	r1, r2
 800cd02:	2200      	movs	r2, #0
 800cd04:	602a      	str	r2, [r5, #0]
 800cd06:	461a      	mov	r2, r3
 800cd08:	f7f5 fc91 	bl	800262e <_read>
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	d102      	bne.n	800cd16 <_read_r+0x1e>
 800cd10:	682b      	ldr	r3, [r5, #0]
 800cd12:	b103      	cbz	r3, 800cd16 <_read_r+0x1e>
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	bd38      	pop	{r3, r4, r5, pc}
 800cd18:	2000b30c 	.word	0x2000b30c

0800cd1c <_sbrk_r>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	4d06      	ldr	r5, [pc, #24]	@ (800cd38 <_sbrk_r+0x1c>)
 800cd20:	2300      	movs	r3, #0
 800cd22:	4604      	mov	r4, r0
 800cd24:	4608      	mov	r0, r1
 800cd26:	602b      	str	r3, [r5, #0]
 800cd28:	f7f5 fcee 	bl	8002708 <_sbrk>
 800cd2c:	1c43      	adds	r3, r0, #1
 800cd2e:	d102      	bne.n	800cd36 <_sbrk_r+0x1a>
 800cd30:	682b      	ldr	r3, [r5, #0]
 800cd32:	b103      	cbz	r3, 800cd36 <_sbrk_r+0x1a>
 800cd34:	6023      	str	r3, [r4, #0]
 800cd36:	bd38      	pop	{r3, r4, r5, pc}
 800cd38:	2000b30c 	.word	0x2000b30c

0800cd3c <_write_r>:
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4d07      	ldr	r5, [pc, #28]	@ (800cd5c <_write_r+0x20>)
 800cd40:	4604      	mov	r4, r0
 800cd42:	4608      	mov	r0, r1
 800cd44:	4611      	mov	r1, r2
 800cd46:	2200      	movs	r2, #0
 800cd48:	602a      	str	r2, [r5, #0]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	f7f5 fc8c 	bl	8002668 <_write>
 800cd50:	1c43      	adds	r3, r0, #1
 800cd52:	d102      	bne.n	800cd5a <_write_r+0x1e>
 800cd54:	682b      	ldr	r3, [r5, #0]
 800cd56:	b103      	cbz	r3, 800cd5a <_write_r+0x1e>
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	2000b30c 	.word	0x2000b30c

0800cd60 <__errno>:
 800cd60:	4b01      	ldr	r3, [pc, #4]	@ (800cd68 <__errno+0x8>)
 800cd62:	6818      	ldr	r0, [r3, #0]
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	20000278 	.word	0x20000278

0800cd6c <__libc_init_array>:
 800cd6c:	b570      	push	{r4, r5, r6, lr}
 800cd6e:	4d0d      	ldr	r5, [pc, #52]	@ (800cda4 <__libc_init_array+0x38>)
 800cd70:	4c0d      	ldr	r4, [pc, #52]	@ (800cda8 <__libc_init_array+0x3c>)
 800cd72:	1b64      	subs	r4, r4, r5
 800cd74:	10a4      	asrs	r4, r4, #2
 800cd76:	2600      	movs	r6, #0
 800cd78:	42a6      	cmp	r6, r4
 800cd7a:	d109      	bne.n	800cd90 <__libc_init_array+0x24>
 800cd7c:	4d0b      	ldr	r5, [pc, #44]	@ (800cdac <__libc_init_array+0x40>)
 800cd7e:	4c0c      	ldr	r4, [pc, #48]	@ (800cdb0 <__libc_init_array+0x44>)
 800cd80:	f002 fc3a 	bl	800f5f8 <_init>
 800cd84:	1b64      	subs	r4, r4, r5
 800cd86:	10a4      	asrs	r4, r4, #2
 800cd88:	2600      	movs	r6, #0
 800cd8a:	42a6      	cmp	r6, r4
 800cd8c:	d105      	bne.n	800cd9a <__libc_init_array+0x2e>
 800cd8e:	bd70      	pop	{r4, r5, r6, pc}
 800cd90:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd94:	4798      	blx	r3
 800cd96:	3601      	adds	r6, #1
 800cd98:	e7ee      	b.n	800cd78 <__libc_init_array+0xc>
 800cd9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd9e:	4798      	blx	r3
 800cda0:	3601      	adds	r6, #1
 800cda2:	e7f2      	b.n	800cd8a <__libc_init_array+0x1e>
 800cda4:	08014798 	.word	0x08014798
 800cda8:	08014798 	.word	0x08014798
 800cdac:	08014798 	.word	0x08014798
 800cdb0:	0801479c 	.word	0x0801479c

0800cdb4 <__retarget_lock_init_recursive>:
 800cdb4:	4770      	bx	lr

0800cdb6 <__retarget_lock_acquire_recursive>:
 800cdb6:	4770      	bx	lr

0800cdb8 <__retarget_lock_release_recursive>:
 800cdb8:	4770      	bx	lr

0800cdba <memcpy>:
 800cdba:	440a      	add	r2, r1
 800cdbc:	4291      	cmp	r1, r2
 800cdbe:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdc2:	d100      	bne.n	800cdc6 <memcpy+0xc>
 800cdc4:	4770      	bx	lr
 800cdc6:	b510      	push	{r4, lr}
 800cdc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdd0:	4291      	cmp	r1, r2
 800cdd2:	d1f9      	bne.n	800cdc8 <memcpy+0xe>
 800cdd4:	bd10      	pop	{r4, pc}
	...

0800cdd8 <nan>:
 800cdd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cde0 <nan+0x8>
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	00000000 	.word	0x00000000
 800cde4:	7ff80000 	.word	0x7ff80000

0800cde8 <nanf>:
 800cde8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cdf0 <nanf+0x8>
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	7fc00000 	.word	0x7fc00000

0800cdf4 <__assert_func>:
 800cdf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdf6:	4614      	mov	r4, r2
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	4b09      	ldr	r3, [pc, #36]	@ (800ce20 <__assert_func+0x2c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4605      	mov	r5, r0
 800ce00:	68d8      	ldr	r0, [r3, #12]
 800ce02:	b14c      	cbz	r4, 800ce18 <__assert_func+0x24>
 800ce04:	4b07      	ldr	r3, [pc, #28]	@ (800ce24 <__assert_func+0x30>)
 800ce06:	9100      	str	r1, [sp, #0]
 800ce08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce0c:	4906      	ldr	r1, [pc, #24]	@ (800ce28 <__assert_func+0x34>)
 800ce0e:	462b      	mov	r3, r5
 800ce10:	f002 f8b6 	bl	800ef80 <fiprintf>
 800ce14:	f002 f8e0 	bl	800efd8 <abort>
 800ce18:	4b04      	ldr	r3, [pc, #16]	@ (800ce2c <__assert_func+0x38>)
 800ce1a:	461c      	mov	r4, r3
 800ce1c:	e7f3      	b.n	800ce06 <__assert_func+0x12>
 800ce1e:	bf00      	nop
 800ce20:	20000278 	.word	0x20000278
 800ce24:	080143c0 	.word	0x080143c0
 800ce28:	080143cd 	.word	0x080143cd
 800ce2c:	080143fb 	.word	0x080143fb

0800ce30 <quorem>:
 800ce30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce34:	6903      	ldr	r3, [r0, #16]
 800ce36:	690c      	ldr	r4, [r1, #16]
 800ce38:	42a3      	cmp	r3, r4
 800ce3a:	4607      	mov	r7, r0
 800ce3c:	db7e      	blt.n	800cf3c <quorem+0x10c>
 800ce3e:	3c01      	subs	r4, #1
 800ce40:	f101 0814 	add.w	r8, r1, #20
 800ce44:	00a3      	lsls	r3, r4, #2
 800ce46:	f100 0514 	add.w	r5, r0, #20
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce50:	9301      	str	r3, [sp, #4]
 800ce52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce62:	fbb2 f6f3 	udiv	r6, r2, r3
 800ce66:	d32e      	bcc.n	800cec6 <quorem+0x96>
 800ce68:	f04f 0a00 	mov.w	sl, #0
 800ce6c:	46c4      	mov	ip, r8
 800ce6e:	46ae      	mov	lr, r5
 800ce70:	46d3      	mov	fp, sl
 800ce72:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce76:	b298      	uxth	r0, r3
 800ce78:	fb06 a000 	mla	r0, r6, r0, sl
 800ce7c:	0c02      	lsrs	r2, r0, #16
 800ce7e:	0c1b      	lsrs	r3, r3, #16
 800ce80:	fb06 2303 	mla	r3, r6, r3, r2
 800ce84:	f8de 2000 	ldr.w	r2, [lr]
 800ce88:	b280      	uxth	r0, r0
 800ce8a:	b292      	uxth	r2, r2
 800ce8c:	1a12      	subs	r2, r2, r0
 800ce8e:	445a      	add	r2, fp
 800ce90:	f8de 0000 	ldr.w	r0, [lr]
 800ce94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ce9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cea2:	b292      	uxth	r2, r2
 800cea4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cea8:	45e1      	cmp	r9, ip
 800ceaa:	f84e 2b04 	str.w	r2, [lr], #4
 800ceae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ceb2:	d2de      	bcs.n	800ce72 <quorem+0x42>
 800ceb4:	9b00      	ldr	r3, [sp, #0]
 800ceb6:	58eb      	ldr	r3, [r5, r3]
 800ceb8:	b92b      	cbnz	r3, 800cec6 <quorem+0x96>
 800ceba:	9b01      	ldr	r3, [sp, #4]
 800cebc:	3b04      	subs	r3, #4
 800cebe:	429d      	cmp	r5, r3
 800cec0:	461a      	mov	r2, r3
 800cec2:	d32f      	bcc.n	800cf24 <quorem+0xf4>
 800cec4:	613c      	str	r4, [r7, #16]
 800cec6:	4638      	mov	r0, r7
 800cec8:	f001 fc5c 	bl	800e784 <__mcmp>
 800cecc:	2800      	cmp	r0, #0
 800cece:	db25      	blt.n	800cf1c <quorem+0xec>
 800ced0:	4629      	mov	r1, r5
 800ced2:	2000      	movs	r0, #0
 800ced4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ced8:	f8d1 c000 	ldr.w	ip, [r1]
 800cedc:	fa1f fe82 	uxth.w	lr, r2
 800cee0:	fa1f f38c 	uxth.w	r3, ip
 800cee4:	eba3 030e 	sub.w	r3, r3, lr
 800cee8:	4403      	add	r3, r0
 800ceea:	0c12      	lsrs	r2, r2, #16
 800ceec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cef0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cefa:	45c1      	cmp	r9, r8
 800cefc:	f841 3b04 	str.w	r3, [r1], #4
 800cf00:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf04:	d2e6      	bcs.n	800ced4 <quorem+0xa4>
 800cf06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf0e:	b922      	cbnz	r2, 800cf1a <quorem+0xea>
 800cf10:	3b04      	subs	r3, #4
 800cf12:	429d      	cmp	r5, r3
 800cf14:	461a      	mov	r2, r3
 800cf16:	d30b      	bcc.n	800cf30 <quorem+0x100>
 800cf18:	613c      	str	r4, [r7, #16]
 800cf1a:	3601      	adds	r6, #1
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	b003      	add	sp, #12
 800cf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf24:	6812      	ldr	r2, [r2, #0]
 800cf26:	3b04      	subs	r3, #4
 800cf28:	2a00      	cmp	r2, #0
 800cf2a:	d1cb      	bne.n	800cec4 <quorem+0x94>
 800cf2c:	3c01      	subs	r4, #1
 800cf2e:	e7c6      	b.n	800cebe <quorem+0x8e>
 800cf30:	6812      	ldr	r2, [r2, #0]
 800cf32:	3b04      	subs	r3, #4
 800cf34:	2a00      	cmp	r2, #0
 800cf36:	d1ef      	bne.n	800cf18 <quorem+0xe8>
 800cf38:	3c01      	subs	r4, #1
 800cf3a:	e7ea      	b.n	800cf12 <quorem+0xe2>
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	e7ee      	b.n	800cf1e <quorem+0xee>

0800cf40 <_dtoa_r>:
 800cf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf44:	69c7      	ldr	r7, [r0, #28]
 800cf46:	b097      	sub	sp, #92	@ 0x5c
 800cf48:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cf4c:	ec55 4b10 	vmov	r4, r5, d0
 800cf50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cf52:	9107      	str	r1, [sp, #28]
 800cf54:	4681      	mov	r9, r0
 800cf56:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf58:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf5a:	b97f      	cbnz	r7, 800cf7c <_dtoa_r+0x3c>
 800cf5c:	2010      	movs	r0, #16
 800cf5e:	f7fd febd 	bl	800acdc <malloc>
 800cf62:	4602      	mov	r2, r0
 800cf64:	f8c9 001c 	str.w	r0, [r9, #28]
 800cf68:	b920      	cbnz	r0, 800cf74 <_dtoa_r+0x34>
 800cf6a:	4ba9      	ldr	r3, [pc, #676]	@ (800d210 <_dtoa_r+0x2d0>)
 800cf6c:	21ef      	movs	r1, #239	@ 0xef
 800cf6e:	48a9      	ldr	r0, [pc, #676]	@ (800d214 <_dtoa_r+0x2d4>)
 800cf70:	f7ff ff40 	bl	800cdf4 <__assert_func>
 800cf74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cf78:	6007      	str	r7, [r0, #0]
 800cf7a:	60c7      	str	r7, [r0, #12]
 800cf7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cf80:	6819      	ldr	r1, [r3, #0]
 800cf82:	b159      	cbz	r1, 800cf9c <_dtoa_r+0x5c>
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	604a      	str	r2, [r1, #4]
 800cf88:	2301      	movs	r3, #1
 800cf8a:	4093      	lsls	r3, r2
 800cf8c:	608b      	str	r3, [r1, #8]
 800cf8e:	4648      	mov	r0, r9
 800cf90:	f001 f97c 	bl	800e28c <_Bfree>
 800cf94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	601a      	str	r2, [r3, #0]
 800cf9c:	1e2b      	subs	r3, r5, #0
 800cf9e:	bfb9      	ittee	lt
 800cfa0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cfa4:	9305      	strlt	r3, [sp, #20]
 800cfa6:	2300      	movge	r3, #0
 800cfa8:	6033      	strge	r3, [r6, #0]
 800cfaa:	9f05      	ldr	r7, [sp, #20]
 800cfac:	4b9a      	ldr	r3, [pc, #616]	@ (800d218 <_dtoa_r+0x2d8>)
 800cfae:	bfbc      	itt	lt
 800cfb0:	2201      	movlt	r2, #1
 800cfb2:	6032      	strlt	r2, [r6, #0]
 800cfb4:	43bb      	bics	r3, r7
 800cfb6:	d112      	bne.n	800cfde <_dtoa_r+0x9e>
 800cfb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cfba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cfbe:	6013      	str	r3, [r2, #0]
 800cfc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cfc4:	4323      	orrs	r3, r4
 800cfc6:	f000 855a 	beq.w	800da7e <_dtoa_r+0xb3e>
 800cfca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cfcc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d22c <_dtoa_r+0x2ec>
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 855c 	beq.w	800da8e <_dtoa_r+0xb4e>
 800cfd6:	f10a 0303 	add.w	r3, sl, #3
 800cfda:	f000 bd56 	b.w	800da8a <_dtoa_r+0xb4a>
 800cfde:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	ec51 0b17 	vmov	r0, r1, d7
 800cfe8:	2300      	movs	r3, #0
 800cfea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cfee:	f7f3 fd7b 	bl	8000ae8 <__aeabi_dcmpeq>
 800cff2:	4680      	mov	r8, r0
 800cff4:	b158      	cbz	r0, 800d00e <_dtoa_r+0xce>
 800cff6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cff8:	2301      	movs	r3, #1
 800cffa:	6013      	str	r3, [r2, #0]
 800cffc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cffe:	b113      	cbz	r3, 800d006 <_dtoa_r+0xc6>
 800d000:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d002:	4b86      	ldr	r3, [pc, #536]	@ (800d21c <_dtoa_r+0x2dc>)
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d230 <_dtoa_r+0x2f0>
 800d00a:	f000 bd40 	b.w	800da8e <_dtoa_r+0xb4e>
 800d00e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d012:	aa14      	add	r2, sp, #80	@ 0x50
 800d014:	a915      	add	r1, sp, #84	@ 0x54
 800d016:	4648      	mov	r0, r9
 800d018:	f001 fcd4 	bl	800e9c4 <__d2b>
 800d01c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d020:	9002      	str	r0, [sp, #8]
 800d022:	2e00      	cmp	r6, #0
 800d024:	d078      	beq.n	800d118 <_dtoa_r+0x1d8>
 800d026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d028:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d02c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d034:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d038:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d03c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d040:	4619      	mov	r1, r3
 800d042:	2200      	movs	r2, #0
 800d044:	4b76      	ldr	r3, [pc, #472]	@ (800d220 <_dtoa_r+0x2e0>)
 800d046:	f7f3 f92f 	bl	80002a8 <__aeabi_dsub>
 800d04a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d1f8 <_dtoa_r+0x2b8>)
 800d04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d050:	f7f3 fae2 	bl	8000618 <__aeabi_dmul>
 800d054:	a36a      	add	r3, pc, #424	@ (adr r3, 800d200 <_dtoa_r+0x2c0>)
 800d056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05a:	f7f3 f927 	bl	80002ac <__adddf3>
 800d05e:	4604      	mov	r4, r0
 800d060:	4630      	mov	r0, r6
 800d062:	460d      	mov	r5, r1
 800d064:	f7f3 fa6e 	bl	8000544 <__aeabi_i2d>
 800d068:	a367      	add	r3, pc, #412	@ (adr r3, 800d208 <_dtoa_r+0x2c8>)
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	f7f3 fad3 	bl	8000618 <__aeabi_dmul>
 800d072:	4602      	mov	r2, r0
 800d074:	460b      	mov	r3, r1
 800d076:	4620      	mov	r0, r4
 800d078:	4629      	mov	r1, r5
 800d07a:	f7f3 f917 	bl	80002ac <__adddf3>
 800d07e:	4604      	mov	r4, r0
 800d080:	460d      	mov	r5, r1
 800d082:	f7f3 fd79 	bl	8000b78 <__aeabi_d2iz>
 800d086:	2200      	movs	r2, #0
 800d088:	4607      	mov	r7, r0
 800d08a:	2300      	movs	r3, #0
 800d08c:	4620      	mov	r0, r4
 800d08e:	4629      	mov	r1, r5
 800d090:	f7f3 fd34 	bl	8000afc <__aeabi_dcmplt>
 800d094:	b140      	cbz	r0, 800d0a8 <_dtoa_r+0x168>
 800d096:	4638      	mov	r0, r7
 800d098:	f7f3 fa54 	bl	8000544 <__aeabi_i2d>
 800d09c:	4622      	mov	r2, r4
 800d09e:	462b      	mov	r3, r5
 800d0a0:	f7f3 fd22 	bl	8000ae8 <__aeabi_dcmpeq>
 800d0a4:	b900      	cbnz	r0, 800d0a8 <_dtoa_r+0x168>
 800d0a6:	3f01      	subs	r7, #1
 800d0a8:	2f16      	cmp	r7, #22
 800d0aa:	d852      	bhi.n	800d152 <_dtoa_r+0x212>
 800d0ac:	4b5d      	ldr	r3, [pc, #372]	@ (800d224 <_dtoa_r+0x2e4>)
 800d0ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d0ba:	f7f3 fd1f 	bl	8000afc <__aeabi_dcmplt>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d049      	beq.n	800d156 <_dtoa_r+0x216>
 800d0c2:	3f01      	subs	r7, #1
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d0ca:	1b9b      	subs	r3, r3, r6
 800d0cc:	1e5a      	subs	r2, r3, #1
 800d0ce:	bf45      	ittet	mi
 800d0d0:	f1c3 0301 	rsbmi	r3, r3, #1
 800d0d4:	9300      	strmi	r3, [sp, #0]
 800d0d6:	2300      	movpl	r3, #0
 800d0d8:	2300      	movmi	r3, #0
 800d0da:	9206      	str	r2, [sp, #24]
 800d0dc:	bf54      	ite	pl
 800d0de:	9300      	strpl	r3, [sp, #0]
 800d0e0:	9306      	strmi	r3, [sp, #24]
 800d0e2:	2f00      	cmp	r7, #0
 800d0e4:	db39      	blt.n	800d15a <_dtoa_r+0x21a>
 800d0e6:	9b06      	ldr	r3, [sp, #24]
 800d0e8:	970d      	str	r7, [sp, #52]	@ 0x34
 800d0ea:	443b      	add	r3, r7
 800d0ec:	9306      	str	r3, [sp, #24]
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	9308      	str	r3, [sp, #32]
 800d0f2:	9b07      	ldr	r3, [sp, #28]
 800d0f4:	2b09      	cmp	r3, #9
 800d0f6:	d863      	bhi.n	800d1c0 <_dtoa_r+0x280>
 800d0f8:	2b05      	cmp	r3, #5
 800d0fa:	bfc4      	itt	gt
 800d0fc:	3b04      	subgt	r3, #4
 800d0fe:	9307      	strgt	r3, [sp, #28]
 800d100:	9b07      	ldr	r3, [sp, #28]
 800d102:	f1a3 0302 	sub.w	r3, r3, #2
 800d106:	bfcc      	ite	gt
 800d108:	2400      	movgt	r4, #0
 800d10a:	2401      	movle	r4, #1
 800d10c:	2b03      	cmp	r3, #3
 800d10e:	d863      	bhi.n	800d1d8 <_dtoa_r+0x298>
 800d110:	e8df f003 	tbb	[pc, r3]
 800d114:	2b375452 	.word	0x2b375452
 800d118:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d11c:	441e      	add	r6, r3
 800d11e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d122:	2b20      	cmp	r3, #32
 800d124:	bfc1      	itttt	gt
 800d126:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d12a:	409f      	lslgt	r7, r3
 800d12c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d130:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d134:	bfd6      	itet	le
 800d136:	f1c3 0320 	rsble	r3, r3, #32
 800d13a:	ea47 0003 	orrgt.w	r0, r7, r3
 800d13e:	fa04 f003 	lslle.w	r0, r4, r3
 800d142:	f7f3 f9ef 	bl	8000524 <__aeabi_ui2d>
 800d146:	2201      	movs	r2, #1
 800d148:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d14c:	3e01      	subs	r6, #1
 800d14e:	9212      	str	r2, [sp, #72]	@ 0x48
 800d150:	e776      	b.n	800d040 <_dtoa_r+0x100>
 800d152:	2301      	movs	r3, #1
 800d154:	e7b7      	b.n	800d0c6 <_dtoa_r+0x186>
 800d156:	9010      	str	r0, [sp, #64]	@ 0x40
 800d158:	e7b6      	b.n	800d0c8 <_dtoa_r+0x188>
 800d15a:	9b00      	ldr	r3, [sp, #0]
 800d15c:	1bdb      	subs	r3, r3, r7
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	427b      	negs	r3, r7
 800d162:	9308      	str	r3, [sp, #32]
 800d164:	2300      	movs	r3, #0
 800d166:	930d      	str	r3, [sp, #52]	@ 0x34
 800d168:	e7c3      	b.n	800d0f2 <_dtoa_r+0x1b2>
 800d16a:	2301      	movs	r3, #1
 800d16c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d16e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d170:	eb07 0b03 	add.w	fp, r7, r3
 800d174:	f10b 0301 	add.w	r3, fp, #1
 800d178:	2b01      	cmp	r3, #1
 800d17a:	9303      	str	r3, [sp, #12]
 800d17c:	bfb8      	it	lt
 800d17e:	2301      	movlt	r3, #1
 800d180:	e006      	b.n	800d190 <_dtoa_r+0x250>
 800d182:	2301      	movs	r3, #1
 800d184:	9309      	str	r3, [sp, #36]	@ 0x24
 800d186:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d188:	2b00      	cmp	r3, #0
 800d18a:	dd28      	ble.n	800d1de <_dtoa_r+0x29e>
 800d18c:	469b      	mov	fp, r3
 800d18e:	9303      	str	r3, [sp, #12]
 800d190:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d194:	2100      	movs	r1, #0
 800d196:	2204      	movs	r2, #4
 800d198:	f102 0514 	add.w	r5, r2, #20
 800d19c:	429d      	cmp	r5, r3
 800d19e:	d926      	bls.n	800d1ee <_dtoa_r+0x2ae>
 800d1a0:	6041      	str	r1, [r0, #4]
 800d1a2:	4648      	mov	r0, r9
 800d1a4:	f001 f832 	bl	800e20c <_Balloc>
 800d1a8:	4682      	mov	sl, r0
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d142      	bne.n	800d234 <_dtoa_r+0x2f4>
 800d1ae:	4b1e      	ldr	r3, [pc, #120]	@ (800d228 <_dtoa_r+0x2e8>)
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	f240 11af 	movw	r1, #431	@ 0x1af
 800d1b6:	e6da      	b.n	800cf6e <_dtoa_r+0x2e>
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	e7e3      	b.n	800d184 <_dtoa_r+0x244>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e7d5      	b.n	800d16c <_dtoa_r+0x22c>
 800d1c0:	2401      	movs	r4, #1
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9307      	str	r3, [sp, #28]
 800d1c6:	9409      	str	r4, [sp, #36]	@ 0x24
 800d1c8:	f04f 3bff 	mov.w	fp, #4294967295
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f8cd b00c 	str.w	fp, [sp, #12]
 800d1d2:	2312      	movs	r3, #18
 800d1d4:	920c      	str	r2, [sp, #48]	@ 0x30
 800d1d6:	e7db      	b.n	800d190 <_dtoa_r+0x250>
 800d1d8:	2301      	movs	r3, #1
 800d1da:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1dc:	e7f4      	b.n	800d1c8 <_dtoa_r+0x288>
 800d1de:	f04f 0b01 	mov.w	fp, #1
 800d1e2:	f8cd b00c 	str.w	fp, [sp, #12]
 800d1e6:	465b      	mov	r3, fp
 800d1e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d1ec:	e7d0      	b.n	800d190 <_dtoa_r+0x250>
 800d1ee:	3101      	adds	r1, #1
 800d1f0:	0052      	lsls	r2, r2, #1
 800d1f2:	e7d1      	b.n	800d198 <_dtoa_r+0x258>
 800d1f4:	f3af 8000 	nop.w
 800d1f8:	636f4361 	.word	0x636f4361
 800d1fc:	3fd287a7 	.word	0x3fd287a7
 800d200:	8b60c8b3 	.word	0x8b60c8b3
 800d204:	3fc68a28 	.word	0x3fc68a28
 800d208:	509f79fb 	.word	0x509f79fb
 800d20c:	3fd34413 	.word	0x3fd34413
 800d210:	080142b4 	.word	0x080142b4
 800d214:	08014409 	.word	0x08014409
 800d218:	7ff00000 	.word	0x7ff00000
 800d21c:	08014336 	.word	0x08014336
 800d220:	3ff80000 	.word	0x3ff80000
 800d224:	080146c8 	.word	0x080146c8
 800d228:	08014461 	.word	0x08014461
 800d22c:	08014405 	.word	0x08014405
 800d230:	08014335 	.word	0x08014335
 800d234:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d238:	6018      	str	r0, [r3, #0]
 800d23a:	9b03      	ldr	r3, [sp, #12]
 800d23c:	2b0e      	cmp	r3, #14
 800d23e:	f200 80a1 	bhi.w	800d384 <_dtoa_r+0x444>
 800d242:	2c00      	cmp	r4, #0
 800d244:	f000 809e 	beq.w	800d384 <_dtoa_r+0x444>
 800d248:	2f00      	cmp	r7, #0
 800d24a:	dd33      	ble.n	800d2b4 <_dtoa_r+0x374>
 800d24c:	4b9c      	ldr	r3, [pc, #624]	@ (800d4c0 <_dtoa_r+0x580>)
 800d24e:	f007 020f 	and.w	r2, r7, #15
 800d252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d256:	ed93 7b00 	vldr	d7, [r3]
 800d25a:	05f8      	lsls	r0, r7, #23
 800d25c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d260:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d264:	d516      	bpl.n	800d294 <_dtoa_r+0x354>
 800d266:	4b97      	ldr	r3, [pc, #604]	@ (800d4c4 <_dtoa_r+0x584>)
 800d268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d26c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d270:	f7f3 fafc 	bl	800086c <__aeabi_ddiv>
 800d274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d278:	f004 040f 	and.w	r4, r4, #15
 800d27c:	2603      	movs	r6, #3
 800d27e:	4d91      	ldr	r5, [pc, #580]	@ (800d4c4 <_dtoa_r+0x584>)
 800d280:	b954      	cbnz	r4, 800d298 <_dtoa_r+0x358>
 800d282:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d28a:	f7f3 faef 	bl	800086c <__aeabi_ddiv>
 800d28e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d292:	e028      	b.n	800d2e6 <_dtoa_r+0x3a6>
 800d294:	2602      	movs	r6, #2
 800d296:	e7f2      	b.n	800d27e <_dtoa_r+0x33e>
 800d298:	07e1      	lsls	r1, r4, #31
 800d29a:	d508      	bpl.n	800d2ae <_dtoa_r+0x36e>
 800d29c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d2a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2a4:	f7f3 f9b8 	bl	8000618 <__aeabi_dmul>
 800d2a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d2ac:	3601      	adds	r6, #1
 800d2ae:	1064      	asrs	r4, r4, #1
 800d2b0:	3508      	adds	r5, #8
 800d2b2:	e7e5      	b.n	800d280 <_dtoa_r+0x340>
 800d2b4:	f000 80af 	beq.w	800d416 <_dtoa_r+0x4d6>
 800d2b8:	427c      	negs	r4, r7
 800d2ba:	4b81      	ldr	r3, [pc, #516]	@ (800d4c0 <_dtoa_r+0x580>)
 800d2bc:	4d81      	ldr	r5, [pc, #516]	@ (800d4c4 <_dtoa_r+0x584>)
 800d2be:	f004 020f 	and.w	r2, r4, #15
 800d2c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2ce:	f7f3 f9a3 	bl	8000618 <__aeabi_dmul>
 800d2d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2d6:	1124      	asrs	r4, r4, #4
 800d2d8:	2300      	movs	r3, #0
 800d2da:	2602      	movs	r6, #2
 800d2dc:	2c00      	cmp	r4, #0
 800d2de:	f040 808f 	bne.w	800d400 <_dtoa_r+0x4c0>
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1d3      	bne.n	800d28e <_dtoa_r+0x34e>
 800d2e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 8094 	beq.w	800d41a <_dtoa_r+0x4da>
 800d2f2:	4b75      	ldr	r3, [pc, #468]	@ (800d4c8 <_dtoa_r+0x588>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	f7f3 fbff 	bl	8000afc <__aeabi_dcmplt>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	f000 808b 	beq.w	800d41a <_dtoa_r+0x4da>
 800d304:	9b03      	ldr	r3, [sp, #12]
 800d306:	2b00      	cmp	r3, #0
 800d308:	f000 8087 	beq.w	800d41a <_dtoa_r+0x4da>
 800d30c:	f1bb 0f00 	cmp.w	fp, #0
 800d310:	dd34      	ble.n	800d37c <_dtoa_r+0x43c>
 800d312:	4620      	mov	r0, r4
 800d314:	4b6d      	ldr	r3, [pc, #436]	@ (800d4cc <_dtoa_r+0x58c>)
 800d316:	2200      	movs	r2, #0
 800d318:	4629      	mov	r1, r5
 800d31a:	f7f3 f97d 	bl	8000618 <__aeabi_dmul>
 800d31e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d322:	f107 38ff 	add.w	r8, r7, #4294967295
 800d326:	3601      	adds	r6, #1
 800d328:	465c      	mov	r4, fp
 800d32a:	4630      	mov	r0, r6
 800d32c:	f7f3 f90a 	bl	8000544 <__aeabi_i2d>
 800d330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d334:	f7f3 f970 	bl	8000618 <__aeabi_dmul>
 800d338:	4b65      	ldr	r3, [pc, #404]	@ (800d4d0 <_dtoa_r+0x590>)
 800d33a:	2200      	movs	r2, #0
 800d33c:	f7f2 ffb6 	bl	80002ac <__adddf3>
 800d340:	4605      	mov	r5, r0
 800d342:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d346:	2c00      	cmp	r4, #0
 800d348:	d16a      	bne.n	800d420 <_dtoa_r+0x4e0>
 800d34a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d34e:	4b61      	ldr	r3, [pc, #388]	@ (800d4d4 <_dtoa_r+0x594>)
 800d350:	2200      	movs	r2, #0
 800d352:	f7f2 ffa9 	bl	80002a8 <__aeabi_dsub>
 800d356:	4602      	mov	r2, r0
 800d358:	460b      	mov	r3, r1
 800d35a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d35e:	462a      	mov	r2, r5
 800d360:	4633      	mov	r3, r6
 800d362:	f7f3 fbe9 	bl	8000b38 <__aeabi_dcmpgt>
 800d366:	2800      	cmp	r0, #0
 800d368:	f040 8298 	bne.w	800d89c <_dtoa_r+0x95c>
 800d36c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d370:	462a      	mov	r2, r5
 800d372:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d376:	f7f3 fbc1 	bl	8000afc <__aeabi_dcmplt>
 800d37a:	bb38      	cbnz	r0, 800d3cc <_dtoa_r+0x48c>
 800d37c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d380:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d384:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d386:	2b00      	cmp	r3, #0
 800d388:	f2c0 8157 	blt.w	800d63a <_dtoa_r+0x6fa>
 800d38c:	2f0e      	cmp	r7, #14
 800d38e:	f300 8154 	bgt.w	800d63a <_dtoa_r+0x6fa>
 800d392:	4b4b      	ldr	r3, [pc, #300]	@ (800d4c0 <_dtoa_r+0x580>)
 800d394:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d398:	ed93 7b00 	vldr	d7, [r3]
 800d39c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	ed8d 7b00 	vstr	d7, [sp]
 800d3a4:	f280 80e5 	bge.w	800d572 <_dtoa_r+0x632>
 800d3a8:	9b03      	ldr	r3, [sp, #12]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f300 80e1 	bgt.w	800d572 <_dtoa_r+0x632>
 800d3b0:	d10c      	bne.n	800d3cc <_dtoa_r+0x48c>
 800d3b2:	4b48      	ldr	r3, [pc, #288]	@ (800d4d4 <_dtoa_r+0x594>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	ec51 0b17 	vmov	r0, r1, d7
 800d3ba:	f7f3 f92d 	bl	8000618 <__aeabi_dmul>
 800d3be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3c2:	f7f3 fbaf 	bl	8000b24 <__aeabi_dcmpge>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f000 8266 	beq.w	800d898 <_dtoa_r+0x958>
 800d3cc:	2400      	movs	r4, #0
 800d3ce:	4625      	mov	r5, r4
 800d3d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3d2:	4656      	mov	r6, sl
 800d3d4:	ea6f 0803 	mvn.w	r8, r3
 800d3d8:	2700      	movs	r7, #0
 800d3da:	4621      	mov	r1, r4
 800d3dc:	4648      	mov	r0, r9
 800d3de:	f000 ff55 	bl	800e28c <_Bfree>
 800d3e2:	2d00      	cmp	r5, #0
 800d3e4:	f000 80bd 	beq.w	800d562 <_dtoa_r+0x622>
 800d3e8:	b12f      	cbz	r7, 800d3f6 <_dtoa_r+0x4b6>
 800d3ea:	42af      	cmp	r7, r5
 800d3ec:	d003      	beq.n	800d3f6 <_dtoa_r+0x4b6>
 800d3ee:	4639      	mov	r1, r7
 800d3f0:	4648      	mov	r0, r9
 800d3f2:	f000 ff4b 	bl	800e28c <_Bfree>
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	4648      	mov	r0, r9
 800d3fa:	f000 ff47 	bl	800e28c <_Bfree>
 800d3fe:	e0b0      	b.n	800d562 <_dtoa_r+0x622>
 800d400:	07e2      	lsls	r2, r4, #31
 800d402:	d505      	bpl.n	800d410 <_dtoa_r+0x4d0>
 800d404:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d408:	f7f3 f906 	bl	8000618 <__aeabi_dmul>
 800d40c:	3601      	adds	r6, #1
 800d40e:	2301      	movs	r3, #1
 800d410:	1064      	asrs	r4, r4, #1
 800d412:	3508      	adds	r5, #8
 800d414:	e762      	b.n	800d2dc <_dtoa_r+0x39c>
 800d416:	2602      	movs	r6, #2
 800d418:	e765      	b.n	800d2e6 <_dtoa_r+0x3a6>
 800d41a:	9c03      	ldr	r4, [sp, #12]
 800d41c:	46b8      	mov	r8, r7
 800d41e:	e784      	b.n	800d32a <_dtoa_r+0x3ea>
 800d420:	4b27      	ldr	r3, [pc, #156]	@ (800d4c0 <_dtoa_r+0x580>)
 800d422:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d428:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d42c:	4454      	add	r4, sl
 800d42e:	2900      	cmp	r1, #0
 800d430:	d054      	beq.n	800d4dc <_dtoa_r+0x59c>
 800d432:	4929      	ldr	r1, [pc, #164]	@ (800d4d8 <_dtoa_r+0x598>)
 800d434:	2000      	movs	r0, #0
 800d436:	f7f3 fa19 	bl	800086c <__aeabi_ddiv>
 800d43a:	4633      	mov	r3, r6
 800d43c:	462a      	mov	r2, r5
 800d43e:	f7f2 ff33 	bl	80002a8 <__aeabi_dsub>
 800d442:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d446:	4656      	mov	r6, sl
 800d448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d44c:	f7f3 fb94 	bl	8000b78 <__aeabi_d2iz>
 800d450:	4605      	mov	r5, r0
 800d452:	f7f3 f877 	bl	8000544 <__aeabi_i2d>
 800d456:	4602      	mov	r2, r0
 800d458:	460b      	mov	r3, r1
 800d45a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d45e:	f7f2 ff23 	bl	80002a8 <__aeabi_dsub>
 800d462:	3530      	adds	r5, #48	@ 0x30
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d46c:	f806 5b01 	strb.w	r5, [r6], #1
 800d470:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d474:	f7f3 fb42 	bl	8000afc <__aeabi_dcmplt>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d172      	bne.n	800d562 <_dtoa_r+0x622>
 800d47c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d480:	4911      	ldr	r1, [pc, #68]	@ (800d4c8 <_dtoa_r+0x588>)
 800d482:	2000      	movs	r0, #0
 800d484:	f7f2 ff10 	bl	80002a8 <__aeabi_dsub>
 800d488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d48c:	f7f3 fb36 	bl	8000afc <__aeabi_dcmplt>
 800d490:	2800      	cmp	r0, #0
 800d492:	f040 80b4 	bne.w	800d5fe <_dtoa_r+0x6be>
 800d496:	42a6      	cmp	r6, r4
 800d498:	f43f af70 	beq.w	800d37c <_dtoa_r+0x43c>
 800d49c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d4a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d4cc <_dtoa_r+0x58c>)
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f7f3 f8b8 	bl	8000618 <__aeabi_dmul>
 800d4a8:	4b08      	ldr	r3, [pc, #32]	@ (800d4cc <_dtoa_r+0x58c>)
 800d4aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4b4:	f7f3 f8b0 	bl	8000618 <__aeabi_dmul>
 800d4b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4bc:	e7c4      	b.n	800d448 <_dtoa_r+0x508>
 800d4be:	bf00      	nop
 800d4c0:	080146c8 	.word	0x080146c8
 800d4c4:	080146a0 	.word	0x080146a0
 800d4c8:	3ff00000 	.word	0x3ff00000
 800d4cc:	40240000 	.word	0x40240000
 800d4d0:	401c0000 	.word	0x401c0000
 800d4d4:	40140000 	.word	0x40140000
 800d4d8:	3fe00000 	.word	0x3fe00000
 800d4dc:	4631      	mov	r1, r6
 800d4de:	4628      	mov	r0, r5
 800d4e0:	f7f3 f89a 	bl	8000618 <__aeabi_dmul>
 800d4e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d4e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d4ea:	4656      	mov	r6, sl
 800d4ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4f0:	f7f3 fb42 	bl	8000b78 <__aeabi_d2iz>
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	f7f3 f825 	bl	8000544 <__aeabi_i2d>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d502:	f7f2 fed1 	bl	80002a8 <__aeabi_dsub>
 800d506:	3530      	adds	r5, #48	@ 0x30
 800d508:	f806 5b01 	strb.w	r5, [r6], #1
 800d50c:	4602      	mov	r2, r0
 800d50e:	460b      	mov	r3, r1
 800d510:	42a6      	cmp	r6, r4
 800d512:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d516:	f04f 0200 	mov.w	r2, #0
 800d51a:	d124      	bne.n	800d566 <_dtoa_r+0x626>
 800d51c:	4baf      	ldr	r3, [pc, #700]	@ (800d7dc <_dtoa_r+0x89c>)
 800d51e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d522:	f7f2 fec3 	bl	80002ac <__adddf3>
 800d526:	4602      	mov	r2, r0
 800d528:	460b      	mov	r3, r1
 800d52a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d52e:	f7f3 fb03 	bl	8000b38 <__aeabi_dcmpgt>
 800d532:	2800      	cmp	r0, #0
 800d534:	d163      	bne.n	800d5fe <_dtoa_r+0x6be>
 800d536:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d53a:	49a8      	ldr	r1, [pc, #672]	@ (800d7dc <_dtoa_r+0x89c>)
 800d53c:	2000      	movs	r0, #0
 800d53e:	f7f2 feb3 	bl	80002a8 <__aeabi_dsub>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d54a:	f7f3 fad7 	bl	8000afc <__aeabi_dcmplt>
 800d54e:	2800      	cmp	r0, #0
 800d550:	f43f af14 	beq.w	800d37c <_dtoa_r+0x43c>
 800d554:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d556:	1e73      	subs	r3, r6, #1
 800d558:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d55a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d55e:	2b30      	cmp	r3, #48	@ 0x30
 800d560:	d0f8      	beq.n	800d554 <_dtoa_r+0x614>
 800d562:	4647      	mov	r7, r8
 800d564:	e03b      	b.n	800d5de <_dtoa_r+0x69e>
 800d566:	4b9e      	ldr	r3, [pc, #632]	@ (800d7e0 <_dtoa_r+0x8a0>)
 800d568:	f7f3 f856 	bl	8000618 <__aeabi_dmul>
 800d56c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d570:	e7bc      	b.n	800d4ec <_dtoa_r+0x5ac>
 800d572:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d576:	4656      	mov	r6, sl
 800d578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d57c:	4620      	mov	r0, r4
 800d57e:	4629      	mov	r1, r5
 800d580:	f7f3 f974 	bl	800086c <__aeabi_ddiv>
 800d584:	f7f3 faf8 	bl	8000b78 <__aeabi_d2iz>
 800d588:	4680      	mov	r8, r0
 800d58a:	f7f2 ffdb 	bl	8000544 <__aeabi_i2d>
 800d58e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d592:	f7f3 f841 	bl	8000618 <__aeabi_dmul>
 800d596:	4602      	mov	r2, r0
 800d598:	460b      	mov	r3, r1
 800d59a:	4620      	mov	r0, r4
 800d59c:	4629      	mov	r1, r5
 800d59e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d5a2:	f7f2 fe81 	bl	80002a8 <__aeabi_dsub>
 800d5a6:	f806 4b01 	strb.w	r4, [r6], #1
 800d5aa:	9d03      	ldr	r5, [sp, #12]
 800d5ac:	eba6 040a 	sub.w	r4, r6, sl
 800d5b0:	42a5      	cmp	r5, r4
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	d133      	bne.n	800d620 <_dtoa_r+0x6e0>
 800d5b8:	f7f2 fe78 	bl	80002ac <__adddf3>
 800d5bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	460d      	mov	r5, r1
 800d5c4:	f7f3 fab8 	bl	8000b38 <__aeabi_dcmpgt>
 800d5c8:	b9c0      	cbnz	r0, 800d5fc <_dtoa_r+0x6bc>
 800d5ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	f7f3 fa89 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5d6:	b110      	cbz	r0, 800d5de <_dtoa_r+0x69e>
 800d5d8:	f018 0f01 	tst.w	r8, #1
 800d5dc:	d10e      	bne.n	800d5fc <_dtoa_r+0x6bc>
 800d5de:	9902      	ldr	r1, [sp, #8]
 800d5e0:	4648      	mov	r0, r9
 800d5e2:	f000 fe53 	bl	800e28c <_Bfree>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	7033      	strb	r3, [r6, #0]
 800d5ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5ec:	3701      	adds	r7, #1
 800d5ee:	601f      	str	r7, [r3, #0]
 800d5f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f000 824b 	beq.w	800da8e <_dtoa_r+0xb4e>
 800d5f8:	601e      	str	r6, [r3, #0]
 800d5fa:	e248      	b.n	800da8e <_dtoa_r+0xb4e>
 800d5fc:	46b8      	mov	r8, r7
 800d5fe:	4633      	mov	r3, r6
 800d600:	461e      	mov	r6, r3
 800d602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d606:	2a39      	cmp	r2, #57	@ 0x39
 800d608:	d106      	bne.n	800d618 <_dtoa_r+0x6d8>
 800d60a:	459a      	cmp	sl, r3
 800d60c:	d1f8      	bne.n	800d600 <_dtoa_r+0x6c0>
 800d60e:	2230      	movs	r2, #48	@ 0x30
 800d610:	f108 0801 	add.w	r8, r8, #1
 800d614:	f88a 2000 	strb.w	r2, [sl]
 800d618:	781a      	ldrb	r2, [r3, #0]
 800d61a:	3201      	adds	r2, #1
 800d61c:	701a      	strb	r2, [r3, #0]
 800d61e:	e7a0      	b.n	800d562 <_dtoa_r+0x622>
 800d620:	4b6f      	ldr	r3, [pc, #444]	@ (800d7e0 <_dtoa_r+0x8a0>)
 800d622:	2200      	movs	r2, #0
 800d624:	f7f2 fff8 	bl	8000618 <__aeabi_dmul>
 800d628:	2200      	movs	r2, #0
 800d62a:	2300      	movs	r3, #0
 800d62c:	4604      	mov	r4, r0
 800d62e:	460d      	mov	r5, r1
 800d630:	f7f3 fa5a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d634:	2800      	cmp	r0, #0
 800d636:	d09f      	beq.n	800d578 <_dtoa_r+0x638>
 800d638:	e7d1      	b.n	800d5de <_dtoa_r+0x69e>
 800d63a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d63c:	2a00      	cmp	r2, #0
 800d63e:	f000 80ea 	beq.w	800d816 <_dtoa_r+0x8d6>
 800d642:	9a07      	ldr	r2, [sp, #28]
 800d644:	2a01      	cmp	r2, #1
 800d646:	f300 80cd 	bgt.w	800d7e4 <_dtoa_r+0x8a4>
 800d64a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d64c:	2a00      	cmp	r2, #0
 800d64e:	f000 80c1 	beq.w	800d7d4 <_dtoa_r+0x894>
 800d652:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d656:	9c08      	ldr	r4, [sp, #32]
 800d658:	9e00      	ldr	r6, [sp, #0]
 800d65a:	9a00      	ldr	r2, [sp, #0]
 800d65c:	441a      	add	r2, r3
 800d65e:	9200      	str	r2, [sp, #0]
 800d660:	9a06      	ldr	r2, [sp, #24]
 800d662:	2101      	movs	r1, #1
 800d664:	441a      	add	r2, r3
 800d666:	4648      	mov	r0, r9
 800d668:	9206      	str	r2, [sp, #24]
 800d66a:	f000 ff0d 	bl	800e488 <__i2b>
 800d66e:	4605      	mov	r5, r0
 800d670:	b166      	cbz	r6, 800d68c <_dtoa_r+0x74c>
 800d672:	9b06      	ldr	r3, [sp, #24]
 800d674:	2b00      	cmp	r3, #0
 800d676:	dd09      	ble.n	800d68c <_dtoa_r+0x74c>
 800d678:	42b3      	cmp	r3, r6
 800d67a:	9a00      	ldr	r2, [sp, #0]
 800d67c:	bfa8      	it	ge
 800d67e:	4633      	movge	r3, r6
 800d680:	1ad2      	subs	r2, r2, r3
 800d682:	9200      	str	r2, [sp, #0]
 800d684:	9a06      	ldr	r2, [sp, #24]
 800d686:	1af6      	subs	r6, r6, r3
 800d688:	1ad3      	subs	r3, r2, r3
 800d68a:	9306      	str	r3, [sp, #24]
 800d68c:	9b08      	ldr	r3, [sp, #32]
 800d68e:	b30b      	cbz	r3, 800d6d4 <_dtoa_r+0x794>
 800d690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d692:	2b00      	cmp	r3, #0
 800d694:	f000 80c6 	beq.w	800d824 <_dtoa_r+0x8e4>
 800d698:	2c00      	cmp	r4, #0
 800d69a:	f000 80c0 	beq.w	800d81e <_dtoa_r+0x8de>
 800d69e:	4629      	mov	r1, r5
 800d6a0:	4622      	mov	r2, r4
 800d6a2:	4648      	mov	r0, r9
 800d6a4:	f000 ffa8 	bl	800e5f8 <__pow5mult>
 800d6a8:	9a02      	ldr	r2, [sp, #8]
 800d6aa:	4601      	mov	r1, r0
 800d6ac:	4605      	mov	r5, r0
 800d6ae:	4648      	mov	r0, r9
 800d6b0:	f000 ff00 	bl	800e4b4 <__multiply>
 800d6b4:	9902      	ldr	r1, [sp, #8]
 800d6b6:	4680      	mov	r8, r0
 800d6b8:	4648      	mov	r0, r9
 800d6ba:	f000 fde7 	bl	800e28c <_Bfree>
 800d6be:	9b08      	ldr	r3, [sp, #32]
 800d6c0:	1b1b      	subs	r3, r3, r4
 800d6c2:	9308      	str	r3, [sp, #32]
 800d6c4:	f000 80b1 	beq.w	800d82a <_dtoa_r+0x8ea>
 800d6c8:	9a08      	ldr	r2, [sp, #32]
 800d6ca:	4641      	mov	r1, r8
 800d6cc:	4648      	mov	r0, r9
 800d6ce:	f000 ff93 	bl	800e5f8 <__pow5mult>
 800d6d2:	9002      	str	r0, [sp, #8]
 800d6d4:	2101      	movs	r1, #1
 800d6d6:	4648      	mov	r0, r9
 800d6d8:	f000 fed6 	bl	800e488 <__i2b>
 800d6dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d6de:	4604      	mov	r4, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f000 81d8 	beq.w	800da96 <_dtoa_r+0xb56>
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	4601      	mov	r1, r0
 800d6ea:	4648      	mov	r0, r9
 800d6ec:	f000 ff84 	bl	800e5f8 <__pow5mult>
 800d6f0:	9b07      	ldr	r3, [sp, #28]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	f300 809f 	bgt.w	800d838 <_dtoa_r+0x8f8>
 800d6fa:	9b04      	ldr	r3, [sp, #16]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	f040 8097 	bne.w	800d830 <_dtoa_r+0x8f0>
 800d702:	9b05      	ldr	r3, [sp, #20]
 800d704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f040 8093 	bne.w	800d834 <_dtoa_r+0x8f4>
 800d70e:	9b05      	ldr	r3, [sp, #20]
 800d710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d714:	0d1b      	lsrs	r3, r3, #20
 800d716:	051b      	lsls	r3, r3, #20
 800d718:	b133      	cbz	r3, 800d728 <_dtoa_r+0x7e8>
 800d71a:	9b00      	ldr	r3, [sp, #0]
 800d71c:	3301      	adds	r3, #1
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	9b06      	ldr	r3, [sp, #24]
 800d722:	3301      	adds	r3, #1
 800d724:	9306      	str	r3, [sp, #24]
 800d726:	2301      	movs	r3, #1
 800d728:	9308      	str	r3, [sp, #32]
 800d72a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f000 81b8 	beq.w	800daa2 <_dtoa_r+0xb62>
 800d732:	6923      	ldr	r3, [r4, #16]
 800d734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d738:	6918      	ldr	r0, [r3, #16]
 800d73a:	f000 fe59 	bl	800e3f0 <__hi0bits>
 800d73e:	f1c0 0020 	rsb	r0, r0, #32
 800d742:	9b06      	ldr	r3, [sp, #24]
 800d744:	4418      	add	r0, r3
 800d746:	f010 001f 	ands.w	r0, r0, #31
 800d74a:	f000 8082 	beq.w	800d852 <_dtoa_r+0x912>
 800d74e:	f1c0 0320 	rsb	r3, r0, #32
 800d752:	2b04      	cmp	r3, #4
 800d754:	dd73      	ble.n	800d83e <_dtoa_r+0x8fe>
 800d756:	9b00      	ldr	r3, [sp, #0]
 800d758:	f1c0 001c 	rsb	r0, r0, #28
 800d75c:	4403      	add	r3, r0
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	9b06      	ldr	r3, [sp, #24]
 800d762:	4403      	add	r3, r0
 800d764:	4406      	add	r6, r0
 800d766:	9306      	str	r3, [sp, #24]
 800d768:	9b00      	ldr	r3, [sp, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	dd05      	ble.n	800d77a <_dtoa_r+0x83a>
 800d76e:	9902      	ldr	r1, [sp, #8]
 800d770:	461a      	mov	r2, r3
 800d772:	4648      	mov	r0, r9
 800d774:	f000 ff9a 	bl	800e6ac <__lshift>
 800d778:	9002      	str	r0, [sp, #8]
 800d77a:	9b06      	ldr	r3, [sp, #24]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dd05      	ble.n	800d78c <_dtoa_r+0x84c>
 800d780:	4621      	mov	r1, r4
 800d782:	461a      	mov	r2, r3
 800d784:	4648      	mov	r0, r9
 800d786:	f000 ff91 	bl	800e6ac <__lshift>
 800d78a:	4604      	mov	r4, r0
 800d78c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d061      	beq.n	800d856 <_dtoa_r+0x916>
 800d792:	9802      	ldr	r0, [sp, #8]
 800d794:	4621      	mov	r1, r4
 800d796:	f000 fff5 	bl	800e784 <__mcmp>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	da5b      	bge.n	800d856 <_dtoa_r+0x916>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	9902      	ldr	r1, [sp, #8]
 800d7a2:	220a      	movs	r2, #10
 800d7a4:	4648      	mov	r0, r9
 800d7a6:	f000 fd93 	bl	800e2d0 <__multadd>
 800d7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ac:	9002      	str	r0, [sp, #8]
 800d7ae:	f107 38ff 	add.w	r8, r7, #4294967295
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f000 8177 	beq.w	800daa6 <_dtoa_r+0xb66>
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	220a      	movs	r2, #10
 800d7be:	4648      	mov	r0, r9
 800d7c0:	f000 fd86 	bl	800e2d0 <__multadd>
 800d7c4:	f1bb 0f00 	cmp.w	fp, #0
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	dc6f      	bgt.n	800d8ac <_dtoa_r+0x96c>
 800d7cc:	9b07      	ldr	r3, [sp, #28]
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	dc49      	bgt.n	800d866 <_dtoa_r+0x926>
 800d7d2:	e06b      	b.n	800d8ac <_dtoa_r+0x96c>
 800d7d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d7d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d7da:	e73c      	b.n	800d656 <_dtoa_r+0x716>
 800d7dc:	3fe00000 	.word	0x3fe00000
 800d7e0:	40240000 	.word	0x40240000
 800d7e4:	9b03      	ldr	r3, [sp, #12]
 800d7e6:	1e5c      	subs	r4, r3, #1
 800d7e8:	9b08      	ldr	r3, [sp, #32]
 800d7ea:	42a3      	cmp	r3, r4
 800d7ec:	db09      	blt.n	800d802 <_dtoa_r+0x8c2>
 800d7ee:	1b1c      	subs	r4, r3, r4
 800d7f0:	9b03      	ldr	r3, [sp, #12]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f6bf af30 	bge.w	800d658 <_dtoa_r+0x718>
 800d7f8:	9b00      	ldr	r3, [sp, #0]
 800d7fa:	9a03      	ldr	r2, [sp, #12]
 800d7fc:	1a9e      	subs	r6, r3, r2
 800d7fe:	2300      	movs	r3, #0
 800d800:	e72b      	b.n	800d65a <_dtoa_r+0x71a>
 800d802:	9b08      	ldr	r3, [sp, #32]
 800d804:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d806:	9408      	str	r4, [sp, #32]
 800d808:	1ae3      	subs	r3, r4, r3
 800d80a:	441a      	add	r2, r3
 800d80c:	9e00      	ldr	r6, [sp, #0]
 800d80e:	9b03      	ldr	r3, [sp, #12]
 800d810:	920d      	str	r2, [sp, #52]	@ 0x34
 800d812:	2400      	movs	r4, #0
 800d814:	e721      	b.n	800d65a <_dtoa_r+0x71a>
 800d816:	9c08      	ldr	r4, [sp, #32]
 800d818:	9e00      	ldr	r6, [sp, #0]
 800d81a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d81c:	e728      	b.n	800d670 <_dtoa_r+0x730>
 800d81e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d822:	e751      	b.n	800d6c8 <_dtoa_r+0x788>
 800d824:	9a08      	ldr	r2, [sp, #32]
 800d826:	9902      	ldr	r1, [sp, #8]
 800d828:	e750      	b.n	800d6cc <_dtoa_r+0x78c>
 800d82a:	f8cd 8008 	str.w	r8, [sp, #8]
 800d82e:	e751      	b.n	800d6d4 <_dtoa_r+0x794>
 800d830:	2300      	movs	r3, #0
 800d832:	e779      	b.n	800d728 <_dtoa_r+0x7e8>
 800d834:	9b04      	ldr	r3, [sp, #16]
 800d836:	e777      	b.n	800d728 <_dtoa_r+0x7e8>
 800d838:	2300      	movs	r3, #0
 800d83a:	9308      	str	r3, [sp, #32]
 800d83c:	e779      	b.n	800d732 <_dtoa_r+0x7f2>
 800d83e:	d093      	beq.n	800d768 <_dtoa_r+0x828>
 800d840:	9a00      	ldr	r2, [sp, #0]
 800d842:	331c      	adds	r3, #28
 800d844:	441a      	add	r2, r3
 800d846:	9200      	str	r2, [sp, #0]
 800d848:	9a06      	ldr	r2, [sp, #24]
 800d84a:	441a      	add	r2, r3
 800d84c:	441e      	add	r6, r3
 800d84e:	9206      	str	r2, [sp, #24]
 800d850:	e78a      	b.n	800d768 <_dtoa_r+0x828>
 800d852:	4603      	mov	r3, r0
 800d854:	e7f4      	b.n	800d840 <_dtoa_r+0x900>
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	46b8      	mov	r8, r7
 800d85c:	dc20      	bgt.n	800d8a0 <_dtoa_r+0x960>
 800d85e:	469b      	mov	fp, r3
 800d860:	9b07      	ldr	r3, [sp, #28]
 800d862:	2b02      	cmp	r3, #2
 800d864:	dd1e      	ble.n	800d8a4 <_dtoa_r+0x964>
 800d866:	f1bb 0f00 	cmp.w	fp, #0
 800d86a:	f47f adb1 	bne.w	800d3d0 <_dtoa_r+0x490>
 800d86e:	4621      	mov	r1, r4
 800d870:	465b      	mov	r3, fp
 800d872:	2205      	movs	r2, #5
 800d874:	4648      	mov	r0, r9
 800d876:	f000 fd2b 	bl	800e2d0 <__multadd>
 800d87a:	4601      	mov	r1, r0
 800d87c:	4604      	mov	r4, r0
 800d87e:	9802      	ldr	r0, [sp, #8]
 800d880:	f000 ff80 	bl	800e784 <__mcmp>
 800d884:	2800      	cmp	r0, #0
 800d886:	f77f ada3 	ble.w	800d3d0 <_dtoa_r+0x490>
 800d88a:	4656      	mov	r6, sl
 800d88c:	2331      	movs	r3, #49	@ 0x31
 800d88e:	f806 3b01 	strb.w	r3, [r6], #1
 800d892:	f108 0801 	add.w	r8, r8, #1
 800d896:	e59f      	b.n	800d3d8 <_dtoa_r+0x498>
 800d898:	9c03      	ldr	r4, [sp, #12]
 800d89a:	46b8      	mov	r8, r7
 800d89c:	4625      	mov	r5, r4
 800d89e:	e7f4      	b.n	800d88a <_dtoa_r+0x94a>
 800d8a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f000 8101 	beq.w	800daae <_dtoa_r+0xb6e>
 800d8ac:	2e00      	cmp	r6, #0
 800d8ae:	dd05      	ble.n	800d8bc <_dtoa_r+0x97c>
 800d8b0:	4629      	mov	r1, r5
 800d8b2:	4632      	mov	r2, r6
 800d8b4:	4648      	mov	r0, r9
 800d8b6:	f000 fef9 	bl	800e6ac <__lshift>
 800d8ba:	4605      	mov	r5, r0
 800d8bc:	9b08      	ldr	r3, [sp, #32]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d05c      	beq.n	800d97c <_dtoa_r+0xa3c>
 800d8c2:	6869      	ldr	r1, [r5, #4]
 800d8c4:	4648      	mov	r0, r9
 800d8c6:	f000 fca1 	bl	800e20c <_Balloc>
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	b928      	cbnz	r0, 800d8da <_dtoa_r+0x99a>
 800d8ce:	4b82      	ldr	r3, [pc, #520]	@ (800dad8 <_dtoa_r+0xb98>)
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d8d6:	f7ff bb4a 	b.w	800cf6e <_dtoa_r+0x2e>
 800d8da:	692a      	ldr	r2, [r5, #16]
 800d8dc:	3202      	adds	r2, #2
 800d8de:	0092      	lsls	r2, r2, #2
 800d8e0:	f105 010c 	add.w	r1, r5, #12
 800d8e4:	300c      	adds	r0, #12
 800d8e6:	f7ff fa68 	bl	800cdba <memcpy>
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	4631      	mov	r1, r6
 800d8ee:	4648      	mov	r0, r9
 800d8f0:	f000 fedc 	bl	800e6ac <__lshift>
 800d8f4:	f10a 0301 	add.w	r3, sl, #1
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	eb0a 030b 	add.w	r3, sl, fp
 800d8fe:	9308      	str	r3, [sp, #32]
 800d900:	9b04      	ldr	r3, [sp, #16]
 800d902:	f003 0301 	and.w	r3, r3, #1
 800d906:	462f      	mov	r7, r5
 800d908:	9306      	str	r3, [sp, #24]
 800d90a:	4605      	mov	r5, r0
 800d90c:	9b00      	ldr	r3, [sp, #0]
 800d90e:	9802      	ldr	r0, [sp, #8]
 800d910:	4621      	mov	r1, r4
 800d912:	f103 3bff 	add.w	fp, r3, #4294967295
 800d916:	f7ff fa8b 	bl	800ce30 <quorem>
 800d91a:	4603      	mov	r3, r0
 800d91c:	3330      	adds	r3, #48	@ 0x30
 800d91e:	9003      	str	r0, [sp, #12]
 800d920:	4639      	mov	r1, r7
 800d922:	9802      	ldr	r0, [sp, #8]
 800d924:	9309      	str	r3, [sp, #36]	@ 0x24
 800d926:	f000 ff2d 	bl	800e784 <__mcmp>
 800d92a:	462a      	mov	r2, r5
 800d92c:	9004      	str	r0, [sp, #16]
 800d92e:	4621      	mov	r1, r4
 800d930:	4648      	mov	r0, r9
 800d932:	f000 ff43 	bl	800e7bc <__mdiff>
 800d936:	68c2      	ldr	r2, [r0, #12]
 800d938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d93a:	4606      	mov	r6, r0
 800d93c:	bb02      	cbnz	r2, 800d980 <_dtoa_r+0xa40>
 800d93e:	4601      	mov	r1, r0
 800d940:	9802      	ldr	r0, [sp, #8]
 800d942:	f000 ff1f 	bl	800e784 <__mcmp>
 800d946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d948:	4602      	mov	r2, r0
 800d94a:	4631      	mov	r1, r6
 800d94c:	4648      	mov	r0, r9
 800d94e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d950:	9309      	str	r3, [sp, #36]	@ 0x24
 800d952:	f000 fc9b 	bl	800e28c <_Bfree>
 800d956:	9b07      	ldr	r3, [sp, #28]
 800d958:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d95a:	9e00      	ldr	r6, [sp, #0]
 800d95c:	ea42 0103 	orr.w	r1, r2, r3
 800d960:	9b06      	ldr	r3, [sp, #24]
 800d962:	4319      	orrs	r1, r3
 800d964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d966:	d10d      	bne.n	800d984 <_dtoa_r+0xa44>
 800d968:	2b39      	cmp	r3, #57	@ 0x39
 800d96a:	d027      	beq.n	800d9bc <_dtoa_r+0xa7c>
 800d96c:	9a04      	ldr	r2, [sp, #16]
 800d96e:	2a00      	cmp	r2, #0
 800d970:	dd01      	ble.n	800d976 <_dtoa_r+0xa36>
 800d972:	9b03      	ldr	r3, [sp, #12]
 800d974:	3331      	adds	r3, #49	@ 0x31
 800d976:	f88b 3000 	strb.w	r3, [fp]
 800d97a:	e52e      	b.n	800d3da <_dtoa_r+0x49a>
 800d97c:	4628      	mov	r0, r5
 800d97e:	e7b9      	b.n	800d8f4 <_dtoa_r+0x9b4>
 800d980:	2201      	movs	r2, #1
 800d982:	e7e2      	b.n	800d94a <_dtoa_r+0xa0a>
 800d984:	9904      	ldr	r1, [sp, #16]
 800d986:	2900      	cmp	r1, #0
 800d988:	db04      	blt.n	800d994 <_dtoa_r+0xa54>
 800d98a:	9807      	ldr	r0, [sp, #28]
 800d98c:	4301      	orrs	r1, r0
 800d98e:	9806      	ldr	r0, [sp, #24]
 800d990:	4301      	orrs	r1, r0
 800d992:	d120      	bne.n	800d9d6 <_dtoa_r+0xa96>
 800d994:	2a00      	cmp	r2, #0
 800d996:	ddee      	ble.n	800d976 <_dtoa_r+0xa36>
 800d998:	9902      	ldr	r1, [sp, #8]
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	2201      	movs	r2, #1
 800d99e:	4648      	mov	r0, r9
 800d9a0:	f000 fe84 	bl	800e6ac <__lshift>
 800d9a4:	4621      	mov	r1, r4
 800d9a6:	9002      	str	r0, [sp, #8]
 800d9a8:	f000 feec 	bl	800e784 <__mcmp>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	9b00      	ldr	r3, [sp, #0]
 800d9b0:	dc02      	bgt.n	800d9b8 <_dtoa_r+0xa78>
 800d9b2:	d1e0      	bne.n	800d976 <_dtoa_r+0xa36>
 800d9b4:	07da      	lsls	r2, r3, #31
 800d9b6:	d5de      	bpl.n	800d976 <_dtoa_r+0xa36>
 800d9b8:	2b39      	cmp	r3, #57	@ 0x39
 800d9ba:	d1da      	bne.n	800d972 <_dtoa_r+0xa32>
 800d9bc:	2339      	movs	r3, #57	@ 0x39
 800d9be:	f88b 3000 	strb.w	r3, [fp]
 800d9c2:	4633      	mov	r3, r6
 800d9c4:	461e      	mov	r6, r3
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d9cc:	2a39      	cmp	r2, #57	@ 0x39
 800d9ce:	d04e      	beq.n	800da6e <_dtoa_r+0xb2e>
 800d9d0:	3201      	adds	r2, #1
 800d9d2:	701a      	strb	r2, [r3, #0]
 800d9d4:	e501      	b.n	800d3da <_dtoa_r+0x49a>
 800d9d6:	2a00      	cmp	r2, #0
 800d9d8:	dd03      	ble.n	800d9e2 <_dtoa_r+0xaa2>
 800d9da:	2b39      	cmp	r3, #57	@ 0x39
 800d9dc:	d0ee      	beq.n	800d9bc <_dtoa_r+0xa7c>
 800d9de:	3301      	adds	r3, #1
 800d9e0:	e7c9      	b.n	800d976 <_dtoa_r+0xa36>
 800d9e2:	9a00      	ldr	r2, [sp, #0]
 800d9e4:	9908      	ldr	r1, [sp, #32]
 800d9e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d9ea:	428a      	cmp	r2, r1
 800d9ec:	d028      	beq.n	800da40 <_dtoa_r+0xb00>
 800d9ee:	9902      	ldr	r1, [sp, #8]
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	220a      	movs	r2, #10
 800d9f4:	4648      	mov	r0, r9
 800d9f6:	f000 fc6b 	bl	800e2d0 <__multadd>
 800d9fa:	42af      	cmp	r7, r5
 800d9fc:	9002      	str	r0, [sp, #8]
 800d9fe:	f04f 0300 	mov.w	r3, #0
 800da02:	f04f 020a 	mov.w	r2, #10
 800da06:	4639      	mov	r1, r7
 800da08:	4648      	mov	r0, r9
 800da0a:	d107      	bne.n	800da1c <_dtoa_r+0xadc>
 800da0c:	f000 fc60 	bl	800e2d0 <__multadd>
 800da10:	4607      	mov	r7, r0
 800da12:	4605      	mov	r5, r0
 800da14:	9b00      	ldr	r3, [sp, #0]
 800da16:	3301      	adds	r3, #1
 800da18:	9300      	str	r3, [sp, #0]
 800da1a:	e777      	b.n	800d90c <_dtoa_r+0x9cc>
 800da1c:	f000 fc58 	bl	800e2d0 <__multadd>
 800da20:	4629      	mov	r1, r5
 800da22:	4607      	mov	r7, r0
 800da24:	2300      	movs	r3, #0
 800da26:	220a      	movs	r2, #10
 800da28:	4648      	mov	r0, r9
 800da2a:	f000 fc51 	bl	800e2d0 <__multadd>
 800da2e:	4605      	mov	r5, r0
 800da30:	e7f0      	b.n	800da14 <_dtoa_r+0xad4>
 800da32:	f1bb 0f00 	cmp.w	fp, #0
 800da36:	bfcc      	ite	gt
 800da38:	465e      	movgt	r6, fp
 800da3a:	2601      	movle	r6, #1
 800da3c:	4456      	add	r6, sl
 800da3e:	2700      	movs	r7, #0
 800da40:	9902      	ldr	r1, [sp, #8]
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	2201      	movs	r2, #1
 800da46:	4648      	mov	r0, r9
 800da48:	f000 fe30 	bl	800e6ac <__lshift>
 800da4c:	4621      	mov	r1, r4
 800da4e:	9002      	str	r0, [sp, #8]
 800da50:	f000 fe98 	bl	800e784 <__mcmp>
 800da54:	2800      	cmp	r0, #0
 800da56:	dcb4      	bgt.n	800d9c2 <_dtoa_r+0xa82>
 800da58:	d102      	bne.n	800da60 <_dtoa_r+0xb20>
 800da5a:	9b00      	ldr	r3, [sp, #0]
 800da5c:	07db      	lsls	r3, r3, #31
 800da5e:	d4b0      	bmi.n	800d9c2 <_dtoa_r+0xa82>
 800da60:	4633      	mov	r3, r6
 800da62:	461e      	mov	r6, r3
 800da64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da68:	2a30      	cmp	r2, #48	@ 0x30
 800da6a:	d0fa      	beq.n	800da62 <_dtoa_r+0xb22>
 800da6c:	e4b5      	b.n	800d3da <_dtoa_r+0x49a>
 800da6e:	459a      	cmp	sl, r3
 800da70:	d1a8      	bne.n	800d9c4 <_dtoa_r+0xa84>
 800da72:	2331      	movs	r3, #49	@ 0x31
 800da74:	f108 0801 	add.w	r8, r8, #1
 800da78:	f88a 3000 	strb.w	r3, [sl]
 800da7c:	e4ad      	b.n	800d3da <_dtoa_r+0x49a>
 800da7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800da80:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dadc <_dtoa_r+0xb9c>
 800da84:	b11b      	cbz	r3, 800da8e <_dtoa_r+0xb4e>
 800da86:	f10a 0308 	add.w	r3, sl, #8
 800da8a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	4650      	mov	r0, sl
 800da90:	b017      	add	sp, #92	@ 0x5c
 800da92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da96:	9b07      	ldr	r3, [sp, #28]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	f77f ae2e 	ble.w	800d6fa <_dtoa_r+0x7ba>
 800da9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800daa0:	9308      	str	r3, [sp, #32]
 800daa2:	2001      	movs	r0, #1
 800daa4:	e64d      	b.n	800d742 <_dtoa_r+0x802>
 800daa6:	f1bb 0f00 	cmp.w	fp, #0
 800daaa:	f77f aed9 	ble.w	800d860 <_dtoa_r+0x920>
 800daae:	4656      	mov	r6, sl
 800dab0:	9802      	ldr	r0, [sp, #8]
 800dab2:	4621      	mov	r1, r4
 800dab4:	f7ff f9bc 	bl	800ce30 <quorem>
 800dab8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dabc:	f806 3b01 	strb.w	r3, [r6], #1
 800dac0:	eba6 020a 	sub.w	r2, r6, sl
 800dac4:	4593      	cmp	fp, r2
 800dac6:	ddb4      	ble.n	800da32 <_dtoa_r+0xaf2>
 800dac8:	9902      	ldr	r1, [sp, #8]
 800daca:	2300      	movs	r3, #0
 800dacc:	220a      	movs	r2, #10
 800dace:	4648      	mov	r0, r9
 800dad0:	f000 fbfe 	bl	800e2d0 <__multadd>
 800dad4:	9002      	str	r0, [sp, #8]
 800dad6:	e7eb      	b.n	800dab0 <_dtoa_r+0xb70>
 800dad8:	08014461 	.word	0x08014461
 800dadc:	080143fc 	.word	0x080143fc

0800dae0 <_free_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4605      	mov	r5, r0
 800dae4:	2900      	cmp	r1, #0
 800dae6:	d041      	beq.n	800db6c <_free_r+0x8c>
 800dae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daec:	1f0c      	subs	r4, r1, #4
 800daee:	2b00      	cmp	r3, #0
 800daf0:	bfb8      	it	lt
 800daf2:	18e4      	addlt	r4, r4, r3
 800daf4:	f7fd f99c 	bl	800ae30 <__malloc_lock>
 800daf8:	4a1d      	ldr	r2, [pc, #116]	@ (800db70 <_free_r+0x90>)
 800dafa:	6813      	ldr	r3, [r2, #0]
 800dafc:	b933      	cbnz	r3, 800db0c <_free_r+0x2c>
 800dafe:	6063      	str	r3, [r4, #4]
 800db00:	6014      	str	r4, [r2, #0]
 800db02:	4628      	mov	r0, r5
 800db04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db08:	f7fd b998 	b.w	800ae3c <__malloc_unlock>
 800db0c:	42a3      	cmp	r3, r4
 800db0e:	d908      	bls.n	800db22 <_free_r+0x42>
 800db10:	6820      	ldr	r0, [r4, #0]
 800db12:	1821      	adds	r1, r4, r0
 800db14:	428b      	cmp	r3, r1
 800db16:	bf01      	itttt	eq
 800db18:	6819      	ldreq	r1, [r3, #0]
 800db1a:	685b      	ldreq	r3, [r3, #4]
 800db1c:	1809      	addeq	r1, r1, r0
 800db1e:	6021      	streq	r1, [r4, #0]
 800db20:	e7ed      	b.n	800dafe <_free_r+0x1e>
 800db22:	461a      	mov	r2, r3
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	b10b      	cbz	r3, 800db2c <_free_r+0x4c>
 800db28:	42a3      	cmp	r3, r4
 800db2a:	d9fa      	bls.n	800db22 <_free_r+0x42>
 800db2c:	6811      	ldr	r1, [r2, #0]
 800db2e:	1850      	adds	r0, r2, r1
 800db30:	42a0      	cmp	r0, r4
 800db32:	d10b      	bne.n	800db4c <_free_r+0x6c>
 800db34:	6820      	ldr	r0, [r4, #0]
 800db36:	4401      	add	r1, r0
 800db38:	1850      	adds	r0, r2, r1
 800db3a:	4283      	cmp	r3, r0
 800db3c:	6011      	str	r1, [r2, #0]
 800db3e:	d1e0      	bne.n	800db02 <_free_r+0x22>
 800db40:	6818      	ldr	r0, [r3, #0]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	6053      	str	r3, [r2, #4]
 800db46:	4408      	add	r0, r1
 800db48:	6010      	str	r0, [r2, #0]
 800db4a:	e7da      	b.n	800db02 <_free_r+0x22>
 800db4c:	d902      	bls.n	800db54 <_free_r+0x74>
 800db4e:	230c      	movs	r3, #12
 800db50:	602b      	str	r3, [r5, #0]
 800db52:	e7d6      	b.n	800db02 <_free_r+0x22>
 800db54:	6820      	ldr	r0, [r4, #0]
 800db56:	1821      	adds	r1, r4, r0
 800db58:	428b      	cmp	r3, r1
 800db5a:	bf04      	itt	eq
 800db5c:	6819      	ldreq	r1, [r3, #0]
 800db5e:	685b      	ldreq	r3, [r3, #4]
 800db60:	6063      	str	r3, [r4, #4]
 800db62:	bf04      	itt	eq
 800db64:	1809      	addeq	r1, r1, r0
 800db66:	6021      	streq	r1, [r4, #0]
 800db68:	6054      	str	r4, [r2, #4]
 800db6a:	e7ca      	b.n	800db02 <_free_r+0x22>
 800db6c:	bd38      	pop	{r3, r4, r5, pc}
 800db6e:	bf00      	nop
 800db70:	2000b1cc 	.word	0x2000b1cc

0800db74 <rshift>:
 800db74:	6903      	ldr	r3, [r0, #16]
 800db76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800db7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800db82:	f100 0414 	add.w	r4, r0, #20
 800db86:	dd45      	ble.n	800dc14 <rshift+0xa0>
 800db88:	f011 011f 	ands.w	r1, r1, #31
 800db8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800db90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800db94:	d10c      	bne.n	800dbb0 <rshift+0x3c>
 800db96:	f100 0710 	add.w	r7, r0, #16
 800db9a:	4629      	mov	r1, r5
 800db9c:	42b1      	cmp	r1, r6
 800db9e:	d334      	bcc.n	800dc0a <rshift+0x96>
 800dba0:	1a9b      	subs	r3, r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	1eea      	subs	r2, r5, #3
 800dba6:	4296      	cmp	r6, r2
 800dba8:	bf38      	it	cc
 800dbaa:	2300      	movcc	r3, #0
 800dbac:	4423      	add	r3, r4
 800dbae:	e015      	b.n	800dbdc <rshift+0x68>
 800dbb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dbb4:	f1c1 0820 	rsb	r8, r1, #32
 800dbb8:	40cf      	lsrs	r7, r1
 800dbba:	f105 0e04 	add.w	lr, r5, #4
 800dbbe:	46a1      	mov	r9, r4
 800dbc0:	4576      	cmp	r6, lr
 800dbc2:	46f4      	mov	ip, lr
 800dbc4:	d815      	bhi.n	800dbf2 <rshift+0x7e>
 800dbc6:	1a9a      	subs	r2, r3, r2
 800dbc8:	0092      	lsls	r2, r2, #2
 800dbca:	3a04      	subs	r2, #4
 800dbcc:	3501      	adds	r5, #1
 800dbce:	42ae      	cmp	r6, r5
 800dbd0:	bf38      	it	cc
 800dbd2:	2200      	movcc	r2, #0
 800dbd4:	18a3      	adds	r3, r4, r2
 800dbd6:	50a7      	str	r7, [r4, r2]
 800dbd8:	b107      	cbz	r7, 800dbdc <rshift+0x68>
 800dbda:	3304      	adds	r3, #4
 800dbdc:	1b1a      	subs	r2, r3, r4
 800dbde:	42a3      	cmp	r3, r4
 800dbe0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dbe4:	bf08      	it	eq
 800dbe6:	2300      	moveq	r3, #0
 800dbe8:	6102      	str	r2, [r0, #16]
 800dbea:	bf08      	it	eq
 800dbec:	6143      	streq	r3, [r0, #20]
 800dbee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbf2:	f8dc c000 	ldr.w	ip, [ip]
 800dbf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800dbfa:	ea4c 0707 	orr.w	r7, ip, r7
 800dbfe:	f849 7b04 	str.w	r7, [r9], #4
 800dc02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc06:	40cf      	lsrs	r7, r1
 800dc08:	e7da      	b.n	800dbc0 <rshift+0x4c>
 800dc0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800dc0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800dc12:	e7c3      	b.n	800db9c <rshift+0x28>
 800dc14:	4623      	mov	r3, r4
 800dc16:	e7e1      	b.n	800dbdc <rshift+0x68>

0800dc18 <__hexdig_fun>:
 800dc18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dc1c:	2b09      	cmp	r3, #9
 800dc1e:	d802      	bhi.n	800dc26 <__hexdig_fun+0xe>
 800dc20:	3820      	subs	r0, #32
 800dc22:	b2c0      	uxtb	r0, r0
 800dc24:	4770      	bx	lr
 800dc26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dc2a:	2b05      	cmp	r3, #5
 800dc2c:	d801      	bhi.n	800dc32 <__hexdig_fun+0x1a>
 800dc2e:	3847      	subs	r0, #71	@ 0x47
 800dc30:	e7f7      	b.n	800dc22 <__hexdig_fun+0xa>
 800dc32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dc36:	2b05      	cmp	r3, #5
 800dc38:	d801      	bhi.n	800dc3e <__hexdig_fun+0x26>
 800dc3a:	3827      	subs	r0, #39	@ 0x27
 800dc3c:	e7f1      	b.n	800dc22 <__hexdig_fun+0xa>
 800dc3e:	2000      	movs	r0, #0
 800dc40:	4770      	bx	lr
	...

0800dc44 <__gethex>:
 800dc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc48:	b085      	sub	sp, #20
 800dc4a:	468a      	mov	sl, r1
 800dc4c:	9302      	str	r3, [sp, #8]
 800dc4e:	680b      	ldr	r3, [r1, #0]
 800dc50:	9001      	str	r0, [sp, #4]
 800dc52:	4690      	mov	r8, r2
 800dc54:	1c9c      	adds	r4, r3, #2
 800dc56:	46a1      	mov	r9, r4
 800dc58:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dc5c:	2830      	cmp	r0, #48	@ 0x30
 800dc5e:	d0fa      	beq.n	800dc56 <__gethex+0x12>
 800dc60:	eba9 0303 	sub.w	r3, r9, r3
 800dc64:	f1a3 0b02 	sub.w	fp, r3, #2
 800dc68:	f7ff ffd6 	bl	800dc18 <__hexdig_fun>
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	2800      	cmp	r0, #0
 800dc70:	d168      	bne.n	800dd44 <__gethex+0x100>
 800dc72:	49a0      	ldr	r1, [pc, #640]	@ (800def4 <__gethex+0x2b0>)
 800dc74:	2201      	movs	r2, #1
 800dc76:	4648      	mov	r0, r9
 800dc78:	f7fe ff97 	bl	800cbaa <strncmp>
 800dc7c:	4607      	mov	r7, r0
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d167      	bne.n	800dd52 <__gethex+0x10e>
 800dc82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dc86:	4626      	mov	r6, r4
 800dc88:	f7ff ffc6 	bl	800dc18 <__hexdig_fun>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d062      	beq.n	800dd56 <__gethex+0x112>
 800dc90:	4623      	mov	r3, r4
 800dc92:	7818      	ldrb	r0, [r3, #0]
 800dc94:	2830      	cmp	r0, #48	@ 0x30
 800dc96:	4699      	mov	r9, r3
 800dc98:	f103 0301 	add.w	r3, r3, #1
 800dc9c:	d0f9      	beq.n	800dc92 <__gethex+0x4e>
 800dc9e:	f7ff ffbb 	bl	800dc18 <__hexdig_fun>
 800dca2:	fab0 f580 	clz	r5, r0
 800dca6:	096d      	lsrs	r5, r5, #5
 800dca8:	f04f 0b01 	mov.w	fp, #1
 800dcac:	464a      	mov	r2, r9
 800dcae:	4616      	mov	r6, r2
 800dcb0:	3201      	adds	r2, #1
 800dcb2:	7830      	ldrb	r0, [r6, #0]
 800dcb4:	f7ff ffb0 	bl	800dc18 <__hexdig_fun>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	d1f8      	bne.n	800dcae <__gethex+0x6a>
 800dcbc:	498d      	ldr	r1, [pc, #564]	@ (800def4 <__gethex+0x2b0>)
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f7fe ff72 	bl	800cbaa <strncmp>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d13f      	bne.n	800dd4a <__gethex+0x106>
 800dcca:	b944      	cbnz	r4, 800dcde <__gethex+0x9a>
 800dccc:	1c74      	adds	r4, r6, #1
 800dcce:	4622      	mov	r2, r4
 800dcd0:	4616      	mov	r6, r2
 800dcd2:	3201      	adds	r2, #1
 800dcd4:	7830      	ldrb	r0, [r6, #0]
 800dcd6:	f7ff ff9f 	bl	800dc18 <__hexdig_fun>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d1f8      	bne.n	800dcd0 <__gethex+0x8c>
 800dcde:	1ba4      	subs	r4, r4, r6
 800dce0:	00a7      	lsls	r7, r4, #2
 800dce2:	7833      	ldrb	r3, [r6, #0]
 800dce4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dce8:	2b50      	cmp	r3, #80	@ 0x50
 800dcea:	d13e      	bne.n	800dd6a <__gethex+0x126>
 800dcec:	7873      	ldrb	r3, [r6, #1]
 800dcee:	2b2b      	cmp	r3, #43	@ 0x2b
 800dcf0:	d033      	beq.n	800dd5a <__gethex+0x116>
 800dcf2:	2b2d      	cmp	r3, #45	@ 0x2d
 800dcf4:	d034      	beq.n	800dd60 <__gethex+0x11c>
 800dcf6:	1c71      	adds	r1, r6, #1
 800dcf8:	2400      	movs	r4, #0
 800dcfa:	7808      	ldrb	r0, [r1, #0]
 800dcfc:	f7ff ff8c 	bl	800dc18 <__hexdig_fun>
 800dd00:	1e43      	subs	r3, r0, #1
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b18      	cmp	r3, #24
 800dd06:	d830      	bhi.n	800dd6a <__gethex+0x126>
 800dd08:	f1a0 0210 	sub.w	r2, r0, #16
 800dd0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd10:	f7ff ff82 	bl	800dc18 <__hexdig_fun>
 800dd14:	f100 3cff 	add.w	ip, r0, #4294967295
 800dd18:	fa5f fc8c 	uxtb.w	ip, ip
 800dd1c:	f1bc 0f18 	cmp.w	ip, #24
 800dd20:	f04f 030a 	mov.w	r3, #10
 800dd24:	d91e      	bls.n	800dd64 <__gethex+0x120>
 800dd26:	b104      	cbz	r4, 800dd2a <__gethex+0xe6>
 800dd28:	4252      	negs	r2, r2
 800dd2a:	4417      	add	r7, r2
 800dd2c:	f8ca 1000 	str.w	r1, [sl]
 800dd30:	b1ed      	cbz	r5, 800dd6e <__gethex+0x12a>
 800dd32:	f1bb 0f00 	cmp.w	fp, #0
 800dd36:	bf0c      	ite	eq
 800dd38:	2506      	moveq	r5, #6
 800dd3a:	2500      	movne	r5, #0
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	b005      	add	sp, #20
 800dd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd44:	2500      	movs	r5, #0
 800dd46:	462c      	mov	r4, r5
 800dd48:	e7b0      	b.n	800dcac <__gethex+0x68>
 800dd4a:	2c00      	cmp	r4, #0
 800dd4c:	d1c7      	bne.n	800dcde <__gethex+0x9a>
 800dd4e:	4627      	mov	r7, r4
 800dd50:	e7c7      	b.n	800dce2 <__gethex+0x9e>
 800dd52:	464e      	mov	r6, r9
 800dd54:	462f      	mov	r7, r5
 800dd56:	2501      	movs	r5, #1
 800dd58:	e7c3      	b.n	800dce2 <__gethex+0x9e>
 800dd5a:	2400      	movs	r4, #0
 800dd5c:	1cb1      	adds	r1, r6, #2
 800dd5e:	e7cc      	b.n	800dcfa <__gethex+0xb6>
 800dd60:	2401      	movs	r4, #1
 800dd62:	e7fb      	b.n	800dd5c <__gethex+0x118>
 800dd64:	fb03 0002 	mla	r0, r3, r2, r0
 800dd68:	e7ce      	b.n	800dd08 <__gethex+0xc4>
 800dd6a:	4631      	mov	r1, r6
 800dd6c:	e7de      	b.n	800dd2c <__gethex+0xe8>
 800dd6e:	eba6 0309 	sub.w	r3, r6, r9
 800dd72:	3b01      	subs	r3, #1
 800dd74:	4629      	mov	r1, r5
 800dd76:	2b07      	cmp	r3, #7
 800dd78:	dc0a      	bgt.n	800dd90 <__gethex+0x14c>
 800dd7a:	9801      	ldr	r0, [sp, #4]
 800dd7c:	f000 fa46 	bl	800e20c <_Balloc>
 800dd80:	4604      	mov	r4, r0
 800dd82:	b940      	cbnz	r0, 800dd96 <__gethex+0x152>
 800dd84:	4b5c      	ldr	r3, [pc, #368]	@ (800def8 <__gethex+0x2b4>)
 800dd86:	4602      	mov	r2, r0
 800dd88:	21e4      	movs	r1, #228	@ 0xe4
 800dd8a:	485c      	ldr	r0, [pc, #368]	@ (800defc <__gethex+0x2b8>)
 800dd8c:	f7ff f832 	bl	800cdf4 <__assert_func>
 800dd90:	3101      	adds	r1, #1
 800dd92:	105b      	asrs	r3, r3, #1
 800dd94:	e7ef      	b.n	800dd76 <__gethex+0x132>
 800dd96:	f100 0a14 	add.w	sl, r0, #20
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	4655      	mov	r5, sl
 800dd9e:	469b      	mov	fp, r3
 800dda0:	45b1      	cmp	r9, r6
 800dda2:	d337      	bcc.n	800de14 <__gethex+0x1d0>
 800dda4:	f845 bb04 	str.w	fp, [r5], #4
 800dda8:	eba5 050a 	sub.w	r5, r5, sl
 800ddac:	10ad      	asrs	r5, r5, #2
 800ddae:	6125      	str	r5, [r4, #16]
 800ddb0:	4658      	mov	r0, fp
 800ddb2:	f000 fb1d 	bl	800e3f0 <__hi0bits>
 800ddb6:	016d      	lsls	r5, r5, #5
 800ddb8:	f8d8 6000 	ldr.w	r6, [r8]
 800ddbc:	1a2d      	subs	r5, r5, r0
 800ddbe:	42b5      	cmp	r5, r6
 800ddc0:	dd54      	ble.n	800de6c <__gethex+0x228>
 800ddc2:	1bad      	subs	r5, r5, r6
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 fea9 	bl	800eb1e <__any_on>
 800ddcc:	4681      	mov	r9, r0
 800ddce:	b178      	cbz	r0, 800ddf0 <__gethex+0x1ac>
 800ddd0:	1e6b      	subs	r3, r5, #1
 800ddd2:	1159      	asrs	r1, r3, #5
 800ddd4:	f003 021f 	and.w	r2, r3, #31
 800ddd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dddc:	f04f 0901 	mov.w	r9, #1
 800dde0:	fa09 f202 	lsl.w	r2, r9, r2
 800dde4:	420a      	tst	r2, r1
 800dde6:	d003      	beq.n	800ddf0 <__gethex+0x1ac>
 800dde8:	454b      	cmp	r3, r9
 800ddea:	dc36      	bgt.n	800de5a <__gethex+0x216>
 800ddec:	f04f 0902 	mov.w	r9, #2
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f7ff febe 	bl	800db74 <rshift>
 800ddf8:	442f      	add	r7, r5
 800ddfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddfe:	42bb      	cmp	r3, r7
 800de00:	da42      	bge.n	800de88 <__gethex+0x244>
 800de02:	9801      	ldr	r0, [sp, #4]
 800de04:	4621      	mov	r1, r4
 800de06:	f000 fa41 	bl	800e28c <_Bfree>
 800de0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de0c:	2300      	movs	r3, #0
 800de0e:	6013      	str	r3, [r2, #0]
 800de10:	25a3      	movs	r5, #163	@ 0xa3
 800de12:	e793      	b.n	800dd3c <__gethex+0xf8>
 800de14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800de18:	2a2e      	cmp	r2, #46	@ 0x2e
 800de1a:	d012      	beq.n	800de42 <__gethex+0x1fe>
 800de1c:	2b20      	cmp	r3, #32
 800de1e:	d104      	bne.n	800de2a <__gethex+0x1e6>
 800de20:	f845 bb04 	str.w	fp, [r5], #4
 800de24:	f04f 0b00 	mov.w	fp, #0
 800de28:	465b      	mov	r3, fp
 800de2a:	7830      	ldrb	r0, [r6, #0]
 800de2c:	9303      	str	r3, [sp, #12]
 800de2e:	f7ff fef3 	bl	800dc18 <__hexdig_fun>
 800de32:	9b03      	ldr	r3, [sp, #12]
 800de34:	f000 000f 	and.w	r0, r0, #15
 800de38:	4098      	lsls	r0, r3
 800de3a:	ea4b 0b00 	orr.w	fp, fp, r0
 800de3e:	3304      	adds	r3, #4
 800de40:	e7ae      	b.n	800dda0 <__gethex+0x15c>
 800de42:	45b1      	cmp	r9, r6
 800de44:	d8ea      	bhi.n	800de1c <__gethex+0x1d8>
 800de46:	492b      	ldr	r1, [pc, #172]	@ (800def4 <__gethex+0x2b0>)
 800de48:	9303      	str	r3, [sp, #12]
 800de4a:	2201      	movs	r2, #1
 800de4c:	4630      	mov	r0, r6
 800de4e:	f7fe feac 	bl	800cbaa <strncmp>
 800de52:	9b03      	ldr	r3, [sp, #12]
 800de54:	2800      	cmp	r0, #0
 800de56:	d1e1      	bne.n	800de1c <__gethex+0x1d8>
 800de58:	e7a2      	b.n	800dda0 <__gethex+0x15c>
 800de5a:	1ea9      	subs	r1, r5, #2
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 fe5e 	bl	800eb1e <__any_on>
 800de62:	2800      	cmp	r0, #0
 800de64:	d0c2      	beq.n	800ddec <__gethex+0x1a8>
 800de66:	f04f 0903 	mov.w	r9, #3
 800de6a:	e7c1      	b.n	800ddf0 <__gethex+0x1ac>
 800de6c:	da09      	bge.n	800de82 <__gethex+0x23e>
 800de6e:	1b75      	subs	r5, r6, r5
 800de70:	4621      	mov	r1, r4
 800de72:	9801      	ldr	r0, [sp, #4]
 800de74:	462a      	mov	r2, r5
 800de76:	f000 fc19 	bl	800e6ac <__lshift>
 800de7a:	1b7f      	subs	r7, r7, r5
 800de7c:	4604      	mov	r4, r0
 800de7e:	f100 0a14 	add.w	sl, r0, #20
 800de82:	f04f 0900 	mov.w	r9, #0
 800de86:	e7b8      	b.n	800ddfa <__gethex+0x1b6>
 800de88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de8c:	42bd      	cmp	r5, r7
 800de8e:	dd6f      	ble.n	800df70 <__gethex+0x32c>
 800de90:	1bed      	subs	r5, r5, r7
 800de92:	42ae      	cmp	r6, r5
 800de94:	dc34      	bgt.n	800df00 <__gethex+0x2bc>
 800de96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de9a:	2b02      	cmp	r3, #2
 800de9c:	d022      	beq.n	800dee4 <__gethex+0x2a0>
 800de9e:	2b03      	cmp	r3, #3
 800dea0:	d024      	beq.n	800deec <__gethex+0x2a8>
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d115      	bne.n	800ded2 <__gethex+0x28e>
 800dea6:	42ae      	cmp	r6, r5
 800dea8:	d113      	bne.n	800ded2 <__gethex+0x28e>
 800deaa:	2e01      	cmp	r6, #1
 800deac:	d10b      	bne.n	800dec6 <__gethex+0x282>
 800deae:	9a02      	ldr	r2, [sp, #8]
 800deb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800deb4:	6013      	str	r3, [r2, #0]
 800deb6:	2301      	movs	r3, #1
 800deb8:	6123      	str	r3, [r4, #16]
 800deba:	f8ca 3000 	str.w	r3, [sl]
 800debe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dec0:	2562      	movs	r5, #98	@ 0x62
 800dec2:	601c      	str	r4, [r3, #0]
 800dec4:	e73a      	b.n	800dd3c <__gethex+0xf8>
 800dec6:	1e71      	subs	r1, r6, #1
 800dec8:	4620      	mov	r0, r4
 800deca:	f000 fe28 	bl	800eb1e <__any_on>
 800dece:	2800      	cmp	r0, #0
 800ded0:	d1ed      	bne.n	800deae <__gethex+0x26a>
 800ded2:	9801      	ldr	r0, [sp, #4]
 800ded4:	4621      	mov	r1, r4
 800ded6:	f000 f9d9 	bl	800e28c <_Bfree>
 800deda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dedc:	2300      	movs	r3, #0
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	2550      	movs	r5, #80	@ 0x50
 800dee2:	e72b      	b.n	800dd3c <__gethex+0xf8>
 800dee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d1f3      	bne.n	800ded2 <__gethex+0x28e>
 800deea:	e7e0      	b.n	800deae <__gethex+0x26a>
 800deec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1dd      	bne.n	800deae <__gethex+0x26a>
 800def2:	e7ee      	b.n	800ded2 <__gethex+0x28e>
 800def4:	08014323 	.word	0x08014323
 800def8:	08014461 	.word	0x08014461
 800defc:	08014472 	.word	0x08014472
 800df00:	1e6f      	subs	r7, r5, #1
 800df02:	f1b9 0f00 	cmp.w	r9, #0
 800df06:	d130      	bne.n	800df6a <__gethex+0x326>
 800df08:	b127      	cbz	r7, 800df14 <__gethex+0x2d0>
 800df0a:	4639      	mov	r1, r7
 800df0c:	4620      	mov	r0, r4
 800df0e:	f000 fe06 	bl	800eb1e <__any_on>
 800df12:	4681      	mov	r9, r0
 800df14:	117a      	asrs	r2, r7, #5
 800df16:	2301      	movs	r3, #1
 800df18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800df1c:	f007 071f 	and.w	r7, r7, #31
 800df20:	40bb      	lsls	r3, r7
 800df22:	4213      	tst	r3, r2
 800df24:	4629      	mov	r1, r5
 800df26:	4620      	mov	r0, r4
 800df28:	bf18      	it	ne
 800df2a:	f049 0902 	orrne.w	r9, r9, #2
 800df2e:	f7ff fe21 	bl	800db74 <rshift>
 800df32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800df36:	1b76      	subs	r6, r6, r5
 800df38:	2502      	movs	r5, #2
 800df3a:	f1b9 0f00 	cmp.w	r9, #0
 800df3e:	d047      	beq.n	800dfd0 <__gethex+0x38c>
 800df40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df44:	2b02      	cmp	r3, #2
 800df46:	d015      	beq.n	800df74 <__gethex+0x330>
 800df48:	2b03      	cmp	r3, #3
 800df4a:	d017      	beq.n	800df7c <__gethex+0x338>
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d109      	bne.n	800df64 <__gethex+0x320>
 800df50:	f019 0f02 	tst.w	r9, #2
 800df54:	d006      	beq.n	800df64 <__gethex+0x320>
 800df56:	f8da 3000 	ldr.w	r3, [sl]
 800df5a:	ea49 0903 	orr.w	r9, r9, r3
 800df5e:	f019 0f01 	tst.w	r9, #1
 800df62:	d10e      	bne.n	800df82 <__gethex+0x33e>
 800df64:	f045 0510 	orr.w	r5, r5, #16
 800df68:	e032      	b.n	800dfd0 <__gethex+0x38c>
 800df6a:	f04f 0901 	mov.w	r9, #1
 800df6e:	e7d1      	b.n	800df14 <__gethex+0x2d0>
 800df70:	2501      	movs	r5, #1
 800df72:	e7e2      	b.n	800df3a <__gethex+0x2f6>
 800df74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df76:	f1c3 0301 	rsb	r3, r3, #1
 800df7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d0f0      	beq.n	800df64 <__gethex+0x320>
 800df82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800df86:	f104 0314 	add.w	r3, r4, #20
 800df8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800df8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800df92:	f04f 0c00 	mov.w	ip, #0
 800df96:	4618      	mov	r0, r3
 800df98:	f853 2b04 	ldr.w	r2, [r3], #4
 800df9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dfa0:	d01b      	beq.n	800dfda <__gethex+0x396>
 800dfa2:	3201      	adds	r2, #1
 800dfa4:	6002      	str	r2, [r0, #0]
 800dfa6:	2d02      	cmp	r5, #2
 800dfa8:	f104 0314 	add.w	r3, r4, #20
 800dfac:	d13c      	bne.n	800e028 <__gethex+0x3e4>
 800dfae:	f8d8 2000 	ldr.w	r2, [r8]
 800dfb2:	3a01      	subs	r2, #1
 800dfb4:	42b2      	cmp	r2, r6
 800dfb6:	d109      	bne.n	800dfcc <__gethex+0x388>
 800dfb8:	1171      	asrs	r1, r6, #5
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfc0:	f006 061f 	and.w	r6, r6, #31
 800dfc4:	fa02 f606 	lsl.w	r6, r2, r6
 800dfc8:	421e      	tst	r6, r3
 800dfca:	d13a      	bne.n	800e042 <__gethex+0x3fe>
 800dfcc:	f045 0520 	orr.w	r5, r5, #32
 800dfd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfd2:	601c      	str	r4, [r3, #0]
 800dfd4:	9b02      	ldr	r3, [sp, #8]
 800dfd6:	601f      	str	r7, [r3, #0]
 800dfd8:	e6b0      	b.n	800dd3c <__gethex+0xf8>
 800dfda:	4299      	cmp	r1, r3
 800dfdc:	f843 cc04 	str.w	ip, [r3, #-4]
 800dfe0:	d8d9      	bhi.n	800df96 <__gethex+0x352>
 800dfe2:	68a3      	ldr	r3, [r4, #8]
 800dfe4:	459b      	cmp	fp, r3
 800dfe6:	db17      	blt.n	800e018 <__gethex+0x3d4>
 800dfe8:	6861      	ldr	r1, [r4, #4]
 800dfea:	9801      	ldr	r0, [sp, #4]
 800dfec:	3101      	adds	r1, #1
 800dfee:	f000 f90d 	bl	800e20c <_Balloc>
 800dff2:	4681      	mov	r9, r0
 800dff4:	b918      	cbnz	r0, 800dffe <__gethex+0x3ba>
 800dff6:	4b1a      	ldr	r3, [pc, #104]	@ (800e060 <__gethex+0x41c>)
 800dff8:	4602      	mov	r2, r0
 800dffa:	2184      	movs	r1, #132	@ 0x84
 800dffc:	e6c5      	b.n	800dd8a <__gethex+0x146>
 800dffe:	6922      	ldr	r2, [r4, #16]
 800e000:	3202      	adds	r2, #2
 800e002:	f104 010c 	add.w	r1, r4, #12
 800e006:	0092      	lsls	r2, r2, #2
 800e008:	300c      	adds	r0, #12
 800e00a:	f7fe fed6 	bl	800cdba <memcpy>
 800e00e:	4621      	mov	r1, r4
 800e010:	9801      	ldr	r0, [sp, #4]
 800e012:	f000 f93b 	bl	800e28c <_Bfree>
 800e016:	464c      	mov	r4, r9
 800e018:	6923      	ldr	r3, [r4, #16]
 800e01a:	1c5a      	adds	r2, r3, #1
 800e01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e020:	6122      	str	r2, [r4, #16]
 800e022:	2201      	movs	r2, #1
 800e024:	615a      	str	r2, [r3, #20]
 800e026:	e7be      	b.n	800dfa6 <__gethex+0x362>
 800e028:	6922      	ldr	r2, [r4, #16]
 800e02a:	455a      	cmp	r2, fp
 800e02c:	dd0b      	ble.n	800e046 <__gethex+0x402>
 800e02e:	2101      	movs	r1, #1
 800e030:	4620      	mov	r0, r4
 800e032:	f7ff fd9f 	bl	800db74 <rshift>
 800e036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e03a:	3701      	adds	r7, #1
 800e03c:	42bb      	cmp	r3, r7
 800e03e:	f6ff aee0 	blt.w	800de02 <__gethex+0x1be>
 800e042:	2501      	movs	r5, #1
 800e044:	e7c2      	b.n	800dfcc <__gethex+0x388>
 800e046:	f016 061f 	ands.w	r6, r6, #31
 800e04a:	d0fa      	beq.n	800e042 <__gethex+0x3fe>
 800e04c:	4453      	add	r3, sl
 800e04e:	f1c6 0620 	rsb	r6, r6, #32
 800e052:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e056:	f000 f9cb 	bl	800e3f0 <__hi0bits>
 800e05a:	42b0      	cmp	r0, r6
 800e05c:	dbe7      	blt.n	800e02e <__gethex+0x3ea>
 800e05e:	e7f0      	b.n	800e042 <__gethex+0x3fe>
 800e060:	08014461 	.word	0x08014461

0800e064 <L_shift>:
 800e064:	f1c2 0208 	rsb	r2, r2, #8
 800e068:	0092      	lsls	r2, r2, #2
 800e06a:	b570      	push	{r4, r5, r6, lr}
 800e06c:	f1c2 0620 	rsb	r6, r2, #32
 800e070:	6843      	ldr	r3, [r0, #4]
 800e072:	6804      	ldr	r4, [r0, #0]
 800e074:	fa03 f506 	lsl.w	r5, r3, r6
 800e078:	432c      	orrs	r4, r5
 800e07a:	40d3      	lsrs	r3, r2
 800e07c:	6004      	str	r4, [r0, #0]
 800e07e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e082:	4288      	cmp	r0, r1
 800e084:	d3f4      	bcc.n	800e070 <L_shift+0xc>
 800e086:	bd70      	pop	{r4, r5, r6, pc}

0800e088 <__match>:
 800e088:	b530      	push	{r4, r5, lr}
 800e08a:	6803      	ldr	r3, [r0, #0]
 800e08c:	3301      	adds	r3, #1
 800e08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e092:	b914      	cbnz	r4, 800e09a <__match+0x12>
 800e094:	6003      	str	r3, [r0, #0]
 800e096:	2001      	movs	r0, #1
 800e098:	bd30      	pop	{r4, r5, pc}
 800e09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e09e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e0a2:	2d19      	cmp	r5, #25
 800e0a4:	bf98      	it	ls
 800e0a6:	3220      	addls	r2, #32
 800e0a8:	42a2      	cmp	r2, r4
 800e0aa:	d0f0      	beq.n	800e08e <__match+0x6>
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	e7f3      	b.n	800e098 <__match+0x10>

0800e0b0 <__hexnan>:
 800e0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b4:	680b      	ldr	r3, [r1, #0]
 800e0b6:	6801      	ldr	r1, [r0, #0]
 800e0b8:	115e      	asrs	r6, r3, #5
 800e0ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e0be:	f013 031f 	ands.w	r3, r3, #31
 800e0c2:	b087      	sub	sp, #28
 800e0c4:	bf18      	it	ne
 800e0c6:	3604      	addne	r6, #4
 800e0c8:	2500      	movs	r5, #0
 800e0ca:	1f37      	subs	r7, r6, #4
 800e0cc:	4682      	mov	sl, r0
 800e0ce:	4690      	mov	r8, r2
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e0d6:	46b9      	mov	r9, r7
 800e0d8:	463c      	mov	r4, r7
 800e0da:	9502      	str	r5, [sp, #8]
 800e0dc:	46ab      	mov	fp, r5
 800e0de:	784a      	ldrb	r2, [r1, #1]
 800e0e0:	1c4b      	adds	r3, r1, #1
 800e0e2:	9303      	str	r3, [sp, #12]
 800e0e4:	b342      	cbz	r2, 800e138 <__hexnan+0x88>
 800e0e6:	4610      	mov	r0, r2
 800e0e8:	9105      	str	r1, [sp, #20]
 800e0ea:	9204      	str	r2, [sp, #16]
 800e0ec:	f7ff fd94 	bl	800dc18 <__hexdig_fun>
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d151      	bne.n	800e198 <__hexnan+0xe8>
 800e0f4:	9a04      	ldr	r2, [sp, #16]
 800e0f6:	9905      	ldr	r1, [sp, #20]
 800e0f8:	2a20      	cmp	r2, #32
 800e0fa:	d818      	bhi.n	800e12e <__hexnan+0x7e>
 800e0fc:	9b02      	ldr	r3, [sp, #8]
 800e0fe:	459b      	cmp	fp, r3
 800e100:	dd13      	ble.n	800e12a <__hexnan+0x7a>
 800e102:	454c      	cmp	r4, r9
 800e104:	d206      	bcs.n	800e114 <__hexnan+0x64>
 800e106:	2d07      	cmp	r5, #7
 800e108:	dc04      	bgt.n	800e114 <__hexnan+0x64>
 800e10a:	462a      	mov	r2, r5
 800e10c:	4649      	mov	r1, r9
 800e10e:	4620      	mov	r0, r4
 800e110:	f7ff ffa8 	bl	800e064 <L_shift>
 800e114:	4544      	cmp	r4, r8
 800e116:	d952      	bls.n	800e1be <__hexnan+0x10e>
 800e118:	2300      	movs	r3, #0
 800e11a:	f1a4 0904 	sub.w	r9, r4, #4
 800e11e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e122:	f8cd b008 	str.w	fp, [sp, #8]
 800e126:	464c      	mov	r4, r9
 800e128:	461d      	mov	r5, r3
 800e12a:	9903      	ldr	r1, [sp, #12]
 800e12c:	e7d7      	b.n	800e0de <__hexnan+0x2e>
 800e12e:	2a29      	cmp	r2, #41	@ 0x29
 800e130:	d157      	bne.n	800e1e2 <__hexnan+0x132>
 800e132:	3102      	adds	r1, #2
 800e134:	f8ca 1000 	str.w	r1, [sl]
 800e138:	f1bb 0f00 	cmp.w	fp, #0
 800e13c:	d051      	beq.n	800e1e2 <__hexnan+0x132>
 800e13e:	454c      	cmp	r4, r9
 800e140:	d206      	bcs.n	800e150 <__hexnan+0xa0>
 800e142:	2d07      	cmp	r5, #7
 800e144:	dc04      	bgt.n	800e150 <__hexnan+0xa0>
 800e146:	462a      	mov	r2, r5
 800e148:	4649      	mov	r1, r9
 800e14a:	4620      	mov	r0, r4
 800e14c:	f7ff ff8a 	bl	800e064 <L_shift>
 800e150:	4544      	cmp	r4, r8
 800e152:	d936      	bls.n	800e1c2 <__hexnan+0x112>
 800e154:	f1a8 0204 	sub.w	r2, r8, #4
 800e158:	4623      	mov	r3, r4
 800e15a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e15e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e162:	429f      	cmp	r7, r3
 800e164:	d2f9      	bcs.n	800e15a <__hexnan+0xaa>
 800e166:	1b3b      	subs	r3, r7, r4
 800e168:	f023 0303 	bic.w	r3, r3, #3
 800e16c:	3304      	adds	r3, #4
 800e16e:	3401      	adds	r4, #1
 800e170:	3e03      	subs	r6, #3
 800e172:	42b4      	cmp	r4, r6
 800e174:	bf88      	it	hi
 800e176:	2304      	movhi	r3, #4
 800e178:	4443      	add	r3, r8
 800e17a:	2200      	movs	r2, #0
 800e17c:	f843 2b04 	str.w	r2, [r3], #4
 800e180:	429f      	cmp	r7, r3
 800e182:	d2fb      	bcs.n	800e17c <__hexnan+0xcc>
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	b91b      	cbnz	r3, 800e190 <__hexnan+0xe0>
 800e188:	4547      	cmp	r7, r8
 800e18a:	d128      	bne.n	800e1de <__hexnan+0x12e>
 800e18c:	2301      	movs	r3, #1
 800e18e:	603b      	str	r3, [r7, #0]
 800e190:	2005      	movs	r0, #5
 800e192:	b007      	add	sp, #28
 800e194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e198:	3501      	adds	r5, #1
 800e19a:	2d08      	cmp	r5, #8
 800e19c:	f10b 0b01 	add.w	fp, fp, #1
 800e1a0:	dd06      	ble.n	800e1b0 <__hexnan+0x100>
 800e1a2:	4544      	cmp	r4, r8
 800e1a4:	d9c1      	bls.n	800e12a <__hexnan+0x7a>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1ac:	2501      	movs	r5, #1
 800e1ae:	3c04      	subs	r4, #4
 800e1b0:	6822      	ldr	r2, [r4, #0]
 800e1b2:	f000 000f 	and.w	r0, r0, #15
 800e1b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e1ba:	6020      	str	r0, [r4, #0]
 800e1bc:	e7b5      	b.n	800e12a <__hexnan+0x7a>
 800e1be:	2508      	movs	r5, #8
 800e1c0:	e7b3      	b.n	800e12a <__hexnan+0x7a>
 800e1c2:	9b01      	ldr	r3, [sp, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d0dd      	beq.n	800e184 <__hexnan+0xd4>
 800e1c8:	f1c3 0320 	rsb	r3, r3, #32
 800e1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1d0:	40da      	lsrs	r2, r3
 800e1d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e1d6:	4013      	ands	r3, r2
 800e1d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e1dc:	e7d2      	b.n	800e184 <__hexnan+0xd4>
 800e1de:	3f04      	subs	r7, #4
 800e1e0:	e7d0      	b.n	800e184 <__hexnan+0xd4>
 800e1e2:	2004      	movs	r0, #4
 800e1e4:	e7d5      	b.n	800e192 <__hexnan+0xe2>

0800e1e6 <__ascii_mbtowc>:
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	b901      	cbnz	r1, 800e1ec <__ascii_mbtowc+0x6>
 800e1ea:	a901      	add	r1, sp, #4
 800e1ec:	b142      	cbz	r2, 800e200 <__ascii_mbtowc+0x1a>
 800e1ee:	b14b      	cbz	r3, 800e204 <__ascii_mbtowc+0x1e>
 800e1f0:	7813      	ldrb	r3, [r2, #0]
 800e1f2:	600b      	str	r3, [r1, #0]
 800e1f4:	7812      	ldrb	r2, [r2, #0]
 800e1f6:	1e10      	subs	r0, r2, #0
 800e1f8:	bf18      	it	ne
 800e1fa:	2001      	movne	r0, #1
 800e1fc:	b002      	add	sp, #8
 800e1fe:	4770      	bx	lr
 800e200:	4610      	mov	r0, r2
 800e202:	e7fb      	b.n	800e1fc <__ascii_mbtowc+0x16>
 800e204:	f06f 0001 	mvn.w	r0, #1
 800e208:	e7f8      	b.n	800e1fc <__ascii_mbtowc+0x16>
	...

0800e20c <_Balloc>:
 800e20c:	b570      	push	{r4, r5, r6, lr}
 800e20e:	69c6      	ldr	r6, [r0, #28]
 800e210:	4604      	mov	r4, r0
 800e212:	460d      	mov	r5, r1
 800e214:	b976      	cbnz	r6, 800e234 <_Balloc+0x28>
 800e216:	2010      	movs	r0, #16
 800e218:	f7fc fd60 	bl	800acdc <malloc>
 800e21c:	4602      	mov	r2, r0
 800e21e:	61e0      	str	r0, [r4, #28]
 800e220:	b920      	cbnz	r0, 800e22c <_Balloc+0x20>
 800e222:	4b18      	ldr	r3, [pc, #96]	@ (800e284 <_Balloc+0x78>)
 800e224:	4818      	ldr	r0, [pc, #96]	@ (800e288 <_Balloc+0x7c>)
 800e226:	216b      	movs	r1, #107	@ 0x6b
 800e228:	f7fe fde4 	bl	800cdf4 <__assert_func>
 800e22c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e230:	6006      	str	r6, [r0, #0]
 800e232:	60c6      	str	r6, [r0, #12]
 800e234:	69e6      	ldr	r6, [r4, #28]
 800e236:	68f3      	ldr	r3, [r6, #12]
 800e238:	b183      	cbz	r3, 800e25c <_Balloc+0x50>
 800e23a:	69e3      	ldr	r3, [r4, #28]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e242:	b9b8      	cbnz	r0, 800e274 <_Balloc+0x68>
 800e244:	2101      	movs	r1, #1
 800e246:	fa01 f605 	lsl.w	r6, r1, r5
 800e24a:	1d72      	adds	r2, r6, #5
 800e24c:	0092      	lsls	r2, r2, #2
 800e24e:	4620      	mov	r0, r4
 800e250:	f000 fec9 	bl	800efe6 <_calloc_r>
 800e254:	b160      	cbz	r0, 800e270 <_Balloc+0x64>
 800e256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e25a:	e00e      	b.n	800e27a <_Balloc+0x6e>
 800e25c:	2221      	movs	r2, #33	@ 0x21
 800e25e:	2104      	movs	r1, #4
 800e260:	4620      	mov	r0, r4
 800e262:	f000 fec0 	bl	800efe6 <_calloc_r>
 800e266:	69e3      	ldr	r3, [r4, #28]
 800e268:	60f0      	str	r0, [r6, #12]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1e4      	bne.n	800e23a <_Balloc+0x2e>
 800e270:	2000      	movs	r0, #0
 800e272:	bd70      	pop	{r4, r5, r6, pc}
 800e274:	6802      	ldr	r2, [r0, #0]
 800e276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e27a:	2300      	movs	r3, #0
 800e27c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e280:	e7f7      	b.n	800e272 <_Balloc+0x66>
 800e282:	bf00      	nop
 800e284:	080142b4 	.word	0x080142b4
 800e288:	080144d2 	.word	0x080144d2

0800e28c <_Bfree>:
 800e28c:	b570      	push	{r4, r5, r6, lr}
 800e28e:	69c6      	ldr	r6, [r0, #28]
 800e290:	4605      	mov	r5, r0
 800e292:	460c      	mov	r4, r1
 800e294:	b976      	cbnz	r6, 800e2b4 <_Bfree+0x28>
 800e296:	2010      	movs	r0, #16
 800e298:	f7fc fd20 	bl	800acdc <malloc>
 800e29c:	4602      	mov	r2, r0
 800e29e:	61e8      	str	r0, [r5, #28]
 800e2a0:	b920      	cbnz	r0, 800e2ac <_Bfree+0x20>
 800e2a2:	4b09      	ldr	r3, [pc, #36]	@ (800e2c8 <_Bfree+0x3c>)
 800e2a4:	4809      	ldr	r0, [pc, #36]	@ (800e2cc <_Bfree+0x40>)
 800e2a6:	218f      	movs	r1, #143	@ 0x8f
 800e2a8:	f7fe fda4 	bl	800cdf4 <__assert_func>
 800e2ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2b0:	6006      	str	r6, [r0, #0]
 800e2b2:	60c6      	str	r6, [r0, #12]
 800e2b4:	b13c      	cbz	r4, 800e2c6 <_Bfree+0x3a>
 800e2b6:	69eb      	ldr	r3, [r5, #28]
 800e2b8:	6862      	ldr	r2, [r4, #4]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2c0:	6021      	str	r1, [r4, #0]
 800e2c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2c6:	bd70      	pop	{r4, r5, r6, pc}
 800e2c8:	080142b4 	.word	0x080142b4
 800e2cc:	080144d2 	.word	0x080144d2

0800e2d0 <__multadd>:
 800e2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d4:	690d      	ldr	r5, [r1, #16]
 800e2d6:	4607      	mov	r7, r0
 800e2d8:	460c      	mov	r4, r1
 800e2da:	461e      	mov	r6, r3
 800e2dc:	f101 0c14 	add.w	ip, r1, #20
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	f8dc 3000 	ldr.w	r3, [ip]
 800e2e6:	b299      	uxth	r1, r3
 800e2e8:	fb02 6101 	mla	r1, r2, r1, r6
 800e2ec:	0c1e      	lsrs	r6, r3, #16
 800e2ee:	0c0b      	lsrs	r3, r1, #16
 800e2f0:	fb02 3306 	mla	r3, r2, r6, r3
 800e2f4:	b289      	uxth	r1, r1
 800e2f6:	3001      	adds	r0, #1
 800e2f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2fc:	4285      	cmp	r5, r0
 800e2fe:	f84c 1b04 	str.w	r1, [ip], #4
 800e302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e306:	dcec      	bgt.n	800e2e2 <__multadd+0x12>
 800e308:	b30e      	cbz	r6, 800e34e <__multadd+0x7e>
 800e30a:	68a3      	ldr	r3, [r4, #8]
 800e30c:	42ab      	cmp	r3, r5
 800e30e:	dc19      	bgt.n	800e344 <__multadd+0x74>
 800e310:	6861      	ldr	r1, [r4, #4]
 800e312:	4638      	mov	r0, r7
 800e314:	3101      	adds	r1, #1
 800e316:	f7ff ff79 	bl	800e20c <_Balloc>
 800e31a:	4680      	mov	r8, r0
 800e31c:	b928      	cbnz	r0, 800e32a <__multadd+0x5a>
 800e31e:	4602      	mov	r2, r0
 800e320:	4b0c      	ldr	r3, [pc, #48]	@ (800e354 <__multadd+0x84>)
 800e322:	480d      	ldr	r0, [pc, #52]	@ (800e358 <__multadd+0x88>)
 800e324:	21ba      	movs	r1, #186	@ 0xba
 800e326:	f7fe fd65 	bl	800cdf4 <__assert_func>
 800e32a:	6922      	ldr	r2, [r4, #16]
 800e32c:	3202      	adds	r2, #2
 800e32e:	f104 010c 	add.w	r1, r4, #12
 800e332:	0092      	lsls	r2, r2, #2
 800e334:	300c      	adds	r0, #12
 800e336:	f7fe fd40 	bl	800cdba <memcpy>
 800e33a:	4621      	mov	r1, r4
 800e33c:	4638      	mov	r0, r7
 800e33e:	f7ff ffa5 	bl	800e28c <_Bfree>
 800e342:	4644      	mov	r4, r8
 800e344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e348:	3501      	adds	r5, #1
 800e34a:	615e      	str	r6, [r3, #20]
 800e34c:	6125      	str	r5, [r4, #16]
 800e34e:	4620      	mov	r0, r4
 800e350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e354:	08014461 	.word	0x08014461
 800e358:	080144d2 	.word	0x080144d2

0800e35c <__s2b>:
 800e35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e360:	460c      	mov	r4, r1
 800e362:	4615      	mov	r5, r2
 800e364:	461f      	mov	r7, r3
 800e366:	2209      	movs	r2, #9
 800e368:	3308      	adds	r3, #8
 800e36a:	4606      	mov	r6, r0
 800e36c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e370:	2100      	movs	r1, #0
 800e372:	2201      	movs	r2, #1
 800e374:	429a      	cmp	r2, r3
 800e376:	db09      	blt.n	800e38c <__s2b+0x30>
 800e378:	4630      	mov	r0, r6
 800e37a:	f7ff ff47 	bl	800e20c <_Balloc>
 800e37e:	b940      	cbnz	r0, 800e392 <__s2b+0x36>
 800e380:	4602      	mov	r2, r0
 800e382:	4b19      	ldr	r3, [pc, #100]	@ (800e3e8 <__s2b+0x8c>)
 800e384:	4819      	ldr	r0, [pc, #100]	@ (800e3ec <__s2b+0x90>)
 800e386:	21d3      	movs	r1, #211	@ 0xd3
 800e388:	f7fe fd34 	bl	800cdf4 <__assert_func>
 800e38c:	0052      	lsls	r2, r2, #1
 800e38e:	3101      	adds	r1, #1
 800e390:	e7f0      	b.n	800e374 <__s2b+0x18>
 800e392:	9b08      	ldr	r3, [sp, #32]
 800e394:	6143      	str	r3, [r0, #20]
 800e396:	2d09      	cmp	r5, #9
 800e398:	f04f 0301 	mov.w	r3, #1
 800e39c:	6103      	str	r3, [r0, #16]
 800e39e:	dd16      	ble.n	800e3ce <__s2b+0x72>
 800e3a0:	f104 0909 	add.w	r9, r4, #9
 800e3a4:	46c8      	mov	r8, r9
 800e3a6:	442c      	add	r4, r5
 800e3a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e3ac:	4601      	mov	r1, r0
 800e3ae:	3b30      	subs	r3, #48	@ 0x30
 800e3b0:	220a      	movs	r2, #10
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7ff ff8c 	bl	800e2d0 <__multadd>
 800e3b8:	45a0      	cmp	r8, r4
 800e3ba:	d1f5      	bne.n	800e3a8 <__s2b+0x4c>
 800e3bc:	f1a5 0408 	sub.w	r4, r5, #8
 800e3c0:	444c      	add	r4, r9
 800e3c2:	1b2d      	subs	r5, r5, r4
 800e3c4:	1963      	adds	r3, r4, r5
 800e3c6:	42bb      	cmp	r3, r7
 800e3c8:	db04      	blt.n	800e3d4 <__s2b+0x78>
 800e3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ce:	340a      	adds	r4, #10
 800e3d0:	2509      	movs	r5, #9
 800e3d2:	e7f6      	b.n	800e3c2 <__s2b+0x66>
 800e3d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e3d8:	4601      	mov	r1, r0
 800e3da:	3b30      	subs	r3, #48	@ 0x30
 800e3dc:	220a      	movs	r2, #10
 800e3de:	4630      	mov	r0, r6
 800e3e0:	f7ff ff76 	bl	800e2d0 <__multadd>
 800e3e4:	e7ee      	b.n	800e3c4 <__s2b+0x68>
 800e3e6:	bf00      	nop
 800e3e8:	08014461 	.word	0x08014461
 800e3ec:	080144d2 	.word	0x080144d2

0800e3f0 <__hi0bits>:
 800e3f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	bf36      	itet	cc
 800e3f8:	0403      	lslcc	r3, r0, #16
 800e3fa:	2000      	movcs	r0, #0
 800e3fc:	2010      	movcc	r0, #16
 800e3fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e402:	bf3c      	itt	cc
 800e404:	021b      	lslcc	r3, r3, #8
 800e406:	3008      	addcc	r0, #8
 800e408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e40c:	bf3c      	itt	cc
 800e40e:	011b      	lslcc	r3, r3, #4
 800e410:	3004      	addcc	r0, #4
 800e412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e416:	bf3c      	itt	cc
 800e418:	009b      	lslcc	r3, r3, #2
 800e41a:	3002      	addcc	r0, #2
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	db05      	blt.n	800e42c <__hi0bits+0x3c>
 800e420:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e424:	f100 0001 	add.w	r0, r0, #1
 800e428:	bf08      	it	eq
 800e42a:	2020      	moveq	r0, #32
 800e42c:	4770      	bx	lr

0800e42e <__lo0bits>:
 800e42e:	6803      	ldr	r3, [r0, #0]
 800e430:	4602      	mov	r2, r0
 800e432:	f013 0007 	ands.w	r0, r3, #7
 800e436:	d00b      	beq.n	800e450 <__lo0bits+0x22>
 800e438:	07d9      	lsls	r1, r3, #31
 800e43a:	d421      	bmi.n	800e480 <__lo0bits+0x52>
 800e43c:	0798      	lsls	r0, r3, #30
 800e43e:	bf49      	itett	mi
 800e440:	085b      	lsrmi	r3, r3, #1
 800e442:	089b      	lsrpl	r3, r3, #2
 800e444:	2001      	movmi	r0, #1
 800e446:	6013      	strmi	r3, [r2, #0]
 800e448:	bf5c      	itt	pl
 800e44a:	6013      	strpl	r3, [r2, #0]
 800e44c:	2002      	movpl	r0, #2
 800e44e:	4770      	bx	lr
 800e450:	b299      	uxth	r1, r3
 800e452:	b909      	cbnz	r1, 800e458 <__lo0bits+0x2a>
 800e454:	0c1b      	lsrs	r3, r3, #16
 800e456:	2010      	movs	r0, #16
 800e458:	b2d9      	uxtb	r1, r3
 800e45a:	b909      	cbnz	r1, 800e460 <__lo0bits+0x32>
 800e45c:	3008      	adds	r0, #8
 800e45e:	0a1b      	lsrs	r3, r3, #8
 800e460:	0719      	lsls	r1, r3, #28
 800e462:	bf04      	itt	eq
 800e464:	091b      	lsreq	r3, r3, #4
 800e466:	3004      	addeq	r0, #4
 800e468:	0799      	lsls	r1, r3, #30
 800e46a:	bf04      	itt	eq
 800e46c:	089b      	lsreq	r3, r3, #2
 800e46e:	3002      	addeq	r0, #2
 800e470:	07d9      	lsls	r1, r3, #31
 800e472:	d403      	bmi.n	800e47c <__lo0bits+0x4e>
 800e474:	085b      	lsrs	r3, r3, #1
 800e476:	f100 0001 	add.w	r0, r0, #1
 800e47a:	d003      	beq.n	800e484 <__lo0bits+0x56>
 800e47c:	6013      	str	r3, [r2, #0]
 800e47e:	4770      	bx	lr
 800e480:	2000      	movs	r0, #0
 800e482:	4770      	bx	lr
 800e484:	2020      	movs	r0, #32
 800e486:	4770      	bx	lr

0800e488 <__i2b>:
 800e488:	b510      	push	{r4, lr}
 800e48a:	460c      	mov	r4, r1
 800e48c:	2101      	movs	r1, #1
 800e48e:	f7ff febd 	bl	800e20c <_Balloc>
 800e492:	4602      	mov	r2, r0
 800e494:	b928      	cbnz	r0, 800e4a2 <__i2b+0x1a>
 800e496:	4b05      	ldr	r3, [pc, #20]	@ (800e4ac <__i2b+0x24>)
 800e498:	4805      	ldr	r0, [pc, #20]	@ (800e4b0 <__i2b+0x28>)
 800e49a:	f240 1145 	movw	r1, #325	@ 0x145
 800e49e:	f7fe fca9 	bl	800cdf4 <__assert_func>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	6144      	str	r4, [r0, #20]
 800e4a6:	6103      	str	r3, [r0, #16]
 800e4a8:	bd10      	pop	{r4, pc}
 800e4aa:	bf00      	nop
 800e4ac:	08014461 	.word	0x08014461
 800e4b0:	080144d2 	.word	0x080144d2

0800e4b4 <__multiply>:
 800e4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b8:	4617      	mov	r7, r2
 800e4ba:	690a      	ldr	r2, [r1, #16]
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	bfa8      	it	ge
 800e4c2:	463b      	movge	r3, r7
 800e4c4:	4689      	mov	r9, r1
 800e4c6:	bfa4      	itt	ge
 800e4c8:	460f      	movge	r7, r1
 800e4ca:	4699      	movge	r9, r3
 800e4cc:	693d      	ldr	r5, [r7, #16]
 800e4ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	6879      	ldr	r1, [r7, #4]
 800e4d6:	eb05 060a 	add.w	r6, r5, sl
 800e4da:	42b3      	cmp	r3, r6
 800e4dc:	b085      	sub	sp, #20
 800e4de:	bfb8      	it	lt
 800e4e0:	3101      	addlt	r1, #1
 800e4e2:	f7ff fe93 	bl	800e20c <_Balloc>
 800e4e6:	b930      	cbnz	r0, 800e4f6 <__multiply+0x42>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	4b41      	ldr	r3, [pc, #260]	@ (800e5f0 <__multiply+0x13c>)
 800e4ec:	4841      	ldr	r0, [pc, #260]	@ (800e5f4 <__multiply+0x140>)
 800e4ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e4f2:	f7fe fc7f 	bl	800cdf4 <__assert_func>
 800e4f6:	f100 0414 	add.w	r4, r0, #20
 800e4fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e4fe:	4623      	mov	r3, r4
 800e500:	2200      	movs	r2, #0
 800e502:	4573      	cmp	r3, lr
 800e504:	d320      	bcc.n	800e548 <__multiply+0x94>
 800e506:	f107 0814 	add.w	r8, r7, #20
 800e50a:	f109 0114 	add.w	r1, r9, #20
 800e50e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e512:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e516:	9302      	str	r3, [sp, #8]
 800e518:	1beb      	subs	r3, r5, r7
 800e51a:	3b15      	subs	r3, #21
 800e51c:	f023 0303 	bic.w	r3, r3, #3
 800e520:	3304      	adds	r3, #4
 800e522:	3715      	adds	r7, #21
 800e524:	42bd      	cmp	r5, r7
 800e526:	bf38      	it	cc
 800e528:	2304      	movcc	r3, #4
 800e52a:	9301      	str	r3, [sp, #4]
 800e52c:	9b02      	ldr	r3, [sp, #8]
 800e52e:	9103      	str	r1, [sp, #12]
 800e530:	428b      	cmp	r3, r1
 800e532:	d80c      	bhi.n	800e54e <__multiply+0x9a>
 800e534:	2e00      	cmp	r6, #0
 800e536:	dd03      	ble.n	800e540 <__multiply+0x8c>
 800e538:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d055      	beq.n	800e5ec <__multiply+0x138>
 800e540:	6106      	str	r6, [r0, #16]
 800e542:	b005      	add	sp, #20
 800e544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e548:	f843 2b04 	str.w	r2, [r3], #4
 800e54c:	e7d9      	b.n	800e502 <__multiply+0x4e>
 800e54e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e552:	f1ba 0f00 	cmp.w	sl, #0
 800e556:	d01f      	beq.n	800e598 <__multiply+0xe4>
 800e558:	46c4      	mov	ip, r8
 800e55a:	46a1      	mov	r9, r4
 800e55c:	2700      	movs	r7, #0
 800e55e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e562:	f8d9 3000 	ldr.w	r3, [r9]
 800e566:	fa1f fb82 	uxth.w	fp, r2
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e570:	443b      	add	r3, r7
 800e572:	f8d9 7000 	ldr.w	r7, [r9]
 800e576:	0c12      	lsrs	r2, r2, #16
 800e578:	0c3f      	lsrs	r7, r7, #16
 800e57a:	fb0a 7202 	mla	r2, sl, r2, r7
 800e57e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e582:	b29b      	uxth	r3, r3
 800e584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e588:	4565      	cmp	r5, ip
 800e58a:	f849 3b04 	str.w	r3, [r9], #4
 800e58e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e592:	d8e4      	bhi.n	800e55e <__multiply+0xaa>
 800e594:	9b01      	ldr	r3, [sp, #4]
 800e596:	50e7      	str	r7, [r4, r3]
 800e598:	9b03      	ldr	r3, [sp, #12]
 800e59a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e59e:	3104      	adds	r1, #4
 800e5a0:	f1b9 0f00 	cmp.w	r9, #0
 800e5a4:	d020      	beq.n	800e5e8 <__multiply+0x134>
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	4647      	mov	r7, r8
 800e5aa:	46a4      	mov	ip, r4
 800e5ac:	f04f 0a00 	mov.w	sl, #0
 800e5b0:	f8b7 b000 	ldrh.w	fp, [r7]
 800e5b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e5b8:	fb09 220b 	mla	r2, r9, fp, r2
 800e5bc:	4452      	add	r2, sl
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5c4:	f84c 3b04 	str.w	r3, [ip], #4
 800e5c8:	f857 3b04 	ldr.w	r3, [r7], #4
 800e5cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5d0:	f8bc 3000 	ldrh.w	r3, [ip]
 800e5d4:	fb09 330a 	mla	r3, r9, sl, r3
 800e5d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e5dc:	42bd      	cmp	r5, r7
 800e5de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5e2:	d8e5      	bhi.n	800e5b0 <__multiply+0xfc>
 800e5e4:	9a01      	ldr	r2, [sp, #4]
 800e5e6:	50a3      	str	r3, [r4, r2]
 800e5e8:	3404      	adds	r4, #4
 800e5ea:	e79f      	b.n	800e52c <__multiply+0x78>
 800e5ec:	3e01      	subs	r6, #1
 800e5ee:	e7a1      	b.n	800e534 <__multiply+0x80>
 800e5f0:	08014461 	.word	0x08014461
 800e5f4:	080144d2 	.word	0x080144d2

0800e5f8 <__pow5mult>:
 800e5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5fc:	4615      	mov	r5, r2
 800e5fe:	f012 0203 	ands.w	r2, r2, #3
 800e602:	4607      	mov	r7, r0
 800e604:	460e      	mov	r6, r1
 800e606:	d007      	beq.n	800e618 <__pow5mult+0x20>
 800e608:	4c25      	ldr	r4, [pc, #148]	@ (800e6a0 <__pow5mult+0xa8>)
 800e60a:	3a01      	subs	r2, #1
 800e60c:	2300      	movs	r3, #0
 800e60e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e612:	f7ff fe5d 	bl	800e2d0 <__multadd>
 800e616:	4606      	mov	r6, r0
 800e618:	10ad      	asrs	r5, r5, #2
 800e61a:	d03d      	beq.n	800e698 <__pow5mult+0xa0>
 800e61c:	69fc      	ldr	r4, [r7, #28]
 800e61e:	b97c      	cbnz	r4, 800e640 <__pow5mult+0x48>
 800e620:	2010      	movs	r0, #16
 800e622:	f7fc fb5b 	bl	800acdc <malloc>
 800e626:	4602      	mov	r2, r0
 800e628:	61f8      	str	r0, [r7, #28]
 800e62a:	b928      	cbnz	r0, 800e638 <__pow5mult+0x40>
 800e62c:	4b1d      	ldr	r3, [pc, #116]	@ (800e6a4 <__pow5mult+0xac>)
 800e62e:	481e      	ldr	r0, [pc, #120]	@ (800e6a8 <__pow5mult+0xb0>)
 800e630:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e634:	f7fe fbde 	bl	800cdf4 <__assert_func>
 800e638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e63c:	6004      	str	r4, [r0, #0]
 800e63e:	60c4      	str	r4, [r0, #12]
 800e640:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e648:	b94c      	cbnz	r4, 800e65e <__pow5mult+0x66>
 800e64a:	f240 2171 	movw	r1, #625	@ 0x271
 800e64e:	4638      	mov	r0, r7
 800e650:	f7ff ff1a 	bl	800e488 <__i2b>
 800e654:	2300      	movs	r3, #0
 800e656:	f8c8 0008 	str.w	r0, [r8, #8]
 800e65a:	4604      	mov	r4, r0
 800e65c:	6003      	str	r3, [r0, #0]
 800e65e:	f04f 0900 	mov.w	r9, #0
 800e662:	07eb      	lsls	r3, r5, #31
 800e664:	d50a      	bpl.n	800e67c <__pow5mult+0x84>
 800e666:	4631      	mov	r1, r6
 800e668:	4622      	mov	r2, r4
 800e66a:	4638      	mov	r0, r7
 800e66c:	f7ff ff22 	bl	800e4b4 <__multiply>
 800e670:	4631      	mov	r1, r6
 800e672:	4680      	mov	r8, r0
 800e674:	4638      	mov	r0, r7
 800e676:	f7ff fe09 	bl	800e28c <_Bfree>
 800e67a:	4646      	mov	r6, r8
 800e67c:	106d      	asrs	r5, r5, #1
 800e67e:	d00b      	beq.n	800e698 <__pow5mult+0xa0>
 800e680:	6820      	ldr	r0, [r4, #0]
 800e682:	b938      	cbnz	r0, 800e694 <__pow5mult+0x9c>
 800e684:	4622      	mov	r2, r4
 800e686:	4621      	mov	r1, r4
 800e688:	4638      	mov	r0, r7
 800e68a:	f7ff ff13 	bl	800e4b4 <__multiply>
 800e68e:	6020      	str	r0, [r4, #0]
 800e690:	f8c0 9000 	str.w	r9, [r0]
 800e694:	4604      	mov	r4, r0
 800e696:	e7e4      	b.n	800e662 <__pow5mult+0x6a>
 800e698:	4630      	mov	r0, r6
 800e69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e69e:	bf00      	nop
 800e6a0:	08014694 	.word	0x08014694
 800e6a4:	080142b4 	.word	0x080142b4
 800e6a8:	080144d2 	.word	0x080144d2

0800e6ac <__lshift>:
 800e6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b0:	460c      	mov	r4, r1
 800e6b2:	6849      	ldr	r1, [r1, #4]
 800e6b4:	6923      	ldr	r3, [r4, #16]
 800e6b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6ba:	68a3      	ldr	r3, [r4, #8]
 800e6bc:	4607      	mov	r7, r0
 800e6be:	4691      	mov	r9, r2
 800e6c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6c4:	f108 0601 	add.w	r6, r8, #1
 800e6c8:	42b3      	cmp	r3, r6
 800e6ca:	db0b      	blt.n	800e6e4 <__lshift+0x38>
 800e6cc:	4638      	mov	r0, r7
 800e6ce:	f7ff fd9d 	bl	800e20c <_Balloc>
 800e6d2:	4605      	mov	r5, r0
 800e6d4:	b948      	cbnz	r0, 800e6ea <__lshift+0x3e>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	4b28      	ldr	r3, [pc, #160]	@ (800e77c <__lshift+0xd0>)
 800e6da:	4829      	ldr	r0, [pc, #164]	@ (800e780 <__lshift+0xd4>)
 800e6dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e6e0:	f7fe fb88 	bl	800cdf4 <__assert_func>
 800e6e4:	3101      	adds	r1, #1
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	e7ee      	b.n	800e6c8 <__lshift+0x1c>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	f100 0114 	add.w	r1, r0, #20
 800e6f0:	f100 0210 	add.w	r2, r0, #16
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	4553      	cmp	r3, sl
 800e6f8:	db33      	blt.n	800e762 <__lshift+0xb6>
 800e6fa:	6920      	ldr	r0, [r4, #16]
 800e6fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e700:	f104 0314 	add.w	r3, r4, #20
 800e704:	f019 091f 	ands.w	r9, r9, #31
 800e708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e70c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e710:	d02b      	beq.n	800e76a <__lshift+0xbe>
 800e712:	f1c9 0e20 	rsb	lr, r9, #32
 800e716:	468a      	mov	sl, r1
 800e718:	2200      	movs	r2, #0
 800e71a:	6818      	ldr	r0, [r3, #0]
 800e71c:	fa00 f009 	lsl.w	r0, r0, r9
 800e720:	4310      	orrs	r0, r2
 800e722:	f84a 0b04 	str.w	r0, [sl], #4
 800e726:	f853 2b04 	ldr.w	r2, [r3], #4
 800e72a:	459c      	cmp	ip, r3
 800e72c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e730:	d8f3      	bhi.n	800e71a <__lshift+0x6e>
 800e732:	ebac 0304 	sub.w	r3, ip, r4
 800e736:	3b15      	subs	r3, #21
 800e738:	f023 0303 	bic.w	r3, r3, #3
 800e73c:	3304      	adds	r3, #4
 800e73e:	f104 0015 	add.w	r0, r4, #21
 800e742:	4560      	cmp	r0, ip
 800e744:	bf88      	it	hi
 800e746:	2304      	movhi	r3, #4
 800e748:	50ca      	str	r2, [r1, r3]
 800e74a:	b10a      	cbz	r2, 800e750 <__lshift+0xa4>
 800e74c:	f108 0602 	add.w	r6, r8, #2
 800e750:	3e01      	subs	r6, #1
 800e752:	4638      	mov	r0, r7
 800e754:	612e      	str	r6, [r5, #16]
 800e756:	4621      	mov	r1, r4
 800e758:	f7ff fd98 	bl	800e28c <_Bfree>
 800e75c:	4628      	mov	r0, r5
 800e75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e762:	f842 0f04 	str.w	r0, [r2, #4]!
 800e766:	3301      	adds	r3, #1
 800e768:	e7c5      	b.n	800e6f6 <__lshift+0x4a>
 800e76a:	3904      	subs	r1, #4
 800e76c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e770:	f841 2f04 	str.w	r2, [r1, #4]!
 800e774:	459c      	cmp	ip, r3
 800e776:	d8f9      	bhi.n	800e76c <__lshift+0xc0>
 800e778:	e7ea      	b.n	800e750 <__lshift+0xa4>
 800e77a:	bf00      	nop
 800e77c:	08014461 	.word	0x08014461
 800e780:	080144d2 	.word	0x080144d2

0800e784 <__mcmp>:
 800e784:	690a      	ldr	r2, [r1, #16]
 800e786:	4603      	mov	r3, r0
 800e788:	6900      	ldr	r0, [r0, #16]
 800e78a:	1a80      	subs	r0, r0, r2
 800e78c:	b530      	push	{r4, r5, lr}
 800e78e:	d10e      	bne.n	800e7ae <__mcmp+0x2a>
 800e790:	3314      	adds	r3, #20
 800e792:	3114      	adds	r1, #20
 800e794:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e798:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e79c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e7a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e7a4:	4295      	cmp	r5, r2
 800e7a6:	d003      	beq.n	800e7b0 <__mcmp+0x2c>
 800e7a8:	d205      	bcs.n	800e7b6 <__mcmp+0x32>
 800e7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ae:	bd30      	pop	{r4, r5, pc}
 800e7b0:	42a3      	cmp	r3, r4
 800e7b2:	d3f3      	bcc.n	800e79c <__mcmp+0x18>
 800e7b4:	e7fb      	b.n	800e7ae <__mcmp+0x2a>
 800e7b6:	2001      	movs	r0, #1
 800e7b8:	e7f9      	b.n	800e7ae <__mcmp+0x2a>
	...

0800e7bc <__mdiff>:
 800e7bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c0:	4689      	mov	r9, r1
 800e7c2:	4606      	mov	r6, r0
 800e7c4:	4611      	mov	r1, r2
 800e7c6:	4648      	mov	r0, r9
 800e7c8:	4614      	mov	r4, r2
 800e7ca:	f7ff ffdb 	bl	800e784 <__mcmp>
 800e7ce:	1e05      	subs	r5, r0, #0
 800e7d0:	d112      	bne.n	800e7f8 <__mdiff+0x3c>
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	f7ff fd19 	bl	800e20c <_Balloc>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	b928      	cbnz	r0, 800e7ea <__mdiff+0x2e>
 800e7de:	4b3f      	ldr	r3, [pc, #252]	@ (800e8dc <__mdiff+0x120>)
 800e7e0:	f240 2137 	movw	r1, #567	@ 0x237
 800e7e4:	483e      	ldr	r0, [pc, #248]	@ (800e8e0 <__mdiff+0x124>)
 800e7e6:	f7fe fb05 	bl	800cdf4 <__assert_func>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	b003      	add	sp, #12
 800e7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f8:	bfbc      	itt	lt
 800e7fa:	464b      	movlt	r3, r9
 800e7fc:	46a1      	movlt	r9, r4
 800e7fe:	4630      	mov	r0, r6
 800e800:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e804:	bfba      	itte	lt
 800e806:	461c      	movlt	r4, r3
 800e808:	2501      	movlt	r5, #1
 800e80a:	2500      	movge	r5, #0
 800e80c:	f7ff fcfe 	bl	800e20c <_Balloc>
 800e810:	4602      	mov	r2, r0
 800e812:	b918      	cbnz	r0, 800e81c <__mdiff+0x60>
 800e814:	4b31      	ldr	r3, [pc, #196]	@ (800e8dc <__mdiff+0x120>)
 800e816:	f240 2145 	movw	r1, #581	@ 0x245
 800e81a:	e7e3      	b.n	800e7e4 <__mdiff+0x28>
 800e81c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e820:	6926      	ldr	r6, [r4, #16]
 800e822:	60c5      	str	r5, [r0, #12]
 800e824:	f109 0310 	add.w	r3, r9, #16
 800e828:	f109 0514 	add.w	r5, r9, #20
 800e82c:	f104 0e14 	add.w	lr, r4, #20
 800e830:	f100 0b14 	add.w	fp, r0, #20
 800e834:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e838:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e83c:	9301      	str	r3, [sp, #4]
 800e83e:	46d9      	mov	r9, fp
 800e840:	f04f 0c00 	mov.w	ip, #0
 800e844:	9b01      	ldr	r3, [sp, #4]
 800e846:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e84a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e84e:	9301      	str	r3, [sp, #4]
 800e850:	fa1f f38a 	uxth.w	r3, sl
 800e854:	4619      	mov	r1, r3
 800e856:	b283      	uxth	r3, r0
 800e858:	1acb      	subs	r3, r1, r3
 800e85a:	0c00      	lsrs	r0, r0, #16
 800e85c:	4463      	add	r3, ip
 800e85e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e862:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e866:	b29b      	uxth	r3, r3
 800e868:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e86c:	4576      	cmp	r6, lr
 800e86e:	f849 3b04 	str.w	r3, [r9], #4
 800e872:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e876:	d8e5      	bhi.n	800e844 <__mdiff+0x88>
 800e878:	1b33      	subs	r3, r6, r4
 800e87a:	3b15      	subs	r3, #21
 800e87c:	f023 0303 	bic.w	r3, r3, #3
 800e880:	3415      	adds	r4, #21
 800e882:	3304      	adds	r3, #4
 800e884:	42a6      	cmp	r6, r4
 800e886:	bf38      	it	cc
 800e888:	2304      	movcc	r3, #4
 800e88a:	441d      	add	r5, r3
 800e88c:	445b      	add	r3, fp
 800e88e:	461e      	mov	r6, r3
 800e890:	462c      	mov	r4, r5
 800e892:	4544      	cmp	r4, r8
 800e894:	d30e      	bcc.n	800e8b4 <__mdiff+0xf8>
 800e896:	f108 0103 	add.w	r1, r8, #3
 800e89a:	1b49      	subs	r1, r1, r5
 800e89c:	f021 0103 	bic.w	r1, r1, #3
 800e8a0:	3d03      	subs	r5, #3
 800e8a2:	45a8      	cmp	r8, r5
 800e8a4:	bf38      	it	cc
 800e8a6:	2100      	movcc	r1, #0
 800e8a8:	440b      	add	r3, r1
 800e8aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8ae:	b191      	cbz	r1, 800e8d6 <__mdiff+0x11a>
 800e8b0:	6117      	str	r7, [r2, #16]
 800e8b2:	e79d      	b.n	800e7f0 <__mdiff+0x34>
 800e8b4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e8b8:	46e6      	mov	lr, ip
 800e8ba:	0c08      	lsrs	r0, r1, #16
 800e8bc:	fa1c fc81 	uxtah	ip, ip, r1
 800e8c0:	4471      	add	r1, lr
 800e8c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e8c6:	b289      	uxth	r1, r1
 800e8c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e8cc:	f846 1b04 	str.w	r1, [r6], #4
 800e8d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8d4:	e7dd      	b.n	800e892 <__mdiff+0xd6>
 800e8d6:	3f01      	subs	r7, #1
 800e8d8:	e7e7      	b.n	800e8aa <__mdiff+0xee>
 800e8da:	bf00      	nop
 800e8dc:	08014461 	.word	0x08014461
 800e8e0:	080144d2 	.word	0x080144d2

0800e8e4 <__ulp>:
 800e8e4:	b082      	sub	sp, #8
 800e8e6:	ed8d 0b00 	vstr	d0, [sp]
 800e8ea:	9a01      	ldr	r2, [sp, #4]
 800e8ec:	4b0f      	ldr	r3, [pc, #60]	@ (800e92c <__ulp+0x48>)
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	dc08      	bgt.n	800e90a <__ulp+0x26>
 800e8f8:	425b      	negs	r3, r3
 800e8fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e8fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e902:	da04      	bge.n	800e90e <__ulp+0x2a>
 800e904:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e908:	4113      	asrs	r3, r2
 800e90a:	2200      	movs	r2, #0
 800e90c:	e008      	b.n	800e920 <__ulp+0x3c>
 800e90e:	f1a2 0314 	sub.w	r3, r2, #20
 800e912:	2b1e      	cmp	r3, #30
 800e914:	bfda      	itte	le
 800e916:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e91a:	40da      	lsrle	r2, r3
 800e91c:	2201      	movgt	r2, #1
 800e91e:	2300      	movs	r3, #0
 800e920:	4619      	mov	r1, r3
 800e922:	4610      	mov	r0, r2
 800e924:	ec41 0b10 	vmov	d0, r0, r1
 800e928:	b002      	add	sp, #8
 800e92a:	4770      	bx	lr
 800e92c:	7ff00000 	.word	0x7ff00000

0800e930 <__b2d>:
 800e930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e934:	6906      	ldr	r6, [r0, #16]
 800e936:	f100 0814 	add.w	r8, r0, #20
 800e93a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e93e:	1f37      	subs	r7, r6, #4
 800e940:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e944:	4610      	mov	r0, r2
 800e946:	f7ff fd53 	bl	800e3f0 <__hi0bits>
 800e94a:	f1c0 0320 	rsb	r3, r0, #32
 800e94e:	280a      	cmp	r0, #10
 800e950:	600b      	str	r3, [r1, #0]
 800e952:	491b      	ldr	r1, [pc, #108]	@ (800e9c0 <__b2d+0x90>)
 800e954:	dc15      	bgt.n	800e982 <__b2d+0x52>
 800e956:	f1c0 0c0b 	rsb	ip, r0, #11
 800e95a:	fa22 f30c 	lsr.w	r3, r2, ip
 800e95e:	45b8      	cmp	r8, r7
 800e960:	ea43 0501 	orr.w	r5, r3, r1
 800e964:	bf34      	ite	cc
 800e966:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e96a:	2300      	movcs	r3, #0
 800e96c:	3015      	adds	r0, #21
 800e96e:	fa02 f000 	lsl.w	r0, r2, r0
 800e972:	fa23 f30c 	lsr.w	r3, r3, ip
 800e976:	4303      	orrs	r3, r0
 800e978:	461c      	mov	r4, r3
 800e97a:	ec45 4b10 	vmov	d0, r4, r5
 800e97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e982:	45b8      	cmp	r8, r7
 800e984:	bf3a      	itte	cc
 800e986:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e98a:	f1a6 0708 	subcc.w	r7, r6, #8
 800e98e:	2300      	movcs	r3, #0
 800e990:	380b      	subs	r0, #11
 800e992:	d012      	beq.n	800e9ba <__b2d+0x8a>
 800e994:	f1c0 0120 	rsb	r1, r0, #32
 800e998:	fa23 f401 	lsr.w	r4, r3, r1
 800e99c:	4082      	lsls	r2, r0
 800e99e:	4322      	orrs	r2, r4
 800e9a0:	4547      	cmp	r7, r8
 800e9a2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e9a6:	bf8c      	ite	hi
 800e9a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e9ac:	2200      	movls	r2, #0
 800e9ae:	4083      	lsls	r3, r0
 800e9b0:	40ca      	lsrs	r2, r1
 800e9b2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	e7de      	b.n	800e978 <__b2d+0x48>
 800e9ba:	ea42 0501 	orr.w	r5, r2, r1
 800e9be:	e7db      	b.n	800e978 <__b2d+0x48>
 800e9c0:	3ff00000 	.word	0x3ff00000

0800e9c4 <__d2b>:
 800e9c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9c8:	460f      	mov	r7, r1
 800e9ca:	2101      	movs	r1, #1
 800e9cc:	ec59 8b10 	vmov	r8, r9, d0
 800e9d0:	4616      	mov	r6, r2
 800e9d2:	f7ff fc1b 	bl	800e20c <_Balloc>
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	b930      	cbnz	r0, 800e9e8 <__d2b+0x24>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	4b23      	ldr	r3, [pc, #140]	@ (800ea6c <__d2b+0xa8>)
 800e9de:	4824      	ldr	r0, [pc, #144]	@ (800ea70 <__d2b+0xac>)
 800e9e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800e9e4:	f7fe fa06 	bl	800cdf4 <__assert_func>
 800e9e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e9ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e9f0:	b10d      	cbz	r5, 800e9f6 <__d2b+0x32>
 800e9f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e9f6:	9301      	str	r3, [sp, #4]
 800e9f8:	f1b8 0300 	subs.w	r3, r8, #0
 800e9fc:	d023      	beq.n	800ea46 <__d2b+0x82>
 800e9fe:	4668      	mov	r0, sp
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	f7ff fd14 	bl	800e42e <__lo0bits>
 800ea06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea0a:	b1d0      	cbz	r0, 800ea42 <__d2b+0x7e>
 800ea0c:	f1c0 0320 	rsb	r3, r0, #32
 800ea10:	fa02 f303 	lsl.w	r3, r2, r3
 800ea14:	430b      	orrs	r3, r1
 800ea16:	40c2      	lsrs	r2, r0
 800ea18:	6163      	str	r3, [r4, #20]
 800ea1a:	9201      	str	r2, [sp, #4]
 800ea1c:	9b01      	ldr	r3, [sp, #4]
 800ea1e:	61a3      	str	r3, [r4, #24]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	bf0c      	ite	eq
 800ea24:	2201      	moveq	r2, #1
 800ea26:	2202      	movne	r2, #2
 800ea28:	6122      	str	r2, [r4, #16]
 800ea2a:	b1a5      	cbz	r5, 800ea56 <__d2b+0x92>
 800ea2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ea30:	4405      	add	r5, r0
 800ea32:	603d      	str	r5, [r7, #0]
 800ea34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ea38:	6030      	str	r0, [r6, #0]
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	b003      	add	sp, #12
 800ea3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea42:	6161      	str	r1, [r4, #20]
 800ea44:	e7ea      	b.n	800ea1c <__d2b+0x58>
 800ea46:	a801      	add	r0, sp, #4
 800ea48:	f7ff fcf1 	bl	800e42e <__lo0bits>
 800ea4c:	9b01      	ldr	r3, [sp, #4]
 800ea4e:	6163      	str	r3, [r4, #20]
 800ea50:	3020      	adds	r0, #32
 800ea52:	2201      	movs	r2, #1
 800ea54:	e7e8      	b.n	800ea28 <__d2b+0x64>
 800ea56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ea5e:	6038      	str	r0, [r7, #0]
 800ea60:	6918      	ldr	r0, [r3, #16]
 800ea62:	f7ff fcc5 	bl	800e3f0 <__hi0bits>
 800ea66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea6a:	e7e5      	b.n	800ea38 <__d2b+0x74>
 800ea6c:	08014461 	.word	0x08014461
 800ea70:	080144d2 	.word	0x080144d2

0800ea74 <__ratio>:
 800ea74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea78:	b085      	sub	sp, #20
 800ea7a:	e9cd 1000 	strd	r1, r0, [sp]
 800ea7e:	a902      	add	r1, sp, #8
 800ea80:	f7ff ff56 	bl	800e930 <__b2d>
 800ea84:	9800      	ldr	r0, [sp, #0]
 800ea86:	a903      	add	r1, sp, #12
 800ea88:	ec55 4b10 	vmov	r4, r5, d0
 800ea8c:	f7ff ff50 	bl	800e930 <__b2d>
 800ea90:	9b01      	ldr	r3, [sp, #4]
 800ea92:	6919      	ldr	r1, [r3, #16]
 800ea94:	9b00      	ldr	r3, [sp, #0]
 800ea96:	691b      	ldr	r3, [r3, #16]
 800ea98:	1ac9      	subs	r1, r1, r3
 800ea9a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ea9e:	1a9b      	subs	r3, r3, r2
 800eaa0:	ec5b ab10 	vmov	sl, fp, d0
 800eaa4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	bfce      	itee	gt
 800eaac:	462a      	movgt	r2, r5
 800eaae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eab2:	465a      	movle	r2, fp
 800eab4:	462f      	mov	r7, r5
 800eab6:	46d9      	mov	r9, fp
 800eab8:	bfcc      	ite	gt
 800eaba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eabe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eac2:	464b      	mov	r3, r9
 800eac4:	4652      	mov	r2, sl
 800eac6:	4620      	mov	r0, r4
 800eac8:	4639      	mov	r1, r7
 800eaca:	f7f1 fecf 	bl	800086c <__aeabi_ddiv>
 800eace:	ec41 0b10 	vmov	d0, r0, r1
 800ead2:	b005      	add	sp, #20
 800ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ead8 <__copybits>:
 800ead8:	3901      	subs	r1, #1
 800eada:	b570      	push	{r4, r5, r6, lr}
 800eadc:	1149      	asrs	r1, r1, #5
 800eade:	6914      	ldr	r4, [r2, #16]
 800eae0:	3101      	adds	r1, #1
 800eae2:	f102 0314 	add.w	r3, r2, #20
 800eae6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eaea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eaee:	1f05      	subs	r5, r0, #4
 800eaf0:	42a3      	cmp	r3, r4
 800eaf2:	d30c      	bcc.n	800eb0e <__copybits+0x36>
 800eaf4:	1aa3      	subs	r3, r4, r2
 800eaf6:	3b11      	subs	r3, #17
 800eaf8:	f023 0303 	bic.w	r3, r3, #3
 800eafc:	3211      	adds	r2, #17
 800eafe:	42a2      	cmp	r2, r4
 800eb00:	bf88      	it	hi
 800eb02:	2300      	movhi	r3, #0
 800eb04:	4418      	add	r0, r3
 800eb06:	2300      	movs	r3, #0
 800eb08:	4288      	cmp	r0, r1
 800eb0a:	d305      	bcc.n	800eb18 <__copybits+0x40>
 800eb0c:	bd70      	pop	{r4, r5, r6, pc}
 800eb0e:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb12:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb16:	e7eb      	b.n	800eaf0 <__copybits+0x18>
 800eb18:	f840 3b04 	str.w	r3, [r0], #4
 800eb1c:	e7f4      	b.n	800eb08 <__copybits+0x30>

0800eb1e <__any_on>:
 800eb1e:	f100 0214 	add.w	r2, r0, #20
 800eb22:	6900      	ldr	r0, [r0, #16]
 800eb24:	114b      	asrs	r3, r1, #5
 800eb26:	4298      	cmp	r0, r3
 800eb28:	b510      	push	{r4, lr}
 800eb2a:	db11      	blt.n	800eb50 <__any_on+0x32>
 800eb2c:	dd0a      	ble.n	800eb44 <__any_on+0x26>
 800eb2e:	f011 011f 	ands.w	r1, r1, #31
 800eb32:	d007      	beq.n	800eb44 <__any_on+0x26>
 800eb34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb38:	fa24 f001 	lsr.w	r0, r4, r1
 800eb3c:	fa00 f101 	lsl.w	r1, r0, r1
 800eb40:	428c      	cmp	r4, r1
 800eb42:	d10b      	bne.n	800eb5c <__any_on+0x3e>
 800eb44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d803      	bhi.n	800eb54 <__any_on+0x36>
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	bd10      	pop	{r4, pc}
 800eb50:	4603      	mov	r3, r0
 800eb52:	e7f7      	b.n	800eb44 <__any_on+0x26>
 800eb54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb58:	2900      	cmp	r1, #0
 800eb5a:	d0f5      	beq.n	800eb48 <__any_on+0x2a>
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	e7f6      	b.n	800eb4e <__any_on+0x30>

0800eb60 <__ascii_wctomb>:
 800eb60:	4603      	mov	r3, r0
 800eb62:	4608      	mov	r0, r1
 800eb64:	b141      	cbz	r1, 800eb78 <__ascii_wctomb+0x18>
 800eb66:	2aff      	cmp	r2, #255	@ 0xff
 800eb68:	d904      	bls.n	800eb74 <__ascii_wctomb+0x14>
 800eb6a:	228a      	movs	r2, #138	@ 0x8a
 800eb6c:	601a      	str	r2, [r3, #0]
 800eb6e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb72:	4770      	bx	lr
 800eb74:	700a      	strb	r2, [r1, #0]
 800eb76:	2001      	movs	r0, #1
 800eb78:	4770      	bx	lr

0800eb7a <__ssputs_r>:
 800eb7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb7e:	688e      	ldr	r6, [r1, #8]
 800eb80:	461f      	mov	r7, r3
 800eb82:	42be      	cmp	r6, r7
 800eb84:	680b      	ldr	r3, [r1, #0]
 800eb86:	4682      	mov	sl, r0
 800eb88:	460c      	mov	r4, r1
 800eb8a:	4690      	mov	r8, r2
 800eb8c:	d82d      	bhi.n	800ebea <__ssputs_r+0x70>
 800eb8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb92:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb96:	d026      	beq.n	800ebe6 <__ssputs_r+0x6c>
 800eb98:	6965      	ldr	r5, [r4, #20]
 800eb9a:	6909      	ldr	r1, [r1, #16]
 800eb9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eba0:	eba3 0901 	sub.w	r9, r3, r1
 800eba4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eba8:	1c7b      	adds	r3, r7, #1
 800ebaa:	444b      	add	r3, r9
 800ebac:	106d      	asrs	r5, r5, #1
 800ebae:	429d      	cmp	r5, r3
 800ebb0:	bf38      	it	cc
 800ebb2:	461d      	movcc	r5, r3
 800ebb4:	0553      	lsls	r3, r2, #21
 800ebb6:	d527      	bpl.n	800ec08 <__ssputs_r+0x8e>
 800ebb8:	4629      	mov	r1, r5
 800ebba:	f7fc f8b9 	bl	800ad30 <_malloc_r>
 800ebbe:	4606      	mov	r6, r0
 800ebc0:	b360      	cbz	r0, 800ec1c <__ssputs_r+0xa2>
 800ebc2:	6921      	ldr	r1, [r4, #16]
 800ebc4:	464a      	mov	r2, r9
 800ebc6:	f7fe f8f8 	bl	800cdba <memcpy>
 800ebca:	89a3      	ldrh	r3, [r4, #12]
 800ebcc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ebd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebd4:	81a3      	strh	r3, [r4, #12]
 800ebd6:	6126      	str	r6, [r4, #16]
 800ebd8:	6165      	str	r5, [r4, #20]
 800ebda:	444e      	add	r6, r9
 800ebdc:	eba5 0509 	sub.w	r5, r5, r9
 800ebe0:	6026      	str	r6, [r4, #0]
 800ebe2:	60a5      	str	r5, [r4, #8]
 800ebe4:	463e      	mov	r6, r7
 800ebe6:	42be      	cmp	r6, r7
 800ebe8:	d900      	bls.n	800ebec <__ssputs_r+0x72>
 800ebea:	463e      	mov	r6, r7
 800ebec:	6820      	ldr	r0, [r4, #0]
 800ebee:	4632      	mov	r2, r6
 800ebf0:	4641      	mov	r1, r8
 800ebf2:	f000 f9d7 	bl	800efa4 <memmove>
 800ebf6:	68a3      	ldr	r3, [r4, #8]
 800ebf8:	1b9b      	subs	r3, r3, r6
 800ebfa:	60a3      	str	r3, [r4, #8]
 800ebfc:	6823      	ldr	r3, [r4, #0]
 800ebfe:	4433      	add	r3, r6
 800ec00:	6023      	str	r3, [r4, #0]
 800ec02:	2000      	movs	r0, #0
 800ec04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec08:	462a      	mov	r2, r5
 800ec0a:	f000 fa00 	bl	800f00e <_realloc_r>
 800ec0e:	4606      	mov	r6, r0
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d1e0      	bne.n	800ebd6 <__ssputs_r+0x5c>
 800ec14:	6921      	ldr	r1, [r4, #16]
 800ec16:	4650      	mov	r0, sl
 800ec18:	f7fe ff62 	bl	800dae0 <_free_r>
 800ec1c:	230c      	movs	r3, #12
 800ec1e:	f8ca 3000 	str.w	r3, [sl]
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec28:	81a3      	strh	r3, [r4, #12]
 800ec2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec2e:	e7e9      	b.n	800ec04 <__ssputs_r+0x8a>

0800ec30 <_svfiprintf_r>:
 800ec30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec34:	4698      	mov	r8, r3
 800ec36:	898b      	ldrh	r3, [r1, #12]
 800ec38:	061b      	lsls	r3, r3, #24
 800ec3a:	b09d      	sub	sp, #116	@ 0x74
 800ec3c:	4607      	mov	r7, r0
 800ec3e:	460d      	mov	r5, r1
 800ec40:	4614      	mov	r4, r2
 800ec42:	d510      	bpl.n	800ec66 <_svfiprintf_r+0x36>
 800ec44:	690b      	ldr	r3, [r1, #16]
 800ec46:	b973      	cbnz	r3, 800ec66 <_svfiprintf_r+0x36>
 800ec48:	2140      	movs	r1, #64	@ 0x40
 800ec4a:	f7fc f871 	bl	800ad30 <_malloc_r>
 800ec4e:	6028      	str	r0, [r5, #0]
 800ec50:	6128      	str	r0, [r5, #16]
 800ec52:	b930      	cbnz	r0, 800ec62 <_svfiprintf_r+0x32>
 800ec54:	230c      	movs	r3, #12
 800ec56:	603b      	str	r3, [r7, #0]
 800ec58:	f04f 30ff 	mov.w	r0, #4294967295
 800ec5c:	b01d      	add	sp, #116	@ 0x74
 800ec5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec62:	2340      	movs	r3, #64	@ 0x40
 800ec64:	616b      	str	r3, [r5, #20]
 800ec66:	2300      	movs	r3, #0
 800ec68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec6a:	2320      	movs	r3, #32
 800ec6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec74:	2330      	movs	r3, #48	@ 0x30
 800ec76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ee14 <_svfiprintf_r+0x1e4>
 800ec7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec7e:	f04f 0901 	mov.w	r9, #1
 800ec82:	4623      	mov	r3, r4
 800ec84:	469a      	mov	sl, r3
 800ec86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec8a:	b10a      	cbz	r2, 800ec90 <_svfiprintf_r+0x60>
 800ec8c:	2a25      	cmp	r2, #37	@ 0x25
 800ec8e:	d1f9      	bne.n	800ec84 <_svfiprintf_r+0x54>
 800ec90:	ebba 0b04 	subs.w	fp, sl, r4
 800ec94:	d00b      	beq.n	800ecae <_svfiprintf_r+0x7e>
 800ec96:	465b      	mov	r3, fp
 800ec98:	4622      	mov	r2, r4
 800ec9a:	4629      	mov	r1, r5
 800ec9c:	4638      	mov	r0, r7
 800ec9e:	f7ff ff6c 	bl	800eb7a <__ssputs_r>
 800eca2:	3001      	adds	r0, #1
 800eca4:	f000 80a7 	beq.w	800edf6 <_svfiprintf_r+0x1c6>
 800eca8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecaa:	445a      	add	r2, fp
 800ecac:	9209      	str	r2, [sp, #36]	@ 0x24
 800ecae:	f89a 3000 	ldrb.w	r3, [sl]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f000 809f 	beq.w	800edf6 <_svfiprintf_r+0x1c6>
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f04f 32ff 	mov.w	r2, #4294967295
 800ecbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecc2:	f10a 0a01 	add.w	sl, sl, #1
 800ecc6:	9304      	str	r3, [sp, #16]
 800ecc8:	9307      	str	r3, [sp, #28]
 800ecca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecce:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecd0:	4654      	mov	r4, sl
 800ecd2:	2205      	movs	r2, #5
 800ecd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecd8:	484e      	ldr	r0, [pc, #312]	@ (800ee14 <_svfiprintf_r+0x1e4>)
 800ecda:	f7f1 fa89 	bl	80001f0 <memchr>
 800ecde:	9a04      	ldr	r2, [sp, #16]
 800ece0:	b9d8      	cbnz	r0, 800ed1a <_svfiprintf_r+0xea>
 800ece2:	06d0      	lsls	r0, r2, #27
 800ece4:	bf44      	itt	mi
 800ece6:	2320      	movmi	r3, #32
 800ece8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecec:	0711      	lsls	r1, r2, #28
 800ecee:	bf44      	itt	mi
 800ecf0:	232b      	movmi	r3, #43	@ 0x2b
 800ecf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecf6:	f89a 3000 	ldrb.w	r3, [sl]
 800ecfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecfc:	d015      	beq.n	800ed2a <_svfiprintf_r+0xfa>
 800ecfe:	9a07      	ldr	r2, [sp, #28]
 800ed00:	4654      	mov	r4, sl
 800ed02:	2000      	movs	r0, #0
 800ed04:	f04f 0c0a 	mov.w	ip, #10
 800ed08:	4621      	mov	r1, r4
 800ed0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed0e:	3b30      	subs	r3, #48	@ 0x30
 800ed10:	2b09      	cmp	r3, #9
 800ed12:	d94b      	bls.n	800edac <_svfiprintf_r+0x17c>
 800ed14:	b1b0      	cbz	r0, 800ed44 <_svfiprintf_r+0x114>
 800ed16:	9207      	str	r2, [sp, #28]
 800ed18:	e014      	b.n	800ed44 <_svfiprintf_r+0x114>
 800ed1a:	eba0 0308 	sub.w	r3, r0, r8
 800ed1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ed22:	4313      	orrs	r3, r2
 800ed24:	9304      	str	r3, [sp, #16]
 800ed26:	46a2      	mov	sl, r4
 800ed28:	e7d2      	b.n	800ecd0 <_svfiprintf_r+0xa0>
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	1d19      	adds	r1, r3, #4
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	9103      	str	r1, [sp, #12]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	bfbb      	ittet	lt
 800ed36:	425b      	neglt	r3, r3
 800ed38:	f042 0202 	orrlt.w	r2, r2, #2
 800ed3c:	9307      	strge	r3, [sp, #28]
 800ed3e:	9307      	strlt	r3, [sp, #28]
 800ed40:	bfb8      	it	lt
 800ed42:	9204      	strlt	r2, [sp, #16]
 800ed44:	7823      	ldrb	r3, [r4, #0]
 800ed46:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed48:	d10a      	bne.n	800ed60 <_svfiprintf_r+0x130>
 800ed4a:	7863      	ldrb	r3, [r4, #1]
 800ed4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed4e:	d132      	bne.n	800edb6 <_svfiprintf_r+0x186>
 800ed50:	9b03      	ldr	r3, [sp, #12]
 800ed52:	1d1a      	adds	r2, r3, #4
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	9203      	str	r2, [sp, #12]
 800ed58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed5c:	3402      	adds	r4, #2
 800ed5e:	9305      	str	r3, [sp, #20]
 800ed60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ee24 <_svfiprintf_r+0x1f4>
 800ed64:	7821      	ldrb	r1, [r4, #0]
 800ed66:	2203      	movs	r2, #3
 800ed68:	4650      	mov	r0, sl
 800ed6a:	f7f1 fa41 	bl	80001f0 <memchr>
 800ed6e:	b138      	cbz	r0, 800ed80 <_svfiprintf_r+0x150>
 800ed70:	9b04      	ldr	r3, [sp, #16]
 800ed72:	eba0 000a 	sub.w	r0, r0, sl
 800ed76:	2240      	movs	r2, #64	@ 0x40
 800ed78:	4082      	lsls	r2, r0
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	3401      	adds	r4, #1
 800ed7e:	9304      	str	r3, [sp, #16]
 800ed80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed84:	4824      	ldr	r0, [pc, #144]	@ (800ee18 <_svfiprintf_r+0x1e8>)
 800ed86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed8a:	2206      	movs	r2, #6
 800ed8c:	f7f1 fa30 	bl	80001f0 <memchr>
 800ed90:	2800      	cmp	r0, #0
 800ed92:	d036      	beq.n	800ee02 <_svfiprintf_r+0x1d2>
 800ed94:	4b21      	ldr	r3, [pc, #132]	@ (800ee1c <_svfiprintf_r+0x1ec>)
 800ed96:	bb1b      	cbnz	r3, 800ede0 <_svfiprintf_r+0x1b0>
 800ed98:	9b03      	ldr	r3, [sp, #12]
 800ed9a:	3307      	adds	r3, #7
 800ed9c:	f023 0307 	bic.w	r3, r3, #7
 800eda0:	3308      	adds	r3, #8
 800eda2:	9303      	str	r3, [sp, #12]
 800eda4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eda6:	4433      	add	r3, r6
 800eda8:	9309      	str	r3, [sp, #36]	@ 0x24
 800edaa:	e76a      	b.n	800ec82 <_svfiprintf_r+0x52>
 800edac:	fb0c 3202 	mla	r2, ip, r2, r3
 800edb0:	460c      	mov	r4, r1
 800edb2:	2001      	movs	r0, #1
 800edb4:	e7a8      	b.n	800ed08 <_svfiprintf_r+0xd8>
 800edb6:	2300      	movs	r3, #0
 800edb8:	3401      	adds	r4, #1
 800edba:	9305      	str	r3, [sp, #20]
 800edbc:	4619      	mov	r1, r3
 800edbe:	f04f 0c0a 	mov.w	ip, #10
 800edc2:	4620      	mov	r0, r4
 800edc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edc8:	3a30      	subs	r2, #48	@ 0x30
 800edca:	2a09      	cmp	r2, #9
 800edcc:	d903      	bls.n	800edd6 <_svfiprintf_r+0x1a6>
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d0c6      	beq.n	800ed60 <_svfiprintf_r+0x130>
 800edd2:	9105      	str	r1, [sp, #20]
 800edd4:	e7c4      	b.n	800ed60 <_svfiprintf_r+0x130>
 800edd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800edda:	4604      	mov	r4, r0
 800eddc:	2301      	movs	r3, #1
 800edde:	e7f0      	b.n	800edc2 <_svfiprintf_r+0x192>
 800ede0:	ab03      	add	r3, sp, #12
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	462a      	mov	r2, r5
 800ede6:	4b0e      	ldr	r3, [pc, #56]	@ (800ee20 <_svfiprintf_r+0x1f0>)
 800ede8:	a904      	add	r1, sp, #16
 800edea:	4638      	mov	r0, r7
 800edec:	f7fc ff94 	bl	800bd18 <_printf_float>
 800edf0:	1c42      	adds	r2, r0, #1
 800edf2:	4606      	mov	r6, r0
 800edf4:	d1d6      	bne.n	800eda4 <_svfiprintf_r+0x174>
 800edf6:	89ab      	ldrh	r3, [r5, #12]
 800edf8:	065b      	lsls	r3, r3, #25
 800edfa:	f53f af2d 	bmi.w	800ec58 <_svfiprintf_r+0x28>
 800edfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee00:	e72c      	b.n	800ec5c <_svfiprintf_r+0x2c>
 800ee02:	ab03      	add	r3, sp, #12
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	462a      	mov	r2, r5
 800ee08:	4b05      	ldr	r3, [pc, #20]	@ (800ee20 <_svfiprintf_r+0x1f0>)
 800ee0a:	a904      	add	r1, sp, #16
 800ee0c:	4638      	mov	r0, r7
 800ee0e:	f7fd fa1b 	bl	800c248 <_printf_i>
 800ee12:	e7ed      	b.n	800edf0 <_svfiprintf_r+0x1c0>
 800ee14:	0801452b 	.word	0x0801452b
 800ee18:	08014535 	.word	0x08014535
 800ee1c:	0800bd19 	.word	0x0800bd19
 800ee20:	0800eb7b 	.word	0x0800eb7b
 800ee24:	08014531 	.word	0x08014531

0800ee28 <__sflush_r>:
 800ee28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee30:	0716      	lsls	r6, r2, #28
 800ee32:	4605      	mov	r5, r0
 800ee34:	460c      	mov	r4, r1
 800ee36:	d454      	bmi.n	800eee2 <__sflush_r+0xba>
 800ee38:	684b      	ldr	r3, [r1, #4]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	dc02      	bgt.n	800ee44 <__sflush_r+0x1c>
 800ee3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	dd48      	ble.n	800eed6 <__sflush_r+0xae>
 800ee44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee46:	2e00      	cmp	r6, #0
 800ee48:	d045      	beq.n	800eed6 <__sflush_r+0xae>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ee50:	682f      	ldr	r7, [r5, #0]
 800ee52:	6a21      	ldr	r1, [r4, #32]
 800ee54:	602b      	str	r3, [r5, #0]
 800ee56:	d030      	beq.n	800eeba <__sflush_r+0x92>
 800ee58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee5a:	89a3      	ldrh	r3, [r4, #12]
 800ee5c:	0759      	lsls	r1, r3, #29
 800ee5e:	d505      	bpl.n	800ee6c <__sflush_r+0x44>
 800ee60:	6863      	ldr	r3, [r4, #4]
 800ee62:	1ad2      	subs	r2, r2, r3
 800ee64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee66:	b10b      	cbz	r3, 800ee6c <__sflush_r+0x44>
 800ee68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee6a:	1ad2      	subs	r2, r2, r3
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee70:	6a21      	ldr	r1, [r4, #32]
 800ee72:	4628      	mov	r0, r5
 800ee74:	47b0      	blx	r6
 800ee76:	1c43      	adds	r3, r0, #1
 800ee78:	89a3      	ldrh	r3, [r4, #12]
 800ee7a:	d106      	bne.n	800ee8a <__sflush_r+0x62>
 800ee7c:	6829      	ldr	r1, [r5, #0]
 800ee7e:	291d      	cmp	r1, #29
 800ee80:	d82b      	bhi.n	800eeda <__sflush_r+0xb2>
 800ee82:	4a2a      	ldr	r2, [pc, #168]	@ (800ef2c <__sflush_r+0x104>)
 800ee84:	40ca      	lsrs	r2, r1
 800ee86:	07d6      	lsls	r6, r2, #31
 800ee88:	d527      	bpl.n	800eeda <__sflush_r+0xb2>
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	6062      	str	r2, [r4, #4]
 800ee8e:	04d9      	lsls	r1, r3, #19
 800ee90:	6922      	ldr	r2, [r4, #16]
 800ee92:	6022      	str	r2, [r4, #0]
 800ee94:	d504      	bpl.n	800eea0 <__sflush_r+0x78>
 800ee96:	1c42      	adds	r2, r0, #1
 800ee98:	d101      	bne.n	800ee9e <__sflush_r+0x76>
 800ee9a:	682b      	ldr	r3, [r5, #0]
 800ee9c:	b903      	cbnz	r3, 800eea0 <__sflush_r+0x78>
 800ee9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800eea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eea2:	602f      	str	r7, [r5, #0]
 800eea4:	b1b9      	cbz	r1, 800eed6 <__sflush_r+0xae>
 800eea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eeaa:	4299      	cmp	r1, r3
 800eeac:	d002      	beq.n	800eeb4 <__sflush_r+0x8c>
 800eeae:	4628      	mov	r0, r5
 800eeb0:	f7fe fe16 	bl	800dae0 <_free_r>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800eeb8:	e00d      	b.n	800eed6 <__sflush_r+0xae>
 800eeba:	2301      	movs	r3, #1
 800eebc:	4628      	mov	r0, r5
 800eebe:	47b0      	blx	r6
 800eec0:	4602      	mov	r2, r0
 800eec2:	1c50      	adds	r0, r2, #1
 800eec4:	d1c9      	bne.n	800ee5a <__sflush_r+0x32>
 800eec6:	682b      	ldr	r3, [r5, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d0c6      	beq.n	800ee5a <__sflush_r+0x32>
 800eecc:	2b1d      	cmp	r3, #29
 800eece:	d001      	beq.n	800eed4 <__sflush_r+0xac>
 800eed0:	2b16      	cmp	r3, #22
 800eed2:	d11e      	bne.n	800ef12 <__sflush_r+0xea>
 800eed4:	602f      	str	r7, [r5, #0]
 800eed6:	2000      	movs	r0, #0
 800eed8:	e022      	b.n	800ef20 <__sflush_r+0xf8>
 800eeda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eede:	b21b      	sxth	r3, r3
 800eee0:	e01b      	b.n	800ef1a <__sflush_r+0xf2>
 800eee2:	690f      	ldr	r7, [r1, #16]
 800eee4:	2f00      	cmp	r7, #0
 800eee6:	d0f6      	beq.n	800eed6 <__sflush_r+0xae>
 800eee8:	0793      	lsls	r3, r2, #30
 800eeea:	680e      	ldr	r6, [r1, #0]
 800eeec:	bf08      	it	eq
 800eeee:	694b      	ldreq	r3, [r1, #20]
 800eef0:	600f      	str	r7, [r1, #0]
 800eef2:	bf18      	it	ne
 800eef4:	2300      	movne	r3, #0
 800eef6:	eba6 0807 	sub.w	r8, r6, r7
 800eefa:	608b      	str	r3, [r1, #8]
 800eefc:	f1b8 0f00 	cmp.w	r8, #0
 800ef00:	dde9      	ble.n	800eed6 <__sflush_r+0xae>
 800ef02:	6a21      	ldr	r1, [r4, #32]
 800ef04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ef06:	4643      	mov	r3, r8
 800ef08:	463a      	mov	r2, r7
 800ef0a:	4628      	mov	r0, r5
 800ef0c:	47b0      	blx	r6
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	dc08      	bgt.n	800ef24 <__sflush_r+0xfc>
 800ef12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef1a:	81a3      	strh	r3, [r4, #12]
 800ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef24:	4407      	add	r7, r0
 800ef26:	eba8 0800 	sub.w	r8, r8, r0
 800ef2a:	e7e7      	b.n	800eefc <__sflush_r+0xd4>
 800ef2c:	20400001 	.word	0x20400001

0800ef30 <_fflush_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	690b      	ldr	r3, [r1, #16]
 800ef34:	4605      	mov	r5, r0
 800ef36:	460c      	mov	r4, r1
 800ef38:	b913      	cbnz	r3, 800ef40 <_fflush_r+0x10>
 800ef3a:	2500      	movs	r5, #0
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	bd38      	pop	{r3, r4, r5, pc}
 800ef40:	b118      	cbz	r0, 800ef4a <_fflush_r+0x1a>
 800ef42:	6a03      	ldr	r3, [r0, #32]
 800ef44:	b90b      	cbnz	r3, 800ef4a <_fflush_r+0x1a>
 800ef46:	f7fd fd37 	bl	800c9b8 <__sinit>
 800ef4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d0f3      	beq.n	800ef3a <_fflush_r+0xa>
 800ef52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ef54:	07d0      	lsls	r0, r2, #31
 800ef56:	d404      	bmi.n	800ef62 <_fflush_r+0x32>
 800ef58:	0599      	lsls	r1, r3, #22
 800ef5a:	d402      	bmi.n	800ef62 <_fflush_r+0x32>
 800ef5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef5e:	f7fd ff2a 	bl	800cdb6 <__retarget_lock_acquire_recursive>
 800ef62:	4628      	mov	r0, r5
 800ef64:	4621      	mov	r1, r4
 800ef66:	f7ff ff5f 	bl	800ee28 <__sflush_r>
 800ef6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef6c:	07da      	lsls	r2, r3, #31
 800ef6e:	4605      	mov	r5, r0
 800ef70:	d4e4      	bmi.n	800ef3c <_fflush_r+0xc>
 800ef72:	89a3      	ldrh	r3, [r4, #12]
 800ef74:	059b      	lsls	r3, r3, #22
 800ef76:	d4e1      	bmi.n	800ef3c <_fflush_r+0xc>
 800ef78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef7a:	f7fd ff1d 	bl	800cdb8 <__retarget_lock_release_recursive>
 800ef7e:	e7dd      	b.n	800ef3c <_fflush_r+0xc>

0800ef80 <fiprintf>:
 800ef80:	b40e      	push	{r1, r2, r3}
 800ef82:	b503      	push	{r0, r1, lr}
 800ef84:	4601      	mov	r1, r0
 800ef86:	ab03      	add	r3, sp, #12
 800ef88:	4805      	ldr	r0, [pc, #20]	@ (800efa0 <fiprintf+0x20>)
 800ef8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef8e:	6800      	ldr	r0, [r0, #0]
 800ef90:	9301      	str	r3, [sp, #4]
 800ef92:	f000 f893 	bl	800f0bc <_vfiprintf_r>
 800ef96:	b002      	add	sp, #8
 800ef98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef9c:	b003      	add	sp, #12
 800ef9e:	4770      	bx	lr
 800efa0:	20000278 	.word	0x20000278

0800efa4 <memmove>:
 800efa4:	4288      	cmp	r0, r1
 800efa6:	b510      	push	{r4, lr}
 800efa8:	eb01 0402 	add.w	r4, r1, r2
 800efac:	d902      	bls.n	800efb4 <memmove+0x10>
 800efae:	4284      	cmp	r4, r0
 800efb0:	4623      	mov	r3, r4
 800efb2:	d807      	bhi.n	800efc4 <memmove+0x20>
 800efb4:	1e43      	subs	r3, r0, #1
 800efb6:	42a1      	cmp	r1, r4
 800efb8:	d008      	beq.n	800efcc <memmove+0x28>
 800efba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efc2:	e7f8      	b.n	800efb6 <memmove+0x12>
 800efc4:	4402      	add	r2, r0
 800efc6:	4601      	mov	r1, r0
 800efc8:	428a      	cmp	r2, r1
 800efca:	d100      	bne.n	800efce <memmove+0x2a>
 800efcc:	bd10      	pop	{r4, pc}
 800efce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efd6:	e7f7      	b.n	800efc8 <memmove+0x24>

0800efd8 <abort>:
 800efd8:	b508      	push	{r3, lr}
 800efda:	2006      	movs	r0, #6
 800efdc:	f000 fa42 	bl	800f464 <raise>
 800efe0:	2001      	movs	r0, #1
 800efe2:	f7f3 fb19 	bl	8002618 <_exit>

0800efe6 <_calloc_r>:
 800efe6:	b570      	push	{r4, r5, r6, lr}
 800efe8:	fba1 5402 	umull	r5, r4, r1, r2
 800efec:	b934      	cbnz	r4, 800effc <_calloc_r+0x16>
 800efee:	4629      	mov	r1, r5
 800eff0:	f7fb fe9e 	bl	800ad30 <_malloc_r>
 800eff4:	4606      	mov	r6, r0
 800eff6:	b928      	cbnz	r0, 800f004 <_calloc_r+0x1e>
 800eff8:	4630      	mov	r0, r6
 800effa:	bd70      	pop	{r4, r5, r6, pc}
 800effc:	220c      	movs	r2, #12
 800effe:	6002      	str	r2, [r0, #0]
 800f000:	2600      	movs	r6, #0
 800f002:	e7f9      	b.n	800eff8 <_calloc_r+0x12>
 800f004:	462a      	mov	r2, r5
 800f006:	4621      	mov	r1, r4
 800f008:	f7fd fda7 	bl	800cb5a <memset>
 800f00c:	e7f4      	b.n	800eff8 <_calloc_r+0x12>

0800f00e <_realloc_r>:
 800f00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f012:	4607      	mov	r7, r0
 800f014:	4614      	mov	r4, r2
 800f016:	460d      	mov	r5, r1
 800f018:	b921      	cbnz	r1, 800f024 <_realloc_r+0x16>
 800f01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f01e:	4611      	mov	r1, r2
 800f020:	f7fb be86 	b.w	800ad30 <_malloc_r>
 800f024:	b92a      	cbnz	r2, 800f032 <_realloc_r+0x24>
 800f026:	f7fe fd5b 	bl	800dae0 <_free_r>
 800f02a:	4625      	mov	r5, r4
 800f02c:	4628      	mov	r0, r5
 800f02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f032:	f000 fa33 	bl	800f49c <_malloc_usable_size_r>
 800f036:	4284      	cmp	r4, r0
 800f038:	4606      	mov	r6, r0
 800f03a:	d802      	bhi.n	800f042 <_realloc_r+0x34>
 800f03c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f040:	d8f4      	bhi.n	800f02c <_realloc_r+0x1e>
 800f042:	4621      	mov	r1, r4
 800f044:	4638      	mov	r0, r7
 800f046:	f7fb fe73 	bl	800ad30 <_malloc_r>
 800f04a:	4680      	mov	r8, r0
 800f04c:	b908      	cbnz	r0, 800f052 <_realloc_r+0x44>
 800f04e:	4645      	mov	r5, r8
 800f050:	e7ec      	b.n	800f02c <_realloc_r+0x1e>
 800f052:	42b4      	cmp	r4, r6
 800f054:	4622      	mov	r2, r4
 800f056:	4629      	mov	r1, r5
 800f058:	bf28      	it	cs
 800f05a:	4632      	movcs	r2, r6
 800f05c:	f7fd fead 	bl	800cdba <memcpy>
 800f060:	4629      	mov	r1, r5
 800f062:	4638      	mov	r0, r7
 800f064:	f7fe fd3c 	bl	800dae0 <_free_r>
 800f068:	e7f1      	b.n	800f04e <_realloc_r+0x40>

0800f06a <__sfputc_r>:
 800f06a:	6893      	ldr	r3, [r2, #8]
 800f06c:	3b01      	subs	r3, #1
 800f06e:	2b00      	cmp	r3, #0
 800f070:	b410      	push	{r4}
 800f072:	6093      	str	r3, [r2, #8]
 800f074:	da08      	bge.n	800f088 <__sfputc_r+0x1e>
 800f076:	6994      	ldr	r4, [r2, #24]
 800f078:	42a3      	cmp	r3, r4
 800f07a:	db01      	blt.n	800f080 <__sfputc_r+0x16>
 800f07c:	290a      	cmp	r1, #10
 800f07e:	d103      	bne.n	800f088 <__sfputc_r+0x1e>
 800f080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f084:	f000 b932 	b.w	800f2ec <__swbuf_r>
 800f088:	6813      	ldr	r3, [r2, #0]
 800f08a:	1c58      	adds	r0, r3, #1
 800f08c:	6010      	str	r0, [r2, #0]
 800f08e:	7019      	strb	r1, [r3, #0]
 800f090:	4608      	mov	r0, r1
 800f092:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f096:	4770      	bx	lr

0800f098 <__sfputs_r>:
 800f098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f09a:	4606      	mov	r6, r0
 800f09c:	460f      	mov	r7, r1
 800f09e:	4614      	mov	r4, r2
 800f0a0:	18d5      	adds	r5, r2, r3
 800f0a2:	42ac      	cmp	r4, r5
 800f0a4:	d101      	bne.n	800f0aa <__sfputs_r+0x12>
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	e007      	b.n	800f0ba <__sfputs_r+0x22>
 800f0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ae:	463a      	mov	r2, r7
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f7ff ffda 	bl	800f06a <__sfputc_r>
 800f0b6:	1c43      	adds	r3, r0, #1
 800f0b8:	d1f3      	bne.n	800f0a2 <__sfputs_r+0xa>
 800f0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f0bc <_vfiprintf_r>:
 800f0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c0:	460d      	mov	r5, r1
 800f0c2:	b09d      	sub	sp, #116	@ 0x74
 800f0c4:	4614      	mov	r4, r2
 800f0c6:	4698      	mov	r8, r3
 800f0c8:	4606      	mov	r6, r0
 800f0ca:	b118      	cbz	r0, 800f0d4 <_vfiprintf_r+0x18>
 800f0cc:	6a03      	ldr	r3, [r0, #32]
 800f0ce:	b90b      	cbnz	r3, 800f0d4 <_vfiprintf_r+0x18>
 800f0d0:	f7fd fc72 	bl	800c9b8 <__sinit>
 800f0d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0d6:	07d9      	lsls	r1, r3, #31
 800f0d8:	d405      	bmi.n	800f0e6 <_vfiprintf_r+0x2a>
 800f0da:	89ab      	ldrh	r3, [r5, #12]
 800f0dc:	059a      	lsls	r2, r3, #22
 800f0de:	d402      	bmi.n	800f0e6 <_vfiprintf_r+0x2a>
 800f0e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0e2:	f7fd fe68 	bl	800cdb6 <__retarget_lock_acquire_recursive>
 800f0e6:	89ab      	ldrh	r3, [r5, #12]
 800f0e8:	071b      	lsls	r3, r3, #28
 800f0ea:	d501      	bpl.n	800f0f0 <_vfiprintf_r+0x34>
 800f0ec:	692b      	ldr	r3, [r5, #16]
 800f0ee:	b99b      	cbnz	r3, 800f118 <_vfiprintf_r+0x5c>
 800f0f0:	4629      	mov	r1, r5
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	f000 f938 	bl	800f368 <__swsetup_r>
 800f0f8:	b170      	cbz	r0, 800f118 <_vfiprintf_r+0x5c>
 800f0fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0fc:	07dc      	lsls	r4, r3, #31
 800f0fe:	d504      	bpl.n	800f10a <_vfiprintf_r+0x4e>
 800f100:	f04f 30ff 	mov.w	r0, #4294967295
 800f104:	b01d      	add	sp, #116	@ 0x74
 800f106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10a:	89ab      	ldrh	r3, [r5, #12]
 800f10c:	0598      	lsls	r0, r3, #22
 800f10e:	d4f7      	bmi.n	800f100 <_vfiprintf_r+0x44>
 800f110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f112:	f7fd fe51 	bl	800cdb8 <__retarget_lock_release_recursive>
 800f116:	e7f3      	b.n	800f100 <_vfiprintf_r+0x44>
 800f118:	2300      	movs	r3, #0
 800f11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f11c:	2320      	movs	r3, #32
 800f11e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f122:	f8cd 800c 	str.w	r8, [sp, #12]
 800f126:	2330      	movs	r3, #48	@ 0x30
 800f128:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f2d8 <_vfiprintf_r+0x21c>
 800f12c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f130:	f04f 0901 	mov.w	r9, #1
 800f134:	4623      	mov	r3, r4
 800f136:	469a      	mov	sl, r3
 800f138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f13c:	b10a      	cbz	r2, 800f142 <_vfiprintf_r+0x86>
 800f13e:	2a25      	cmp	r2, #37	@ 0x25
 800f140:	d1f9      	bne.n	800f136 <_vfiprintf_r+0x7a>
 800f142:	ebba 0b04 	subs.w	fp, sl, r4
 800f146:	d00b      	beq.n	800f160 <_vfiprintf_r+0xa4>
 800f148:	465b      	mov	r3, fp
 800f14a:	4622      	mov	r2, r4
 800f14c:	4629      	mov	r1, r5
 800f14e:	4630      	mov	r0, r6
 800f150:	f7ff ffa2 	bl	800f098 <__sfputs_r>
 800f154:	3001      	adds	r0, #1
 800f156:	f000 80a7 	beq.w	800f2a8 <_vfiprintf_r+0x1ec>
 800f15a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f15c:	445a      	add	r2, fp
 800f15e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f160:	f89a 3000 	ldrb.w	r3, [sl]
 800f164:	2b00      	cmp	r3, #0
 800f166:	f000 809f 	beq.w	800f2a8 <_vfiprintf_r+0x1ec>
 800f16a:	2300      	movs	r3, #0
 800f16c:	f04f 32ff 	mov.w	r2, #4294967295
 800f170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f174:	f10a 0a01 	add.w	sl, sl, #1
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	9307      	str	r3, [sp, #28]
 800f17c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f180:	931a      	str	r3, [sp, #104]	@ 0x68
 800f182:	4654      	mov	r4, sl
 800f184:	2205      	movs	r2, #5
 800f186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f18a:	4853      	ldr	r0, [pc, #332]	@ (800f2d8 <_vfiprintf_r+0x21c>)
 800f18c:	f7f1 f830 	bl	80001f0 <memchr>
 800f190:	9a04      	ldr	r2, [sp, #16]
 800f192:	b9d8      	cbnz	r0, 800f1cc <_vfiprintf_r+0x110>
 800f194:	06d1      	lsls	r1, r2, #27
 800f196:	bf44      	itt	mi
 800f198:	2320      	movmi	r3, #32
 800f19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f19e:	0713      	lsls	r3, r2, #28
 800f1a0:	bf44      	itt	mi
 800f1a2:	232b      	movmi	r3, #43	@ 0x2b
 800f1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1ae:	d015      	beq.n	800f1dc <_vfiprintf_r+0x120>
 800f1b0:	9a07      	ldr	r2, [sp, #28]
 800f1b2:	4654      	mov	r4, sl
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	f04f 0c0a 	mov.w	ip, #10
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1c0:	3b30      	subs	r3, #48	@ 0x30
 800f1c2:	2b09      	cmp	r3, #9
 800f1c4:	d94b      	bls.n	800f25e <_vfiprintf_r+0x1a2>
 800f1c6:	b1b0      	cbz	r0, 800f1f6 <_vfiprintf_r+0x13a>
 800f1c8:	9207      	str	r2, [sp, #28]
 800f1ca:	e014      	b.n	800f1f6 <_vfiprintf_r+0x13a>
 800f1cc:	eba0 0308 	sub.w	r3, r0, r8
 800f1d0:	fa09 f303 	lsl.w	r3, r9, r3
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	9304      	str	r3, [sp, #16]
 800f1d8:	46a2      	mov	sl, r4
 800f1da:	e7d2      	b.n	800f182 <_vfiprintf_r+0xc6>
 800f1dc:	9b03      	ldr	r3, [sp, #12]
 800f1de:	1d19      	adds	r1, r3, #4
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	9103      	str	r1, [sp, #12]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bfbb      	ittet	lt
 800f1e8:	425b      	neglt	r3, r3
 800f1ea:	f042 0202 	orrlt.w	r2, r2, #2
 800f1ee:	9307      	strge	r3, [sp, #28]
 800f1f0:	9307      	strlt	r3, [sp, #28]
 800f1f2:	bfb8      	it	lt
 800f1f4:	9204      	strlt	r2, [sp, #16]
 800f1f6:	7823      	ldrb	r3, [r4, #0]
 800f1f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1fa:	d10a      	bne.n	800f212 <_vfiprintf_r+0x156>
 800f1fc:	7863      	ldrb	r3, [r4, #1]
 800f1fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800f200:	d132      	bne.n	800f268 <_vfiprintf_r+0x1ac>
 800f202:	9b03      	ldr	r3, [sp, #12]
 800f204:	1d1a      	adds	r2, r3, #4
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	9203      	str	r2, [sp, #12]
 800f20a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f20e:	3402      	adds	r4, #2
 800f210:	9305      	str	r3, [sp, #20]
 800f212:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f2e8 <_vfiprintf_r+0x22c>
 800f216:	7821      	ldrb	r1, [r4, #0]
 800f218:	2203      	movs	r2, #3
 800f21a:	4650      	mov	r0, sl
 800f21c:	f7f0 ffe8 	bl	80001f0 <memchr>
 800f220:	b138      	cbz	r0, 800f232 <_vfiprintf_r+0x176>
 800f222:	9b04      	ldr	r3, [sp, #16]
 800f224:	eba0 000a 	sub.w	r0, r0, sl
 800f228:	2240      	movs	r2, #64	@ 0x40
 800f22a:	4082      	lsls	r2, r0
 800f22c:	4313      	orrs	r3, r2
 800f22e:	3401      	adds	r4, #1
 800f230:	9304      	str	r3, [sp, #16]
 800f232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f236:	4829      	ldr	r0, [pc, #164]	@ (800f2dc <_vfiprintf_r+0x220>)
 800f238:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f23c:	2206      	movs	r2, #6
 800f23e:	f7f0 ffd7 	bl	80001f0 <memchr>
 800f242:	2800      	cmp	r0, #0
 800f244:	d03f      	beq.n	800f2c6 <_vfiprintf_r+0x20a>
 800f246:	4b26      	ldr	r3, [pc, #152]	@ (800f2e0 <_vfiprintf_r+0x224>)
 800f248:	bb1b      	cbnz	r3, 800f292 <_vfiprintf_r+0x1d6>
 800f24a:	9b03      	ldr	r3, [sp, #12]
 800f24c:	3307      	adds	r3, #7
 800f24e:	f023 0307 	bic.w	r3, r3, #7
 800f252:	3308      	adds	r3, #8
 800f254:	9303      	str	r3, [sp, #12]
 800f256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f258:	443b      	add	r3, r7
 800f25a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f25c:	e76a      	b.n	800f134 <_vfiprintf_r+0x78>
 800f25e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f262:	460c      	mov	r4, r1
 800f264:	2001      	movs	r0, #1
 800f266:	e7a8      	b.n	800f1ba <_vfiprintf_r+0xfe>
 800f268:	2300      	movs	r3, #0
 800f26a:	3401      	adds	r4, #1
 800f26c:	9305      	str	r3, [sp, #20]
 800f26e:	4619      	mov	r1, r3
 800f270:	f04f 0c0a 	mov.w	ip, #10
 800f274:	4620      	mov	r0, r4
 800f276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f27a:	3a30      	subs	r2, #48	@ 0x30
 800f27c:	2a09      	cmp	r2, #9
 800f27e:	d903      	bls.n	800f288 <_vfiprintf_r+0x1cc>
 800f280:	2b00      	cmp	r3, #0
 800f282:	d0c6      	beq.n	800f212 <_vfiprintf_r+0x156>
 800f284:	9105      	str	r1, [sp, #20]
 800f286:	e7c4      	b.n	800f212 <_vfiprintf_r+0x156>
 800f288:	fb0c 2101 	mla	r1, ip, r1, r2
 800f28c:	4604      	mov	r4, r0
 800f28e:	2301      	movs	r3, #1
 800f290:	e7f0      	b.n	800f274 <_vfiprintf_r+0x1b8>
 800f292:	ab03      	add	r3, sp, #12
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	462a      	mov	r2, r5
 800f298:	4b12      	ldr	r3, [pc, #72]	@ (800f2e4 <_vfiprintf_r+0x228>)
 800f29a:	a904      	add	r1, sp, #16
 800f29c:	4630      	mov	r0, r6
 800f29e:	f7fc fd3b 	bl	800bd18 <_printf_float>
 800f2a2:	4607      	mov	r7, r0
 800f2a4:	1c78      	adds	r0, r7, #1
 800f2a6:	d1d6      	bne.n	800f256 <_vfiprintf_r+0x19a>
 800f2a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2aa:	07d9      	lsls	r1, r3, #31
 800f2ac:	d405      	bmi.n	800f2ba <_vfiprintf_r+0x1fe>
 800f2ae:	89ab      	ldrh	r3, [r5, #12]
 800f2b0:	059a      	lsls	r2, r3, #22
 800f2b2:	d402      	bmi.n	800f2ba <_vfiprintf_r+0x1fe>
 800f2b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2b6:	f7fd fd7f 	bl	800cdb8 <__retarget_lock_release_recursive>
 800f2ba:	89ab      	ldrh	r3, [r5, #12]
 800f2bc:	065b      	lsls	r3, r3, #25
 800f2be:	f53f af1f 	bmi.w	800f100 <_vfiprintf_r+0x44>
 800f2c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f2c4:	e71e      	b.n	800f104 <_vfiprintf_r+0x48>
 800f2c6:	ab03      	add	r3, sp, #12
 800f2c8:	9300      	str	r3, [sp, #0]
 800f2ca:	462a      	mov	r2, r5
 800f2cc:	4b05      	ldr	r3, [pc, #20]	@ (800f2e4 <_vfiprintf_r+0x228>)
 800f2ce:	a904      	add	r1, sp, #16
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	f7fc ffb9 	bl	800c248 <_printf_i>
 800f2d6:	e7e4      	b.n	800f2a2 <_vfiprintf_r+0x1e6>
 800f2d8:	0801452b 	.word	0x0801452b
 800f2dc:	08014535 	.word	0x08014535
 800f2e0:	0800bd19 	.word	0x0800bd19
 800f2e4:	0800f099 	.word	0x0800f099
 800f2e8:	08014531 	.word	0x08014531

0800f2ec <__swbuf_r>:
 800f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ee:	460e      	mov	r6, r1
 800f2f0:	4614      	mov	r4, r2
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	b118      	cbz	r0, 800f2fe <__swbuf_r+0x12>
 800f2f6:	6a03      	ldr	r3, [r0, #32]
 800f2f8:	b90b      	cbnz	r3, 800f2fe <__swbuf_r+0x12>
 800f2fa:	f7fd fb5d 	bl	800c9b8 <__sinit>
 800f2fe:	69a3      	ldr	r3, [r4, #24]
 800f300:	60a3      	str	r3, [r4, #8]
 800f302:	89a3      	ldrh	r3, [r4, #12]
 800f304:	071a      	lsls	r2, r3, #28
 800f306:	d501      	bpl.n	800f30c <__swbuf_r+0x20>
 800f308:	6923      	ldr	r3, [r4, #16]
 800f30a:	b943      	cbnz	r3, 800f31e <__swbuf_r+0x32>
 800f30c:	4621      	mov	r1, r4
 800f30e:	4628      	mov	r0, r5
 800f310:	f000 f82a 	bl	800f368 <__swsetup_r>
 800f314:	b118      	cbz	r0, 800f31e <__swbuf_r+0x32>
 800f316:	f04f 37ff 	mov.w	r7, #4294967295
 800f31a:	4638      	mov	r0, r7
 800f31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f31e:	6823      	ldr	r3, [r4, #0]
 800f320:	6922      	ldr	r2, [r4, #16]
 800f322:	1a98      	subs	r0, r3, r2
 800f324:	6963      	ldr	r3, [r4, #20]
 800f326:	b2f6      	uxtb	r6, r6
 800f328:	4283      	cmp	r3, r0
 800f32a:	4637      	mov	r7, r6
 800f32c:	dc05      	bgt.n	800f33a <__swbuf_r+0x4e>
 800f32e:	4621      	mov	r1, r4
 800f330:	4628      	mov	r0, r5
 800f332:	f7ff fdfd 	bl	800ef30 <_fflush_r>
 800f336:	2800      	cmp	r0, #0
 800f338:	d1ed      	bne.n	800f316 <__swbuf_r+0x2a>
 800f33a:	68a3      	ldr	r3, [r4, #8]
 800f33c:	3b01      	subs	r3, #1
 800f33e:	60a3      	str	r3, [r4, #8]
 800f340:	6823      	ldr	r3, [r4, #0]
 800f342:	1c5a      	adds	r2, r3, #1
 800f344:	6022      	str	r2, [r4, #0]
 800f346:	701e      	strb	r6, [r3, #0]
 800f348:	6962      	ldr	r2, [r4, #20]
 800f34a:	1c43      	adds	r3, r0, #1
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d004      	beq.n	800f35a <__swbuf_r+0x6e>
 800f350:	89a3      	ldrh	r3, [r4, #12]
 800f352:	07db      	lsls	r3, r3, #31
 800f354:	d5e1      	bpl.n	800f31a <__swbuf_r+0x2e>
 800f356:	2e0a      	cmp	r6, #10
 800f358:	d1df      	bne.n	800f31a <__swbuf_r+0x2e>
 800f35a:	4621      	mov	r1, r4
 800f35c:	4628      	mov	r0, r5
 800f35e:	f7ff fde7 	bl	800ef30 <_fflush_r>
 800f362:	2800      	cmp	r0, #0
 800f364:	d0d9      	beq.n	800f31a <__swbuf_r+0x2e>
 800f366:	e7d6      	b.n	800f316 <__swbuf_r+0x2a>

0800f368 <__swsetup_r>:
 800f368:	b538      	push	{r3, r4, r5, lr}
 800f36a:	4b29      	ldr	r3, [pc, #164]	@ (800f410 <__swsetup_r+0xa8>)
 800f36c:	4605      	mov	r5, r0
 800f36e:	6818      	ldr	r0, [r3, #0]
 800f370:	460c      	mov	r4, r1
 800f372:	b118      	cbz	r0, 800f37c <__swsetup_r+0x14>
 800f374:	6a03      	ldr	r3, [r0, #32]
 800f376:	b90b      	cbnz	r3, 800f37c <__swsetup_r+0x14>
 800f378:	f7fd fb1e 	bl	800c9b8 <__sinit>
 800f37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f380:	0719      	lsls	r1, r3, #28
 800f382:	d422      	bmi.n	800f3ca <__swsetup_r+0x62>
 800f384:	06da      	lsls	r2, r3, #27
 800f386:	d407      	bmi.n	800f398 <__swsetup_r+0x30>
 800f388:	2209      	movs	r2, #9
 800f38a:	602a      	str	r2, [r5, #0]
 800f38c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f390:	81a3      	strh	r3, [r4, #12]
 800f392:	f04f 30ff 	mov.w	r0, #4294967295
 800f396:	e033      	b.n	800f400 <__swsetup_r+0x98>
 800f398:	0758      	lsls	r0, r3, #29
 800f39a:	d512      	bpl.n	800f3c2 <__swsetup_r+0x5a>
 800f39c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f39e:	b141      	cbz	r1, 800f3b2 <__swsetup_r+0x4a>
 800f3a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f3a4:	4299      	cmp	r1, r3
 800f3a6:	d002      	beq.n	800f3ae <__swsetup_r+0x46>
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	f7fe fb99 	bl	800dae0 <_free_r>
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f3b8:	81a3      	strh	r3, [r4, #12]
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	6063      	str	r3, [r4, #4]
 800f3be:	6923      	ldr	r3, [r4, #16]
 800f3c0:	6023      	str	r3, [r4, #0]
 800f3c2:	89a3      	ldrh	r3, [r4, #12]
 800f3c4:	f043 0308 	orr.w	r3, r3, #8
 800f3c8:	81a3      	strh	r3, [r4, #12]
 800f3ca:	6923      	ldr	r3, [r4, #16]
 800f3cc:	b94b      	cbnz	r3, 800f3e2 <__swsetup_r+0x7a>
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f3d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f3d8:	d003      	beq.n	800f3e2 <__swsetup_r+0x7a>
 800f3da:	4621      	mov	r1, r4
 800f3dc:	4628      	mov	r0, r5
 800f3de:	f000 f88b 	bl	800f4f8 <__smakebuf_r>
 800f3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3e6:	f013 0201 	ands.w	r2, r3, #1
 800f3ea:	d00a      	beq.n	800f402 <__swsetup_r+0x9a>
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	60a2      	str	r2, [r4, #8]
 800f3f0:	6962      	ldr	r2, [r4, #20]
 800f3f2:	4252      	negs	r2, r2
 800f3f4:	61a2      	str	r2, [r4, #24]
 800f3f6:	6922      	ldr	r2, [r4, #16]
 800f3f8:	b942      	cbnz	r2, 800f40c <__swsetup_r+0xa4>
 800f3fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f3fe:	d1c5      	bne.n	800f38c <__swsetup_r+0x24>
 800f400:	bd38      	pop	{r3, r4, r5, pc}
 800f402:	0799      	lsls	r1, r3, #30
 800f404:	bf58      	it	pl
 800f406:	6962      	ldrpl	r2, [r4, #20]
 800f408:	60a2      	str	r2, [r4, #8]
 800f40a:	e7f4      	b.n	800f3f6 <__swsetup_r+0x8e>
 800f40c:	2000      	movs	r0, #0
 800f40e:	e7f7      	b.n	800f400 <__swsetup_r+0x98>
 800f410:	20000278 	.word	0x20000278

0800f414 <_raise_r>:
 800f414:	291f      	cmp	r1, #31
 800f416:	b538      	push	{r3, r4, r5, lr}
 800f418:	4605      	mov	r5, r0
 800f41a:	460c      	mov	r4, r1
 800f41c:	d904      	bls.n	800f428 <_raise_r+0x14>
 800f41e:	2316      	movs	r3, #22
 800f420:	6003      	str	r3, [r0, #0]
 800f422:	f04f 30ff 	mov.w	r0, #4294967295
 800f426:	bd38      	pop	{r3, r4, r5, pc}
 800f428:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f42a:	b112      	cbz	r2, 800f432 <_raise_r+0x1e>
 800f42c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f430:	b94b      	cbnz	r3, 800f446 <_raise_r+0x32>
 800f432:	4628      	mov	r0, r5
 800f434:	f000 f830 	bl	800f498 <_getpid_r>
 800f438:	4622      	mov	r2, r4
 800f43a:	4601      	mov	r1, r0
 800f43c:	4628      	mov	r0, r5
 800f43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f442:	f000 b817 	b.w	800f474 <_kill_r>
 800f446:	2b01      	cmp	r3, #1
 800f448:	d00a      	beq.n	800f460 <_raise_r+0x4c>
 800f44a:	1c59      	adds	r1, r3, #1
 800f44c:	d103      	bne.n	800f456 <_raise_r+0x42>
 800f44e:	2316      	movs	r3, #22
 800f450:	6003      	str	r3, [r0, #0]
 800f452:	2001      	movs	r0, #1
 800f454:	e7e7      	b.n	800f426 <_raise_r+0x12>
 800f456:	2100      	movs	r1, #0
 800f458:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f45c:	4620      	mov	r0, r4
 800f45e:	4798      	blx	r3
 800f460:	2000      	movs	r0, #0
 800f462:	e7e0      	b.n	800f426 <_raise_r+0x12>

0800f464 <raise>:
 800f464:	4b02      	ldr	r3, [pc, #8]	@ (800f470 <raise+0xc>)
 800f466:	4601      	mov	r1, r0
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	f7ff bfd3 	b.w	800f414 <_raise_r>
 800f46e:	bf00      	nop
 800f470:	20000278 	.word	0x20000278

0800f474 <_kill_r>:
 800f474:	b538      	push	{r3, r4, r5, lr}
 800f476:	4d07      	ldr	r5, [pc, #28]	@ (800f494 <_kill_r+0x20>)
 800f478:	2300      	movs	r3, #0
 800f47a:	4604      	mov	r4, r0
 800f47c:	4608      	mov	r0, r1
 800f47e:	4611      	mov	r1, r2
 800f480:	602b      	str	r3, [r5, #0]
 800f482:	f7f3 f8b9 	bl	80025f8 <_kill>
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	d102      	bne.n	800f490 <_kill_r+0x1c>
 800f48a:	682b      	ldr	r3, [r5, #0]
 800f48c:	b103      	cbz	r3, 800f490 <_kill_r+0x1c>
 800f48e:	6023      	str	r3, [r4, #0]
 800f490:	bd38      	pop	{r3, r4, r5, pc}
 800f492:	bf00      	nop
 800f494:	2000b30c 	.word	0x2000b30c

0800f498 <_getpid_r>:
 800f498:	f7f3 b8a6 	b.w	80025e8 <_getpid>

0800f49c <_malloc_usable_size_r>:
 800f49c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4a0:	1f18      	subs	r0, r3, #4
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	bfbc      	itt	lt
 800f4a6:	580b      	ldrlt	r3, [r1, r0]
 800f4a8:	18c0      	addlt	r0, r0, r3
 800f4aa:	4770      	bx	lr

0800f4ac <__swhatbuf_r>:
 800f4ac:	b570      	push	{r4, r5, r6, lr}
 800f4ae:	460c      	mov	r4, r1
 800f4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4b4:	2900      	cmp	r1, #0
 800f4b6:	b096      	sub	sp, #88	@ 0x58
 800f4b8:	4615      	mov	r5, r2
 800f4ba:	461e      	mov	r6, r3
 800f4bc:	da0d      	bge.n	800f4da <__swhatbuf_r+0x2e>
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f4c4:	f04f 0100 	mov.w	r1, #0
 800f4c8:	bf14      	ite	ne
 800f4ca:	2340      	movne	r3, #64	@ 0x40
 800f4cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	6031      	str	r1, [r6, #0]
 800f4d4:	602b      	str	r3, [r5, #0]
 800f4d6:	b016      	add	sp, #88	@ 0x58
 800f4d8:	bd70      	pop	{r4, r5, r6, pc}
 800f4da:	466a      	mov	r2, sp
 800f4dc:	f000 f848 	bl	800f570 <_fstat_r>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	dbec      	blt.n	800f4be <__swhatbuf_r+0x12>
 800f4e4:	9901      	ldr	r1, [sp, #4]
 800f4e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f4ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f4ee:	4259      	negs	r1, r3
 800f4f0:	4159      	adcs	r1, r3
 800f4f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4f6:	e7eb      	b.n	800f4d0 <__swhatbuf_r+0x24>

0800f4f8 <__smakebuf_r>:
 800f4f8:	898b      	ldrh	r3, [r1, #12]
 800f4fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4fc:	079d      	lsls	r5, r3, #30
 800f4fe:	4606      	mov	r6, r0
 800f500:	460c      	mov	r4, r1
 800f502:	d507      	bpl.n	800f514 <__smakebuf_r+0x1c>
 800f504:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f508:	6023      	str	r3, [r4, #0]
 800f50a:	6123      	str	r3, [r4, #16]
 800f50c:	2301      	movs	r3, #1
 800f50e:	6163      	str	r3, [r4, #20]
 800f510:	b003      	add	sp, #12
 800f512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f514:	ab01      	add	r3, sp, #4
 800f516:	466a      	mov	r2, sp
 800f518:	f7ff ffc8 	bl	800f4ac <__swhatbuf_r>
 800f51c:	9f00      	ldr	r7, [sp, #0]
 800f51e:	4605      	mov	r5, r0
 800f520:	4639      	mov	r1, r7
 800f522:	4630      	mov	r0, r6
 800f524:	f7fb fc04 	bl	800ad30 <_malloc_r>
 800f528:	b948      	cbnz	r0, 800f53e <__smakebuf_r+0x46>
 800f52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f52e:	059a      	lsls	r2, r3, #22
 800f530:	d4ee      	bmi.n	800f510 <__smakebuf_r+0x18>
 800f532:	f023 0303 	bic.w	r3, r3, #3
 800f536:	f043 0302 	orr.w	r3, r3, #2
 800f53a:	81a3      	strh	r3, [r4, #12]
 800f53c:	e7e2      	b.n	800f504 <__smakebuf_r+0xc>
 800f53e:	89a3      	ldrh	r3, [r4, #12]
 800f540:	6020      	str	r0, [r4, #0]
 800f542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f546:	81a3      	strh	r3, [r4, #12]
 800f548:	9b01      	ldr	r3, [sp, #4]
 800f54a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f54e:	b15b      	cbz	r3, 800f568 <__smakebuf_r+0x70>
 800f550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f554:	4630      	mov	r0, r6
 800f556:	f000 f81d 	bl	800f594 <_isatty_r>
 800f55a:	b128      	cbz	r0, 800f568 <__smakebuf_r+0x70>
 800f55c:	89a3      	ldrh	r3, [r4, #12]
 800f55e:	f023 0303 	bic.w	r3, r3, #3
 800f562:	f043 0301 	orr.w	r3, r3, #1
 800f566:	81a3      	strh	r3, [r4, #12]
 800f568:	89a3      	ldrh	r3, [r4, #12]
 800f56a:	431d      	orrs	r5, r3
 800f56c:	81a5      	strh	r5, [r4, #12]
 800f56e:	e7cf      	b.n	800f510 <__smakebuf_r+0x18>

0800f570 <_fstat_r>:
 800f570:	b538      	push	{r3, r4, r5, lr}
 800f572:	4d07      	ldr	r5, [pc, #28]	@ (800f590 <_fstat_r+0x20>)
 800f574:	2300      	movs	r3, #0
 800f576:	4604      	mov	r4, r0
 800f578:	4608      	mov	r0, r1
 800f57a:	4611      	mov	r1, r2
 800f57c:	602b      	str	r3, [r5, #0]
 800f57e:	f7f3 f89b 	bl	80026b8 <_fstat>
 800f582:	1c43      	adds	r3, r0, #1
 800f584:	d102      	bne.n	800f58c <_fstat_r+0x1c>
 800f586:	682b      	ldr	r3, [r5, #0]
 800f588:	b103      	cbz	r3, 800f58c <_fstat_r+0x1c>
 800f58a:	6023      	str	r3, [r4, #0]
 800f58c:	bd38      	pop	{r3, r4, r5, pc}
 800f58e:	bf00      	nop
 800f590:	2000b30c 	.word	0x2000b30c

0800f594 <_isatty_r>:
 800f594:	b538      	push	{r3, r4, r5, lr}
 800f596:	4d06      	ldr	r5, [pc, #24]	@ (800f5b0 <_isatty_r+0x1c>)
 800f598:	2300      	movs	r3, #0
 800f59a:	4604      	mov	r4, r0
 800f59c:	4608      	mov	r0, r1
 800f59e:	602b      	str	r3, [r5, #0]
 800f5a0:	f7f3 f89a 	bl	80026d8 <_isatty>
 800f5a4:	1c43      	adds	r3, r0, #1
 800f5a6:	d102      	bne.n	800f5ae <_isatty_r+0x1a>
 800f5a8:	682b      	ldr	r3, [r5, #0]
 800f5aa:	b103      	cbz	r3, 800f5ae <_isatty_r+0x1a>
 800f5ac:	6023      	str	r3, [r4, #0]
 800f5ae:	bd38      	pop	{r3, r4, r5, pc}
 800f5b0:	2000b30c 	.word	0x2000b30c

0800f5b4 <sqrtf>:
 800f5b4:	b508      	push	{r3, lr}
 800f5b6:	ed2d 8b02 	vpush	{d8}
 800f5ba:	eeb0 8a40 	vmov.f32	s16, s0
 800f5be:	f000 f817 	bl	800f5f0 <__ieee754_sqrtf>
 800f5c2:	eeb4 8a48 	vcmp.f32	s16, s16
 800f5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ca:	d60c      	bvs.n	800f5e6 <sqrtf+0x32>
 800f5cc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f5ec <sqrtf+0x38>
 800f5d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d8:	d505      	bpl.n	800f5e6 <sqrtf+0x32>
 800f5da:	f7fd fbc1 	bl	800cd60 <__errno>
 800f5de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f5e2:	2321      	movs	r3, #33	@ 0x21
 800f5e4:	6003      	str	r3, [r0, #0]
 800f5e6:	ecbd 8b02 	vpop	{d8}
 800f5ea:	bd08      	pop	{r3, pc}
 800f5ec:	00000000 	.word	0x00000000

0800f5f0 <__ieee754_sqrtf>:
 800f5f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f5f4:	4770      	bx	lr
	...

0800f5f8 <_init>:
 800f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fa:	bf00      	nop
 800f5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5fe:	bc08      	pop	{r3}
 800f600:	469e      	mov	lr, r3
 800f602:	4770      	bx	lr

0800f604 <_fini>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr
