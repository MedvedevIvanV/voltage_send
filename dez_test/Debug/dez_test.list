
dez_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d538  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800d730  0800d730  0000e730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dccc  0800dccc  0000f1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dccc  0800dccc  0000eccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcd4  0800dcd4  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcd4  0800dcd4  0000ecd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dcd8  0800dcd8  0000ecd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800dcdc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001d4  0800deb0  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800deb0  0000f4f8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bfa  00000000  00000000  0000f20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002efa  00000000  00000000  00026e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00029d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2f  00000000  00000000  0002b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bbed  00000000  00000000  0002bff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e38  00000000  00000000  00057be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119930  00000000  00000000  0006da1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018734c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca4  00000000  00000000  00187390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018e034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001d4 	.word	0x200001d4
 8000214:	00000000 	.word	0x00000000
 8000218:	0800d718 	.word	0x0800d718

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001d8 	.word	0x200001d8
 8000234:	0800d718 	.word	0x0800d718

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	@ 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2uiz>:
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	d211      	bcs.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b78:	d211      	bcs.n	8000b9e <__aeabi_d2uiz+0x2e>
 8000b7a:	d50d      	bpl.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d40e      	bmi.n	8000ba4 <__aeabi_d2uiz+0x34>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_d2uiz+0x3a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b9e6 	b.w	8001034 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f83c 	bl	8000cec <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_d2lz>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	2200      	movs	r2, #0
 8000c84:	2300      	movs	r3, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	460d      	mov	r5, r1
 8000c8a:	f7ff ff0b 	bl	8000aa4 <__aeabi_dcmplt>
 8000c8e:	b928      	cbnz	r0, 8000c9c <__aeabi_d2lz+0x1c>
 8000c90:	4620      	mov	r0, r4
 8000c92:	4629      	mov	r1, r5
 8000c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c98:	f000 b80a 	b.w	8000cb0 <__aeabi_d2ulz>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ca2:	f000 f805 	bl	8000cb0 <__aeabi_d2ulz>
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	bd38      	pop	{r3, r4, r5, pc}
 8000cae:	bf00      	nop

08000cb0 <__aeabi_d2ulz>:
 8000cb0:	b5d0      	push	{r4, r6, r7, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <__aeabi_d2ulz+0x34>)
 8000cb6:	4606      	mov	r6, r0
 8000cb8:	460f      	mov	r7, r1
 8000cba:	f7ff fc81 	bl	80005c0 <__aeabi_dmul>
 8000cbe:	f7ff ff57 	bl	8000b70 <__aeabi_d2uiz>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f7ff fc02 	bl	80004cc <__aeabi_ui2d>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <__aeabi_d2ulz+0x38>)
 8000ccc:	f7ff fc78 	bl	80005c0 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	f7ff faba 	bl	8000250 <__aeabi_dsub>
 8000cdc:	f7ff ff48 	bl	8000b70 <__aeabi_d2uiz>
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce4:	3df00000 	.word	0x3df00000
 8000ce8:	41f00000 	.word	0x41f00000

08000cec <__udivmoddi4>:
 8000cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000cf2:	4688      	mov	r8, r1
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	468e      	mov	lr, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d14a      	bne.n	8000d92 <__udivmoddi4+0xa6>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	d95f      	bls.n	8000dc2 <__udivmoddi4+0xd6>
 8000d02:	fab2 f682 	clz	r6, r2
 8000d06:	b14e      	cbz	r6, 8000d1c <__udivmoddi4+0x30>
 8000d08:	f1c6 0320 	rsb	r3, r6, #32
 8000d0c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d10:	40b7      	lsls	r7, r6
 8000d12:	40b4      	lsls	r4, r6
 8000d14:	fa20 f303 	lsr.w	r3, r0, r3
 8000d18:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d1c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	0c23      	lsrs	r3, r4, #16
 8000d26:	fbbe f1f8 	udiv	r1, lr, r8
 8000d2a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d32:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x5e>
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x5c>
 8000d42:	429a      	cmp	r2, r3
 8000d44:	f200 8154 	bhi.w	8000ff0 <__udivmoddi4+0x304>
 8000d48:	4601      	mov	r1, r0
 8000d4a:	1a9b      	subs	r3, r3, r2
 8000d4c:	b2a2      	uxth	r2, r4
 8000d4e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d52:	fb08 3310 	mls	r3, r8, r0, r3
 8000d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d5e:	4594      	cmp	ip, r2
 8000d60:	d90b      	bls.n	8000d7a <__udivmoddi4+0x8e>
 8000d62:	18ba      	adds	r2, r7, r2
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	bf2c      	ite	cs
 8000d6a:	2401      	movcs	r4, #1
 8000d6c:	2400      	movcc	r4, #0
 8000d6e:	4594      	cmp	ip, r2
 8000d70:	d902      	bls.n	8000d78 <__udivmoddi4+0x8c>
 8000d72:	2c00      	cmp	r4, #0
 8000d74:	f000 813f 	beq.w	8000ff6 <__udivmoddi4+0x30a>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7e:	eba2 020c 	sub.w	r2, r2, ip
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa2>
 8000d86:	40f2      	lsrs	r2, r6
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e9c5 2300 	strd	r2, r3, [r5]
 8000d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xb6>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb0>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d14e      	bne.n	8000e48 <__udivmoddi4+0x15c>
 8000daa:	4543      	cmp	r3, r8
 8000dac:	f0c0 8112 	bcc.w	8000fd4 <__udivmoddi4+0x2e8>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f240 810f 	bls.w	8000fd4 <__udivmoddi4+0x2e8>
 8000db6:	4608      	mov	r0, r1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e8      	beq.n	8000d8e <__udivmoddi4+0xa2>
 8000dbc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dc0:	e7e5      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f000 80ac 	beq.w	8000f20 <__udivmoddi4+0x234>
 8000dc8:	fab2 f682 	clz	r6, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	f040 80bb 	bne.w	8000f48 <__udivmoddi4+0x25c>
 8000dd2:	1a8b      	subs	r3, r1, r2
 8000dd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000dd8:	b2bc      	uxth	r4, r7
 8000dda:	2101      	movs	r1, #1
 8000ddc:	0c02      	lsrs	r2, r0, #16
 8000dde:	b280      	uxth	r0, r0
 8000de0:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000dec:	fb04 f20c 	mul.w	r2, r4, ip
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d90e      	bls.n	8000e12 <__udivmoddi4+0x126>
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dfa:	bf2c      	ite	cs
 8000dfc:	f04f 0901 	movcs.w	r9, #1
 8000e00:	f04f 0900 	movcc.w	r9, #0
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d903      	bls.n	8000e10 <__udivmoddi4+0x124>
 8000e08:	f1b9 0f00 	cmp.w	r9, #0
 8000e0c:	f000 80ec 	beq.w	8000fe8 <__udivmoddi4+0x2fc>
 8000e10:	46c4      	mov	ip, r8
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e1c:	fb04 f408 	mul.w	r4, r4, r8
 8000e20:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e24:	4294      	cmp	r4, r2
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x154>
 8000e28:	18ba      	adds	r2, r7, r2
 8000e2a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e2e:	bf2c      	ite	cs
 8000e30:	2001      	movcs	r0, #1
 8000e32:	2000      	movcc	r0, #0
 8000e34:	4294      	cmp	r4, r2
 8000e36:	d902      	bls.n	8000e3e <__udivmoddi4+0x152>
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	f000 80d1 	beq.w	8000fe0 <__udivmoddi4+0x2f4>
 8000e3e:	4698      	mov	r8, r3
 8000e40:	1b12      	subs	r2, r2, r4
 8000e42:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e46:	e79d      	b.n	8000d84 <__udivmoddi4+0x98>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e52:	fa00 f901 	lsl.w	r9, r0, r1
 8000e56:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e5e:	408a      	lsls	r2, r1
 8000e60:	431f      	orrs	r7, r3
 8000e62:	fa20 f306 	lsr.w	r3, r0, r6
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fa1f fc87 	uxth.w	ip, r7
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fbb8 fef0 	udiv	lr, r8, r0
 8000e74:	fb00 881e 	mls	r8, r0, lr, r8
 8000e78:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000e7c:	fb0e f80c 	mul.w	r8, lr, ip
 8000e80:	45a0      	cmp	r8, r4
 8000e82:	d90e      	bls.n	8000ea2 <__udivmoddi4+0x1b6>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8a:	bf2c      	ite	cs
 8000e8c:	f04f 0b01 	movcs.w	fp, #1
 8000e90:	f04f 0b00 	movcc.w	fp, #0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d903      	bls.n	8000ea0 <__udivmoddi4+0x1b4>
 8000e98:	f1bb 0f00 	cmp.w	fp, #0
 8000e9c:	f000 80b8 	beq.w	8001010 <__udivmoddi4+0x324>
 8000ea0:	46d6      	mov	lr, sl
 8000ea2:	eba4 0408 	sub.w	r4, r4, r8
 8000ea6:	fa1f f883 	uxth.w	r8, r3
 8000eaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eae:	fb00 4413 	mls	r4, r0, r3, r4
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000eba:	45a4      	cmp	ip, r4
 8000ebc:	d90e      	bls.n	8000edc <__udivmoddi4+0x1f0>
 8000ebe:	193c      	adds	r4, r7, r4
 8000ec0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0801 	movcs.w	r8, #1
 8000eca:	f04f 0800 	movcc.w	r8, #0
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d903      	bls.n	8000eda <__udivmoddi4+0x1ee>
 8000ed2:	f1b8 0f00 	cmp.w	r8, #0
 8000ed6:	f000 809f 	beq.w	8001018 <__udivmoddi4+0x32c>
 8000eda:	4603      	mov	r3, r0
 8000edc:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ee0:	eba4 040c 	sub.w	r4, r4, ip
 8000ee4:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee8:	4564      	cmp	r4, ip
 8000eea:	4673      	mov	r3, lr
 8000eec:	46e0      	mov	r8, ip
 8000eee:	d302      	bcc.n	8000ef6 <__udivmoddi4+0x20a>
 8000ef0:	d107      	bne.n	8000f02 <__udivmoddi4+0x216>
 8000ef2:	45f1      	cmp	r9, lr
 8000ef4:	d205      	bcs.n	8000f02 <__udivmoddi4+0x216>
 8000ef6:	ebbe 0302 	subs.w	r3, lr, r2
 8000efa:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000efe:	3801      	subs	r0, #1
 8000f00:	46e0      	mov	r8, ip
 8000f02:	b15d      	cbz	r5, 8000f1c <__udivmoddi4+0x230>
 8000f04:	ebb9 0203 	subs.w	r2, r9, r3
 8000f08:	eb64 0408 	sbc.w	r4, r4, r8
 8000f0c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f10:	fa22 f301 	lsr.w	r3, r2, r1
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	431e      	orrs	r6, r3
 8000f18:	e9c5 6400 	strd	r6, r4, [r5]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	e736      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000f20:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f24:	0c01      	lsrs	r1, r0, #16
 8000f26:	4614      	mov	r4, r2
 8000f28:	b280      	uxth	r0, r0
 8000f2a:	4696      	mov	lr, r2
 8000f2c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f30:	2620      	movs	r6, #32
 8000f32:	4690      	mov	r8, r2
 8000f34:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f38:	4610      	mov	r0, r2
 8000f3a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f3e:	eba3 0308 	sub.w	r3, r3, r8
 8000f42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f46:	e74b      	b.n	8000de0 <__udivmoddi4+0xf4>
 8000f48:	40b7      	lsls	r7, r6
 8000f4a:	f1c6 0320 	rsb	r3, r6, #32
 8000f4e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f52:	fa21 f803 	lsr.w	r8, r1, r3
 8000f56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f5a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f5e:	b2bc      	uxth	r4, r7
 8000f60:	40b0      	lsls	r0, r6
 8000f62:	4313      	orrs	r3, r2
 8000f64:	0c02      	lsrs	r2, r0, #16
 8000f66:	0c19      	lsrs	r1, r3, #16
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	fbb8 f9fe 	udiv	r9, r8, lr
 8000f6e:	fb0e 8819 	mls	r8, lr, r9, r8
 8000f72:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	4588      	cmp	r8, r1
 8000f7c:	d951      	bls.n	8001022 <__udivmoddi4+0x336>
 8000f7e:	1879      	adds	r1, r7, r1
 8000f80:	f109 3cff 	add.w	ip, r9, #4294967295
 8000f84:	bf2c      	ite	cs
 8000f86:	f04f 0a01 	movcs.w	sl, #1
 8000f8a:	f04f 0a00 	movcc.w	sl, #0
 8000f8e:	4588      	cmp	r8, r1
 8000f90:	d902      	bls.n	8000f98 <__udivmoddi4+0x2ac>
 8000f92:	f1ba 0f00 	cmp.w	sl, #0
 8000f96:	d031      	beq.n	8000ffc <__udivmoddi4+0x310>
 8000f98:	eba1 0108 	sub.w	r1, r1, r8
 8000f9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa0:	fb09 f804 	mul.w	r8, r9, r4
 8000fa4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fae:	4543      	cmp	r3, r8
 8000fb0:	d235      	bcs.n	800101e <__udivmoddi4+0x332>
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fb8:	bf2c      	ite	cs
 8000fba:	f04f 0a01 	movcs.w	sl, #1
 8000fbe:	f04f 0a00 	movcc.w	sl, #0
 8000fc2:	4543      	cmp	r3, r8
 8000fc4:	d2bb      	bcs.n	8000f3e <__udivmoddi4+0x252>
 8000fc6:	f1ba 0f00 	cmp.w	sl, #0
 8000fca:	d1b8      	bne.n	8000f3e <__udivmoddi4+0x252>
 8000fcc:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd0:	443b      	add	r3, r7
 8000fd2:	e7b4      	b.n	8000f3e <__udivmoddi4+0x252>
 8000fd4:	1a84      	subs	r4, r0, r2
 8000fd6:	eb68 0203 	sbc.w	r2, r8, r3
 8000fda:	2001      	movs	r0, #1
 8000fdc:	4696      	mov	lr, r2
 8000fde:	e6eb      	b.n	8000db8 <__udivmoddi4+0xcc>
 8000fe0:	443a      	add	r2, r7
 8000fe2:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe6:	e72b      	b.n	8000e40 <__udivmoddi4+0x154>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	443b      	add	r3, r7
 8000fee:	e710      	b.n	8000e12 <__udivmoddi4+0x126>
 8000ff0:	3902      	subs	r1, #2
 8000ff2:	443b      	add	r3, r7
 8000ff4:	e6a9      	b.n	8000d4a <__udivmoddi4+0x5e>
 8000ff6:	443a      	add	r2, r7
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e6be      	b.n	8000d7a <__udivmoddi4+0x8e>
 8000ffc:	eba7 0808 	sub.w	r8, r7, r8
 8001000:	f1a9 0c02 	sub.w	ip, r9, #2
 8001004:	4441      	add	r1, r8
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fb09 f804 	mul.w	r8, r9, r4
 800100e:	e7c9      	b.n	8000fa4 <__udivmoddi4+0x2b8>
 8001010:	f1ae 0e02 	sub.w	lr, lr, #2
 8001014:	443c      	add	r4, r7
 8001016:	e744      	b.n	8000ea2 <__udivmoddi4+0x1b6>
 8001018:	3b02      	subs	r3, #2
 800101a:	443c      	add	r4, r7
 800101c:	e75e      	b.n	8000edc <__udivmoddi4+0x1f0>
 800101e:	4649      	mov	r1, r9
 8001020:	e78d      	b.n	8000f3e <__udivmoddi4+0x252>
 8001022:	eba1 0108 	sub.w	r1, r1, r8
 8001026:	46cc      	mov	ip, r9
 8001028:	fbb1 f9fe 	udiv	r9, r1, lr
 800102c:	fb09 f804 	mul.w	r8, r9, r4
 8001030:	e7b8      	b.n	8000fa4 <__udivmoddi4+0x2b8>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <read_voltage>:
/**
  * @brief Read voltage from ADC
  *
  */
static float read_voltage(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
    float voltage = 0.0f;
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]

    // Конфигурация канала ADC
    sConfig.Channel = ADC_CHANNEL_5;
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <read_voltage+0xa4>)
 800105a:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800105c:	2306      	movs	r3, #6
 800105e:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001064:	237f      	movs	r3, #127	@ 0x7f
 8001066:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001068:	2304      	movs	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	481a      	ldr	r0, [pc, #104]	@ (80010e0 <read_voltage+0xa8>)
 8001076:	f001 feb1 	bl	8002ddc <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <read_voltage+0x4e>
    {
        return 0.0f;
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e023      	b.n	80010ce <read_voltage+0x96>
    }

    // Запуск преобразования ADC
    if (HAL_ADC_Start(&hadc1) == HAL_OK)
 8001086:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <read_voltage+0xa8>)
 8001088:	f001 fcd4 	bl	8002a34 <HAL_ADC_Start>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d11c      	bne.n	80010cc <read_voltage+0x94>
    {
        // Ожидание завершения преобразования
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001092:	2164      	movs	r1, #100	@ 0x64
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <read_voltage+0xa8>)
 8001096:	f001 fdbb 	bl	8002c10 <HAL_ADC_PollForConversion>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d112      	bne.n	80010c6 <read_voltage+0x8e>
        {
            adcValue = HAL_ADC_GetValue(&hadc1);
 80010a0:	480f      	ldr	r0, [pc, #60]	@ (80010e0 <read_voltage+0xa8>)
 80010a2:	f001 fe8d 	bl	8002dc0 <HAL_ADC_GetValue>
 80010a6:	61b8      	str	r0, [r7, #24]
            voltage = (float)adcValue * 3.3f / 4095.0f;
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80010e4 <read_voltage+0xac>
 80010b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ba:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80010e8 <read_voltage+0xb0>
 80010be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        HAL_ADC_Stop(&hadc1);
 80010c6:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <read_voltage+0xa8>)
 80010c8:	f001 fd6e 	bl	8002ba8 <HAL_ADC_Stop>
    }

    return voltage;
 80010cc:	69fb      	ldr	r3, [r7, #28]
}
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	14f00020 	.word	0x14f00020
 80010e0:	200001f0 	.word	0x200001f0
 80010e4:	40533333 	.word	0x40533333
 80010e8:	457ff000 	.word	0x457ff000

080010ec <read_temperature>:

/**
  * @brief Read temperature from internal sensor
  */
static float read_temperature(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
    float temperature = 0.0f;
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    ADC_ChannelConfTypeDef sConfig = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]

    // Конфигурация канала температурного датчика
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800110c:	4b33      	ldr	r3, [pc, #204]	@ (80011dc <read_temperature+0xf0>)
 800110e:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001110:	2306      	movs	r3, #6
 8001112:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001114:	2307      	movs	r3, #7
 8001116:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001118:	237f      	movs	r3, #127	@ 0x7f
 800111a:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111c:	2304      	movs	r3, #4
 800111e:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	4619      	mov	r1, r3
 8001128:	482d      	ldr	r0, [pc, #180]	@ (80011e0 <read_temperature+0xf4>)
 800112a:	f001 fe57 	bl	8002ddc <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <read_temperature+0x4e>
    {
        return 0.0f;
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e048      	b.n	80011cc <read_temperature+0xe0>
    }

    // Калибровка ADC
    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800113a:	217f      	movs	r1, #127	@ 0x7f
 800113c:	4828      	ldr	r0, [pc, #160]	@ (80011e0 <read_temperature+0xf4>)
 800113e:	f002 fc2b 	bl	8003998 <HAL_ADCEx_Calibration_Start>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <read_temperature+0x62>
    {
        return 0.0f;
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	e03e      	b.n	80011cc <read_temperature+0xe0>
    }

    // Запуск преобразования ADC
    if (HAL_ADC_Start(&hadc1) == HAL_OK)
 800114e:	4824      	ldr	r0, [pc, #144]	@ (80011e0 <read_temperature+0xf4>)
 8001150:	f001 fc70 	bl	8002a34 <HAL_ADC_Start>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d137      	bne.n	80011ca <read_temperature+0xde>
    {
        // Ожидание завершения преобразования
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800115a:	2164      	movs	r1, #100	@ 0x64
 800115c:	4820      	ldr	r0, [pc, #128]	@ (80011e0 <read_temperature+0xf4>)
 800115e:	f001 fd57 	bl	8002c10 <HAL_ADC_PollForConversion>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d12d      	bne.n	80011c4 <read_temperature+0xd8>
        {
            adcValue = HAL_ADC_GetValue(&hadc1);
 8001168:	481d      	ldr	r0, [pc, #116]	@ (80011e0 <read_temperature+0xf4>)
 800116a:	f001 fe29 	bl	8002dc0 <HAL_ADC_GetValue>
 800116e:	6238      	str	r0, [r7, #32]

            // Калибровочные значения для STM32L5
            uint32_t raw_ts_cal1 = *((uint16_t*)0x0BFA05A8); // Калибровка при 30°C
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <read_temperature+0xf8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	61fb      	str	r3, [r7, #28]
            uint32_t raw_ts_cal2 = *((uint16_t*)0x0BFA05CA); // Калибровка при 130°C
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <read_temperature+0xfc>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	61bb      	str	r3, [r7, #24]

            // Расчет температуры по калибровочным значениям
            temperature = 30.0f + ((float)adcValue - (float)raw_ts_cal1) *
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001190:	ee37 7a67 	vsub.f32	s14, s14, s15
                         (100.0f / ((float)raw_ts_cal2 - (float)raw_ts_cal1));
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011ac:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 80011ec <read_temperature+0x100>
 80011b0:	eec6 7a26 	vdiv.f32	s15, s12, s13
            temperature = 30.0f + ((float)adcValue - (float)raw_ts_cal1) *
 80011b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80011bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        }
        HAL_ADC_Stop(&hadc1);
 80011c4:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <read_temperature+0xf4>)
 80011c6:	f001 fcef 	bl	8002ba8 <HAL_ADC_Stop>
    }

    return temperature;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	3728      	adds	r7, #40	@ 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	c7520000 	.word	0xc7520000
 80011e0:	200001f0 	.word	0x200001f0
 80011e4:	0bfa05a8 	.word	0x0bfa05a8
 80011e8:	0bfa05ca 	.word	0x0bfa05ca
 80011ec:	42c80000 	.word	0x42c80000

080011f0 <HAL_UART_RxCpltCallback>:

/**
  * @brief UART receive complete callback
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == LPUART1) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a2c      	ldr	r2, [pc, #176]	@ (80012b0 <HAL_UART_RxCpltCallback+0xc0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d153      	bne.n	80012aa <HAL_UART_RxCpltCallback+0xba>
        uart_last_rx_time = HAL_GetTick();
 8001202:	f001 f857 	bl	80022b4 <HAL_GetTick>
 8001206:	4603      	mov	r3, r0
 8001208:	4a2a      	ldr	r2, [pc, #168]	@ (80012b4 <HAL_UART_RxCpltCallback+0xc4>)
 800120a:	6013      	str	r3, [r2, #0]

        // Проверяем, не получено ли сообщение COMPLETE
        if (uart_rx_pos >= 8 && strncmp((char*)&uart_rx_buf[uart_rx_pos - 8], "COMPLETE", 8) == 0) {
 800120c:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <HAL_UART_RxCpltCallback+0xc8>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b07      	cmp	r3, #7
 8001212:	d922      	bls.n	800125a <HAL_UART_RxCpltCallback+0x6a>
 8001214:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <HAL_UART_RxCpltCallback+0xc8>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3b08      	subs	r3, #8
 800121a:	4a28      	ldr	r2, [pc, #160]	@ (80012bc <HAL_UART_RxCpltCallback+0xcc>)
 800121c:	4413      	add	r3, r2
 800121e:	2208      	movs	r2, #8
 8001220:	4927      	ldr	r1, [pc, #156]	@ (80012c0 <HAL_UART_RxCpltCallback+0xd0>)
 8001222:	4618      	mov	r0, r3
 8001224:	f008 fa5d 	bl	80096e2 <strncmp>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d115      	bne.n	800125a <HAL_UART_RxCpltCallback+0x6a>
            complete_received = 1;
 800122e:	4b25      	ldr	r3, [pc, #148]	@ (80012c4 <HAL_UART_RxCpltCallback+0xd4>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
            uart_rx_pos = 0;
 8001234:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <HAL_UART_RxCpltCallback+0xc8>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	2100      	movs	r1, #0
 800123e:	481f      	ldr	r0, [pc, #124]	@ (80012bc <HAL_UART_RxCpltCallback+0xcc>)
 8001240:	f008 fa47 	bl	80096d2 <memset>
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001244:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <HAL_UART_RxCpltCallback+0xc8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <HAL_UART_RxCpltCallback+0xcc>)
 800124c:	4413      	add	r3, r2
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	481d      	ldr	r0, [pc, #116]	@ (80012c8 <HAL_UART_RxCpltCallback+0xd8>)
 8001254:	f005 f8fe 	bl	8006454 <HAL_UART_Receive_IT>
            return;
 8001258:	e027      	b.n	80012aa <HAL_UART_RxCpltCallback+0xba>
        }

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= sizeof(uart_rx_buf)-1) {
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_UART_RxCpltCallback+0xc8>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_UART_RxCpltCallback+0xcc>)
 8001262:	5c9b      	ldrb	r3, [r3, r2]
 8001264:	2b0a      	cmp	r3, #10
 8001266:	d003      	beq.n	8001270 <HAL_UART_RxCpltCallback+0x80>
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <HAL_UART_RxCpltCallback+0xc8>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b7e      	cmp	r3, #126	@ 0x7e
 800126e:	d90c      	bls.n	800128a <HAL_UART_RxCpltCallback+0x9a>
            uart_cmd_ready = 1;
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <HAL_UART_RxCpltCallback+0xdc>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
            uart_rx_buf[uart_rx_pos] = '\0';
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_UART_RxCpltCallback+0xc8>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_UART_RxCpltCallback+0xcc>)
 800127e:	2100      	movs	r1, #0
 8001280:	5499      	strb	r1, [r3, r2]
            HAL_UART_AbortReceive_IT(&hlpuart1);
 8001282:	4811      	ldr	r0, [pc, #68]	@ (80012c8 <HAL_UART_RxCpltCallback+0xd8>)
 8001284:	f005 f932 	bl	80064ec <HAL_UART_AbortReceive_IT>
 8001288:	e00f      	b.n	80012aa <HAL_UART_RxCpltCallback+0xba>
        } else {
            uart_rx_pos++;
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_UART_RxCpltCallback+0xc8>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_UART_RxCpltCallback+0xc8>)
 8001294:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <HAL_UART_RxCpltCallback+0xc8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <HAL_UART_RxCpltCallback+0xcc>)
 800129e:	4413      	add	r3, r2
 80012a0:	2201      	movs	r2, #1
 80012a2:	4619      	mov	r1, r3
 80012a4:	4808      	ldr	r0, [pc, #32]	@ (80012c8 <HAL_UART_RxCpltCallback+0xd8>)
 80012a6:	f005 f8d5 	bl	8006454 <HAL_UART_Receive_IT>
        }
    }
}
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40008000 	.word	0x40008000
 80012b4:	20000398 	.word	0x20000398
 80012b8:	20000394 	.word	0x20000394
 80012bc:	20000314 	.word	0x20000314
 80012c0:	0800d730 	.word	0x0800d730
 80012c4:	200003a1 	.word	0x200003a1
 80012c8:	20000258 	.word	0x20000258
 80012cc:	20000395 	.word	0x20000395

080012d0 <enter_sleep_mode>:

/**
  * @brief Переход в режим сна с настройкой RTC
  */
static void enter_sleep_mode(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
    // Выключаем пины PB0 и PC13
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	4812      	ldr	r0, [pc, #72]	@ (8001324 <enter_sleep_mode+0x54>)
 80012dc:	f002 ffac 	bl	8004238 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e6:	4810      	ldr	r0, [pc, #64]	@ (8001328 <enter_sleep_mode+0x58>)
 80012e8:	f002 ffa6 	bl	8004238 <HAL_GPIO_WritePin>

    // Настраиваем RTC WakeUp для периода сна
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80012ec:	480f      	ldr	r0, [pc, #60]	@ (800132c <enter_sleep_mode+0x5c>)
 80012ee:	f004 ff3d 	bl	800616c <HAL_RTCEx_DeactivateWakeUpTimer>

    // Расчет для периода сна: LSI = ~32.768 kHz, делитель 16 -> 2048 Гц
    // 2048 Гц * период_сек = количество тиков
    uint32_t wakeup_ticks = (period_sec * 2048) - 1;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <enter_sleep_mode+0x60>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	02db      	lsls	r3, r3, #11
 80012f8:	3b01      	subs	r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 80012fc:	2300      	movs	r3, #0
 80012fe:	2200      	movs	r2, #0
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	480a      	ldr	r0, [pc, #40]	@ (800132c <enter_sleep_mode+0x5c>)
 8001304:	f004 feac 	bl	8006060 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <enter_sleep_mode+0x42>
    {
        Error_Handler();
 800130e:	f000 fc35 	bl	8001b7c <Error_Handler>
    }

    // Переходим в режим сна
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001312:	2101      	movs	r1, #1
 8001314:	2000      	movs	r0, #0
 8001316:	f002 ffa7 	bl	8004268 <HAL_PWR_EnterSLEEPMode>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	42020400 	.word	0x42020400
 8001328:	42020800 	.word	0x42020800
 800132c:	200002ec 	.word	0x200002ec
 8001330:	2000039c 	.word	0x2000039c

08001334 <process_uart_command>:

/**
  * @brief Process UART command from main MCU
  */
static void process_uart_command(uint8_t* data, uint8_t len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	@ 0x38
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
    char* date_ptr = strstr((char*)data, "DATE:");
 8001340:	4954      	ldr	r1, [pc, #336]	@ (8001494 <process_uart_command+0x160>)
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f008 f9f2 	bl	800972c <strstr>
 8001348:	6378      	str	r0, [r7, #52]	@ 0x34
    char* time_ptr = strstr((char*)data, ";TIME:");
 800134a:	4953      	ldr	r1, [pc, #332]	@ (8001498 <process_uart_command+0x164>)
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f008 f9ed 	bl	800972c <strstr>
 8001352:	6338      	str	r0, [r7, #48]	@ 0x30
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 8001354:	4951      	ldr	r1, [pc, #324]	@ (800149c <process_uart_command+0x168>)
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f008 f9e8 	bl	800972c <strstr>
 800135c:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if(date_ptr && time_ptr && period_ptr) {
 800135e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8081 	beq.w	8001468 <process_uart_command+0x134>
 8001366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001368:	2b00      	cmp	r3, #0
 800136a:	d07d      	beq.n	8001468 <process_uart_command+0x134>
 800136c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136e:	2b00      	cmp	r3, #0
 8001370:	d07a      	beq.n	8001468 <process_uart_command+0x134>
        char date_str[16] = {0};
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
        char time_str[16] = {0};
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]

        // Извлекаем дату и время из команды
        sscanf(date_ptr, "DATE:%15[^;]", date_ptr);
 800138e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001390:	4943      	ldr	r1, [pc, #268]	@ (80014a0 <process_uart_command+0x16c>)
 8001392:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001394:	f008 f92c 	bl	80095f0 <siscanf>
        sscanf(time_ptr, ";TIME:%15[^;]", time_ptr);
 8001398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800139a:	4942      	ldr	r1, [pc, #264]	@ (80014a4 <process_uart_command+0x170>)
 800139c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800139e:	f008 f927 	bl	80095f0 <siscanf>
        sscanf(period_ptr, ";PERIOD:%lu", &period_sec);
 80013a2:	4a41      	ldr	r2, [pc, #260]	@ (80014a8 <process_uart_command+0x174>)
 80013a4:	4941      	ldr	r1, [pc, #260]	@ (80014ac <process_uart_command+0x178>)
 80013a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013a8:	f008 f922 	bl	80095f0 <siscanf>

        // Копируем только нужные части
        strncpy(date_str, date_ptr + 5, 10); // "DATE:YYYY-MM-DD"
 80013ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013ae:	1d59      	adds	r1, r3, #5
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	220a      	movs	r2, #10
 80013b6:	4618      	mov	r0, r3
 80013b8:	f008 f9a5 	bl	8009706 <strncpy>
        strncpy(time_str, time_ptr + 6, 8);  // "TIME:HH:MM:SS"
 80013bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013be:	1d99      	adds	r1, r3, #6
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	2208      	movs	r2, #8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f008 f99d 	bl	8009706 <strncpy>

        // Отправляем ответ с напряжением и температурой
        send_datetime_with_voltage_and_temp(date_str, time_str);
 80013cc:	f107 0208 	add.w	r2, r7, #8
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f876 	bl	80014c8 <send_datetime_with_voltage_and_temp>

        // Ждем COMPLETE сообщение или таймаут 10 секунд
        uint32_t start_time = HAL_GetTick();
 80013dc:	f000 ff6a 	bl	80022b4 <HAL_GetTick>
 80013e0:	62b8      	str	r0, [r7, #40]	@ 0x28
        complete_received = 0;
 80013e2:	4b33      	ldr	r3, [pc, #204]	@ (80014b0 <process_uart_command+0x17c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]

        while ((HAL_GetTick() - start_time) < COMPLETE_TIMEOUT_MS && !complete_received) {
 80013e8:	e02e      	b.n	8001448 <process_uart_command+0x114>
            // Обрабатываем входящие UART данные
            if(uart_cmd_ready) {
 80013ea:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <process_uart_command+0x180>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <process_uart_command+0xd2>
                uart_cmd_ready = 0;
 80013f4:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <process_uart_command+0x180>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
                // Если пришла новая команда, обрабатываем ее
                process_uart_command(uart_rx_buf, uart_rx_pos);
 80013fa:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <process_uart_command+0x184>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	482e      	ldr	r0, [pc, #184]	@ (80014bc <process_uart_command+0x188>)
 8001402:	f7ff ff97 	bl	8001334 <process_uart_command>
            }

            // Таймаут UART приема
            if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_TIMEOUT_MS) {
 8001406:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <process_uart_command+0x184>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d019      	beq.n	8001442 <process_uart_command+0x10e>
 800140e:	f000 ff51 	bl	80022b4 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	4b2a      	ldr	r3, [pc, #168]	@ (80014c0 <process_uart_command+0x18c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	@ 0x64
 800141c:	d911      	bls.n	8001442 <process_uart_command+0x10e>
                uart_rx_pos = 0;
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <process_uart_command+0x184>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
                memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001424:	2280      	movs	r2, #128	@ 0x80
 8001426:	2100      	movs	r1, #0
 8001428:	4824      	ldr	r0, [pc, #144]	@ (80014bc <process_uart_command+0x188>)
 800142a:	f008 f952 	bl	80096d2 <memset>
                HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 800142e:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <process_uart_command+0x184>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <process_uart_command+0x188>)
 8001436:	4413      	add	r3, r2
 8001438:	2201      	movs	r2, #1
 800143a:	4619      	mov	r1, r3
 800143c:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <process_uart_command+0x190>)
 800143e:	f005 f809 	bl	8006454 <HAL_UART_Receive_IT>
            }

            HAL_Delay(10);
 8001442:	200a      	movs	r0, #10
 8001444:	f000 ff42 	bl	80022cc <HAL_Delay>
        while ((HAL_GetTick() - start_time) < COMPLETE_TIMEOUT_MS && !complete_received) {
 8001448:	f000 ff34 	bl	80022b4 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001456:	4293      	cmp	r3, r2
 8001458:	d804      	bhi.n	8001464 <process_uart_command+0x130>
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <process_uart_command+0x17c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0c2      	beq.n	80013ea <process_uart_command+0xb6>
        }

        // Переходим в сон независимо от того, получен COMPLETE или нет
        enter_sleep_mode();
 8001464:	f7ff ff34 	bl	80012d0 <enter_sleep_mode>
    }

    uart_rx_pos = 0;
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <process_uart_command+0x184>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
    memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 800146e:	2280      	movs	r2, #128	@ 0x80
 8001470:	2100      	movs	r1, #0
 8001472:	4812      	ldr	r0, [pc, #72]	@ (80014bc <process_uart_command+0x188>)
 8001474:	f008 f92d 	bl	80096d2 <memset>
    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <process_uart_command+0x184>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <process_uart_command+0x188>)
 8001480:	4413      	add	r3, r2
 8001482:	2201      	movs	r2, #1
 8001484:	4619      	mov	r1, r3
 8001486:	480f      	ldr	r0, [pc, #60]	@ (80014c4 <process_uart_command+0x190>)
 8001488:	f004 ffe4 	bl	8006454 <HAL_UART_Receive_IT>
}
 800148c:	bf00      	nop
 800148e:	3738      	adds	r7, #56	@ 0x38
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	0800d73c 	.word	0x0800d73c
 8001498:	0800d744 	.word	0x0800d744
 800149c:	0800d74c 	.word	0x0800d74c
 80014a0:	0800d758 	.word	0x0800d758
 80014a4:	0800d768 	.word	0x0800d768
 80014a8:	2000039c 	.word	0x2000039c
 80014ac:	0800d778 	.word	0x0800d778
 80014b0:	200003a1 	.word	0x200003a1
 80014b4:	20000395 	.word	0x20000395
 80014b8:	20000394 	.word	0x20000394
 80014bc:	20000314 	.word	0x20000314
 80014c0:	20000398 	.word	0x20000398
 80014c4:	20000258 	.word	0x20000258

080014c8 <send_datetime_with_voltage_and_temp>:

/**
  * @brief Send datetime with voltage and temperature to main MCU
  */
static void send_datetime_with_voltage_and_temp(char* date_str, char* time_str)
{
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	b0ab      	sub	sp, #172	@ 0xac
 80014cc:	af06      	add	r7, sp, #24
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    float voltage = read_voltage();
 80014d2:	f7ff fdb1 	bl	8001038 <read_voltage>
 80014d6:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
    float temperature = read_temperature();
 80014da:	f7ff fe07 	bl	80010ec <read_temperature>
 80014de:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88
    char uart_msg[128];

    // Форматируем сообщение в том же формате, что и во втором коде
    snprintf(uart_msg, sizeof(uart_msg),
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <send_datetime_with_voltage_and_temp+0x74>)
 80014e4:	681e      	ldr	r6, [r3, #0]
 80014e6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80014ea:	f7ff f811 	bl	8000510 <__aeabi_f2d>
 80014ee:	4604      	mov	r4, r0
 80014f0:	460d      	mov	r5, r1
 80014f2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80014f6:	f7ff f80b 	bl	8000510 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	f107 0008 	add.w	r0, r7, #8
 8001502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001506:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800150a:	9601      	str	r6, [sp, #4]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a0b      	ldr	r2, [pc, #44]	@ (8001540 <send_datetime_with_voltage_and_temp+0x78>)
 8001514:	2180      	movs	r1, #128	@ 0x80
 8001516:	f008 f813 	bl	8009540 <sniprintf>
           "DATE:%s;TIME:%s;PERIOD:%lu;VOLTAGE:%.4f;TEMP:%.2f\r\n",
           date_str, time_str, period_sec, voltage, temperature);

    HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe fe8a 	bl	8000238 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	f107 0108 	add.w	r1, r7, #8
 800152c:	2364      	movs	r3, #100	@ 0x64
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <send_datetime_with_voltage_and_temp+0x7c>)
 8001530:	f004 ff02 	bl	8006338 <HAL_UART_Transmit>
}
 8001534:	bf00      	nop
 8001536:	3794      	adds	r7, #148	@ 0x94
 8001538:	46bd      	mov	sp, r7
 800153a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153c:	2000039c 	.word	0x2000039c
 8001540:	0800d784 	.word	0x0800d784
 8001544:	20000258 	.word	0x20000258

08001548 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
  * @brief  Обработчик прерывания WakeUp Timer.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  // Устанавливаем флаг пробуждения
  wakeup_flag = 1;
 8001550:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200003a0 	.word	0x200003a0

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b0a9      	sub	sp, #164	@ 0xa4
 800156c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156e:	f000 fe36 	bl	80021de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001572:	f000 f8fb 	bl	800176c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001576:	f000 fa73 	bl	8001a60 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800157a:	f000 f9db 	bl	8001934 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f93f 	bl	8001800 <MX_ADC1_Init>
  MX_RTC_Init();
 8001582:	f000 fa23 	bl	80019cc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Включаем обработчик прерывания RTC WakeUp
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2002      	movs	r0, #2
 800158c:	f002 fbe5 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001590:	2002      	movs	r0, #2
 8001592:	f002 fbfc 	bl	8003d8e <HAL_NVIC_EnableIRQ>

  // Включаем пины PC13 и PB0 по умолчанию
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800159c:	4868      	ldr	r0, [pc, #416]	@ (8001740 <main+0x1d8>)
 800159e:	f002 fe4b 	bl	8004238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2101      	movs	r1, #1
 80015a6:	4867      	ldr	r0, [pc, #412]	@ (8001744 <main+0x1dc>)
 80015a8:	f002 fe46 	bl	8004238 <HAL_GPIO_WritePin>

  // Инициализируем UART прием
  uart_last_rx_time = HAL_GetTick();
 80015ac:	f000 fe82 	bl	80022b4 <HAL_GetTick>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a65      	ldr	r2, [pc, #404]	@ (8001748 <main+0x1e0>)
 80015b4:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 80015b6:	4b65      	ldr	r3, [pc, #404]	@ (800174c <main+0x1e4>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b64      	ldr	r3, [pc, #400]	@ (8001750 <main+0x1e8>)
 80015be:	4413      	add	r3, r2
 80015c0:	2201      	movs	r2, #1
 80015c2:	4619      	mov	r1, r3
 80015c4:	4863      	ldr	r0, [pc, #396]	@ (8001754 <main+0x1ec>)
 80015c6:	f004 ff45 	bl	8006454 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Проверяем флаг пробуждения от RTC
    if(wakeup_flag)
 80015ca:	4b63      	ldr	r3, [pc, #396]	@ (8001758 <main+0x1f0>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 8085 	beq.w	80016e0 <main+0x178>
    {
      // Сбрасываем флаг
      wakeup_flag = 0;
 80015d6:	4b60      	ldr	r3, [pc, #384]	@ (8001758 <main+0x1f0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]

      // Включаем пины PC13 и PB0
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e2:	4857      	ldr	r0, [pc, #348]	@ (8001740 <main+0x1d8>)
 80015e4:	f002 fe28 	bl	8004238 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2101      	movs	r1, #1
 80015ec:	4855      	ldr	r0, [pc, #340]	@ (8001744 <main+0x1dc>)
 80015ee:	f002 fe23 	bl	8004238 <HAL_GPIO_WritePin>

      // Ждем 3 секунды после включения
      HAL_Delay(3000);
 80015f2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015f6:	f000 fe69 	bl	80022cc <HAL_Delay>

      // Измеряем напряжение и температуру
      float voltage = read_voltage();
 80015fa:	f7ff fd1d 	bl	8001038 <read_voltage>
 80015fe:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
      float temperature = read_temperature();
 8001602:	f7ff fd73 	bl	80010ec <read_temperature>
 8001606:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88

      // Формируем и отправляем сообщение основному МК
      char uart_msg[128];
      snprintf(uart_msg, sizeof(uart_msg),
 800160a:	4b54      	ldr	r3, [pc, #336]	@ (800175c <main+0x1f4>)
 800160c:	681e      	ldr	r6, [r3, #0]
 800160e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001612:	f7fe ff7d 	bl	8000510 <__aeabi_f2d>
 8001616:	4604      	mov	r4, r0
 8001618:	460d      	mov	r5, r1
 800161a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800161e:	f7fe ff77 	bl	8000510 <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	1d38      	adds	r0, r7, #4
 8001628:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800162c:	e9cd 4500 	strd	r4, r5, [sp]
 8001630:	4633      	mov	r3, r6
 8001632:	4a4b      	ldr	r2, [pc, #300]	@ (8001760 <main+0x1f8>)
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	f007 ff83 	bl	8009540 <sniprintf>
             "DATE:2000-01-01;TIME:00:00:00;PERIOD:%lu;VOLTAGE:%.4f;TEMP:%.2f\r\n",
             period_sec, voltage, temperature);

      HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe fdfb 	bl	8000238 <strlen>
 8001642:	4603      	mov	r3, r0
 8001644:	b29a      	uxth	r2, r3
 8001646:	1d39      	adds	r1, r7, #4
 8001648:	2364      	movs	r3, #100	@ 0x64
 800164a:	4842      	ldr	r0, [pc, #264]	@ (8001754 <main+0x1ec>)
 800164c:	f004 fe74 	bl	8006338 <HAL_UART_Transmit>

      // Ждем COMPLETE сообщение или таймаут 10 секунд
      uint32_t start_time = HAL_GetTick();
 8001650:	f000 fe30 	bl	80022b4 <HAL_GetTick>
 8001654:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      complete_received = 0;
 8001658:	4b42      	ldr	r3, [pc, #264]	@ (8001764 <main+0x1fc>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]

      while ((HAL_GetTick() - start_time) < COMPLETE_TIMEOUT_MS && !complete_received) {
 800165e:	e02e      	b.n	80016be <main+0x156>
          // Обрабатываем входящие UART данные
          if(uart_cmd_ready) {
 8001660:	4b41      	ldr	r3, [pc, #260]	@ (8001768 <main+0x200>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <main+0x114>
              uart_cmd_ready = 0;
 800166a:	4b3f      	ldr	r3, [pc, #252]	@ (8001768 <main+0x200>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
              process_uart_command(uart_rx_buf, uart_rx_pos);
 8001670:	4b36      	ldr	r3, [pc, #216]	@ (800174c <main+0x1e4>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	4836      	ldr	r0, [pc, #216]	@ (8001750 <main+0x1e8>)
 8001678:	f7ff fe5c 	bl	8001334 <process_uart_command>
          }

          // Таймаут UART приема
          if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_TIMEOUT_MS) {
 800167c:	4b33      	ldr	r3, [pc, #204]	@ (800174c <main+0x1e4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d019      	beq.n	80016b8 <main+0x150>
 8001684:	f000 fe16 	bl	80022b4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <main+0x1e0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b64      	cmp	r3, #100	@ 0x64
 8001692:	d911      	bls.n	80016b8 <main+0x150>
              uart_rx_pos = 0;
 8001694:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <main+0x1e4>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
              memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 800169a:	2280      	movs	r2, #128	@ 0x80
 800169c:	2100      	movs	r1, #0
 800169e:	482c      	ldr	r0, [pc, #176]	@ (8001750 <main+0x1e8>)
 80016a0:	f008 f817 	bl	80096d2 <memset>
              HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 80016a4:	4b29      	ldr	r3, [pc, #164]	@ (800174c <main+0x1e4>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <main+0x1e8>)
 80016ac:	4413      	add	r3, r2
 80016ae:	2201      	movs	r2, #1
 80016b0:	4619      	mov	r1, r3
 80016b2:	4828      	ldr	r0, [pc, #160]	@ (8001754 <main+0x1ec>)
 80016b4:	f004 fece 	bl	8006454 <HAL_UART_Receive_IT>
          }

          HAL_Delay(10);
 80016b8:	200a      	movs	r0, #10
 80016ba:	f000 fe07 	bl	80022cc <HAL_Delay>
      while ((HAL_GetTick() - start_time) < COMPLETE_TIMEOUT_MS && !complete_received) {
 80016be:	f000 fdf9 	bl	80022b4 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d804      	bhi.n	80016dc <main+0x174>
 80016d2:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <main+0x1fc>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0c1      	beq.n	8001660 <main+0xf8>
      }

      // Переходим в сон независимо от того, получен COMPLETE или нет
      enter_sleep_mode();
 80016dc:	f7ff fdf8 	bl	80012d0 <enter_sleep_mode>
    }

    // Обработка UART команд
    if(uart_cmd_ready) {
 80016e0:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <main+0x200>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <main+0x194>
        uart_cmd_ready = 0;
 80016ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <main+0x200>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
        process_uart_command(uart_rx_buf, uart_rx_pos);
 80016f0:	4b16      	ldr	r3, [pc, #88]	@ (800174c <main+0x1e4>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4816      	ldr	r0, [pc, #88]	@ (8001750 <main+0x1e8>)
 80016f8:	f7ff fe1c 	bl	8001334 <process_uart_command>
    }

    // Таймаут приема UART
    if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_TIMEOUT_MS) {
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <main+0x1e4>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f43f af62 	beq.w	80015ca <main+0x62>
 8001706:	f000 fdd5 	bl	80022b4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <main+0x1e0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	@ 0x64
 8001714:	f67f af59 	bls.w	80015ca <main+0x62>
        uart_rx_pos = 0;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <main+0x1e4>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
        memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	2100      	movs	r1, #0
 8001722:	480b      	ldr	r0, [pc, #44]	@ (8001750 <main+0x1e8>)
 8001724:	f007 ffd5 	bl	80096d2 <memset>
        HAL_UART_Receive_IT(&hlpuart1, &uart_rx_buf[uart_rx_pos], 1);
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <main+0x1e4>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <main+0x1e8>)
 8001730:	4413      	add	r3, r2
 8001732:	2201      	movs	r2, #1
 8001734:	4619      	mov	r1, r3
 8001736:	4807      	ldr	r0, [pc, #28]	@ (8001754 <main+0x1ec>)
 8001738:	f004 fe8c 	bl	8006454 <HAL_UART_Receive_IT>
    if(wakeup_flag)
 800173c:	e745      	b.n	80015ca <main+0x62>
 800173e:	bf00      	nop
 8001740:	42020800 	.word	0x42020800
 8001744:	42020400 	.word	0x42020400
 8001748:	20000398 	.word	0x20000398
 800174c:	20000394 	.word	0x20000394
 8001750:	20000314 	.word	0x20000314
 8001754:	20000258 	.word	0x20000258
 8001758:	200003a0 	.word	0x200003a0
 800175c:	2000039c 	.word	0x2000039c
 8001760:	0800d7b8 	.word	0x0800d7b8
 8001764:	200003a1 	.word	0x200003a1
 8001768:	20000395 	.word	0x20000395

0800176c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b098      	sub	sp, #96	@ 0x60
 8001770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001772:	f107 0318 	add.w	r3, r7, #24
 8001776:	2248      	movs	r2, #72	@ 0x48
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f007 ffa9 	bl	80096d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 800178e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001792:	f002 fdab 	bl	80042ec <HAL_PWREx_ControlVoltageScaling>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800179c:	f000 f9ee 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80017a0:	2318      	movs	r3, #24
 80017a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017a8:	2301      	movs	r3, #1
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017ac:	2301      	movs	r3, #1
 80017ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017b4:	2360      	movs	r3, #96	@ 0x60
 80017b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0318 	add.w	r3, r7, #24
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fe73 	bl	80044ac <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80017cc:	f000 f9d6 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fb35 	bl	8004e58 <HAL_RCC_ClockConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017f4:	f000 f9c2 	bl	8001b7c <Error_Handler>
  }
}
 80017f8:	bf00      	nop
 80017fa:	3760      	adds	r7, #96	@ 0x60
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001822:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001824:	4a41      	ldr	r2, [pc, #260]	@ (800192c <MX_ADC1_Init+0x12c>)
 8001826:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001828:	4b3f      	ldr	r3, [pc, #252]	@ (8001928 <MX_ADC1_Init+0x128>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800182e:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001834:	4b3c      	ldr	r3, [pc, #240]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800183a:	4b3b      	ldr	r3, [pc, #236]	@ (8001928 <MX_ADC1_Init+0x128>)
 800183c:	2201      	movs	r2, #1
 800183e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001840:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001842:	2204      	movs	r2, #4
 8001844:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001846:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001848:	2200      	movs	r2, #0
 800184a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800184c:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <MX_ADC1_Init+0x128>)
 800184e:	2200      	movs	r2, #0
 8001850:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001852:	4b35      	ldr	r3, [pc, #212]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001854:	2204      	movs	r2, #4
 8001856:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001858:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <MX_ADC1_Init+0x128>)
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001860:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001862:	2200      	movs	r2, #0
 8001864:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001866:	4b30      	ldr	r3, [pc, #192]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001868:	2200      	movs	r2, #0
 800186a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800186c:	4b2e      	ldr	r3, [pc, #184]	@ (8001928 <MX_ADC1_Init+0x128>)
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001874:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001876:	2200      	movs	r2, #0
 8001878:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800187a:	4b2b      	ldr	r3, [pc, #172]	@ (8001928 <MX_ADC1_Init+0x128>)
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001882:	4829      	ldr	r0, [pc, #164]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001884:	f000 ff8a 	bl	800279c <HAL_ADC_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800188e:	f000 f975 	bl	8001b7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4822      	ldr	r0, [pc, #136]	@ (8001928 <MX_ADC1_Init+0x128>)
 800189e:	f002 f8dd 	bl	8003a5c <HAL_ADCEx_MultiModeConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018a8:	f000 f968 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80018ac:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <MX_ADC1_Init+0x130>)
 80018ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b0:	2306      	movs	r3, #6
 80018b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018b8:	237f      	movs	r3, #127	@ 0x7f
 80018ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018bc:	2304      	movs	r3, #4
 80018be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4817      	ldr	r0, [pc, #92]	@ (8001928 <MX_ADC1_Init+0x128>)
 80018ca:	f001 fa87 	bl	8002ddc <HAL_ADC_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80018d4:	f000 f952 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018d8:	230c      	movs	r3, #12
 80018da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	4811      	ldr	r0, [pc, #68]	@ (8001928 <MX_ADC1_Init+0x128>)
 80018e2:	f001 fa7b 	bl	8002ddc <HAL_ADC_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80018ec:	f000 f946 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018f0:	2312      	movs	r3, #18
 80018f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	480b      	ldr	r0, [pc, #44]	@ (8001928 <MX_ADC1_Init+0x128>)
 80018fa:	f001 fa6f 	bl	8002ddc <HAL_ADC_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001904:	f000 f93a 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001908:	2318      	movs	r3, #24
 800190a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_ADC1_Init+0x128>)
 8001912:	f001 fa63 	bl	8002ddc <HAL_ADC_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800191c:	f000 f92e 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	@ 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200001f0 	.word	0x200001f0
 800192c:	42028000 	.word	0x42028000
 8001930:	14f00020 	.word	0x14f00020

08001934 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001938:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 800193a:	4a23      	ldr	r2, [pc, #140]	@ (80019c8 <MX_LPUART1_UART_Init+0x94>)
 800193c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 8001940:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001944:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001952:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001964:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001976:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800197c:	4811      	ldr	r0, [pc, #68]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 800197e:	f004 fc8b 	bl	8006298 <HAL_UART_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001988:	f000 f8f8 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800198c:	2100      	movs	r1, #0
 800198e:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 8001990:	f006 fde3 	bl	800855a <HAL_UARTEx_SetTxFifoThreshold>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800199a:	f000 f8ef 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800199e:	2100      	movs	r1, #0
 80019a0:	4808      	ldr	r0, [pc, #32]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 80019a2:	f006 fe18 	bl	80085d6 <HAL_UARTEx_SetRxFifoThreshold>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019ac:	f000 f8e6 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <MX_LPUART1_UART_Init+0x90>)
 80019b2:	f006 fd99 	bl	80084e8 <HAL_UARTEx_DisableFifoMode>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019bc:	f000 f8de 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000258 	.word	0x20000258
 80019c8:	40008000 	.word	0x40008000

080019cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <MX_RTC_Init+0x8c>)
 80019e4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a5c <MX_RTC_Init+0x90>)
 80019e6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <MX_RTC_Init+0x8c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <MX_RTC_Init+0x8c>)
 80019f0:	227f      	movs	r2, #127	@ 0x7f
 80019f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019f4:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <MX_RTC_Init+0x8c>)
 80019f6:	22ff      	movs	r2, #255	@ 0xff
 80019f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <MX_RTC_Init+0x8c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a00:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <MX_RTC_Init+0x8c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a06:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <MX_RTC_Init+0x8c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <MX_RTC_Init+0x8c>)
 8001a0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a12:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a14:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <MX_RTC_Init+0x8c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a1a:	480f      	ldr	r0, [pc, #60]	@ (8001a58 <MX_RTC_Init+0x8c>)
 8001a1c:	f004 fa12 	bl	8005e44 <HAL_RTC_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001a26:	f000 f8a9 	bl	8001b7c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	@ (8001a58 <MX_RTC_Init+0x8c>)
 8001a40:	f004 fbfe 	bl	8006240 <HAL_RTCEx_PrivilegeModeSet>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001a4a:	f000 f897 	bl	8001b7c <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200002ec 	.word	0x200002ec
 8001a5c:	40002800 	.word	0x40002800

08001a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a76:	4b3d      	ldr	r3, [pc, #244]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a82:	4b3a      	ldr	r3, [pc, #232]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8e:	4b37      	ldr	r3, [pc, #220]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	4a36      	ldr	r2, [pc, #216]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9a:	4b34      	ldr	r3, [pc, #208]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	4a30      	ldr	r2, [pc, #192]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aca:	4b28      	ldr	r3, [pc, #160]	@ (8001b6c <MX_GPIO_Init+0x10c>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001adc:	4824      	ldr	r0, [pc, #144]	@ (8001b70 <MX_GPIO_Init+0x110>)
 8001ade:	f002 fbab 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	4823      	ldr	r0, [pc, #140]	@ (8001b74 <MX_GPIO_Init+0x114>)
 8001ae8:	f002 fba6 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2101      	movs	r1, #1
 8001af0:	4821      	ldr	r0, [pc, #132]	@ (8001b78 <MX_GPIO_Init+0x118>)
 8001af2:	f002 fba1 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4818      	ldr	r0, [pc, #96]	@ (8001b70 <MX_GPIO_Init+0x110>)
 8001b10:	f002 fa12 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Bat23_Pin */
  GPIO_InitStruct.Pin = Bat23_Pin;
 8001b14:	2302      	movs	r3, #2
 8001b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bat23_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	4813      	ldr	r0, [pc, #76]	@ (8001b74 <MX_GPIO_Init+0x114>)
 8001b28:	f002 fa06 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b2c:	2310      	movs	r3, #16
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <MX_GPIO_Init+0x114>)
 8001b44:	f002 f9f8 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <MX_GPIO_Init+0x118>)
 8001b60:	f002 f9ea 	bl	8003f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	42020800 	.word	0x42020800
 8001b74:	42020000 	.word	0x42020000
 8001b78:	42020400 	.word	0x42020400

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <Error_Handler+0x8>

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <HAL_MspInit+0x44>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <HAL_MspInit+0x44>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <HAL_MspInit+0x44>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_MspInit+0x44>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <HAL_MspInit+0x44>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_MspInit+0x44>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bbe:	f002 fc41 	bl	8004444 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b0ae      	sub	sp, #184	@ 0xb8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	2294      	movs	r2, #148	@ 0x94
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f007 fd6e 	bl	80096d2 <memset>
  if(hadc->Instance==ADC1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a27      	ldr	r2, [pc, #156]	@ (8001c98 <HAL_ADC_MspInit+0xc8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d146      	bne.n	8001c8e <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c04:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001c16:	2310      	movs	r3, #16
 8001c18:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c22:	2302      	movs	r3, #2
 8001c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 fbf1 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001c3c:	f7ff ff9e 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c40:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <HAL_ADC_MspInit+0xcc>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c44:	4a15      	ldr	r2, [pc, #84]	@ (8001c9c <HAL_ADC_MspInit+0xcc>)
 8001c46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4c:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <HAL_ADC_MspInit+0xcc>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <HAL_ADC_MspInit+0xcc>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c9c <HAL_ADC_MspInit+0xcc>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c64:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <HAL_ADC_MspInit+0xcc>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c76:	2303      	movs	r3, #3
 8001c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <HAL_ADC_MspInit+0xd0>)
 8001c8a:	f002 f955 	bl	8003f38 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c8e:	bf00      	nop
 8001c90:	37b8      	adds	r7, #184	@ 0xb8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	42028000 	.word	0x42028000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	42020000 	.word	0x42020000

08001ca4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0ae      	sub	sp, #184	@ 0xb8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	2294      	movs	r2, #148	@ 0x94
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f007 fd04 	bl	80096d2 <memset>
  if(huart->Instance==LPUART1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a25      	ldr	r2, [pc, #148]	@ (8001d64 <HAL_UART_MspInit+0xc0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d143      	bne.n	8001d5c <HAL_UART_MspInit+0xb8>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fb99 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cec:	f7ff ff46 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <HAL_UART_MspInit+0xc4>)
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d68 <HAL_UART_MspInit+0xc4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <HAL_UART_MspInit+0xc4>)
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <HAL_UART_MspInit+0xc4>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0c:	4a16      	ldr	r2, [pc, #88]	@ (8001d68 <HAL_UART_MspInit+0xc4>)
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d14:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <HAL_UART_MspInit+0xc4>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d20:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4809      	ldr	r0, [pc, #36]	@ (8001d6c <HAL_UART_MspInit+0xc8>)
 8001d48:	f002 f8f6 	bl	8003f38 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2042      	movs	r0, #66	@ 0x42
 8001d52:	f002 f802 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001d56:	2042      	movs	r0, #66	@ 0x42
 8001d58:	f002 f819 	bl	8003d8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001d5c:	bf00      	nop
 8001d5e:	37b8      	adds	r7, #184	@ 0xb8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40008000 	.word	0x40008000
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	42020400 	.word	0x42020400

08001d70 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0a8      	sub	sp, #160	@ 0xa0
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	2294      	movs	r2, #148	@ 0x94
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f007 fca6 	bl	80096d2 <memset>
  if(hrtc->Instance==RTC)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001df4 <HAL_RTC_MspInit+0x84>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d12c      	bne.n	8001dea <HAL_RTC_MspInit+0x7a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d94:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fb38 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001dae:	f7ff fee5 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001db2:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <HAL_RTC_MspInit+0x88>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db8:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <HAL_RTC_MspInit+0x88>)
 8001dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <HAL_RTC_MspInit+0x88>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001df8 <HAL_RTC_MspInit+0x88>)
 8001dc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_RTC_MspInit+0x88>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2002      	movs	r0, #2
 8001de0:	f001 ffbb 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001de4:	2002      	movs	r0, #2
 8001de6:	f001 ffd2 	bl	8003d8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001dea:	bf00      	nop
 8001dec:	37a0      	adds	r7, #160	@ 0xa0
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40002800 	.word	0x40002800
 8001df8:	40021000 	.word	0x40021000

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <NMI_Handler+0x4>

08001e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <MemManage_Handler+0x4>

08001e14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e52:	f000 fa1b 	bl	800228c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupts through EXTI line 17.
  */
void RTC_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <RTC_IRQHandler+0x10>)
 8001e62:	f004 f9d3 	bl	800620c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200002ec 	.word	0x200002ec

08001e70 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <LPUART1_IRQHandler+0x10>)
 8001e76:	f004 fc07 	bl	8006688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000258 	.word	0x20000258

08001e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return 1;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_kill>:

int _kill(int pid, int sig)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e9e:	f007 fca5 	bl	80097ec <__errno>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2216      	movs	r2, #22
 8001ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_exit>:

void _exit (int status)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ffe7 	bl	8001e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec6:	bf00      	nop
 8001ec8:	e7fd      	b.n	8001ec6 <_exit+0x12>

08001eca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e00a      	b.n	8001ef2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001edc:	f3af 8000 	nop.w
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	60ba      	str	r2, [r7, #8]
 8001ee8:	b2ca      	uxtb	r2, r1
 8001eea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dbf0      	blt.n	8001edc <_read+0x12>
  }

  return len;
 8001efa:	687b      	ldr	r3, [r7, #4]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	e009      	b.n	8001f2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	60ba      	str	r2, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dbf1      	blt.n	8001f16 <_write+0x12>
  }
  return len;
 8001f32:	687b      	ldr	r3, [r7, #4]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_close>:

int _close(int file)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f64:	605a      	str	r2, [r3, #4]
  return 0;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_isatty>:

int _isatty(int file)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <_sbrk+0x5c>)
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <_sbrk+0x60>)
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb8:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <_sbrk+0x64>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	@ (800200c <_sbrk+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd4:	f007 fc0a 	bl	80097ec <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	220c      	movs	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e009      	b.n	8001ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fea:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <_sbrk+0x64>)
 8001ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20030000 	.word	0x20030000
 8002004:	00000400 	.word	0x00000400
 8002008:	200003a4 	.word	0x200003a4
 800200c:	200004f8 	.word	0x200004f8

08002010 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	@ (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800203a:	4b4f      	ldr	r3, [pc, #316]	@ (8002178 <SystemCoreClockUpdate+0x144>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d107      	bne.n	8002056 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8002046:	4b4c      	ldr	r3, [pc, #304]	@ (8002178 <SystemCoreClockUpdate+0x144>)
 8002048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e005      	b.n	8002062 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8002056:	4b48      	ldr	r3, [pc, #288]	@ (8002178 <SystemCoreClockUpdate+0x144>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8002062:	4a46      	ldr	r2, [pc, #280]	@ (800217c <SystemCoreClockUpdate+0x148>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800206c:	4b42      	ldr	r3, [pc, #264]	@ (8002178 <SystemCoreClockUpdate+0x144>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b0c      	cmp	r3, #12
 8002076:	d866      	bhi.n	8002146 <SystemCoreClockUpdate+0x112>
 8002078:	a201      	add	r2, pc, #4	@ (adr r2, 8002080 <SystemCoreClockUpdate+0x4c>)
 800207a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207e:	bf00      	nop
 8002080:	080020b5 	.word	0x080020b5
 8002084:	08002147 	.word	0x08002147
 8002088:	08002147 	.word	0x08002147
 800208c:	08002147 	.word	0x08002147
 8002090:	080020bd 	.word	0x080020bd
 8002094:	08002147 	.word	0x08002147
 8002098:	08002147 	.word	0x08002147
 800209c:	08002147 	.word	0x08002147
 80020a0:	080020c5 	.word	0x080020c5
 80020a4:	08002147 	.word	0x08002147
 80020a8:	08002147 	.word	0x08002147
 80020ac:	08002147 	.word	0x08002147
 80020b0:	080020cd 	.word	0x080020cd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80020b4:	4a32      	ldr	r2, [pc, #200]	@ (8002180 <SystemCoreClockUpdate+0x14c>)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6013      	str	r3, [r2, #0]
      break;
 80020ba:	e048      	b.n	800214e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80020bc:	4b30      	ldr	r3, [pc, #192]	@ (8002180 <SystemCoreClockUpdate+0x14c>)
 80020be:	4a31      	ldr	r2, [pc, #196]	@ (8002184 <SystemCoreClockUpdate+0x150>)
 80020c0:	601a      	str	r2, [r3, #0]
      break;
 80020c2:	e044      	b.n	800214e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80020c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002180 <SystemCoreClockUpdate+0x14c>)
 80020c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002184 <SystemCoreClockUpdate+0x150>)
 80020c8:	601a      	str	r2, [r3, #0]
      break;
 80020ca:	e040      	b.n	800214e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <SystemCoreClockUpdate+0x144>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80020d6:	4b28      	ldr	r3, [pc, #160]	@ (8002178 <SystemCoreClockUpdate+0x144>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	3301      	adds	r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d003      	beq.n	80020f2 <SystemCoreClockUpdate+0xbe>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d006      	beq.n	80020fe <SystemCoreClockUpdate+0xca>
 80020f0:	e00b      	b.n	800210a <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80020f2:	4a24      	ldr	r2, [pc, #144]	@ (8002184 <SystemCoreClockUpdate+0x150>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	613b      	str	r3, [r7, #16]
          break;
 80020fc:	e00b      	b.n	8002116 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80020fe:	4a21      	ldr	r2, [pc, #132]	@ (8002184 <SystemCoreClockUpdate+0x150>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	613b      	str	r3, [r7, #16]
          break;
 8002108:	e005      	b.n	8002116 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	613b      	str	r3, [r7, #16]
          break;
 8002114:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <SystemCoreClockUpdate+0x144>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002128:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <SystemCoreClockUpdate+0x144>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0e5b      	lsrs	r3, r3, #25
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	3301      	adds	r3, #1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	4a0f      	ldr	r2, [pc, #60]	@ (8002180 <SystemCoreClockUpdate+0x14c>)
 8002142:	6013      	str	r3, [r2, #0]
      break;
 8002144:	e003      	b.n	800214e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8002146:	4a0e      	ldr	r2, [pc, #56]	@ (8002180 <SystemCoreClockUpdate+0x14c>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	6013      	str	r3, [r2, #0]
      break;
 800214c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <SystemCoreClockUpdate+0x144>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	4a0b      	ldr	r2, [pc, #44]	@ (8002188 <SystemCoreClockUpdate+0x154>)
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800215e:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <SystemCoreClockUpdate+0x14c>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <SystemCoreClockUpdate+0x14c>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40021000 	.word	0x40021000
 800217c:	0800d820 	.word	0x0800d820
 8002180:	20000000 	.word	0x20000000
 8002184:	00f42400 	.word	0x00f42400
 8002188:	0800d808 	.word	0x0800d808

0800218c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002190:	f7ff ff3e 	bl	8002010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002194:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002196:	e003      	b.n	80021a0 <LoopCopyDataInit>

08002198 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800219a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800219c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800219e:	3104      	adds	r1, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80021a0:	480a      	ldr	r0, [pc, #40]	@ (80021cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80021a2:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80021a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021a8:	d3f6      	bcc.n	8002198 <CopyDataInit>
	ldr	r2, =_sbss
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80021ac:	e002      	b.n	80021b4 <LoopFillZerobss>

080021ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80021ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80021b0:	f842 3b04 	str.w	r3, [r2], #4

080021b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <LoopForever+0x16>)
	cmp	r2, r3
 80021b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80021b8:	d3f9      	bcc.n	80021ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021ba:	f007 fb1d 	bl	80097f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021be:	f7ff f9d3 	bl	8001568 <main>

080021c2 <LoopForever>:

LoopForever:
    b LoopForever
 80021c2:	e7fe      	b.n	80021c2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80021c4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80021c8:	0800dcdc 	.word	0x0800dcdc
	ldr	r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80021d0:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 80021d4:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 80021d8:	200004f8 	.word	0x200004f8

080021dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC1_2_IRQHandler>

080021de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80021e8:	2004      	movs	r0, #4
 80021ea:	f001 fdab 	bl	8003d44 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80021ee:	f7ff ff21 	bl	8002034 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021f2:	2007      	movs	r0, #7
 80021f4:	f000 f80e 	bl	8002214 <HAL_InitTick>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	71fb      	strb	r3, [r7, #7]
 8002202:	e001      	b.n	8002208 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002204:	f7ff fcc0 	bl	8001b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002208:	79fb      	ldrb	r3, [r7, #7]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002220:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <HAL_InitTick+0x6c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002228:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <HAL_InitTick+0x70>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <HAL_InitTick+0x6c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002236:	fbb3 f3f1 	udiv	r3, r3, r1
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f001 fdb3 	bl	8003daa <HAL_SYSTICK_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b07      	cmp	r3, #7
 800224e:	d809      	bhi.n	8002264 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002250:	2200      	movs	r2, #0
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f001 fd7f 	bl	8003d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800225c:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <HAL_InitTick+0x74>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e007      	b.n	8002274 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	e004      	b.n	8002274 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e001      	b.n	8002274 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000008 	.word	0x20000008
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_IncTick+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_IncTick+0x24>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <HAL_IncTick+0x24>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000008 	.word	0x20000008
 80022b0:	200003a8 	.word	0x200003a8

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b03      	ldr	r3, [pc, #12]	@ (80022c8 <HAL_GetTick+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	200003a8 	.word	0x200003a8

080022cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff ffee 	bl	80022b4 <HAL_GetTick>
 80022d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d005      	beq.n	80022f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <HAL_Delay+0x44>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022f2:	bf00      	nop
 80022f4:	f7ff ffde 	bl	80022b4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d8f7      	bhi.n	80022f4 <HAL_Delay+0x28>
  {
  }
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000008 	.word	0x20000008

08002314 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	609a      	str	r2, [r3, #8]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3360      	adds	r3, #96	@ 0x60
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <LL_ADC_SetOffset+0x44>)
 800239e:	4013      	ands	r3, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	03fff000 	.word	0x03fff000

080023c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3360      	adds	r3, #96	@ 0x60
 80023d2:	461a      	mov	r2, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3360      	adds	r3, #96	@ 0x60
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	431a      	orrs	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	615a      	str	r2, [r3, #20]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002472:	b480      	push	{r7}
 8002474:	b087      	sub	sp, #28
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3330      	adds	r3, #48	@ 0x30
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	4413      	add	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	211f      	movs	r1, #31
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	401a      	ands	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	f003 011f 	and.w	r1, r3, #31
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	431a      	orrs	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b087      	sub	sp, #28
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3314      	adds	r3, #20
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	0e5b      	lsrs	r3, r3, #25
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	4413      	add	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	0d1b      	lsrs	r3, r3, #20
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2107      	movs	r1, #7
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	401a      	ands	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	0d1b      	lsrs	r3, r3, #20
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	431a      	orrs	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	43db      	mvns	r3, r3
 800253a:	401a      	ands	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0318 	and.w	r3, r3, #24
 8002542:	4908      	ldr	r1, [pc, #32]	@ (8002564 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002544:	40d9      	lsrs	r1, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	400b      	ands	r3, r1
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	431a      	orrs	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	0007ffff 	.word	0x0007ffff

08002568 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 031f 	and.w	r3, r3, #31
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6093      	str	r3, [r2, #8]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025d8:	d101      	bne.n	80025de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80025fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002600:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002624:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002628:	d101      	bne.n	800262e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800264c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002678:	f043 0202 	orr.w	r2, r3, #2
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <LL_ADC_IsEnabled+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_ADC_IsEnabled+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d101      	bne.n	80026ca <LL_ADC_IsDisableOngoing+0x18>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <LL_ADC_IsDisableOngoing+0x1a>
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026ec:	f043 0204 	orr.w	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002710:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002714:	f043 0210 	orr.w	r2, r3, #16
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b04      	cmp	r3, #4
 800273a:	d101      	bne.n	8002740 <LL_ADC_REG_IsConversionOngoing+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800275e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d101      	bne.n	800278e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b089      	sub	sp, #36	@ 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e12e      	b.n	8002a14 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fa03 	bl	8001bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fef1 	bl	80025c4 <LL_ADC_IsDeepPowerDownEnabled>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d004      	beq.n	80027f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fed7 	bl	80025a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff0c 	bl	8002614 <LL_ADC_IsInternalRegulatorEnabled>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d115      	bne.n	800282e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fef0 	bl	80025ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800280c:	4b83      	ldr	r3, [pc, #524]	@ (8002a1c <HAL_ADC_Init+0x280>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	4a83      	ldr	r2, [pc, #524]	@ (8002a20 <HAL_ADC_Init+0x284>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	3301      	adds	r3, #1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002820:	e002      	b.n	8002828 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3b01      	subs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f9      	bne.n	8002822 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff feee 	bl	8002614 <LL_ADC_IsInternalRegulatorEnabled>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	f043 0210 	orr.w	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff62 	bl	8002728 <LL_ADC_REG_IsConversionOngoing>
 8002864:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 80c7 	bne.w	8002a02 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 80c3 	bne.w	8002a02 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002884:	f043 0202 	orr.w	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fefb 	bl	800268c <LL_ADC_IsEnabled>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d110      	bne.n	80028be <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800289c:	4861      	ldr	r0, [pc, #388]	@ (8002a24 <HAL_ADC_Init+0x288>)
 800289e:	f7ff fef5 	bl	800268c <LL_ADC_IsEnabled>
 80028a2:	4604      	mov	r4, r0
 80028a4:	4860      	ldr	r0, [pc, #384]	@ (8002a28 <HAL_ADC_Init+0x28c>)
 80028a6:	f7ff fef1 	bl	800268c <LL_ADC_IsEnabled>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4323      	orrs	r3, r4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4619      	mov	r1, r3
 80028b8:	485c      	ldr	r0, [pc, #368]	@ (8002a2c <HAL_ADC_Init+0x290>)
 80028ba:	f7ff fd2b 	bl	8002314 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7e5b      	ldrb	r3, [r3, #25]
 80028c2:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028c8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028ce:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028d4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028dc:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	3b01      	subs	r3, #1
 80028f2:	045b      	lsls	r3, r3, #17
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002906:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	4b44      	ldr	r3, [pc, #272]	@ (8002a30 <HAL_ADC_Init+0x294>)
 800291e:	4013      	ands	r3, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	69b9      	ldr	r1, [r7, #24]
 8002926:	430b      	orrs	r3, r1
 8002928:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff ff21 	bl	8002776 <LL_ADC_INJ_IsConversionOngoing>
 8002934:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d140      	bne.n	80029be <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d13d      	bne.n	80029be <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7e1b      	ldrb	r3, [r3, #24]
 800294a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800294c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002954:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002964:	f023 0306 	bic.w	r3, r3, #6
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	69b9      	ldr	r1, [r7, #24]
 800296e:	430b      	orrs	r3, r1
 8002970:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002978:	2b01      	cmp	r3, #1
 800297a:	d118      	bne.n	80029ae <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002986:	f023 0304 	bic.w	r3, r3, #4
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002998:	4311      	orrs	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800299e:	430a      	orrs	r2, r1
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	611a      	str	r2, [r3, #16]
 80029ac:	e007      	b.n	80029be <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0201 	bic.w	r2, r2, #1
 80029bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d10c      	bne.n	80029e0 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029cc:	f023 010f 	bic.w	r1, r3, #15
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80029de:	e007      	b.n	80029f0 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 020f 	bic.w	r2, r2, #15
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	f023 0303 	bic.w	r3, r3, #3
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a00:	e007      	b.n	8002a12 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a12:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3724      	adds	r7, #36	@ 0x24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd90      	pop	{r4, r7, pc}
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	053e2d63 	.word	0x053e2d63
 8002a24:	42028000 	.word	0x42028000
 8002a28:	42028100 	.word	0x42028100
 8002a2c:	42028300 	.word	0x42028300
 8002a30:	fff0c007 	.word	0xfff0c007

08002a34 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a3c:	4857      	ldr	r0, [pc, #348]	@ (8002b9c <HAL_ADC_Start+0x168>)
 8002a3e:	f7ff fd93 	bl	8002568 <LL_ADC_GetMultimode>
 8002a42:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fe6d 	bl	8002728 <LL_ADC_REG_IsConversionOngoing>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 809c 	bne.w	8002b8e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_Start+0x30>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e097      	b.n	8002b94 <HAL_ADC_Start+0x160>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fe5b 	bl	8003728 <ADC_Enable>
 8002a72:	4603      	mov	r3, r0
 8002a74:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 8083 	bne.w	8002b84 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a42      	ldr	r2, [pc, #264]	@ (8002ba0 <HAL_ADC_Start+0x16c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d002      	beq.n	8002aa2 <HAL_ADC_Start+0x6e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	e000      	b.n	8002aa4 <HAL_ADC_Start+0x70>
 8002aa2:	4b40      	ldr	r3, [pc, #256]	@ (8002ba4 <HAL_ADC_Start+0x170>)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d002      	beq.n	8002ab2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aca:	d106      	bne.n	8002ada <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad0:	f023 0206 	bic.w	r2, r3, #6
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ad8:	e002      	b.n	8002ae0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	221c      	movs	r2, #28
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba0 <HAL_ADC_Start+0x16c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d002      	beq.n	8002b00 <HAL_ADC_Start+0xcc>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	e000      	b.n	8002b02 <HAL_ADC_Start+0xce>
 8002b00:	4b28      	ldr	r3, [pc, #160]	@ (8002ba4 <HAL_ADC_Start+0x170>)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d008      	beq.n	8002b1c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d002      	beq.n	8002b1c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	d114      	bne.n	8002b46 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b32:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fdca 	bl	80026d8 <LL_ADC_REG_StartConversion>
 8002b44:	e025      	b.n	8002b92 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a12      	ldr	r2, [pc, #72]	@ (8002ba0 <HAL_ADC_Start+0x16c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d002      	beq.n	8002b62 <HAL_ADC_Start+0x12e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	e000      	b.n	8002b64 <HAL_ADC_Start+0x130>
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <HAL_ADC_Start+0x170>)
 8002b64:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00f      	beq.n	8002b92 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b82:	e006      	b.n	8002b92 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002b8c:	e001      	b.n	8002b92 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	42028300 	.word	0x42028300
 8002ba0:	42028100 	.word	0x42028100
 8002ba4:	42028000 	.word	0x42028000

08002ba8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_Stop+0x16>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e023      	b.n	8002c06 <HAL_ADC_Stop+0x5e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002bc6:	2103      	movs	r1, #3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fcf1 	bl	80035b0 <ADC_ConversionStop>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d111      	bne.n	8002bfc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fe2b 	bl	8003834 <ADC_Disable>
 8002bde:	4603      	mov	r3, r0
 8002be0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d109      	bne.n	8002bfc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c1a:	4866      	ldr	r0, [pc, #408]	@ (8002db4 <HAL_ADC_PollForConversion+0x1a4>)
 8002c1c:	f7ff fca4 	bl	8002568 <LL_ADC_GetMultimode>
 8002c20:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d102      	bne.n	8002c30 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e02a      	b.n	8002c86 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d002      	beq.n	8002c42 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b09      	cmp	r3, #9
 8002c40:	d111      	bne.n	8002c66 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0a4      	b.n	8002daa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c60:	2304      	movs	r3, #4
 8002c62:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c64:	e00f      	b.n	8002c86 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c66:	4853      	ldr	r0, [pc, #332]	@ (8002db4 <HAL_ADC_PollForConversion+0x1a4>)
 8002c68:	f7ff fc8c 	bl	8002584 <LL_ADC_GetMultiDMATransfer>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d007      	beq.n	8002c82 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e093      	b.n	8002daa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c82:	2304      	movs	r3, #4
 8002c84:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c86:	f7ff fb15 	bl	80022b4 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c8c:	e021      	b.n	8002cd2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d01d      	beq.n	8002cd2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c96:	f7ff fb0d 	bl	80022b4 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <HAL_ADC_PollForConversion+0x9c>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d112      	bne.n	8002cd2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10b      	bne.n	8002cd2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	f043 0204 	orr.w	r2, r3, #4
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e06b      	b.n	8002daa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0d6      	beq.n	8002c8e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fbab 	bl	800244c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01c      	beq.n	8002d36 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7e5b      	ldrb	r3, [r3, #25]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d118      	bne.n	8002d36 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d111      	bne.n	8002d36 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002db8 <HAL_ADC_PollForConversion+0x1a8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d002      	beq.n	8002d46 <HAL_ADC_PollForConversion+0x136>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	e000      	b.n	8002d48 <HAL_ADC_PollForConversion+0x138>
 8002d46:	4b1d      	ldr	r3, [pc, #116]	@ (8002dbc <HAL_ADC_PollForConversion+0x1ac>)
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d008      	beq.n	8002d62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d002      	beq.n	8002d62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b09      	cmp	r3, #9
 8002d60:	d104      	bne.n	8002d6c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	e00c      	b.n	8002d86 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a11      	ldr	r2, [pc, #68]	@ (8002db8 <HAL_ADC_PollForConversion+0x1a8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d002      	beq.n	8002d7c <HAL_ADC_PollForConversion+0x16c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	e000      	b.n	8002d7e <HAL_ADC_PollForConversion+0x16e>
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dbc <HAL_ADC_PollForConversion+0x1ac>)
 8002d7e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d104      	bne.n	8002d96 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2208      	movs	r2, #8
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e008      	b.n	8002da8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d103      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	220c      	movs	r2, #12
 8002da6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	42028300 	.word	0x42028300
 8002db8:	42028100 	.word	0x42028100
 8002dbc:	42028000 	.word	0x42028000

08002dc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b0b7      	sub	sp, #220	@ 0xdc
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x22>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e3c1      	b.n	8003582 <HAL_ADC_ConfigChannel+0x7a6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fc8c 	bl	8002728 <LL_ADC_REG_IsConversionOngoing>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 83a6 	bne.w	8003564 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f7ff fb24 	bl	8002472 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fc7a 	bl	8002728 <LL_ADC_REG_IsConversionOngoing>
 8002e34:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fc9a 	bl	8002776 <LL_ADC_INJ_IsConversionOngoing>
 8002e42:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f040 81c1 	bne.w	80031d2 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 81bc 	bne.w	80031d2 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e62:	d10f      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f7ff fb2b 	bl	80024ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fad2 	bl	8002426 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e82:	e00e      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	461a      	mov	r2, r3
 8002e92:	f7ff fb1a 	bl	80024ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fac2 	bl	8002426 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d00a      	beq.n	8002eda <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6919      	ldr	r1, [r3, #16]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ed4:	f7ff fa52 	bl	800237c <LL_ADC_SetOffset>
 8002ed8:	e17b      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fa6f 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x12a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fa64 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8002efc:	4603      	mov	r3, r0
 8002efe:	0e9b      	lsrs	r3, r3, #26
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	e01e      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x168>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fa59 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002f34:	2320      	movs	r3, #32
 8002f36:	e004      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002f38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x180>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	e018      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x1b2>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002f80:	2320      	movs	r3, #32
 8002f82:	e004      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d106      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fa28 	bl	80023f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fa0c 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x1f0>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fa01 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	0e9b      	lsrs	r3, r3, #26
 8002fc6:	f003 021f 	and.w	r2, r3, #31
 8002fca:	e01e      	b.n	800300a <HAL_ADC_ConfigChannel+0x22e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff f9f6 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	e004      	b.n	8003008 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8002ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d105      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x246>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0e9b      	lsrs	r3, r3, #26
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	e018      	b.n	8003054 <HAL_ADC_ConfigChannel+0x278>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003036:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800303a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800303e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8003046:	2320      	movs	r3, #32
 8003048:	e004      	b.n	8003054 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800304a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003054:	429a      	cmp	r2, r3
 8003056:	d106      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2200      	movs	r2, #0
 800305e:	2101      	movs	r1, #1
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff f9c5 	bl	80023f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2102      	movs	r1, #2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f9a9 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x2b6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2102      	movs	r1, #2
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f99e 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8003088:	4603      	mov	r3, r0
 800308a:	0e9b      	lsrs	r3, r3, #26
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	e01e      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x2f4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2102      	movs	r1, #2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff f993 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 800309e:	4603      	mov	r3, r0
 80030a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80030b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80030b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e004      	b.n	80030ce <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80030c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x30c>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	0e9b      	lsrs	r3, r3, #26
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	e016      	b.n	8003116 <HAL_ADC_ConfigChannel+0x33a>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80030fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003100:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8003108:	2320      	movs	r3, #32
 800310a:	e004      	b.n	8003116 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800310c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003116:	429a      	cmp	r2, r3
 8003118:	d106      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2200      	movs	r2, #0
 8003120:	2102      	movs	r1, #2
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f964 	bl	80023f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2103      	movs	r1, #3
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f948 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8003134:	4603      	mov	r3, r0
 8003136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x378>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2103      	movs	r1, #3
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff f93d 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 800314a:	4603      	mov	r3, r0
 800314c:	0e9b      	lsrs	r3, r3, #26
 800314e:	f003 021f 	and.w	r2, r3, #31
 8003152:	e017      	b.n	8003184 <HAL_ADC_ConfigChannel+0x3a8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2103      	movs	r1, #3
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff f932 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8003160:	4603      	mov	r3, r0
 8003162:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800316c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800316e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e003      	b.n	8003182 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800317a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_ADC_ConfigChannel+0x3c0>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	e011      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x3e4>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80031aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80031ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	e003      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80031b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d106      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2200      	movs	r2, #0
 80031ca:	2103      	movs	r1, #3
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff f90f 	bl	80023f0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fa58 	bl	800268c <LL_ADC_IsEnabled>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 81c9 	bne.w	8003576 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	461a      	mov	r2, r3
 80031f2:	f7ff f995 	bl	8002520 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	4a8f      	ldr	r2, [pc, #572]	@ (8003438 <HAL_ADC_ConfigChannel+0x65c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	f040 8131 	bne.w	8003464 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10b      	bne.n	800322a <HAL_ADC_ConfigChannel+0x44e>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	0e9b      	lsrs	r3, r3, #26
 8003218:	3301      	adds	r3, #1
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2b09      	cmp	r3, #9
 8003220:	bf94      	ite	ls
 8003222:	2301      	movls	r3, #1
 8003224:	2300      	movhi	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	e019      	b.n	800325e <HAL_ADC_ConfigChannel+0x482>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800323a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800323c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8003242:	2320      	movs	r3, #32
 8003244:	e003      	b.n	800324e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8003246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2b09      	cmp	r3, #9
 8003256:	bf94      	ite	ls
 8003258:	2301      	movls	r3, #1
 800325a:	2300      	movhi	r3, #0
 800325c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800325e:	2b00      	cmp	r3, #0
 8003260:	d079      	beq.n	8003356 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326a:	2b00      	cmp	r3, #0
 800326c:	d107      	bne.n	800327e <HAL_ADC_ConfigChannel+0x4a2>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0e9b      	lsrs	r3, r3, #26
 8003274:	3301      	adds	r3, #1
 8003276:	069b      	lsls	r3, r3, #26
 8003278:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800327c:	e015      	b.n	80032aa <HAL_ADC_ConfigChannel+0x4ce>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800328c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800328e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003296:	2320      	movs	r3, #32
 8003298:	e003      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800329a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	069b      	lsls	r3, r3, #26
 80032a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x4ee>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	0e9b      	lsrs	r3, r3, #26
 80032bc:	3301      	adds	r3, #1
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	e017      	b.n	80032fa <HAL_ADC_ConfigChannel+0x51e>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80032d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80032dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80032e2:	2320      	movs	r3, #32
 80032e4:	e003      	b.n	80032ee <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80032e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	3301      	adds	r3, #1
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	2101      	movs	r1, #1
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	ea42 0103 	orr.w	r1, r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x544>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	3301      	adds	r3, #1
 8003312:	f003 021f 	and.w	r2, r3, #31
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	051b      	lsls	r3, r3, #20
 800331e:	e018      	b.n	8003352 <HAL_ADC_ConfigChannel+0x576>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800332e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003330:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e003      	b.n	8003344 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800333c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f003 021f 	and.w	r2, r3, #31
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003352:	430b      	orrs	r3, r1
 8003354:	e081      	b.n	800345a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335e:	2b00      	cmp	r3, #0
 8003360:	d107      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x596>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	0e9b      	lsrs	r3, r3, #26
 8003368:	3301      	adds	r3, #1
 800336a:	069b      	lsls	r3, r3, #26
 800336c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003370:	e015      	b.n	800339e <HAL_ADC_ConfigChannel+0x5c2>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e003      	b.n	8003396 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3301      	adds	r3, #1
 8003398:	069b      	lsls	r3, r3, #26
 800339a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <HAL_ADC_ConfigChannel+0x5e2>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	0e9b      	lsrs	r3, r3, #26
 80033b0:	3301      	adds	r3, #1
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	e017      	b.n	80033ee <HAL_ADC_ConfigChannel+0x612>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	61fb      	str	r3, [r7, #28]
  return result;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80033d6:	2320      	movs	r3, #32
 80033d8:	e003      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2101      	movs	r1, #1
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	ea42 0103 	orr.w	r1, r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10d      	bne.n	800341a <HAL_ADC_ConfigChannel+0x63e>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0e9b      	lsrs	r3, r3, #26
 8003404:	3301      	adds	r3, #1
 8003406:	f003 021f 	and.w	r2, r3, #31
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	3b1e      	subs	r3, #30
 8003412:	051b      	lsls	r3, r3, #20
 8003414:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003418:	e01e      	b.n	8003458 <HAL_ADC_ConfigChannel+0x67c>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	613b      	str	r3, [r7, #16]
  return result;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8003432:	2320      	movs	r3, #32
 8003434:	e006      	b.n	8003444 <HAL_ADC_ConfigChannel+0x668>
 8003436:	bf00      	nop
 8003438:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f003 021f 	and.w	r2, r3, #31
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	3b1e      	subs	r3, #30
 8003452:	051b      	lsls	r3, r3, #20
 8003454:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003458:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800345e:	4619      	mov	r1, r3
 8003460:	f7ff f833 	bl	80024ca <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b48      	ldr	r3, [pc, #288]	@ (800358c <HAL_ADC_ConfigChannel+0x7b0>)
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8082 	beq.w	8003576 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003472:	4847      	ldr	r0, [pc, #284]	@ (8003590 <HAL_ADC_ConfigChannel+0x7b4>)
 8003474:	f7fe ff74 	bl	8002360 <LL_ADC_GetCommonPathInternalCh>
 8003478:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800347c:	4845      	ldr	r0, [pc, #276]	@ (8003594 <HAL_ADC_ConfigChannel+0x7b8>)
 800347e:	f7ff f905 	bl	800268c <LL_ADC_IsEnabled>
 8003482:	4604      	mov	r4, r0
 8003484:	4844      	ldr	r0, [pc, #272]	@ (8003598 <HAL_ADC_ConfigChannel+0x7bc>)
 8003486:	f7ff f901 	bl	800268c <LL_ADC_IsEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	4323      	orrs	r3, r4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d15e      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a41      	ldr	r2, [pc, #260]	@ (800359c <HAL_ADC_ConfigChannel+0x7c0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d127      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800349c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d121      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a39      	ldr	r2, [pc, #228]	@ (8003594 <HAL_ADC_ConfigChannel+0x7b8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d161      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034ba:	4619      	mov	r1, r3
 80034bc:	4834      	ldr	r0, [pc, #208]	@ (8003590 <HAL_ADC_ConfigChannel+0x7b4>)
 80034be:	f7fe ff3c 	bl	800233a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034c2:	4b37      	ldr	r3, [pc, #220]	@ (80035a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	4a36      	ldr	r2, [pc, #216]	@ (80035a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80034da:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80034dc:	e002      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f9      	bne.n	80034de <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034ea:	e044      	b.n	8003576 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2d      	ldr	r2, [pc, #180]	@ (80035a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d113      	bne.n	800351e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a23      	ldr	r2, [pc, #140]	@ (8003594 <HAL_ADC_ConfigChannel+0x7b8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d134      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800350c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003510:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003514:	4619      	mov	r1, r3
 8003516:	481e      	ldr	r0, [pc, #120]	@ (8003590 <HAL_ADC_ConfigChannel+0x7b4>)
 8003518:	f7fe ff0f 	bl	800233a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800351c:	e02b      	b.n	8003576 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a22      	ldr	r2, [pc, #136]	@ (80035ac <HAL_ADC_ConfigChannel+0x7d0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d126      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800352c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d120      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <HAL_ADC_ConfigChannel+0x7b8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d11b      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800353e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003542:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003546:	4619      	mov	r1, r3
 8003548:	4811      	ldr	r0, [pc, #68]	@ (8003590 <HAL_ADC_ConfigChannel+0x7b4>)
 800354a:	f7fe fef6 	bl	800233a <LL_ADC_SetCommonPathInternalCh>
 800354e:	e012      	b.n	8003576 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003562:	e008      	b.n	8003576 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003568:	f043 0220 	orr.w	r2, r3, #32
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800357e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003582:	4618      	mov	r0, r3
 8003584:	37dc      	adds	r7, #220	@ 0xdc
 8003586:	46bd      	mov	sp, r7
 8003588:	bd90      	pop	{r4, r7, pc}
 800358a:	bf00      	nop
 800358c:	80080000 	.word	0x80080000
 8003590:	42028300 	.word	0x42028300
 8003594:	42028000 	.word	0x42028000
 8003598:	42028100 	.word	0x42028100
 800359c:	c7520000 	.word	0xc7520000
 80035a0:	20000000 	.word	0x20000000
 80035a4:	053e2d63 	.word	0x053e2d63
 80035a8:	cb840000 	.word	0xcb840000
 80035ac:	80000001 	.word	0x80000001

080035b0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff f8ae 	bl	8002728 <LL_ADC_REG_IsConversionOngoing>
 80035cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff f8cf 	bl	8002776 <LL_ADC_INJ_IsConversionOngoing>
 80035d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d103      	bne.n	80035e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8098 	beq.w	8003718 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d02a      	beq.n	800364c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7e5b      	ldrb	r3, [r3, #25]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d126      	bne.n	800364c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7e1b      	ldrb	r3, [r3, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d122      	bne.n	800364c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003606:	2301      	movs	r3, #1
 8003608:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800360a:	e014      	b.n	8003636 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4a45      	ldr	r2, [pc, #276]	@ (8003724 <ADC_ConversionStop+0x174>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d90d      	bls.n	8003630 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003618:	f043 0210 	orr.w	r2, r3, #16
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e074      	b.n	800371a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	3301      	adds	r3, #1
 8003634:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b40      	cmp	r3, #64	@ 0x40
 8003642:	d1e3      	bne.n	800360c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2240      	movs	r2, #64	@ 0x40
 800364a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d014      	beq.n	800367c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff f866 	bl	8002728 <LL_ADC_REG_IsConversionOngoing>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff f823 	bl	80026b2 <LL_ADC_IsDisableOngoing>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f842 	bl	8002700 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d014      	beq.n	80036ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f875 	bl	8002776 <LL_ADC_INJ_IsConversionOngoing>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00c      	beq.n	80036ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff f80b 	bl	80026b2 <LL_ADC_IsDisableOngoing>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff f851 	bl	800274e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d005      	beq.n	80036be <ADC_ConversionStop+0x10e>
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d105      	bne.n	80036c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80036b8:	230c      	movs	r3, #12
 80036ba:	617b      	str	r3, [r7, #20]
        break;
 80036bc:	e005      	b.n	80036ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80036be:	2308      	movs	r3, #8
 80036c0:	617b      	str	r3, [r7, #20]
        break;
 80036c2:	e002      	b.n	80036ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80036c4:	2304      	movs	r3, #4
 80036c6:	617b      	str	r3, [r7, #20]
        break;
 80036c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80036ca:	f7fe fdf3 	bl	80022b4 <HAL_GetTick>
 80036ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036d0:	e01b      	b.n	800370a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036d2:	f7fe fdef 	bl	80022b4 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b05      	cmp	r3, #5
 80036de:	d914      	bls.n	800370a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f2:	f043 0210 	orr.w	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e007      	b.n	800371a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1dc      	bne.n	80036d2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	a33fffff 	.word	0xa33fffff

08003728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe ffa7 	bl	800268c <LL_ADC_IsEnabled>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d169      	bne.n	8003818 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	4b36      	ldr	r3, [pc, #216]	@ (8003824 <ADC_Enable+0xfc>)
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003756:	f043 0210 	orr.w	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	f043 0201 	orr.w	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e055      	b.n	800381a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe ff62 	bl	800263c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003778:	482b      	ldr	r0, [pc, #172]	@ (8003828 <ADC_Enable+0x100>)
 800377a:	f7fe fdf1 	bl	8002360 <LL_ADC_GetCommonPathInternalCh>
 800377e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003780:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003784:	2b00      	cmp	r3, #0
 8003786:	d013      	beq.n	80037b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003788:	4b28      	ldr	r3, [pc, #160]	@ (800382c <ADC_Enable+0x104>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	4a28      	ldr	r2, [pc, #160]	@ (8003830 <ADC_Enable+0x108>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037a2:	e002      	b.n	80037aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f9      	bne.n	80037a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037b0:	f7fe fd80 	bl	80022b4 <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037b6:	e028      	b.n	800380a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe ff65 	bl	800268c <LL_ADC_IsEnabled>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe ff35 	bl	800263c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037d2:	f7fe fd6f 	bl	80022b4 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d914      	bls.n	800380a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d00d      	beq.n	800380a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	f043 0210 	orr.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	f043 0201 	orr.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e007      	b.n	800381a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d1cf      	bne.n	80037b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	8000003f 	.word	0x8000003f
 8003828:	42028300 	.word	0x42028300
 800382c:	20000000 	.word	0x20000000
 8003830:	053e2d63 	.word	0x053e2d63

08003834 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe ff36 	bl	80026b2 <LL_ADC_IsDisableOngoing>
 8003846:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe ff1d 	bl	800268c <LL_ADC_IsEnabled>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d047      	beq.n	80038e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d144      	bne.n	80038e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 030d 	and.w	r3, r3, #13
 8003868:	2b01      	cmp	r3, #1
 800386a:	d10c      	bne.n	8003886 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe fef7 	bl	8002664 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2203      	movs	r2, #3
 800387c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800387e:	f7fe fd19 	bl	80022b4 <HAL_GetTick>
 8003882:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003884:	e029      	b.n	80038da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388a:	f043 0210 	orr.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e023      	b.n	80038ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038a2:	f7fe fd07 	bl	80022b4 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d914      	bls.n	80038da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c2:	f043 0210 	orr.w	r2, r3, #16
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ce:	f043 0201 	orr.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e007      	b.n	80038ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1dc      	bne.n	80038a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <LL_ADC_IsEnabled>:
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <LL_ADC_IsEnabled+0x18>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <LL_ADC_IsEnabled+0x1a>
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_ADC_StartCalibration>:
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800392a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003934:	4313      	orrs	r3, r2
 8003936:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_ADC_IsCalibrationOnGoing>:
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800395a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800395e:	d101      	bne.n	8003964 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_ADC_REG_IsConversionOngoing>:
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b04      	cmp	r3, #4
 8003984:	d101      	bne.n	800398a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e04d      	b.n	8003a50 <HAL_ADCEx_Calibration_Start+0xb8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff39 	bl	8003834 <ADC_Disable>
 80039c2:	4603      	mov	r3, r0
 80039c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d136      	bne.n	8003a3a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039d4:	f023 0302 	bic.w	r3, r3, #2
 80039d8:	f043 0202 	orr.w	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6839      	ldr	r1, [r7, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff96 	bl	8003918 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80039ec:	e014      	b.n	8003a18 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	3301      	adds	r3, #1
 80039f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4a18      	ldr	r2, [pc, #96]	@ (8003a58 <HAL_ADCEx_Calibration_Start+0xc0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d90d      	bls.n	8003a18 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a00:	f023 0312 	bic.w	r3, r3, #18
 8003a04:	f043 0210 	orr.w	r2, r3, #16
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e01b      	b.n	8003a50 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff94 	bl	800394a <LL_ADC_IsCalibrationOnGoing>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e2      	bne.n	80039ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2c:	f023 0303 	bic.w	r3, r3, #3
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a38:	e005      	b.n	8003a46 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	f043 0210 	orr.w	r2, r3, #16
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	0006cbff 	.word	0x0006cbff

08003a5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b0a1      	sub	sp, #132	@ 0x84
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e089      	b.n	8003b8e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a82:	2300      	movs	r3, #0
 8003a84:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003a86:	2300      	movs	r3, #0
 8003a88:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a42      	ldr	r2, [pc, #264]	@ (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d102      	bne.n	8003a9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a94:	4b41      	ldr	r3, [pc, #260]	@ (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e001      	b.n	8003a9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e068      	b.n	8003b8e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff57 	bl	8003972 <LL_ADC_REG_IsConversionOngoing>
 8003ac4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ff51 	bl	8003972 <LL_ADC_REG_IsConversionOngoing>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d14a      	bne.n	8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ad6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d147      	bne.n	8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003adc:	4b30      	ldr	r3, [pc, #192]	@ (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003ade:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d027      	beq.n	8003b38 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ae8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003afa:	035b      	lsls	r3, r3, #13
 8003afc:	430b      	orrs	r3, r1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b04:	4824      	ldr	r0, [pc, #144]	@ (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003b06:	f7ff fef4 	bl	80038f2 <LL_ADC_IsEnabled>
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4823      	ldr	r0, [pc, #140]	@ (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b0e:	f7ff fef0 	bl	80038f2 <LL_ADC_IsEnabled>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4323      	orrs	r3, r4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d132      	bne.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b22:	f023 030f 	bic.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	6811      	ldr	r1, [r2, #0]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	6892      	ldr	r2, [r2, #8]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b34:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b36:	e023      	b.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b42:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b44:	4814      	ldr	r0, [pc, #80]	@ (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003b46:	f7ff fed4 	bl	80038f2 <LL_ADC_IsEnabled>
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	4813      	ldr	r0, [pc, #76]	@ (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b4e:	f7ff fed0 	bl	80038f2 <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4323      	orrs	r3, r4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d112      	bne.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b62:	f023 030f 	bic.w	r3, r3, #15
 8003b66:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b68:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b6a:	e009      	b.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003b7e:	e000      	b.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003b8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3784      	adds	r7, #132	@ 0x84
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd90      	pop	{r4, r7, pc}
 8003b96:	bf00      	nop
 8003b98:	42028000 	.word	0x42028000
 8003b9c:	42028100 	.word	0x42028100
 8003ba0:	42028300 	.word	0x42028300

08003ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd6:	4a04      	ldr	r2, [pc, #16]	@ (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	60d3      	str	r3, [r2, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf0:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f003 0307 	and.w	r3, r3, #7
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	db0b      	blt.n	8003c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	f003 021f 	and.w	r2, r3, #31
 8003c20:	4907      	ldr	r1, [pc, #28]	@ (8003c40 <__NVIC_EnableIRQ+0x38>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	2001      	movs	r0, #1
 8003c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000e100 	.word	0xe000e100

08003c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	db0a      	blt.n	8003c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	490c      	ldr	r1, [pc, #48]	@ (8003c90 <__NVIC_SetPriority+0x4c>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	0152      	lsls	r2, r2, #5
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	440b      	add	r3, r1
 8003c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c6c:	e00a      	b.n	8003c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4908      	ldr	r1, [pc, #32]	@ (8003c94 <__NVIC_SetPriority+0x50>)
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	0152      	lsls	r2, r2, #5
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	440b      	add	r3, r1
 8003c82:	761a      	strb	r2, [r3, #24]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000e100 	.word	0xe000e100
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	@ 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f1c3 0307 	rsb	r3, r3, #7
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	bf28      	it	cs
 8003cb6:	2303      	movcs	r3, #3
 8003cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3303      	adds	r3, #3
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d902      	bls.n	8003cc8 <NVIC_EncodePriority+0x30>
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3b04      	subs	r3, #4
 8003cc6:	e000      	b.n	8003cca <NVIC_EncodePriority+0x32>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	401a      	ands	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43d9      	mvns	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	4313      	orrs	r3, r2
         );
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	@ 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d10:	d301      	bcc.n	8003d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00f      	b.n	8003d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d16:	4a0a      	ldr	r2, [pc, #40]	@ (8003d40 <SysTick_Config+0x40>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1e:	2107      	movs	r1, #7
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	f7ff ff8e 	bl	8003c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d28:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <SysTick_Config+0x40>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2e:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <SysTick_Config+0x40>)
 8003d30:	2207      	movs	r2, #7
 8003d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	e000e010 	.word	0xe000e010

08003d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff29 	bl	8003ba4 <__NVIC_SetPriorityGrouping>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d68:	f7ff ff40 	bl	8003bec <__NVIC_GetPriorityGrouping>
 8003d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	6978      	ldr	r0, [r7, #20]
 8003d74:	f7ff ff90 	bl	8003c98 <NVIC_EncodePriority>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff5f 	bl	8003c44 <__NVIC_SetPriority>
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff33 	bl	8003c08 <__NVIC_EnableIRQ>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ffa4 	bl	8003d00 <SysTick_Config>
 8003db8:	4603      	mov	r3, r0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d008      	beq.n	8003dec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e040      	b.n	8003e6e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 020e 	bic.w	r2, r2, #14
 8003dfa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e20:	f003 021c 	and.w	r2, r3, #28
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003e38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003e5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d005      	beq.n	8003e9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2204      	movs	r2, #4
 8003e96:	645a      	str	r2, [r3, #68]	@ 0x44

    status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	e047      	b.n	8003f2e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 020e 	bic.w	r2, r2, #14
 8003eac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ecc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed2:	f003 021c 	and.w	r2, r3, #28
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003eea:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00c      	beq.n	8003f0e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003f0c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
    }
  }
  return status;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f46:	e158      	b.n	80041fa <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	fa01 f303 	lsl.w	r3, r1, r3
 8003f54:	4013      	ands	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 814a 	beq.w	80041f4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d005      	beq.n	8003f78 <HAL_GPIO_Init+0x40>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d130      	bne.n	8003fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2203      	movs	r2, #3
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fae:	2201      	movs	r2, #1
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	f003 0201 	and.w	r2, r3, #1
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d017      	beq.n	8004016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d123      	bne.n	800406a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	08da      	lsrs	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3208      	adds	r2, #8
 800402a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	220f      	movs	r2, #15
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	08da      	lsrs	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3208      	adds	r2, #8
 8004064:	6939      	ldr	r1, [r7, #16]
 8004066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	2203      	movs	r2, #3
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 0203 	and.w	r2, r3, #3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80a4 	beq.w	80041f4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80040ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004218 <HAL_GPIO_Init+0x2e0>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3318      	adds	r3, #24
 80040b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	220f      	movs	r2, #15
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a52      	ldr	r2, [pc, #328]	@ (800421c <HAL_GPIO_Init+0x2e4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d025      	beq.n	8004124 <HAL_GPIO_Init+0x1ec>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a51      	ldr	r2, [pc, #324]	@ (8004220 <HAL_GPIO_Init+0x2e8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d01f      	beq.n	8004120 <HAL_GPIO_Init+0x1e8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a50      	ldr	r2, [pc, #320]	@ (8004224 <HAL_GPIO_Init+0x2ec>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d019      	beq.n	800411c <HAL_GPIO_Init+0x1e4>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a4f      	ldr	r2, [pc, #316]	@ (8004228 <HAL_GPIO_Init+0x2f0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <HAL_GPIO_Init+0x1e0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a4e      	ldr	r2, [pc, #312]	@ (800422c <HAL_GPIO_Init+0x2f4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00d      	beq.n	8004114 <HAL_GPIO_Init+0x1dc>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004230 <HAL_GPIO_Init+0x2f8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d007      	beq.n	8004110 <HAL_GPIO_Init+0x1d8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a4c      	ldr	r2, [pc, #304]	@ (8004234 <HAL_GPIO_Init+0x2fc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d101      	bne.n	800410c <HAL_GPIO_Init+0x1d4>
 8004108:	2306      	movs	r3, #6
 800410a:	e00c      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 800410c:	2307      	movs	r3, #7
 800410e:	e00a      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004110:	2305      	movs	r3, #5
 8004112:	e008      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004114:	2304      	movs	r3, #4
 8004116:	e006      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004118:	2303      	movs	r3, #3
 800411a:	e004      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 800411c:	2302      	movs	r3, #2
 800411e:	e002      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004124:	2300      	movs	r3, #0
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	f002 0203 	and.w	r2, r2, #3
 800412c:	00d2      	lsls	r2, r2, #3
 800412e:	4093      	lsls	r3, r2
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004136:	4938      	ldr	r1, [pc, #224]	@ (8004218 <HAL_GPIO_Init+0x2e0>)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	089b      	lsrs	r3, r3, #2
 800413c:	3318      	adds	r3, #24
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004144:	4b34      	ldr	r3, [pc, #208]	@ (8004218 <HAL_GPIO_Init+0x2e0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	43db      	mvns	r3, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4013      	ands	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004168:	4a2b      	ldr	r2, [pc, #172]	@ (8004218 <HAL_GPIO_Init+0x2e0>)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800416e:	4b2a      	ldr	r3, [pc, #168]	@ (8004218 <HAL_GPIO_Init+0x2e0>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	43db      	mvns	r3, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004192:	4a21      	ldr	r2, [pc, #132]	@ (8004218 <HAL_GPIO_Init+0x2e0>)
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004198:	4b1f      	ldr	r3, [pc, #124]	@ (8004218 <HAL_GPIO_Init+0x2e0>)
 800419a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800419e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041be:	4a16      	ldr	r2, [pc, #88]	@ (8004218 <HAL_GPIO_Init+0x2e0>)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80041c6:	4b14      	ldr	r3, [pc, #80]	@ (8004218 <HAL_GPIO_Init+0x2e0>)
 80041c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004218 <HAL_GPIO_Init+0x2e0>)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3301      	adds	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	f47f ae9f 	bne.w	8003f48 <HAL_GPIO_Init+0x10>
  }
}
 800420a:	bf00      	nop
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	4002f400 	.word	0x4002f400
 800421c:	42020000 	.word	0x42020000
 8004220:	42020400 	.word	0x42020400
 8004224:	42020800 	.word	0x42020800
 8004228:	42020c00 	.word	0x42020c00
 800422c:	42021000 	.word	0x42021000
 8004230:	42021400 	.word	0x42021400
 8004234:	42021800 	.word	0x42021800

08004238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
 8004244:	4613      	mov	r3, r2
 8004246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004248:	787b      	ldrb	r3, [r7, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004254:	e002      	b.n	800425c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10c      	bne.n	8004294 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800427a:	4b13      	ldr	r3, [pc, #76]	@ (80042c8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004286:	d10e      	bne.n	80042a6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004288:	f000 f89c 	bl	80043c4 <HAL_PWREx_DisableLowPowerRunMode>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8004292:	e016      	b.n	80042c2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8004294:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800429c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a0:	d001      	beq.n	80042a6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80042a2:	f000 f87f 	bl	80043a4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042a6:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <HAL_PWR_EnterSLEEPMode+0x64>)
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	4a08      	ldr	r2, [pc, #32]	@ (80042cc <HAL_PWR_EnterSLEEPMode+0x64>)
 80042ac:	f023 0304 	bic.w	r3, r3, #4
 80042b0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80042b8:	bf30      	wfi
 80042ba:	e002      	b.n	80042c2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80042bc:	bf40      	sev
    __WFE();
 80042be:	bf20      	wfe
    __WFE();
 80042c0:	bf20      	wfe
  }

}
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40007000 	.word	0x40007000
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80042d4:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40007000 	.word	0x40007000

080042ec <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80042f4:	4b27      	ldr	r3, [pc, #156]	@ (8004394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042fc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80042fe:	f000 f8b1 	bl	8004464 <HAL_PWREx_SMPS_GetEffectiveMode>
 8004302:	4603      	mov	r3, r0
 8004304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004308:	d101      	bne.n	800430e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e03e      	b.n	800438c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800430e:	4b21      	ldr	r3, [pc, #132]	@ (8004394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800431a:	d101      	bne.n	8004320 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e035      	b.n	800438c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d101      	bne.n	800432c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e02f      	b.n	800438c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800432c:	4b19      	ldr	r3, [pc, #100]	@ (8004394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004334:	4917      	ldr	r1, [pc, #92]	@ (8004394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800433c:	4b16      	ldr	r3, [pc, #88]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	4a16      	ldr	r2, [pc, #88]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	09db      	lsrs	r3, r3, #7
 800434a:	2232      	movs	r2, #50	@ 0x32
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	4a13      	ldr	r2, [pc, #76]	@ (80043a0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	08db      	lsrs	r3, r3, #3
 8004358:	3301      	adds	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800435c:	e002      	b.n	8004364 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3b01      	subs	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004370:	d102      	bne.n	8004378 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f2      	bne.n	800435e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004384:	d101      	bne.n	800438a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e000      	b.n	800438c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40007000 	.word	0x40007000
 8004398:	20000000 	.word	0x20000000
 800439c:	0a7c5ac5 	.word	0x0a7c5ac5
 80043a0:	cccccccd 	.word	0xcccccccd

080043a4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a04      	ldr	r2, [pc, #16]	@ (80043c0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80043ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40007000 	.word	0x40007000

080043c4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80043ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004434 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 80043d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043d4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_REGLP_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80043d6:	4b18      	ldr	r3, [pc, #96]	@ (8004438 <HAL_PWREx_DisableLowPowerRunMode+0x74>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	4a17      	ldr	r2, [pc, #92]	@ (800443c <HAL_PWREx_DisableLowPowerRunMode+0x78>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	09db      	lsrs	r3, r3, #7
 80043e4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043e8:	fb02 f303 	mul.w	r3, r2, r3
 80043ec:	4a14      	ldr	r2, [pc, #80]	@ (8004440 <HAL_PWREx_DisableLowPowerRunMode+0x7c>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	08db      	lsrs	r3, r3, #3
 80043f4:	3301      	adds	r3, #1
 80043f6:	607b      	str	r3, [r7, #4]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80043f8:	e002      	b.n	8004400 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    wait_loop_index--;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004400:	4b0c      	ldr	r3, [pc, #48]	@ (8004434 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800440c:	d102      	bne.n	8004414 <HAL_PWREx_DisableLowPowerRunMode+0x50>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f2      	bne.n	80043fa <HAL_PWREx_DisableLowPowerRunMode+0x36>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004414:	4b07      	ldr	r3, [pc, #28]	@ (8004434 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800441c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004420:	d101      	bne.n	8004426 <HAL_PWREx_DisableLowPowerRunMode+0x62>
  {
    return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e000      	b.n	8004428 <HAL_PWREx_DisableLowPowerRunMode+0x64>
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40007000 	.word	0x40007000
 8004438:	20000000 	.word	0x20000000
 800443c:	0a7c5ac5 	.word	0x0a7c5ac5
 8004440:	cccccccd 	.word	0xcccccccd

08004444 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004448:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4a04      	ldr	r2, [pc, #16]	@ (8004460 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800444e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004452:	6093      	str	r3, [r2, #8]
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40007000 	.word	0x40007000

08004464 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800446a:	4b0f      	ldr	r3, [pc, #60]	@ (80044a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800447a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	e00a      	b.n	8004498 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800448c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	e001      	b.n	8004498 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004494:	2300      	movs	r3, #0
 8004496:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004498:	687b      	ldr	r3, [r7, #4]
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40007000 	.word	0x40007000

080044ac <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f000 bcc2 	b.w	8004e44 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c0:	4b99      	ldr	r3, [pc, #612]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ca:	4b97      	ldr	r3, [pc, #604]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80e9 	beq.w	80046b4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <HAL_RCC_OscConfig+0x4a>
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b0c      	cmp	r3, #12
 80044ec:	f040 8083 	bne.w	80045f6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d17f      	bne.n	80045f6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044f6:	4b8c      	ldr	r3, [pc, #560]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d006      	beq.n	8004510 <HAL_RCC_OscConfig+0x64>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f000 bc9a 	b.w	8004e44 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004514:	4b84      	ldr	r3, [pc, #528]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <HAL_RCC_OscConfig+0x7e>
 8004520:	4b81      	ldr	r3, [pc, #516]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004528:	e005      	b.n	8004536 <HAL_RCC_OscConfig+0x8a>
 800452a:	4b7f      	ldr	r3, [pc, #508]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800452c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004536:	4293      	cmp	r3, r2
 8004538:	d224      	bcs.n	8004584 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fe9a 	bl	8005278 <RCC_SetFlashLatencyFromMSIRange>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	f000 bc7a 	b.w	8004e44 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004550:	4b75      	ldr	r3, [pc, #468]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a74      	ldr	r2, [pc, #464]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004556:	f043 0308 	orr.w	r3, r3, #8
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b72      	ldr	r3, [pc, #456]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	496f      	ldr	r1, [pc, #444]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800456e:	4b6e      	ldr	r3, [pc, #440]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	496a      	ldr	r1, [pc, #424]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
 8004582:	e026      	b.n	80045d2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004584:	4b68      	ldr	r3, [pc, #416]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a67      	ldr	r2, [pc, #412]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800458a:	f043 0308 	orr.w	r3, r3, #8
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b65      	ldr	r3, [pc, #404]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	4962      	ldr	r1, [pc, #392]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a2:	4b61      	ldr	r3, [pc, #388]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	495d      	ldr	r1, [pc, #372]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fe59 	bl	8005278 <RCC_SetFlashLatencyFromMSIRange>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f000 bc39 	b.w	8004e44 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80045d2:	f000 fe15 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 80045d6:	4603      	mov	r3, r0
 80045d8:	4a54      	ldr	r2, [pc, #336]	@ (800472c <HAL_RCC_OscConfig+0x280>)
 80045da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045dc:	4b54      	ldr	r3, [pc, #336]	@ (8004730 <HAL_RCC_OscConfig+0x284>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fd fe17 	bl	8002214 <HAL_InitTick>
 80045e6:	4603      	mov	r3, r0
 80045e8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d060      	beq.n	80046b2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	f000 bc27 	b.w	8004e44 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d039      	beq.n	8004672 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a49      	ldr	r2, [pc, #292]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800460a:	f7fd fe53 	bl	80022b4 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004610:	e00f      	b.n	8004632 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004612:	f7fd fe4f 	bl	80022b4 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d908      	bls.n	8004632 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004620:	4b41      	ldr	r3, [pc, #260]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d102      	bne.n	8004632 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	f000 bc09 	b.w	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004632:	4b3d      	ldr	r3, [pc, #244]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0e9      	beq.n	8004612 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800463e:	4b3a      	ldr	r3, [pc, #232]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a39      	ldr	r2, [pc, #228]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004644:	f043 0308 	orr.w	r3, r3, #8
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	4b37      	ldr	r3, [pc, #220]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	4934      	ldr	r1, [pc, #208]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800465c:	4b32      	ldr	r3, [pc, #200]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	492f      	ldr	r1, [pc, #188]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
 8004670:	e020      	b.n	80046b4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004672:	4b2d      	ldr	r3, [pc, #180]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a2c      	ldr	r2, [pc, #176]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800467e:	f7fd fe19 	bl	80022b4 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004684:	e00e      	b.n	80046a4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004686:	f7fd fe15 	bl	80022b4 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d907      	bls.n	80046a4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004694:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e3cf      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046a4:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ea      	bne.n	8004686 <HAL_RCC_OscConfig+0x1da>
 80046b0:	e000      	b.n	80046b4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d07e      	beq.n	80047be <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d005      	beq.n	80046d2 <HAL_RCC_OscConfig+0x226>
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d10e      	bne.n	80046ea <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d10b      	bne.n	80046ea <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d2:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d06e      	beq.n	80047bc <HAL_RCC_OscConfig+0x310>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d16a      	bne.n	80047bc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e3ac      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f2:	d106      	bne.n	8004702 <HAL_RCC_OscConfig+0x256>
 80046f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 80046fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	e024      	b.n	800474c <HAL_RCC_OscConfig+0x2a0>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800470a:	d113      	bne.n	8004734 <HAL_RCC_OscConfig+0x288>
 800470c:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a05      	ldr	r2, [pc, #20]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 8004712:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4b03      	ldr	r3, [pc, #12]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a02      	ldr	r2, [pc, #8]	@ (8004728 <HAL_RCC_OscConfig+0x27c>)
 800471e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	e012      	b.n	800474c <HAL_RCC_OscConfig+0x2a0>
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	20000000 	.word	0x20000000
 8004730:	20000004 	.word	0x20000004
 8004734:	4b8b      	ldr	r3, [pc, #556]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a8a      	ldr	r2, [pc, #552]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 800473a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b88      	ldr	r3, [pc, #544]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a87      	ldr	r2, [pc, #540]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800474a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d019      	beq.n	8004788 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fd fdae 	bl	80022b4 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475a:	e00e      	b.n	800477a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800475c:	f7fd fdaa 	bl	80022b4 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	@ 0x64
 8004768:	d907      	bls.n	800477a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476a:	4b7e      	ldr	r3, [pc, #504]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e364      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477a:	4b7a      	ldr	r3, [pc, #488]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0ea      	beq.n	800475c <HAL_RCC_OscConfig+0x2b0>
 8004786:	e01a      	b.n	80047be <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd fd94 	bl	80022b4 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800478e:	e00e      	b.n	80047ae <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7fd fd90 	bl	80022b4 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	@ 0x64
 800479c:	d907      	bls.n	80047ae <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800479e:	4b71      	ldr	r3, [pc, #452]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e34a      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1ea      	bne.n	8004790 <HAL_RCC_OscConfig+0x2e4>
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d06c      	beq.n	80048a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_OscConfig+0x330>
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d119      	bne.n	800480a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d116      	bne.n	800480a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047dc:	4b61      	ldr	r3, [pc, #388]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_OscConfig+0x348>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e327      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b5b      	ldr	r3, [pc, #364]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	4958      	ldr	r1, [pc, #352]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004808:	e04c      	b.n	80048a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d029      	beq.n	8004866 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004812:	4b54      	ldr	r3, [pc, #336]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a53      	ldr	r2, [pc, #332]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800481c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481e:	f7fd fd49 	bl	80022b4 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004824:	e00e      	b.n	8004844 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004826:	f7fd fd45 	bl	80022b4 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d907      	bls.n	8004844 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004834:	4b4b      	ldr	r3, [pc, #300]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e2ff      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004844:	4b47      	ldr	r3, [pc, #284]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0ea      	beq.n	8004826 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004850:	4b44      	ldr	r3, [pc, #272]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	4941      	ldr	r1, [pc, #260]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
 8004864:	e01e      	b.n	80048a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004866:	4b3f      	ldr	r3, [pc, #252]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a3e      	ldr	r2, [pc, #248]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 800486c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fd fd1f 	bl	80022b4 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004878:	e00e      	b.n	8004898 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487a:	f7fd fd1b 	bl	80022b4 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d907      	bls.n	8004898 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004888:	4b36      	ldr	r3, [pc, #216]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e2d5      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004898:	4b32      	ldr	r3, [pc, #200]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1ea      	bne.n	800487a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d062      	beq.n	8004976 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d038      	beq.n	800492a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d108      	bne.n	80048d2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80048c0:	4b28      	ldr	r3, [pc, #160]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 80048c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048c6:	4a27      	ldr	r2, [pc, #156]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 80048c8:	f023 0310 	bic.w	r3, r3, #16
 80048cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80048d0:	e007      	b.n	80048e2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80048d2:	4b24      	ldr	r3, [pc, #144]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 80048d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048d8:	4a22      	ldr	r2, [pc, #136]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 80048da:	f043 0310 	orr.w	r3, r3, #16
 80048de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e2:	4b20      	ldr	r3, [pc, #128]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 80048e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f2:	f7fd fcdf 	bl	80022b4 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f8:	e00f      	b.n	800491a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fa:	f7fd fcdb 	bl	80022b4 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b07      	cmp	r3, #7
 8004906:	d908      	bls.n	800491a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004908:	4b16      	ldr	r3, [pc, #88]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 800490a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e294      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800491a:	4b12      	ldr	r3, [pc, #72]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 800491c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0e8      	beq.n	80048fa <HAL_RCC_OscConfig+0x44e>
 8004928:	e025      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800492a:	4b0e      	ldr	r3, [pc, #56]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 800492c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004930:	4a0c      	ldr	r2, [pc, #48]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fd fcbb 	bl	80022b4 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004940:	e012      	b.n	8004968 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004942:	f7fd fcb7 	bl	80022b4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b07      	cmp	r3, #7
 800494e:	d90b      	bls.n	8004968 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004950:	4b04      	ldr	r3, [pc, #16]	@ (8004964 <HAL_RCC_OscConfig+0x4b8>)
 8004952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e270      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004968:	4ba8      	ldr	r3, [pc, #672]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 800496a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 812d 	beq.w	8004bde <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004984:	2300      	movs	r3, #0
 8004986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004988:	4ba0      	ldr	r3, [pc, #640]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 800498a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10d      	bne.n	80049b0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004994:	4b9d      	ldr	r3, [pc, #628]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004998:	4a9c      	ldr	r2, [pc, #624]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499e:	6593      	str	r3, [r2, #88]	@ 0x58
 80049a0:	4b9a      	ldr	r3, [pc, #616]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 80049a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ac:	2301      	movs	r3, #1
 80049ae:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b0:	4b97      	ldr	r3, [pc, #604]	@ (8004c10 <HAL_RCC_OscConfig+0x764>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d11e      	bne.n	80049fa <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049bc:	4b94      	ldr	r3, [pc, #592]	@ (8004c10 <HAL_RCC_OscConfig+0x764>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a93      	ldr	r2, [pc, #588]	@ (8004c10 <HAL_RCC_OscConfig+0x764>)
 80049c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c8:	f7fd fc74 	bl	80022b4 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ce:	e00e      	b.n	80049ee <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d0:	f7fd fc70 	bl	80022b4 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d907      	bls.n	80049ee <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049de:	4b8c      	ldr	r3, [pc, #560]	@ (8004c10 <HAL_RCC_OscConfig+0x764>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e22a      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ee:	4b88      	ldr	r3, [pc, #544]	@ (8004c10 <HAL_RCC_OscConfig+0x764>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ea      	beq.n	80049d0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01f      	beq.n	8004a46 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d010      	beq.n	8004a34 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a12:	4b7e      	ldr	r3, [pc, #504]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a18:	4a7c      	ldr	r2, [pc, #496]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a22:	4b7a      	ldr	r3, [pc, #488]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a28:	4a78      	ldr	r2, [pc, #480]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a32:	e018      	b.n	8004a66 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a34:	4b75      	ldr	r3, [pc, #468]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3a:	4a74      	ldr	r2, [pc, #464]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a44:	e00f      	b.n	8004a66 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a46:	4b71      	ldr	r3, [pc, #452]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4c:	4a6f      	ldr	r2, [pc, #444]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a56:	4b6d      	ldr	r3, [pc, #436]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a5e:	f023 0304 	bic.w	r3, r3, #4
 8004a62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d068      	beq.n	8004b40 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6e:	f7fd fc21 	bl	80022b4 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a74:	e011      	b.n	8004a9a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fd fc1d 	bl	80022b4 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d908      	bls.n	8004a9a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a88:	4b60      	ldr	r3, [pc, #384]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e1d4      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0e6      	beq.n	8004a76 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d022      	beq.n	8004afa <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ab4:	4b55      	ldr	r3, [pc, #340]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aba:	4a54      	ldr	r2, [pc, #336]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004ac4:	e011      	b.n	8004aea <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7fd fbf5 	bl	80022b4 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d908      	bls.n	8004aea <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e1ac      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004aea:	4b48      	ldr	r3, [pc, #288]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0e6      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x61a>
 8004af8:	e068      	b.n	8004bcc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004afa:	4b44      	ldr	r3, [pc, #272]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b00:	4a42      	ldr	r2, [pc, #264]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b0a:	e011      	b.n	8004b30 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0c:	f7fd fbd2 	bl	80022b4 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d908      	bls.n	8004b30 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e189      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b30:	4b36      	ldr	r3, [pc, #216]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e6      	bne.n	8004b0c <HAL_RCC_OscConfig+0x660>
 8004b3e:	e045      	b.n	8004bcc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fd fbb8 	bl	80022b4 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b46:	e011      	b.n	8004b6c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fd fbb4 	bl	80022b4 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d908      	bls.n	8004b6c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e16b      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b6c:	4b27      	ldr	r3, [pc, #156]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e6      	bne.n	8004b48 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004b7a:	4b24      	ldr	r3, [pc, #144]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d021      	beq.n	8004bcc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004b88:	4b20      	ldr	r3, [pc, #128]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b98:	e011      	b.n	8004bbe <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9a:	f7fd fb8b 	bl	80022b4 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d908      	bls.n	8004bbe <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004bac:	4b17      	ldr	r3, [pc, #92]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e142      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004bbe:	4b13      	ldr	r3, [pc, #76]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e6      	bne.n	8004b9a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bcc:	7ffb      	ldrb	r3, [r7, #31]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d105      	bne.n	8004bde <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bdc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d04f      	beq.n	8004c8a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d028      	beq.n	8004c44 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bf8:	4a04      	ldr	r2, [pc, #16]	@ (8004c0c <HAL_RCC_OscConfig+0x760>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c02:	f7fd fb57 	bl	80022b4 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c08:	e014      	b.n	8004c34 <HAL_RCC_OscConfig+0x788>
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c14:	f7fd fb4e 	bl	80022b4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d908      	bls.n	8004c34 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c22:	4b8a      	ldr	r3, [pc, #552]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e107      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c34:	4b85      	ldr	r3, [pc, #532]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0e8      	beq.n	8004c14 <HAL_RCC_OscConfig+0x768>
 8004c42:	e022      	b.n	8004c8a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c44:	4b81      	ldr	r3, [pc, #516]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c4a:	4a80      	ldr	r2, [pc, #512]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c54:	f7fd fb2e 	bl	80022b4 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c5a:	e00f      	b.n	8004c7c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c5c:	f7fd fb2a 	bl	80022b4 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d908      	bls.n	8004c7c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c6a:	4b78      	ldr	r3, [pc, #480]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e0e3      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c7c:	4b73      	ldr	r3, [pc, #460]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e8      	bne.n	8004c5c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80d7 	beq.w	8004e42 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c94:	4b6d      	ldr	r3, [pc, #436]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b0c      	cmp	r3, #12
 8004c9e:	f000 8091 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d166      	bne.n	8004d78 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004caa:	4b68      	ldr	r3, [pc, #416]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a67      	ldr	r2, [pc, #412]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004cb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb6:	f7fd fafd 	bl	80022b4 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	e00e      	b.n	8004cdc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fd faf9 	bl	80022b4 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d907      	bls.n	8004cdc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ccc:	4b5f      	ldr	r3, [pc, #380]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e0b3      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cdc:	4b5b      	ldr	r3, [pc, #364]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ea      	bne.n	8004cbe <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce8:	4b58      	ldr	r3, [pc, #352]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	4b58      	ldr	r3, [pc, #352]	@ (8004e50 <HAL_RCC_OscConfig+0x9a4>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	0112      	lsls	r2, r2, #4
 8004cfc:	4311      	orrs	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d02:	0212      	lsls	r2, r2, #8
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004d0a:	0852      	lsrs	r2, r2, #1
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0552      	lsls	r2, r2, #21
 8004d10:	4311      	orrs	r1, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d16:	0852      	lsrs	r2, r2, #1
 8004d18:	3a01      	subs	r2, #1
 8004d1a:	0652      	lsls	r2, r2, #25
 8004d1c:	4311      	orrs	r1, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d22:	06d2      	lsls	r2, r2, #27
 8004d24:	430a      	orrs	r2, r1
 8004d26:	4949      	ldr	r1, [pc, #292]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2c:	4b47      	ldr	r3, [pc, #284]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a46      	ldr	r2, [pc, #280]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d38:	4b44      	ldr	r3, [pc, #272]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4a43      	ldr	r2, [pc, #268]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fd fab6 	bl	80022b4 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4a:	e00e      	b.n	8004d6a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fd fab2 	bl	80022b4 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d907      	bls.n	8004d6a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e06c      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d6a:	4b38      	ldr	r3, [pc, #224]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0ea      	beq.n	8004d4c <HAL_RCC_OscConfig+0x8a0>
 8004d76:	e064      	b.n	8004e42 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d78:	4b34      	ldr	r3, [pc, #208]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a33      	ldr	r2, [pc, #204]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004d7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fd fa96 	bl	80022b4 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d8a:	e00e      	b.n	8004daa <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8c:	f7fd fa92 	bl	80022b4 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d907      	bls.n	8004daa <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e04c      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004daa:	4b28      	ldr	r3, [pc, #160]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1ea      	bne.n	8004d8c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004db6:	4b25      	ldr	r3, [pc, #148]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	4924      	ldr	r1, [pc, #144]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004dbc:	4b25      	ldr	r3, [pc, #148]	@ (8004e54 <HAL_RCC_OscConfig+0x9a8>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	60cb      	str	r3, [r1, #12]
 8004dc2:	e03e      	b.n	8004e42 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e039      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e4c <HAL_RCC_OscConfig+0x9a0>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0203 	and.w	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d12c      	bne.n	8004e3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dee:	3b01      	subs	r3, #1
 8004df0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d123      	bne.n	8004e3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d11b      	bne.n	8004e3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e10:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d113      	bne.n	8004e3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	085b      	lsrs	r3, r3, #1
 8004e22:	3b01      	subs	r3, #1
 8004e24:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d109      	bne.n	8004e3e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e34:	085b      	lsrs	r3, r3, #1
 8004e36:	3b01      	subs	r3, #1
 8004e38:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	019f800c 	.word	0x019f800c
 8004e54:	feeefffc 	.word	0xfeeefffc

08004e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e11c      	b.n	80050aa <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e70:	4b90      	ldr	r3, [pc, #576]	@ (80050b4 <HAL_RCC_ClockConfig+0x25c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d910      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80050b4 <HAL_RCC_ClockConfig+0x25c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 020f 	bic.w	r2, r3, #15
 8004e86:	498b      	ldr	r1, [pc, #556]	@ (80050b4 <HAL_RCC_ClockConfig+0x25c>)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b89      	ldr	r3, [pc, #548]	@ (80050b4 <HAL_RCC_ClockConfig+0x25c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e104      	b.n	80050aa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	4b81      	ldr	r3, [pc, #516]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d908      	bls.n	8004ece <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	497b      	ldr	r1, [pc, #492]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 8085 	beq.w	8004fe6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d11f      	bne.n	8004f24 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee4:	4b74      	ldr	r3, [pc, #464]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0da      	b.n	80050aa <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ef4:	f000 fa24 	bl	8005340 <RCC_GetSysClockFreqFromPLLSource>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4a6f      	ldr	r2, [pc, #444]	@ (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d947      	bls.n	8004f92 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f02:	4b6d      	ldr	r3, [pc, #436]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d141      	bne.n	8004f92 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f16:	4a68      	ldr	r2, [pc, #416]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f1e:	2380      	movs	r3, #128	@ 0x80
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e036      	b.n	8004f92 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d107      	bne.n	8004f3c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f2c:	4b62      	ldr	r3, [pc, #392]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d115      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0b6      	b.n	80050aa <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f44:	4b5c      	ldr	r3, [pc, #368]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d109      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0aa      	b.n	80050aa <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f54:	4b58      	ldr	r3, [pc, #352]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0a2      	b.n	80050aa <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f64:	f000 f8b0 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4a53      	ldr	r2, [pc, #332]	@ (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d90f      	bls.n	8004f92 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f72:	4b51      	ldr	r3, [pc, #324]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f86:	4a4c      	ldr	r2, [pc, #304]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f8e:	2380      	movs	r3, #128	@ 0x80
 8004f90:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f92:	4b49      	ldr	r3, [pc, #292]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f023 0203 	bic.w	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4946      	ldr	r1, [pc, #280]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa4:	f7fd f986 	bl	80022b4 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	e013      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fac:	f7fd f982 	bl	80022b4 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d90a      	bls.n	8004fd4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 020c 	and.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e06a      	b.n	80050aa <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd4:	4b38      	ldr	r3, [pc, #224]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 020c 	and.w	r2, r3, #12
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d1e2      	bne.n	8004fac <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b80      	cmp	r3, #128	@ 0x80
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fec:	4b32      	ldr	r3, [pc, #200]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	4a31      	ldr	r2, [pc, #196]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004ff2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ff6:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d010      	beq.n	8005026 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	4b2b      	ldr	r3, [pc, #172]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005010:	429a      	cmp	r2, r3
 8005012:	d208      	bcs.n	8005026 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005014:	4b28      	ldr	r3, [pc, #160]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	4925      	ldr	r1, [pc, #148]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005026:	4b23      	ldr	r3, [pc, #140]	@ (80050b4 <HAL_RCC_ClockConfig+0x25c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d210      	bcs.n	8005056 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005034:	4b1f      	ldr	r3, [pc, #124]	@ (80050b4 <HAL_RCC_ClockConfig+0x25c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 020f 	bic.w	r2, r3, #15
 800503c:	491d      	ldr	r1, [pc, #116]	@ (80050b4 <HAL_RCC_ClockConfig+0x25c>)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005044:	4b1b      	ldr	r3, [pc, #108]	@ (80050b4 <HAL_RCC_ClockConfig+0x25c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d001      	beq.n	8005056 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e029      	b.n	80050aa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005062:	4b15      	ldr	r3, [pc, #84]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	4912      	ldr	r1, [pc, #72]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8005070:	4313      	orrs	r3, r2
 8005072:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005080:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	490a      	ldr	r1, [pc, #40]	@ (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8005090:	4313      	orrs	r3, r2
 8005092:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005094:	f000 f8b4 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 8005098:	4603      	mov	r3, r0
 800509a:	4a09      	ldr	r2, [pc, #36]	@ (80050c0 <HAL_RCC_ClockConfig+0x268>)
 800509c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800509e:	4b09      	ldr	r3, [pc, #36]	@ (80050c4 <HAL_RCC_ClockConfig+0x26c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fd f8b6 	bl	8002214 <HAL_InitTick>
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40022000 	.word	0x40022000
 80050b8:	40021000 	.word	0x40021000
 80050bc:	04c4b400 	.word	0x04c4b400
 80050c0:	20000000 	.word	0x20000000
 80050c4:	20000004 	.word	0x20000004

080050c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b089      	sub	sp, #36	@ 0x24
 80050cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	2300      	movs	r3, #0
 80050d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050d6:	4b47      	ldr	r3, [pc, #284]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
 80050de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050e0:	4b44      	ldr	r3, [pc, #272]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0x34>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b0c      	cmp	r3, #12
 80050f4:	d121      	bne.n	800513a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d11e      	bne.n	800513a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050fc:	4b3d      	ldr	r3, [pc, #244]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d107      	bne.n	8005118 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005108:	4b3a      	ldr	r3, [pc, #232]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800510a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	e005      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005118:	4b36      	ldr	r3, [pc, #216]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005124:	4a34      	ldr	r2, [pc, #208]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0x130>)
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10d      	bne.n	8005150 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d102      	bne.n	8005146 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005140:	4b2e      	ldr	r3, [pc, #184]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x134>)
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	e004      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d101      	bne.n	8005150 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800514c:	4b2b      	ldr	r3, [pc, #172]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x134>)
 800514e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b0c      	cmp	r3, #12
 8005154:	d146      	bne.n	80051e4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005156:	4b27      	ldr	r3, [pc, #156]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005160:	4b24      	ldr	r3, [pc, #144]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	3301      	adds	r3, #1
 800516c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d003      	beq.n	800517c <HAL_RCC_GetSysClockFreq+0xb4>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d00d      	beq.n	8005196 <HAL_RCC_GetSysClockFreq+0xce>
 800517a:	e019      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800517c:	4a1f      	ldr	r2, [pc, #124]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x134>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	4a1b      	ldr	r2, [pc, #108]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005186:	68d2      	ldr	r2, [r2, #12]
 8005188:	0a12      	lsrs	r2, r2, #8
 800518a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	617b      	str	r3, [r7, #20]
        break;
 8005194:	e019      	b.n	80051ca <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005196:	4a19      	ldr	r2, [pc, #100]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x134>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	4a15      	ldr	r2, [pc, #84]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80051a0:	68d2      	ldr	r2, [r2, #12]
 80051a2:	0a12      	lsrs	r2, r2, #8
 80051a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]
        break;
 80051ae:	e00c      	b.n	80051ca <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	4a0e      	ldr	r2, [pc, #56]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80051ba:	68d2      	ldr	r2, [r2, #12]
 80051bc:	0a12      	lsrs	r2, r2, #8
 80051be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
 80051c6:	617b      	str	r3, [r7, #20]
        break;
 80051c8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80051ca:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	0e5b      	lsrs	r3, r3, #25
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	3301      	adds	r3, #1
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051e4:	69bb      	ldr	r3, [r7, #24]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3724      	adds	r7, #36	@ 0x24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40021000 	.word	0x40021000
 80051f8:	0800d820 	.word	0x0800d820
 80051fc:	00f42400 	.word	0x00f42400

08005200 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005204:	f7ff ff60 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <HAL_RCC_GetHCLKFreq+0x20>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	091b      	lsrs	r3, r3, #4
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	4903      	ldr	r1, [pc, #12]	@ (8005224 <HAL_RCC_GetHCLKFreq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000
 8005224:	0800d808 	.word	0x0800d808

08005228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800522c:	f7ff ffe8 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 8005230:	4602      	mov	r2, r0
 8005232:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	4903      	ldr	r1, [pc, #12]	@ (800524c <HAL_RCC_GetPCLK1Freq+0x24>)
 800523e:	5ccb      	ldrb	r3, [r1, r3]
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40021000 	.word	0x40021000
 800524c:	0800d818 	.word	0x0800d818

08005250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005254:	f7ff ffd4 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 8005258:	4602      	mov	r2, r0
 800525a:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	0adb      	lsrs	r3, r3, #11
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	4903      	ldr	r1, [pc, #12]	@ (8005274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005266:	5ccb      	ldrb	r3, [r1, r3]
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40021000 	.word	0x40021000
 8005274:	0800d818 	.word	0x0800d818

08005278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005280:	2300      	movs	r3, #0
 8005282:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005284:	4b2c      	ldr	r3, [pc, #176]	@ (8005338 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005290:	f7ff f81e 	bl	80042d0 <HAL_PWREx_GetVoltageRange>
 8005294:	6138      	str	r0, [r7, #16]
 8005296:	e014      	b.n	80052c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005298:	4b27      	ldr	r3, [pc, #156]	@ (8005338 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529c:	4a26      	ldr	r2, [pc, #152]	@ (8005338 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a4:	4b24      	ldr	r3, [pc, #144]	@ (8005338 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80052a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052b0:	f7ff f80e 	bl	80042d0 <HAL_PWREx_GetVoltageRange>
 80052b4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052b6:	4b20      	ldr	r3, [pc, #128]	@ (8005338 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005338 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80052bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ce:	d10b      	bne.n	80052e8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b80      	cmp	r3, #128	@ 0x80
 80052d4:	d919      	bls.n	800530a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80052da:	d902      	bls.n	80052e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052dc:	2302      	movs	r3, #2
 80052de:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80052e0:	e013      	b.n	800530a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052e2:	2301      	movs	r3, #1
 80052e4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80052e6:	e010      	b.n	800530a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b80      	cmp	r3, #128	@ 0x80
 80052ec:	d902      	bls.n	80052f4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052ee:	2303      	movs	r3, #3
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	e00a      	b.n	800530a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b80      	cmp	r3, #128	@ 0x80
 80052f8:	d102      	bne.n	8005300 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052fa:	2302      	movs	r3, #2
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	e004      	b.n	800530a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b70      	cmp	r3, #112	@ 0x70
 8005304:	d101      	bne.n	800530a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005306:	2301      	movs	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800530a:	4b0c      	ldr	r3, [pc, #48]	@ (800533c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f023 020f 	bic.w	r2, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	@ (800533c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800531a:	4b08      	ldr	r3, [pc, #32]	@ (800533c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	40022000 	.word	0x40022000

08005340 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005346:	4b31      	ldr	r3, [pc, #196]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005350:	4b2e      	ldr	r3, [pc, #184]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	3301      	adds	r3, #1
 800535c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d015      	beq.n	8005390 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b03      	cmp	r3, #3
 8005368:	d839      	bhi.n	80053de <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d01c      	beq.n	80053aa <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d133      	bne.n	80053de <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005376:	4a26      	ldr	r2, [pc, #152]	@ (8005410 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	fbb2 f3f3 	udiv	r3, r2, r3
 800537e:	4a23      	ldr	r2, [pc, #140]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005380:	68d2      	ldr	r2, [r2, #12]
 8005382:	0a12      	lsrs	r2, r2, #8
 8005384:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005388:	fb02 f303 	mul.w	r3, r2, r3
 800538c:	613b      	str	r3, [r7, #16]
      break;
 800538e:	e029      	b.n	80053e4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005390:	4a1f      	ldr	r2, [pc, #124]	@ (8005410 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	fbb2 f3f3 	udiv	r3, r2, r3
 8005398:	4a1c      	ldr	r2, [pc, #112]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800539a:	68d2      	ldr	r2, [r2, #12]
 800539c:	0a12      	lsrs	r2, r2, #8
 800539e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	613b      	str	r3, [r7, #16]
      break;
 80053a8:	e01c      	b.n	80053e4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053aa:	4b18      	ldr	r3, [pc, #96]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053b6:	4b15      	ldr	r3, [pc, #84]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80053b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053bc:	0a1b      	lsrs	r3, r3, #8
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	e005      	b.n	80053d2 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053c6:	4b11      	ldr	r3, [pc, #68]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	091b      	lsrs	r3, r3, #4
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80053d2:	4a10      	ldr	r2, [pc, #64]	@ (8005414 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053da:	613b      	str	r3, [r7, #16]
        break;
 80053dc:	e002      	b.n	80053e4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
      break;
 80053e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80053e4:	4b09      	ldr	r3, [pc, #36]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	0e5b      	lsrs	r3, r3, #25
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	3301      	adds	r3, #1
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80053fe:	683b      	ldr	r3, [r7, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	40021000 	.word	0x40021000
 8005410:	00f42400 	.word	0x00f42400
 8005414:	0800d820 	.word	0x0800d820

08005418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005420:	2300      	movs	r3, #0
 8005422:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005424:	2300      	movs	r3, #0
 8005426:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005430:	2b00      	cmp	r3, #0
 8005432:	d040      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005438:	2b80      	cmp	r3, #128	@ 0x80
 800543a:	d02a      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800543c:	2b80      	cmp	r3, #128	@ 0x80
 800543e:	d825      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005440:	2b60      	cmp	r3, #96	@ 0x60
 8005442:	d026      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005444:	2b60      	cmp	r3, #96	@ 0x60
 8005446:	d821      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005448:	2b40      	cmp	r3, #64	@ 0x40
 800544a:	d006      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800544c:	2b40      	cmp	r3, #64	@ 0x40
 800544e:	d81d      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d010      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005458:	e018      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800545a:	4b8f      	ldr	r3, [pc, #572]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	4a8e      	ldr	r2, [pc, #568]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005464:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005466:	e015      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	2100      	movs	r1, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fb56 	bl	8005b20 <RCCEx_PLLSAI1_Config>
 8005474:	4603      	mov	r3, r0
 8005476:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005478:	e00c      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3320      	adds	r3, #32
 800547e:	2100      	movs	r1, #0
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fc33 	bl	8005cec <RCCEx_PLLSAI2_Config>
 8005486:	4603      	mov	r3, r0
 8005488:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800548a:	e003      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	77fb      	strb	r3, [r7, #31]
        break;
 8005490:	e000      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005494:	7ffb      	ldrb	r3, [r7, #31]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800549a:	4b7f      	ldr	r3, [pc, #508]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800549c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054a0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a8:	497b      	ldr	r1, [pc, #492]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80054b0:	e001      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b2:	7ffb      	ldrb	r3, [r7, #31]
 80054b4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d047      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ca:	d030      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d0:	d82a      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80054d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054d6:	d02a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80054d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054dc:	d824      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80054de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e2:	d008      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80054e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e8:	d81e      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054f2:	d010      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80054f4:	e018      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054f6:	4b68      	ldr	r3, [pc, #416]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	4a67      	ldr	r2, [pc, #412]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005500:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005502:	e015      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fb08 	bl	8005b20 <RCCEx_PLLSAI1_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005514:	e00c      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3320      	adds	r3, #32
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fbe5 	bl	8005cec <RCCEx_PLLSAI2_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005526:	e003      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	77fb      	strb	r3, [r7, #31]
        break;
 800552c:	e000      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800552e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005530:	7ffb      	ldrb	r3, [r7, #31]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10b      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005536:	4b58      	ldr	r3, [pc, #352]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005538:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800553c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005544:	4954      	ldr	r1, [pc, #336]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800554c:	e001      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	7ffb      	ldrb	r3, [r7, #31]
 8005550:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80ab 	beq.w	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005560:	2300      	movs	r3, #0
 8005562:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005564:	4b4c      	ldr	r3, [pc, #304]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10d      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005570:	4b49      	ldr	r3, [pc, #292]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005574:	4a48      	ldr	r2, [pc, #288]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800557a:	6593      	str	r3, [r2, #88]	@ 0x58
 800557c:	4b46      	ldr	r3, [pc, #280]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800557e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005588:	2301      	movs	r3, #1
 800558a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800558c:	4b43      	ldr	r3, [pc, #268]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a42      	ldr	r2, [pc, #264]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005596:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005598:	f7fc fe8c 	bl	80022b4 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800559e:	e00f      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a0:	f7fc fe88 	bl	80022b4 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d908      	bls.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ae:	4b3b      	ldr	r3, [pc, #236]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80055be:	e006      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055c0:	4b36      	ldr	r3, [pc, #216]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0e9      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80055cc:	e000      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80055ce:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80055d0:	7ffb      	ldrb	r3, [r7, #31]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d164      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055d6:	4b30      	ldr	r3, [pc, #192]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01f      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d019      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055f4:	4b28      	ldr	r3, [pc, #160]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055fe:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005600:	4b25      	ldr	r3, [pc, #148]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005606:	4a24      	ldr	r2, [pc, #144]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800560c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005610:	4b21      	ldr	r3, [pc, #132]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005616:	4a20      	ldr	r2, [pc, #128]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800561c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005620:	4a1d      	ldr	r2, [pc, #116]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01f      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005632:	f7fc fe3f 	bl	80022b4 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005638:	e012      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800563a:	f7fc fe3b 	bl	80022b4 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005648:	4293      	cmp	r3, r2
 800564a:	d909      	bls.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800564c:	4b12      	ldr	r3, [pc, #72]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800565e:	e007      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005660:	4b0d      	ldr	r3, [pc, #52]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0e5      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800566e:	e000      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005670:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005672:	7ffb      	ldrb	r3, [r7, #31]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10c      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005678:	4b07      	ldr	r3, [pc, #28]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005688:	4903      	ldr	r1, [pc, #12]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005690:	e008      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005692:	7ffb      	ldrb	r3, [r7, #31]
 8005694:	77bb      	strb	r3, [r7, #30]
 8005696:	e005      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005698:	40021000 	.word	0x40021000
 800569c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a0:	7ffb      	ldrb	r3, [r7, #31]
 80056a2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d105      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056aa:	4b9c      	ldr	r3, [pc, #624]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ae:	4a9b      	ldr	r2, [pc, #620]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056c2:	4b96      	ldr	r3, [pc, #600]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c8:	f023 0203 	bic.w	r2, r3, #3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d0:	4992      	ldr	r1, [pc, #584]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056e4:	4b8d      	ldr	r3, [pc, #564]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ea:	f023 020c 	bic.w	r2, r3, #12
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	498a      	ldr	r1, [pc, #552]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005706:	4b85      	ldr	r3, [pc, #532]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005714:	4981      	ldr	r1, [pc, #516]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005728:	4b7c      	ldr	r3, [pc, #496]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	4979      	ldr	r1, [pc, #484]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800574a:	4b74      	ldr	r3, [pc, #464]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800574c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005750:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005758:	4970      	ldr	r1, [pc, #448]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800576c:	4b6b      	ldr	r3, [pc, #428]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005772:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800577a:	4968      	ldr	r1, [pc, #416]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800578e:	4b63      	ldr	r3, [pc, #396]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005794:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579c:	495f      	ldr	r1, [pc, #380]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057b0:	4b5a      	ldr	r3, [pc, #360]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057be:	4957      	ldr	r1, [pc, #348]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80057d2:	4b52      	ldr	r3, [pc, #328]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e0:	494e      	ldr	r1, [pc, #312]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d031      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057fc:	d00e      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x404>
 80057fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005802:	d814      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d015      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800580c:	d10f      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800580e:	4b43      	ldr	r3, [pc, #268]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	4a42      	ldr	r2, [pc, #264]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005814:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005818:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800581a:	e00c      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3304      	adds	r3, #4
 8005820:	2100      	movs	r1, #0
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f97c 	bl	8005b20 <RCCEx_PLLSAI1_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800582c:	e003      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	77fb      	strb	r3, [r7, #31]
        break;
 8005832:	e000      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005836:	7ffb      	ldrb	r3, [r7, #31]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10b      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800583c:	4b37      	ldr	r3, [pc, #220]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005842:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800584a:	4934      	ldr	r1, [pc, #208]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005852:	e001      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005854:	7ffb      	ldrb	r3, [r7, #31]
 8005856:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005864:	4b2d      	ldr	r3, [pc, #180]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005872:	492a      	ldr	r1, [pc, #168]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005886:	4b25      	ldr	r3, [pc, #148]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005894:	4921      	ldr	r1, [pc, #132]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058a8:	4b1c      	ldr	r3, [pc, #112]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b6:	4919      	ldr	r1, [pc, #100]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058ca:	4b14      	ldr	r3, [pc, #80]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d0:	f023 0203 	bic.w	r2, r3, #3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d8:	4910      	ldr	r1, [pc, #64]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d02b      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ec:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058fa:	4908      	ldr	r1, [pc, #32]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800590a:	d109      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590c:	4b03      	ldr	r3, [pc, #12]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a02      	ldr	r2, [pc, #8]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005916:	60d3      	str	r3, [r2, #12]
 8005918:	e014      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800591a:	bf00      	nop
 800591c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005924:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005928:	d10c      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	2101      	movs	r1, #1
 8005930:	4618      	mov	r0, r3
 8005932:	f000 f8f5 	bl	8005b20 <RCCEx_PLLSAI1_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800593a:	7ffb      	ldrb	r3, [r7, #31]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005940:	7ffb      	ldrb	r3, [r7, #31]
 8005942:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d04a      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005954:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005958:	d108      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x554>
 800595a:	4b70      	ldr	r3, [pc, #448]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800595c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005960:	4a6e      	ldr	r2, [pc, #440]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005966:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800596a:	e012      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800596c:	4b6b      	ldr	r3, [pc, #428]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005972:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800597a:	4968      	ldr	r1, [pc, #416]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005982:	4b66      	ldr	r3, [pc, #408]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005984:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005988:	4a64      	ldr	r2, [pc, #400]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800598a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800598e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005996:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800599a:	d10d      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3304      	adds	r3, #4
 80059a0:	2101      	movs	r1, #1
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f8bc 	bl	8005b20 <RCCEx_PLLSAI1_Config>
 80059a8:	4603      	mov	r3, r0
 80059aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80059ac:	7ffb      	ldrb	r3, [r7, #31]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d019      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80059b2:	7ffb      	ldrb	r3, [r7, #31]
 80059b4:	77bb      	strb	r3, [r7, #30]
 80059b6:	e016      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059c0:	d106      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c2:	4b56      	ldr	r3, [pc, #344]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	4a55      	ldr	r2, [pc, #340]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059cc:	60d3      	str	r3, [r2, #12]
 80059ce:	e00a      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059d8:	d105      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059da:	4b50      	ldr	r3, [pc, #320]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	4a4f      	ldr	r2, [pc, #316]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d028      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059f2:	4b4a      	ldr	r3, [pc, #296]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a00:	4946      	ldr	r1, [pc, #280]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a10:	d106      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a12:	4b42      	ldr	r3, [pc, #264]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4a41      	ldr	r2, [pc, #260]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a1c:	60d3      	str	r3, [r2, #12]
 8005a1e:	e011      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a28:	d10c      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	2101      	movs	r1, #1
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 f875 	bl	8005b20 <RCCEx_PLLSAI1_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a3a:	7ffb      	ldrb	r3, [r7, #31]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005a40:	7ffb      	ldrb	r3, [r7, #31]
 8005a42:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01e      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a50:	4b32      	ldr	r3, [pc, #200]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a60:	492e      	ldr	r1, [pc, #184]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a72:	d10c      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	2102      	movs	r1, #2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f850 	bl	8005b20 <RCCEx_PLLSAI1_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a84:	7ffb      	ldrb	r3, [r7, #31]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005a8a:	7ffb      	ldrb	r3, [r7, #31]
 8005a8c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a9a:	4b20      	ldr	r3, [pc, #128]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aa0:	f023 0204 	bic.w	r2, r3, #4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aaa:	491c      	ldr	r1, [pc, #112]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005abe:	4b17      	ldr	r3, [pc, #92]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ac0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ac4:	f023 0218 	bic.w	r2, r3, #24
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ace:	4913      	ldr	r1, [pc, #76]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d017      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ae8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005af2:	490a      	ldr	r1, [pc, #40]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b04:	d105      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b06:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	4a04      	ldr	r2, [pc, #16]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005b0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b10:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005b12:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40021000 	.word	0x40021000

08005b20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d018      	beq.n	8005b68 <RCCEx_PLLSAI1_Config+0x48>
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d81f      	bhi.n	8005b7a <RCCEx_PLLSAI1_Config+0x5a>
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d002      	beq.n	8005b44 <RCCEx_PLLSAI1_Config+0x24>
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d009      	beq.n	8005b56 <RCCEx_PLLSAI1_Config+0x36>
 8005b42:	e01a      	b.n	8005b7a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b44:	4b65      	ldr	r3, [pc, #404]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d117      	bne.n	8005b80 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b54:	e014      	b.n	8005b80 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b56:	4b61      	ldr	r3, [pc, #388]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d110      	bne.n	8005b84 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b66:	e00d      	b.n	8005b84 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005b68:	4b5c      	ldr	r3, [pc, #368]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d109      	bne.n	8005b88 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b78:	e006      	b.n	8005b88 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b7e:	e004      	b.n	8005b8a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005b80:	bf00      	nop
 8005b82:	e002      	b.n	8005b8a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005b84:	bf00      	nop
 8005b86:	e000      	b.n	8005b8a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005b88:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f040 809f 	bne.w	8005cd0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b92:	4b52      	ldr	r3, [pc, #328]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a51      	ldr	r2, [pc, #324]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9e:	f7fc fb89 	bl	80022b4 <HAL_GetTick>
 8005ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ba4:	e00f      	b.n	8005bc6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ba6:	f7fc fb85 	bl	80022b4 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d908      	bls.n	8005bc6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bb4:	4b49      	ldr	r3, [pc, #292]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bc4:	e006      	b.n	8005bd4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bc6:	4b45      	ldr	r3, [pc, #276]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e9      	bne.n	8005ba6 <RCCEx_PLLSAI1_Config+0x86>
 8005bd2:	e000      	b.n	8005bd6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005bd4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d179      	bne.n	8005cd0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d116      	bne.n	8005c10 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005be2:	4b3e      	ldr	r3, [pc, #248]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce0 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6892      	ldr	r2, [r2, #8]
 8005bee:	0211      	lsls	r1, r2, #8
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	68d2      	ldr	r2, [r2, #12]
 8005bf4:	06d2      	lsls	r2, r2, #27
 8005bf6:	4311      	orrs	r1, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6852      	ldr	r2, [r2, #4]
 8005bfc:	3a01      	subs	r2, #1
 8005bfe:	0112      	lsls	r2, r2, #4
 8005c00:	4311      	orrs	r1, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	4934      	ldr	r1, [pc, #208]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	610b      	str	r3, [r1, #16]
 8005c0e:	e033      	b.n	8005c78 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d118      	bne.n	8005c48 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c16:	4b31      	ldr	r3, [pc, #196]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	4b32      	ldr	r3, [pc, #200]	@ (8005ce4 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6892      	ldr	r2, [r2, #8]
 8005c22:	0211      	lsls	r1, r2, #8
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6912      	ldr	r2, [r2, #16]
 8005c28:	0852      	lsrs	r2, r2, #1
 8005c2a:	3a01      	subs	r2, #1
 8005c2c:	0552      	lsls	r2, r2, #21
 8005c2e:	4311      	orrs	r1, r2
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6852      	ldr	r2, [r2, #4]
 8005c34:	3a01      	subs	r2, #1
 8005c36:	0112      	lsls	r2, r2, #4
 8005c38:	4311      	orrs	r1, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	4926      	ldr	r1, [pc, #152]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	610b      	str	r3, [r1, #16]
 8005c46:	e017      	b.n	8005c78 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c48:	4b24      	ldr	r3, [pc, #144]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	4b26      	ldr	r3, [pc, #152]	@ (8005ce8 <RCCEx_PLLSAI1_Config+0x1c8>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6892      	ldr	r2, [r2, #8]
 8005c54:	0211      	lsls	r1, r2, #8
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6952      	ldr	r2, [r2, #20]
 8005c5a:	0852      	lsrs	r2, r2, #1
 8005c5c:	3a01      	subs	r2, #1
 8005c5e:	0652      	lsls	r2, r2, #25
 8005c60:	4311      	orrs	r1, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6852      	ldr	r2, [r2, #4]
 8005c66:	3a01      	subs	r2, #1
 8005c68:	0112      	lsls	r2, r2, #4
 8005c6a:	4311      	orrs	r1, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	491a      	ldr	r1, [pc, #104]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c78:	4b18      	ldr	r3, [pc, #96]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a17      	ldr	r2, [pc, #92]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c84:	f7fc fb16 	bl	80022b4 <HAL_GetTick>
 8005c88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c8a:	e00f      	b.n	8005cac <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c8c:	f7fc fb12 	bl	80022b4 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d908      	bls.n	8005cac <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c9a:	4b10      	ldr	r3, [pc, #64]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005caa:	e006      	b.n	8005cba <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cac:	4b0b      	ldr	r3, [pc, #44]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0e9      	beq.n	8005c8c <RCCEx_PLLSAI1_Config+0x16c>
 8005cb8:	e000      	b.n	8005cbc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005cba:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005cc2:	4b06      	ldr	r3, [pc, #24]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005cc4:	691a      	ldr	r2, [r3, #16]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	4904      	ldr	r1, [pc, #16]	@ (8005cdc <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	07ff800c 	.word	0x07ff800c
 8005ce4:	ff9f800c 	.word	0xff9f800c
 8005ce8:	f9ff800c 	.word	0xf9ff800c

08005cec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d018      	beq.n	8005d34 <RCCEx_PLLSAI2_Config+0x48>
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d81f      	bhi.n	8005d46 <RCCEx_PLLSAI2_Config+0x5a>
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d002      	beq.n	8005d10 <RCCEx_PLLSAI2_Config+0x24>
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d009      	beq.n	8005d22 <RCCEx_PLLSAI2_Config+0x36>
 8005d0e:	e01a      	b.n	8005d46 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d10:	4b4a      	ldr	r3, [pc, #296]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d117      	bne.n	8005d4c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d20:	e014      	b.n	8005d4c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d22:	4b46      	ldr	r3, [pc, #280]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d110      	bne.n	8005d50 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d32:	e00d      	b.n	8005d50 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005d34:	4b41      	ldr	r3, [pc, #260]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d44:	e006      	b.n	8005d54 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4a:	e004      	b.n	8005d56 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005d4c:	bf00      	nop
 8005d4e:	e002      	b.n	8005d56 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005d50:	bf00      	nop
 8005d52:	e000      	b.n	8005d56 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005d54:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d169      	bne.n	8005e30 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d5c:	4b37      	ldr	r3, [pc, #220]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a36      	ldr	r2, [pc, #216]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d68:	f7fc faa4 	bl	80022b4 <HAL_GetTick>
 8005d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d6e:	e00f      	b.n	8005d90 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d70:	f7fc faa0 	bl	80022b4 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d908      	bls.n	8005d90 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d8e:	e006      	b.n	8005d9e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d90:	4b2a      	ldr	r3, [pc, #168]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e9      	bne.n	8005d70 <RCCEx_PLLSAI2_Config+0x84>
 8005d9c:	e000      	b.n	8005da0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005d9e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d144      	bne.n	8005e30 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d115      	bne.n	8005dd8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dac:	4b23      	ldr	r3, [pc, #140]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005dae:	695a      	ldr	r2, [r3, #20]
 8005db0:	4b23      	ldr	r3, [pc, #140]	@ (8005e40 <RCCEx_PLLSAI2_Config+0x154>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6892      	ldr	r2, [r2, #8]
 8005db8:	0211      	lsls	r1, r2, #8
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	68d2      	ldr	r2, [r2, #12]
 8005dbe:	06d2      	lsls	r2, r2, #27
 8005dc0:	4311      	orrs	r1, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6852      	ldr	r2, [r2, #4]
 8005dc6:	3a01      	subs	r2, #1
 8005dc8:	0112      	lsls	r2, r2, #4
 8005dca:	4311      	orrs	r1, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	491a      	ldr	r1, [pc, #104]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005dd8:	4b18      	ldr	r3, [pc, #96]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a17      	ldr	r2, [pc, #92]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005de2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de4:	f7fc fa66 	bl	80022b4 <HAL_GetTick>
 8005de8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dea:	e00f      	b.n	8005e0c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dec:	f7fc fa62 	bl	80022b4 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d908      	bls.n	8005e0c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dfa:	4b10      	ldr	r3, [pc, #64]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005e0a:	e006      	b.n	8005e1a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0e9      	beq.n	8005dec <RCCEx_PLLSAI2_Config+0x100>
 8005e18:	e000      	b.n	8005e1c <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005e1a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005e22:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005e24:	695a      	ldr	r2, [r3, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	4904      	ldr	r1, [pc, #16]	@ (8005e3c <RCCEx_PLLSAI2_Config+0x150>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	07ff800c 	.word	0x07ff800c

08005e44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d066      	beq.n	8005f24 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fb ff80 	bl	8001d70 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	d045      	beq.n	8005f12 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e86:	4b2a      	ldr	r3, [pc, #168]	@ (8005f30 <HAL_RTC_Init+0xec>)
 8005e88:	22ca      	movs	r2, #202	@ 0xca
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e8c:	4b28      	ldr	r3, [pc, #160]	@ (8005f30 <HAL_RTC_Init+0xec>)
 8005e8e:	2253      	movs	r2, #83	@ 0x53
 8005e90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f872 	bl	8005f7c <RTC_EnterInitMode>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d121      	bne.n	8005ee6 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005ea2:	4b23      	ldr	r3, [pc, #140]	@ (8005f30 <HAL_RTC_Init+0xec>)
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	4a22      	ldr	r2, [pc, #136]	@ (8005f30 <HAL_RTC_Init+0xec>)
 8005ea8:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005f30 <HAL_RTC_Init+0xec>)
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6859      	ldr	r1, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	4319      	orrs	r1, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	491a      	ldr	r1, [pc, #104]	@ (8005f30 <HAL_RTC_Init+0xec>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	4916      	ldr	r1, [pc, #88]	@ (8005f30 <HAL_RTC_Init+0xec>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f881 	bl	8005fe4 <RTC_ExitInitMode>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10e      	bne.n	8005f0a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8005eec:	4b10      	ldr	r3, [pc, #64]	@ (8005f30 <HAL_RTC_Init+0xec>)
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a19      	ldr	r1, [r3, #32]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	4319      	orrs	r1, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	430b      	orrs	r3, r1
 8005f04:	490a      	ldr	r1, [pc, #40]	@ (8005f30 <HAL_RTC_Init+0xec>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f0a:	4b09      	ldr	r3, [pc, #36]	@ (8005f30 <HAL_RTC_Init+0xec>)
 8005f0c:	22ff      	movs	r2, #255	@ 0xff
 8005f0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f10:	e001      	b.n	8005f16 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d103      	bne.n	8005f24 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40002800 	.word	0x40002800

08005f34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f74 <HAL_RTC_WaitForSynchro+0x40>)
 8005f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005f78 <HAL_RTC_WaitForSynchro+0x44>)
 8005f40:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005f42:	f7fc f9b7 	bl	80022b4 <HAL_GetTick>
 8005f46:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005f48:	e009      	b.n	8005f5e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f4a:	f7fc f9b3 	bl	80022b4 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f58:	d901      	bls.n	8005f5e <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e006      	b.n	8005f6c <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005f5e:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <HAL_RTC_WaitForSynchro+0x40>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0ef      	beq.n	8005f4a <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40002800 	.word	0x40002800
 8005f78:	0001005c 	.word	0x0001005c

08005f7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005f88:	4b15      	ldr	r3, [pc, #84]	@ (8005fe0 <RTC_EnterInitMode+0x64>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d120      	bne.n	8005fd6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005f94:	4b12      	ldr	r3, [pc, #72]	@ (8005fe0 <RTC_EnterInitMode+0x64>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4a11      	ldr	r2, [pc, #68]	@ (8005fe0 <RTC_EnterInitMode+0x64>)
 8005f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f9e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005fa0:	f7fc f988 	bl	80022b4 <HAL_GetTick>
 8005fa4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005fa6:	e00d      	b.n	8005fc4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005fa8:	f7fc f984 	bl	80022b4 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fb6:	d905      	bls.n	8005fc4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005fc4:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <RTC_EnterInitMode+0x64>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <RTC_EnterInitMode+0x5a>
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d1e8      	bne.n	8005fa8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40002800 	.word	0x40002800

08005fe4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800605c <RTC_ExitInitMode+0x78>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4a19      	ldr	r2, [pc, #100]	@ (800605c <RTC_ExitInitMode+0x78>)
 8005ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ffa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005ffc:	4b17      	ldr	r3, [pc, #92]	@ (800605c <RTC_ExitInitMode+0x78>)
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10c      	bne.n	8006022 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff ff93 	bl	8005f34 <HAL_RTC_WaitForSynchro>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01e      	beq.n	8006052 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2203      	movs	r2, #3
 8006018:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	73fb      	strb	r3, [r7, #15]
 8006020:	e017      	b.n	8006052 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006022:	4b0e      	ldr	r3, [pc, #56]	@ (800605c <RTC_ExitInitMode+0x78>)
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	4a0d      	ldr	r2, [pc, #52]	@ (800605c <RTC_ExitInitMode+0x78>)
 8006028:	f023 0320 	bic.w	r3, r3, #32
 800602c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff ff80 	bl	8005f34 <HAL_RTC_WaitForSynchro>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2203      	movs	r2, #3
 800603e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006046:	4b05      	ldr	r3, [pc, #20]	@ (800605c <RTC_ExitInitMode+0x78>)
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	4a04      	ldr	r2, [pc, #16]	@ (800605c <RTC_ExitInitMode+0x78>)
 800604c:	f043 0320 	orr.w	r3, r3, #32
 8006050:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40002800 	.word	0x40002800

08006060 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8006078:	2302      	movs	r3, #2
 800607a:	e06f      	b.n	800615c <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800608c:	4b35      	ldr	r3, [pc, #212]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800608e:	22ca      	movs	r2, #202	@ 0xca
 8006090:	625a      	str	r2, [r3, #36]	@ 0x24
 8006092:	4b34      	ldr	r3, [pc, #208]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006094:	2253      	movs	r2, #83	@ 0x53
 8006096:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8006098:	4b32      	ldr	r3, [pc, #200]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	4a31      	ldr	r2, [pc, #196]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800609e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060a2:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80060a4:	4b2f      	ldr	r3, [pc, #188]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80060a6:	2204      	movs	r2, #4
 80060a8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80060aa:	4b2e      	ldr	r3, [pc, #184]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d11e      	bne.n	80060f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 80060b6:	f7fc f8fd 	bl	80022b4 <HAL_GetTick>
 80060ba:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80060bc:	e014      	b.n	80060e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060be:	f7fc f8f9 	bl	80022b4 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060cc:	d90c      	bls.n	80060e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ce:	4b25      	ldr	r3, [pc, #148]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80060d0:	22ff      	movs	r2, #255	@ 0xff
 80060d2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2203      	movs	r2, #3
 80060d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e039      	b.n	800615c <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80060e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0e4      	beq.n	80060be <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	041a      	lsls	r2, r3, #16
 80060f8:	491a      	ldr	r1, [pc, #104]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8006100:	4b18      	ldr	r3, [pc, #96]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f023 0207 	bic.w	r2, r3, #7
 8006108:	4916      	ldr	r1, [pc, #88]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4313      	orrs	r3, r2
 800610e:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d008      	beq.n	8006128 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8006116:	4b14      	ldr	r3, [pc, #80]	@ (8006168 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8006118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800611c:	4a12      	ldr	r2, [pc, #72]	@ (8006168 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800611e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006122:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8006126:	e007      	b.n	8006138 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006128:	4b0f      	ldr	r3, [pc, #60]	@ (8006168 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800612a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800612e:	4a0e      	ldr	r2, [pc, #56]	@ (8006168 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8006130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006134:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8006138:	4b0a      	ldr	r3, [pc, #40]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	4a09      	ldr	r2, [pc, #36]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800613e:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8006142:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006144:	4b07      	ldr	r3, [pc, #28]	@ (8006164 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006146:	22ff      	movs	r2, #255	@ 0xff
 8006148:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40002800 	.word	0x40002800
 8006168:	4002f400 	.word	0x4002f400

0800616c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800617e:	2302      	movs	r3, #2
 8006180:	e03e      	b.n	8006200 <HAL_RTCEx_DeactivateWakeUpTimer+0x94>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006192:	4b1d      	ldr	r3, [pc, #116]	@ (8006208 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8006194:	22ca      	movs	r2, #202	@ 0xca
 8006196:	625a      	str	r2, [r3, #36]	@ 0x24
 8006198:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 800619a:	2253      	movs	r2, #83	@ 0x53
 800619c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800619e:	4b1a      	ldr	r3, [pc, #104]	@ (8006208 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	4a19      	ldr	r2, [pc, #100]	@ (8006208 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 80061a4:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 80061a8:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 80061aa:	f7fc f883 	bl	80022b4 <HAL_GetTick>
 80061ae:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80061b0:	e014      	b.n	80061dc <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061b2:	f7fc f87f 	bl	80022b4 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061c0:	d90c      	bls.n	80061dc <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c2:	4b11      	ldr	r3, [pc, #68]	@ (8006208 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 80061c4:	22ff      	movs	r2, #255	@ 0xff
 80061c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2203      	movs	r2, #3
 80061cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e011      	b.n	8006200 <HAL_RTCEx_DeactivateWakeUpTimer+0x94>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80061dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006208 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0e4      	beq.n	80061b2 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061e8:	4b07      	ldr	r3, [pc, #28]	@ (8006208 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 80061ea:	22ff      	movs	r2, #255	@ 0xff
 80061ec:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40002800 	.word	0x40002800

0800620c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8006214:	4b09      	ldr	r3, [pc, #36]	@ (800623c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8006216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8006220:	4b06      	ldr	r3, [pc, #24]	@ (800623c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8006222:	2204      	movs	r2, #4
 8006224:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fb f98e 	bl	8001548 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40002800 	.word	0x40002800

08006240 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	490f      	ldr	r1, [pc, #60]	@ (8006290 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006254:	4313      	orrs	r3, r2
 8006256:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	490c      	ldr	r1, [pc, #48]	@ (8006294 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006262:	4313      	orrs	r3, r2
 8006264:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8006266:	4b0b      	ldr	r3, [pc, #44]	@ (8006294 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6919      	ldr	r1, [r3, #16]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	041b      	lsls	r3, r3, #16
 8006278:	430b      	orrs	r3, r1
 800627a:	4906      	ldr	r1, [pc, #24]	@ (8006294 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800627c:	4313      	orrs	r3, r2
 800627e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40002800 	.word	0x40002800
 8006294:	40003400 	.word	0x40003400

08006298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e042      	b.n	8006330 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d106      	bne.n	80062c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7fb fcf1 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2224      	movs	r2, #36	@ 0x24
 80062c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 f81e 	bl	8007324 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fd1b 	bl	8006d24 <UART_SetConfig>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e01b      	b.n	8006330 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 f89d 	bl	8007468 <UART_CheckIdleState>
 800632e:	4603      	mov	r3, r0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	@ 0x28
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	4613      	mov	r3, r2
 8006346:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634e:	2b20      	cmp	r3, #32
 8006350:	d17b      	bne.n	800644a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_UART_Transmit+0x26>
 8006358:	88fb      	ldrh	r3, [r7, #6]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e074      	b.n	800644c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2221      	movs	r2, #33	@ 0x21
 800636e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006372:	f7fb ff9f 	bl	80022b4 <HAL_GetTick>
 8006376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006390:	d108      	bne.n	80063a4 <HAL_UART_Transmit+0x6c>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	e003      	b.n	80063ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063ac:	e030      	b.n	8006410 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	2180      	movs	r1, #128	@ 0x80
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f001 f8ff 	bl	80075bc <UART_WaitOnFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e03d      	b.n	800644c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	3302      	adds	r3, #2
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	e007      	b.n	80063fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1c8      	bne.n	80063ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2200      	movs	r2, #0
 8006424:	2140      	movs	r1, #64	@ 0x40
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f001 f8c8 	bl	80075bc <UART_WaitOnFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e006      	b.n	800644c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	e000      	b.n	800644c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800644a:	2302      	movs	r3, #2
  }
}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08a      	sub	sp, #40	@ 0x28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006468:	2b20      	cmp	r3, #32
 800646a:	d137      	bne.n	80064dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_UART_Receive_IT+0x24>
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e030      	b.n	80064de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a18      	ldr	r2, [pc, #96]	@ (80064e8 <HAL_UART_Receive_IT+0x94>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d01f      	beq.n	80064cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d018      	beq.n	80064cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	613b      	str	r3, [r7, #16]
   return(result);
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	623b      	str	r3, [r7, #32]
 80064ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e6      	bne.n	800649a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	461a      	mov	r2, r3
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f001 f8e0 	bl	8007698 <UART_Start_Receive_IT>
 80064d8:	4603      	mov	r3, r0
 80064da:	e000      	b.n	80064de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064dc:	2302      	movs	r3, #2
  }
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3728      	adds	r7, #40	@ 0x28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	40008000 	.word	0x40008000

080064ec <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b09a      	sub	sp, #104	@ 0x68
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006508:	667b      	str	r3, [r7, #100]	@ 0x64
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006512:	657b      	str	r3, [r7, #84]	@ 0x54
 8006514:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006518:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e6      	bne.n	80064f4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800653c:	f023 0301 	bic.w	r3, r3, #1
 8006540:	663b      	str	r3, [r7, #96]	@ 0x60
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3308      	adds	r3, #8
 8006548:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800654a:	643a      	str	r2, [r7, #64]	@ 0x40
 800654c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006550:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e3      	bne.n	8006526 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d118      	bne.n	8006598 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	61fb      	str	r3, [r7, #28]
   return(result);
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	f023 0310 	bic.w	r3, r3, #16
 800657a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006586:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800658a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800658c:	e841 2300 	strex	r3, r2, [r1]
 8006590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e6      	bne.n	8006566 <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a2:	2b40      	cmp	r3, #64	@ 0x40
 80065a4:	d154      	bne.n	8006650 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065c6:	61ba      	str	r2, [r7, #24]
 80065c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6979      	ldr	r1, [r7, #20]
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	613b      	str	r3, [r7, #16]
   return(result);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d017      	beq.n	8006614 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ea:	4a26      	ldr	r2, [pc, #152]	@ (8006684 <HAL_UART_AbortReceive_IT+0x198>)
 80065ec:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fd fc40 	bl	8003e7a <HAL_DMA_Abort_IT>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d03c      	beq.n	800667a <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800660e:	4610      	mov	r0, r2
 8006610:	4798      	blx	r3
 8006612:	e032      	b.n	800667a <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	220f      	movs	r2, #15
 8006628:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699a      	ldr	r2, [r3, #24]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f042 0208 	orr.w	r2, r2, #8
 8006638:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fb55 	bl	8006cf8 <HAL_UART_AbortReceiveCpltCallback>
 800664e:	e014      	b.n	800667a <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	220f      	movs	r2, #15
 8006664:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fb3f 	bl	8006cf8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3768      	adds	r7, #104	@ 0x68
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	080079d5 	.word	0x080079d5

08006688 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b0ba      	sub	sp, #232	@ 0xe8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80066b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80066b6:	4013      	ands	r3, r2
 80066b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80066bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11b      	bne.n	80066fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d009      	beq.n	80066fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 82e3 	beq.w	8006cb8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
      }
      return;
 80066fa:	e2dd      	b.n	8006cb8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8123 	beq.w	800694c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006706:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800670a:	4b8d      	ldr	r3, [pc, #564]	@ (8006940 <HAL_UART_IRQHandler+0x2b8>)
 800670c:	4013      	ands	r3, r2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006712:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006716:	4b8b      	ldr	r3, [pc, #556]	@ (8006944 <HAL_UART_IRQHandler+0x2bc>)
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8116 	beq.w	800694c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d011      	beq.n	8006750 <HAL_UART_IRQHandler+0xc8>
 800672c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2201      	movs	r2, #1
 800673e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006746:	f043 0201 	orr.w	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d011      	beq.n	8006780 <HAL_UART_IRQHandler+0xf8>
 800675c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2202      	movs	r2, #2
 800676e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006776:	f043 0204 	orr.w	r2, r3, #4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d011      	beq.n	80067b0 <HAL_UART_IRQHandler+0x128>
 800678c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2204      	movs	r2, #4
 800679e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a6:	f043 0202 	orr.w	r2, r3, #2
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b4:	f003 0308 	and.w	r3, r3, #8
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d017      	beq.n	80067ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80067cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006940 <HAL_UART_IRQHandler+0x2b8>)
 80067ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2208      	movs	r2, #8
 80067da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e2:	f043 0208 	orr.w	r2, r3, #8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d012      	beq.n	800681e <HAL_UART_IRQHandler+0x196>
 80067f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800680c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006814:	f043 0220 	orr.w	r2, r3, #32
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 8249 	beq.w	8006cbc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d013      	beq.n	800685e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d105      	bne.n	800684e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006864:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006872:	2b40      	cmp	r3, #64	@ 0x40
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800687a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800687e:	2b00      	cmp	r3, #0
 8006880:	d054      	beq.n	800692c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 f82a 	bl	80078dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006892:	2b40      	cmp	r3, #64	@ 0x40
 8006894:	d146      	bne.n	8006924 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1d9      	bne.n	8006896 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d017      	beq.n	800691c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f2:	4a15      	ldr	r2, [pc, #84]	@ (8006948 <HAL_UART_IRQHandler+0x2c0>)
 80068f4:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fd fabc 	bl	8003e7a <HAL_DMA_Abort_IT>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d019      	beq.n	800693c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800690e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006916:	4610      	mov	r0, r2
 8006918:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691a:	e00f      	b.n	800693c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f9e1 	bl	8006ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006922:	e00b      	b.n	800693c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9dd 	bl	8006ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692a:	e007      	b.n	800693c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f9d9 	bl	8006ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800693a:	e1bf      	b.n	8006cbc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693c:	bf00      	nop
    return;
 800693e:	e1bd      	b.n	8006cbc <HAL_UART_IRQHandler+0x634>
 8006940:	10000001 	.word	0x10000001
 8006944:	04000120 	.word	0x04000120
 8006948:	080079a9 	.word	0x080079a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006950:	2b01      	cmp	r3, #1
 8006952:	f040 8153 	bne.w	8006bfc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 814c 	beq.w	8006bfc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8145 	beq.w	8006bfc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2210      	movs	r2, #16
 8006978:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006984:	2b40      	cmp	r3, #64	@ 0x40
 8006986:	f040 80bb 	bne.w	8006b00 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 818f 	beq.w	8006cc0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069ac:	429a      	cmp	r2, r3
 80069ae:	f080 8187 	bcs.w	8006cc0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 8087 	bne.w	8006ade <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80069e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1da      	bne.n	80069d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3308      	adds	r3, #8
 8006a20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3308      	adds	r3, #8
 8006a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e1      	bne.n	8006a1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3308      	adds	r3, #8
 8006a76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e3      	bne.n	8006a56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aac:	f023 0310 	bic.w	r3, r3, #16
 8006ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006abe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ac0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ac4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e4      	bne.n	8006a9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fd f972 	bl	8003dc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f907 	bl	8006d0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006afe:	e0df      	b.n	8006cc0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80d1 	beq.w	8006cc4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006b22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80cc 	beq.w	8006cc4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b50:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e4      	bne.n	8006b2c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3308      	adds	r3, #8
 8006b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	623b      	str	r3, [r7, #32]
   return(result);
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3308      	adds	r3, #8
 8006b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e1      	bne.n	8006b62 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0310 	bic.w	r3, r3, #16
 8006bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	69b9      	ldr	r1, [r7, #24]
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	e841 2300 	strex	r3, r2, [r1]
 8006be0:	617b      	str	r3, [r7, #20]
   return(result);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e4      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f889 	bl	8006d0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bfa:	e063      	b.n	8006cc4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00e      	beq.n	8006c26 <HAL_UART_IRQHandler+0x59e>
 8006c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f001 fc44 	bl	80084ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c24:	e051      	b.n	8006cca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d014      	beq.n	8006c5c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d105      	bne.n	8006c4a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d008      	beq.n	8006c5c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d03a      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
    }
    return;
 8006c5a:	e035      	b.n	8006cc8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d009      	beq.n	8006c7c <HAL_UART_IRQHandler+0x5f4>
 8006c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fed2 	bl	8007a1e <UART_EndTransmit_IT>
    return;
 8006c7a:	e026      	b.n	8006cca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d009      	beq.n	8006c9c <HAL_UART_IRQHandler+0x614>
 8006c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 fc1d 	bl	80084d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c9a:	e016      	b.n	8006cca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d010      	beq.n	8006cca <HAL_UART_IRQHandler+0x642>
 8006ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da0c      	bge.n	8006cca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fc05 	bl	80084c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cb6:	e008      	b.n	8006cca <HAL_UART_IRQHandler+0x642>
      return;
 8006cb8:	bf00      	nop
 8006cba:	e006      	b.n	8006cca <HAL_UART_IRQHandler+0x642>
    return;
 8006cbc:	bf00      	nop
 8006cbe:	e004      	b.n	8006cca <HAL_UART_IRQHandler+0x642>
      return;
 8006cc0:	bf00      	nop
 8006cc2:	e002      	b.n	8006cca <HAL_UART_IRQHandler+0x642>
      return;
 8006cc4:	bf00      	nop
 8006cc6:	e000      	b.n	8006cca <HAL_UART_IRQHandler+0x642>
    return;
 8006cc8:	bf00      	nop
  }
}
 8006cca:	37e8      	adds	r7, #232	@ 0xe8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d28:	b08c      	sub	sp, #48	@ 0x30
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4baa      	ldr	r3, [pc, #680]	@ (8006ffc <UART_SetConfig+0x2d8>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	6812      	ldr	r2, [r2, #0]
 8006d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a9f      	ldr	r2, [pc, #636]	@ (8007000 <UART_SetConfig+0x2dc>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d004      	beq.n	8006d90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006d9a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dae:	f023 010f 	bic.w	r1, r3, #15
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a90      	ldr	r2, [pc, #576]	@ (8007004 <UART_SetConfig+0x2e0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d125      	bne.n	8006e14 <UART_SetConfig+0xf0>
 8006dc8:	4b8f      	ldr	r3, [pc, #572]	@ (8007008 <UART_SetConfig+0x2e4>)
 8006dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d81a      	bhi.n	8006e0c <UART_SetConfig+0xe8>
 8006dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ddc <UART_SetConfig+0xb8>)
 8006dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006dfd 	.word	0x08006dfd
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df2:	e116      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006df4:	2302      	movs	r3, #2
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dfa:	e112      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006dfc:	2304      	movs	r3, #4
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e02:	e10e      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006e04:	2308      	movs	r3, #8
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0a:	e10a      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e12:	e106      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a7c      	ldr	r2, [pc, #496]	@ (800700c <UART_SetConfig+0x2e8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d138      	bne.n	8006e90 <UART_SetConfig+0x16c>
 8006e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8007008 <UART_SetConfig+0x2e4>)
 8006e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e24:	f003 030c 	and.w	r3, r3, #12
 8006e28:	2b0c      	cmp	r3, #12
 8006e2a:	d82d      	bhi.n	8006e88 <UART_SetConfig+0x164>
 8006e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <UART_SetConfig+0x110>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e69 	.word	0x08006e69
 8006e38:	08006e89 	.word	0x08006e89
 8006e3c:	08006e89 	.word	0x08006e89
 8006e40:	08006e89 	.word	0x08006e89
 8006e44:	08006e79 	.word	0x08006e79
 8006e48:	08006e89 	.word	0x08006e89
 8006e4c:	08006e89 	.word	0x08006e89
 8006e50:	08006e89 	.word	0x08006e89
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08006e89 	.word	0x08006e89
 8006e5c:	08006e89 	.word	0x08006e89
 8006e60:	08006e89 	.word	0x08006e89
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6e:	e0d8      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006e70:	2302      	movs	r3, #2
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e76:	e0d4      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7e:	e0d0      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006e80:	2308      	movs	r3, #8
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e86:	e0cc      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8e:	e0c8      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a5e      	ldr	r2, [pc, #376]	@ (8007010 <UART_SetConfig+0x2ec>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d125      	bne.n	8006ee6 <UART_SetConfig+0x1c2>
 8006e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8007008 <UART_SetConfig+0x2e4>)
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ea4:	2b30      	cmp	r3, #48	@ 0x30
 8006ea6:	d016      	beq.n	8006ed6 <UART_SetConfig+0x1b2>
 8006ea8:	2b30      	cmp	r3, #48	@ 0x30
 8006eaa:	d818      	bhi.n	8006ede <UART_SetConfig+0x1ba>
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d00a      	beq.n	8006ec6 <UART_SetConfig+0x1a2>
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d814      	bhi.n	8006ede <UART_SetConfig+0x1ba>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <UART_SetConfig+0x19a>
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d008      	beq.n	8006ece <UART_SetConfig+0x1aa>
 8006ebc:	e00f      	b.n	8006ede <UART_SetConfig+0x1ba>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec4:	e0ad      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ecc:	e0a9      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006ece:	2304      	movs	r3, #4
 8006ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed4:	e0a5      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006edc:	e0a1      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006ede:	2310      	movs	r3, #16
 8006ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee4:	e09d      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a4a      	ldr	r2, [pc, #296]	@ (8007014 <UART_SetConfig+0x2f0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d125      	bne.n	8006f3c <UART_SetConfig+0x218>
 8006ef0:	4b45      	ldr	r3, [pc, #276]	@ (8007008 <UART_SetConfig+0x2e4>)
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8006efc:	d016      	beq.n	8006f2c <UART_SetConfig+0x208>
 8006efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f00:	d818      	bhi.n	8006f34 <UART_SetConfig+0x210>
 8006f02:	2b80      	cmp	r3, #128	@ 0x80
 8006f04:	d00a      	beq.n	8006f1c <UART_SetConfig+0x1f8>
 8006f06:	2b80      	cmp	r3, #128	@ 0x80
 8006f08:	d814      	bhi.n	8006f34 <UART_SetConfig+0x210>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <UART_SetConfig+0x1f0>
 8006f0e:	2b40      	cmp	r3, #64	@ 0x40
 8006f10:	d008      	beq.n	8006f24 <UART_SetConfig+0x200>
 8006f12:	e00f      	b.n	8006f34 <UART_SetConfig+0x210>
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1a:	e082      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f22:	e07e      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006f24:	2304      	movs	r3, #4
 8006f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2a:	e07a      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006f2c:	2308      	movs	r3, #8
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f32:	e076      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006f34:	2310      	movs	r3, #16
 8006f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f3a:	e072      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a35      	ldr	r2, [pc, #212]	@ (8007018 <UART_SetConfig+0x2f4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d12a      	bne.n	8006f9c <UART_SetConfig+0x278>
 8006f46:	4b30      	ldr	r3, [pc, #192]	@ (8007008 <UART_SetConfig+0x2e4>)
 8006f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f54:	d01a      	beq.n	8006f8c <UART_SetConfig+0x268>
 8006f56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f5a:	d81b      	bhi.n	8006f94 <UART_SetConfig+0x270>
 8006f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f60:	d00c      	beq.n	8006f7c <UART_SetConfig+0x258>
 8006f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f66:	d815      	bhi.n	8006f94 <UART_SetConfig+0x270>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <UART_SetConfig+0x250>
 8006f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f70:	d008      	beq.n	8006f84 <UART_SetConfig+0x260>
 8006f72:	e00f      	b.n	8006f94 <UART_SetConfig+0x270>
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	e052      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e04e      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006f84:	2304      	movs	r3, #4
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e04a      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f92:	e046      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006f94:	2310      	movs	r3, #16
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9a:	e042      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a17      	ldr	r2, [pc, #92]	@ (8007000 <UART_SetConfig+0x2dc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d13a      	bne.n	800701c <UART_SetConfig+0x2f8>
 8006fa6:	4b18      	ldr	r3, [pc, #96]	@ (8007008 <UART_SetConfig+0x2e4>)
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fb4:	d01a      	beq.n	8006fec <UART_SetConfig+0x2c8>
 8006fb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fba:	d81b      	bhi.n	8006ff4 <UART_SetConfig+0x2d0>
 8006fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fc0:	d00c      	beq.n	8006fdc <UART_SetConfig+0x2b8>
 8006fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fc6:	d815      	bhi.n	8006ff4 <UART_SetConfig+0x2d0>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <UART_SetConfig+0x2b0>
 8006fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd0:	d008      	beq.n	8006fe4 <UART_SetConfig+0x2c0>
 8006fd2:	e00f      	b.n	8006ff4 <UART_SetConfig+0x2d0>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fda:	e022      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e01e      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e01a      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006fec:	2308      	movs	r3, #8
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff2:	e016      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffa:	e012      	b.n	8007022 <UART_SetConfig+0x2fe>
 8006ffc:	cfff69f3 	.word	0xcfff69f3
 8007000:	40008000 	.word	0x40008000
 8007004:	40013800 	.word	0x40013800
 8007008:	40021000 	.word	0x40021000
 800700c:	40004400 	.word	0x40004400
 8007010:	40004800 	.word	0x40004800
 8007014:	40004c00 	.word	0x40004c00
 8007018:	40005000 	.word	0x40005000
 800701c:	2310      	movs	r3, #16
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4ab0      	ldr	r2, [pc, #704]	@ (80072e8 <UART_SetConfig+0x5c4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	f040 809b 	bne.w	8007164 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800702e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007032:	2b08      	cmp	r3, #8
 8007034:	d827      	bhi.n	8007086 <UART_SetConfig+0x362>
 8007036:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <UART_SetConfig+0x318>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	08007061 	.word	0x08007061
 8007040:	08007069 	.word	0x08007069
 8007044:	08007071 	.word	0x08007071
 8007048:	08007087 	.word	0x08007087
 800704c:	08007077 	.word	0x08007077
 8007050:	08007087 	.word	0x08007087
 8007054:	08007087 	.word	0x08007087
 8007058:	08007087 	.word	0x08007087
 800705c:	0800707f 	.word	0x0800707f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007060:	f7fe f8e2 	bl	8005228 <HAL_RCC_GetPCLK1Freq>
 8007064:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007066:	e014      	b.n	8007092 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007068:	f7fe f8f2 	bl	8005250 <HAL_RCC_GetPCLK2Freq>
 800706c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800706e:	e010      	b.n	8007092 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007070:	4b9e      	ldr	r3, [pc, #632]	@ (80072ec <UART_SetConfig+0x5c8>)
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007074:	e00d      	b.n	8007092 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007076:	f7fe f827 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 800707a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800707c:	e009      	b.n	8007092 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007084:	e005      	b.n	8007092 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007090:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 8130 	beq.w	80072fa <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	4a94      	ldr	r2, [pc, #592]	@ (80072f0 <UART_SetConfig+0x5cc>)
 80070a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a4:	461a      	mov	r2, r3
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	4613      	mov	r3, r2
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	4413      	add	r3, r2
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d305      	bcc.n	80070ca <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d903      	bls.n	80070d2 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070d0:	e113      	b.n	80072fa <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	2200      	movs	r2, #0
 80070d6:	60bb      	str	r3, [r7, #8]
 80070d8:	60fa      	str	r2, [r7, #12]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	4a84      	ldr	r2, [pc, #528]	@ (80072f0 <UART_SetConfig+0x5cc>)
 80070e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2200      	movs	r2, #0
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070f4:	f7f9 fdac 	bl	8000c50 <__aeabi_uldivmod>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	020b      	lsls	r3, r1, #8
 800710a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800710e:	0202      	lsls	r2, r0, #8
 8007110:	6979      	ldr	r1, [r7, #20]
 8007112:	6849      	ldr	r1, [r1, #4]
 8007114:	0849      	lsrs	r1, r1, #1
 8007116:	2000      	movs	r0, #0
 8007118:	460c      	mov	r4, r1
 800711a:	4605      	mov	r5, r0
 800711c:	eb12 0804 	adds.w	r8, r2, r4
 8007120:	eb43 0905 	adc.w	r9, r3, r5
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	469a      	mov	sl, r3
 800712c:	4693      	mov	fp, r2
 800712e:	4652      	mov	r2, sl
 8007130:	465b      	mov	r3, fp
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 fd8b 	bl	8000c50 <__aeabi_uldivmod>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4613      	mov	r3, r2
 8007140:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007148:	d308      	bcc.n	800715c <UART_SetConfig+0x438>
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007150:	d204      	bcs.n	800715c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6a3a      	ldr	r2, [r7, #32]
 8007158:	60da      	str	r2, [r3, #12]
 800715a:	e0ce      	b.n	80072fa <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007162:	e0ca      	b.n	80072fa <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800716c:	d166      	bne.n	800723c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800716e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007172:	2b08      	cmp	r3, #8
 8007174:	d827      	bhi.n	80071c6 <UART_SetConfig+0x4a2>
 8007176:	a201      	add	r2, pc, #4	@ (adr r2, 800717c <UART_SetConfig+0x458>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	080071a1 	.word	0x080071a1
 8007180:	080071a9 	.word	0x080071a9
 8007184:	080071b1 	.word	0x080071b1
 8007188:	080071c7 	.word	0x080071c7
 800718c:	080071b7 	.word	0x080071b7
 8007190:	080071c7 	.word	0x080071c7
 8007194:	080071c7 	.word	0x080071c7
 8007198:	080071c7 	.word	0x080071c7
 800719c:	080071bf 	.word	0x080071bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a0:	f7fe f842 	bl	8005228 <HAL_RCC_GetPCLK1Freq>
 80071a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071a6:	e014      	b.n	80071d2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a8:	f7fe f852 	bl	8005250 <HAL_RCC_GetPCLK2Freq>
 80071ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071ae:	e010      	b.n	80071d2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071b0:	4b4e      	ldr	r3, [pc, #312]	@ (80072ec <UART_SetConfig+0x5c8>)
 80071b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071b4:	e00d      	b.n	80071d2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071b6:	f7fd ff87 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 80071ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071bc:	e009      	b.n	80071d2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071c4:	e005      	b.n	80071d2 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8090 	beq.w	80072fa <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071de:	4a44      	ldr	r2, [pc, #272]	@ (80072f0 <UART_SetConfig+0x5cc>)
 80071e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e4:	461a      	mov	r2, r3
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80071ec:	005a      	lsls	r2, r3, #1
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	441a      	add	r2, r3
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	2b0f      	cmp	r3, #15
 8007204:	d916      	bls.n	8007234 <UART_SetConfig+0x510>
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800720c:	d212      	bcs.n	8007234 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	b29b      	uxth	r3, r3
 8007212:	f023 030f 	bic.w	r3, r3, #15
 8007216:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	b29b      	uxth	r3, r3
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	b29a      	uxth	r2, r3
 8007224:	8bfb      	ldrh	r3, [r7, #30]
 8007226:	4313      	orrs	r3, r2
 8007228:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	8bfa      	ldrh	r2, [r7, #30]
 8007230:	60da      	str	r2, [r3, #12]
 8007232:	e062      	b.n	80072fa <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800723a:	e05e      	b.n	80072fa <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800723c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007240:	2b08      	cmp	r3, #8
 8007242:	d828      	bhi.n	8007296 <UART_SetConfig+0x572>
 8007244:	a201      	add	r2, pc, #4	@ (adr r2, 800724c <UART_SetConfig+0x528>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	08007271 	.word	0x08007271
 8007250:	08007279 	.word	0x08007279
 8007254:	08007281 	.word	0x08007281
 8007258:	08007297 	.word	0x08007297
 800725c:	08007287 	.word	0x08007287
 8007260:	08007297 	.word	0x08007297
 8007264:	08007297 	.word	0x08007297
 8007268:	08007297 	.word	0x08007297
 800726c:	0800728f 	.word	0x0800728f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007270:	f7fd ffda 	bl	8005228 <HAL_RCC_GetPCLK1Freq>
 8007274:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007276:	e014      	b.n	80072a2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007278:	f7fd ffea 	bl	8005250 <HAL_RCC_GetPCLK2Freq>
 800727c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800727e:	e010      	b.n	80072a2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007280:	4b1a      	ldr	r3, [pc, #104]	@ (80072ec <UART_SetConfig+0x5c8>)
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007284:	e00d      	b.n	80072a2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007286:	f7fd ff1f 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 800728a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800728c:	e009      	b.n	80072a2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800728e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007292:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007294:	e005      	b.n	80072a2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072a0:	bf00      	nop
    }

    if (pclk != 0U)
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d028      	beq.n	80072fa <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ac:	4a10      	ldr	r2, [pc, #64]	@ (80072f0 <UART_SetConfig+0x5cc>)
 80072ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072b2:	461a      	mov	r2, r3
 80072b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	085b      	lsrs	r3, r3, #1
 80072c0:	441a      	add	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	2b0f      	cmp	r3, #15
 80072d0:	d910      	bls.n	80072f4 <UART_SetConfig+0x5d0>
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072d8:	d20c      	bcs.n	80072f4 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	b29a      	uxth	r2, r3
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60da      	str	r2, [r3, #12]
 80072e4:	e009      	b.n	80072fa <UART_SetConfig+0x5d6>
 80072e6:	bf00      	nop
 80072e8:	40008000 	.word	0x40008000
 80072ec:	00f42400 	.word	0x00f42400
 80072f0:	0800d860 	.word	0x0800d860
      }
      else
      {
        ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2201      	movs	r2, #1
 8007306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2200      	movs	r2, #0
 800730e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2200      	movs	r2, #0
 8007314:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007316:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800731a:	4618      	mov	r0, r3
 800731c:	3730      	adds	r7, #48	@ 0x30
 800731e:	46bd      	mov	sp, r7
 8007320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00a      	beq.n	80073d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01a      	beq.n	800743a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800741e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007422:	d10a      	bne.n	800743a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	605a      	str	r2, [r3, #4]
  }
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b098      	sub	sp, #96	@ 0x60
 800746c:	af02      	add	r7, sp, #8
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007478:	f7fa ff1c 	bl	80022b4 <HAL_GetTick>
 800747c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b08      	cmp	r3, #8
 800748a:	d12f      	bne.n	80074ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800748c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007494:	2200      	movs	r2, #0
 8007496:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f88e 	bl	80075bc <UART_WaitOnFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d022      	beq.n	80074ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80074c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e6      	bne.n	80074a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e063      	b.n	80075b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0304 	and.w	r3, r3, #4
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d149      	bne.n	800758e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007502:	2200      	movs	r2, #0
 8007504:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f857 	bl	80075bc <UART_WaitOnFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d03c      	beq.n	800758e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	623b      	str	r3, [r7, #32]
   return(result);
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007532:	633b      	str	r3, [r7, #48]	@ 0x30
 8007534:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e6      	bne.n	8007514 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3308      	adds	r3, #8
 800754c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	60fb      	str	r3, [r7, #12]
   return(result);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3308      	adds	r3, #8
 8007564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007566:	61fa      	str	r2, [r7, #28]
 8007568:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	69b9      	ldr	r1, [r7, #24]
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	617b      	str	r3, [r7, #20]
   return(result);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e5      	bne.n	8007546 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e012      	b.n	80075b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3758      	adds	r7, #88	@ 0x58
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	4613      	mov	r3, r2
 80075ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075cc:	e04f      	b.n	800766e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d04b      	beq.n	800766e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d6:	f7fa fe6d 	bl	80022b4 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d302      	bcc.n	80075ec <UART_WaitOnFlagUntilTimeout+0x30>
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e04e      	b.n	800768e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d037      	beq.n	800766e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b80      	cmp	r3, #128	@ 0x80
 8007602:	d034      	beq.n	800766e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b40      	cmp	r3, #64	@ 0x40
 8007608:	d031      	beq.n	800766e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b08      	cmp	r3, #8
 8007616:	d110      	bne.n	800763a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2208      	movs	r2, #8
 800761e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 f95b 	bl	80078dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2208      	movs	r2, #8
 800762a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e029      	b.n	800768e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007648:	d111      	bne.n	800766e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f941 	bl	80078dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2220      	movs	r2, #32
 800765e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e00f      	b.n	800768e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69da      	ldr	r2, [r3, #28]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4013      	ands	r3, r2
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	429a      	cmp	r2, r3
 800767c:	bf0c      	ite	eq
 800767e:	2301      	moveq	r3, #1
 8007680:	2300      	movne	r3, #0
 8007682:	b2db      	uxtb	r3, r3
 8007684:	461a      	mov	r2, r3
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	429a      	cmp	r2, r3
 800768a:	d0a0      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007698:	b480      	push	{r7}
 800769a:	b0a3      	sub	sp, #140	@ 0x8c
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4613      	mov	r3, r2
 80076a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	88fa      	ldrh	r2, [r7, #6]
 80076b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ca:	d10e      	bne.n	80076ea <UART_Start_Receive_IT+0x52>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d105      	bne.n	80076e0 <UART_Start_Receive_IT+0x48>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80076da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076de:	e02d      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	22ff      	movs	r2, #255	@ 0xff
 80076e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076e8:	e028      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10d      	bne.n	800770e <UART_Start_Receive_IT+0x76>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d104      	bne.n	8007704 <UART_Start_Receive_IT+0x6c>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	22ff      	movs	r2, #255	@ 0xff
 80076fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007702:	e01b      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	227f      	movs	r2, #127	@ 0x7f
 8007708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800770c:	e016      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007716:	d10d      	bne.n	8007734 <UART_Start_Receive_IT+0x9c>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <UART_Start_Receive_IT+0x92>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	227f      	movs	r2, #127	@ 0x7f
 8007724:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007728:	e008      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	223f      	movs	r2, #63	@ 0x3f
 800772e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007732:	e003      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2222      	movs	r2, #34	@ 0x22
 8007748:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3308      	adds	r3, #8
 8007752:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800775c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800775e:	f043 0301 	orr.w	r3, r3, #1
 8007762:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3308      	adds	r3, #8
 800776c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007770:	673a      	str	r2, [r7, #112]	@ 0x70
 8007772:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007776:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800777e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e3      	bne.n	800774c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800778c:	d14f      	bne.n	800782e <UART_Start_Receive_IT+0x196>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007794:	88fa      	ldrh	r2, [r7, #6]
 8007796:	429a      	cmp	r2, r3
 8007798:	d349      	bcc.n	800782e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077a2:	d107      	bne.n	80077b4 <UART_Start_Receive_IT+0x11c>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4a47      	ldr	r2, [pc, #284]	@ (80078cc <UART_Start_Receive_IT+0x234>)
 80077b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80077b2:	e002      	b.n	80077ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4a46      	ldr	r2, [pc, #280]	@ (80078d0 <UART_Start_Receive_IT+0x238>)
 80077b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01a      	beq.n	80077f8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ca:	e853 3f00 	ldrex	r3, [r3]
 80077ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80077d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077e6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80077ec:	e841 2300 	strex	r3, r2, [r1]
 80077f0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80077f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e4      	bne.n	80077c2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3308      	adds	r3, #8
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800780e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3308      	adds	r3, #8
 8007816:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007818:	64ba      	str	r2, [r7, #72]	@ 0x48
 800781a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800781e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007820:	e841 2300 	strex	r3, r2, [r1]
 8007824:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e5      	bne.n	80077f8 <UART_Start_Receive_IT+0x160>
 800782c:	e046      	b.n	80078bc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007836:	d107      	bne.n	8007848 <UART_Start_Receive_IT+0x1b0>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d103      	bne.n	8007848 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4a24      	ldr	r2, [pc, #144]	@ (80078d4 <UART_Start_Receive_IT+0x23c>)
 8007844:	675a      	str	r2, [r3, #116]	@ 0x74
 8007846:	e002      	b.n	800784e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4a23      	ldr	r2, [pc, #140]	@ (80078d8 <UART_Start_Receive_IT+0x240>)
 800784c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d019      	beq.n	800788a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800786a:	677b      	str	r3, [r7, #116]	@ 0x74
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007874:	637b      	str	r3, [r7, #52]	@ 0x34
 8007876:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800787a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e6      	bne.n	8007856 <UART_Start_Receive_IT+0x1be>
 8007888:	e018      	b.n	80078bc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	613b      	str	r3, [r7, #16]
   return(result);
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f043 0320 	orr.w	r3, r3, #32
 800789e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078a8:	623b      	str	r3, [r7, #32]
 80078aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	69f9      	ldr	r1, [r7, #28]
 80078ae:	6a3a      	ldr	r2, [r7, #32]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	378c      	adds	r7, #140	@ 0x8c
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	08008145 	.word	0x08008145
 80078d0:	08007de5 	.word	0x08007de5
 80078d4:	08007c2d 	.word	0x08007c2d
 80078d8:	08007a75 	.word	0x08007a75

080078dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078dc:	b480      	push	{r7}
 80078de:	b095      	sub	sp, #84	@ 0x54
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007902:	643b      	str	r3, [r7, #64]	@ 0x40
 8007904:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007908:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e6      	bne.n	80078e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3308      	adds	r3, #8
 800791c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	61fb      	str	r3, [r7, #28]
   return(result);
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800793a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800793c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e3      	bne.n	8007916 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007952:	2b01      	cmp	r3, #1
 8007954:	d118      	bne.n	8007988 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	60bb      	str	r3, [r7, #8]
   return(result);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f023 0310 	bic.w	r3, r3, #16
 800796a:	647b      	str	r3, [r7, #68]	@ 0x44
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6979      	ldr	r1, [r7, #20]
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	613b      	str	r3, [r7, #16]
   return(result);
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e6      	bne.n	8007956 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800799c:	bf00      	nop
 800799e:	3754      	adds	r7, #84	@ 0x54
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f7ff f98c 	bl	8006ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	220f      	movs	r2, #15
 80079f0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	699a      	ldr	r2, [r3, #24]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f042 0208 	orr.w	r2, r2, #8
 8007a00:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff f971 	bl	8006cf8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b088      	sub	sp, #32
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	61bb      	str	r3, [r7, #24]
 8007a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6979      	ldr	r1, [r7, #20]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	613b      	str	r3, [r7, #16]
   return(result);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff f932 	bl	8006cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a6c:	bf00      	nop
 8007a6e:	3720      	adds	r7, #32
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b09c      	sub	sp, #112	@ 0x70
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a8c:	2b22      	cmp	r3, #34	@ 0x22
 8007a8e:	f040 80be 	bne.w	8007c0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007aa0:	b2d9      	uxtb	r1, r3
 8007aa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aac:	400a      	ands	r2, r1
 8007aae:	b2d2      	uxtb	r2, r2
 8007ab0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 80a1 	bne.w	8007c1e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007afa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007afc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e6      	bne.n	8007adc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3308      	adds	r3, #8
 8007b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b20:	f023 0301 	bic.w	r3, r3, #1
 8007b24:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e5      	bne.n	8007b0e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a33      	ldr	r2, [pc, #204]	@ (8007c28 <UART_RxISR_8BIT+0x1b4>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d01f      	beq.n	8007ba0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d018      	beq.n	8007ba0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b82:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e6      	bne.n	8007b6e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d12e      	bne.n	8007c06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0310 	bic.w	r3, r3, #16
 8007bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bcc:	61fb      	str	r3, [r7, #28]
 8007bce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	69b9      	ldr	r1, [r7, #24]
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e6      	bne.n	8007bae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b10      	cmp	r3, #16
 8007bec:	d103      	bne.n	8007bf6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2210      	movs	r2, #16
 8007bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7ff f884 	bl	8006d0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c04:	e00b      	b.n	8007c1e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7f9 faf2 	bl	80011f0 <HAL_UART_RxCpltCallback>
}
 8007c0c:	e007      	b.n	8007c1e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	699a      	ldr	r2, [r3, #24]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f042 0208 	orr.w	r2, r2, #8
 8007c1c:	619a      	str	r2, [r3, #24]
}
 8007c1e:	bf00      	nop
 8007c20:	3770      	adds	r7, #112	@ 0x70
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40008000 	.word	0x40008000

08007c2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b09c      	sub	sp, #112	@ 0x70
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c3a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c44:	2b22      	cmp	r3, #34	@ 0x22
 8007c46:	f040 80be 	bne.w	8007dc6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c58:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c5a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007c5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c62:	4013      	ands	r3, r2
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c6e:	1c9a      	adds	r2, r3, #2
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f040 80a1 	bne.w	8007dd6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ca8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cb4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007cb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e6      	bne.n	8007c94 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ce6:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e5      	bne.n	8007cc6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a33      	ldr	r2, [pc, #204]	@ (8007de0 <UART_RxISR_16BIT+0x1b4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d01f      	beq.n	8007d58 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d018      	beq.n	8007d58 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	e853 3f00 	ldrex	r3, [r3]
 8007d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	461a      	mov	r2, r3
 8007d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d46:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e6      	bne.n	8007d26 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d12e      	bne.n	8007dbe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f023 0310 	bic.w	r3, r3, #16
 8007d7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	461a      	mov	r2, r3
 8007d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6979      	ldr	r1, [r7, #20]
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	613b      	str	r3, [r7, #16]
   return(result);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e6      	bne.n	8007d66 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f003 0310 	and.w	r3, r3, #16
 8007da2:	2b10      	cmp	r3, #16
 8007da4:	d103      	bne.n	8007dae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2210      	movs	r2, #16
 8007dac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7fe ffa8 	bl	8006d0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dbc:	e00b      	b.n	8007dd6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7f9 fa16 	bl	80011f0 <HAL_UART_RxCpltCallback>
}
 8007dc4:	e007      	b.n	8007dd6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	699a      	ldr	r2, [r3, #24]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0208 	orr.w	r2, r2, #8
 8007dd4:	619a      	str	r2, [r3, #24]
}
 8007dd6:	bf00      	nop
 8007dd8:	3770      	adds	r7, #112	@ 0x70
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	40008000 	.word	0x40008000

08007de4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b0ac      	sub	sp, #176	@ 0xb0
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007df2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e1a:	2b22      	cmp	r3, #34	@ 0x22
 8007e1c:	f040 8182 	bne.w	8008124 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e26:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e2a:	e125      	b.n	8008078 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e32:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e36:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007e3a:	b2d9      	uxtb	r1, r3
 8007e3c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e46:	400a      	ands	r2, r1
 8007e48:	b2d2      	uxtb	r2, r2
 8007e4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d053      	beq.n	8007f26 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d011      	beq.n	8007eae <UART_RxISR_8BIT_FIFOEN+0xca>
 8007e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea4:	f043 0201 	orr.w	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d011      	beq.n	8007ede <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00b      	beq.n	8007ede <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed4:	f043 0204 	orr.w	r2, r3, #4
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d011      	beq.n	8007f0e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00b      	beq.n	8007f0e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2204      	movs	r2, #4
 8007efc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f04:	f043 0202 	orr.w	r2, r3, #2
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d006      	beq.n	8007f26 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7fe fee3 	bl	8006ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f040 80a2 	bne.w	8008078 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f3c:	e853 3f00 	ldrex	r3, [r3]
 8007f40:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f58:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007f5c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007f64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e4      	bne.n	8007f34 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007f7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f80:	f023 0301 	bic.w	r3, r3, #1
 8007f84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f92:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007f94:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007f98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007fa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e1      	bne.n	8007f6a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a5f      	ldr	r2, [pc, #380]	@ (800813c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d021      	beq.n	8008008 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d01a      	beq.n	8008008 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fe2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ff4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ff6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ffa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e4      	bne.n	8007fd2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d130      	bne.n	8008072 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	f023 0310 	bic.w	r3, r3, #16
 800802a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008038:	643b      	str	r3, [r7, #64]	@ 0x40
 800803a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800803e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e4      	bne.n	8008016 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b10      	cmp	r3, #16
 8008058:	d103      	bne.n	8008062 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2210      	movs	r2, #16
 8008060:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fe fe4e 	bl	8006d0c <HAL_UARTEx_RxEventCallback>
 8008070:	e002      	b.n	8008078 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7f9 f8bc 	bl	80011f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008078:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800807c:	2b00      	cmp	r3, #0
 800807e:	d006      	beq.n	800808e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b00      	cmp	r3, #0
 800808a:	f47f aecf 	bne.w	8007e2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008094:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008098:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800809c:	2b00      	cmp	r3, #0
 800809e:	d049      	beq.n	8008134 <UART_RxISR_8BIT_FIFOEN+0x350>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080a6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d242      	bcs.n	8008134 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3308      	adds	r3, #8
 80080b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80080d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e3      	bne.n	80080ae <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a15      	ldr	r2, [pc, #84]	@ (8008140 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80080ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f043 0320 	orr.w	r3, r3, #32
 8008100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800810e:	61bb      	str	r3, [r7, #24]
 8008110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	6979      	ldr	r1, [r7, #20]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	613b      	str	r3, [r7, #16]
   return(result);
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e4      	bne.n	80080ec <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008122:	e007      	b.n	8008134 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	699a      	ldr	r2, [r3, #24]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0208 	orr.w	r2, r2, #8
 8008132:	619a      	str	r2, [r3, #24]
}
 8008134:	bf00      	nop
 8008136:	37b0      	adds	r7, #176	@ 0xb0
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	40008000 	.word	0x40008000
 8008140:	08007a75 	.word	0x08007a75

08008144 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b0ae      	sub	sp, #184	@ 0xb8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008152:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800817a:	2b22      	cmp	r3, #34	@ 0x22
 800817c:	f040 8186 	bne.w	800848c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008186:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800818a:	e129      	b.n	80083e0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008192:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800819a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800819e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80081a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80081a6:	4013      	ands	r3, r2
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b4:	1c9a      	adds	r2, r3, #2
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	3b01      	subs	r3, #1
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80081d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d053      	beq.n	800828a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d011      	beq.n	8008212 <UART_RxISR_16BIT_FIFOEN+0xce>
 80081ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00b      	beq.n	8008212 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2201      	movs	r2, #1
 8008200:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008208:	f043 0201 	orr.w	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d011      	beq.n	8008242 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800821e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00b      	beq.n	8008242 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2202      	movs	r2, #2
 8008230:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008238:	f043 0204 	orr.w	r2, r3, #4
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b00      	cmp	r3, #0
 800824c:	d011      	beq.n	8008272 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800824e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00b      	beq.n	8008272 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2204      	movs	r2, #4
 8008260:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008268:	f043 0202 	orr.w	r2, r3, #2
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008278:	2b00      	cmp	r3, #0
 800827a:	d006      	beq.n	800828a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7fe fd31 	bl	8006ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	f040 80a4 	bne.w	80083e0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082be:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e2      	bne.n	8008298 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3308      	adds	r3, #8
 80082d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082e8:	f023 0301 	bic.w	r3, r3, #1
 80082ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80082fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80082fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008300:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008308:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e1      	bne.n	80082d2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a5f      	ldr	r2, [pc, #380]	@ (80084a4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d021      	beq.n	8008370 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d01a      	beq.n	8008370 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008342:	e853 3f00 	ldrex	r3, [r3]
 8008346:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800834a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800834e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800835c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800835e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008362:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800836a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e4      	bne.n	800833a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008374:	2b01      	cmp	r3, #1
 8008376:	d130      	bne.n	80083da <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838e:	f023 0310 	bic.w	r3, r3, #16
 8008392:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e4      	bne.n	800837e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	f003 0310 	and.w	r3, r3, #16
 80083be:	2b10      	cmp	r3, #16
 80083c0:	d103      	bne.n	80083ca <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2210      	movs	r2, #16
 80083c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7fe fc9a 	bl	8006d0c <HAL_UARTEx_RxEventCallback>
 80083d8:	e002      	b.n	80083e0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7f8 ff08 	bl	80011f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083e0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80083e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083ec:	f003 0320 	and.w	r3, r3, #32
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f47f aecb 	bne.w	800818c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083fc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008400:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008404:	2b00      	cmp	r3, #0
 8008406:	d049      	beq.n	800849c <UART_RxISR_16BIT_FIFOEN+0x358>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800840e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008412:	429a      	cmp	r2, r3
 8008414:	d242      	bcs.n	800849c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	623b      	str	r3, [r7, #32]
   return(result);
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800842c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3308      	adds	r3, #8
 8008436:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800843a:	633a      	str	r2, [r7, #48]	@ 0x30
 800843c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e3      	bne.n	8008416 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a15      	ldr	r2, [pc, #84]	@ (80084a8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008452:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	60fb      	str	r3, [r7, #12]
   return(result);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f043 0320 	orr.w	r3, r3, #32
 8008468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008476:	61fb      	str	r3, [r7, #28]
 8008478:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	69b9      	ldr	r1, [r7, #24]
 800847c:	69fa      	ldr	r2, [r7, #28]
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	617b      	str	r3, [r7, #20]
   return(result);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e4      	bne.n	8008454 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800848a:	e007      	b.n	800849c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0208 	orr.w	r2, r2, #8
 800849a:	619a      	str	r2, [r3, #24]
}
 800849c:	bf00      	nop
 800849e:	37b8      	adds	r7, #184	@ 0xb8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	40008000 	.word	0x40008000
 80084a8:	08007c2d 	.word	0x08007c2d

080084ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_UARTEx_DisableFifoMode+0x16>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e027      	b.n	800854e <HAL_UARTEx_DisableFifoMode+0x66>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2224      	movs	r2, #36	@ 0x24
 800850a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 0201 	bic.w	r2, r2, #1
 8008524:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800852c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800856a:	2b01      	cmp	r3, #1
 800856c:	d101      	bne.n	8008572 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800856e:	2302      	movs	r3, #2
 8008570:	e02d      	b.n	80085ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2224      	movs	r2, #36	@ 0x24
 800857e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 0201 	bic.w	r2, r2, #1
 8008598:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f850 	bl	8008654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2220      	movs	r2, #32
 80085c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d101      	bne.n	80085ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085ea:	2302      	movs	r3, #2
 80085ec:	e02d      	b.n	800864a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2224      	movs	r2, #36	@ 0x24
 80085fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0201 	bic.w	r2, r2, #1
 8008614:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f812 	bl	8008654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2220      	movs	r2, #32
 800863c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008660:	2b00      	cmp	r3, #0
 8008662:	d108      	bne.n	8008676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008674:	e031      	b.n	80086da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008676:	2308      	movs	r3, #8
 8008678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800867a:	2308      	movs	r3, #8
 800867c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	0e5b      	lsrs	r3, r3, #25
 8008686:	b2db      	uxtb	r3, r3
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	0f5b      	lsrs	r3, r3, #29
 8008696:	b2db      	uxtb	r3, r3
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	7b3a      	ldrb	r2, [r7, #12]
 80086a2:	4911      	ldr	r1, [pc, #68]	@ (80086e8 <UARTEx_SetNbDataToProcess+0x94>)
 80086a4:	5c8a      	ldrb	r2, [r1, r2]
 80086a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086aa:	7b3a      	ldrb	r2, [r7, #12]
 80086ac:	490f      	ldr	r1, [pc, #60]	@ (80086ec <UARTEx_SetNbDataToProcess+0x98>)
 80086ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	7b7a      	ldrb	r2, [r7, #13]
 80086c0:	4909      	ldr	r1, [pc, #36]	@ (80086e8 <UARTEx_SetNbDataToProcess+0x94>)
 80086c2:	5c8a      	ldrb	r2, [r1, r2]
 80086c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086c8:	7b7a      	ldrb	r2, [r7, #13]
 80086ca:	4908      	ldr	r1, [pc, #32]	@ (80086ec <UARTEx_SetNbDataToProcess+0x98>)
 80086cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80086da:	bf00      	nop
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	0800d878 	.word	0x0800d878
 80086ec:	0800d880 	.word	0x0800d880

080086f0 <__cvt>:
 80086f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	ec57 6b10 	vmov	r6, r7, d0
 80086f8:	2f00      	cmp	r7, #0
 80086fa:	460c      	mov	r4, r1
 80086fc:	4619      	mov	r1, r3
 80086fe:	463b      	mov	r3, r7
 8008700:	bfb4      	ite	lt
 8008702:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008706:	2300      	movge	r3, #0
 8008708:	4691      	mov	r9, r2
 800870a:	bfbf      	itttt	lt
 800870c:	4632      	movlt	r2, r6
 800870e:	461f      	movlt	r7, r3
 8008710:	232d      	movlt	r3, #45	@ 0x2d
 8008712:	4616      	movlt	r6, r2
 8008714:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008718:	700b      	strb	r3, [r1, #0]
 800871a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800871c:	f023 0820 	bic.w	r8, r3, #32
 8008720:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008724:	d005      	beq.n	8008732 <__cvt+0x42>
 8008726:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800872a:	d100      	bne.n	800872e <__cvt+0x3e>
 800872c:	3401      	adds	r4, #1
 800872e:	2102      	movs	r1, #2
 8008730:	e000      	b.n	8008734 <__cvt+0x44>
 8008732:	2103      	movs	r1, #3
 8008734:	ab03      	add	r3, sp, #12
 8008736:	4622      	mov	r2, r4
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	ab02      	add	r3, sp, #8
 800873c:	ec47 6b10 	vmov	d0, r6, r7
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	4653      	mov	r3, sl
 8008744:	f001 f924 	bl	8009990 <_dtoa_r>
 8008748:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800874c:	4605      	mov	r5, r0
 800874e:	d119      	bne.n	8008784 <__cvt+0x94>
 8008750:	f019 0f01 	tst.w	r9, #1
 8008754:	d00e      	beq.n	8008774 <__cvt+0x84>
 8008756:	eb00 0904 	add.w	r9, r0, r4
 800875a:	2200      	movs	r2, #0
 800875c:	2300      	movs	r3, #0
 800875e:	4630      	mov	r0, r6
 8008760:	4639      	mov	r1, r7
 8008762:	f7f8 f995 	bl	8000a90 <__aeabi_dcmpeq>
 8008766:	b108      	cbz	r0, 800876c <__cvt+0x7c>
 8008768:	f8cd 900c 	str.w	r9, [sp, #12]
 800876c:	2230      	movs	r2, #48	@ 0x30
 800876e:	9b03      	ldr	r3, [sp, #12]
 8008770:	454b      	cmp	r3, r9
 8008772:	d31e      	bcc.n	80087b2 <__cvt+0xc2>
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	4628      	mov	r0, r5
 8008778:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800877a:	1b5b      	subs	r3, r3, r5
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	b004      	add	sp, #16
 8008780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008784:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008788:	eb00 0904 	add.w	r9, r0, r4
 800878c:	d1e5      	bne.n	800875a <__cvt+0x6a>
 800878e:	7803      	ldrb	r3, [r0, #0]
 8008790:	2b30      	cmp	r3, #48	@ 0x30
 8008792:	d10a      	bne.n	80087aa <__cvt+0xba>
 8008794:	2200      	movs	r2, #0
 8008796:	2300      	movs	r3, #0
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f8 f978 	bl	8000a90 <__aeabi_dcmpeq>
 80087a0:	b918      	cbnz	r0, 80087aa <__cvt+0xba>
 80087a2:	f1c4 0401 	rsb	r4, r4, #1
 80087a6:	f8ca 4000 	str.w	r4, [sl]
 80087aa:	f8da 3000 	ldr.w	r3, [sl]
 80087ae:	4499      	add	r9, r3
 80087b0:	e7d3      	b.n	800875a <__cvt+0x6a>
 80087b2:	1c59      	adds	r1, r3, #1
 80087b4:	9103      	str	r1, [sp, #12]
 80087b6:	701a      	strb	r2, [r3, #0]
 80087b8:	e7d9      	b.n	800876e <__cvt+0x7e>

080087ba <__exponent>:
 80087ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087bc:	2900      	cmp	r1, #0
 80087be:	7002      	strb	r2, [r0, #0]
 80087c0:	bfba      	itte	lt
 80087c2:	4249      	neglt	r1, r1
 80087c4:	232d      	movlt	r3, #45	@ 0x2d
 80087c6:	232b      	movge	r3, #43	@ 0x2b
 80087c8:	2909      	cmp	r1, #9
 80087ca:	7043      	strb	r3, [r0, #1]
 80087cc:	dd28      	ble.n	8008820 <__exponent+0x66>
 80087ce:	f10d 0307 	add.w	r3, sp, #7
 80087d2:	270a      	movs	r7, #10
 80087d4:	461d      	mov	r5, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	3b01      	subs	r3, #1
 80087da:	fbb1 f6f7 	udiv	r6, r1, r7
 80087de:	fb07 1416 	mls	r4, r7, r6, r1
 80087e2:	3430      	adds	r4, #48	@ 0x30
 80087e4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80087e8:	460c      	mov	r4, r1
 80087ea:	4631      	mov	r1, r6
 80087ec:	2c63      	cmp	r4, #99	@ 0x63
 80087ee:	dcf2      	bgt.n	80087d6 <__exponent+0x1c>
 80087f0:	3130      	adds	r1, #48	@ 0x30
 80087f2:	1e94      	subs	r4, r2, #2
 80087f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80087f8:	1c41      	adds	r1, r0, #1
 80087fa:	4623      	mov	r3, r4
 80087fc:	42ab      	cmp	r3, r5
 80087fe:	d30a      	bcc.n	8008816 <__exponent+0x5c>
 8008800:	f10d 0309 	add.w	r3, sp, #9
 8008804:	1a9b      	subs	r3, r3, r2
 8008806:	42ac      	cmp	r4, r5
 8008808:	bf88      	it	hi
 800880a:	2300      	movhi	r3, #0
 800880c:	3302      	adds	r3, #2
 800880e:	4403      	add	r3, r0
 8008810:	1a18      	subs	r0, r3, r0
 8008812:	b003      	add	sp, #12
 8008814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008816:	f813 6b01 	ldrb.w	r6, [r3], #1
 800881a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800881e:	e7ed      	b.n	80087fc <__exponent+0x42>
 8008820:	2330      	movs	r3, #48	@ 0x30
 8008822:	3130      	adds	r1, #48	@ 0x30
 8008824:	7083      	strb	r3, [r0, #2]
 8008826:	1d03      	adds	r3, r0, #4
 8008828:	70c1      	strb	r1, [r0, #3]
 800882a:	e7f1      	b.n	8008810 <__exponent+0x56>

0800882c <_printf_float>:
 800882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	b08d      	sub	sp, #52	@ 0x34
 8008832:	460c      	mov	r4, r1
 8008834:	4616      	mov	r6, r2
 8008836:	461f      	mov	r7, r3
 8008838:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800883c:	4605      	mov	r5, r0
 800883e:	f000 ff8b 	bl	8009758 <_localeconv_r>
 8008842:	6803      	ldr	r3, [r0, #0]
 8008844:	4618      	mov	r0, r3
 8008846:	9304      	str	r3, [sp, #16]
 8008848:	f7f7 fcf6 	bl	8000238 <strlen>
 800884c:	2300      	movs	r3, #0
 800884e:	9005      	str	r0, [sp, #20]
 8008850:	930a      	str	r3, [sp, #40]	@ 0x28
 8008852:	f8d8 3000 	ldr.w	r3, [r8]
 8008856:	f894 a018 	ldrb.w	sl, [r4, #24]
 800885a:	3307      	adds	r3, #7
 800885c:	f8d4 b000 	ldr.w	fp, [r4]
 8008860:	f023 0307 	bic.w	r3, r3, #7
 8008864:	f103 0208 	add.w	r2, r3, #8
 8008868:	f8c8 2000 	str.w	r2, [r8]
 800886c:	f04f 32ff 	mov.w	r2, #4294967295
 8008870:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008874:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008878:	f8cd 8018 	str.w	r8, [sp, #24]
 800887c:	9307      	str	r3, [sp, #28]
 800887e:	4b9d      	ldr	r3, [pc, #628]	@ (8008af4 <_printf_float+0x2c8>)
 8008880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008884:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008888:	f7f8 f934 	bl	8000af4 <__aeabi_dcmpun>
 800888c:	bb70      	cbnz	r0, 80088ec <_printf_float+0xc0>
 800888e:	f04f 32ff 	mov.w	r2, #4294967295
 8008892:	4b98      	ldr	r3, [pc, #608]	@ (8008af4 <_printf_float+0x2c8>)
 8008894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008898:	f7f8 f90e 	bl	8000ab8 <__aeabi_dcmple>
 800889c:	bb30      	cbnz	r0, 80088ec <_printf_float+0xc0>
 800889e:	2200      	movs	r2, #0
 80088a0:	2300      	movs	r3, #0
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f8 f8fd 	bl	8000aa4 <__aeabi_dcmplt>
 80088aa:	b110      	cbz	r0, 80088b2 <_printf_float+0x86>
 80088ac:	232d      	movs	r3, #45	@ 0x2d
 80088ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088b2:	4a91      	ldr	r2, [pc, #580]	@ (8008af8 <_printf_float+0x2cc>)
 80088b4:	4b91      	ldr	r3, [pc, #580]	@ (8008afc <_printf_float+0x2d0>)
 80088b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80088ba:	bf8c      	ite	hi
 80088bc:	4690      	movhi	r8, r2
 80088be:	4698      	movls	r8, r3
 80088c0:	2303      	movs	r3, #3
 80088c2:	f04f 0900 	mov.w	r9, #0
 80088c6:	6123      	str	r3, [r4, #16]
 80088c8:	f02b 0304 	bic.w	r3, fp, #4
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	4633      	mov	r3, r6
 80088d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80088d2:	4621      	mov	r1, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	9700      	str	r7, [sp, #0]
 80088d8:	f000 f9d2 	bl	8008c80 <_printf_common>
 80088dc:	3001      	adds	r0, #1
 80088de:	f040 808d 	bne.w	80089fc <_printf_float+0x1d0>
 80088e2:	f04f 30ff 	mov.w	r0, #4294967295
 80088e6:	b00d      	add	sp, #52	@ 0x34
 80088e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	4640      	mov	r0, r8
 80088f2:	4649      	mov	r1, r9
 80088f4:	f7f8 f8fe 	bl	8000af4 <__aeabi_dcmpun>
 80088f8:	b140      	cbz	r0, 800890c <_printf_float+0xe0>
 80088fa:	464b      	mov	r3, r9
 80088fc:	4a80      	ldr	r2, [pc, #512]	@ (8008b00 <_printf_float+0x2d4>)
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bfbc      	itt	lt
 8008902:	232d      	movlt	r3, #45	@ 0x2d
 8008904:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008908:	4b7e      	ldr	r3, [pc, #504]	@ (8008b04 <_printf_float+0x2d8>)
 800890a:	e7d4      	b.n	80088b6 <_printf_float+0x8a>
 800890c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008910:	6863      	ldr	r3, [r4, #4]
 8008912:	9206      	str	r2, [sp, #24]
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	d13b      	bne.n	8008990 <_printf_float+0x164>
 8008918:	2306      	movs	r3, #6
 800891a:	6063      	str	r3, [r4, #4]
 800891c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008920:	2300      	movs	r3, #0
 8008922:	4628      	mov	r0, r5
 8008924:	6022      	str	r2, [r4, #0]
 8008926:	9303      	str	r3, [sp, #12]
 8008928:	ab0a      	add	r3, sp, #40	@ 0x28
 800892a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800892e:	ab09      	add	r3, sp, #36	@ 0x24
 8008930:	ec49 8b10 	vmov	d0, r8, r9
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800893a:	6861      	ldr	r1, [r4, #4]
 800893c:	f7ff fed8 	bl	80086f0 <__cvt>
 8008940:	9b06      	ldr	r3, [sp, #24]
 8008942:	4680      	mov	r8, r0
 8008944:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008946:	2b47      	cmp	r3, #71	@ 0x47
 8008948:	d129      	bne.n	800899e <_printf_float+0x172>
 800894a:	1cc8      	adds	r0, r1, #3
 800894c:	db02      	blt.n	8008954 <_printf_float+0x128>
 800894e:	6863      	ldr	r3, [r4, #4]
 8008950:	4299      	cmp	r1, r3
 8008952:	dd41      	ble.n	80089d8 <_printf_float+0x1ac>
 8008954:	f1aa 0a02 	sub.w	sl, sl, #2
 8008958:	fa5f fa8a 	uxtb.w	sl, sl
 800895c:	3901      	subs	r1, #1
 800895e:	4652      	mov	r2, sl
 8008960:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008964:	9109      	str	r1, [sp, #36]	@ 0x24
 8008966:	f7ff ff28 	bl	80087ba <__exponent>
 800896a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800896c:	4681      	mov	r9, r0
 800896e:	1813      	adds	r3, r2, r0
 8008970:	2a01      	cmp	r2, #1
 8008972:	6123      	str	r3, [r4, #16]
 8008974:	dc02      	bgt.n	800897c <_printf_float+0x150>
 8008976:	6822      	ldr	r2, [r4, #0]
 8008978:	07d2      	lsls	r2, r2, #31
 800897a:	d501      	bpl.n	8008980 <_printf_float+0x154>
 800897c:	3301      	adds	r3, #1
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0a2      	beq.n	80088ce <_printf_float+0xa2>
 8008988:	232d      	movs	r3, #45	@ 0x2d
 800898a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800898e:	e79e      	b.n	80088ce <_printf_float+0xa2>
 8008990:	9a06      	ldr	r2, [sp, #24]
 8008992:	2a47      	cmp	r2, #71	@ 0x47
 8008994:	d1c2      	bne.n	800891c <_printf_float+0xf0>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1c0      	bne.n	800891c <_printf_float+0xf0>
 800899a:	2301      	movs	r3, #1
 800899c:	e7bd      	b.n	800891a <_printf_float+0xee>
 800899e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089a2:	d9db      	bls.n	800895c <_printf_float+0x130>
 80089a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80089a8:	d118      	bne.n	80089dc <_printf_float+0x1b0>
 80089aa:	2900      	cmp	r1, #0
 80089ac:	6863      	ldr	r3, [r4, #4]
 80089ae:	dd0b      	ble.n	80089c8 <_printf_float+0x19c>
 80089b0:	6121      	str	r1, [r4, #16]
 80089b2:	b913      	cbnz	r3, 80089ba <_printf_float+0x18e>
 80089b4:	6822      	ldr	r2, [r4, #0]
 80089b6:	07d0      	lsls	r0, r2, #31
 80089b8:	d502      	bpl.n	80089c0 <_printf_float+0x194>
 80089ba:	3301      	adds	r3, #1
 80089bc:	440b      	add	r3, r1
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	f04f 0900 	mov.w	r9, #0
 80089c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80089c6:	e7db      	b.n	8008980 <_printf_float+0x154>
 80089c8:	b913      	cbnz	r3, 80089d0 <_printf_float+0x1a4>
 80089ca:	6822      	ldr	r2, [r4, #0]
 80089cc:	07d2      	lsls	r2, r2, #31
 80089ce:	d501      	bpl.n	80089d4 <_printf_float+0x1a8>
 80089d0:	3302      	adds	r3, #2
 80089d2:	e7f4      	b.n	80089be <_printf_float+0x192>
 80089d4:	2301      	movs	r3, #1
 80089d6:	e7f2      	b.n	80089be <_printf_float+0x192>
 80089d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80089dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089de:	4299      	cmp	r1, r3
 80089e0:	db05      	blt.n	80089ee <_printf_float+0x1c2>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	6121      	str	r1, [r4, #16]
 80089e6:	07d8      	lsls	r0, r3, #31
 80089e8:	d5ea      	bpl.n	80089c0 <_printf_float+0x194>
 80089ea:	1c4b      	adds	r3, r1, #1
 80089ec:	e7e7      	b.n	80089be <_printf_float+0x192>
 80089ee:	2900      	cmp	r1, #0
 80089f0:	bfd4      	ite	le
 80089f2:	f1c1 0202 	rsble	r2, r1, #2
 80089f6:	2201      	movgt	r2, #1
 80089f8:	4413      	add	r3, r2
 80089fa:	e7e0      	b.n	80089be <_printf_float+0x192>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	055a      	lsls	r2, r3, #21
 8008a00:	d407      	bmi.n	8008a12 <_printf_float+0x1e6>
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	4642      	mov	r2, r8
 8008a06:	4631      	mov	r1, r6
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b8      	blx	r7
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d12b      	bne.n	8008a68 <_printf_float+0x23c>
 8008a10:	e767      	b.n	80088e2 <_printf_float+0xb6>
 8008a12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a16:	f240 80dd 	bls.w	8008bd4 <_printf_float+0x3a8>
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a22:	f7f8 f835 	bl	8000a90 <__aeabi_dcmpeq>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d033      	beq.n	8008a92 <_printf_float+0x266>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4a36      	ldr	r2, [pc, #216]	@ (8008b08 <_printf_float+0x2dc>)
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4628      	mov	r0, r5
 8008a32:	47b8      	blx	r7
 8008a34:	3001      	adds	r0, #1
 8008a36:	f43f af54 	beq.w	80088e2 <_printf_float+0xb6>
 8008a3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a3e:	4543      	cmp	r3, r8
 8008a40:	db02      	blt.n	8008a48 <_printf_float+0x21c>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	07d8      	lsls	r0, r3, #31
 8008a46:	d50f      	bpl.n	8008a68 <_printf_float+0x23c>
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	f43f af45 	beq.w	80088e2 <_printf_float+0xb6>
 8008a58:	f04f 0900 	mov.w	r9, #0
 8008a5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a60:	f104 0a1a 	add.w	sl, r4, #26
 8008a64:	45c8      	cmp	r8, r9
 8008a66:	dc09      	bgt.n	8008a7c <_printf_float+0x250>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	079b      	lsls	r3, r3, #30
 8008a6c:	f100 8103 	bmi.w	8008c76 <_printf_float+0x44a>
 8008a70:	68e0      	ldr	r0, [r4, #12]
 8008a72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a74:	4298      	cmp	r0, r3
 8008a76:	bfb8      	it	lt
 8008a78:	4618      	movlt	r0, r3
 8008a7a:	e734      	b.n	80088e6 <_printf_float+0xba>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	4652      	mov	r2, sl
 8008a80:	4631      	mov	r1, r6
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	f43f af2b 	beq.w	80088e2 <_printf_float+0xb6>
 8008a8c:	f109 0901 	add.w	r9, r9, #1
 8008a90:	e7e8      	b.n	8008a64 <_printf_float+0x238>
 8008a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc39      	bgt.n	8008b0c <_printf_float+0x2e0>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008b08 <_printf_float+0x2dc>)
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	47b8      	blx	r7
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	f43f af1d 	beq.w	80088e2 <_printf_float+0xb6>
 8008aa8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008aac:	ea59 0303 	orrs.w	r3, r9, r3
 8008ab0:	d102      	bne.n	8008ab8 <_printf_float+0x28c>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	07d9      	lsls	r1, r3, #31
 8008ab6:	d5d7      	bpl.n	8008a68 <_printf_float+0x23c>
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4628      	mov	r0, r5
 8008abc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	f43f af0d 	beq.w	80088e2 <_printf_float+0xb6>
 8008ac8:	f04f 0a00 	mov.w	sl, #0
 8008acc:	f104 0b1a 	add.w	fp, r4, #26
 8008ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad2:	425b      	negs	r3, r3
 8008ad4:	4553      	cmp	r3, sl
 8008ad6:	dc01      	bgt.n	8008adc <_printf_float+0x2b0>
 8008ad8:	464b      	mov	r3, r9
 8008ada:	e793      	b.n	8008a04 <_printf_float+0x1d8>
 8008adc:	2301      	movs	r3, #1
 8008ade:	465a      	mov	r2, fp
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	47b8      	blx	r7
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	f43f aefb 	beq.w	80088e2 <_printf_float+0xb6>
 8008aec:	f10a 0a01 	add.w	sl, sl, #1
 8008af0:	e7ee      	b.n	8008ad0 <_printf_float+0x2a4>
 8008af2:	bf00      	nop
 8008af4:	7fefffff 	.word	0x7fefffff
 8008af8:	0800d88c 	.word	0x0800d88c
 8008afc:	0800d888 	.word	0x0800d888
 8008b00:	0800d894 	.word	0x0800d894
 8008b04:	0800d890 	.word	0x0800d890
 8008b08:	0800d9ce 	.word	0x0800d9ce
 8008b0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b12:	4553      	cmp	r3, sl
 8008b14:	bfa8      	it	ge
 8008b16:	4653      	movge	r3, sl
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	4699      	mov	r9, r3
 8008b1c:	dc36      	bgt.n	8008b8c <_printf_float+0x360>
 8008b1e:	f04f 0b00 	mov.w	fp, #0
 8008b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b26:	f104 021a 	add.w	r2, r4, #26
 8008b2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b2c:	9306      	str	r3, [sp, #24]
 8008b2e:	eba3 0309 	sub.w	r3, r3, r9
 8008b32:	455b      	cmp	r3, fp
 8008b34:	dc31      	bgt.n	8008b9a <_printf_float+0x36e>
 8008b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b38:	459a      	cmp	sl, r3
 8008b3a:	dc3a      	bgt.n	8008bb2 <_printf_float+0x386>
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	07da      	lsls	r2, r3, #31
 8008b40:	d437      	bmi.n	8008bb2 <_printf_float+0x386>
 8008b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b44:	ebaa 0903 	sub.w	r9, sl, r3
 8008b48:	9b06      	ldr	r3, [sp, #24]
 8008b4a:	ebaa 0303 	sub.w	r3, sl, r3
 8008b4e:	4599      	cmp	r9, r3
 8008b50:	bfa8      	it	ge
 8008b52:	4699      	movge	r9, r3
 8008b54:	f1b9 0f00 	cmp.w	r9, #0
 8008b58:	dc33      	bgt.n	8008bc2 <_printf_float+0x396>
 8008b5a:	f04f 0800 	mov.w	r8, #0
 8008b5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b62:	f104 0b1a 	add.w	fp, r4, #26
 8008b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b68:	ebaa 0303 	sub.w	r3, sl, r3
 8008b6c:	eba3 0309 	sub.w	r3, r3, r9
 8008b70:	4543      	cmp	r3, r8
 8008b72:	f77f af79 	ble.w	8008a68 <_printf_float+0x23c>
 8008b76:	2301      	movs	r3, #1
 8008b78:	465a      	mov	r2, fp
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b8      	blx	r7
 8008b80:	3001      	adds	r0, #1
 8008b82:	f43f aeae 	beq.w	80088e2 <_printf_float+0xb6>
 8008b86:	f108 0801 	add.w	r8, r8, #1
 8008b8a:	e7ec      	b.n	8008b66 <_printf_float+0x33a>
 8008b8c:	4642      	mov	r2, r8
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	d1c2      	bne.n	8008b1e <_printf_float+0x2f2>
 8008b98:	e6a3      	b.n	80088e2 <_printf_float+0xb6>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	9206      	str	r2, [sp, #24]
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	f43f ae9c 	beq.w	80088e2 <_printf_float+0xb6>
 8008baa:	f10b 0b01 	add.w	fp, fp, #1
 8008bae:	9a06      	ldr	r2, [sp, #24]
 8008bb0:	e7bb      	b.n	8008b2a <_printf_float+0x2fe>
 8008bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d1c0      	bne.n	8008b42 <_printf_float+0x316>
 8008bc0:	e68f      	b.n	80088e2 <_printf_float+0xb6>
 8008bc2:	9a06      	ldr	r2, [sp, #24]
 8008bc4:	464b      	mov	r3, r9
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4628      	mov	r0, r5
 8008bca:	4442      	add	r2, r8
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d1c3      	bne.n	8008b5a <_printf_float+0x32e>
 8008bd2:	e686      	b.n	80088e2 <_printf_float+0xb6>
 8008bd4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008bd8:	f1ba 0f01 	cmp.w	sl, #1
 8008bdc:	dc01      	bgt.n	8008be2 <_printf_float+0x3b6>
 8008bde:	07db      	lsls	r3, r3, #31
 8008be0:	d536      	bpl.n	8008c50 <_printf_float+0x424>
 8008be2:	2301      	movs	r3, #1
 8008be4:	4642      	mov	r2, r8
 8008be6:	4631      	mov	r1, r6
 8008be8:	4628      	mov	r0, r5
 8008bea:	47b8      	blx	r7
 8008bec:	3001      	adds	r0, #1
 8008bee:	f43f ae78 	beq.w	80088e2 <_printf_float+0xb6>
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bfa:	47b8      	blx	r7
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	f43f ae70 	beq.w	80088e2 <_printf_float+0xb6>
 8008c02:	2200      	movs	r2, #0
 8008c04:	2300      	movs	r3, #0
 8008c06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c0e:	f7f7 ff3f 	bl	8000a90 <__aeabi_dcmpeq>
 8008c12:	b9c0      	cbnz	r0, 8008c46 <_printf_float+0x41a>
 8008c14:	4653      	mov	r3, sl
 8008c16:	f108 0201 	add.w	r2, r8, #1
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	47b8      	blx	r7
 8008c20:	3001      	adds	r0, #1
 8008c22:	d10c      	bne.n	8008c3e <_printf_float+0x412>
 8008c24:	e65d      	b.n	80088e2 <_printf_float+0xb6>
 8008c26:	2301      	movs	r3, #1
 8008c28:	465a      	mov	r2, fp
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b8      	blx	r7
 8008c30:	3001      	adds	r0, #1
 8008c32:	f43f ae56 	beq.w	80088e2 <_printf_float+0xb6>
 8008c36:	f108 0801 	add.w	r8, r8, #1
 8008c3a:	45d0      	cmp	r8, sl
 8008c3c:	dbf3      	blt.n	8008c26 <_printf_float+0x3fa>
 8008c3e:	464b      	mov	r3, r9
 8008c40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c44:	e6df      	b.n	8008a06 <_printf_float+0x1da>
 8008c46:	f04f 0800 	mov.w	r8, #0
 8008c4a:	f104 0b1a 	add.w	fp, r4, #26
 8008c4e:	e7f4      	b.n	8008c3a <_printf_float+0x40e>
 8008c50:	2301      	movs	r3, #1
 8008c52:	4642      	mov	r2, r8
 8008c54:	e7e1      	b.n	8008c1a <_printf_float+0x3ee>
 8008c56:	2301      	movs	r3, #1
 8008c58:	464a      	mov	r2, r9
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b8      	blx	r7
 8008c60:	3001      	adds	r0, #1
 8008c62:	f43f ae3e 	beq.w	80088e2 <_printf_float+0xb6>
 8008c66:	f108 0801 	add.w	r8, r8, #1
 8008c6a:	68e3      	ldr	r3, [r4, #12]
 8008c6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c6e:	1a5b      	subs	r3, r3, r1
 8008c70:	4543      	cmp	r3, r8
 8008c72:	dcf0      	bgt.n	8008c56 <_printf_float+0x42a>
 8008c74:	e6fc      	b.n	8008a70 <_printf_float+0x244>
 8008c76:	f04f 0800 	mov.w	r8, #0
 8008c7a:	f104 0919 	add.w	r9, r4, #25
 8008c7e:	e7f4      	b.n	8008c6a <_printf_float+0x43e>

08008c80 <_printf_common>:
 8008c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	4616      	mov	r6, r2
 8008c86:	4698      	mov	r8, r3
 8008c88:	688a      	ldr	r2, [r1, #8]
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	690b      	ldr	r3, [r1, #16]
 8008c8e:	460c      	mov	r4, r1
 8008c90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c94:	4293      	cmp	r3, r2
 8008c96:	bfb8      	it	lt
 8008c98:	4613      	movlt	r3, r2
 8008c9a:	6033      	str	r3, [r6, #0]
 8008c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_printf_common+0x26>
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	6033      	str	r3, [r6, #0]
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	0699      	lsls	r1, r3, #26
 8008caa:	bf42      	ittt	mi
 8008cac:	6833      	ldrmi	r3, [r6, #0]
 8008cae:	3302      	addmi	r3, #2
 8008cb0:	6033      	strmi	r3, [r6, #0]
 8008cb2:	6825      	ldr	r5, [r4, #0]
 8008cb4:	f015 0506 	ands.w	r5, r5, #6
 8008cb8:	d106      	bne.n	8008cc8 <_printf_common+0x48>
 8008cba:	f104 0a19 	add.w	sl, r4, #25
 8008cbe:	68e3      	ldr	r3, [r4, #12]
 8008cc0:	6832      	ldr	r2, [r6, #0]
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	42ab      	cmp	r3, r5
 8008cc6:	dc2b      	bgt.n	8008d20 <_printf_common+0xa0>
 8008cc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ccc:	6822      	ldr	r2, [r4, #0]
 8008cce:	3b00      	subs	r3, #0
 8008cd0:	bf18      	it	ne
 8008cd2:	2301      	movne	r3, #1
 8008cd4:	0692      	lsls	r2, r2, #26
 8008cd6:	d430      	bmi.n	8008d3a <_printf_common+0xba>
 8008cd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cdc:	4641      	mov	r1, r8
 8008cde:	4638      	mov	r0, r7
 8008ce0:	47c8      	blx	r9
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d023      	beq.n	8008d2e <_printf_common+0xae>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	341a      	adds	r4, #26
 8008cea:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008cee:	f003 0306 	and.w	r3, r3, #6
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	bf0a      	itet	eq
 8008cf6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008cfa:	2500      	movne	r5, #0
 8008cfc:	6833      	ldreq	r3, [r6, #0]
 8008cfe:	f04f 0600 	mov.w	r6, #0
 8008d02:	bf08      	it	eq
 8008d04:	1aed      	subeq	r5, r5, r3
 8008d06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008d0a:	bf08      	it	eq
 8008d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d10:	4293      	cmp	r3, r2
 8008d12:	bfc4      	itt	gt
 8008d14:	1a9b      	subgt	r3, r3, r2
 8008d16:	18ed      	addgt	r5, r5, r3
 8008d18:	42b5      	cmp	r5, r6
 8008d1a:	d11a      	bne.n	8008d52 <_printf_common+0xd2>
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	e008      	b.n	8008d32 <_printf_common+0xb2>
 8008d20:	2301      	movs	r3, #1
 8008d22:	4652      	mov	r2, sl
 8008d24:	4641      	mov	r1, r8
 8008d26:	4638      	mov	r0, r7
 8008d28:	47c8      	blx	r9
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	d103      	bne.n	8008d36 <_printf_common+0xb6>
 8008d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d36:	3501      	adds	r5, #1
 8008d38:	e7c1      	b.n	8008cbe <_printf_common+0x3e>
 8008d3a:	18e1      	adds	r1, r4, r3
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	2030      	movs	r0, #48	@ 0x30
 8008d40:	3302      	adds	r3, #2
 8008d42:	4422      	add	r2, r4
 8008d44:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d50:	e7c2      	b.n	8008cd8 <_printf_common+0x58>
 8008d52:	2301      	movs	r3, #1
 8008d54:	4622      	mov	r2, r4
 8008d56:	4641      	mov	r1, r8
 8008d58:	4638      	mov	r0, r7
 8008d5a:	47c8      	blx	r9
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d0e6      	beq.n	8008d2e <_printf_common+0xae>
 8008d60:	3601      	adds	r6, #1
 8008d62:	e7d9      	b.n	8008d18 <_printf_common+0x98>

08008d64 <_printf_i>:
 8008d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d68:	7e0f      	ldrb	r7, [r1, #24]
 8008d6a:	4691      	mov	r9, r2
 8008d6c:	4680      	mov	r8, r0
 8008d6e:	460c      	mov	r4, r1
 8008d70:	2f78      	cmp	r7, #120	@ 0x78
 8008d72:	469a      	mov	sl, r3
 8008d74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d7a:	d807      	bhi.n	8008d8c <_printf_i+0x28>
 8008d7c:	2f62      	cmp	r7, #98	@ 0x62
 8008d7e:	d80a      	bhi.n	8008d96 <_printf_i+0x32>
 8008d80:	2f00      	cmp	r7, #0
 8008d82:	f000 80d1 	beq.w	8008f28 <_printf_i+0x1c4>
 8008d86:	2f58      	cmp	r7, #88	@ 0x58
 8008d88:	f000 80b8 	beq.w	8008efc <_printf_i+0x198>
 8008d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d94:	e03a      	b.n	8008e0c <_printf_i+0xa8>
 8008d96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d9a:	2b15      	cmp	r3, #21
 8008d9c:	d8f6      	bhi.n	8008d8c <_printf_i+0x28>
 8008d9e:	a101      	add	r1, pc, #4	@ (adr r1, 8008da4 <_printf_i+0x40>)
 8008da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008da4:	08008dfd 	.word	0x08008dfd
 8008da8:	08008e11 	.word	0x08008e11
 8008dac:	08008d8d 	.word	0x08008d8d
 8008db0:	08008d8d 	.word	0x08008d8d
 8008db4:	08008d8d 	.word	0x08008d8d
 8008db8:	08008d8d 	.word	0x08008d8d
 8008dbc:	08008e11 	.word	0x08008e11
 8008dc0:	08008d8d 	.word	0x08008d8d
 8008dc4:	08008d8d 	.word	0x08008d8d
 8008dc8:	08008d8d 	.word	0x08008d8d
 8008dcc:	08008d8d 	.word	0x08008d8d
 8008dd0:	08008f0f 	.word	0x08008f0f
 8008dd4:	08008e3b 	.word	0x08008e3b
 8008dd8:	08008ec9 	.word	0x08008ec9
 8008ddc:	08008d8d 	.word	0x08008d8d
 8008de0:	08008d8d 	.word	0x08008d8d
 8008de4:	08008f31 	.word	0x08008f31
 8008de8:	08008d8d 	.word	0x08008d8d
 8008dec:	08008e3b 	.word	0x08008e3b
 8008df0:	08008d8d 	.word	0x08008d8d
 8008df4:	08008d8d 	.word	0x08008d8d
 8008df8:	08008ed1 	.word	0x08008ed1
 8008dfc:	6833      	ldr	r3, [r6, #0]
 8008dfe:	1d1a      	adds	r2, r3, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6032      	str	r2, [r6, #0]
 8008e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e09c      	b.n	8008f4a <_printf_i+0x1e6>
 8008e10:	6833      	ldr	r3, [r6, #0]
 8008e12:	6820      	ldr	r0, [r4, #0]
 8008e14:	1d19      	adds	r1, r3, #4
 8008e16:	6031      	str	r1, [r6, #0]
 8008e18:	0606      	lsls	r6, r0, #24
 8008e1a:	d501      	bpl.n	8008e20 <_printf_i+0xbc>
 8008e1c:	681d      	ldr	r5, [r3, #0]
 8008e1e:	e003      	b.n	8008e28 <_printf_i+0xc4>
 8008e20:	0645      	lsls	r5, r0, #25
 8008e22:	d5fb      	bpl.n	8008e1c <_printf_i+0xb8>
 8008e24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e28:	2d00      	cmp	r5, #0
 8008e2a:	da03      	bge.n	8008e34 <_printf_i+0xd0>
 8008e2c:	232d      	movs	r3, #45	@ 0x2d
 8008e2e:	426d      	negs	r5, r5
 8008e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e34:	4858      	ldr	r0, [pc, #352]	@ (8008f98 <_printf_i+0x234>)
 8008e36:	230a      	movs	r3, #10
 8008e38:	e011      	b.n	8008e5e <_printf_i+0xfa>
 8008e3a:	6821      	ldr	r1, [r4, #0]
 8008e3c:	6833      	ldr	r3, [r6, #0]
 8008e3e:	0608      	lsls	r0, r1, #24
 8008e40:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e44:	d402      	bmi.n	8008e4c <_printf_i+0xe8>
 8008e46:	0649      	lsls	r1, r1, #25
 8008e48:	bf48      	it	mi
 8008e4a:	b2ad      	uxthmi	r5, r5
 8008e4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e4e:	6033      	str	r3, [r6, #0]
 8008e50:	4851      	ldr	r0, [pc, #324]	@ (8008f98 <_printf_i+0x234>)
 8008e52:	bf14      	ite	ne
 8008e54:	230a      	movne	r3, #10
 8008e56:	2308      	moveq	r3, #8
 8008e58:	2100      	movs	r1, #0
 8008e5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e5e:	6866      	ldr	r6, [r4, #4]
 8008e60:	2e00      	cmp	r6, #0
 8008e62:	60a6      	str	r6, [r4, #8]
 8008e64:	db05      	blt.n	8008e72 <_printf_i+0x10e>
 8008e66:	6821      	ldr	r1, [r4, #0]
 8008e68:	432e      	orrs	r6, r5
 8008e6a:	f021 0104 	bic.w	r1, r1, #4
 8008e6e:	6021      	str	r1, [r4, #0]
 8008e70:	d04b      	beq.n	8008f0a <_printf_i+0x1a6>
 8008e72:	4616      	mov	r6, r2
 8008e74:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e78:	fb03 5711 	mls	r7, r3, r1, r5
 8008e7c:	5dc7      	ldrb	r7, [r0, r7]
 8008e7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e82:	462f      	mov	r7, r5
 8008e84:	460d      	mov	r5, r1
 8008e86:	42bb      	cmp	r3, r7
 8008e88:	d9f4      	bls.n	8008e74 <_printf_i+0x110>
 8008e8a:	2b08      	cmp	r3, #8
 8008e8c:	d10b      	bne.n	8008ea6 <_printf_i+0x142>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	07df      	lsls	r7, r3, #31
 8008e92:	d508      	bpl.n	8008ea6 <_printf_i+0x142>
 8008e94:	6923      	ldr	r3, [r4, #16]
 8008e96:	6861      	ldr	r1, [r4, #4]
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	bfde      	ittt	le
 8008e9c:	2330      	movle	r3, #48	@ 0x30
 8008e9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ea2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ea6:	1b92      	subs	r2, r2, r6
 8008ea8:	6122      	str	r2, [r4, #16]
 8008eaa:	464b      	mov	r3, r9
 8008eac:	aa03      	add	r2, sp, #12
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	f8cd a000 	str.w	sl, [sp]
 8008eb6:	f7ff fee3 	bl	8008c80 <_printf_common>
 8008eba:	3001      	adds	r0, #1
 8008ebc:	d14a      	bne.n	8008f54 <_printf_i+0x1f0>
 8008ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec2:	b004      	add	sp, #16
 8008ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	f043 0320 	orr.w	r3, r3, #32
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	2778      	movs	r7, #120	@ 0x78
 8008ed2:	4832      	ldr	r0, [pc, #200]	@ (8008f9c <_printf_i+0x238>)
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008eda:	061f      	lsls	r7, r3, #24
 8008edc:	6831      	ldr	r1, [r6, #0]
 8008ede:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ee2:	d402      	bmi.n	8008eea <_printf_i+0x186>
 8008ee4:	065f      	lsls	r7, r3, #25
 8008ee6:	bf48      	it	mi
 8008ee8:	b2ad      	uxthmi	r5, r5
 8008eea:	6031      	str	r1, [r6, #0]
 8008eec:	07d9      	lsls	r1, r3, #31
 8008eee:	bf44      	itt	mi
 8008ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ef4:	6023      	strmi	r3, [r4, #0]
 8008ef6:	b11d      	cbz	r5, 8008f00 <_printf_i+0x19c>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	e7ad      	b.n	8008e58 <_printf_i+0xf4>
 8008efc:	4826      	ldr	r0, [pc, #152]	@ (8008f98 <_printf_i+0x234>)
 8008efe:	e7e9      	b.n	8008ed4 <_printf_i+0x170>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	f023 0320 	bic.w	r3, r3, #32
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	e7f6      	b.n	8008ef8 <_printf_i+0x194>
 8008f0a:	4616      	mov	r6, r2
 8008f0c:	e7bd      	b.n	8008e8a <_printf_i+0x126>
 8008f0e:	6833      	ldr	r3, [r6, #0]
 8008f10:	6825      	ldr	r5, [r4, #0]
 8008f12:	1d18      	adds	r0, r3, #4
 8008f14:	6961      	ldr	r1, [r4, #20]
 8008f16:	6030      	str	r0, [r6, #0]
 8008f18:	062e      	lsls	r6, r5, #24
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	d501      	bpl.n	8008f22 <_printf_i+0x1be>
 8008f1e:	6019      	str	r1, [r3, #0]
 8008f20:	e002      	b.n	8008f28 <_printf_i+0x1c4>
 8008f22:	0668      	lsls	r0, r5, #25
 8008f24:	d5fb      	bpl.n	8008f1e <_printf_i+0x1ba>
 8008f26:	8019      	strh	r1, [r3, #0]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4616      	mov	r6, r2
 8008f2c:	6123      	str	r3, [r4, #16]
 8008f2e:	e7bc      	b.n	8008eaa <_printf_i+0x146>
 8008f30:	6833      	ldr	r3, [r6, #0]
 8008f32:	2100      	movs	r1, #0
 8008f34:	1d1a      	adds	r2, r3, #4
 8008f36:	6032      	str	r2, [r6, #0]
 8008f38:	681e      	ldr	r6, [r3, #0]
 8008f3a:	6862      	ldr	r2, [r4, #4]
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f000 fc82 	bl	8009846 <memchr>
 8008f42:	b108      	cbz	r0, 8008f48 <_printf_i+0x1e4>
 8008f44:	1b80      	subs	r0, r0, r6
 8008f46:	6060      	str	r0, [r4, #4]
 8008f48:	6863      	ldr	r3, [r4, #4]
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f52:	e7aa      	b.n	8008eaa <_printf_i+0x146>
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	4632      	mov	r2, r6
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	47d0      	blx	sl
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d0ad      	beq.n	8008ebe <_printf_i+0x15a>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	079b      	lsls	r3, r3, #30
 8008f66:	d413      	bmi.n	8008f90 <_printf_i+0x22c>
 8008f68:	68e0      	ldr	r0, [r4, #12]
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	4298      	cmp	r0, r3
 8008f6e:	bfb8      	it	lt
 8008f70:	4618      	movlt	r0, r3
 8008f72:	e7a6      	b.n	8008ec2 <_printf_i+0x15e>
 8008f74:	2301      	movs	r3, #1
 8008f76:	4632      	mov	r2, r6
 8008f78:	4649      	mov	r1, r9
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	47d0      	blx	sl
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d09d      	beq.n	8008ebe <_printf_i+0x15a>
 8008f82:	3501      	adds	r5, #1
 8008f84:	68e3      	ldr	r3, [r4, #12]
 8008f86:	9903      	ldr	r1, [sp, #12]
 8008f88:	1a5b      	subs	r3, r3, r1
 8008f8a:	42ab      	cmp	r3, r5
 8008f8c:	dcf2      	bgt.n	8008f74 <_printf_i+0x210>
 8008f8e:	e7eb      	b.n	8008f68 <_printf_i+0x204>
 8008f90:	2500      	movs	r5, #0
 8008f92:	f104 0619 	add.w	r6, r4, #25
 8008f96:	e7f5      	b.n	8008f84 <_printf_i+0x220>
 8008f98:	0800d898 	.word	0x0800d898
 8008f9c:	0800d8a9 	.word	0x0800d8a9

08008fa0 <_scanf_float>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	b087      	sub	sp, #28
 8008fa6:	4691      	mov	r9, r2
 8008fa8:	4680      	mov	r8, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	9303      	str	r3, [sp, #12]
 8008fae:	688b      	ldr	r3, [r1, #8]
 8008fb0:	1e5a      	subs	r2, r3, #1
 8008fb2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008fb6:	460a      	mov	r2, r1
 8008fb8:	bf89      	itett	hi
 8008fba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008fbe:	f04f 0b00 	movls.w	fp, #0
 8008fc2:	eb03 0b05 	addhi.w	fp, r3, r5
 8008fc6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008fca:	f04f 0500 	mov.w	r5, #0
 8008fce:	bf88      	it	hi
 8008fd0:	608b      	strhi	r3, [r1, #8]
 8008fd2:	680b      	ldr	r3, [r1, #0]
 8008fd4:	46aa      	mov	sl, r5
 8008fd6:	462f      	mov	r7, r5
 8008fd8:	9502      	str	r5, [sp, #8]
 8008fda:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008fde:	f842 3b1c 	str.w	r3, [r2], #28
 8008fe2:	4616      	mov	r6, r2
 8008fe4:	9201      	str	r2, [sp, #4]
 8008fe6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008fea:	68a2      	ldr	r2, [r4, #8]
 8008fec:	b15a      	cbz	r2, 8009006 <_scanf_float+0x66>
 8008fee:	f8d9 3000 	ldr.w	r3, [r9]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b4e      	cmp	r3, #78	@ 0x4e
 8008ff6:	d863      	bhi.n	80090c0 <_scanf_float+0x120>
 8008ff8:	2b40      	cmp	r3, #64	@ 0x40
 8008ffa:	d83b      	bhi.n	8009074 <_scanf_float+0xd4>
 8008ffc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009000:	b2c8      	uxtb	r0, r1
 8009002:	280e      	cmp	r0, #14
 8009004:	d939      	bls.n	800907a <_scanf_float+0xda>
 8009006:	b11f      	cbz	r7, 8009010 <_scanf_float+0x70>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800900e:	6023      	str	r3, [r4, #0]
 8009010:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009014:	f1ba 0f01 	cmp.w	sl, #1
 8009018:	f200 8115 	bhi.w	8009246 <_scanf_float+0x2a6>
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	429e      	cmp	r6, r3
 8009020:	f200 8106 	bhi.w	8009230 <_scanf_float+0x290>
 8009024:	2001      	movs	r0, #1
 8009026:	b007      	add	sp, #28
 8009028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009030:	2a0d      	cmp	r2, #13
 8009032:	d8e8      	bhi.n	8009006 <_scanf_float+0x66>
 8009034:	a101      	add	r1, pc, #4	@ (adr r1, 800903c <_scanf_float+0x9c>)
 8009036:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800903a:	bf00      	nop
 800903c:	08009185 	.word	0x08009185
 8009040:	08009007 	.word	0x08009007
 8009044:	08009007 	.word	0x08009007
 8009048:	08009007 	.word	0x08009007
 800904c:	080091e1 	.word	0x080091e1
 8009050:	080091bb 	.word	0x080091bb
 8009054:	08009007 	.word	0x08009007
 8009058:	08009007 	.word	0x08009007
 800905c:	08009193 	.word	0x08009193
 8009060:	08009007 	.word	0x08009007
 8009064:	08009007 	.word	0x08009007
 8009068:	08009007 	.word	0x08009007
 800906c:	08009007 	.word	0x08009007
 8009070:	0800914f 	.word	0x0800914f
 8009074:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009078:	e7da      	b.n	8009030 <_scanf_float+0x90>
 800907a:	290e      	cmp	r1, #14
 800907c:	d8c3      	bhi.n	8009006 <_scanf_float+0x66>
 800907e:	a001      	add	r0, pc, #4	@ (adr r0, 8009084 <_scanf_float+0xe4>)
 8009080:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009084:	0800913f 	.word	0x0800913f
 8009088:	08009007 	.word	0x08009007
 800908c:	0800913f 	.word	0x0800913f
 8009090:	080091cf 	.word	0x080091cf
 8009094:	08009007 	.word	0x08009007
 8009098:	080090e1 	.word	0x080090e1
 800909c:	08009125 	.word	0x08009125
 80090a0:	08009125 	.word	0x08009125
 80090a4:	08009125 	.word	0x08009125
 80090a8:	08009125 	.word	0x08009125
 80090ac:	08009125 	.word	0x08009125
 80090b0:	08009125 	.word	0x08009125
 80090b4:	08009125 	.word	0x08009125
 80090b8:	08009125 	.word	0x08009125
 80090bc:	08009125 	.word	0x08009125
 80090c0:	2b6e      	cmp	r3, #110	@ 0x6e
 80090c2:	d809      	bhi.n	80090d8 <_scanf_float+0x138>
 80090c4:	2b60      	cmp	r3, #96	@ 0x60
 80090c6:	d8b1      	bhi.n	800902c <_scanf_float+0x8c>
 80090c8:	2b54      	cmp	r3, #84	@ 0x54
 80090ca:	d07b      	beq.n	80091c4 <_scanf_float+0x224>
 80090cc:	2b59      	cmp	r3, #89	@ 0x59
 80090ce:	d19a      	bne.n	8009006 <_scanf_float+0x66>
 80090d0:	2d07      	cmp	r5, #7
 80090d2:	d198      	bne.n	8009006 <_scanf_float+0x66>
 80090d4:	2508      	movs	r5, #8
 80090d6:	e02f      	b.n	8009138 <_scanf_float+0x198>
 80090d8:	2b74      	cmp	r3, #116	@ 0x74
 80090da:	d073      	beq.n	80091c4 <_scanf_float+0x224>
 80090dc:	2b79      	cmp	r3, #121	@ 0x79
 80090de:	e7f6      	b.n	80090ce <_scanf_float+0x12e>
 80090e0:	6821      	ldr	r1, [r4, #0]
 80090e2:	05c8      	lsls	r0, r1, #23
 80090e4:	d51e      	bpl.n	8009124 <_scanf_float+0x184>
 80090e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80090ea:	3701      	adds	r7, #1
 80090ec:	6021      	str	r1, [r4, #0]
 80090ee:	f1bb 0f00 	cmp.w	fp, #0
 80090f2:	d003      	beq.n	80090fc <_scanf_float+0x15c>
 80090f4:	3201      	adds	r2, #1
 80090f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090fa:	60a2      	str	r2, [r4, #8]
 80090fc:	68a3      	ldr	r3, [r4, #8]
 80090fe:	3b01      	subs	r3, #1
 8009100:	60a3      	str	r3, [r4, #8]
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	3301      	adds	r3, #1
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800910c:	3b01      	subs	r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	f8c9 3004 	str.w	r3, [r9, #4]
 8009114:	f340 8083 	ble.w	800921e <_scanf_float+0x27e>
 8009118:	f8d9 3000 	ldr.w	r3, [r9]
 800911c:	3301      	adds	r3, #1
 800911e:	f8c9 3000 	str.w	r3, [r9]
 8009122:	e762      	b.n	8008fea <_scanf_float+0x4a>
 8009124:	eb1a 0105 	adds.w	r1, sl, r5
 8009128:	f47f af6d 	bne.w	8009006 <_scanf_float+0x66>
 800912c:	6822      	ldr	r2, [r4, #0]
 800912e:	460d      	mov	r5, r1
 8009130:	468a      	mov	sl, r1
 8009132:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009136:	6022      	str	r2, [r4, #0]
 8009138:	f806 3b01 	strb.w	r3, [r6], #1
 800913c:	e7de      	b.n	80090fc <_scanf_float+0x15c>
 800913e:	6822      	ldr	r2, [r4, #0]
 8009140:	0610      	lsls	r0, r2, #24
 8009142:	f57f af60 	bpl.w	8009006 <_scanf_float+0x66>
 8009146:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800914a:	6022      	str	r2, [r4, #0]
 800914c:	e7f4      	b.n	8009138 <_scanf_float+0x198>
 800914e:	f1ba 0f00 	cmp.w	sl, #0
 8009152:	d10c      	bne.n	800916e <_scanf_float+0x1ce>
 8009154:	b977      	cbnz	r7, 8009174 <_scanf_float+0x1d4>
 8009156:	6822      	ldr	r2, [r4, #0]
 8009158:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800915c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009160:	d108      	bne.n	8009174 <_scanf_float+0x1d4>
 8009162:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009166:	f04f 0a01 	mov.w	sl, #1
 800916a:	6022      	str	r2, [r4, #0]
 800916c:	e7e4      	b.n	8009138 <_scanf_float+0x198>
 800916e:	f1ba 0f02 	cmp.w	sl, #2
 8009172:	d051      	beq.n	8009218 <_scanf_float+0x278>
 8009174:	2d01      	cmp	r5, #1
 8009176:	d002      	beq.n	800917e <_scanf_float+0x1de>
 8009178:	2d04      	cmp	r5, #4
 800917a:	f47f af44 	bne.w	8009006 <_scanf_float+0x66>
 800917e:	3501      	adds	r5, #1
 8009180:	b2ed      	uxtb	r5, r5
 8009182:	e7d9      	b.n	8009138 <_scanf_float+0x198>
 8009184:	f1ba 0f01 	cmp.w	sl, #1
 8009188:	f47f af3d 	bne.w	8009006 <_scanf_float+0x66>
 800918c:	f04f 0a02 	mov.w	sl, #2
 8009190:	e7d2      	b.n	8009138 <_scanf_float+0x198>
 8009192:	b975      	cbnz	r5, 80091b2 <_scanf_float+0x212>
 8009194:	2f00      	cmp	r7, #0
 8009196:	f47f af37 	bne.w	8009008 <_scanf_float+0x68>
 800919a:	6822      	ldr	r2, [r4, #0]
 800919c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80091a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80091a4:	f040 8103 	bne.w	80093ae <_scanf_float+0x40e>
 80091a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80091ac:	2501      	movs	r5, #1
 80091ae:	6022      	str	r2, [r4, #0]
 80091b0:	e7c2      	b.n	8009138 <_scanf_float+0x198>
 80091b2:	2d03      	cmp	r5, #3
 80091b4:	d0e3      	beq.n	800917e <_scanf_float+0x1de>
 80091b6:	2d05      	cmp	r5, #5
 80091b8:	e7df      	b.n	800917a <_scanf_float+0x1da>
 80091ba:	2d02      	cmp	r5, #2
 80091bc:	f47f af23 	bne.w	8009006 <_scanf_float+0x66>
 80091c0:	2503      	movs	r5, #3
 80091c2:	e7b9      	b.n	8009138 <_scanf_float+0x198>
 80091c4:	2d06      	cmp	r5, #6
 80091c6:	f47f af1e 	bne.w	8009006 <_scanf_float+0x66>
 80091ca:	2507      	movs	r5, #7
 80091cc:	e7b4      	b.n	8009138 <_scanf_float+0x198>
 80091ce:	6822      	ldr	r2, [r4, #0]
 80091d0:	0591      	lsls	r1, r2, #22
 80091d2:	f57f af18 	bpl.w	8009006 <_scanf_float+0x66>
 80091d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80091da:	9702      	str	r7, [sp, #8]
 80091dc:	6022      	str	r2, [r4, #0]
 80091de:	e7ab      	b.n	8009138 <_scanf_float+0x198>
 80091e0:	6822      	ldr	r2, [r4, #0]
 80091e2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80091e6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80091ea:	d005      	beq.n	80091f8 <_scanf_float+0x258>
 80091ec:	0550      	lsls	r0, r2, #21
 80091ee:	f57f af0a 	bpl.w	8009006 <_scanf_float+0x66>
 80091f2:	2f00      	cmp	r7, #0
 80091f4:	f000 80db 	beq.w	80093ae <_scanf_float+0x40e>
 80091f8:	0591      	lsls	r1, r2, #22
 80091fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80091fe:	bf58      	it	pl
 8009200:	9902      	ldrpl	r1, [sp, #8]
 8009202:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009206:	bf58      	it	pl
 8009208:	1a79      	subpl	r1, r7, r1
 800920a:	6022      	str	r2, [r4, #0]
 800920c:	f04f 0700 	mov.w	r7, #0
 8009210:	bf58      	it	pl
 8009212:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009216:	e78f      	b.n	8009138 <_scanf_float+0x198>
 8009218:	f04f 0a03 	mov.w	sl, #3
 800921c:	e78c      	b.n	8009138 <_scanf_float+0x198>
 800921e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009222:	4649      	mov	r1, r9
 8009224:	4640      	mov	r0, r8
 8009226:	4798      	blx	r3
 8009228:	2800      	cmp	r0, #0
 800922a:	f43f aede 	beq.w	8008fea <_scanf_float+0x4a>
 800922e:	e6ea      	b.n	8009006 <_scanf_float+0x66>
 8009230:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009234:	464a      	mov	r2, r9
 8009236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800923a:	4640      	mov	r0, r8
 800923c:	4798      	blx	r3
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	3b01      	subs	r3, #1
 8009242:	6123      	str	r3, [r4, #16]
 8009244:	e6ea      	b.n	800901c <_scanf_float+0x7c>
 8009246:	1e6b      	subs	r3, r5, #1
 8009248:	2b06      	cmp	r3, #6
 800924a:	d824      	bhi.n	8009296 <_scanf_float+0x2f6>
 800924c:	2d02      	cmp	r5, #2
 800924e:	d836      	bhi.n	80092be <_scanf_float+0x31e>
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	429e      	cmp	r6, r3
 8009254:	f67f aee6 	bls.w	8009024 <_scanf_float+0x84>
 8009258:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800925c:	464a      	mov	r2, r9
 800925e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009262:	4640      	mov	r0, r8
 8009264:	4798      	blx	r3
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	3b01      	subs	r3, #1
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	e7f0      	b.n	8009250 <_scanf_float+0x2b0>
 800926e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009272:	464a      	mov	r2, r9
 8009274:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009278:	4640      	mov	r0, r8
 800927a:	4798      	blx	r3
 800927c:	6923      	ldr	r3, [r4, #16]
 800927e:	3b01      	subs	r3, #1
 8009280:	6123      	str	r3, [r4, #16]
 8009282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009286:	fa5f fa8a 	uxtb.w	sl, sl
 800928a:	f1ba 0f02 	cmp.w	sl, #2
 800928e:	d1ee      	bne.n	800926e <_scanf_float+0x2ce>
 8009290:	3d03      	subs	r5, #3
 8009292:	b2ed      	uxtb	r5, r5
 8009294:	1b76      	subs	r6, r6, r5
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	05da      	lsls	r2, r3, #23
 800929a:	d52f      	bpl.n	80092fc <_scanf_float+0x35c>
 800929c:	055b      	lsls	r3, r3, #21
 800929e:	d511      	bpl.n	80092c4 <_scanf_float+0x324>
 80092a0:	9b01      	ldr	r3, [sp, #4]
 80092a2:	429e      	cmp	r6, r3
 80092a4:	f67f aebe 	bls.w	8009024 <_scanf_float+0x84>
 80092a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092ac:	464a      	mov	r2, r9
 80092ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092b2:	4640      	mov	r0, r8
 80092b4:	4798      	blx	r3
 80092b6:	6923      	ldr	r3, [r4, #16]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	6123      	str	r3, [r4, #16]
 80092bc:	e7f0      	b.n	80092a0 <_scanf_float+0x300>
 80092be:	46aa      	mov	sl, r5
 80092c0:	46b3      	mov	fp, r6
 80092c2:	e7de      	b.n	8009282 <_scanf_float+0x2e2>
 80092c4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80092c8:	1e75      	subs	r5, r6, #1
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	2965      	cmp	r1, #101	@ 0x65
 80092ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	d00c      	beq.n	80092f0 <_scanf_float+0x350>
 80092d6:	2945      	cmp	r1, #69	@ 0x45
 80092d8:	d00a      	beq.n	80092f0 <_scanf_float+0x350>
 80092da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092de:	464a      	mov	r2, r9
 80092e0:	4640      	mov	r0, r8
 80092e2:	1eb5      	subs	r5, r6, #2
 80092e4:	4798      	blx	r3
 80092e6:	6923      	ldr	r3, [r4, #16]
 80092e8:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	6123      	str	r3, [r4, #16]
 80092f0:	462e      	mov	r6, r5
 80092f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092f6:	464a      	mov	r2, r9
 80092f8:	4640      	mov	r0, r8
 80092fa:	4798      	blx	r3
 80092fc:	6822      	ldr	r2, [r4, #0]
 80092fe:	f012 0210 	ands.w	r2, r2, #16
 8009302:	d001      	beq.n	8009308 <_scanf_float+0x368>
 8009304:	2000      	movs	r0, #0
 8009306:	e68e      	b.n	8009026 <_scanf_float+0x86>
 8009308:	7032      	strb	r2, [r6, #0]
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009314:	d125      	bne.n	8009362 <_scanf_float+0x3c2>
 8009316:	9b02      	ldr	r3, [sp, #8]
 8009318:	429f      	cmp	r7, r3
 800931a:	d00a      	beq.n	8009332 <_scanf_float+0x392>
 800931c:	1bda      	subs	r2, r3, r7
 800931e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009322:	4924      	ldr	r1, [pc, #144]	@ (80093b4 <_scanf_float+0x414>)
 8009324:	429e      	cmp	r6, r3
 8009326:	bf28      	it	cs
 8009328:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800932c:	4630      	mov	r0, r6
 800932e:	f000 f93d 	bl	80095ac <siprintf>
 8009332:	2200      	movs	r2, #0
 8009334:	9901      	ldr	r1, [sp, #4]
 8009336:	4640      	mov	r0, r8
 8009338:	f002 fcb6 	bl	800bca8 <_strtod_r>
 800933c:	6821      	ldr	r1, [r4, #0]
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	f011 0f02 	tst.w	r1, #2
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	ec57 6b10 	vmov	r6, r7, d0
 800934a:	f103 0204 	add.w	r2, r3, #4
 800934e:	d015      	beq.n	800937c <_scanf_float+0x3dc>
 8009350:	9903      	ldr	r1, [sp, #12]
 8009352:	600a      	str	r2, [r1, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	e9c3 6700 	strd	r6, r7, [r3]
 800935a:	68e3      	ldr	r3, [r4, #12]
 800935c:	3301      	adds	r3, #1
 800935e:	60e3      	str	r3, [r4, #12]
 8009360:	e7d0      	b.n	8009304 <_scanf_float+0x364>
 8009362:	9b04      	ldr	r3, [sp, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0e4      	beq.n	8009332 <_scanf_float+0x392>
 8009368:	9905      	ldr	r1, [sp, #20]
 800936a:	230a      	movs	r3, #10
 800936c:	4640      	mov	r0, r8
 800936e:	3101      	adds	r1, #1
 8009370:	f002 fd1a 	bl	800bda8 <_strtol_r>
 8009374:	9b04      	ldr	r3, [sp, #16]
 8009376:	9e05      	ldr	r6, [sp, #20]
 8009378:	1ac2      	subs	r2, r0, r3
 800937a:	e7d0      	b.n	800931e <_scanf_float+0x37e>
 800937c:	f011 0f04 	tst.w	r1, #4
 8009380:	9903      	ldr	r1, [sp, #12]
 8009382:	600a      	str	r2, [r1, #0]
 8009384:	d1e6      	bne.n	8009354 <_scanf_float+0x3b4>
 8009386:	681d      	ldr	r5, [r3, #0]
 8009388:	4632      	mov	r2, r6
 800938a:	463b      	mov	r3, r7
 800938c:	4630      	mov	r0, r6
 800938e:	4639      	mov	r1, r7
 8009390:	f7f7 fbb0 	bl	8000af4 <__aeabi_dcmpun>
 8009394:	b128      	cbz	r0, 80093a2 <_scanf_float+0x402>
 8009396:	4808      	ldr	r0, [pc, #32]	@ (80093b8 <_scanf_float+0x418>)
 8009398:	f000 fa64 	bl	8009864 <nanf>
 800939c:	ed85 0a00 	vstr	s0, [r5]
 80093a0:	e7db      	b.n	800935a <_scanf_float+0x3ba>
 80093a2:	4630      	mov	r0, r6
 80093a4:	4639      	mov	r1, r7
 80093a6:	f7f7 fc03 	bl	8000bb0 <__aeabi_d2f>
 80093aa:	6028      	str	r0, [r5, #0]
 80093ac:	e7d5      	b.n	800935a <_scanf_float+0x3ba>
 80093ae:	2700      	movs	r7, #0
 80093b0:	e62e      	b.n	8009010 <_scanf_float+0x70>
 80093b2:	bf00      	nop
 80093b4:	0800d8ba 	.word	0x0800d8ba
 80093b8:	0800da16 	.word	0x0800da16

080093bc <std>:
 80093bc:	2300      	movs	r3, #0
 80093be:	b510      	push	{r4, lr}
 80093c0:	4604      	mov	r4, r0
 80093c2:	6083      	str	r3, [r0, #8]
 80093c4:	8181      	strh	r1, [r0, #12]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6643      	str	r3, [r0, #100]	@ 0x64
 80093ca:	81c2      	strh	r2, [r0, #14]
 80093cc:	2208      	movs	r2, #8
 80093ce:	6183      	str	r3, [r0, #24]
 80093d0:	e9c0 3300 	strd	r3, r3, [r0]
 80093d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093d8:	305c      	adds	r0, #92	@ 0x5c
 80093da:	f000 f97a 	bl	80096d2 <memset>
 80093de:	4b0d      	ldr	r3, [pc, #52]	@ (8009414 <std+0x58>)
 80093e0:	6224      	str	r4, [r4, #32]
 80093e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80093e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009418 <std+0x5c>)
 80093e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093e8:	4b0c      	ldr	r3, [pc, #48]	@ (800941c <std+0x60>)
 80093ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009420 <std+0x64>)
 80093ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80093f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009424 <std+0x68>)
 80093f2:	429c      	cmp	r4, r3
 80093f4:	d006      	beq.n	8009404 <std+0x48>
 80093f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093fa:	4294      	cmp	r4, r2
 80093fc:	d002      	beq.n	8009404 <std+0x48>
 80093fe:	33d0      	adds	r3, #208	@ 0xd0
 8009400:	429c      	cmp	r4, r3
 8009402:	d105      	bne.n	8009410 <std+0x54>
 8009404:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800940c:	f000 ba18 	b.w	8009840 <__retarget_lock_init_recursive>
 8009410:	bd10      	pop	{r4, pc}
 8009412:	bf00      	nop
 8009414:	08009649 	.word	0x08009649
 8009418:	0800966f 	.word	0x0800966f
 800941c:	080096a7 	.word	0x080096a7
 8009420:	080096cb 	.word	0x080096cb
 8009424:	200003ac 	.word	0x200003ac

08009428 <stdio_exit_handler>:
 8009428:	4a02      	ldr	r2, [pc, #8]	@ (8009434 <stdio_exit_handler+0xc>)
 800942a:	4903      	ldr	r1, [pc, #12]	@ (8009438 <stdio_exit_handler+0x10>)
 800942c:	4803      	ldr	r0, [pc, #12]	@ (800943c <stdio_exit_handler+0x14>)
 800942e:	f000 b869 	b.w	8009504 <_fwalk_sglue>
 8009432:	bf00      	nop
 8009434:	2000000c 	.word	0x2000000c
 8009438:	0800c79d 	.word	0x0800c79d
 800943c:	2000001c 	.word	0x2000001c

08009440 <cleanup_stdio>:
 8009440:	6841      	ldr	r1, [r0, #4]
 8009442:	4b0c      	ldr	r3, [pc, #48]	@ (8009474 <cleanup_stdio+0x34>)
 8009444:	4299      	cmp	r1, r3
 8009446:	b510      	push	{r4, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	d001      	beq.n	8009450 <cleanup_stdio+0x10>
 800944c:	f003 f9a6 	bl	800c79c <_fflush_r>
 8009450:	68a1      	ldr	r1, [r4, #8]
 8009452:	4b09      	ldr	r3, [pc, #36]	@ (8009478 <cleanup_stdio+0x38>)
 8009454:	4299      	cmp	r1, r3
 8009456:	d002      	beq.n	800945e <cleanup_stdio+0x1e>
 8009458:	4620      	mov	r0, r4
 800945a:	f003 f99f 	bl	800c79c <_fflush_r>
 800945e:	68e1      	ldr	r1, [r4, #12]
 8009460:	4b06      	ldr	r3, [pc, #24]	@ (800947c <cleanup_stdio+0x3c>)
 8009462:	4299      	cmp	r1, r3
 8009464:	d004      	beq.n	8009470 <cleanup_stdio+0x30>
 8009466:	4620      	mov	r0, r4
 8009468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800946c:	f003 b996 	b.w	800c79c <_fflush_r>
 8009470:	bd10      	pop	{r4, pc}
 8009472:	bf00      	nop
 8009474:	200003ac 	.word	0x200003ac
 8009478:	20000414 	.word	0x20000414
 800947c:	2000047c 	.word	0x2000047c

08009480 <global_stdio_init.part.0>:
 8009480:	b510      	push	{r4, lr}
 8009482:	4b0b      	ldr	r3, [pc, #44]	@ (80094b0 <global_stdio_init.part.0+0x30>)
 8009484:	2104      	movs	r1, #4
 8009486:	4c0b      	ldr	r4, [pc, #44]	@ (80094b4 <global_stdio_init.part.0+0x34>)
 8009488:	4a0b      	ldr	r2, [pc, #44]	@ (80094b8 <global_stdio_init.part.0+0x38>)
 800948a:	4620      	mov	r0, r4
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	2200      	movs	r2, #0
 8009490:	f7ff ff94 	bl	80093bc <std>
 8009494:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009498:	2201      	movs	r2, #1
 800949a:	2109      	movs	r1, #9
 800949c:	f7ff ff8e 	bl	80093bc <std>
 80094a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094a4:	2202      	movs	r2, #2
 80094a6:	2112      	movs	r1, #18
 80094a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094ac:	f7ff bf86 	b.w	80093bc <std>
 80094b0:	200004e4 	.word	0x200004e4
 80094b4:	200003ac 	.word	0x200003ac
 80094b8:	08009429 	.word	0x08009429

080094bc <__sfp_lock_acquire>:
 80094bc:	4801      	ldr	r0, [pc, #4]	@ (80094c4 <__sfp_lock_acquire+0x8>)
 80094be:	f000 b9c0 	b.w	8009842 <__retarget_lock_acquire_recursive>
 80094c2:	bf00      	nop
 80094c4:	200004ed 	.word	0x200004ed

080094c8 <__sfp_lock_release>:
 80094c8:	4801      	ldr	r0, [pc, #4]	@ (80094d0 <__sfp_lock_release+0x8>)
 80094ca:	f000 b9bb 	b.w	8009844 <__retarget_lock_release_recursive>
 80094ce:	bf00      	nop
 80094d0:	200004ed 	.word	0x200004ed

080094d4 <__sinit>:
 80094d4:	b510      	push	{r4, lr}
 80094d6:	4604      	mov	r4, r0
 80094d8:	f7ff fff0 	bl	80094bc <__sfp_lock_acquire>
 80094dc:	6a23      	ldr	r3, [r4, #32]
 80094de:	b11b      	cbz	r3, 80094e8 <__sinit+0x14>
 80094e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e4:	f7ff bff0 	b.w	80094c8 <__sfp_lock_release>
 80094e8:	4b04      	ldr	r3, [pc, #16]	@ (80094fc <__sinit+0x28>)
 80094ea:	6223      	str	r3, [r4, #32]
 80094ec:	4b04      	ldr	r3, [pc, #16]	@ (8009500 <__sinit+0x2c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1f5      	bne.n	80094e0 <__sinit+0xc>
 80094f4:	f7ff ffc4 	bl	8009480 <global_stdio_init.part.0>
 80094f8:	e7f2      	b.n	80094e0 <__sinit+0xc>
 80094fa:	bf00      	nop
 80094fc:	08009441 	.word	0x08009441
 8009500:	200004e4 	.word	0x200004e4

08009504 <_fwalk_sglue>:
 8009504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009508:	4607      	mov	r7, r0
 800950a:	4688      	mov	r8, r1
 800950c:	4614      	mov	r4, r2
 800950e:	2600      	movs	r6, #0
 8009510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009514:	f1b9 0901 	subs.w	r9, r9, #1
 8009518:	d505      	bpl.n	8009526 <_fwalk_sglue+0x22>
 800951a:	6824      	ldr	r4, [r4, #0]
 800951c:	2c00      	cmp	r4, #0
 800951e:	d1f7      	bne.n	8009510 <_fwalk_sglue+0xc>
 8009520:	4630      	mov	r0, r6
 8009522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009526:	89ab      	ldrh	r3, [r5, #12]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d907      	bls.n	800953c <_fwalk_sglue+0x38>
 800952c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009530:	3301      	adds	r3, #1
 8009532:	d003      	beq.n	800953c <_fwalk_sglue+0x38>
 8009534:	4629      	mov	r1, r5
 8009536:	4638      	mov	r0, r7
 8009538:	47c0      	blx	r8
 800953a:	4306      	orrs	r6, r0
 800953c:	3568      	adds	r5, #104	@ 0x68
 800953e:	e7e9      	b.n	8009514 <_fwalk_sglue+0x10>

08009540 <sniprintf>:
 8009540:	b40c      	push	{r2, r3}
 8009542:	4b19      	ldr	r3, [pc, #100]	@ (80095a8 <sniprintf+0x68>)
 8009544:	b530      	push	{r4, r5, lr}
 8009546:	1e0c      	subs	r4, r1, #0
 8009548:	b09d      	sub	sp, #116	@ 0x74
 800954a:	681d      	ldr	r5, [r3, #0]
 800954c:	da08      	bge.n	8009560 <sniprintf+0x20>
 800954e:	238b      	movs	r3, #139	@ 0x8b
 8009550:	f04f 30ff 	mov.w	r0, #4294967295
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	b01d      	add	sp, #116	@ 0x74
 8009558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800955c:	b002      	add	sp, #8
 800955e:	4770      	bx	lr
 8009560:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009564:	9002      	str	r0, [sp, #8]
 8009566:	9006      	str	r0, [sp, #24]
 8009568:	a902      	add	r1, sp, #8
 800956a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009574:	4628      	mov	r0, r5
 8009576:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009578:	bf14      	ite	ne
 800957a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800957e:	4623      	moveq	r3, r4
 8009580:	9304      	str	r3, [sp, #16]
 8009582:	9307      	str	r3, [sp, #28]
 8009584:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009588:	f8ad 3016 	strh.w	r3, [sp, #22]
 800958c:	ab21      	add	r3, sp, #132	@ 0x84
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	f002 fc68 	bl	800be64 <_svfiprintf_r>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	bfbc      	itt	lt
 8009598:	238b      	movlt	r3, #139	@ 0x8b
 800959a:	602b      	strlt	r3, [r5, #0]
 800959c:	2c00      	cmp	r4, #0
 800959e:	d0da      	beq.n	8009556 <sniprintf+0x16>
 80095a0:	9b02      	ldr	r3, [sp, #8]
 80095a2:	2200      	movs	r2, #0
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	e7d6      	b.n	8009556 <sniprintf+0x16>
 80095a8:	20000018 	.word	0x20000018

080095ac <siprintf>:
 80095ac:	b40e      	push	{r1, r2, r3}
 80095ae:	b510      	push	{r4, lr}
 80095b0:	b09d      	sub	sp, #116	@ 0x74
 80095b2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80095b6:	2400      	movs	r4, #0
 80095b8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80095ba:	9002      	str	r0, [sp, #8]
 80095bc:	9006      	str	r0, [sp, #24]
 80095be:	9107      	str	r1, [sp, #28]
 80095c0:	9104      	str	r1, [sp, #16]
 80095c2:	4809      	ldr	r0, [pc, #36]	@ (80095e8 <siprintf+0x3c>)
 80095c4:	4909      	ldr	r1, [pc, #36]	@ (80095ec <siprintf+0x40>)
 80095c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ca:	9105      	str	r1, [sp, #20]
 80095cc:	a902      	add	r1, sp, #8
 80095ce:	6800      	ldr	r0, [r0, #0]
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80095d4:	f002 fc46 	bl	800be64 <_svfiprintf_r>
 80095d8:	9b02      	ldr	r3, [sp, #8]
 80095da:	701c      	strb	r4, [r3, #0]
 80095dc:	b01d      	add	sp, #116	@ 0x74
 80095de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e2:	b003      	add	sp, #12
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	20000018 	.word	0x20000018
 80095ec:	ffff0208 	.word	0xffff0208

080095f0 <siscanf>:
 80095f0:	b40e      	push	{r1, r2, r3}
 80095f2:	b570      	push	{r4, r5, r6, lr}
 80095f4:	b09d      	sub	sp, #116	@ 0x74
 80095f6:	2500      	movs	r5, #0
 80095f8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80095fc:	ac21      	add	r4, sp, #132	@ 0x84
 80095fe:	951b      	str	r5, [sp, #108]	@ 0x6c
 8009600:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009604:	f854 6b04 	ldr.w	r6, [r4], #4
 8009608:	9002      	str	r0, [sp, #8]
 800960a:	9006      	str	r0, [sp, #24]
 800960c:	f7f6 fe14 	bl	8000238 <strlen>
 8009610:	4b0b      	ldr	r3, [pc, #44]	@ (8009640 <siscanf+0x50>)
 8009612:	4632      	mov	r2, r6
 8009614:	9003      	str	r0, [sp, #12]
 8009616:	a902      	add	r1, sp, #8
 8009618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800961a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800961e:	9007      	str	r0, [sp, #28]
 8009620:	4808      	ldr	r0, [pc, #32]	@ (8009644 <siscanf+0x54>)
 8009622:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009626:	4623      	mov	r3, r4
 8009628:	6800      	ldr	r0, [r0, #0]
 800962a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800962c:	9514      	str	r5, [sp, #80]	@ 0x50
 800962e:	9401      	str	r4, [sp, #4]
 8009630:	f002 fd6e 	bl	800c110 <__ssvfiscanf_r>
 8009634:	b01d      	add	sp, #116	@ 0x74
 8009636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800963a:	b003      	add	sp, #12
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	0800966b 	.word	0x0800966b
 8009644:	20000018 	.word	0x20000018

08009648 <__sread>:
 8009648:	b510      	push	{r4, lr}
 800964a:	460c      	mov	r4, r1
 800964c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009650:	f000 f8a8 	bl	80097a4 <_read_r>
 8009654:	2800      	cmp	r0, #0
 8009656:	bfab      	itete	ge
 8009658:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800965a:	89a3      	ldrhlt	r3, [r4, #12]
 800965c:	181b      	addge	r3, r3, r0
 800965e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009662:	bfac      	ite	ge
 8009664:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009666:	81a3      	strhlt	r3, [r4, #12]
 8009668:	bd10      	pop	{r4, pc}

0800966a <__seofread>:
 800966a:	2000      	movs	r0, #0
 800966c:	4770      	bx	lr

0800966e <__swrite>:
 800966e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009672:	461f      	mov	r7, r3
 8009674:	898b      	ldrh	r3, [r1, #12]
 8009676:	4605      	mov	r5, r0
 8009678:	460c      	mov	r4, r1
 800967a:	05db      	lsls	r3, r3, #23
 800967c:	4616      	mov	r6, r2
 800967e:	d505      	bpl.n	800968c <__swrite+0x1e>
 8009680:	2302      	movs	r3, #2
 8009682:	2200      	movs	r2, #0
 8009684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009688:	f000 f87a 	bl	8009780 <_lseek_r>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	4632      	mov	r2, r6
 8009690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009694:	4628      	mov	r0, r5
 8009696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	463b      	mov	r3, r7
 800969e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096a2:	f000 b891 	b.w	80097c8 <_write_r>

080096a6 <__sseek>:
 80096a6:	b510      	push	{r4, lr}
 80096a8:	460c      	mov	r4, r1
 80096aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ae:	f000 f867 	bl	8009780 <_lseek_r>
 80096b2:	1c43      	adds	r3, r0, #1
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	bf15      	itete	ne
 80096b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80096ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80096be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096c2:	81a3      	strheq	r3, [r4, #12]
 80096c4:	bf18      	it	ne
 80096c6:	81a3      	strhne	r3, [r4, #12]
 80096c8:	bd10      	pop	{r4, pc}

080096ca <__sclose>:
 80096ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ce:	f000 b847 	b.w	8009760 <_close_r>

080096d2 <memset>:
 80096d2:	4402      	add	r2, r0
 80096d4:	4603      	mov	r3, r0
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d100      	bne.n	80096dc <memset+0xa>
 80096da:	4770      	bx	lr
 80096dc:	f803 1b01 	strb.w	r1, [r3], #1
 80096e0:	e7f9      	b.n	80096d6 <memset+0x4>

080096e2 <strncmp>:
 80096e2:	b510      	push	{r4, lr}
 80096e4:	b16a      	cbz	r2, 8009702 <strncmp+0x20>
 80096e6:	3901      	subs	r1, #1
 80096e8:	1884      	adds	r4, r0, r2
 80096ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d103      	bne.n	80096fe <strncmp+0x1c>
 80096f6:	42a0      	cmp	r0, r4
 80096f8:	d001      	beq.n	80096fe <strncmp+0x1c>
 80096fa:	2a00      	cmp	r2, #0
 80096fc:	d1f5      	bne.n	80096ea <strncmp+0x8>
 80096fe:	1ad0      	subs	r0, r2, r3
 8009700:	bd10      	pop	{r4, pc}
 8009702:	4610      	mov	r0, r2
 8009704:	e7fc      	b.n	8009700 <strncmp+0x1e>

08009706 <strncpy>:
 8009706:	3901      	subs	r1, #1
 8009708:	4603      	mov	r3, r0
 800970a:	b510      	push	{r4, lr}
 800970c:	b132      	cbz	r2, 800971c <strncpy+0x16>
 800970e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009712:	3a01      	subs	r2, #1
 8009714:	f803 4b01 	strb.w	r4, [r3], #1
 8009718:	2c00      	cmp	r4, #0
 800971a:	d1f7      	bne.n	800970c <strncpy+0x6>
 800971c:	441a      	add	r2, r3
 800971e:	2100      	movs	r1, #0
 8009720:	4293      	cmp	r3, r2
 8009722:	d100      	bne.n	8009726 <strncpy+0x20>
 8009724:	bd10      	pop	{r4, pc}
 8009726:	f803 1b01 	strb.w	r1, [r3], #1
 800972a:	e7f9      	b.n	8009720 <strncpy+0x1a>

0800972c <strstr>:
 800972c:	780a      	ldrb	r2, [r1, #0]
 800972e:	b570      	push	{r4, r5, r6, lr}
 8009730:	b96a      	cbnz	r2, 800974e <strstr+0x22>
 8009732:	bd70      	pop	{r4, r5, r6, pc}
 8009734:	429a      	cmp	r2, r3
 8009736:	d109      	bne.n	800974c <strstr+0x20>
 8009738:	460c      	mov	r4, r1
 800973a:	4605      	mov	r5, r0
 800973c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0f6      	beq.n	8009732 <strstr+0x6>
 8009744:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009748:	429e      	cmp	r6, r3
 800974a:	d0f7      	beq.n	800973c <strstr+0x10>
 800974c:	3001      	adds	r0, #1
 800974e:	7803      	ldrb	r3, [r0, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1ef      	bne.n	8009734 <strstr+0x8>
 8009754:	4618      	mov	r0, r3
 8009756:	e7ec      	b.n	8009732 <strstr+0x6>

08009758 <_localeconv_r>:
 8009758:	4800      	ldr	r0, [pc, #0]	@ (800975c <_localeconv_r+0x4>)
 800975a:	4770      	bx	lr
 800975c:	20000158 	.word	0x20000158

08009760 <_close_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	2300      	movs	r3, #0
 8009764:	4d05      	ldr	r5, [pc, #20]	@ (800977c <_close_r+0x1c>)
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f8 fbe6 	bl	8001f3c <_close>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_close_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_close_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	200004e8 	.word	0x200004e8

08009780 <_lseek_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4604      	mov	r4, r0
 8009784:	4d06      	ldr	r5, [pc, #24]	@ (80097a0 <_lseek_r+0x20>)
 8009786:	4608      	mov	r0, r1
 8009788:	4611      	mov	r1, r2
 800978a:	2200      	movs	r2, #0
 800978c:	602a      	str	r2, [r5, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	f7f8 fbfb 	bl	8001f8a <_lseek>
 8009794:	1c43      	adds	r3, r0, #1
 8009796:	d102      	bne.n	800979e <_lseek_r+0x1e>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	b103      	cbz	r3, 800979e <_lseek_r+0x1e>
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	200004e8 	.word	0x200004e8

080097a4 <_read_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	4604      	mov	r4, r0
 80097a8:	4d06      	ldr	r5, [pc, #24]	@ (80097c4 <_read_r+0x20>)
 80097aa:	4608      	mov	r0, r1
 80097ac:	4611      	mov	r1, r2
 80097ae:	2200      	movs	r2, #0
 80097b0:	602a      	str	r2, [r5, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	f7f8 fb89 	bl	8001eca <_read>
 80097b8:	1c43      	adds	r3, r0, #1
 80097ba:	d102      	bne.n	80097c2 <_read_r+0x1e>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	b103      	cbz	r3, 80097c2 <_read_r+0x1e>
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
 80097c4:	200004e8 	.word	0x200004e8

080097c8 <_write_r>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	4604      	mov	r4, r0
 80097cc:	4d06      	ldr	r5, [pc, #24]	@ (80097e8 <_write_r+0x20>)
 80097ce:	4608      	mov	r0, r1
 80097d0:	4611      	mov	r1, r2
 80097d2:	2200      	movs	r2, #0
 80097d4:	602a      	str	r2, [r5, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	f7f8 fb94 	bl	8001f04 <_write>
 80097dc:	1c43      	adds	r3, r0, #1
 80097de:	d102      	bne.n	80097e6 <_write_r+0x1e>
 80097e0:	682b      	ldr	r3, [r5, #0]
 80097e2:	b103      	cbz	r3, 80097e6 <_write_r+0x1e>
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	bd38      	pop	{r3, r4, r5, pc}
 80097e8:	200004e8 	.word	0x200004e8

080097ec <__errno>:
 80097ec:	4b01      	ldr	r3, [pc, #4]	@ (80097f4 <__errno+0x8>)
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	20000018 	.word	0x20000018

080097f8 <__libc_init_array>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009830 <__libc_init_array+0x38>)
 80097fc:	2600      	movs	r6, #0
 80097fe:	4c0d      	ldr	r4, [pc, #52]	@ (8009834 <__libc_init_array+0x3c>)
 8009800:	1b64      	subs	r4, r4, r5
 8009802:	10a4      	asrs	r4, r4, #2
 8009804:	42a6      	cmp	r6, r4
 8009806:	d109      	bne.n	800981c <__libc_init_array+0x24>
 8009808:	4d0b      	ldr	r5, [pc, #44]	@ (8009838 <__libc_init_array+0x40>)
 800980a:	2600      	movs	r6, #0
 800980c:	4c0b      	ldr	r4, [pc, #44]	@ (800983c <__libc_init_array+0x44>)
 800980e:	f003 ff83 	bl	800d718 <_init>
 8009812:	1b64      	subs	r4, r4, r5
 8009814:	10a4      	asrs	r4, r4, #2
 8009816:	42a6      	cmp	r6, r4
 8009818:	d105      	bne.n	8009826 <__libc_init_array+0x2e>
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009820:	3601      	adds	r6, #1
 8009822:	4798      	blx	r3
 8009824:	e7ee      	b.n	8009804 <__libc_init_array+0xc>
 8009826:	f855 3b04 	ldr.w	r3, [r5], #4
 800982a:	3601      	adds	r6, #1
 800982c:	4798      	blx	r3
 800982e:	e7f2      	b.n	8009816 <__libc_init_array+0x1e>
 8009830:	0800dcd4 	.word	0x0800dcd4
 8009834:	0800dcd4 	.word	0x0800dcd4
 8009838:	0800dcd4 	.word	0x0800dcd4
 800983c:	0800dcd8 	.word	0x0800dcd8

08009840 <__retarget_lock_init_recursive>:
 8009840:	4770      	bx	lr

08009842 <__retarget_lock_acquire_recursive>:
 8009842:	4770      	bx	lr

08009844 <__retarget_lock_release_recursive>:
 8009844:	4770      	bx	lr

08009846 <memchr>:
 8009846:	b2c9      	uxtb	r1, r1
 8009848:	4603      	mov	r3, r0
 800984a:	4402      	add	r2, r0
 800984c:	b510      	push	{r4, lr}
 800984e:	4293      	cmp	r3, r2
 8009850:	4618      	mov	r0, r3
 8009852:	d101      	bne.n	8009858 <memchr+0x12>
 8009854:	2000      	movs	r0, #0
 8009856:	e003      	b.n	8009860 <memchr+0x1a>
 8009858:	7804      	ldrb	r4, [r0, #0]
 800985a:	3301      	adds	r3, #1
 800985c:	428c      	cmp	r4, r1
 800985e:	d1f6      	bne.n	800984e <memchr+0x8>
 8009860:	bd10      	pop	{r4, pc}
	...

08009864 <nanf>:
 8009864:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800986c <nanf+0x8>
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	7fc00000 	.word	0x7fc00000

08009870 <quorem>:
 8009870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	6903      	ldr	r3, [r0, #16]
 8009876:	4607      	mov	r7, r0
 8009878:	690c      	ldr	r4, [r1, #16]
 800987a:	42a3      	cmp	r3, r4
 800987c:	f2c0 8083 	blt.w	8009986 <quorem+0x116>
 8009880:	3c01      	subs	r4, #1
 8009882:	f100 0514 	add.w	r5, r0, #20
 8009886:	f101 0814 	add.w	r8, r1, #20
 800988a:	00a3      	lsls	r3, r4, #2
 800988c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009890:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098a0:	3301      	adds	r3, #1
 80098a2:	429a      	cmp	r2, r3
 80098a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80098a8:	d331      	bcc.n	800990e <quorem+0x9e>
 80098aa:	f04f 0a00 	mov.w	sl, #0
 80098ae:	46c4      	mov	ip, r8
 80098b0:	46ae      	mov	lr, r5
 80098b2:	46d3      	mov	fp, sl
 80098b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098b8:	b298      	uxth	r0, r3
 80098ba:	45e1      	cmp	r9, ip
 80098bc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80098c0:	fb06 a000 	mla	r0, r6, r0, sl
 80098c4:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80098c8:	b280      	uxth	r0, r0
 80098ca:	fb06 2303 	mla	r3, r6, r3, r2
 80098ce:	f8de 2000 	ldr.w	r2, [lr]
 80098d2:	b292      	uxth	r2, r2
 80098d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098d8:	eba2 0200 	sub.w	r2, r2, r0
 80098dc:	b29b      	uxth	r3, r3
 80098de:	f8de 0000 	ldr.w	r0, [lr]
 80098e2:	445a      	add	r2, fp
 80098e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80098e8:	b292      	uxth	r2, r2
 80098ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80098ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80098f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80098f6:	f84e 2b04 	str.w	r2, [lr], #4
 80098fa:	d2db      	bcs.n	80098b4 <quorem+0x44>
 80098fc:	9b00      	ldr	r3, [sp, #0]
 80098fe:	58eb      	ldr	r3, [r5, r3]
 8009900:	b92b      	cbnz	r3, 800990e <quorem+0x9e>
 8009902:	9b01      	ldr	r3, [sp, #4]
 8009904:	3b04      	subs	r3, #4
 8009906:	429d      	cmp	r5, r3
 8009908:	461a      	mov	r2, r3
 800990a:	d330      	bcc.n	800996e <quorem+0xfe>
 800990c:	613c      	str	r4, [r7, #16]
 800990e:	4638      	mov	r0, r7
 8009910:	f001 f9d0 	bl	800acb4 <__mcmp>
 8009914:	2800      	cmp	r0, #0
 8009916:	db26      	blt.n	8009966 <quorem+0xf6>
 8009918:	4629      	mov	r1, r5
 800991a:	2000      	movs	r0, #0
 800991c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009920:	f8d1 c000 	ldr.w	ip, [r1]
 8009924:	fa1f fe82 	uxth.w	lr, r2
 8009928:	45c1      	cmp	r9, r8
 800992a:	fa1f f38c 	uxth.w	r3, ip
 800992e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009932:	eba3 030e 	sub.w	r3, r3, lr
 8009936:	4403      	add	r3, r0
 8009938:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800993c:	b29b      	uxth	r3, r3
 800993e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009946:	ea4f 4022 	mov.w	r0, r2, asr #16
 800994a:	f841 3b04 	str.w	r3, [r1], #4
 800994e:	d2e5      	bcs.n	800991c <quorem+0xac>
 8009950:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009954:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009958:	b922      	cbnz	r2, 8009964 <quorem+0xf4>
 800995a:	3b04      	subs	r3, #4
 800995c:	429d      	cmp	r5, r3
 800995e:	461a      	mov	r2, r3
 8009960:	d30b      	bcc.n	800997a <quorem+0x10a>
 8009962:	613c      	str	r4, [r7, #16]
 8009964:	3601      	adds	r6, #1
 8009966:	4630      	mov	r0, r6
 8009968:	b003      	add	sp, #12
 800996a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996e:	6812      	ldr	r2, [r2, #0]
 8009970:	3b04      	subs	r3, #4
 8009972:	2a00      	cmp	r2, #0
 8009974:	d1ca      	bne.n	800990c <quorem+0x9c>
 8009976:	3c01      	subs	r4, #1
 8009978:	e7c5      	b.n	8009906 <quorem+0x96>
 800997a:	6812      	ldr	r2, [r2, #0]
 800997c:	3b04      	subs	r3, #4
 800997e:	2a00      	cmp	r2, #0
 8009980:	d1ef      	bne.n	8009962 <quorem+0xf2>
 8009982:	3c01      	subs	r4, #1
 8009984:	e7ea      	b.n	800995c <quorem+0xec>
 8009986:	2000      	movs	r0, #0
 8009988:	e7ee      	b.n	8009968 <quorem+0xf8>
 800998a:	0000      	movs	r0, r0
 800998c:	0000      	movs	r0, r0
	...

08009990 <_dtoa_r>:
 8009990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	69c7      	ldr	r7, [r0, #28]
 8009996:	b097      	sub	sp, #92	@ 0x5c
 8009998:	4681      	mov	r9, r0
 800999a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800999c:	9107      	str	r1, [sp, #28]
 800999e:	920c      	str	r2, [sp, #48]	@ 0x30
 80099a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80099a2:	ec55 4b10 	vmov	r4, r5, d0
 80099a6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80099aa:	b97f      	cbnz	r7, 80099cc <_dtoa_r+0x3c>
 80099ac:	2010      	movs	r0, #16
 80099ae:	f000 fe0b 	bl	800a5c8 <malloc>
 80099b2:	4602      	mov	r2, r0
 80099b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80099b8:	b920      	cbnz	r0, 80099c4 <_dtoa_r+0x34>
 80099ba:	4ba9      	ldr	r3, [pc, #676]	@ (8009c60 <_dtoa_r+0x2d0>)
 80099bc:	21ef      	movs	r1, #239	@ 0xef
 80099be:	48a9      	ldr	r0, [pc, #676]	@ (8009c64 <_dtoa_r+0x2d4>)
 80099c0:	f002 ffc6 	bl	800c950 <__assert_func>
 80099c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099c8:	6007      	str	r7, [r0, #0]
 80099ca:	60c7      	str	r7, [r0, #12]
 80099cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099d0:	6819      	ldr	r1, [r3, #0]
 80099d2:	b159      	cbz	r1, 80099ec <_dtoa_r+0x5c>
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	2301      	movs	r3, #1
 80099d8:	4648      	mov	r0, r9
 80099da:	4093      	lsls	r3, r2
 80099dc:	604a      	str	r2, [r1, #4]
 80099de:	608b      	str	r3, [r1, #8]
 80099e0:	f000 fee8 	bl	800a7b4 <_Bfree>
 80099e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	1e2b      	subs	r3, r5, #0
 80099ee:	bfb7      	itett	lt
 80099f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80099f4:	2300      	movge	r3, #0
 80099f6:	2201      	movlt	r2, #1
 80099f8:	9305      	strlt	r3, [sp, #20]
 80099fa:	bfa8      	it	ge
 80099fc:	6033      	strge	r3, [r6, #0]
 80099fe:	9f05      	ldr	r7, [sp, #20]
 8009a00:	4b99      	ldr	r3, [pc, #612]	@ (8009c68 <_dtoa_r+0x2d8>)
 8009a02:	bfb8      	it	lt
 8009a04:	6032      	strlt	r2, [r6, #0]
 8009a06:	43bb      	bics	r3, r7
 8009a08:	d112      	bne.n	8009a30 <_dtoa_r+0xa0>
 8009a0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a16:	4323      	orrs	r3, r4
 8009a18:	f000 855a 	beq.w	800a4d0 <_dtoa_r+0xb40>
 8009a1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a1e:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009c7c <_dtoa_r+0x2ec>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 855c 	beq.w	800a4e0 <_dtoa_r+0xb50>
 8009a28:	f10a 0303 	add.w	r3, sl, #3
 8009a2c:	f000 bd56 	b.w	800a4dc <_dtoa_r+0xb4c>
 8009a30:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a34:	2200      	movs	r2, #0
 8009a36:	2300      	movs	r3, #0
 8009a38:	ec51 0b17 	vmov	r0, r1, d7
 8009a3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009a40:	f7f7 f826 	bl	8000a90 <__aeabi_dcmpeq>
 8009a44:	4680      	mov	r8, r0
 8009a46:	b158      	cbz	r0, 8009a60 <_dtoa_r+0xd0>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009a4c:	6013      	str	r3, [r2, #0]
 8009a4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a50:	b113      	cbz	r3, 8009a58 <_dtoa_r+0xc8>
 8009a52:	4b86      	ldr	r3, [pc, #536]	@ (8009c6c <_dtoa_r+0x2dc>)
 8009a54:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009c80 <_dtoa_r+0x2f0>
 8009a5c:	f000 bd40 	b.w	800a4e0 <_dtoa_r+0xb50>
 8009a60:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009a64:	aa14      	add	r2, sp, #80	@ 0x50
 8009a66:	a915      	add	r1, sp, #84	@ 0x54
 8009a68:	4648      	mov	r0, r9
 8009a6a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009a6e:	f001 fa49 	bl	800af04 <__d2b>
 8009a72:	9002      	str	r0, [sp, #8]
 8009a74:	2e00      	cmp	r6, #0
 8009a76:	d076      	beq.n	8009b66 <_dtoa_r+0x1d6>
 8009a78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a7a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a7e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a86:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a8e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a92:	4619      	mov	r1, r3
 8009a94:	2200      	movs	r2, #0
 8009a96:	4b76      	ldr	r3, [pc, #472]	@ (8009c70 <_dtoa_r+0x2e0>)
 8009a98:	f7f6 fbda 	bl	8000250 <__aeabi_dsub>
 8009a9c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009c48 <_dtoa_r+0x2b8>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	f7f6 fd8d 	bl	80005c0 <__aeabi_dmul>
 8009aa6:	a36a      	add	r3, pc, #424	@ (adr r3, 8009c50 <_dtoa_r+0x2c0>)
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	f7f6 fbd2 	bl	8000254 <__adddf3>
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7f6 fd19 	bl	80004ec <__aeabi_i2d>
 8009aba:	a367      	add	r3, pc, #412	@ (adr r3, 8009c58 <_dtoa_r+0x2c8>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fd7e 	bl	80005c0 <__aeabi_dmul>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4620      	mov	r0, r4
 8009aca:	4629      	mov	r1, r5
 8009acc:	f7f6 fbc2 	bl	8000254 <__adddf3>
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	f7f7 f824 	bl	8000b20 <__aeabi_d2iz>
 8009ad8:	2200      	movs	r2, #0
 8009ada:	4607      	mov	r7, r0
 8009adc:	2300      	movs	r3, #0
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7f6 ffdf 	bl	8000aa4 <__aeabi_dcmplt>
 8009ae6:	b140      	cbz	r0, 8009afa <_dtoa_r+0x16a>
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f7f6 fcff 	bl	80004ec <__aeabi_i2d>
 8009aee:	4622      	mov	r2, r4
 8009af0:	462b      	mov	r3, r5
 8009af2:	f7f6 ffcd 	bl	8000a90 <__aeabi_dcmpeq>
 8009af6:	b900      	cbnz	r0, 8009afa <_dtoa_r+0x16a>
 8009af8:	3f01      	subs	r7, #1
 8009afa:	2f16      	cmp	r7, #22
 8009afc:	d852      	bhi.n	8009ba4 <_dtoa_r+0x214>
 8009afe:	4b5d      	ldr	r3, [pc, #372]	@ (8009c74 <_dtoa_r+0x2e4>)
 8009b00:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 ffca 	bl	8000aa4 <__aeabi_dcmplt>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d049      	beq.n	8009ba8 <_dtoa_r+0x218>
 8009b14:	3f01      	subs	r7, #1
 8009b16:	2300      	movs	r3, #0
 8009b18:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b1c:	1b9b      	subs	r3, r3, r6
 8009b1e:	1e5a      	subs	r2, r3, #1
 8009b20:	bf4c      	ite	mi
 8009b22:	f1c3 0301 	rsbmi	r3, r3, #1
 8009b26:	2300      	movpl	r3, #0
 8009b28:	9206      	str	r2, [sp, #24]
 8009b2a:	bf45      	ittet	mi
 8009b2c:	9300      	strmi	r3, [sp, #0]
 8009b2e:	2300      	movmi	r3, #0
 8009b30:	9300      	strpl	r3, [sp, #0]
 8009b32:	9306      	strmi	r3, [sp, #24]
 8009b34:	2f00      	cmp	r7, #0
 8009b36:	db39      	blt.n	8009bac <_dtoa_r+0x21c>
 8009b38:	9b06      	ldr	r3, [sp, #24]
 8009b3a:	970d      	str	r7, [sp, #52]	@ 0x34
 8009b3c:	443b      	add	r3, r7
 8009b3e:	9306      	str	r3, [sp, #24]
 8009b40:	2300      	movs	r3, #0
 8009b42:	9308      	str	r3, [sp, #32]
 8009b44:	9b07      	ldr	r3, [sp, #28]
 8009b46:	2b09      	cmp	r3, #9
 8009b48:	d863      	bhi.n	8009c12 <_dtoa_r+0x282>
 8009b4a:	2b05      	cmp	r3, #5
 8009b4c:	bfc5      	ittet	gt
 8009b4e:	3b04      	subgt	r3, #4
 8009b50:	2400      	movgt	r4, #0
 8009b52:	2401      	movle	r4, #1
 8009b54:	9307      	strgt	r3, [sp, #28]
 8009b56:	9b07      	ldr	r3, [sp, #28]
 8009b58:	3b02      	subs	r3, #2
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d865      	bhi.n	8009c2a <_dtoa_r+0x29a>
 8009b5e:	e8df f003 	tbb	[pc, r3]
 8009b62:	5654      	.short	0x5654
 8009b64:	2d39      	.short	0x2d39
 8009b66:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009b6a:	441e      	add	r6, r3
 8009b6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b70:	2b20      	cmp	r3, #32
 8009b72:	bfc9      	itett	gt
 8009b74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b78:	f1c3 0320 	rsble	r3, r3, #32
 8009b7c:	409f      	lslgt	r7, r3
 8009b7e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b82:	bfd8      	it	le
 8009b84:	fa04 f003 	lslle.w	r0, r4, r3
 8009b88:	f106 36ff 	add.w	r6, r6, #4294967295
 8009b8c:	bfc4      	itt	gt
 8009b8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b92:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b96:	f7f6 fc99 	bl	80004cc <__aeabi_ui2d>
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ba0:	9212      	str	r2, [sp, #72]	@ 0x48
 8009ba2:	e776      	b.n	8009a92 <_dtoa_r+0x102>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e7b7      	b.n	8009b18 <_dtoa_r+0x188>
 8009ba8:	9010      	str	r0, [sp, #64]	@ 0x40
 8009baa:	e7b6      	b.n	8009b1a <_dtoa_r+0x18a>
 8009bac:	9b00      	ldr	r3, [sp, #0]
 8009bae:	1bdb      	subs	r3, r3, r7
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	427b      	negs	r3, r7
 8009bb4:	9308      	str	r3, [sp, #32]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	930d      	str	r3, [sp, #52]	@ 0x34
 8009bba:	e7c3      	b.n	8009b44 <_dtoa_r+0x1b4>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bc2:	eb07 0b03 	add.w	fp, r7, r3
 8009bc6:	f10b 0301 	add.w	r3, fp, #1
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	9303      	str	r3, [sp, #12]
 8009bce:	bfb8      	it	lt
 8009bd0:	2301      	movlt	r3, #1
 8009bd2:	e006      	b.n	8009be2 <_dtoa_r+0x252>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dd28      	ble.n	8009c30 <_dtoa_r+0x2a0>
 8009bde:	469b      	mov	fp, r3
 8009be0:	9303      	str	r3, [sp, #12]
 8009be2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009be6:	2100      	movs	r1, #0
 8009be8:	2204      	movs	r2, #4
 8009bea:	f102 0514 	add.w	r5, r2, #20
 8009bee:	429d      	cmp	r5, r3
 8009bf0:	d926      	bls.n	8009c40 <_dtoa_r+0x2b0>
 8009bf2:	6041      	str	r1, [r0, #4]
 8009bf4:	4648      	mov	r0, r9
 8009bf6:	f000 fd9d 	bl	800a734 <_Balloc>
 8009bfa:	4682      	mov	sl, r0
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d141      	bne.n	8009c84 <_dtoa_r+0x2f4>
 8009c00:	4b1d      	ldr	r3, [pc, #116]	@ (8009c78 <_dtoa_r+0x2e8>)
 8009c02:	4602      	mov	r2, r0
 8009c04:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c08:	e6d9      	b.n	80099be <_dtoa_r+0x2e>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e7e3      	b.n	8009bd6 <_dtoa_r+0x246>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e7d5      	b.n	8009bbe <_dtoa_r+0x22e>
 8009c12:	2401      	movs	r4, #1
 8009c14:	2300      	movs	r3, #0
 8009c16:	9409      	str	r4, [sp, #36]	@ 0x24
 8009c18:	9307      	str	r3, [sp, #28]
 8009c1a:	f04f 3bff 	mov.w	fp, #4294967295
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2312      	movs	r3, #18
 8009c22:	f8cd b00c 	str.w	fp, [sp, #12]
 8009c26:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c28:	e7db      	b.n	8009be2 <_dtoa_r+0x252>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c2e:	e7f4      	b.n	8009c1a <_dtoa_r+0x28a>
 8009c30:	f04f 0b01 	mov.w	fp, #1
 8009c34:	465b      	mov	r3, fp
 8009c36:	f8cd b00c 	str.w	fp, [sp, #12]
 8009c3a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009c3e:	e7d0      	b.n	8009be2 <_dtoa_r+0x252>
 8009c40:	3101      	adds	r1, #1
 8009c42:	0052      	lsls	r2, r2, #1
 8009c44:	e7d1      	b.n	8009bea <_dtoa_r+0x25a>
 8009c46:	bf00      	nop
 8009c48:	636f4361 	.word	0x636f4361
 8009c4c:	3fd287a7 	.word	0x3fd287a7
 8009c50:	8b60c8b3 	.word	0x8b60c8b3
 8009c54:	3fc68a28 	.word	0x3fc68a28
 8009c58:	509f79fb 	.word	0x509f79fb
 8009c5c:	3fd34413 	.word	0x3fd34413
 8009c60:	0800d8cc 	.word	0x0800d8cc
 8009c64:	0800d8e3 	.word	0x0800d8e3
 8009c68:	7ff00000 	.word	0x7ff00000
 8009c6c:	0800d9cf 	.word	0x0800d9cf
 8009c70:	3ff80000 	.word	0x3ff80000
 8009c74:	0800dab0 	.word	0x0800dab0
 8009c78:	0800d93b 	.word	0x0800d93b
 8009c7c:	0800d8c8 	.word	0x0800d8c8
 8009c80:	0800d9ce 	.word	0x0800d9ce
 8009c84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009c88:	6018      	str	r0, [r3, #0]
 8009c8a:	9b03      	ldr	r3, [sp, #12]
 8009c8c:	2b0e      	cmp	r3, #14
 8009c8e:	f200 80a1 	bhi.w	8009dd4 <_dtoa_r+0x444>
 8009c92:	2c00      	cmp	r4, #0
 8009c94:	f000 809e 	beq.w	8009dd4 <_dtoa_r+0x444>
 8009c98:	2f00      	cmp	r7, #0
 8009c9a:	dd33      	ble.n	8009d04 <_dtoa_r+0x374>
 8009c9c:	f007 020f 	and.w	r2, r7, #15
 8009ca0:	4b9b      	ldr	r3, [pc, #620]	@ (8009f10 <_dtoa_r+0x580>)
 8009ca2:	05f8      	lsls	r0, r7, #23
 8009ca4:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ca8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cac:	ed93 7b00 	vldr	d7, [r3]
 8009cb0:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009cb4:	d516      	bpl.n	8009ce4 <_dtoa_r+0x354>
 8009cb6:	4b97      	ldr	r3, [pc, #604]	@ (8009f14 <_dtoa_r+0x584>)
 8009cb8:	f004 040f 	and.w	r4, r4, #15
 8009cbc:	2603      	movs	r6, #3
 8009cbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009cc6:	f7f6 fda5 	bl	8000814 <__aeabi_ddiv>
 8009cca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cce:	4d91      	ldr	r5, [pc, #580]	@ (8009f14 <_dtoa_r+0x584>)
 8009cd0:	b954      	cbnz	r4, 8009ce8 <_dtoa_r+0x358>
 8009cd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009cd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cda:	f7f6 fd9b 	bl	8000814 <__aeabi_ddiv>
 8009cde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ce2:	e028      	b.n	8009d36 <_dtoa_r+0x3a6>
 8009ce4:	2602      	movs	r6, #2
 8009ce6:	e7f2      	b.n	8009cce <_dtoa_r+0x33e>
 8009ce8:	07e1      	lsls	r1, r4, #31
 8009cea:	d508      	bpl.n	8009cfe <_dtoa_r+0x36e>
 8009cec:	3601      	adds	r6, #1
 8009cee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009cf2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cf6:	f7f6 fc63 	bl	80005c0 <__aeabi_dmul>
 8009cfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009cfe:	1064      	asrs	r4, r4, #1
 8009d00:	3508      	adds	r5, #8
 8009d02:	e7e5      	b.n	8009cd0 <_dtoa_r+0x340>
 8009d04:	f000 80af 	beq.w	8009e66 <_dtoa_r+0x4d6>
 8009d08:	427c      	negs	r4, r7
 8009d0a:	4b81      	ldr	r3, [pc, #516]	@ (8009f10 <_dtoa_r+0x580>)
 8009d0c:	4d81      	ldr	r5, [pc, #516]	@ (8009f14 <_dtoa_r+0x584>)
 8009d0e:	2602      	movs	r6, #2
 8009d10:	f004 020f 	and.w	r2, r4, #15
 8009d14:	1124      	asrs	r4, r4, #4
 8009d16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f7f6 fc4d 	bl	80005c0 <__aeabi_dmul>
 8009d26:	2300      	movs	r3, #0
 8009d28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d2c:	2c00      	cmp	r4, #0
 8009d2e:	f040 808f 	bne.w	8009e50 <_dtoa_r+0x4c0>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1d3      	bne.n	8009cde <_dtoa_r+0x34e>
 8009d36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 8094 	beq.w	8009e6a <_dtoa_r+0x4da>
 8009d42:	2200      	movs	r2, #0
 8009d44:	4b74      	ldr	r3, [pc, #464]	@ (8009f18 <_dtoa_r+0x588>)
 8009d46:	4620      	mov	r0, r4
 8009d48:	4629      	mov	r1, r5
 8009d4a:	f7f6 feab 	bl	8000aa4 <__aeabi_dcmplt>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	f000 808b 	beq.w	8009e6a <_dtoa_r+0x4da>
 8009d54:	9b03      	ldr	r3, [sp, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 8087 	beq.w	8009e6a <_dtoa_r+0x4da>
 8009d5c:	f1bb 0f00 	cmp.w	fp, #0
 8009d60:	dd34      	ble.n	8009dcc <_dtoa_r+0x43c>
 8009d62:	4620      	mov	r0, r4
 8009d64:	f107 38ff 	add.w	r8, r7, #4294967295
 8009d68:	3601      	adds	r6, #1
 8009d6a:	465c      	mov	r4, fp
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4b6b      	ldr	r3, [pc, #428]	@ (8009f1c <_dtoa_r+0x58c>)
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7f6 fc25 	bl	80005c0 <__aeabi_dmul>
 8009d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7f6 fbb6 	bl	80004ec <__aeabi_i2d>
 8009d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d84:	f7f6 fc1c 	bl	80005c0 <__aeabi_dmul>
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4b65      	ldr	r3, [pc, #404]	@ (8009f20 <_dtoa_r+0x590>)
 8009d8c:	f7f6 fa62 	bl	8000254 <__adddf3>
 8009d90:	4605      	mov	r5, r0
 8009d92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d96:	2c00      	cmp	r4, #0
 8009d98:	d16a      	bne.n	8009e70 <_dtoa_r+0x4e0>
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	4b61      	ldr	r3, [pc, #388]	@ (8009f24 <_dtoa_r+0x594>)
 8009d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009da2:	f7f6 fa55 	bl	8000250 <__aeabi_dsub>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009dae:	462a      	mov	r2, r5
 8009db0:	4633      	mov	r3, r6
 8009db2:	f7f6 fe95 	bl	8000ae0 <__aeabi_dcmpgt>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	f040 8298 	bne.w	800a2ec <_dtoa_r+0x95c>
 8009dbc:	462a      	mov	r2, r5
 8009dbe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009dc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dc6:	f7f6 fe6d 	bl	8000aa4 <__aeabi_dcmplt>
 8009dca:	bb38      	cbnz	r0, 8009e1c <_dtoa_r+0x48c>
 8009dcc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009dd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009dd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f2c0 8157 	blt.w	800a08a <_dtoa_r+0x6fa>
 8009ddc:	2f0e      	cmp	r7, #14
 8009dde:	f300 8154 	bgt.w	800a08a <_dtoa_r+0x6fa>
 8009de2:	4b4b      	ldr	r3, [pc, #300]	@ (8009f10 <_dtoa_r+0x580>)
 8009de4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009de8:	ed93 7b00 	vldr	d7, [r3]
 8009dec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	ed8d 7b00 	vstr	d7, [sp]
 8009df4:	f280 80e5 	bge.w	8009fc2 <_dtoa_r+0x632>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f300 80e1 	bgt.w	8009fc2 <_dtoa_r+0x632>
 8009e00:	d10c      	bne.n	8009e1c <_dtoa_r+0x48c>
 8009e02:	2200      	movs	r2, #0
 8009e04:	4b47      	ldr	r3, [pc, #284]	@ (8009f24 <_dtoa_r+0x594>)
 8009e06:	ec51 0b17 	vmov	r0, r1, d7
 8009e0a:	f7f6 fbd9 	bl	80005c0 <__aeabi_dmul>
 8009e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e12:	f7f6 fe5b 	bl	8000acc <__aeabi_dcmpge>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f000 8266 	beq.w	800a2e8 <_dtoa_r+0x958>
 8009e1c:	2400      	movs	r4, #0
 8009e1e:	4625      	mov	r5, r4
 8009e20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e22:	4656      	mov	r6, sl
 8009e24:	ea6f 0803 	mvn.w	r8, r3
 8009e28:	2700      	movs	r7, #0
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	4648      	mov	r0, r9
 8009e2e:	f000 fcc1 	bl	800a7b4 <_Bfree>
 8009e32:	2d00      	cmp	r5, #0
 8009e34:	f000 80bd 	beq.w	8009fb2 <_dtoa_r+0x622>
 8009e38:	b12f      	cbz	r7, 8009e46 <_dtoa_r+0x4b6>
 8009e3a:	42af      	cmp	r7, r5
 8009e3c:	d003      	beq.n	8009e46 <_dtoa_r+0x4b6>
 8009e3e:	4639      	mov	r1, r7
 8009e40:	4648      	mov	r0, r9
 8009e42:	f000 fcb7 	bl	800a7b4 <_Bfree>
 8009e46:	4629      	mov	r1, r5
 8009e48:	4648      	mov	r0, r9
 8009e4a:	f000 fcb3 	bl	800a7b4 <_Bfree>
 8009e4e:	e0b0      	b.n	8009fb2 <_dtoa_r+0x622>
 8009e50:	07e2      	lsls	r2, r4, #31
 8009e52:	d505      	bpl.n	8009e60 <_dtoa_r+0x4d0>
 8009e54:	3601      	adds	r6, #1
 8009e56:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e5a:	f7f6 fbb1 	bl	80005c0 <__aeabi_dmul>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	1064      	asrs	r4, r4, #1
 8009e62:	3508      	adds	r5, #8
 8009e64:	e762      	b.n	8009d2c <_dtoa_r+0x39c>
 8009e66:	2602      	movs	r6, #2
 8009e68:	e765      	b.n	8009d36 <_dtoa_r+0x3a6>
 8009e6a:	46b8      	mov	r8, r7
 8009e6c:	9c03      	ldr	r4, [sp, #12]
 8009e6e:	e784      	b.n	8009d7a <_dtoa_r+0x3ea>
 8009e70:	4b27      	ldr	r3, [pc, #156]	@ (8009f10 <_dtoa_r+0x580>)
 8009e72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e78:	4454      	add	r4, sl
 8009e7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	d054      	beq.n	8009f2c <_dtoa_r+0x59c>
 8009e82:	2000      	movs	r0, #0
 8009e84:	4928      	ldr	r1, [pc, #160]	@ (8009f28 <_dtoa_r+0x598>)
 8009e86:	f7f6 fcc5 	bl	8000814 <__aeabi_ddiv>
 8009e8a:	4633      	mov	r3, r6
 8009e8c:	4656      	mov	r6, sl
 8009e8e:	462a      	mov	r2, r5
 8009e90:	f7f6 f9de 	bl	8000250 <__aeabi_dsub>
 8009e94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009e98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e9c:	f7f6 fe40 	bl	8000b20 <__aeabi_d2iz>
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	f7f6 fb23 	bl	80004ec <__aeabi_i2d>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	3530      	adds	r5, #48	@ 0x30
 8009eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eb0:	f7f6 f9ce 	bl	8000250 <__aeabi_dsub>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	f806 5b01 	strb.w	r5, [r6], #1
 8009ebc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ec0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ec4:	f7f6 fdee 	bl	8000aa4 <__aeabi_dcmplt>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d172      	bne.n	8009fb2 <_dtoa_r+0x622>
 8009ecc:	2000      	movs	r0, #0
 8009ece:	4912      	ldr	r1, [pc, #72]	@ (8009f18 <_dtoa_r+0x588>)
 8009ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ed4:	f7f6 f9bc 	bl	8000250 <__aeabi_dsub>
 8009ed8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009edc:	f7f6 fde2 	bl	8000aa4 <__aeabi_dcmplt>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	f040 80b4 	bne.w	800a04e <_dtoa_r+0x6be>
 8009ee6:	42a6      	cmp	r6, r4
 8009ee8:	f43f af70 	beq.w	8009dcc <_dtoa_r+0x43c>
 8009eec:	2200      	movs	r2, #0
 8009eee:	4b0b      	ldr	r3, [pc, #44]	@ (8009f1c <_dtoa_r+0x58c>)
 8009ef0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009ef4:	f7f6 fb64 	bl	80005c0 <__aeabi_dmul>
 8009ef8:	2200      	movs	r2, #0
 8009efa:	4b08      	ldr	r3, [pc, #32]	@ (8009f1c <_dtoa_r+0x58c>)
 8009efc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009f00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f04:	f7f6 fb5c 	bl	80005c0 <__aeabi_dmul>
 8009f08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f0c:	e7c4      	b.n	8009e98 <_dtoa_r+0x508>
 8009f0e:	bf00      	nop
 8009f10:	0800dab0 	.word	0x0800dab0
 8009f14:	0800da88 	.word	0x0800da88
 8009f18:	3ff00000 	.word	0x3ff00000
 8009f1c:	40240000 	.word	0x40240000
 8009f20:	401c0000 	.word	0x401c0000
 8009f24:	40140000 	.word	0x40140000
 8009f28:	3fe00000 	.word	0x3fe00000
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4656      	mov	r6, sl
 8009f30:	4628      	mov	r0, r5
 8009f32:	f7f6 fb45 	bl	80005c0 <__aeabi_dmul>
 8009f36:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009f38:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f40:	f7f6 fdee 	bl	8000b20 <__aeabi_d2iz>
 8009f44:	4605      	mov	r5, r0
 8009f46:	f7f6 fad1 	bl	80004ec <__aeabi_i2d>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	3530      	adds	r5, #48	@ 0x30
 8009f4e:	460b      	mov	r3, r1
 8009f50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f54:	f7f6 f97c 	bl	8000250 <__aeabi_dsub>
 8009f58:	f806 5b01 	strb.w	r5, [r6], #1
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	42a6      	cmp	r6, r4
 8009f62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f66:	f04f 0200 	mov.w	r2, #0
 8009f6a:	d124      	bne.n	8009fb6 <_dtoa_r+0x626>
 8009f6c:	4baf      	ldr	r3, [pc, #700]	@ (800a22c <_dtoa_r+0x89c>)
 8009f6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009f72:	f7f6 f96f 	bl	8000254 <__adddf3>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f7e:	f7f6 fdaf 	bl	8000ae0 <__aeabi_dcmpgt>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d163      	bne.n	800a04e <_dtoa_r+0x6be>
 8009f86:	2000      	movs	r0, #0
 8009f88:	49a8      	ldr	r1, [pc, #672]	@ (800a22c <_dtoa_r+0x89c>)
 8009f8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009f8e:	f7f6 f95f 	bl	8000250 <__aeabi_dsub>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f9a:	f7f6 fd83 	bl	8000aa4 <__aeabi_dcmplt>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	f43f af14 	beq.w	8009dcc <_dtoa_r+0x43c>
 8009fa4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009fa6:	1e73      	subs	r3, r6, #1
 8009fa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009faa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fae:	2b30      	cmp	r3, #48	@ 0x30
 8009fb0:	d0f8      	beq.n	8009fa4 <_dtoa_r+0x614>
 8009fb2:	4647      	mov	r7, r8
 8009fb4:	e03b      	b.n	800a02e <_dtoa_r+0x69e>
 8009fb6:	4b9e      	ldr	r3, [pc, #632]	@ (800a230 <_dtoa_r+0x8a0>)
 8009fb8:	f7f6 fb02 	bl	80005c0 <__aeabi_dmul>
 8009fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fc0:	e7bc      	b.n	8009f3c <_dtoa_r+0x5ac>
 8009fc2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009fc6:	4656      	mov	r6, sl
 8009fc8:	4620      	mov	r0, r4
 8009fca:	4629      	mov	r1, r5
 8009fcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fd0:	f7f6 fc20 	bl	8000814 <__aeabi_ddiv>
 8009fd4:	f7f6 fda4 	bl	8000b20 <__aeabi_d2iz>
 8009fd8:	4680      	mov	r8, r0
 8009fda:	f7f6 fa87 	bl	80004ec <__aeabi_i2d>
 8009fde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fe2:	f7f6 faed 	bl	80005c0 <__aeabi_dmul>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 f92d 	bl	8000250 <__aeabi_dsub>
 8009ff6:	9d03      	ldr	r5, [sp, #12]
 8009ff8:	f806 4b01 	strb.w	r4, [r6], #1
 8009ffc:	eba6 040a 	sub.w	r4, r6, sl
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	42a5      	cmp	r5, r4
 800a006:	d133      	bne.n	800a070 <_dtoa_r+0x6e0>
 800a008:	f7f6 f924 	bl	8000254 <__adddf3>
 800a00c:	4604      	mov	r4, r0
 800a00e:	460d      	mov	r5, r1
 800a010:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a014:	f7f6 fd64 	bl	8000ae0 <__aeabi_dcmpgt>
 800a018:	b9c0      	cbnz	r0, 800a04c <_dtoa_r+0x6bc>
 800a01a:	4620      	mov	r0, r4
 800a01c:	4629      	mov	r1, r5
 800a01e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a022:	f7f6 fd35 	bl	8000a90 <__aeabi_dcmpeq>
 800a026:	b110      	cbz	r0, 800a02e <_dtoa_r+0x69e>
 800a028:	f018 0f01 	tst.w	r8, #1
 800a02c:	d10e      	bne.n	800a04c <_dtoa_r+0x6bc>
 800a02e:	9902      	ldr	r1, [sp, #8]
 800a030:	4648      	mov	r0, r9
 800a032:	f000 fbbf 	bl	800a7b4 <_Bfree>
 800a036:	2300      	movs	r3, #0
 800a038:	3701      	adds	r7, #1
 800a03a:	7033      	strb	r3, [r6, #0]
 800a03c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a03e:	601f      	str	r7, [r3, #0]
 800a040:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a042:	2b00      	cmp	r3, #0
 800a044:	f000 824c 	beq.w	800a4e0 <_dtoa_r+0xb50>
 800a048:	601e      	str	r6, [r3, #0]
 800a04a:	e249      	b.n	800a4e0 <_dtoa_r+0xb50>
 800a04c:	46b8      	mov	r8, r7
 800a04e:	4633      	mov	r3, r6
 800a050:	461e      	mov	r6, r3
 800a052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a056:	2a39      	cmp	r2, #57	@ 0x39
 800a058:	d106      	bne.n	800a068 <_dtoa_r+0x6d8>
 800a05a:	459a      	cmp	sl, r3
 800a05c:	d1f8      	bne.n	800a050 <_dtoa_r+0x6c0>
 800a05e:	2230      	movs	r2, #48	@ 0x30
 800a060:	f108 0801 	add.w	r8, r8, #1
 800a064:	f88a 2000 	strb.w	r2, [sl]
 800a068:	781a      	ldrb	r2, [r3, #0]
 800a06a:	3201      	adds	r2, #1
 800a06c:	701a      	strb	r2, [r3, #0]
 800a06e:	e7a0      	b.n	8009fb2 <_dtoa_r+0x622>
 800a070:	2200      	movs	r2, #0
 800a072:	4b6f      	ldr	r3, [pc, #444]	@ (800a230 <_dtoa_r+0x8a0>)
 800a074:	f7f6 faa4 	bl	80005c0 <__aeabi_dmul>
 800a078:	2200      	movs	r2, #0
 800a07a:	2300      	movs	r3, #0
 800a07c:	4604      	mov	r4, r0
 800a07e:	460d      	mov	r5, r1
 800a080:	f7f6 fd06 	bl	8000a90 <__aeabi_dcmpeq>
 800a084:	2800      	cmp	r0, #0
 800a086:	d09f      	beq.n	8009fc8 <_dtoa_r+0x638>
 800a088:	e7d1      	b.n	800a02e <_dtoa_r+0x69e>
 800a08a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a08c:	2a00      	cmp	r2, #0
 800a08e:	f000 80ea 	beq.w	800a266 <_dtoa_r+0x8d6>
 800a092:	9a07      	ldr	r2, [sp, #28]
 800a094:	2a01      	cmp	r2, #1
 800a096:	f300 80cd 	bgt.w	800a234 <_dtoa_r+0x8a4>
 800a09a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	f000 80c1 	beq.w	800a224 <_dtoa_r+0x894>
 800a0a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0a6:	9c08      	ldr	r4, [sp, #32]
 800a0a8:	9e00      	ldr	r6, [sp, #0]
 800a0aa:	9a00      	ldr	r2, [sp, #0]
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	4648      	mov	r0, r9
 800a0b0:	441a      	add	r2, r3
 800a0b2:	9200      	str	r2, [sp, #0]
 800a0b4:	9a06      	ldr	r2, [sp, #24]
 800a0b6:	441a      	add	r2, r3
 800a0b8:	9206      	str	r2, [sp, #24]
 800a0ba:	f000 fc7b 	bl	800a9b4 <__i2b>
 800a0be:	4605      	mov	r5, r0
 800a0c0:	b166      	cbz	r6, 800a0dc <_dtoa_r+0x74c>
 800a0c2:	9b06      	ldr	r3, [sp, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dd09      	ble.n	800a0dc <_dtoa_r+0x74c>
 800a0c8:	42b3      	cmp	r3, r6
 800a0ca:	9a00      	ldr	r2, [sp, #0]
 800a0cc:	bfa8      	it	ge
 800a0ce:	4633      	movge	r3, r6
 800a0d0:	1ad2      	subs	r2, r2, r3
 800a0d2:	1af6      	subs	r6, r6, r3
 800a0d4:	9200      	str	r2, [sp, #0]
 800a0d6:	9a06      	ldr	r2, [sp, #24]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	9306      	str	r3, [sp, #24]
 800a0dc:	9b08      	ldr	r3, [sp, #32]
 800a0de:	b30b      	cbz	r3, 800a124 <_dtoa_r+0x794>
 800a0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 80c6 	beq.w	800a274 <_dtoa_r+0x8e4>
 800a0e8:	2c00      	cmp	r4, #0
 800a0ea:	f000 80c0 	beq.w	800a26e <_dtoa_r+0x8de>
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	4622      	mov	r2, r4
 800a0f2:	4648      	mov	r0, r9
 800a0f4:	f000 fd18 	bl	800ab28 <__pow5mult>
 800a0f8:	9a02      	ldr	r2, [sp, #8]
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	4648      	mov	r0, r9
 800a100:	f000 fc6e 	bl	800a9e0 <__multiply>
 800a104:	9902      	ldr	r1, [sp, #8]
 800a106:	4680      	mov	r8, r0
 800a108:	4648      	mov	r0, r9
 800a10a:	f000 fb53 	bl	800a7b4 <_Bfree>
 800a10e:	9b08      	ldr	r3, [sp, #32]
 800a110:	1b1b      	subs	r3, r3, r4
 800a112:	9308      	str	r3, [sp, #32]
 800a114:	f000 80b1 	beq.w	800a27a <_dtoa_r+0x8ea>
 800a118:	9a08      	ldr	r2, [sp, #32]
 800a11a:	4641      	mov	r1, r8
 800a11c:	4648      	mov	r0, r9
 800a11e:	f000 fd03 	bl	800ab28 <__pow5mult>
 800a122:	9002      	str	r0, [sp, #8]
 800a124:	2101      	movs	r1, #1
 800a126:	4648      	mov	r0, r9
 800a128:	f000 fc44 	bl	800a9b4 <__i2b>
 800a12c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a12e:	4604      	mov	r4, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 81d9 	beq.w	800a4e8 <_dtoa_r+0xb58>
 800a136:	461a      	mov	r2, r3
 800a138:	4601      	mov	r1, r0
 800a13a:	4648      	mov	r0, r9
 800a13c:	f000 fcf4 	bl	800ab28 <__pow5mult>
 800a140:	9b07      	ldr	r3, [sp, #28]
 800a142:	4604      	mov	r4, r0
 800a144:	2b01      	cmp	r3, #1
 800a146:	f300 809f 	bgt.w	800a288 <_dtoa_r+0x8f8>
 800a14a:	9b04      	ldr	r3, [sp, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f040 8097 	bne.w	800a280 <_dtoa_r+0x8f0>
 800a152:	9b05      	ldr	r3, [sp, #20]
 800a154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f040 8093 	bne.w	800a284 <_dtoa_r+0x8f4>
 800a15e:	9b05      	ldr	r3, [sp, #20]
 800a160:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a164:	0d1b      	lsrs	r3, r3, #20
 800a166:	051b      	lsls	r3, r3, #20
 800a168:	b133      	cbz	r3, 800a178 <_dtoa_r+0x7e8>
 800a16a:	9b00      	ldr	r3, [sp, #0]
 800a16c:	3301      	adds	r3, #1
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	9b06      	ldr	r3, [sp, #24]
 800a172:	3301      	adds	r3, #1
 800a174:	9306      	str	r3, [sp, #24]
 800a176:	2301      	movs	r3, #1
 800a178:	9308      	str	r3, [sp, #32]
 800a17a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 81b9 	beq.w	800a4f4 <_dtoa_r+0xb64>
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a188:	6918      	ldr	r0, [r3, #16]
 800a18a:	f000 fbc7 	bl	800a91c <__hi0bits>
 800a18e:	f1c0 0020 	rsb	r0, r0, #32
 800a192:	9b06      	ldr	r3, [sp, #24]
 800a194:	4418      	add	r0, r3
 800a196:	f010 001f 	ands.w	r0, r0, #31
 800a19a:	f000 8082 	beq.w	800a2a2 <_dtoa_r+0x912>
 800a19e:	f1c0 0320 	rsb	r3, r0, #32
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	dd73      	ble.n	800a28e <_dtoa_r+0x8fe>
 800a1a6:	f1c0 001c 	rsb	r0, r0, #28
 800a1aa:	9b00      	ldr	r3, [sp, #0]
 800a1ac:	4403      	add	r3, r0
 800a1ae:	4406      	add	r6, r0
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	9b06      	ldr	r3, [sp, #24]
 800a1b4:	4403      	add	r3, r0
 800a1b6:	9306      	str	r3, [sp, #24]
 800a1b8:	9b00      	ldr	r3, [sp, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dd05      	ble.n	800a1ca <_dtoa_r+0x83a>
 800a1be:	461a      	mov	r2, r3
 800a1c0:	9902      	ldr	r1, [sp, #8]
 800a1c2:	4648      	mov	r0, r9
 800a1c4:	f000 fd0a 	bl	800abdc <__lshift>
 800a1c8:	9002      	str	r0, [sp, #8]
 800a1ca:	9b06      	ldr	r3, [sp, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dd05      	ble.n	800a1dc <_dtoa_r+0x84c>
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	4648      	mov	r0, r9
 800a1d6:	f000 fd01 	bl	800abdc <__lshift>
 800a1da:	4604      	mov	r4, r0
 800a1dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d061      	beq.n	800a2a6 <_dtoa_r+0x916>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	9802      	ldr	r0, [sp, #8]
 800a1e6:	f000 fd65 	bl	800acb4 <__mcmp>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	da5b      	bge.n	800a2a6 <_dtoa_r+0x916>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	220a      	movs	r2, #10
 800a1f2:	9902      	ldr	r1, [sp, #8]
 800a1f4:	4648      	mov	r0, r9
 800a1f6:	f000 faff 	bl	800a7f8 <__multadd>
 800a1fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1fc:	f107 38ff 	add.w	r8, r7, #4294967295
 800a200:	9002      	str	r0, [sp, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8178 	beq.w	800a4f8 <_dtoa_r+0xb68>
 800a208:	4629      	mov	r1, r5
 800a20a:	2300      	movs	r3, #0
 800a20c:	220a      	movs	r2, #10
 800a20e:	4648      	mov	r0, r9
 800a210:	f000 faf2 	bl	800a7f8 <__multadd>
 800a214:	f1bb 0f00 	cmp.w	fp, #0
 800a218:	4605      	mov	r5, r0
 800a21a:	dc6f      	bgt.n	800a2fc <_dtoa_r+0x96c>
 800a21c:	9b07      	ldr	r3, [sp, #28]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	dc49      	bgt.n	800a2b6 <_dtoa_r+0x926>
 800a222:	e06b      	b.n	800a2fc <_dtoa_r+0x96c>
 800a224:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a226:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a22a:	e73c      	b.n	800a0a6 <_dtoa_r+0x716>
 800a22c:	3fe00000 	.word	0x3fe00000
 800a230:	40240000 	.word	0x40240000
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	1e5c      	subs	r4, r3, #1
 800a238:	9b08      	ldr	r3, [sp, #32]
 800a23a:	42a3      	cmp	r3, r4
 800a23c:	db09      	blt.n	800a252 <_dtoa_r+0x8c2>
 800a23e:	1b1c      	subs	r4, r3, r4
 800a240:	9b03      	ldr	r3, [sp, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	f6bf af30 	bge.w	800a0a8 <_dtoa_r+0x718>
 800a248:	9b00      	ldr	r3, [sp, #0]
 800a24a:	9a03      	ldr	r2, [sp, #12]
 800a24c:	1a9e      	subs	r6, r3, r2
 800a24e:	2300      	movs	r3, #0
 800a250:	e72b      	b.n	800a0aa <_dtoa_r+0x71a>
 800a252:	9b08      	ldr	r3, [sp, #32]
 800a254:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a256:	1ae3      	subs	r3, r4, r3
 800a258:	9408      	str	r4, [sp, #32]
 800a25a:	9e00      	ldr	r6, [sp, #0]
 800a25c:	2400      	movs	r4, #0
 800a25e:	441a      	add	r2, r3
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	920d      	str	r2, [sp, #52]	@ 0x34
 800a264:	e721      	b.n	800a0aa <_dtoa_r+0x71a>
 800a266:	9c08      	ldr	r4, [sp, #32]
 800a268:	9e00      	ldr	r6, [sp, #0]
 800a26a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a26c:	e728      	b.n	800a0c0 <_dtoa_r+0x730>
 800a26e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a272:	e751      	b.n	800a118 <_dtoa_r+0x788>
 800a274:	9a08      	ldr	r2, [sp, #32]
 800a276:	9902      	ldr	r1, [sp, #8]
 800a278:	e750      	b.n	800a11c <_dtoa_r+0x78c>
 800a27a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a27e:	e751      	b.n	800a124 <_dtoa_r+0x794>
 800a280:	2300      	movs	r3, #0
 800a282:	e779      	b.n	800a178 <_dtoa_r+0x7e8>
 800a284:	9b04      	ldr	r3, [sp, #16]
 800a286:	e777      	b.n	800a178 <_dtoa_r+0x7e8>
 800a288:	2300      	movs	r3, #0
 800a28a:	9308      	str	r3, [sp, #32]
 800a28c:	e779      	b.n	800a182 <_dtoa_r+0x7f2>
 800a28e:	d093      	beq.n	800a1b8 <_dtoa_r+0x828>
 800a290:	331c      	adds	r3, #28
 800a292:	9a00      	ldr	r2, [sp, #0]
 800a294:	441a      	add	r2, r3
 800a296:	441e      	add	r6, r3
 800a298:	9200      	str	r2, [sp, #0]
 800a29a:	9a06      	ldr	r2, [sp, #24]
 800a29c:	441a      	add	r2, r3
 800a29e:	9206      	str	r2, [sp, #24]
 800a2a0:	e78a      	b.n	800a1b8 <_dtoa_r+0x828>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	e7f4      	b.n	800a290 <_dtoa_r+0x900>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	46b8      	mov	r8, r7
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dc20      	bgt.n	800a2f0 <_dtoa_r+0x960>
 800a2ae:	469b      	mov	fp, r3
 800a2b0:	9b07      	ldr	r3, [sp, #28]
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	dd1e      	ble.n	800a2f4 <_dtoa_r+0x964>
 800a2b6:	f1bb 0f00 	cmp.w	fp, #0
 800a2ba:	f47f adb1 	bne.w	8009e20 <_dtoa_r+0x490>
 800a2be:	4621      	mov	r1, r4
 800a2c0:	465b      	mov	r3, fp
 800a2c2:	2205      	movs	r2, #5
 800a2c4:	4648      	mov	r0, r9
 800a2c6:	f000 fa97 	bl	800a7f8 <__multadd>
 800a2ca:	4601      	mov	r1, r0
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	9802      	ldr	r0, [sp, #8]
 800a2d0:	f000 fcf0 	bl	800acb4 <__mcmp>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	f77f ada3 	ble.w	8009e20 <_dtoa_r+0x490>
 800a2da:	4656      	mov	r6, sl
 800a2dc:	2331      	movs	r3, #49	@ 0x31
 800a2de:	f108 0801 	add.w	r8, r8, #1
 800a2e2:	f806 3b01 	strb.w	r3, [r6], #1
 800a2e6:	e59f      	b.n	8009e28 <_dtoa_r+0x498>
 800a2e8:	46b8      	mov	r8, r7
 800a2ea:	9c03      	ldr	r4, [sp, #12]
 800a2ec:	4625      	mov	r5, r4
 800a2ee:	e7f4      	b.n	800a2da <_dtoa_r+0x94a>
 800a2f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a2f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 8102 	beq.w	800a500 <_dtoa_r+0xb70>
 800a2fc:	2e00      	cmp	r6, #0
 800a2fe:	dd05      	ble.n	800a30c <_dtoa_r+0x97c>
 800a300:	4629      	mov	r1, r5
 800a302:	4632      	mov	r2, r6
 800a304:	4648      	mov	r0, r9
 800a306:	f000 fc69 	bl	800abdc <__lshift>
 800a30a:	4605      	mov	r5, r0
 800a30c:	9b08      	ldr	r3, [sp, #32]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d05c      	beq.n	800a3cc <_dtoa_r+0xa3c>
 800a312:	6869      	ldr	r1, [r5, #4]
 800a314:	4648      	mov	r0, r9
 800a316:	f000 fa0d 	bl	800a734 <_Balloc>
 800a31a:	4606      	mov	r6, r0
 800a31c:	b928      	cbnz	r0, 800a32a <_dtoa_r+0x99a>
 800a31e:	4b83      	ldr	r3, [pc, #524]	@ (800a52c <_dtoa_r+0xb9c>)
 800a320:	4602      	mov	r2, r0
 800a322:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a326:	f7ff bb4a 	b.w	80099be <_dtoa_r+0x2e>
 800a32a:	692a      	ldr	r2, [r5, #16]
 800a32c:	f105 010c 	add.w	r1, r5, #12
 800a330:	300c      	adds	r0, #12
 800a332:	3202      	adds	r2, #2
 800a334:	0092      	lsls	r2, r2, #2
 800a336:	f002 faf3 	bl	800c920 <memcpy>
 800a33a:	2201      	movs	r2, #1
 800a33c:	4631      	mov	r1, r6
 800a33e:	4648      	mov	r0, r9
 800a340:	f000 fc4c 	bl	800abdc <__lshift>
 800a344:	f10a 0301 	add.w	r3, sl, #1
 800a348:	462f      	mov	r7, r5
 800a34a:	4605      	mov	r5, r0
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	eb0a 030b 	add.w	r3, sl, fp
 800a352:	9308      	str	r3, [sp, #32]
 800a354:	9b04      	ldr	r3, [sp, #16]
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	9306      	str	r3, [sp, #24]
 800a35c:	9b00      	ldr	r3, [sp, #0]
 800a35e:	4621      	mov	r1, r4
 800a360:	9802      	ldr	r0, [sp, #8]
 800a362:	f103 3bff 	add.w	fp, r3, #4294967295
 800a366:	f7ff fa83 	bl	8009870 <quorem>
 800a36a:	4603      	mov	r3, r0
 800a36c:	4639      	mov	r1, r7
 800a36e:	9003      	str	r0, [sp, #12]
 800a370:	3330      	adds	r3, #48	@ 0x30
 800a372:	9802      	ldr	r0, [sp, #8]
 800a374:	9309      	str	r3, [sp, #36]	@ 0x24
 800a376:	f000 fc9d 	bl	800acb4 <__mcmp>
 800a37a:	462a      	mov	r2, r5
 800a37c:	9004      	str	r0, [sp, #16]
 800a37e:	4621      	mov	r1, r4
 800a380:	4648      	mov	r0, r9
 800a382:	f000 fcb3 	bl	800acec <__mdiff>
 800a386:	68c2      	ldr	r2, [r0, #12]
 800a388:	4606      	mov	r6, r0
 800a38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a38c:	bb02      	cbnz	r2, 800a3d0 <_dtoa_r+0xa40>
 800a38e:	4601      	mov	r1, r0
 800a390:	9802      	ldr	r0, [sp, #8]
 800a392:	f000 fc8f 	bl	800acb4 <__mcmp>
 800a396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a398:	4602      	mov	r2, r0
 800a39a:	4631      	mov	r1, r6
 800a39c:	4648      	mov	r0, r9
 800a39e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a3a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3a2:	f000 fa07 	bl	800a7b4 <_Bfree>
 800a3a6:	9b07      	ldr	r3, [sp, #28]
 800a3a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a3aa:	9e00      	ldr	r6, [sp, #0]
 800a3ac:	ea42 0103 	orr.w	r1, r2, r3
 800a3b0:	9b06      	ldr	r3, [sp, #24]
 800a3b2:	4319      	orrs	r1, r3
 800a3b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b6:	d10d      	bne.n	800a3d4 <_dtoa_r+0xa44>
 800a3b8:	2b39      	cmp	r3, #57	@ 0x39
 800a3ba:	d027      	beq.n	800a40c <_dtoa_r+0xa7c>
 800a3bc:	9a04      	ldr	r2, [sp, #16]
 800a3be:	2a00      	cmp	r2, #0
 800a3c0:	dd01      	ble.n	800a3c6 <_dtoa_r+0xa36>
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	3331      	adds	r3, #49	@ 0x31
 800a3c6:	f88b 3000 	strb.w	r3, [fp]
 800a3ca:	e52e      	b.n	8009e2a <_dtoa_r+0x49a>
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	e7b9      	b.n	800a344 <_dtoa_r+0x9b4>
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	e7e2      	b.n	800a39a <_dtoa_r+0xa0a>
 800a3d4:	9904      	ldr	r1, [sp, #16]
 800a3d6:	2900      	cmp	r1, #0
 800a3d8:	db04      	blt.n	800a3e4 <_dtoa_r+0xa54>
 800a3da:	9807      	ldr	r0, [sp, #28]
 800a3dc:	4301      	orrs	r1, r0
 800a3de:	9806      	ldr	r0, [sp, #24]
 800a3e0:	4301      	orrs	r1, r0
 800a3e2:	d120      	bne.n	800a426 <_dtoa_r+0xa96>
 800a3e4:	2a00      	cmp	r2, #0
 800a3e6:	ddee      	ble.n	800a3c6 <_dtoa_r+0xa36>
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	9902      	ldr	r1, [sp, #8]
 800a3ec:	4648      	mov	r0, r9
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	f000 fbf4 	bl	800abdc <__lshift>
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	9002      	str	r0, [sp, #8]
 800a3f8:	f000 fc5c 	bl	800acb4 <__mcmp>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	9b00      	ldr	r3, [sp, #0]
 800a400:	dc02      	bgt.n	800a408 <_dtoa_r+0xa78>
 800a402:	d1e0      	bne.n	800a3c6 <_dtoa_r+0xa36>
 800a404:	07da      	lsls	r2, r3, #31
 800a406:	d5de      	bpl.n	800a3c6 <_dtoa_r+0xa36>
 800a408:	2b39      	cmp	r3, #57	@ 0x39
 800a40a:	d1da      	bne.n	800a3c2 <_dtoa_r+0xa32>
 800a40c:	2339      	movs	r3, #57	@ 0x39
 800a40e:	f88b 3000 	strb.w	r3, [fp]
 800a412:	4633      	mov	r3, r6
 800a414:	461e      	mov	r6, r3
 800a416:	3b01      	subs	r3, #1
 800a418:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a41c:	2a39      	cmp	r2, #57	@ 0x39
 800a41e:	d04f      	beq.n	800a4c0 <_dtoa_r+0xb30>
 800a420:	3201      	adds	r2, #1
 800a422:	701a      	strb	r2, [r3, #0]
 800a424:	e501      	b.n	8009e2a <_dtoa_r+0x49a>
 800a426:	2a00      	cmp	r2, #0
 800a428:	dd03      	ble.n	800a432 <_dtoa_r+0xaa2>
 800a42a:	2b39      	cmp	r3, #57	@ 0x39
 800a42c:	d0ee      	beq.n	800a40c <_dtoa_r+0xa7c>
 800a42e:	3301      	adds	r3, #1
 800a430:	e7c9      	b.n	800a3c6 <_dtoa_r+0xa36>
 800a432:	9a00      	ldr	r2, [sp, #0]
 800a434:	9908      	ldr	r1, [sp, #32]
 800a436:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a43a:	428a      	cmp	r2, r1
 800a43c:	d029      	beq.n	800a492 <_dtoa_r+0xb02>
 800a43e:	2300      	movs	r3, #0
 800a440:	220a      	movs	r2, #10
 800a442:	9902      	ldr	r1, [sp, #8]
 800a444:	4648      	mov	r0, r9
 800a446:	f000 f9d7 	bl	800a7f8 <__multadd>
 800a44a:	42af      	cmp	r7, r5
 800a44c:	9002      	str	r0, [sp, #8]
 800a44e:	f04f 0300 	mov.w	r3, #0
 800a452:	f04f 020a 	mov.w	r2, #10
 800a456:	4639      	mov	r1, r7
 800a458:	4648      	mov	r0, r9
 800a45a:	d107      	bne.n	800a46c <_dtoa_r+0xadc>
 800a45c:	f000 f9cc 	bl	800a7f8 <__multadd>
 800a460:	4607      	mov	r7, r0
 800a462:	4605      	mov	r5, r0
 800a464:	9b00      	ldr	r3, [sp, #0]
 800a466:	3301      	adds	r3, #1
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	e777      	b.n	800a35c <_dtoa_r+0x9cc>
 800a46c:	f000 f9c4 	bl	800a7f8 <__multadd>
 800a470:	4629      	mov	r1, r5
 800a472:	4607      	mov	r7, r0
 800a474:	2300      	movs	r3, #0
 800a476:	220a      	movs	r2, #10
 800a478:	4648      	mov	r0, r9
 800a47a:	f000 f9bd 	bl	800a7f8 <__multadd>
 800a47e:	4605      	mov	r5, r0
 800a480:	e7f0      	b.n	800a464 <_dtoa_r+0xad4>
 800a482:	f1bb 0f00 	cmp.w	fp, #0
 800a486:	f04f 0700 	mov.w	r7, #0
 800a48a:	bfcc      	ite	gt
 800a48c:	465e      	movgt	r6, fp
 800a48e:	2601      	movle	r6, #1
 800a490:	4456      	add	r6, sl
 800a492:	2201      	movs	r2, #1
 800a494:	9902      	ldr	r1, [sp, #8]
 800a496:	4648      	mov	r0, r9
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	f000 fb9f 	bl	800abdc <__lshift>
 800a49e:	4621      	mov	r1, r4
 800a4a0:	9002      	str	r0, [sp, #8]
 800a4a2:	f000 fc07 	bl	800acb4 <__mcmp>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	dcb3      	bgt.n	800a412 <_dtoa_r+0xa82>
 800a4aa:	d102      	bne.n	800a4b2 <_dtoa_r+0xb22>
 800a4ac:	9b00      	ldr	r3, [sp, #0]
 800a4ae:	07db      	lsls	r3, r3, #31
 800a4b0:	d4af      	bmi.n	800a412 <_dtoa_r+0xa82>
 800a4b2:	4633      	mov	r3, r6
 800a4b4:	461e      	mov	r6, r3
 800a4b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4ba:	2a30      	cmp	r2, #48	@ 0x30
 800a4bc:	d0fa      	beq.n	800a4b4 <_dtoa_r+0xb24>
 800a4be:	e4b4      	b.n	8009e2a <_dtoa_r+0x49a>
 800a4c0:	459a      	cmp	sl, r3
 800a4c2:	d1a7      	bne.n	800a414 <_dtoa_r+0xa84>
 800a4c4:	2331      	movs	r3, #49	@ 0x31
 800a4c6:	f108 0801 	add.w	r8, r8, #1
 800a4ca:	f88a 3000 	strb.w	r3, [sl]
 800a4ce:	e4ac      	b.n	8009e2a <_dtoa_r+0x49a>
 800a4d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4d2:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a530 <_dtoa_r+0xba0>
 800a4d6:	b11b      	cbz	r3, 800a4e0 <_dtoa_r+0xb50>
 800a4d8:	f10a 0308 	add.w	r3, sl, #8
 800a4dc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	4650      	mov	r0, sl
 800a4e2:	b017      	add	sp, #92	@ 0x5c
 800a4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e8:	9b07      	ldr	r3, [sp, #28]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	f77f ae2d 	ble.w	800a14a <_dtoa_r+0x7ba>
 800a4f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4f2:	9308      	str	r3, [sp, #32]
 800a4f4:	2001      	movs	r0, #1
 800a4f6:	e64c      	b.n	800a192 <_dtoa_r+0x802>
 800a4f8:	f1bb 0f00 	cmp.w	fp, #0
 800a4fc:	f77f aed8 	ble.w	800a2b0 <_dtoa_r+0x920>
 800a500:	4656      	mov	r6, sl
 800a502:	4621      	mov	r1, r4
 800a504:	9802      	ldr	r0, [sp, #8]
 800a506:	f7ff f9b3 	bl	8009870 <quorem>
 800a50a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a50e:	f806 3b01 	strb.w	r3, [r6], #1
 800a512:	eba6 020a 	sub.w	r2, r6, sl
 800a516:	4593      	cmp	fp, r2
 800a518:	ddb3      	ble.n	800a482 <_dtoa_r+0xaf2>
 800a51a:	2300      	movs	r3, #0
 800a51c:	220a      	movs	r2, #10
 800a51e:	9902      	ldr	r1, [sp, #8]
 800a520:	4648      	mov	r0, r9
 800a522:	f000 f969 	bl	800a7f8 <__multadd>
 800a526:	9002      	str	r0, [sp, #8]
 800a528:	e7eb      	b.n	800a502 <_dtoa_r+0xb72>
 800a52a:	bf00      	nop
 800a52c:	0800d93b 	.word	0x0800d93b
 800a530:	0800d8bf 	.word	0x0800d8bf

0800a534 <_free_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4605      	mov	r5, r0
 800a538:	2900      	cmp	r1, #0
 800a53a:	d041      	beq.n	800a5c0 <_free_r+0x8c>
 800a53c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a540:	1f0c      	subs	r4, r1, #4
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfb8      	it	lt
 800a546:	18e4      	addlt	r4, r4, r3
 800a548:	f000 f8e8 	bl	800a71c <__malloc_lock>
 800a54c:	4a1d      	ldr	r2, [pc, #116]	@ (800a5c4 <_free_r+0x90>)
 800a54e:	6813      	ldr	r3, [r2, #0]
 800a550:	b933      	cbnz	r3, 800a560 <_free_r+0x2c>
 800a552:	6063      	str	r3, [r4, #4]
 800a554:	6014      	str	r4, [r2, #0]
 800a556:	4628      	mov	r0, r5
 800a558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a55c:	f000 b8e4 	b.w	800a728 <__malloc_unlock>
 800a560:	42a3      	cmp	r3, r4
 800a562:	d908      	bls.n	800a576 <_free_r+0x42>
 800a564:	6820      	ldr	r0, [r4, #0]
 800a566:	1821      	adds	r1, r4, r0
 800a568:	428b      	cmp	r3, r1
 800a56a:	bf01      	itttt	eq
 800a56c:	6819      	ldreq	r1, [r3, #0]
 800a56e:	685b      	ldreq	r3, [r3, #4]
 800a570:	1809      	addeq	r1, r1, r0
 800a572:	6021      	streq	r1, [r4, #0]
 800a574:	e7ed      	b.n	800a552 <_free_r+0x1e>
 800a576:	461a      	mov	r2, r3
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	b10b      	cbz	r3, 800a580 <_free_r+0x4c>
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	d9fa      	bls.n	800a576 <_free_r+0x42>
 800a580:	6811      	ldr	r1, [r2, #0]
 800a582:	1850      	adds	r0, r2, r1
 800a584:	42a0      	cmp	r0, r4
 800a586:	d10b      	bne.n	800a5a0 <_free_r+0x6c>
 800a588:	6820      	ldr	r0, [r4, #0]
 800a58a:	4401      	add	r1, r0
 800a58c:	1850      	adds	r0, r2, r1
 800a58e:	6011      	str	r1, [r2, #0]
 800a590:	4283      	cmp	r3, r0
 800a592:	d1e0      	bne.n	800a556 <_free_r+0x22>
 800a594:	6818      	ldr	r0, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	4408      	add	r0, r1
 800a59a:	6053      	str	r3, [r2, #4]
 800a59c:	6010      	str	r0, [r2, #0]
 800a59e:	e7da      	b.n	800a556 <_free_r+0x22>
 800a5a0:	d902      	bls.n	800a5a8 <_free_r+0x74>
 800a5a2:	230c      	movs	r3, #12
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	e7d6      	b.n	800a556 <_free_r+0x22>
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	1821      	adds	r1, r4, r0
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	bf02      	ittt	eq
 800a5b0:	6819      	ldreq	r1, [r3, #0]
 800a5b2:	685b      	ldreq	r3, [r3, #4]
 800a5b4:	1809      	addeq	r1, r1, r0
 800a5b6:	6063      	str	r3, [r4, #4]
 800a5b8:	bf08      	it	eq
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	6054      	str	r4, [r2, #4]
 800a5be:	e7ca      	b.n	800a556 <_free_r+0x22>
 800a5c0:	bd38      	pop	{r3, r4, r5, pc}
 800a5c2:	bf00      	nop
 800a5c4:	200004f4 	.word	0x200004f4

0800a5c8 <malloc>:
 800a5c8:	4b02      	ldr	r3, [pc, #8]	@ (800a5d4 <malloc+0xc>)
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	f000 b825 	b.w	800a61c <_malloc_r>
 800a5d2:	bf00      	nop
 800a5d4:	20000018 	.word	0x20000018

0800a5d8 <sbrk_aligned>:
 800a5d8:	b570      	push	{r4, r5, r6, lr}
 800a5da:	4e0f      	ldr	r6, [pc, #60]	@ (800a618 <sbrk_aligned+0x40>)
 800a5dc:	460c      	mov	r4, r1
 800a5de:	4605      	mov	r5, r0
 800a5e0:	6831      	ldr	r1, [r6, #0]
 800a5e2:	b911      	cbnz	r1, 800a5ea <sbrk_aligned+0x12>
 800a5e4:	f002 f98c 	bl	800c900 <_sbrk_r>
 800a5e8:	6030      	str	r0, [r6, #0]
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	f002 f987 	bl	800c900 <_sbrk_r>
 800a5f2:	1c43      	adds	r3, r0, #1
 800a5f4:	d103      	bne.n	800a5fe <sbrk_aligned+0x26>
 800a5f6:	f04f 34ff 	mov.w	r4, #4294967295
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	bd70      	pop	{r4, r5, r6, pc}
 800a5fe:	1cc4      	adds	r4, r0, #3
 800a600:	f024 0403 	bic.w	r4, r4, #3
 800a604:	42a0      	cmp	r0, r4
 800a606:	d0f8      	beq.n	800a5fa <sbrk_aligned+0x22>
 800a608:	1a21      	subs	r1, r4, r0
 800a60a:	4628      	mov	r0, r5
 800a60c:	f002 f978 	bl	800c900 <_sbrk_r>
 800a610:	3001      	adds	r0, #1
 800a612:	d1f2      	bne.n	800a5fa <sbrk_aligned+0x22>
 800a614:	e7ef      	b.n	800a5f6 <sbrk_aligned+0x1e>
 800a616:	bf00      	nop
 800a618:	200004f0 	.word	0x200004f0

0800a61c <_malloc_r>:
 800a61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a620:	1ccd      	adds	r5, r1, #3
 800a622:	4606      	mov	r6, r0
 800a624:	f025 0503 	bic.w	r5, r5, #3
 800a628:	3508      	adds	r5, #8
 800a62a:	2d0c      	cmp	r5, #12
 800a62c:	bf38      	it	cc
 800a62e:	250c      	movcc	r5, #12
 800a630:	2d00      	cmp	r5, #0
 800a632:	db01      	blt.n	800a638 <_malloc_r+0x1c>
 800a634:	42a9      	cmp	r1, r5
 800a636:	d904      	bls.n	800a642 <_malloc_r+0x26>
 800a638:	230c      	movs	r3, #12
 800a63a:	6033      	str	r3, [r6, #0]
 800a63c:	2000      	movs	r0, #0
 800a63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a642:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a718 <_malloc_r+0xfc>
 800a646:	f000 f869 	bl	800a71c <__malloc_lock>
 800a64a:	f8d8 3000 	ldr.w	r3, [r8]
 800a64e:	461c      	mov	r4, r3
 800a650:	bb44      	cbnz	r4, 800a6a4 <_malloc_r+0x88>
 800a652:	4629      	mov	r1, r5
 800a654:	4630      	mov	r0, r6
 800a656:	f7ff ffbf 	bl	800a5d8 <sbrk_aligned>
 800a65a:	1c43      	adds	r3, r0, #1
 800a65c:	4604      	mov	r4, r0
 800a65e:	d158      	bne.n	800a712 <_malloc_r+0xf6>
 800a660:	f8d8 4000 	ldr.w	r4, [r8]
 800a664:	4627      	mov	r7, r4
 800a666:	2f00      	cmp	r7, #0
 800a668:	d143      	bne.n	800a6f2 <_malloc_r+0xd6>
 800a66a:	2c00      	cmp	r4, #0
 800a66c:	d04b      	beq.n	800a706 <_malloc_r+0xea>
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	4639      	mov	r1, r7
 800a672:	4630      	mov	r0, r6
 800a674:	eb04 0903 	add.w	r9, r4, r3
 800a678:	f002 f942 	bl	800c900 <_sbrk_r>
 800a67c:	4581      	cmp	r9, r0
 800a67e:	d142      	bne.n	800a706 <_malloc_r+0xea>
 800a680:	6821      	ldr	r1, [r4, #0]
 800a682:	4630      	mov	r0, r6
 800a684:	1a6d      	subs	r5, r5, r1
 800a686:	4629      	mov	r1, r5
 800a688:	f7ff ffa6 	bl	800a5d8 <sbrk_aligned>
 800a68c:	3001      	adds	r0, #1
 800a68e:	d03a      	beq.n	800a706 <_malloc_r+0xea>
 800a690:	6823      	ldr	r3, [r4, #0]
 800a692:	442b      	add	r3, r5
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	f8d8 3000 	ldr.w	r3, [r8]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	bb62      	cbnz	r2, 800a6f8 <_malloc_r+0xdc>
 800a69e:	f8c8 7000 	str.w	r7, [r8]
 800a6a2:	e00f      	b.n	800a6c4 <_malloc_r+0xa8>
 800a6a4:	6822      	ldr	r2, [r4, #0]
 800a6a6:	1b52      	subs	r2, r2, r5
 800a6a8:	d420      	bmi.n	800a6ec <_malloc_r+0xd0>
 800a6aa:	2a0b      	cmp	r2, #11
 800a6ac:	d917      	bls.n	800a6de <_malloc_r+0xc2>
 800a6ae:	1961      	adds	r1, r4, r5
 800a6b0:	42a3      	cmp	r3, r4
 800a6b2:	6025      	str	r5, [r4, #0]
 800a6b4:	bf18      	it	ne
 800a6b6:	6059      	strne	r1, [r3, #4]
 800a6b8:	6863      	ldr	r3, [r4, #4]
 800a6ba:	bf08      	it	eq
 800a6bc:	f8c8 1000 	streq.w	r1, [r8]
 800a6c0:	5162      	str	r2, [r4, r5]
 800a6c2:	604b      	str	r3, [r1, #4]
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f000 f82f 	bl	800a728 <__malloc_unlock>
 800a6ca:	f104 000b 	add.w	r0, r4, #11
 800a6ce:	1d23      	adds	r3, r4, #4
 800a6d0:	f020 0007 	bic.w	r0, r0, #7
 800a6d4:	1ac2      	subs	r2, r0, r3
 800a6d6:	bf1c      	itt	ne
 800a6d8:	1a1b      	subne	r3, r3, r0
 800a6da:	50a3      	strne	r3, [r4, r2]
 800a6dc:	e7af      	b.n	800a63e <_malloc_r+0x22>
 800a6de:	6862      	ldr	r2, [r4, #4]
 800a6e0:	42a3      	cmp	r3, r4
 800a6e2:	bf0c      	ite	eq
 800a6e4:	f8c8 2000 	streq.w	r2, [r8]
 800a6e8:	605a      	strne	r2, [r3, #4]
 800a6ea:	e7eb      	b.n	800a6c4 <_malloc_r+0xa8>
 800a6ec:	4623      	mov	r3, r4
 800a6ee:	6864      	ldr	r4, [r4, #4]
 800a6f0:	e7ae      	b.n	800a650 <_malloc_r+0x34>
 800a6f2:	463c      	mov	r4, r7
 800a6f4:	687f      	ldr	r7, [r7, #4]
 800a6f6:	e7b6      	b.n	800a666 <_malloc_r+0x4a>
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	42a3      	cmp	r3, r4
 800a6fe:	d1fb      	bne.n	800a6f8 <_malloc_r+0xdc>
 800a700:	2300      	movs	r3, #0
 800a702:	6053      	str	r3, [r2, #4]
 800a704:	e7de      	b.n	800a6c4 <_malloc_r+0xa8>
 800a706:	230c      	movs	r3, #12
 800a708:	4630      	mov	r0, r6
 800a70a:	6033      	str	r3, [r6, #0]
 800a70c:	f000 f80c 	bl	800a728 <__malloc_unlock>
 800a710:	e794      	b.n	800a63c <_malloc_r+0x20>
 800a712:	6005      	str	r5, [r0, #0]
 800a714:	e7d6      	b.n	800a6c4 <_malloc_r+0xa8>
 800a716:	bf00      	nop
 800a718:	200004f4 	.word	0x200004f4

0800a71c <__malloc_lock>:
 800a71c:	4801      	ldr	r0, [pc, #4]	@ (800a724 <__malloc_lock+0x8>)
 800a71e:	f7ff b890 	b.w	8009842 <__retarget_lock_acquire_recursive>
 800a722:	bf00      	nop
 800a724:	200004ec 	.word	0x200004ec

0800a728 <__malloc_unlock>:
 800a728:	4801      	ldr	r0, [pc, #4]	@ (800a730 <__malloc_unlock+0x8>)
 800a72a:	f7ff b88b 	b.w	8009844 <__retarget_lock_release_recursive>
 800a72e:	bf00      	nop
 800a730:	200004ec 	.word	0x200004ec

0800a734 <_Balloc>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	69c6      	ldr	r6, [r0, #28]
 800a738:	4604      	mov	r4, r0
 800a73a:	460d      	mov	r5, r1
 800a73c:	b976      	cbnz	r6, 800a75c <_Balloc+0x28>
 800a73e:	2010      	movs	r0, #16
 800a740:	f7ff ff42 	bl	800a5c8 <malloc>
 800a744:	4602      	mov	r2, r0
 800a746:	61e0      	str	r0, [r4, #28]
 800a748:	b920      	cbnz	r0, 800a754 <_Balloc+0x20>
 800a74a:	4b18      	ldr	r3, [pc, #96]	@ (800a7ac <_Balloc+0x78>)
 800a74c:	216b      	movs	r1, #107	@ 0x6b
 800a74e:	4818      	ldr	r0, [pc, #96]	@ (800a7b0 <_Balloc+0x7c>)
 800a750:	f002 f8fe 	bl	800c950 <__assert_func>
 800a754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a758:	6006      	str	r6, [r0, #0]
 800a75a:	60c6      	str	r6, [r0, #12]
 800a75c:	69e6      	ldr	r6, [r4, #28]
 800a75e:	68f3      	ldr	r3, [r6, #12]
 800a760:	b183      	cbz	r3, 800a784 <_Balloc+0x50>
 800a762:	69e3      	ldr	r3, [r4, #28]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a76a:	b9b8      	cbnz	r0, 800a79c <_Balloc+0x68>
 800a76c:	2101      	movs	r1, #1
 800a76e:	4620      	mov	r0, r4
 800a770:	fa01 f605 	lsl.w	r6, r1, r5
 800a774:	1d72      	adds	r2, r6, #5
 800a776:	0092      	lsls	r2, r2, #2
 800a778:	f002 f908 	bl	800c98c <_calloc_r>
 800a77c:	b160      	cbz	r0, 800a798 <_Balloc+0x64>
 800a77e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a782:	e00e      	b.n	800a7a2 <_Balloc+0x6e>
 800a784:	2221      	movs	r2, #33	@ 0x21
 800a786:	2104      	movs	r1, #4
 800a788:	4620      	mov	r0, r4
 800a78a:	f002 f8ff 	bl	800c98c <_calloc_r>
 800a78e:	69e3      	ldr	r3, [r4, #28]
 800a790:	60f0      	str	r0, [r6, #12]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1e4      	bne.n	800a762 <_Balloc+0x2e>
 800a798:	2000      	movs	r0, #0
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	6802      	ldr	r2, [r0, #0]
 800a79e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7a8:	e7f7      	b.n	800a79a <_Balloc+0x66>
 800a7aa:	bf00      	nop
 800a7ac:	0800d8cc 	.word	0x0800d8cc
 800a7b0:	0800d94c 	.word	0x0800d94c

0800a7b4 <_Bfree>:
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	69c6      	ldr	r6, [r0, #28]
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	b976      	cbnz	r6, 800a7dc <_Bfree+0x28>
 800a7be:	2010      	movs	r0, #16
 800a7c0:	f7ff ff02 	bl	800a5c8 <malloc>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	61e8      	str	r0, [r5, #28]
 800a7c8:	b920      	cbnz	r0, 800a7d4 <_Bfree+0x20>
 800a7ca:	4b09      	ldr	r3, [pc, #36]	@ (800a7f0 <_Bfree+0x3c>)
 800a7cc:	218f      	movs	r1, #143	@ 0x8f
 800a7ce:	4809      	ldr	r0, [pc, #36]	@ (800a7f4 <_Bfree+0x40>)
 800a7d0:	f002 f8be 	bl	800c950 <__assert_func>
 800a7d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7d8:	6006      	str	r6, [r0, #0]
 800a7da:	60c6      	str	r6, [r0, #12]
 800a7dc:	b13c      	cbz	r4, 800a7ee <_Bfree+0x3a>
 800a7de:	69eb      	ldr	r3, [r5, #28]
 800a7e0:	6862      	ldr	r2, [r4, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7e8:	6021      	str	r1, [r4, #0]
 800a7ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}
 800a7f0:	0800d8cc 	.word	0x0800d8cc
 800a7f4:	0800d94c 	.word	0x0800d94c

0800a7f8 <__multadd>:
 800a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fc:	f101 0c14 	add.w	ip, r1, #20
 800a800:	4607      	mov	r7, r0
 800a802:	460c      	mov	r4, r1
 800a804:	461e      	mov	r6, r3
 800a806:	690d      	ldr	r5, [r1, #16]
 800a808:	2000      	movs	r0, #0
 800a80a:	f8dc 3000 	ldr.w	r3, [ip]
 800a80e:	3001      	adds	r0, #1
 800a810:	b299      	uxth	r1, r3
 800a812:	4285      	cmp	r5, r0
 800a814:	fb02 6101 	mla	r1, r2, r1, r6
 800a818:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a81c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800a820:	b289      	uxth	r1, r1
 800a822:	fb02 3306 	mla	r3, r2, r6, r3
 800a826:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a82a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a82e:	f84c 1b04 	str.w	r1, [ip], #4
 800a832:	dcea      	bgt.n	800a80a <__multadd+0x12>
 800a834:	b30e      	cbz	r6, 800a87a <__multadd+0x82>
 800a836:	68a3      	ldr	r3, [r4, #8]
 800a838:	42ab      	cmp	r3, r5
 800a83a:	dc19      	bgt.n	800a870 <__multadd+0x78>
 800a83c:	6861      	ldr	r1, [r4, #4]
 800a83e:	4638      	mov	r0, r7
 800a840:	3101      	adds	r1, #1
 800a842:	f7ff ff77 	bl	800a734 <_Balloc>
 800a846:	4680      	mov	r8, r0
 800a848:	b928      	cbnz	r0, 800a856 <__multadd+0x5e>
 800a84a:	4602      	mov	r2, r0
 800a84c:	4b0c      	ldr	r3, [pc, #48]	@ (800a880 <__multadd+0x88>)
 800a84e:	21ba      	movs	r1, #186	@ 0xba
 800a850:	480c      	ldr	r0, [pc, #48]	@ (800a884 <__multadd+0x8c>)
 800a852:	f002 f87d 	bl	800c950 <__assert_func>
 800a856:	6922      	ldr	r2, [r4, #16]
 800a858:	f104 010c 	add.w	r1, r4, #12
 800a85c:	300c      	adds	r0, #12
 800a85e:	3202      	adds	r2, #2
 800a860:	0092      	lsls	r2, r2, #2
 800a862:	f002 f85d 	bl	800c920 <memcpy>
 800a866:	4621      	mov	r1, r4
 800a868:	4644      	mov	r4, r8
 800a86a:	4638      	mov	r0, r7
 800a86c:	f7ff ffa2 	bl	800a7b4 <_Bfree>
 800a870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a874:	3501      	adds	r5, #1
 800a876:	615e      	str	r6, [r3, #20]
 800a878:	6125      	str	r5, [r4, #16]
 800a87a:	4620      	mov	r0, r4
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	0800d93b 	.word	0x0800d93b
 800a884:	0800d94c 	.word	0x0800d94c

0800a888 <__s2b>:
 800a888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a88c:	4615      	mov	r5, r2
 800a88e:	461f      	mov	r7, r3
 800a890:	2209      	movs	r2, #9
 800a892:	3308      	adds	r3, #8
 800a894:	460c      	mov	r4, r1
 800a896:	4606      	mov	r6, r0
 800a898:	2100      	movs	r1, #0
 800a89a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a89e:	2201      	movs	r2, #1
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	db09      	blt.n	800a8b8 <__s2b+0x30>
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	f7ff ff45 	bl	800a734 <_Balloc>
 800a8aa:	b940      	cbnz	r0, 800a8be <__s2b+0x36>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	4b19      	ldr	r3, [pc, #100]	@ (800a914 <__s2b+0x8c>)
 800a8b0:	21d3      	movs	r1, #211	@ 0xd3
 800a8b2:	4819      	ldr	r0, [pc, #100]	@ (800a918 <__s2b+0x90>)
 800a8b4:	f002 f84c 	bl	800c950 <__assert_func>
 800a8b8:	0052      	lsls	r2, r2, #1
 800a8ba:	3101      	adds	r1, #1
 800a8bc:	e7f0      	b.n	800a8a0 <__s2b+0x18>
 800a8be:	9b08      	ldr	r3, [sp, #32]
 800a8c0:	2d09      	cmp	r5, #9
 800a8c2:	6143      	str	r3, [r0, #20]
 800a8c4:	f04f 0301 	mov.w	r3, #1
 800a8c8:	6103      	str	r3, [r0, #16]
 800a8ca:	dd16      	ble.n	800a8fa <__s2b+0x72>
 800a8cc:	f104 0909 	add.w	r9, r4, #9
 800a8d0:	442c      	add	r4, r5
 800a8d2:	46c8      	mov	r8, r9
 800a8d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a8d8:	4601      	mov	r1, r0
 800a8da:	220a      	movs	r2, #10
 800a8dc:	4630      	mov	r0, r6
 800a8de:	3b30      	subs	r3, #48	@ 0x30
 800a8e0:	f7ff ff8a 	bl	800a7f8 <__multadd>
 800a8e4:	45a0      	cmp	r8, r4
 800a8e6:	d1f5      	bne.n	800a8d4 <__s2b+0x4c>
 800a8e8:	f1a5 0408 	sub.w	r4, r5, #8
 800a8ec:	444c      	add	r4, r9
 800a8ee:	1b2d      	subs	r5, r5, r4
 800a8f0:	1963      	adds	r3, r4, r5
 800a8f2:	42bb      	cmp	r3, r7
 800a8f4:	db04      	blt.n	800a900 <__s2b+0x78>
 800a8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8fa:	340a      	adds	r4, #10
 800a8fc:	2509      	movs	r5, #9
 800a8fe:	e7f6      	b.n	800a8ee <__s2b+0x66>
 800a900:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a904:	4601      	mov	r1, r0
 800a906:	220a      	movs	r2, #10
 800a908:	4630      	mov	r0, r6
 800a90a:	3b30      	subs	r3, #48	@ 0x30
 800a90c:	f7ff ff74 	bl	800a7f8 <__multadd>
 800a910:	e7ee      	b.n	800a8f0 <__s2b+0x68>
 800a912:	bf00      	nop
 800a914:	0800d93b 	.word	0x0800d93b
 800a918:	0800d94c 	.word	0x0800d94c

0800a91c <__hi0bits>:
 800a91c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a920:	4603      	mov	r3, r0
 800a922:	bf36      	itet	cc
 800a924:	0403      	lslcc	r3, r0, #16
 800a926:	2000      	movcs	r0, #0
 800a928:	2010      	movcc	r0, #16
 800a92a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a92e:	bf3c      	itt	cc
 800a930:	021b      	lslcc	r3, r3, #8
 800a932:	3008      	addcc	r0, #8
 800a934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a938:	bf3c      	itt	cc
 800a93a:	011b      	lslcc	r3, r3, #4
 800a93c:	3004      	addcc	r0, #4
 800a93e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a942:	bf3c      	itt	cc
 800a944:	009b      	lslcc	r3, r3, #2
 800a946:	3002      	addcc	r0, #2
 800a948:	2b00      	cmp	r3, #0
 800a94a:	db05      	blt.n	800a958 <__hi0bits+0x3c>
 800a94c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a950:	f100 0001 	add.w	r0, r0, #1
 800a954:	bf08      	it	eq
 800a956:	2020      	moveq	r0, #32
 800a958:	4770      	bx	lr

0800a95a <__lo0bits>:
 800a95a:	6803      	ldr	r3, [r0, #0]
 800a95c:	4602      	mov	r2, r0
 800a95e:	f013 0007 	ands.w	r0, r3, #7
 800a962:	d00b      	beq.n	800a97c <__lo0bits+0x22>
 800a964:	07d9      	lsls	r1, r3, #31
 800a966:	d421      	bmi.n	800a9ac <__lo0bits+0x52>
 800a968:	0798      	lsls	r0, r3, #30
 800a96a:	bf47      	ittee	mi
 800a96c:	085b      	lsrmi	r3, r3, #1
 800a96e:	2001      	movmi	r0, #1
 800a970:	089b      	lsrpl	r3, r3, #2
 800a972:	2002      	movpl	r0, #2
 800a974:	bf4c      	ite	mi
 800a976:	6013      	strmi	r3, [r2, #0]
 800a978:	6013      	strpl	r3, [r2, #0]
 800a97a:	4770      	bx	lr
 800a97c:	b299      	uxth	r1, r3
 800a97e:	b909      	cbnz	r1, 800a984 <__lo0bits+0x2a>
 800a980:	0c1b      	lsrs	r3, r3, #16
 800a982:	2010      	movs	r0, #16
 800a984:	b2d9      	uxtb	r1, r3
 800a986:	b909      	cbnz	r1, 800a98c <__lo0bits+0x32>
 800a988:	3008      	adds	r0, #8
 800a98a:	0a1b      	lsrs	r3, r3, #8
 800a98c:	0719      	lsls	r1, r3, #28
 800a98e:	bf04      	itt	eq
 800a990:	091b      	lsreq	r3, r3, #4
 800a992:	3004      	addeq	r0, #4
 800a994:	0799      	lsls	r1, r3, #30
 800a996:	bf04      	itt	eq
 800a998:	089b      	lsreq	r3, r3, #2
 800a99a:	3002      	addeq	r0, #2
 800a99c:	07d9      	lsls	r1, r3, #31
 800a99e:	d403      	bmi.n	800a9a8 <__lo0bits+0x4e>
 800a9a0:	085b      	lsrs	r3, r3, #1
 800a9a2:	f100 0001 	add.w	r0, r0, #1
 800a9a6:	d003      	beq.n	800a9b0 <__lo0bits+0x56>
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	4770      	bx	lr
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	4770      	bx	lr
 800a9b0:	2020      	movs	r0, #32
 800a9b2:	4770      	bx	lr

0800a9b4 <__i2b>:
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	f7ff febb 	bl	800a734 <_Balloc>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	b928      	cbnz	r0, 800a9ce <__i2b+0x1a>
 800a9c2:	4b05      	ldr	r3, [pc, #20]	@ (800a9d8 <__i2b+0x24>)
 800a9c4:	f240 1145 	movw	r1, #325	@ 0x145
 800a9c8:	4804      	ldr	r0, [pc, #16]	@ (800a9dc <__i2b+0x28>)
 800a9ca:	f001 ffc1 	bl	800c950 <__assert_func>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	6144      	str	r4, [r0, #20]
 800a9d2:	6103      	str	r3, [r0, #16]
 800a9d4:	bd10      	pop	{r4, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0800d93b 	.word	0x0800d93b
 800a9dc:	0800d94c 	.word	0x0800d94c

0800a9e0 <__multiply>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	4617      	mov	r7, r2
 800a9e6:	690a      	ldr	r2, [r1, #16]
 800a9e8:	4689      	mov	r9, r1
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	bfa2      	ittt	ge
 800a9f2:	463b      	movge	r3, r7
 800a9f4:	460f      	movge	r7, r1
 800a9f6:	4699      	movge	r9, r3
 800a9f8:	693d      	ldr	r5, [r7, #16]
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa00:	6879      	ldr	r1, [r7, #4]
 800aa02:	eb05 060a 	add.w	r6, r5, sl
 800aa06:	42b3      	cmp	r3, r6
 800aa08:	bfb8      	it	lt
 800aa0a:	3101      	addlt	r1, #1
 800aa0c:	f7ff fe92 	bl	800a734 <_Balloc>
 800aa10:	b930      	cbnz	r0, 800aa20 <__multiply+0x40>
 800aa12:	4602      	mov	r2, r0
 800aa14:	4b42      	ldr	r3, [pc, #264]	@ (800ab20 <__multiply+0x140>)
 800aa16:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aa1a:	4842      	ldr	r0, [pc, #264]	@ (800ab24 <__multiply+0x144>)
 800aa1c:	f001 ff98 	bl	800c950 <__assert_func>
 800aa20:	f100 0414 	add.w	r4, r0, #20
 800aa24:	2200      	movs	r2, #0
 800aa26:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800aa2a:	4623      	mov	r3, r4
 800aa2c:	4573      	cmp	r3, lr
 800aa2e:	d320      	bcc.n	800aa72 <__multiply+0x92>
 800aa30:	f107 0814 	add.w	r8, r7, #20
 800aa34:	f109 0114 	add.w	r1, r9, #20
 800aa38:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800aa3c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800aa40:	9302      	str	r3, [sp, #8]
 800aa42:	1beb      	subs	r3, r5, r7
 800aa44:	3715      	adds	r7, #21
 800aa46:	3b15      	subs	r3, #21
 800aa48:	f023 0303 	bic.w	r3, r3, #3
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	42bd      	cmp	r5, r7
 800aa50:	bf38      	it	cc
 800aa52:	2304      	movcc	r3, #4
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	9b02      	ldr	r3, [sp, #8]
 800aa58:	9103      	str	r1, [sp, #12]
 800aa5a:	428b      	cmp	r3, r1
 800aa5c:	d80c      	bhi.n	800aa78 <__multiply+0x98>
 800aa5e:	2e00      	cmp	r6, #0
 800aa60:	dd03      	ble.n	800aa6a <__multiply+0x8a>
 800aa62:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d057      	beq.n	800ab1a <__multiply+0x13a>
 800aa6a:	6106      	str	r6, [r0, #16]
 800aa6c:	b005      	add	sp, #20
 800aa6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa72:	f843 2b04 	str.w	r2, [r3], #4
 800aa76:	e7d9      	b.n	800aa2c <__multiply+0x4c>
 800aa78:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa7c:	f1ba 0f00 	cmp.w	sl, #0
 800aa80:	d021      	beq.n	800aac6 <__multiply+0xe6>
 800aa82:	46c4      	mov	ip, r8
 800aa84:	46a1      	mov	r9, r4
 800aa86:	2700      	movs	r7, #0
 800aa88:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aa8c:	f8d9 3000 	ldr.w	r3, [r9]
 800aa90:	fa1f fb82 	uxth.w	fp, r2
 800aa94:	4565      	cmp	r5, ip
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800aa9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800aaa0:	443b      	add	r3, r7
 800aaa2:	f8d9 7000 	ldr.w	r7, [r9]
 800aaa6:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800aaaa:	fb0a 7202 	mla	r2, sl, r2, r7
 800aaae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800aab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aabc:	f849 3b04 	str.w	r3, [r9], #4
 800aac0:	d8e2      	bhi.n	800aa88 <__multiply+0xa8>
 800aac2:	9b01      	ldr	r3, [sp, #4]
 800aac4:	50e7      	str	r7, [r4, r3]
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	3104      	adds	r1, #4
 800aaca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aace:	f1b9 0f00 	cmp.w	r9, #0
 800aad2:	d020      	beq.n	800ab16 <__multiply+0x136>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	4647      	mov	r7, r8
 800aad8:	46a4      	mov	ip, r4
 800aada:	f04f 0a00 	mov.w	sl, #0
 800aade:	f8b7 b000 	ldrh.w	fp, [r7]
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800aae8:	fb09 220b 	mla	r2, r9, fp, r2
 800aaec:	4452      	add	r2, sl
 800aaee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaf2:	f84c 3b04 	str.w	r3, [ip], #4
 800aaf6:	f857 3b04 	ldr.w	r3, [r7], #4
 800aafa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aafe:	f8bc 3000 	ldrh.w	r3, [ip]
 800ab02:	42bd      	cmp	r5, r7
 800ab04:	fb09 330a 	mla	r3, r9, sl, r3
 800ab08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ab0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab10:	d8e5      	bhi.n	800aade <__multiply+0xfe>
 800ab12:	9a01      	ldr	r2, [sp, #4]
 800ab14:	50a3      	str	r3, [r4, r2]
 800ab16:	3404      	adds	r4, #4
 800ab18:	e79d      	b.n	800aa56 <__multiply+0x76>
 800ab1a:	3e01      	subs	r6, #1
 800ab1c:	e79f      	b.n	800aa5e <__multiply+0x7e>
 800ab1e:	bf00      	nop
 800ab20:	0800d93b 	.word	0x0800d93b
 800ab24:	0800d94c 	.word	0x0800d94c

0800ab28 <__pow5mult>:
 800ab28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab2c:	4615      	mov	r5, r2
 800ab2e:	f012 0203 	ands.w	r2, r2, #3
 800ab32:	4607      	mov	r7, r0
 800ab34:	460e      	mov	r6, r1
 800ab36:	d007      	beq.n	800ab48 <__pow5mult+0x20>
 800ab38:	3a01      	subs	r2, #1
 800ab3a:	4c25      	ldr	r4, [pc, #148]	@ (800abd0 <__pow5mult+0xa8>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab42:	f7ff fe59 	bl	800a7f8 <__multadd>
 800ab46:	4606      	mov	r6, r0
 800ab48:	10ad      	asrs	r5, r5, #2
 800ab4a:	d03d      	beq.n	800abc8 <__pow5mult+0xa0>
 800ab4c:	69fc      	ldr	r4, [r7, #28]
 800ab4e:	b97c      	cbnz	r4, 800ab70 <__pow5mult+0x48>
 800ab50:	2010      	movs	r0, #16
 800ab52:	f7ff fd39 	bl	800a5c8 <malloc>
 800ab56:	4602      	mov	r2, r0
 800ab58:	61f8      	str	r0, [r7, #28]
 800ab5a:	b928      	cbnz	r0, 800ab68 <__pow5mult+0x40>
 800ab5c:	4b1d      	ldr	r3, [pc, #116]	@ (800abd4 <__pow5mult+0xac>)
 800ab5e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ab62:	481d      	ldr	r0, [pc, #116]	@ (800abd8 <__pow5mult+0xb0>)
 800ab64:	f001 fef4 	bl	800c950 <__assert_func>
 800ab68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab6c:	6004      	str	r4, [r0, #0]
 800ab6e:	60c4      	str	r4, [r0, #12]
 800ab70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab78:	b94c      	cbnz	r4, 800ab8e <__pow5mult+0x66>
 800ab7a:	f240 2171 	movw	r1, #625	@ 0x271
 800ab7e:	4638      	mov	r0, r7
 800ab80:	f7ff ff18 	bl	800a9b4 <__i2b>
 800ab84:	2300      	movs	r3, #0
 800ab86:	4604      	mov	r4, r0
 800ab88:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab8c:	6003      	str	r3, [r0, #0]
 800ab8e:	f04f 0900 	mov.w	r9, #0
 800ab92:	07eb      	lsls	r3, r5, #31
 800ab94:	d50a      	bpl.n	800abac <__pow5mult+0x84>
 800ab96:	4631      	mov	r1, r6
 800ab98:	4622      	mov	r2, r4
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	f7ff ff20 	bl	800a9e0 <__multiply>
 800aba0:	4680      	mov	r8, r0
 800aba2:	4631      	mov	r1, r6
 800aba4:	4638      	mov	r0, r7
 800aba6:	4646      	mov	r6, r8
 800aba8:	f7ff fe04 	bl	800a7b4 <_Bfree>
 800abac:	106d      	asrs	r5, r5, #1
 800abae:	d00b      	beq.n	800abc8 <__pow5mult+0xa0>
 800abb0:	6820      	ldr	r0, [r4, #0]
 800abb2:	b938      	cbnz	r0, 800abc4 <__pow5mult+0x9c>
 800abb4:	4622      	mov	r2, r4
 800abb6:	4621      	mov	r1, r4
 800abb8:	4638      	mov	r0, r7
 800abba:	f7ff ff11 	bl	800a9e0 <__multiply>
 800abbe:	6020      	str	r0, [r4, #0]
 800abc0:	f8c0 9000 	str.w	r9, [r0]
 800abc4:	4604      	mov	r4, r0
 800abc6:	e7e4      	b.n	800ab92 <__pow5mult+0x6a>
 800abc8:	4630      	mov	r0, r6
 800abca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abce:	bf00      	nop
 800abd0:	0800da78 	.word	0x0800da78
 800abd4:	0800d8cc 	.word	0x0800d8cc
 800abd8:	0800d94c 	.word	0x0800d94c

0800abdc <__lshift>:
 800abdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe0:	460c      	mov	r4, r1
 800abe2:	4607      	mov	r7, r0
 800abe4:	4691      	mov	r9, r2
 800abe6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abea:	6923      	ldr	r3, [r4, #16]
 800abec:	6849      	ldr	r1, [r1, #4]
 800abee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abf2:	68a3      	ldr	r3, [r4, #8]
 800abf4:	f108 0601 	add.w	r6, r8, #1
 800abf8:	42b3      	cmp	r3, r6
 800abfa:	db0b      	blt.n	800ac14 <__lshift+0x38>
 800abfc:	4638      	mov	r0, r7
 800abfe:	f7ff fd99 	bl	800a734 <_Balloc>
 800ac02:	4605      	mov	r5, r0
 800ac04:	b948      	cbnz	r0, 800ac1a <__lshift+0x3e>
 800ac06:	4602      	mov	r2, r0
 800ac08:	4b28      	ldr	r3, [pc, #160]	@ (800acac <__lshift+0xd0>)
 800ac0a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ac0e:	4828      	ldr	r0, [pc, #160]	@ (800acb0 <__lshift+0xd4>)
 800ac10:	f001 fe9e 	bl	800c950 <__assert_func>
 800ac14:	3101      	adds	r1, #1
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	e7ee      	b.n	800abf8 <__lshift+0x1c>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f100 0114 	add.w	r1, r0, #20
 800ac20:	f100 0210 	add.w	r2, r0, #16
 800ac24:	4618      	mov	r0, r3
 800ac26:	4553      	cmp	r3, sl
 800ac28:	db33      	blt.n	800ac92 <__lshift+0xb6>
 800ac2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac2e:	f104 0314 	add.w	r3, r4, #20
 800ac32:	6920      	ldr	r0, [r4, #16]
 800ac34:	f019 091f 	ands.w	r9, r9, #31
 800ac38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac40:	d02b      	beq.n	800ac9a <__lshift+0xbe>
 800ac42:	f1c9 0e20 	rsb	lr, r9, #32
 800ac46:	468a      	mov	sl, r1
 800ac48:	2200      	movs	r2, #0
 800ac4a:	6818      	ldr	r0, [r3, #0]
 800ac4c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac50:	4310      	orrs	r0, r2
 800ac52:	f84a 0b04 	str.w	r0, [sl], #4
 800ac56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac5a:	459c      	cmp	ip, r3
 800ac5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac60:	d8f3      	bhi.n	800ac4a <__lshift+0x6e>
 800ac62:	ebac 0304 	sub.w	r3, ip, r4
 800ac66:	f104 0015 	add.w	r0, r4, #21
 800ac6a:	3b15      	subs	r3, #21
 800ac6c:	f023 0303 	bic.w	r3, r3, #3
 800ac70:	3304      	adds	r3, #4
 800ac72:	4560      	cmp	r0, ip
 800ac74:	bf88      	it	hi
 800ac76:	2304      	movhi	r3, #4
 800ac78:	50ca      	str	r2, [r1, r3]
 800ac7a:	b10a      	cbz	r2, 800ac80 <__lshift+0xa4>
 800ac7c:	f108 0602 	add.w	r6, r8, #2
 800ac80:	3e01      	subs	r6, #1
 800ac82:	4638      	mov	r0, r7
 800ac84:	4621      	mov	r1, r4
 800ac86:	612e      	str	r6, [r5, #16]
 800ac88:	f7ff fd94 	bl	800a7b4 <_Bfree>
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac92:	3301      	adds	r3, #1
 800ac94:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac98:	e7c5      	b.n	800ac26 <__lshift+0x4a>
 800ac9a:	3904      	subs	r1, #4
 800ac9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aca0:	459c      	cmp	ip, r3
 800aca2:	f841 2f04 	str.w	r2, [r1, #4]!
 800aca6:	d8f9      	bhi.n	800ac9c <__lshift+0xc0>
 800aca8:	e7ea      	b.n	800ac80 <__lshift+0xa4>
 800acaa:	bf00      	nop
 800acac:	0800d93b 	.word	0x0800d93b
 800acb0:	0800d94c 	.word	0x0800d94c

0800acb4 <__mcmp>:
 800acb4:	4603      	mov	r3, r0
 800acb6:	690a      	ldr	r2, [r1, #16]
 800acb8:	6900      	ldr	r0, [r0, #16]
 800acba:	1a80      	subs	r0, r0, r2
 800acbc:	b530      	push	{r4, r5, lr}
 800acbe:	d10e      	bne.n	800acde <__mcmp+0x2a>
 800acc0:	3314      	adds	r3, #20
 800acc2:	3114      	adds	r1, #20
 800acc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800acc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800accc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800acd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800acd4:	4295      	cmp	r5, r2
 800acd6:	d003      	beq.n	800ace0 <__mcmp+0x2c>
 800acd8:	d205      	bcs.n	800ace6 <__mcmp+0x32>
 800acda:	f04f 30ff 	mov.w	r0, #4294967295
 800acde:	bd30      	pop	{r4, r5, pc}
 800ace0:	42a3      	cmp	r3, r4
 800ace2:	d3f3      	bcc.n	800accc <__mcmp+0x18>
 800ace4:	e7fb      	b.n	800acde <__mcmp+0x2a>
 800ace6:	2001      	movs	r0, #1
 800ace8:	e7f9      	b.n	800acde <__mcmp+0x2a>
	...

0800acec <__mdiff>:
 800acec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	4689      	mov	r9, r1
 800acf2:	4606      	mov	r6, r0
 800acf4:	4611      	mov	r1, r2
 800acf6:	4614      	mov	r4, r2
 800acf8:	4648      	mov	r0, r9
 800acfa:	f7ff ffdb 	bl	800acb4 <__mcmp>
 800acfe:	1e05      	subs	r5, r0, #0
 800ad00:	d112      	bne.n	800ad28 <__mdiff+0x3c>
 800ad02:	4629      	mov	r1, r5
 800ad04:	4630      	mov	r0, r6
 800ad06:	f7ff fd15 	bl	800a734 <_Balloc>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	b928      	cbnz	r0, 800ad1a <__mdiff+0x2e>
 800ad0e:	4b41      	ldr	r3, [pc, #260]	@ (800ae14 <__mdiff+0x128>)
 800ad10:	f240 2137 	movw	r1, #567	@ 0x237
 800ad14:	4840      	ldr	r0, [pc, #256]	@ (800ae18 <__mdiff+0x12c>)
 800ad16:	f001 fe1b 	bl	800c950 <__assert_func>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad20:	4610      	mov	r0, r2
 800ad22:	b003      	add	sp, #12
 800ad24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad28:	bfbc      	itt	lt
 800ad2a:	464b      	movlt	r3, r9
 800ad2c:	46a1      	movlt	r9, r4
 800ad2e:	4630      	mov	r0, r6
 800ad30:	bfb8      	it	lt
 800ad32:	2501      	movlt	r5, #1
 800ad34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ad38:	bfb4      	ite	lt
 800ad3a:	461c      	movlt	r4, r3
 800ad3c:	2500      	movge	r5, #0
 800ad3e:	f7ff fcf9 	bl	800a734 <_Balloc>
 800ad42:	4602      	mov	r2, r0
 800ad44:	b918      	cbnz	r0, 800ad4e <__mdiff+0x62>
 800ad46:	4b33      	ldr	r3, [pc, #204]	@ (800ae14 <__mdiff+0x128>)
 800ad48:	f240 2145 	movw	r1, #581	@ 0x245
 800ad4c:	e7e2      	b.n	800ad14 <__mdiff+0x28>
 800ad4e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ad52:	f104 0e14 	add.w	lr, r4, #20
 800ad56:	6926      	ldr	r6, [r4, #16]
 800ad58:	f100 0b14 	add.w	fp, r0, #20
 800ad5c:	60c5      	str	r5, [r0, #12]
 800ad5e:	f109 0514 	add.w	r5, r9, #20
 800ad62:	f109 0310 	add.w	r3, r9, #16
 800ad66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad6e:	46d9      	mov	r9, fp
 800ad70:	f04f 0c00 	mov.w	ip, #0
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad7c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad80:	4576      	cmp	r6, lr
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	fa1f f38a 	uxth.w	r3, sl
 800ad88:	4619      	mov	r1, r3
 800ad8a:	b283      	uxth	r3, r0
 800ad8c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800ad90:	eba1 0303 	sub.w	r3, r1, r3
 800ad94:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad98:	4463      	add	r3, ip
 800ad9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ada4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ada8:	f849 3b04 	str.w	r3, [r9], #4
 800adac:	d8e3      	bhi.n	800ad76 <__mdiff+0x8a>
 800adae:	1b33      	subs	r3, r6, r4
 800adb0:	3415      	adds	r4, #21
 800adb2:	3b15      	subs	r3, #21
 800adb4:	f023 0303 	bic.w	r3, r3, #3
 800adb8:	3304      	adds	r3, #4
 800adba:	42a6      	cmp	r6, r4
 800adbc:	bf38      	it	cc
 800adbe:	2304      	movcc	r3, #4
 800adc0:	441d      	add	r5, r3
 800adc2:	445b      	add	r3, fp
 800adc4:	462c      	mov	r4, r5
 800adc6:	461e      	mov	r6, r3
 800adc8:	4544      	cmp	r4, r8
 800adca:	d30e      	bcc.n	800adea <__mdiff+0xfe>
 800adcc:	f108 0103 	add.w	r1, r8, #3
 800add0:	1b49      	subs	r1, r1, r5
 800add2:	3d03      	subs	r5, #3
 800add4:	f021 0103 	bic.w	r1, r1, #3
 800add8:	45a8      	cmp	r8, r5
 800adda:	bf38      	it	cc
 800addc:	2100      	movcc	r1, #0
 800adde:	440b      	add	r3, r1
 800ade0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ade4:	b199      	cbz	r1, 800ae0e <__mdiff+0x122>
 800ade6:	6117      	str	r7, [r2, #16]
 800ade8:	e79a      	b.n	800ad20 <__mdiff+0x34>
 800adea:	f854 1b04 	ldr.w	r1, [r4], #4
 800adee:	46e6      	mov	lr, ip
 800adf0:	fa1f fc81 	uxth.w	ip, r1
 800adf4:	0c08      	lsrs	r0, r1, #16
 800adf6:	4471      	add	r1, lr
 800adf8:	44f4      	add	ip, lr
 800adfa:	b289      	uxth	r1, r1
 800adfc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ae00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ae04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae08:	f846 1b04 	str.w	r1, [r6], #4
 800ae0c:	e7dc      	b.n	800adc8 <__mdiff+0xdc>
 800ae0e:	3f01      	subs	r7, #1
 800ae10:	e7e6      	b.n	800ade0 <__mdiff+0xf4>
 800ae12:	bf00      	nop
 800ae14:	0800d93b 	.word	0x0800d93b
 800ae18:	0800d94c 	.word	0x0800d94c

0800ae1c <__ulp>:
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	4b11      	ldr	r3, [pc, #68]	@ (800ae64 <__ulp+0x48>)
 800ae20:	ed8d 0b00 	vstr	d0, [sp]
 800ae24:	9a01      	ldr	r2, [sp, #4]
 800ae26:	4013      	ands	r3, r2
 800ae28:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	dc08      	bgt.n	800ae42 <__ulp+0x26>
 800ae30:	425b      	negs	r3, r3
 800ae32:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ae36:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae3a:	da04      	bge.n	800ae46 <__ulp+0x2a>
 800ae3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ae40:	4113      	asrs	r3, r2
 800ae42:	2200      	movs	r2, #0
 800ae44:	e008      	b.n	800ae58 <__ulp+0x3c>
 800ae46:	f1a2 0314 	sub.w	r3, r2, #20
 800ae4a:	2b1e      	cmp	r3, #30
 800ae4c:	bfd6      	itet	le
 800ae4e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ae52:	2201      	movgt	r2, #1
 800ae54:	40da      	lsrle	r2, r3
 800ae56:	2300      	movs	r3, #0
 800ae58:	4619      	mov	r1, r3
 800ae5a:	4610      	mov	r0, r2
 800ae5c:	ec41 0b10 	vmov	d0, r0, r1
 800ae60:	b002      	add	sp, #8
 800ae62:	4770      	bx	lr
 800ae64:	7ff00000 	.word	0x7ff00000

0800ae68 <__b2d>:
 800ae68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae6c:	6906      	ldr	r6, [r0, #16]
 800ae6e:	f100 0814 	add.w	r8, r0, #20
 800ae72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ae76:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae7a:	1f37      	subs	r7, r6, #4
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	f7ff fd4d 	bl	800a91c <__hi0bits>
 800ae82:	f1c0 0320 	rsb	r3, r0, #32
 800ae86:	280a      	cmp	r0, #10
 800ae88:	600b      	str	r3, [r1, #0]
 800ae8a:	491d      	ldr	r1, [pc, #116]	@ (800af00 <__b2d+0x98>)
 800ae8c:	dc16      	bgt.n	800aebc <__b2d+0x54>
 800ae8e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ae92:	45b8      	cmp	r8, r7
 800ae94:	f100 0015 	add.w	r0, r0, #21
 800ae98:	fa22 f30c 	lsr.w	r3, r2, ip
 800ae9c:	fa02 f000 	lsl.w	r0, r2, r0
 800aea0:	ea43 0501 	orr.w	r5, r3, r1
 800aea4:	bf34      	ite	cc
 800aea6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aeaa:	2300      	movcs	r3, #0
 800aeac:	fa23 f30c 	lsr.w	r3, r3, ip
 800aeb0:	4303      	orrs	r3, r0
 800aeb2:	461c      	mov	r4, r3
 800aeb4:	ec45 4b10 	vmov	d0, r4, r5
 800aeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aebc:	45b8      	cmp	r8, r7
 800aebe:	bf3a      	itte	cc
 800aec0:	f1a6 0708 	subcc.w	r7, r6, #8
 800aec4:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aec8:	2300      	movcs	r3, #0
 800aeca:	380b      	subs	r0, #11
 800aecc:	d014      	beq.n	800aef8 <__b2d+0x90>
 800aece:	f1c0 0120 	rsb	r1, r0, #32
 800aed2:	4082      	lsls	r2, r0
 800aed4:	4547      	cmp	r7, r8
 800aed6:	fa23 f401 	lsr.w	r4, r3, r1
 800aeda:	fa03 f300 	lsl.w	r3, r3, r0
 800aede:	ea42 0204 	orr.w	r2, r2, r4
 800aee2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aee6:	bf8c      	ite	hi
 800aee8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aeec:	2200      	movls	r2, #0
 800aeee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aef2:	40ca      	lsrs	r2, r1
 800aef4:	4313      	orrs	r3, r2
 800aef6:	e7dc      	b.n	800aeb2 <__b2d+0x4a>
 800aef8:	ea42 0501 	orr.w	r5, r2, r1
 800aefc:	e7d9      	b.n	800aeb2 <__b2d+0x4a>
 800aefe:	bf00      	nop
 800af00:	3ff00000 	.word	0x3ff00000

0800af04 <__d2b>:
 800af04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af08:	460f      	mov	r7, r1
 800af0a:	2101      	movs	r1, #1
 800af0c:	4616      	mov	r6, r2
 800af0e:	ec59 8b10 	vmov	r8, r9, d0
 800af12:	f7ff fc0f 	bl	800a734 <_Balloc>
 800af16:	4604      	mov	r4, r0
 800af18:	b930      	cbnz	r0, 800af28 <__d2b+0x24>
 800af1a:	4602      	mov	r2, r0
 800af1c:	4b23      	ldr	r3, [pc, #140]	@ (800afac <__d2b+0xa8>)
 800af1e:	f240 310f 	movw	r1, #783	@ 0x30f
 800af22:	4823      	ldr	r0, [pc, #140]	@ (800afb0 <__d2b+0xac>)
 800af24:	f001 fd14 	bl	800c950 <__assert_func>
 800af28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af30:	b10d      	cbz	r5, 800af36 <__d2b+0x32>
 800af32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	f1b8 0300 	subs.w	r3, r8, #0
 800af3c:	d023      	beq.n	800af86 <__d2b+0x82>
 800af3e:	4668      	mov	r0, sp
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	f7ff fd0a 	bl	800a95a <__lo0bits>
 800af46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af4a:	b1d0      	cbz	r0, 800af82 <__d2b+0x7e>
 800af4c:	f1c0 0320 	rsb	r3, r0, #32
 800af50:	fa02 f303 	lsl.w	r3, r2, r3
 800af54:	40c2      	lsrs	r2, r0
 800af56:	430b      	orrs	r3, r1
 800af58:	9201      	str	r2, [sp, #4]
 800af5a:	6163      	str	r3, [r4, #20]
 800af5c:	9b01      	ldr	r3, [sp, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	61a3      	str	r3, [r4, #24]
 800af62:	bf0c      	ite	eq
 800af64:	2201      	moveq	r2, #1
 800af66:	2202      	movne	r2, #2
 800af68:	6122      	str	r2, [r4, #16]
 800af6a:	b1a5      	cbz	r5, 800af96 <__d2b+0x92>
 800af6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800af70:	4405      	add	r5, r0
 800af72:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800af76:	603d      	str	r5, [r7, #0]
 800af78:	6030      	str	r0, [r6, #0]
 800af7a:	4620      	mov	r0, r4
 800af7c:	b003      	add	sp, #12
 800af7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af82:	6161      	str	r1, [r4, #20]
 800af84:	e7ea      	b.n	800af5c <__d2b+0x58>
 800af86:	a801      	add	r0, sp, #4
 800af88:	f7ff fce7 	bl	800a95a <__lo0bits>
 800af8c:	9b01      	ldr	r3, [sp, #4]
 800af8e:	3020      	adds	r0, #32
 800af90:	2201      	movs	r2, #1
 800af92:	6163      	str	r3, [r4, #20]
 800af94:	e7e8      	b.n	800af68 <__d2b+0x64>
 800af96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800af9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af9e:	6038      	str	r0, [r7, #0]
 800afa0:	6918      	ldr	r0, [r3, #16]
 800afa2:	f7ff fcbb 	bl	800a91c <__hi0bits>
 800afa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800afaa:	e7e5      	b.n	800af78 <__d2b+0x74>
 800afac:	0800d93b 	.word	0x0800d93b
 800afb0:	0800d94c 	.word	0x0800d94c

0800afb4 <__ratio>:
 800afb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb8:	b085      	sub	sp, #20
 800afba:	e9cd 1000 	strd	r1, r0, [sp]
 800afbe:	a902      	add	r1, sp, #8
 800afc0:	f7ff ff52 	bl	800ae68 <__b2d>
 800afc4:	a903      	add	r1, sp, #12
 800afc6:	9800      	ldr	r0, [sp, #0]
 800afc8:	ec55 4b10 	vmov	r4, r5, d0
 800afcc:	f7ff ff4c 	bl	800ae68 <__b2d>
 800afd0:	9b01      	ldr	r3, [sp, #4]
 800afd2:	462f      	mov	r7, r5
 800afd4:	4620      	mov	r0, r4
 800afd6:	6919      	ldr	r1, [r3, #16]
 800afd8:	9b00      	ldr	r3, [sp, #0]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	1ac9      	subs	r1, r1, r3
 800afde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800afe2:	ec5b ab10 	vmov	sl, fp, d0
 800afe6:	1a9b      	subs	r3, r3, r2
 800afe8:	46d9      	mov	r9, fp
 800afea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bfcd      	iteet	gt
 800aff2:	462a      	movgt	r2, r5
 800aff4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aff8:	465a      	movle	r2, fp
 800affa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800affe:	bfd8      	it	le
 800b000:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b004:	4652      	mov	r2, sl
 800b006:	4639      	mov	r1, r7
 800b008:	464b      	mov	r3, r9
 800b00a:	f7f5 fc03 	bl	8000814 <__aeabi_ddiv>
 800b00e:	ec41 0b10 	vmov	d0, r0, r1
 800b012:	b005      	add	sp, #20
 800b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b018 <__copybits>:
 800b018:	3901      	subs	r1, #1
 800b01a:	f102 0314 	add.w	r3, r2, #20
 800b01e:	1149      	asrs	r1, r1, #5
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	3101      	adds	r1, #1
 800b024:	6914      	ldr	r4, [r2, #16]
 800b026:	1f05      	subs	r5, r0, #4
 800b028:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b02c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b030:	42a3      	cmp	r3, r4
 800b032:	d30c      	bcc.n	800b04e <__copybits+0x36>
 800b034:	1aa3      	subs	r3, r4, r2
 800b036:	3211      	adds	r2, #17
 800b038:	3b11      	subs	r3, #17
 800b03a:	f023 0303 	bic.w	r3, r3, #3
 800b03e:	42a2      	cmp	r2, r4
 800b040:	bf88      	it	hi
 800b042:	2300      	movhi	r3, #0
 800b044:	4418      	add	r0, r3
 800b046:	2300      	movs	r3, #0
 800b048:	4288      	cmp	r0, r1
 800b04a:	d305      	bcc.n	800b058 <__copybits+0x40>
 800b04c:	bd70      	pop	{r4, r5, r6, pc}
 800b04e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b052:	f845 6f04 	str.w	r6, [r5, #4]!
 800b056:	e7eb      	b.n	800b030 <__copybits+0x18>
 800b058:	f840 3b04 	str.w	r3, [r0], #4
 800b05c:	e7f4      	b.n	800b048 <__copybits+0x30>

0800b05e <__any_on>:
 800b05e:	f100 0214 	add.w	r2, r0, #20
 800b062:	114b      	asrs	r3, r1, #5
 800b064:	6900      	ldr	r0, [r0, #16]
 800b066:	4298      	cmp	r0, r3
 800b068:	b510      	push	{r4, lr}
 800b06a:	db11      	blt.n	800b090 <__any_on+0x32>
 800b06c:	dd0a      	ble.n	800b084 <__any_on+0x26>
 800b06e:	f011 011f 	ands.w	r1, r1, #31
 800b072:	d007      	beq.n	800b084 <__any_on+0x26>
 800b074:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b078:	fa24 f001 	lsr.w	r0, r4, r1
 800b07c:	fa00 f101 	lsl.w	r1, r0, r1
 800b080:	428c      	cmp	r4, r1
 800b082:	d10b      	bne.n	800b09c <__any_on+0x3e>
 800b084:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b088:	4293      	cmp	r3, r2
 800b08a:	d803      	bhi.n	800b094 <__any_on+0x36>
 800b08c:	2000      	movs	r0, #0
 800b08e:	bd10      	pop	{r4, pc}
 800b090:	4603      	mov	r3, r0
 800b092:	e7f7      	b.n	800b084 <__any_on+0x26>
 800b094:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b098:	2900      	cmp	r1, #0
 800b09a:	d0f5      	beq.n	800b088 <__any_on+0x2a>
 800b09c:	2001      	movs	r0, #1
 800b09e:	e7f6      	b.n	800b08e <__any_on+0x30>

0800b0a0 <sulp>:
 800b0a0:	b570      	push	{r4, r5, r6, lr}
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	460d      	mov	r5, r1
 800b0a6:	4616      	mov	r6, r2
 800b0a8:	ec45 4b10 	vmov	d0, r4, r5
 800b0ac:	f7ff feb6 	bl	800ae1c <__ulp>
 800b0b0:	ec51 0b10 	vmov	r0, r1, d0
 800b0b4:	b17e      	cbz	r6, 800b0d6 <sulp+0x36>
 800b0b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b0ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	dd09      	ble.n	800b0d6 <sulp+0x36>
 800b0c2:	051b      	lsls	r3, r3, #20
 800b0c4:	2400      	movs	r4, #0
 800b0c6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	f7f5 fa75 	bl	80005c0 <__aeabi_dmul>
 800b0d6:	ec41 0b10 	vmov	d0, r0, r1
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	0000      	movs	r0, r0
	...

0800b0e0 <_strtod_l>:
 800b0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e4:	b09f      	sub	sp, #124	@ 0x7c
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	f04f 0a00 	mov.w	sl, #0
 800b0ec:	f04f 0b00 	mov.w	fp, #0
 800b0f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	9005      	str	r0, [sp, #20]
 800b0f6:	921a      	str	r2, [sp, #104]	@ 0x68
 800b0f8:	460a      	mov	r2, r1
 800b0fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0fc:	7811      	ldrb	r1, [r2, #0]
 800b0fe:	292b      	cmp	r1, #43	@ 0x2b
 800b100:	d04a      	beq.n	800b198 <_strtod_l+0xb8>
 800b102:	d838      	bhi.n	800b176 <_strtod_l+0x96>
 800b104:	290d      	cmp	r1, #13
 800b106:	d832      	bhi.n	800b16e <_strtod_l+0x8e>
 800b108:	2908      	cmp	r1, #8
 800b10a:	d832      	bhi.n	800b172 <_strtod_l+0x92>
 800b10c:	2900      	cmp	r1, #0
 800b10e:	d03b      	beq.n	800b188 <_strtod_l+0xa8>
 800b110:	2200      	movs	r2, #0
 800b112:	920e      	str	r2, [sp, #56]	@ 0x38
 800b114:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b116:	782a      	ldrb	r2, [r5, #0]
 800b118:	2a30      	cmp	r2, #48	@ 0x30
 800b11a:	f040 80b2 	bne.w	800b282 <_strtod_l+0x1a2>
 800b11e:	786a      	ldrb	r2, [r5, #1]
 800b120:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b124:	2a58      	cmp	r2, #88	@ 0x58
 800b126:	d16e      	bne.n	800b206 <_strtod_l+0x126>
 800b128:	9302      	str	r3, [sp, #8]
 800b12a:	a919      	add	r1, sp, #100	@ 0x64
 800b12c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b12e:	4a90      	ldr	r2, [pc, #576]	@ (800b370 <_strtod_l+0x290>)
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	ab1a      	add	r3, sp, #104	@ 0x68
 800b134:	9805      	ldr	r0, [sp, #20]
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b13a:	f001 fca1 	bl	800ca80 <__gethex>
 800b13e:	f010 060f 	ands.w	r6, r0, #15
 800b142:	4604      	mov	r4, r0
 800b144:	d005      	beq.n	800b152 <_strtod_l+0x72>
 800b146:	2e06      	cmp	r6, #6
 800b148:	d128      	bne.n	800b19c <_strtod_l+0xbc>
 800b14a:	3501      	adds	r5, #1
 800b14c:	2300      	movs	r3, #0
 800b14e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b150:	930e      	str	r3, [sp, #56]	@ 0x38
 800b152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b154:	2b00      	cmp	r3, #0
 800b156:	f040 858e 	bne.w	800bc76 <_strtod_l+0xb96>
 800b15a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b15c:	b1cb      	cbz	r3, 800b192 <_strtod_l+0xb2>
 800b15e:	4652      	mov	r2, sl
 800b160:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b164:	ec43 2b10 	vmov	d0, r2, r3
 800b168:	b01f      	add	sp, #124	@ 0x7c
 800b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16e:	2920      	cmp	r1, #32
 800b170:	d1ce      	bne.n	800b110 <_strtod_l+0x30>
 800b172:	3201      	adds	r2, #1
 800b174:	e7c1      	b.n	800b0fa <_strtod_l+0x1a>
 800b176:	292d      	cmp	r1, #45	@ 0x2d
 800b178:	d1ca      	bne.n	800b110 <_strtod_l+0x30>
 800b17a:	2101      	movs	r1, #1
 800b17c:	910e      	str	r1, [sp, #56]	@ 0x38
 800b17e:	1c51      	adds	r1, r2, #1
 800b180:	9119      	str	r1, [sp, #100]	@ 0x64
 800b182:	7852      	ldrb	r2, [r2, #1]
 800b184:	2a00      	cmp	r2, #0
 800b186:	d1c5      	bne.n	800b114 <_strtod_l+0x34>
 800b188:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b18a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f040 8570 	bne.w	800bc72 <_strtod_l+0xb92>
 800b192:	4652      	mov	r2, sl
 800b194:	465b      	mov	r3, fp
 800b196:	e7e5      	b.n	800b164 <_strtod_l+0x84>
 800b198:	2100      	movs	r1, #0
 800b19a:	e7ef      	b.n	800b17c <_strtod_l+0x9c>
 800b19c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b19e:	b13a      	cbz	r2, 800b1b0 <_strtod_l+0xd0>
 800b1a0:	2135      	movs	r1, #53	@ 0x35
 800b1a2:	a81c      	add	r0, sp, #112	@ 0x70
 800b1a4:	f7ff ff38 	bl	800b018 <__copybits>
 800b1a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1aa:	9805      	ldr	r0, [sp, #20]
 800b1ac:	f7ff fb02 	bl	800a7b4 <_Bfree>
 800b1b0:	3e01      	subs	r6, #1
 800b1b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b1b4:	2e04      	cmp	r6, #4
 800b1b6:	d806      	bhi.n	800b1c6 <_strtod_l+0xe6>
 800b1b8:	e8df f006 	tbb	[pc, r6]
 800b1bc:	201d0314 	.word	0x201d0314
 800b1c0:	14          	.byte	0x14
 800b1c1:	00          	.byte	0x00
 800b1c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b1c6:	05e1      	lsls	r1, r4, #23
 800b1c8:	bf48      	it	mi
 800b1ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b1ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1d2:	0d1b      	lsrs	r3, r3, #20
 800b1d4:	051b      	lsls	r3, r3, #20
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1bb      	bne.n	800b152 <_strtod_l+0x72>
 800b1da:	f7fe fb07 	bl	80097ec <__errno>
 800b1de:	2322      	movs	r3, #34	@ 0x22
 800b1e0:	6003      	str	r3, [r0, #0]
 800b1e2:	e7b6      	b.n	800b152 <_strtod_l+0x72>
 800b1e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b1e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b1ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b1f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b1f4:	e7e7      	b.n	800b1c6 <_strtod_l+0xe6>
 800b1f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b378 <_strtod_l+0x298>
 800b1fa:	e7e4      	b.n	800b1c6 <_strtod_l+0xe6>
 800b1fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b200:	f04f 3aff 	mov.w	sl, #4294967295
 800b204:	e7df      	b.n	800b1c6 <_strtod_l+0xe6>
 800b206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b208:	1c5a      	adds	r2, r3, #1
 800b20a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b20c:	785b      	ldrb	r3, [r3, #1]
 800b20e:	2b30      	cmp	r3, #48	@ 0x30
 800b210:	d0f9      	beq.n	800b206 <_strtod_l+0x126>
 800b212:	2b00      	cmp	r3, #0
 800b214:	d09d      	beq.n	800b152 <_strtod_l+0x72>
 800b216:	2301      	movs	r3, #1
 800b218:	2700      	movs	r7, #0
 800b21a:	9308      	str	r3, [sp, #32]
 800b21c:	220a      	movs	r2, #10
 800b21e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b220:	46b9      	mov	r9, r7
 800b222:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b224:	930c      	str	r3, [sp, #48]	@ 0x30
 800b226:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b228:	7805      	ldrb	r5, [r0, #0]
 800b22a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b22e:	b2d9      	uxtb	r1, r3
 800b230:	2909      	cmp	r1, #9
 800b232:	d928      	bls.n	800b286 <_strtod_l+0x1a6>
 800b234:	2201      	movs	r2, #1
 800b236:	494f      	ldr	r1, [pc, #316]	@ (800b374 <_strtod_l+0x294>)
 800b238:	f7fe fa53 	bl	80096e2 <strncmp>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d032      	beq.n	800b2a6 <_strtod_l+0x1c6>
 800b240:	2000      	movs	r0, #0
 800b242:	462a      	mov	r2, r5
 800b244:	464d      	mov	r5, r9
 800b246:	4603      	mov	r3, r0
 800b248:	900a      	str	r0, [sp, #40]	@ 0x28
 800b24a:	2a65      	cmp	r2, #101	@ 0x65
 800b24c:	d001      	beq.n	800b252 <_strtod_l+0x172>
 800b24e:	2a45      	cmp	r2, #69	@ 0x45
 800b250:	d114      	bne.n	800b27c <_strtod_l+0x19c>
 800b252:	b91d      	cbnz	r5, 800b25c <_strtod_l+0x17c>
 800b254:	9a08      	ldr	r2, [sp, #32]
 800b256:	4302      	orrs	r2, r0
 800b258:	d096      	beq.n	800b188 <_strtod_l+0xa8>
 800b25a:	2500      	movs	r5, #0
 800b25c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b25e:	1c62      	adds	r2, r4, #1
 800b260:	9219      	str	r2, [sp, #100]	@ 0x64
 800b262:	7862      	ldrb	r2, [r4, #1]
 800b264:	2a2b      	cmp	r2, #43	@ 0x2b
 800b266:	d079      	beq.n	800b35c <_strtod_l+0x27c>
 800b268:	2a2d      	cmp	r2, #45	@ 0x2d
 800b26a:	d07d      	beq.n	800b368 <_strtod_l+0x288>
 800b26c:	f04f 0c00 	mov.w	ip, #0
 800b270:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b274:	2909      	cmp	r1, #9
 800b276:	f240 8085 	bls.w	800b384 <_strtod_l+0x2a4>
 800b27a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b27c:	f04f 0800 	mov.w	r8, #0
 800b280:	e0a5      	b.n	800b3ce <_strtod_l+0x2ee>
 800b282:	2300      	movs	r3, #0
 800b284:	e7c8      	b.n	800b218 <_strtod_l+0x138>
 800b286:	f1b9 0f08 	cmp.w	r9, #8
 800b28a:	f100 0001 	add.w	r0, r0, #1
 800b28e:	f109 0901 	add.w	r9, r9, #1
 800b292:	bfd4      	ite	le
 800b294:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b296:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b29a:	9019      	str	r0, [sp, #100]	@ 0x64
 800b29c:	bfdc      	itt	le
 800b29e:	fb02 3301 	mlale	r3, r2, r1, r3
 800b2a2:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b2a4:	e7bf      	b.n	800b226 <_strtod_l+0x146>
 800b2a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2ac:	785a      	ldrb	r2, [r3, #1]
 800b2ae:	f1b9 0f00 	cmp.w	r9, #0
 800b2b2:	d03a      	beq.n	800b32a <_strtod_l+0x24a>
 800b2b4:	464d      	mov	r5, r9
 800b2b6:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b2bc:	2b09      	cmp	r3, #9
 800b2be:	d912      	bls.n	800b2e6 <_strtod_l+0x206>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e7c2      	b.n	800b24a <_strtod_l+0x16a>
 800b2c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2cc:	785a      	ldrb	r2, [r3, #1]
 800b2ce:	2a30      	cmp	r2, #48	@ 0x30
 800b2d0:	d0f8      	beq.n	800b2c4 <_strtod_l+0x1e4>
 800b2d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b2d6:	2b08      	cmp	r3, #8
 800b2d8:	f200 84d2 	bhi.w	800bc80 <_strtod_l+0xba0>
 800b2dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2de:	2000      	movs	r0, #0
 800b2e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b2e6:	3a30      	subs	r2, #48	@ 0x30
 800b2e8:	f100 0301 	add.w	r3, r0, #1
 800b2ec:	d017      	beq.n	800b31e <_strtod_l+0x23e>
 800b2ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2f0:	462e      	mov	r6, r5
 800b2f2:	f04f 0e0a 	mov.w	lr, #10
 800b2f6:	4419      	add	r1, r3
 800b2f8:	910a      	str	r1, [sp, #40]	@ 0x28
 800b2fa:	1c71      	adds	r1, r6, #1
 800b2fc:	eba1 0c05 	sub.w	ip, r1, r5
 800b300:	4563      	cmp	r3, ip
 800b302:	dc14      	bgt.n	800b32e <_strtod_l+0x24e>
 800b304:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b308:	182b      	adds	r3, r5, r0
 800b30a:	3501      	adds	r5, #1
 800b30c:	2b08      	cmp	r3, #8
 800b30e:	4405      	add	r5, r0
 800b310:	dc1a      	bgt.n	800b348 <_strtod_l+0x268>
 800b312:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b314:	230a      	movs	r3, #10
 800b316:	fb03 2301 	mla	r3, r3, r1, r2
 800b31a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b31c:	2300      	movs	r3, #0
 800b31e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b320:	4618      	mov	r0, r3
 800b322:	1c51      	adds	r1, r2, #1
 800b324:	9119      	str	r1, [sp, #100]	@ 0x64
 800b326:	7852      	ldrb	r2, [r2, #1]
 800b328:	e7c6      	b.n	800b2b8 <_strtod_l+0x1d8>
 800b32a:	4648      	mov	r0, r9
 800b32c:	e7cf      	b.n	800b2ce <_strtod_l+0x1ee>
 800b32e:	2e08      	cmp	r6, #8
 800b330:	dc05      	bgt.n	800b33e <_strtod_l+0x25e>
 800b332:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b334:	fb0e f606 	mul.w	r6, lr, r6
 800b338:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b33a:	460e      	mov	r6, r1
 800b33c:	e7dd      	b.n	800b2fa <_strtod_l+0x21a>
 800b33e:	2910      	cmp	r1, #16
 800b340:	bfd8      	it	le
 800b342:	fb0e f707 	mulle.w	r7, lr, r7
 800b346:	e7f8      	b.n	800b33a <_strtod_l+0x25a>
 800b348:	2b0f      	cmp	r3, #15
 800b34a:	bfdc      	itt	le
 800b34c:	230a      	movle	r3, #10
 800b34e:	fb03 2707 	mlale	r7, r3, r7, r2
 800b352:	e7e3      	b.n	800b31c <_strtod_l+0x23c>
 800b354:	2300      	movs	r3, #0
 800b356:	930a      	str	r3, [sp, #40]	@ 0x28
 800b358:	2301      	movs	r3, #1
 800b35a:	e77b      	b.n	800b254 <_strtod_l+0x174>
 800b35c:	f04f 0c00 	mov.w	ip, #0
 800b360:	1ca2      	adds	r2, r4, #2
 800b362:	9219      	str	r2, [sp, #100]	@ 0x64
 800b364:	78a2      	ldrb	r2, [r4, #2]
 800b366:	e783      	b.n	800b270 <_strtod_l+0x190>
 800b368:	f04f 0c01 	mov.w	ip, #1
 800b36c:	e7f8      	b.n	800b360 <_strtod_l+0x280>
 800b36e:	bf00      	nop
 800b370:	0800db8c 	.word	0x0800db8c
 800b374:	0800d9a5 	.word	0x0800d9a5
 800b378:	7ff00000 	.word	0x7ff00000
 800b37c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b37e:	1c51      	adds	r1, r2, #1
 800b380:	9119      	str	r1, [sp, #100]	@ 0x64
 800b382:	7852      	ldrb	r2, [r2, #1]
 800b384:	2a30      	cmp	r2, #48	@ 0x30
 800b386:	d0f9      	beq.n	800b37c <_strtod_l+0x29c>
 800b388:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b38c:	2908      	cmp	r1, #8
 800b38e:	f63f af75 	bhi.w	800b27c <_strtod_l+0x19c>
 800b392:	3a30      	subs	r2, #48	@ 0x30
 800b394:	f04f 080a 	mov.w	r8, #10
 800b398:	9209      	str	r2, [sp, #36]	@ 0x24
 800b39a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b39c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b39e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b3a0:	1c56      	adds	r6, r2, #1
 800b3a2:	9619      	str	r6, [sp, #100]	@ 0x64
 800b3a4:	7852      	ldrb	r2, [r2, #1]
 800b3a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b3aa:	f1be 0f09 	cmp.w	lr, #9
 800b3ae:	d939      	bls.n	800b424 <_strtod_l+0x344>
 800b3b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b3b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b3b6:	1a76      	subs	r6, r6, r1
 800b3b8:	2e08      	cmp	r6, #8
 800b3ba:	dc03      	bgt.n	800b3c4 <_strtod_l+0x2e4>
 800b3bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3be:	4588      	cmp	r8, r1
 800b3c0:	bfa8      	it	ge
 800b3c2:	4688      	movge	r8, r1
 800b3c4:	f1bc 0f00 	cmp.w	ip, #0
 800b3c8:	d001      	beq.n	800b3ce <_strtod_l+0x2ee>
 800b3ca:	f1c8 0800 	rsb	r8, r8, #0
 800b3ce:	2d00      	cmp	r5, #0
 800b3d0:	d14e      	bne.n	800b470 <_strtod_l+0x390>
 800b3d2:	9908      	ldr	r1, [sp, #32]
 800b3d4:	4308      	orrs	r0, r1
 800b3d6:	f47f aebc 	bne.w	800b152 <_strtod_l+0x72>
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f47f aed4 	bne.w	800b188 <_strtod_l+0xa8>
 800b3e0:	2a69      	cmp	r2, #105	@ 0x69
 800b3e2:	d028      	beq.n	800b436 <_strtod_l+0x356>
 800b3e4:	dc25      	bgt.n	800b432 <_strtod_l+0x352>
 800b3e6:	2a49      	cmp	r2, #73	@ 0x49
 800b3e8:	d025      	beq.n	800b436 <_strtod_l+0x356>
 800b3ea:	2a4e      	cmp	r2, #78	@ 0x4e
 800b3ec:	f47f aecc 	bne.w	800b188 <_strtod_l+0xa8>
 800b3f0:	499a      	ldr	r1, [pc, #616]	@ (800b65c <_strtod_l+0x57c>)
 800b3f2:	a819      	add	r0, sp, #100	@ 0x64
 800b3f4:	f001 fd64 	bl	800cec0 <__match>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	f43f aec5 	beq.w	800b188 <_strtod_l+0xa8>
 800b3fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	2b28      	cmp	r3, #40	@ 0x28
 800b404:	d12e      	bne.n	800b464 <_strtod_l+0x384>
 800b406:	aa1c      	add	r2, sp, #112	@ 0x70
 800b408:	4995      	ldr	r1, [pc, #596]	@ (800b660 <_strtod_l+0x580>)
 800b40a:	a819      	add	r0, sp, #100	@ 0x64
 800b40c:	f001 fd6c 	bl	800cee8 <__hexnan>
 800b410:	2805      	cmp	r0, #5
 800b412:	d127      	bne.n	800b464 <_strtod_l+0x384>
 800b414:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b416:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b41a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b41e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b422:	e696      	b.n	800b152 <_strtod_l+0x72>
 800b424:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b426:	fb08 2101 	mla	r1, r8, r1, r2
 800b42a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b42e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b430:	e7b5      	b.n	800b39e <_strtod_l+0x2be>
 800b432:	2a6e      	cmp	r2, #110	@ 0x6e
 800b434:	e7da      	b.n	800b3ec <_strtod_l+0x30c>
 800b436:	498b      	ldr	r1, [pc, #556]	@ (800b664 <_strtod_l+0x584>)
 800b438:	a819      	add	r0, sp, #100	@ 0x64
 800b43a:	f001 fd41 	bl	800cec0 <__match>
 800b43e:	2800      	cmp	r0, #0
 800b440:	f43f aea2 	beq.w	800b188 <_strtod_l+0xa8>
 800b444:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b446:	a819      	add	r0, sp, #100	@ 0x64
 800b448:	4987      	ldr	r1, [pc, #540]	@ (800b668 <_strtod_l+0x588>)
 800b44a:	3b01      	subs	r3, #1
 800b44c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b44e:	f001 fd37 	bl	800cec0 <__match>
 800b452:	b910      	cbnz	r0, 800b45a <_strtod_l+0x37a>
 800b454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b456:	3301      	adds	r3, #1
 800b458:	9319      	str	r3, [sp, #100]	@ 0x64
 800b45a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b678 <_strtod_l+0x598>
 800b45e:	f04f 0a00 	mov.w	sl, #0
 800b462:	e676      	b.n	800b152 <_strtod_l+0x72>
 800b464:	4881      	ldr	r0, [pc, #516]	@ (800b66c <_strtod_l+0x58c>)
 800b466:	f001 fa6b 	bl	800c940 <nan>
 800b46a:	ec5b ab10 	vmov	sl, fp, d0
 800b46e:	e670      	b.n	800b152 <_strtod_l+0x72>
 800b470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b472:	f1b9 0f00 	cmp.w	r9, #0
 800b476:	bf08      	it	eq
 800b478:	46a9      	moveq	r9, r5
 800b47a:	2d10      	cmp	r5, #16
 800b47c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b47e:	eba8 0303 	sub.w	r3, r8, r3
 800b482:	462c      	mov	r4, r5
 800b484:	bfa8      	it	ge
 800b486:	2410      	movge	r4, #16
 800b488:	9309      	str	r3, [sp, #36]	@ 0x24
 800b48a:	f7f5 f81f 	bl	80004cc <__aeabi_ui2d>
 800b48e:	2d09      	cmp	r5, #9
 800b490:	4682      	mov	sl, r0
 800b492:	468b      	mov	fp, r1
 800b494:	dc13      	bgt.n	800b4be <_strtod_l+0x3de>
 800b496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f43f ae5a 	beq.w	800b152 <_strtod_l+0x72>
 800b49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4a0:	dd78      	ble.n	800b594 <_strtod_l+0x4b4>
 800b4a2:	2b16      	cmp	r3, #22
 800b4a4:	dc5f      	bgt.n	800b566 <_strtod_l+0x486>
 800b4a6:	4972      	ldr	r1, [pc, #456]	@ (800b670 <_strtod_l+0x590>)
 800b4a8:	4652      	mov	r2, sl
 800b4aa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b4ae:	465b      	mov	r3, fp
 800b4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b4:	f7f5 f884 	bl	80005c0 <__aeabi_dmul>
 800b4b8:	4682      	mov	sl, r0
 800b4ba:	468b      	mov	fp, r1
 800b4bc:	e649      	b.n	800b152 <_strtod_l+0x72>
 800b4be:	4b6c      	ldr	r3, [pc, #432]	@ (800b670 <_strtod_l+0x590>)
 800b4c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b4c8:	f7f5 f87a 	bl	80005c0 <__aeabi_dmul>
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	468b      	mov	fp, r1
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	f7f4 fffb 	bl	80004cc <__aeabi_ui2d>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4650      	mov	r0, sl
 800b4dc:	4659      	mov	r1, fp
 800b4de:	f7f4 feb9 	bl	8000254 <__adddf3>
 800b4e2:	2d0f      	cmp	r5, #15
 800b4e4:	4682      	mov	sl, r0
 800b4e6:	468b      	mov	fp, r1
 800b4e8:	ddd5      	ble.n	800b496 <_strtod_l+0x3b6>
 800b4ea:	1b2c      	subs	r4, r5, r4
 800b4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ee:	441c      	add	r4, r3
 800b4f0:	2c00      	cmp	r4, #0
 800b4f2:	f340 8093 	ble.w	800b61c <_strtod_l+0x53c>
 800b4f6:	f014 030f 	ands.w	r3, r4, #15
 800b4fa:	d00a      	beq.n	800b512 <_strtod_l+0x432>
 800b4fc:	495c      	ldr	r1, [pc, #368]	@ (800b670 <_strtod_l+0x590>)
 800b4fe:	4652      	mov	r2, sl
 800b500:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b504:	465b      	mov	r3, fp
 800b506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b50a:	f7f5 f859 	bl	80005c0 <__aeabi_dmul>
 800b50e:	4682      	mov	sl, r0
 800b510:	468b      	mov	fp, r1
 800b512:	f034 040f 	bics.w	r4, r4, #15
 800b516:	d073      	beq.n	800b600 <_strtod_l+0x520>
 800b518:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b51c:	dd49      	ble.n	800b5b2 <_strtod_l+0x4d2>
 800b51e:	2400      	movs	r4, #0
 800b520:	46a0      	mov	r8, r4
 800b522:	46a1      	mov	r9, r4
 800b524:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b526:	2322      	movs	r3, #34	@ 0x22
 800b528:	9a05      	ldr	r2, [sp, #20]
 800b52a:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b678 <_strtod_l+0x598>
 800b52e:	f04f 0a00 	mov.w	sl, #0
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b536:	2b00      	cmp	r3, #0
 800b538:	f43f ae0b 	beq.w	800b152 <_strtod_l+0x72>
 800b53c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b53e:	9805      	ldr	r0, [sp, #20]
 800b540:	f7ff f938 	bl	800a7b4 <_Bfree>
 800b544:	4649      	mov	r1, r9
 800b546:	9805      	ldr	r0, [sp, #20]
 800b548:	f7ff f934 	bl	800a7b4 <_Bfree>
 800b54c:	4641      	mov	r1, r8
 800b54e:	9805      	ldr	r0, [sp, #20]
 800b550:	f7ff f930 	bl	800a7b4 <_Bfree>
 800b554:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b556:	9805      	ldr	r0, [sp, #20]
 800b558:	f7ff f92c 	bl	800a7b4 <_Bfree>
 800b55c:	4621      	mov	r1, r4
 800b55e:	9805      	ldr	r0, [sp, #20]
 800b560:	f7ff f928 	bl	800a7b4 <_Bfree>
 800b564:	e5f5      	b.n	800b152 <_strtod_l+0x72>
 800b566:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b56a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b56c:	4293      	cmp	r3, r2
 800b56e:	dbbc      	blt.n	800b4ea <_strtod_l+0x40a>
 800b570:	f1c5 050f 	rsb	r5, r5, #15
 800b574:	4c3e      	ldr	r4, [pc, #248]	@ (800b670 <_strtod_l+0x590>)
 800b576:	4652      	mov	r2, sl
 800b578:	465b      	mov	r3, fp
 800b57a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b57e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b582:	f7f5 f81d 	bl	80005c0 <__aeabi_dmul>
 800b586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b588:	1b5d      	subs	r5, r3, r5
 800b58a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b58e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b592:	e78f      	b.n	800b4b4 <_strtod_l+0x3d4>
 800b594:	3316      	adds	r3, #22
 800b596:	dba8      	blt.n	800b4ea <_strtod_l+0x40a>
 800b598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b59a:	4650      	mov	r0, sl
 800b59c:	4659      	mov	r1, fp
 800b59e:	eba3 0808 	sub.w	r8, r3, r8
 800b5a2:	4b33      	ldr	r3, [pc, #204]	@ (800b670 <_strtod_l+0x590>)
 800b5a4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b5a8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b5ac:	f7f5 f932 	bl	8000814 <__aeabi_ddiv>
 800b5b0:	e782      	b.n	800b4b8 <_strtod_l+0x3d8>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	1124      	asrs	r4, r4, #4
 800b5b6:	4650      	mov	r0, sl
 800b5b8:	4659      	mov	r1, fp
 800b5ba:	4f2e      	ldr	r7, [pc, #184]	@ (800b674 <_strtod_l+0x594>)
 800b5bc:	461e      	mov	r6, r3
 800b5be:	2c01      	cmp	r4, #1
 800b5c0:	dc21      	bgt.n	800b606 <_strtod_l+0x526>
 800b5c2:	b10b      	cbz	r3, 800b5c8 <_strtod_l+0x4e8>
 800b5c4:	4682      	mov	sl, r0
 800b5c6:	468b      	mov	fp, r1
 800b5c8:	492a      	ldr	r1, [pc, #168]	@ (800b674 <_strtod_l+0x594>)
 800b5ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b5ce:	4652      	mov	r2, sl
 800b5d0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b5d4:	465b      	mov	r3, fp
 800b5d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5da:	f7f4 fff1 	bl	80005c0 <__aeabi_dmul>
 800b5de:	4b26      	ldr	r3, [pc, #152]	@ (800b678 <_strtod_l+0x598>)
 800b5e0:	460a      	mov	r2, r1
 800b5e2:	4682      	mov	sl, r0
 800b5e4:	400b      	ands	r3, r1
 800b5e6:	4925      	ldr	r1, [pc, #148]	@ (800b67c <_strtod_l+0x59c>)
 800b5e8:	428b      	cmp	r3, r1
 800b5ea:	d898      	bhi.n	800b51e <_strtod_l+0x43e>
 800b5ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b5f0:	428b      	cmp	r3, r1
 800b5f2:	bf86      	itte	hi
 800b5f4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b680 <_strtod_l+0x5a0>
 800b5f8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b5fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b600:	2300      	movs	r3, #0
 800b602:	9308      	str	r3, [sp, #32]
 800b604:	e076      	b.n	800b6f4 <_strtod_l+0x614>
 800b606:	07e2      	lsls	r2, r4, #31
 800b608:	d504      	bpl.n	800b614 <_strtod_l+0x534>
 800b60a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b60e:	f7f4 ffd7 	bl	80005c0 <__aeabi_dmul>
 800b612:	2301      	movs	r3, #1
 800b614:	3601      	adds	r6, #1
 800b616:	1064      	asrs	r4, r4, #1
 800b618:	3708      	adds	r7, #8
 800b61a:	e7d0      	b.n	800b5be <_strtod_l+0x4de>
 800b61c:	d0f0      	beq.n	800b600 <_strtod_l+0x520>
 800b61e:	4264      	negs	r4, r4
 800b620:	f014 020f 	ands.w	r2, r4, #15
 800b624:	d00a      	beq.n	800b63c <_strtod_l+0x55c>
 800b626:	4b12      	ldr	r3, [pc, #72]	@ (800b670 <_strtod_l+0x590>)
 800b628:	4650      	mov	r0, sl
 800b62a:	4659      	mov	r1, fp
 800b62c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	f7f5 f8ee 	bl	8000814 <__aeabi_ddiv>
 800b638:	4682      	mov	sl, r0
 800b63a:	468b      	mov	fp, r1
 800b63c:	1124      	asrs	r4, r4, #4
 800b63e:	d0df      	beq.n	800b600 <_strtod_l+0x520>
 800b640:	2c1f      	cmp	r4, #31
 800b642:	dd1f      	ble.n	800b684 <_strtod_l+0x5a4>
 800b644:	2400      	movs	r4, #0
 800b646:	46a0      	mov	r8, r4
 800b648:	46a1      	mov	r9, r4
 800b64a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b64c:	2322      	movs	r3, #34	@ 0x22
 800b64e:	9a05      	ldr	r2, [sp, #20]
 800b650:	f04f 0a00 	mov.w	sl, #0
 800b654:	f04f 0b00 	mov.w	fp, #0
 800b658:	6013      	str	r3, [r2, #0]
 800b65a:	e76b      	b.n	800b534 <_strtod_l+0x454>
 800b65c:	0800d895 	.word	0x0800d895
 800b660:	0800db78 	.word	0x0800db78
 800b664:	0800d88d 	.word	0x0800d88d
 800b668:	0800d8c2 	.word	0x0800d8c2
 800b66c:	0800da16 	.word	0x0800da16
 800b670:	0800dab0 	.word	0x0800dab0
 800b674:	0800da88 	.word	0x0800da88
 800b678:	7ff00000 	.word	0x7ff00000
 800b67c:	7ca00000 	.word	0x7ca00000
 800b680:	7fefffff 	.word	0x7fefffff
 800b684:	f014 0310 	ands.w	r3, r4, #16
 800b688:	4650      	mov	r0, sl
 800b68a:	4659      	mov	r1, fp
 800b68c:	4ea9      	ldr	r6, [pc, #676]	@ (800b934 <_strtod_l+0x854>)
 800b68e:	bf18      	it	ne
 800b690:	236a      	movne	r3, #106	@ 0x6a
 800b692:	9308      	str	r3, [sp, #32]
 800b694:	2300      	movs	r3, #0
 800b696:	07e7      	lsls	r7, r4, #31
 800b698:	d504      	bpl.n	800b6a4 <_strtod_l+0x5c4>
 800b69a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b69e:	f7f4 ff8f 	bl	80005c0 <__aeabi_dmul>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	1064      	asrs	r4, r4, #1
 800b6a6:	f106 0608 	add.w	r6, r6, #8
 800b6aa:	d1f4      	bne.n	800b696 <_strtod_l+0x5b6>
 800b6ac:	b10b      	cbz	r3, 800b6b2 <_strtod_l+0x5d2>
 800b6ae:	4682      	mov	sl, r0
 800b6b0:	468b      	mov	fp, r1
 800b6b2:	9b08      	ldr	r3, [sp, #32]
 800b6b4:	b1b3      	cbz	r3, 800b6e4 <_strtod_l+0x604>
 800b6b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b6ba:	4659      	mov	r1, fp
 800b6bc:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	dd0f      	ble.n	800b6e4 <_strtod_l+0x604>
 800b6c4:	2b1f      	cmp	r3, #31
 800b6c6:	dd56      	ble.n	800b776 <_strtod_l+0x696>
 800b6c8:	2b34      	cmp	r3, #52	@ 0x34
 800b6ca:	f04f 0a00 	mov.w	sl, #0
 800b6ce:	bfdb      	ittet	le
 800b6d0:	f04f 33ff 	movle.w	r3, #4294967295
 800b6d4:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b6d8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b6dc:	4093      	lslle	r3, r2
 800b6de:	bfd8      	it	le
 800b6e0:	ea03 0b01 	andle.w	fp, r3, r1
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	4650      	mov	r0, sl
 800b6ea:	4659      	mov	r1, fp
 800b6ec:	f7f5 f9d0 	bl	8000a90 <__aeabi_dcmpeq>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d1a7      	bne.n	800b644 <_strtod_l+0x564>
 800b6f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6f6:	464a      	mov	r2, r9
 800b6f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	462b      	mov	r3, r5
 800b6fe:	9805      	ldr	r0, [sp, #20]
 800b700:	f7ff f8c2 	bl	800a888 <__s2b>
 800b704:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b706:	2800      	cmp	r0, #0
 800b708:	f43f af09 	beq.w	800b51e <_strtod_l+0x43e>
 800b70c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b70e:	2400      	movs	r4, #0
 800b710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b712:	2a00      	cmp	r2, #0
 800b714:	eba3 0308 	sub.w	r3, r3, r8
 800b718:	46a0      	mov	r8, r4
 800b71a:	bfa8      	it	ge
 800b71c:	2300      	movge	r3, #0
 800b71e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b720:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b724:	9316      	str	r3, [sp, #88]	@ 0x58
 800b726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b728:	9805      	ldr	r0, [sp, #20]
 800b72a:	6859      	ldr	r1, [r3, #4]
 800b72c:	f7ff f802 	bl	800a734 <_Balloc>
 800b730:	4681      	mov	r9, r0
 800b732:	2800      	cmp	r0, #0
 800b734:	f43f aef7 	beq.w	800b526 <_strtod_l+0x446>
 800b738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b73a:	300c      	adds	r0, #12
 800b73c:	691a      	ldr	r2, [r3, #16]
 800b73e:	f103 010c 	add.w	r1, r3, #12
 800b742:	3202      	adds	r2, #2
 800b744:	0092      	lsls	r2, r2, #2
 800b746:	f001 f8eb 	bl	800c920 <memcpy>
 800b74a:	aa1c      	add	r2, sp, #112	@ 0x70
 800b74c:	a91b      	add	r1, sp, #108	@ 0x6c
 800b74e:	9805      	ldr	r0, [sp, #20]
 800b750:	ec4b ab10 	vmov	d0, sl, fp
 800b754:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b758:	f7ff fbd4 	bl	800af04 <__d2b>
 800b75c:	901a      	str	r0, [sp, #104]	@ 0x68
 800b75e:	2800      	cmp	r0, #0
 800b760:	f43f aee1 	beq.w	800b526 <_strtod_l+0x446>
 800b764:	2101      	movs	r1, #1
 800b766:	9805      	ldr	r0, [sp, #20]
 800b768:	f7ff f924 	bl	800a9b4 <__i2b>
 800b76c:	4680      	mov	r8, r0
 800b76e:	b948      	cbnz	r0, 800b784 <_strtod_l+0x6a4>
 800b770:	f04f 0800 	mov.w	r8, #0
 800b774:	e6d7      	b.n	800b526 <_strtod_l+0x446>
 800b776:	f04f 32ff 	mov.w	r2, #4294967295
 800b77a:	fa02 f303 	lsl.w	r3, r2, r3
 800b77e:	ea03 0a0a 	and.w	sl, r3, sl
 800b782:	e7af      	b.n	800b6e4 <_strtod_l+0x604>
 800b784:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b786:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b788:	2d00      	cmp	r5, #0
 800b78a:	bfa9      	itett	ge
 800b78c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b78e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b790:	18ef      	addge	r7, r5, r3
 800b792:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b794:	bfb8      	it	lt
 800b796:	1b5e      	sublt	r6, r3, r5
 800b798:	9b08      	ldr	r3, [sp, #32]
 800b79a:	bfb8      	it	lt
 800b79c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b79e:	1aed      	subs	r5, r5, r3
 800b7a0:	4b65      	ldr	r3, [pc, #404]	@ (800b938 <_strtod_l+0x858>)
 800b7a2:	4415      	add	r5, r2
 800b7a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b7a8:	3d01      	subs	r5, #1
 800b7aa:	429d      	cmp	r5, r3
 800b7ac:	da4f      	bge.n	800b84e <_strtod_l+0x76e>
 800b7ae:	1b5b      	subs	r3, r3, r5
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	2b1f      	cmp	r3, #31
 800b7b4:	eba2 0203 	sub.w	r2, r2, r3
 800b7b8:	dc3d      	bgt.n	800b836 <_strtod_l+0x756>
 800b7ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b7be:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7c4:	18bd      	adds	r5, r7, r2
 800b7c6:	9b08      	ldr	r3, [sp, #32]
 800b7c8:	4416      	add	r6, r2
 800b7ca:	42af      	cmp	r7, r5
 800b7cc:	441e      	add	r6, r3
 800b7ce:	463b      	mov	r3, r7
 800b7d0:	bfa8      	it	ge
 800b7d2:	462b      	movge	r3, r5
 800b7d4:	42b3      	cmp	r3, r6
 800b7d6:	bfa8      	it	ge
 800b7d8:	4633      	movge	r3, r6
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bfc2      	ittt	gt
 800b7de:	1aed      	subgt	r5, r5, r3
 800b7e0:	1af6      	subgt	r6, r6, r3
 800b7e2:	1aff      	subgt	r7, r7, r3
 800b7e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	dd16      	ble.n	800b818 <_strtod_l+0x738>
 800b7ea:	4641      	mov	r1, r8
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	9805      	ldr	r0, [sp, #20]
 800b7f0:	f7ff f99a 	bl	800ab28 <__pow5mult>
 800b7f4:	4680      	mov	r8, r0
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d0ba      	beq.n	800b770 <_strtod_l+0x690>
 800b7fa:	4601      	mov	r1, r0
 800b7fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b7fe:	9805      	ldr	r0, [sp, #20]
 800b800:	f7ff f8ee 	bl	800a9e0 <__multiply>
 800b804:	900a      	str	r0, [sp, #40]	@ 0x28
 800b806:	2800      	cmp	r0, #0
 800b808:	f43f ae8d 	beq.w	800b526 <_strtod_l+0x446>
 800b80c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b80e:	9805      	ldr	r0, [sp, #20]
 800b810:	f7fe ffd0 	bl	800a7b4 <_Bfree>
 800b814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b816:	931a      	str	r3, [sp, #104]	@ 0x68
 800b818:	2d00      	cmp	r5, #0
 800b81a:	dc1d      	bgt.n	800b858 <_strtod_l+0x778>
 800b81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b81e:	2b00      	cmp	r3, #0
 800b820:	dd23      	ble.n	800b86a <_strtod_l+0x78a>
 800b822:	4649      	mov	r1, r9
 800b824:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b826:	9805      	ldr	r0, [sp, #20]
 800b828:	f7ff f97e 	bl	800ab28 <__pow5mult>
 800b82c:	4681      	mov	r9, r0
 800b82e:	b9e0      	cbnz	r0, 800b86a <_strtod_l+0x78a>
 800b830:	f04f 0900 	mov.w	r9, #0
 800b834:	e677      	b.n	800b526 <_strtod_l+0x446>
 800b836:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b83a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b83c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b840:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b844:	35e2      	adds	r5, #226	@ 0xe2
 800b846:	fa01 f305 	lsl.w	r3, r1, r5
 800b84a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b84c:	e7ba      	b.n	800b7c4 <_strtod_l+0x6e4>
 800b84e:	2300      	movs	r3, #0
 800b850:	9310      	str	r3, [sp, #64]	@ 0x40
 800b852:	2301      	movs	r3, #1
 800b854:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b856:	e7b5      	b.n	800b7c4 <_strtod_l+0x6e4>
 800b858:	462a      	mov	r2, r5
 800b85a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b85c:	9805      	ldr	r0, [sp, #20]
 800b85e:	f7ff f9bd 	bl	800abdc <__lshift>
 800b862:	901a      	str	r0, [sp, #104]	@ 0x68
 800b864:	2800      	cmp	r0, #0
 800b866:	d1d9      	bne.n	800b81c <_strtod_l+0x73c>
 800b868:	e65d      	b.n	800b526 <_strtod_l+0x446>
 800b86a:	2e00      	cmp	r6, #0
 800b86c:	dd07      	ble.n	800b87e <_strtod_l+0x79e>
 800b86e:	4649      	mov	r1, r9
 800b870:	4632      	mov	r2, r6
 800b872:	9805      	ldr	r0, [sp, #20]
 800b874:	f7ff f9b2 	bl	800abdc <__lshift>
 800b878:	4681      	mov	r9, r0
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d0d8      	beq.n	800b830 <_strtod_l+0x750>
 800b87e:	2f00      	cmp	r7, #0
 800b880:	dd08      	ble.n	800b894 <_strtod_l+0x7b4>
 800b882:	4641      	mov	r1, r8
 800b884:	463a      	mov	r2, r7
 800b886:	9805      	ldr	r0, [sp, #20]
 800b888:	f7ff f9a8 	bl	800abdc <__lshift>
 800b88c:	4680      	mov	r8, r0
 800b88e:	2800      	cmp	r0, #0
 800b890:	f43f ae49 	beq.w	800b526 <_strtod_l+0x446>
 800b894:	464a      	mov	r2, r9
 800b896:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b898:	9805      	ldr	r0, [sp, #20]
 800b89a:	f7ff fa27 	bl	800acec <__mdiff>
 800b89e:	4604      	mov	r4, r0
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	f43f ae40 	beq.w	800b526 <_strtod_l+0x446>
 800b8a6:	68c3      	ldr	r3, [r0, #12]
 800b8a8:	4641      	mov	r1, r8
 800b8aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	60c3      	str	r3, [r0, #12]
 800b8b0:	f7ff fa00 	bl	800acb4 <__mcmp>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	da45      	bge.n	800b944 <_strtod_l+0x864>
 800b8b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ba:	ea53 030a 	orrs.w	r3, r3, sl
 800b8be:	d16b      	bne.n	800b998 <_strtod_l+0x8b8>
 800b8c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d167      	bne.n	800b998 <_strtod_l+0x8b8>
 800b8c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b8cc:	0d1b      	lsrs	r3, r3, #20
 800b8ce:	051b      	lsls	r3, r3, #20
 800b8d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b8d4:	d960      	bls.n	800b998 <_strtod_l+0x8b8>
 800b8d6:	6963      	ldr	r3, [r4, #20]
 800b8d8:	b913      	cbnz	r3, 800b8e0 <_strtod_l+0x800>
 800b8da:	6923      	ldr	r3, [r4, #16]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	dd5b      	ble.n	800b998 <_strtod_l+0x8b8>
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	9805      	ldr	r0, [sp, #20]
 800b8e6:	f7ff f979 	bl	800abdc <__lshift>
 800b8ea:	4641      	mov	r1, r8
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	f7ff f9e1 	bl	800acb4 <__mcmp>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	dd50      	ble.n	800b998 <_strtod_l+0x8b8>
 800b8f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b8fa:	9a08      	ldr	r2, [sp, #32]
 800b8fc:	0d1b      	lsrs	r3, r3, #20
 800b8fe:	051b      	lsls	r3, r3, #20
 800b900:	2a00      	cmp	r2, #0
 800b902:	d06a      	beq.n	800b9da <_strtod_l+0x8fa>
 800b904:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b908:	d867      	bhi.n	800b9da <_strtod_l+0x8fa>
 800b90a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b90e:	f67f ae9d 	bls.w	800b64c <_strtod_l+0x56c>
 800b912:	4b0a      	ldr	r3, [pc, #40]	@ (800b93c <_strtod_l+0x85c>)
 800b914:	4650      	mov	r0, sl
 800b916:	4659      	mov	r1, fp
 800b918:	2200      	movs	r2, #0
 800b91a:	f7f4 fe51 	bl	80005c0 <__aeabi_dmul>
 800b91e:	4b08      	ldr	r3, [pc, #32]	@ (800b940 <_strtod_l+0x860>)
 800b920:	4682      	mov	sl, r0
 800b922:	468b      	mov	fp, r1
 800b924:	400b      	ands	r3, r1
 800b926:	2b00      	cmp	r3, #0
 800b928:	f47f ae08 	bne.w	800b53c <_strtod_l+0x45c>
 800b92c:	2322      	movs	r3, #34	@ 0x22
 800b92e:	9a05      	ldr	r2, [sp, #20]
 800b930:	6013      	str	r3, [r2, #0]
 800b932:	e603      	b.n	800b53c <_strtod_l+0x45c>
 800b934:	0800dba0 	.word	0x0800dba0
 800b938:	fffffc02 	.word	0xfffffc02
 800b93c:	39500000 	.word	0x39500000
 800b940:	7ff00000 	.word	0x7ff00000
 800b944:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b948:	d165      	bne.n	800ba16 <_strtod_l+0x936>
 800b94a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b94c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b950:	b35a      	cbz	r2, 800b9aa <_strtod_l+0x8ca>
 800b952:	4a9f      	ldr	r2, [pc, #636]	@ (800bbd0 <_strtod_l+0xaf0>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d12b      	bne.n	800b9b0 <_strtod_l+0x8d0>
 800b958:	9b08      	ldr	r3, [sp, #32]
 800b95a:	4651      	mov	r1, sl
 800b95c:	b303      	cbz	r3, 800b9a0 <_strtod_l+0x8c0>
 800b95e:	465a      	mov	r2, fp
 800b960:	4b9c      	ldr	r3, [pc, #624]	@ (800bbd4 <_strtod_l+0xaf4>)
 800b962:	4013      	ands	r3, r2
 800b964:	f04f 32ff 	mov.w	r2, #4294967295
 800b968:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b96c:	d81b      	bhi.n	800b9a6 <_strtod_l+0x8c6>
 800b96e:	0d1b      	lsrs	r3, r3, #20
 800b970:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b974:	fa02 f303 	lsl.w	r3, r2, r3
 800b978:	4299      	cmp	r1, r3
 800b97a:	d119      	bne.n	800b9b0 <_strtod_l+0x8d0>
 800b97c:	4b96      	ldr	r3, [pc, #600]	@ (800bbd8 <_strtod_l+0xaf8>)
 800b97e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b980:	429a      	cmp	r2, r3
 800b982:	d102      	bne.n	800b98a <_strtod_l+0x8aa>
 800b984:	3101      	adds	r1, #1
 800b986:	f43f adce 	beq.w	800b526 <_strtod_l+0x446>
 800b98a:	4b92      	ldr	r3, [pc, #584]	@ (800bbd4 <_strtod_l+0xaf4>)
 800b98c:	f04f 0a00 	mov.w	sl, #0
 800b990:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b992:	401a      	ands	r2, r3
 800b994:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b998:	9b08      	ldr	r3, [sp, #32]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1b9      	bne.n	800b912 <_strtod_l+0x832>
 800b99e:	e5cd      	b.n	800b53c <_strtod_l+0x45c>
 800b9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a4:	e7e8      	b.n	800b978 <_strtod_l+0x898>
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	e7e6      	b.n	800b978 <_strtod_l+0x898>
 800b9aa:	ea53 030a 	orrs.w	r3, r3, sl
 800b9ae:	d0a2      	beq.n	800b8f6 <_strtod_l+0x816>
 800b9b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b9b2:	b1db      	cbz	r3, 800b9ec <_strtod_l+0x90c>
 800b9b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9b6:	4213      	tst	r3, r2
 800b9b8:	d0ee      	beq.n	800b998 <_strtod_l+0x8b8>
 800b9ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9bc:	4650      	mov	r0, sl
 800b9be:	9a08      	ldr	r2, [sp, #32]
 800b9c0:	4659      	mov	r1, fp
 800b9c2:	b1bb      	cbz	r3, 800b9f4 <_strtod_l+0x914>
 800b9c4:	f7ff fb6c 	bl	800b0a0 <sulp>
 800b9c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9cc:	ec53 2b10 	vmov	r2, r3, d0
 800b9d0:	f7f4 fc40 	bl	8000254 <__adddf3>
 800b9d4:	4682      	mov	sl, r0
 800b9d6:	468b      	mov	fp, r1
 800b9d8:	e7de      	b.n	800b998 <_strtod_l+0x8b8>
 800b9da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b9de:	f04f 3aff 	mov.w	sl, #4294967295
 800b9e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b9e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b9ea:	e7d5      	b.n	800b998 <_strtod_l+0x8b8>
 800b9ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b9ee:	ea13 0f0a 	tst.w	r3, sl
 800b9f2:	e7e1      	b.n	800b9b8 <_strtod_l+0x8d8>
 800b9f4:	f7ff fb54 	bl	800b0a0 <sulp>
 800b9f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9fc:	ec53 2b10 	vmov	r2, r3, d0
 800ba00:	f7f4 fc26 	bl	8000250 <__aeabi_dsub>
 800ba04:	2200      	movs	r2, #0
 800ba06:	2300      	movs	r3, #0
 800ba08:	4682      	mov	sl, r0
 800ba0a:	468b      	mov	fp, r1
 800ba0c:	f7f5 f840 	bl	8000a90 <__aeabi_dcmpeq>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d0c1      	beq.n	800b998 <_strtod_l+0x8b8>
 800ba14:	e61a      	b.n	800b64c <_strtod_l+0x56c>
 800ba16:	4641      	mov	r1, r8
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f7ff facb 	bl	800afb4 <__ratio>
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ba24:	ec57 6b10 	vmov	r6, r7, d0
 800ba28:	4630      	mov	r0, r6
 800ba2a:	4639      	mov	r1, r7
 800ba2c:	f7f5 f844 	bl	8000ab8 <__aeabi_dcmple>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d06f      	beq.n	800bb14 <_strtod_l+0xa34>
 800ba34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d17a      	bne.n	800bb30 <_strtod_l+0xa50>
 800ba3a:	f1ba 0f00 	cmp.w	sl, #0
 800ba3e:	d158      	bne.n	800baf2 <_strtod_l+0xa12>
 800ba40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d15a      	bne.n	800bb00 <_strtod_l+0xa20>
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	4b63      	ldr	r3, [pc, #396]	@ (800bbdc <_strtod_l+0xafc>)
 800ba4e:	4630      	mov	r0, r6
 800ba50:	4639      	mov	r1, r7
 800ba52:	f7f5 f827 	bl	8000aa4 <__aeabi_dcmplt>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d159      	bne.n	800bb0e <_strtod_l+0xa2e>
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	2200      	movs	r2, #0
 800ba60:	4b5f      	ldr	r3, [pc, #380]	@ (800bbe0 <_strtod_l+0xb00>)
 800ba62:	f7f4 fdad 	bl	80005c0 <__aeabi_dmul>
 800ba66:	4606      	mov	r6, r0
 800ba68:	460f      	mov	r7, r1
 800ba6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ba6e:	9606      	str	r6, [sp, #24]
 800ba70:	9307      	str	r3, [sp, #28]
 800ba72:	4d58      	ldr	r5, [pc, #352]	@ (800bbd4 <_strtod_l+0xaf4>)
 800ba74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ba7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba7e:	401d      	ands	r5, r3
 800ba80:	4b58      	ldr	r3, [pc, #352]	@ (800bbe4 <_strtod_l+0xb04>)
 800ba82:	429d      	cmp	r5, r3
 800ba84:	f040 80b2 	bne.w	800bbec <_strtod_l+0xb0c>
 800ba88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ba8e:	ec4b ab10 	vmov	d0, sl, fp
 800ba92:	f7ff f9c3 	bl	800ae1c <__ulp>
 800ba96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba9a:	ec51 0b10 	vmov	r0, r1, d0
 800ba9e:	f7f4 fd8f 	bl	80005c0 <__aeabi_dmul>
 800baa2:	4652      	mov	r2, sl
 800baa4:	465b      	mov	r3, fp
 800baa6:	f7f4 fbd5 	bl	8000254 <__adddf3>
 800baaa:	460b      	mov	r3, r1
 800baac:	4949      	ldr	r1, [pc, #292]	@ (800bbd4 <_strtod_l+0xaf4>)
 800baae:	4682      	mov	sl, r0
 800bab0:	4a4d      	ldr	r2, [pc, #308]	@ (800bbe8 <_strtod_l+0xb08>)
 800bab2:	4019      	ands	r1, r3
 800bab4:	4291      	cmp	r1, r2
 800bab6:	d942      	bls.n	800bb3e <_strtod_l+0xa5e>
 800bab8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800baba:	4b47      	ldr	r3, [pc, #284]	@ (800bbd8 <_strtod_l+0xaf8>)
 800babc:	429a      	cmp	r2, r3
 800babe:	d103      	bne.n	800bac8 <_strtod_l+0x9e8>
 800bac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bac2:	3301      	adds	r3, #1
 800bac4:	f43f ad2f 	beq.w	800b526 <_strtod_l+0x446>
 800bac8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bbd8 <_strtod_l+0xaf8>
 800bacc:	f04f 3aff 	mov.w	sl, #4294967295
 800bad0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bad2:	9805      	ldr	r0, [sp, #20]
 800bad4:	f7fe fe6e 	bl	800a7b4 <_Bfree>
 800bad8:	4649      	mov	r1, r9
 800bada:	9805      	ldr	r0, [sp, #20]
 800badc:	f7fe fe6a 	bl	800a7b4 <_Bfree>
 800bae0:	4641      	mov	r1, r8
 800bae2:	9805      	ldr	r0, [sp, #20]
 800bae4:	f7fe fe66 	bl	800a7b4 <_Bfree>
 800bae8:	4621      	mov	r1, r4
 800baea:	9805      	ldr	r0, [sp, #20]
 800baec:	f7fe fe62 	bl	800a7b4 <_Bfree>
 800baf0:	e619      	b.n	800b726 <_strtod_l+0x646>
 800baf2:	f1ba 0f01 	cmp.w	sl, #1
 800baf6:	d103      	bne.n	800bb00 <_strtod_l+0xa20>
 800baf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f43f ada6 	beq.w	800b64c <_strtod_l+0x56c>
 800bb00:	2600      	movs	r6, #0
 800bb02:	4f36      	ldr	r7, [pc, #216]	@ (800bbdc <_strtod_l+0xafc>)
 800bb04:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800bbb0 <_strtod_l+0xad0>
 800bb08:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb0c:	e7b1      	b.n	800ba72 <_strtod_l+0x992>
 800bb0e:	2600      	movs	r6, #0
 800bb10:	4f33      	ldr	r7, [pc, #204]	@ (800bbe0 <_strtod_l+0xb00>)
 800bb12:	e7aa      	b.n	800ba6a <_strtod_l+0x98a>
 800bb14:	4b32      	ldr	r3, [pc, #200]	@ (800bbe0 <_strtod_l+0xb00>)
 800bb16:	4630      	mov	r0, r6
 800bb18:	4639      	mov	r1, r7
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f7f4 fd50 	bl	80005c0 <__aeabi_dmul>
 800bb20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb22:	4606      	mov	r6, r0
 800bb24:	460f      	mov	r7, r1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d09f      	beq.n	800ba6a <_strtod_l+0x98a>
 800bb2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bb2e:	e7a0      	b.n	800ba72 <_strtod_l+0x992>
 800bb30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bbb8 <_strtod_l+0xad8>
 800bb34:	ec57 6b17 	vmov	r6, r7, d7
 800bb38:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb3c:	e799      	b.n	800ba72 <_strtod_l+0x992>
 800bb3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bb42:	9b08      	ldr	r3, [sp, #32]
 800bb44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1c1      	bne.n	800bad0 <_strtod_l+0x9f0>
 800bb4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb50:	0d1b      	lsrs	r3, r3, #20
 800bb52:	051b      	lsls	r3, r3, #20
 800bb54:	429d      	cmp	r5, r3
 800bb56:	d1bb      	bne.n	800bad0 <_strtod_l+0x9f0>
 800bb58:	4630      	mov	r0, r6
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	f7f5 f890 	bl	8000c80 <__aeabi_d2lz>
 800bb60:	f7f4 fd00 	bl	8000564 <__aeabi_l2d>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bb70:	f7f4 fb6e 	bl	8000250 <__aeabi_dsub>
 800bb74:	460b      	mov	r3, r1
 800bb76:	4602      	mov	r2, r0
 800bb78:	ea46 060a 	orr.w	r6, r6, sl
 800bb7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bb80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb82:	431e      	orrs	r6, r3
 800bb84:	d06f      	beq.n	800bc66 <_strtod_l+0xb86>
 800bb86:	a30e      	add	r3, pc, #56	@ (adr r3, 800bbc0 <_strtod_l+0xae0>)
 800bb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8c:	f7f4 ff8a 	bl	8000aa4 <__aeabi_dcmplt>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	f47f acd3 	bne.w	800b53c <_strtod_l+0x45c>
 800bb96:	a30c      	add	r3, pc, #48	@ (adr r3, 800bbc8 <_strtod_l+0xae8>)
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bba0:	f7f4 ff9e 	bl	8000ae0 <__aeabi_dcmpgt>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d093      	beq.n	800bad0 <_strtod_l+0x9f0>
 800bba8:	e4c8      	b.n	800b53c <_strtod_l+0x45c>
 800bbaa:	bf00      	nop
 800bbac:	f3af 8000 	nop.w
 800bbb0:	00000000 	.word	0x00000000
 800bbb4:	bff00000 	.word	0xbff00000
 800bbb8:	00000000 	.word	0x00000000
 800bbbc:	3ff00000 	.word	0x3ff00000
 800bbc0:	94a03595 	.word	0x94a03595
 800bbc4:	3fdfffff 	.word	0x3fdfffff
 800bbc8:	35afe535 	.word	0x35afe535
 800bbcc:	3fe00000 	.word	0x3fe00000
 800bbd0:	000fffff 	.word	0x000fffff
 800bbd4:	7ff00000 	.word	0x7ff00000
 800bbd8:	7fefffff 	.word	0x7fefffff
 800bbdc:	3ff00000 	.word	0x3ff00000
 800bbe0:	3fe00000 	.word	0x3fe00000
 800bbe4:	7fe00000 	.word	0x7fe00000
 800bbe8:	7c9fffff 	.word	0x7c9fffff
 800bbec:	9b08      	ldr	r3, [sp, #32]
 800bbee:	b323      	cbz	r3, 800bc3a <_strtod_l+0xb5a>
 800bbf0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bbf4:	d821      	bhi.n	800bc3a <_strtod_l+0xb5a>
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	4639      	mov	r1, r7
 800bbfa:	a327      	add	r3, pc, #156	@ (adr r3, 800bc98 <_strtod_l+0xbb8>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f7f4 ff5a 	bl	8000ab8 <__aeabi_dcmple>
 800bc04:	b1a0      	cbz	r0, 800bc30 <_strtod_l+0xb50>
 800bc06:	4639      	mov	r1, r7
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f7f4 ffb1 	bl	8000b70 <__aeabi_d2uiz>
 800bc0e:	2801      	cmp	r0, #1
 800bc10:	bf38      	it	cc
 800bc12:	2001      	movcc	r0, #1
 800bc14:	f7f4 fc5a 	bl	80004cc <__aeabi_ui2d>
 800bc18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	460f      	mov	r7, r1
 800bc1e:	b9fb      	cbnz	r3, 800bc60 <_strtod_l+0xb80>
 800bc20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc24:	9014      	str	r0, [sp, #80]	@ 0x50
 800bc26:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bc2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bc36:	1b5b      	subs	r3, r3, r5
 800bc38:	9311      	str	r3, [sp, #68]	@ 0x44
 800bc3a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bc3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bc42:	f7ff f8eb 	bl	800ae1c <__ulp>
 800bc46:	4650      	mov	r0, sl
 800bc48:	4659      	mov	r1, fp
 800bc4a:	ec53 2b10 	vmov	r2, r3, d0
 800bc4e:	f7f4 fcb7 	bl	80005c0 <__aeabi_dmul>
 800bc52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bc56:	f7f4 fafd 	bl	8000254 <__adddf3>
 800bc5a:	4682      	mov	sl, r0
 800bc5c:	468b      	mov	fp, r1
 800bc5e:	e770      	b.n	800bb42 <_strtod_l+0xa62>
 800bc60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bc64:	e7e0      	b.n	800bc28 <_strtod_l+0xb48>
 800bc66:	a30e      	add	r3, pc, #56	@ (adr r3, 800bca0 <_strtod_l+0xbc0>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	f7f4 ff1a 	bl	8000aa4 <__aeabi_dcmplt>
 800bc70:	e798      	b.n	800bba4 <_strtod_l+0xac4>
 800bc72:	2300      	movs	r3, #0
 800bc74:	930e      	str	r3, [sp, #56]	@ 0x38
 800bc76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc78:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	f7ff ba6d 	b.w	800b15a <_strtod_l+0x7a>
 800bc80:	2a65      	cmp	r2, #101	@ 0x65
 800bc82:	f43f ab67 	beq.w	800b354 <_strtod_l+0x274>
 800bc86:	2a45      	cmp	r2, #69	@ 0x45
 800bc88:	f43f ab64 	beq.w	800b354 <_strtod_l+0x274>
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	f7ff bba0 	b.w	800b3d2 <_strtod_l+0x2f2>
 800bc92:	bf00      	nop
 800bc94:	f3af 8000 	nop.w
 800bc98:	ffc00000 	.word	0xffc00000
 800bc9c:	41dfffff 	.word	0x41dfffff
 800bca0:	94a03595 	.word	0x94a03595
 800bca4:	3fcfffff 	.word	0x3fcfffff

0800bca8 <_strtod_r>:
 800bca8:	4b01      	ldr	r3, [pc, #4]	@ (800bcb0 <_strtod_r+0x8>)
 800bcaa:	f7ff ba19 	b.w	800b0e0 <_strtod_l>
 800bcae:	bf00      	nop
 800bcb0:	20000068 	.word	0x20000068

0800bcb4 <_strtol_l.isra.0>:
 800bcb4:	2b24      	cmp	r3, #36	@ 0x24
 800bcb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcba:	4686      	mov	lr, r0
 800bcbc:	4690      	mov	r8, r2
 800bcbe:	d801      	bhi.n	800bcc4 <_strtol_l.isra.0+0x10>
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d106      	bne.n	800bcd2 <_strtol_l.isra.0+0x1e>
 800bcc4:	f7fd fd92 	bl	80097ec <__errno>
 800bcc8:	2316      	movs	r3, #22
 800bcca:	6003      	str	r3, [r0, #0]
 800bccc:	2000      	movs	r0, #0
 800bcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd2:	460d      	mov	r5, r1
 800bcd4:	4833      	ldr	r0, [pc, #204]	@ (800bda4 <_strtol_l.isra.0+0xf0>)
 800bcd6:	462a      	mov	r2, r5
 800bcd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcdc:	5d06      	ldrb	r6, [r0, r4]
 800bcde:	f016 0608 	ands.w	r6, r6, #8
 800bce2:	d1f8      	bne.n	800bcd6 <_strtol_l.isra.0+0x22>
 800bce4:	2c2d      	cmp	r4, #45	@ 0x2d
 800bce6:	d110      	bne.n	800bd0a <_strtol_l.isra.0+0x56>
 800bce8:	782c      	ldrb	r4, [r5, #0]
 800bcea:	2601      	movs	r6, #1
 800bcec:	1c95      	adds	r5, r2, #2
 800bcee:	f033 0210 	bics.w	r2, r3, #16
 800bcf2:	d115      	bne.n	800bd20 <_strtol_l.isra.0+0x6c>
 800bcf4:	2c30      	cmp	r4, #48	@ 0x30
 800bcf6:	d10d      	bne.n	800bd14 <_strtol_l.isra.0+0x60>
 800bcf8:	782a      	ldrb	r2, [r5, #0]
 800bcfa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bcfe:	2a58      	cmp	r2, #88	@ 0x58
 800bd00:	d108      	bne.n	800bd14 <_strtol_l.isra.0+0x60>
 800bd02:	786c      	ldrb	r4, [r5, #1]
 800bd04:	3502      	adds	r5, #2
 800bd06:	2310      	movs	r3, #16
 800bd08:	e00a      	b.n	800bd20 <_strtol_l.isra.0+0x6c>
 800bd0a:	2c2b      	cmp	r4, #43	@ 0x2b
 800bd0c:	bf04      	itt	eq
 800bd0e:	782c      	ldrbeq	r4, [r5, #0]
 800bd10:	1c95      	addeq	r5, r2, #2
 800bd12:	e7ec      	b.n	800bcee <_strtol_l.isra.0+0x3a>
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1f6      	bne.n	800bd06 <_strtol_l.isra.0+0x52>
 800bd18:	2c30      	cmp	r4, #48	@ 0x30
 800bd1a:	bf14      	ite	ne
 800bd1c:	230a      	movne	r3, #10
 800bd1e:	2308      	moveq	r3, #8
 800bd20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bd24:	2200      	movs	r2, #0
 800bd26:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	fbbc f9f3 	udiv	r9, ip, r3
 800bd30:	fb03 ca19 	mls	sl, r3, r9, ip
 800bd34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bd38:	2f09      	cmp	r7, #9
 800bd3a:	d80f      	bhi.n	800bd5c <_strtol_l.isra.0+0xa8>
 800bd3c:	463c      	mov	r4, r7
 800bd3e:	42a3      	cmp	r3, r4
 800bd40:	dd1b      	ble.n	800bd7a <_strtol_l.isra.0+0xc6>
 800bd42:	1c57      	adds	r7, r2, #1
 800bd44:	d007      	beq.n	800bd56 <_strtol_l.isra.0+0xa2>
 800bd46:	4581      	cmp	r9, r0
 800bd48:	d314      	bcc.n	800bd74 <_strtol_l.isra.0+0xc0>
 800bd4a:	d101      	bne.n	800bd50 <_strtol_l.isra.0+0x9c>
 800bd4c:	45a2      	cmp	sl, r4
 800bd4e:	db11      	blt.n	800bd74 <_strtol_l.isra.0+0xc0>
 800bd50:	fb00 4003 	mla	r0, r0, r3, r4
 800bd54:	2201      	movs	r2, #1
 800bd56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd5a:	e7eb      	b.n	800bd34 <_strtol_l.isra.0+0x80>
 800bd5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bd60:	2f19      	cmp	r7, #25
 800bd62:	d801      	bhi.n	800bd68 <_strtol_l.isra.0+0xb4>
 800bd64:	3c37      	subs	r4, #55	@ 0x37
 800bd66:	e7ea      	b.n	800bd3e <_strtol_l.isra.0+0x8a>
 800bd68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bd6c:	2f19      	cmp	r7, #25
 800bd6e:	d804      	bhi.n	800bd7a <_strtol_l.isra.0+0xc6>
 800bd70:	3c57      	subs	r4, #87	@ 0x57
 800bd72:	e7e4      	b.n	800bd3e <_strtol_l.isra.0+0x8a>
 800bd74:	f04f 32ff 	mov.w	r2, #4294967295
 800bd78:	e7ed      	b.n	800bd56 <_strtol_l.isra.0+0xa2>
 800bd7a:	1c53      	adds	r3, r2, #1
 800bd7c:	d108      	bne.n	800bd90 <_strtol_l.isra.0+0xdc>
 800bd7e:	2322      	movs	r3, #34	@ 0x22
 800bd80:	4660      	mov	r0, ip
 800bd82:	f8ce 3000 	str.w	r3, [lr]
 800bd86:	f1b8 0f00 	cmp.w	r8, #0
 800bd8a:	d0a0      	beq.n	800bcce <_strtol_l.isra.0+0x1a>
 800bd8c:	1e69      	subs	r1, r5, #1
 800bd8e:	e006      	b.n	800bd9e <_strtol_l.isra.0+0xea>
 800bd90:	b106      	cbz	r6, 800bd94 <_strtol_l.isra.0+0xe0>
 800bd92:	4240      	negs	r0, r0
 800bd94:	f1b8 0f00 	cmp.w	r8, #0
 800bd98:	d099      	beq.n	800bcce <_strtol_l.isra.0+0x1a>
 800bd9a:	2a00      	cmp	r2, #0
 800bd9c:	d1f6      	bne.n	800bd8c <_strtol_l.isra.0+0xd8>
 800bd9e:	f8c8 1000 	str.w	r1, [r8]
 800bda2:	e794      	b.n	800bcce <_strtol_l.isra.0+0x1a>
 800bda4:	0800dbc9 	.word	0x0800dbc9

0800bda8 <_strtol_r>:
 800bda8:	f7ff bf84 	b.w	800bcb4 <_strtol_l.isra.0>

0800bdac <__ssputs_r>:
 800bdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb0:	461f      	mov	r7, r3
 800bdb2:	688e      	ldr	r6, [r1, #8]
 800bdb4:	4682      	mov	sl, r0
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	42be      	cmp	r6, r7
 800bdba:	4690      	mov	r8, r2
 800bdbc:	680b      	ldr	r3, [r1, #0]
 800bdbe:	d82d      	bhi.n	800be1c <__ssputs_r+0x70>
 800bdc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bdc8:	d026      	beq.n	800be18 <__ssputs_r+0x6c>
 800bdca:	6965      	ldr	r5, [r4, #20]
 800bdcc:	6909      	ldr	r1, [r1, #16]
 800bdce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdd2:	eba3 0901 	sub.w	r9, r3, r1
 800bdd6:	1c7b      	adds	r3, r7, #1
 800bdd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bddc:	444b      	add	r3, r9
 800bdde:	106d      	asrs	r5, r5, #1
 800bde0:	429d      	cmp	r5, r3
 800bde2:	bf38      	it	cc
 800bde4:	461d      	movcc	r5, r3
 800bde6:	0553      	lsls	r3, r2, #21
 800bde8:	d527      	bpl.n	800be3a <__ssputs_r+0x8e>
 800bdea:	4629      	mov	r1, r5
 800bdec:	f7fe fc16 	bl	800a61c <_malloc_r>
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	b360      	cbz	r0, 800be4e <__ssputs_r+0xa2>
 800bdf4:	464a      	mov	r2, r9
 800bdf6:	6921      	ldr	r1, [r4, #16]
 800bdf8:	f000 fd92 	bl	800c920 <memcpy>
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be06:	81a3      	strh	r3, [r4, #12]
 800be08:	6126      	str	r6, [r4, #16]
 800be0a:	444e      	add	r6, r9
 800be0c:	6165      	str	r5, [r4, #20]
 800be0e:	eba5 0509 	sub.w	r5, r5, r9
 800be12:	6026      	str	r6, [r4, #0]
 800be14:	463e      	mov	r6, r7
 800be16:	60a5      	str	r5, [r4, #8]
 800be18:	42be      	cmp	r6, r7
 800be1a:	d900      	bls.n	800be1e <__ssputs_r+0x72>
 800be1c:	463e      	mov	r6, r7
 800be1e:	4632      	mov	r2, r6
 800be20:	4641      	mov	r1, r8
 800be22:	6820      	ldr	r0, [r4, #0]
 800be24:	f000 fd52 	bl	800c8cc <memmove>
 800be28:	68a3      	ldr	r3, [r4, #8]
 800be2a:	2000      	movs	r0, #0
 800be2c:	1b9b      	subs	r3, r3, r6
 800be2e:	60a3      	str	r3, [r4, #8]
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	4433      	add	r3, r6
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be3a:	462a      	mov	r2, r5
 800be3c:	f001 f901 	bl	800d042 <_realloc_r>
 800be40:	4606      	mov	r6, r0
 800be42:	2800      	cmp	r0, #0
 800be44:	d1e0      	bne.n	800be08 <__ssputs_r+0x5c>
 800be46:	6921      	ldr	r1, [r4, #16]
 800be48:	4650      	mov	r0, sl
 800be4a:	f7fe fb73 	bl	800a534 <_free_r>
 800be4e:	230c      	movs	r3, #12
 800be50:	f04f 30ff 	mov.w	r0, #4294967295
 800be54:	f8ca 3000 	str.w	r3, [sl]
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be5e:	81a3      	strh	r3, [r4, #12]
 800be60:	e7e9      	b.n	800be36 <__ssputs_r+0x8a>
	...

0800be64 <_svfiprintf_r>:
 800be64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be68:	4698      	mov	r8, r3
 800be6a:	898b      	ldrh	r3, [r1, #12]
 800be6c:	b09d      	sub	sp, #116	@ 0x74
 800be6e:	4607      	mov	r7, r0
 800be70:	061b      	lsls	r3, r3, #24
 800be72:	460d      	mov	r5, r1
 800be74:	4614      	mov	r4, r2
 800be76:	d510      	bpl.n	800be9a <_svfiprintf_r+0x36>
 800be78:	690b      	ldr	r3, [r1, #16]
 800be7a:	b973      	cbnz	r3, 800be9a <_svfiprintf_r+0x36>
 800be7c:	2140      	movs	r1, #64	@ 0x40
 800be7e:	f7fe fbcd 	bl	800a61c <_malloc_r>
 800be82:	6028      	str	r0, [r5, #0]
 800be84:	6128      	str	r0, [r5, #16]
 800be86:	b930      	cbnz	r0, 800be96 <_svfiprintf_r+0x32>
 800be88:	230c      	movs	r3, #12
 800be8a:	603b      	str	r3, [r7, #0]
 800be8c:	f04f 30ff 	mov.w	r0, #4294967295
 800be90:	b01d      	add	sp, #116	@ 0x74
 800be92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be96:	2340      	movs	r3, #64	@ 0x40
 800be98:	616b      	str	r3, [r5, #20]
 800be9a:	2300      	movs	r3, #0
 800be9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bea0:	f04f 0901 	mov.w	r9, #1
 800bea4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800c048 <_svfiprintf_r+0x1e4>
 800bea8:	9309      	str	r3, [sp, #36]	@ 0x24
 800beaa:	2320      	movs	r3, #32
 800beac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800beb0:	2330      	movs	r3, #48	@ 0x30
 800beb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800beb6:	4623      	mov	r3, r4
 800beb8:	469a      	mov	sl, r3
 800beba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bebe:	b10a      	cbz	r2, 800bec4 <_svfiprintf_r+0x60>
 800bec0:	2a25      	cmp	r2, #37	@ 0x25
 800bec2:	d1f9      	bne.n	800beb8 <_svfiprintf_r+0x54>
 800bec4:	ebba 0b04 	subs.w	fp, sl, r4
 800bec8:	d00b      	beq.n	800bee2 <_svfiprintf_r+0x7e>
 800beca:	465b      	mov	r3, fp
 800becc:	4622      	mov	r2, r4
 800bece:	4629      	mov	r1, r5
 800bed0:	4638      	mov	r0, r7
 800bed2:	f7ff ff6b 	bl	800bdac <__ssputs_r>
 800bed6:	3001      	adds	r0, #1
 800bed8:	f000 80a7 	beq.w	800c02a <_svfiprintf_r+0x1c6>
 800bedc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bede:	445a      	add	r2, fp
 800bee0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bee2:	f89a 3000 	ldrb.w	r3, [sl]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f000 809f 	beq.w	800c02a <_svfiprintf_r+0x1c6>
 800beec:	2300      	movs	r3, #0
 800beee:	f04f 32ff 	mov.w	r2, #4294967295
 800bef2:	f10a 0a01 	add.w	sl, sl, #1
 800bef6:	9304      	str	r3, [sp, #16]
 800bef8:	9307      	str	r3, [sp, #28]
 800befa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800befe:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf04:	4654      	mov	r4, sl
 800bf06:	2205      	movs	r2, #5
 800bf08:	484f      	ldr	r0, [pc, #316]	@ (800c048 <_svfiprintf_r+0x1e4>)
 800bf0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf0e:	f7fd fc9a 	bl	8009846 <memchr>
 800bf12:	9a04      	ldr	r2, [sp, #16]
 800bf14:	b9d8      	cbnz	r0, 800bf4e <_svfiprintf_r+0xea>
 800bf16:	06d0      	lsls	r0, r2, #27
 800bf18:	bf44      	itt	mi
 800bf1a:	2320      	movmi	r3, #32
 800bf1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf20:	0711      	lsls	r1, r2, #28
 800bf22:	bf44      	itt	mi
 800bf24:	232b      	movmi	r3, #43	@ 0x2b
 800bf26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf2a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf30:	d015      	beq.n	800bf5e <_svfiprintf_r+0xfa>
 800bf32:	9a07      	ldr	r2, [sp, #28]
 800bf34:	4654      	mov	r4, sl
 800bf36:	2000      	movs	r0, #0
 800bf38:	f04f 0c0a 	mov.w	ip, #10
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf42:	3b30      	subs	r3, #48	@ 0x30
 800bf44:	2b09      	cmp	r3, #9
 800bf46:	d94b      	bls.n	800bfe0 <_svfiprintf_r+0x17c>
 800bf48:	b1b0      	cbz	r0, 800bf78 <_svfiprintf_r+0x114>
 800bf4a:	9207      	str	r2, [sp, #28]
 800bf4c:	e014      	b.n	800bf78 <_svfiprintf_r+0x114>
 800bf4e:	eba0 0308 	sub.w	r3, r0, r8
 800bf52:	46a2      	mov	sl, r4
 800bf54:	fa09 f303 	lsl.w	r3, r9, r3
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	9304      	str	r3, [sp, #16]
 800bf5c:	e7d2      	b.n	800bf04 <_svfiprintf_r+0xa0>
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	1d19      	adds	r1, r3, #4
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	9103      	str	r1, [sp, #12]
 800bf68:	bfbb      	ittet	lt
 800bf6a:	425b      	neglt	r3, r3
 800bf6c:	f042 0202 	orrlt.w	r2, r2, #2
 800bf70:	9307      	strge	r3, [sp, #28]
 800bf72:	9307      	strlt	r3, [sp, #28]
 800bf74:	bfb8      	it	lt
 800bf76:	9204      	strlt	r2, [sp, #16]
 800bf78:	7823      	ldrb	r3, [r4, #0]
 800bf7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf7c:	d10a      	bne.n	800bf94 <_svfiprintf_r+0x130>
 800bf7e:	7863      	ldrb	r3, [r4, #1]
 800bf80:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf82:	d132      	bne.n	800bfea <_svfiprintf_r+0x186>
 800bf84:	9b03      	ldr	r3, [sp, #12]
 800bf86:	3402      	adds	r4, #2
 800bf88:	1d1a      	adds	r2, r3, #4
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf90:	9203      	str	r2, [sp, #12]
 800bf92:	9305      	str	r3, [sp, #20]
 800bf94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c058 <_svfiprintf_r+0x1f4>
 800bf98:	2203      	movs	r2, #3
 800bf9a:	7821      	ldrb	r1, [r4, #0]
 800bf9c:	4650      	mov	r0, sl
 800bf9e:	f7fd fc52 	bl	8009846 <memchr>
 800bfa2:	b138      	cbz	r0, 800bfb4 <_svfiprintf_r+0x150>
 800bfa4:	eba0 000a 	sub.w	r0, r0, sl
 800bfa8:	2240      	movs	r2, #64	@ 0x40
 800bfaa:	9b04      	ldr	r3, [sp, #16]
 800bfac:	3401      	adds	r4, #1
 800bfae:	4082      	lsls	r2, r0
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	9304      	str	r3, [sp, #16]
 800bfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb8:	2206      	movs	r2, #6
 800bfba:	4824      	ldr	r0, [pc, #144]	@ (800c04c <_svfiprintf_r+0x1e8>)
 800bfbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfc0:	f7fd fc41 	bl	8009846 <memchr>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d036      	beq.n	800c036 <_svfiprintf_r+0x1d2>
 800bfc8:	4b21      	ldr	r3, [pc, #132]	@ (800c050 <_svfiprintf_r+0x1ec>)
 800bfca:	bb1b      	cbnz	r3, 800c014 <_svfiprintf_r+0x1b0>
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	3307      	adds	r3, #7
 800bfd0:	f023 0307 	bic.w	r3, r3, #7
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	9303      	str	r3, [sp, #12]
 800bfd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfda:	4433      	add	r3, r6
 800bfdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfde:	e76a      	b.n	800beb6 <_svfiprintf_r+0x52>
 800bfe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	e7a8      	b.n	800bf3c <_svfiprintf_r+0xd8>
 800bfea:	2300      	movs	r3, #0
 800bfec:	3401      	adds	r4, #1
 800bfee:	f04f 0c0a 	mov.w	ip, #10
 800bff2:	4619      	mov	r1, r3
 800bff4:	9305      	str	r3, [sp, #20]
 800bff6:	4620      	mov	r0, r4
 800bff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bffc:	3a30      	subs	r2, #48	@ 0x30
 800bffe:	2a09      	cmp	r2, #9
 800c000:	d903      	bls.n	800c00a <_svfiprintf_r+0x1a6>
 800c002:	2b00      	cmp	r3, #0
 800c004:	d0c6      	beq.n	800bf94 <_svfiprintf_r+0x130>
 800c006:	9105      	str	r1, [sp, #20]
 800c008:	e7c4      	b.n	800bf94 <_svfiprintf_r+0x130>
 800c00a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c00e:	4604      	mov	r4, r0
 800c010:	2301      	movs	r3, #1
 800c012:	e7f0      	b.n	800bff6 <_svfiprintf_r+0x192>
 800c014:	ab03      	add	r3, sp, #12
 800c016:	462a      	mov	r2, r5
 800c018:	a904      	add	r1, sp, #16
 800c01a:	4638      	mov	r0, r7
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	4b0d      	ldr	r3, [pc, #52]	@ (800c054 <_svfiprintf_r+0x1f0>)
 800c020:	f7fc fc04 	bl	800882c <_printf_float>
 800c024:	1c42      	adds	r2, r0, #1
 800c026:	4606      	mov	r6, r0
 800c028:	d1d6      	bne.n	800bfd8 <_svfiprintf_r+0x174>
 800c02a:	89ab      	ldrh	r3, [r5, #12]
 800c02c:	065b      	lsls	r3, r3, #25
 800c02e:	f53f af2d 	bmi.w	800be8c <_svfiprintf_r+0x28>
 800c032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c034:	e72c      	b.n	800be90 <_svfiprintf_r+0x2c>
 800c036:	ab03      	add	r3, sp, #12
 800c038:	462a      	mov	r2, r5
 800c03a:	a904      	add	r1, sp, #16
 800c03c:	4638      	mov	r0, r7
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	4b04      	ldr	r3, [pc, #16]	@ (800c054 <_svfiprintf_r+0x1f0>)
 800c042:	f7fc fe8f 	bl	8008d64 <_printf_i>
 800c046:	e7ed      	b.n	800c024 <_svfiprintf_r+0x1c0>
 800c048:	0800d9a7 	.word	0x0800d9a7
 800c04c:	0800d9b1 	.word	0x0800d9b1
 800c050:	0800882d 	.word	0x0800882d
 800c054:	0800bdad 	.word	0x0800bdad
 800c058:	0800d9ad 	.word	0x0800d9ad

0800c05c <_sungetc_r>:
 800c05c:	b538      	push	{r3, r4, r5, lr}
 800c05e:	1c4b      	adds	r3, r1, #1
 800c060:	4614      	mov	r4, r2
 800c062:	d103      	bne.n	800c06c <_sungetc_r+0x10>
 800c064:	f04f 35ff 	mov.w	r5, #4294967295
 800c068:	4628      	mov	r0, r5
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	8993      	ldrh	r3, [r2, #12]
 800c06e:	b2cd      	uxtb	r5, r1
 800c070:	f023 0320 	bic.w	r3, r3, #32
 800c074:	8193      	strh	r3, [r2, #12]
 800c076:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c078:	6852      	ldr	r2, [r2, #4]
 800c07a:	b18b      	cbz	r3, 800c0a0 <_sungetc_r+0x44>
 800c07c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c07e:	4293      	cmp	r3, r2
 800c080:	dd08      	ble.n	800c094 <_sungetc_r+0x38>
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	1e5a      	subs	r2, r3, #1
 800c086:	6022      	str	r2, [r4, #0]
 800c088:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c08c:	6863      	ldr	r3, [r4, #4]
 800c08e:	3301      	adds	r3, #1
 800c090:	6063      	str	r3, [r4, #4]
 800c092:	e7e9      	b.n	800c068 <_sungetc_r+0xc>
 800c094:	4621      	mov	r1, r4
 800c096:	f000 fbe2 	bl	800c85e <__submore>
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d0f1      	beq.n	800c082 <_sungetc_r+0x26>
 800c09e:	e7e1      	b.n	800c064 <_sungetc_r+0x8>
 800c0a0:	6921      	ldr	r1, [r4, #16]
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	b151      	cbz	r1, 800c0bc <_sungetc_r+0x60>
 800c0a6:	4299      	cmp	r1, r3
 800c0a8:	d208      	bcs.n	800c0bc <_sungetc_r+0x60>
 800c0aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c0ae:	42a9      	cmp	r1, r5
 800c0b0:	d104      	bne.n	800c0bc <_sungetc_r+0x60>
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	3201      	adds	r2, #1
 800c0b6:	6023      	str	r3, [r4, #0]
 800c0b8:	6062      	str	r2, [r4, #4]
 800c0ba:	e7d5      	b.n	800c068 <_sungetc_r+0xc>
 800c0bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800c0c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c0ca:	4623      	mov	r3, r4
 800c0cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e7dc      	b.n	800c090 <_sungetc_r+0x34>

0800c0d6 <__ssrefill_r>:
 800c0d6:	b510      	push	{r4, lr}
 800c0d8:	460c      	mov	r4, r1
 800c0da:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c0dc:	b169      	cbz	r1, 800c0fa <__ssrefill_r+0x24>
 800c0de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0e2:	4299      	cmp	r1, r3
 800c0e4:	d001      	beq.n	800c0ea <__ssrefill_r+0x14>
 800c0e6:	f7fe fa25 	bl	800a534 <_free_r>
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0ee:	6360      	str	r0, [r4, #52]	@ 0x34
 800c0f0:	6063      	str	r3, [r4, #4]
 800c0f2:	b113      	cbz	r3, 800c0fa <__ssrefill_r+0x24>
 800c0f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c0f6:	6023      	str	r3, [r4, #0]
 800c0f8:	bd10      	pop	{r4, pc}
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c100:	6023      	str	r3, [r4, #0]
 800c102:	2300      	movs	r3, #0
 800c104:	6063      	str	r3, [r4, #4]
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	f043 0320 	orr.w	r3, r3, #32
 800c10c:	81a3      	strh	r3, [r4, #12]
 800c10e:	e7f3      	b.n	800c0f8 <__ssrefill_r+0x22>

0800c110 <__ssvfiscanf_r>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	460c      	mov	r4, r1
 800c116:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c11a:	2100      	movs	r1, #0
 800c11c:	4606      	mov	r6, r0
 800c11e:	f10d 0804 	add.w	r8, sp, #4
 800c122:	4fa6      	ldr	r7, [pc, #664]	@ (800c3bc <__ssvfiscanf_r+0x2ac>)
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c12a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c12e:	49a4      	ldr	r1, [pc, #656]	@ (800c3c0 <__ssvfiscanf_r+0x2b0>)
 800c130:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c132:	49a4      	ldr	r1, [pc, #656]	@ (800c3c4 <__ssvfiscanf_r+0x2b4>)
 800c134:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c136:	f892 9000 	ldrb.w	r9, [r2]
 800c13a:	f1b9 0f00 	cmp.w	r9, #0
 800c13e:	f000 8158 	beq.w	800c3f2 <__ssvfiscanf_r+0x2e2>
 800c142:	f817 3009 	ldrb.w	r3, [r7, r9]
 800c146:	1c55      	adds	r5, r2, #1
 800c148:	f013 0308 	ands.w	r3, r3, #8
 800c14c:	d019      	beq.n	800c182 <__ssvfiscanf_r+0x72>
 800c14e:	6863      	ldr	r3, [r4, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	dd0f      	ble.n	800c174 <__ssvfiscanf_r+0x64>
 800c154:	6823      	ldr	r3, [r4, #0]
 800c156:	781a      	ldrb	r2, [r3, #0]
 800c158:	5cba      	ldrb	r2, [r7, r2]
 800c15a:	0712      	lsls	r2, r2, #28
 800c15c:	d401      	bmi.n	800c162 <__ssvfiscanf_r+0x52>
 800c15e:	462a      	mov	r2, r5
 800c160:	e7e9      	b.n	800c136 <__ssvfiscanf_r+0x26>
 800c162:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c164:	3301      	adds	r3, #1
 800c166:	3201      	adds	r2, #1
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	9245      	str	r2, [sp, #276]	@ 0x114
 800c16c:	6862      	ldr	r2, [r4, #4]
 800c16e:	3a01      	subs	r2, #1
 800c170:	6062      	str	r2, [r4, #4]
 800c172:	e7ec      	b.n	800c14e <__ssvfiscanf_r+0x3e>
 800c174:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c176:	4621      	mov	r1, r4
 800c178:	4630      	mov	r0, r6
 800c17a:	4798      	blx	r3
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d0e9      	beq.n	800c154 <__ssvfiscanf_r+0x44>
 800c180:	e7ed      	b.n	800c15e <__ssvfiscanf_r+0x4e>
 800c182:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800c186:	f040 8086 	bne.w	800c296 <__ssvfiscanf_r+0x186>
 800c18a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c18c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c18e:	7853      	ldrb	r3, [r2, #1]
 800c190:	2b2a      	cmp	r3, #42	@ 0x2a
 800c192:	bf04      	itt	eq
 800c194:	2310      	moveq	r3, #16
 800c196:	1c95      	addeq	r5, r2, #2
 800c198:	f04f 020a 	mov.w	r2, #10
 800c19c:	bf08      	it	eq
 800c19e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c1a0:	46aa      	mov	sl, r5
 800c1a2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c1a6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c1aa:	2b09      	cmp	r3, #9
 800c1ac:	d91e      	bls.n	800c1ec <__ssvfiscanf_r+0xdc>
 800c1ae:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800c3c8 <__ssvfiscanf_r+0x2b8>
 800c1b2:	2203      	movs	r2, #3
 800c1b4:	4658      	mov	r0, fp
 800c1b6:	f7fd fb46 	bl	8009846 <memchr>
 800c1ba:	b138      	cbz	r0, 800c1cc <__ssvfiscanf_r+0xbc>
 800c1bc:	eba0 000b 	sub.w	r0, r0, fp
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c1c4:	4655      	mov	r5, sl
 800c1c6:	4083      	lsls	r3, r0
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	9341      	str	r3, [sp, #260]	@ 0x104
 800c1cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c1d0:	2b78      	cmp	r3, #120	@ 0x78
 800c1d2:	d806      	bhi.n	800c1e2 <__ssvfiscanf_r+0xd2>
 800c1d4:	2b57      	cmp	r3, #87	@ 0x57
 800c1d6:	d810      	bhi.n	800c1fa <__ssvfiscanf_r+0xea>
 800c1d8:	2b25      	cmp	r3, #37	@ 0x25
 800c1da:	d05c      	beq.n	800c296 <__ssvfiscanf_r+0x186>
 800c1dc:	d856      	bhi.n	800c28c <__ssvfiscanf_r+0x17c>
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d074      	beq.n	800c2cc <__ssvfiscanf_r+0x1bc>
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c1e6:	230a      	movs	r3, #10
 800c1e8:	9342      	str	r3, [sp, #264]	@ 0x108
 800c1ea:	e087      	b.n	800c2fc <__ssvfiscanf_r+0x1ec>
 800c1ec:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c1ee:	4655      	mov	r5, sl
 800c1f0:	fb02 1103 	mla	r1, r2, r3, r1
 800c1f4:	3930      	subs	r1, #48	@ 0x30
 800c1f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c1f8:	e7d2      	b.n	800c1a0 <__ssvfiscanf_r+0x90>
 800c1fa:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c1fe:	2a20      	cmp	r2, #32
 800c200:	d8ef      	bhi.n	800c1e2 <__ssvfiscanf_r+0xd2>
 800c202:	a101      	add	r1, pc, #4	@ (adr r1, 800c208 <__ssvfiscanf_r+0xf8>)
 800c204:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c208:	0800c2db 	.word	0x0800c2db
 800c20c:	0800c1e3 	.word	0x0800c1e3
 800c210:	0800c1e3 	.word	0x0800c1e3
 800c214:	0800c335 	.word	0x0800c335
 800c218:	0800c1e3 	.word	0x0800c1e3
 800c21c:	0800c1e3 	.word	0x0800c1e3
 800c220:	0800c1e3 	.word	0x0800c1e3
 800c224:	0800c1e3 	.word	0x0800c1e3
 800c228:	0800c1e3 	.word	0x0800c1e3
 800c22c:	0800c1e3 	.word	0x0800c1e3
 800c230:	0800c1e3 	.word	0x0800c1e3
 800c234:	0800c34b 	.word	0x0800c34b
 800c238:	0800c331 	.word	0x0800c331
 800c23c:	0800c293 	.word	0x0800c293
 800c240:	0800c293 	.word	0x0800c293
 800c244:	0800c293 	.word	0x0800c293
 800c248:	0800c1e3 	.word	0x0800c1e3
 800c24c:	0800c2ed 	.word	0x0800c2ed
 800c250:	0800c1e3 	.word	0x0800c1e3
 800c254:	0800c1e3 	.word	0x0800c1e3
 800c258:	0800c1e3 	.word	0x0800c1e3
 800c25c:	0800c1e3 	.word	0x0800c1e3
 800c260:	0800c35b 	.word	0x0800c35b
 800c264:	0800c2f5 	.word	0x0800c2f5
 800c268:	0800c2d3 	.word	0x0800c2d3
 800c26c:	0800c1e3 	.word	0x0800c1e3
 800c270:	0800c1e3 	.word	0x0800c1e3
 800c274:	0800c357 	.word	0x0800c357
 800c278:	0800c1e3 	.word	0x0800c1e3
 800c27c:	0800c331 	.word	0x0800c331
 800c280:	0800c1e3 	.word	0x0800c1e3
 800c284:	0800c1e3 	.word	0x0800c1e3
 800c288:	0800c2db 	.word	0x0800c2db
 800c28c:	3b45      	subs	r3, #69	@ 0x45
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d8a7      	bhi.n	800c1e2 <__ssvfiscanf_r+0xd2>
 800c292:	2305      	movs	r3, #5
 800c294:	e031      	b.n	800c2fa <__ssvfiscanf_r+0x1ea>
 800c296:	6863      	ldr	r3, [r4, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	dd0d      	ble.n	800c2b8 <__ssvfiscanf_r+0x1a8>
 800c29c:	6823      	ldr	r3, [r4, #0]
 800c29e:	781a      	ldrb	r2, [r3, #0]
 800c2a0:	454a      	cmp	r2, r9
 800c2a2:	f040 80a6 	bne.w	800c3f2 <__ssvfiscanf_r+0x2e2>
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	6862      	ldr	r2, [r4, #4]
 800c2aa:	6023      	str	r3, [r4, #0]
 800c2ac:	3a01      	subs	r2, #1
 800c2ae:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c2b0:	6062      	str	r2, [r4, #4]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	9345      	str	r3, [sp, #276]	@ 0x114
 800c2b6:	e752      	b.n	800c15e <__ssvfiscanf_r+0x4e>
 800c2b8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	4630      	mov	r0, r6
 800c2be:	4798      	blx	r3
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d0eb      	beq.n	800c29c <__ssvfiscanf_r+0x18c>
 800c2c4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	f040 808b 	bne.w	800c3e2 <__ssvfiscanf_r+0x2d2>
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	e08b      	b.n	800c3ea <__ssvfiscanf_r+0x2da>
 800c2d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c2d4:	f042 0220 	orr.w	r2, r2, #32
 800c2d8:	9241      	str	r2, [sp, #260]	@ 0x104
 800c2da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c2dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2e0:	9241      	str	r2, [sp, #260]	@ 0x104
 800c2e2:	2210      	movs	r2, #16
 800c2e4:	2b6e      	cmp	r3, #110	@ 0x6e
 800c2e6:	9242      	str	r2, [sp, #264]	@ 0x108
 800c2e8:	d902      	bls.n	800c2f0 <__ssvfiscanf_r+0x1e0>
 800c2ea:	e005      	b.n	800c2f8 <__ssvfiscanf_r+0x1e8>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9342      	str	r3, [sp, #264]	@ 0x108
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e002      	b.n	800c2fa <__ssvfiscanf_r+0x1ea>
 800c2f4:	2308      	movs	r3, #8
 800c2f6:	9342      	str	r3, [sp, #264]	@ 0x108
 800c2f8:	2304      	movs	r3, #4
 800c2fa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c2fc:	6863      	ldr	r3, [r4, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	dd3a      	ble.n	800c378 <__ssvfiscanf_r+0x268>
 800c302:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c304:	0659      	lsls	r1, r3, #25
 800c306:	d404      	bmi.n	800c312 <__ssvfiscanf_r+0x202>
 800c308:	6823      	ldr	r3, [r4, #0]
 800c30a:	781a      	ldrb	r2, [r3, #0]
 800c30c:	5cba      	ldrb	r2, [r7, r2]
 800c30e:	0712      	lsls	r2, r2, #28
 800c310:	d439      	bmi.n	800c386 <__ssvfiscanf_r+0x276>
 800c312:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c314:	2b02      	cmp	r3, #2
 800c316:	dc48      	bgt.n	800c3aa <__ssvfiscanf_r+0x29a>
 800c318:	466b      	mov	r3, sp
 800c31a:	4622      	mov	r2, r4
 800c31c:	a941      	add	r1, sp, #260	@ 0x104
 800c31e:	4630      	mov	r0, r6
 800c320:	f000 f86c 	bl	800c3fc <_scanf_chars>
 800c324:	2801      	cmp	r0, #1
 800c326:	d064      	beq.n	800c3f2 <__ssvfiscanf_r+0x2e2>
 800c328:	2802      	cmp	r0, #2
 800c32a:	f47f af18 	bne.w	800c15e <__ssvfiscanf_r+0x4e>
 800c32e:	e7c9      	b.n	800c2c4 <__ssvfiscanf_r+0x1b4>
 800c330:	220a      	movs	r2, #10
 800c332:	e7d7      	b.n	800c2e4 <__ssvfiscanf_r+0x1d4>
 800c334:	4629      	mov	r1, r5
 800c336:	4640      	mov	r0, r8
 800c338:	f000 fa58 	bl	800c7ec <__sccl>
 800c33c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c33e:	4605      	mov	r5, r0
 800c340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c344:	9341      	str	r3, [sp, #260]	@ 0x104
 800c346:	2301      	movs	r3, #1
 800c348:	e7d7      	b.n	800c2fa <__ssvfiscanf_r+0x1ea>
 800c34a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c34c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c350:	9341      	str	r3, [sp, #260]	@ 0x104
 800c352:	2300      	movs	r3, #0
 800c354:	e7d1      	b.n	800c2fa <__ssvfiscanf_r+0x1ea>
 800c356:	2302      	movs	r3, #2
 800c358:	e7cf      	b.n	800c2fa <__ssvfiscanf_r+0x1ea>
 800c35a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c35c:	06c3      	lsls	r3, r0, #27
 800c35e:	f53f aefe 	bmi.w	800c15e <__ssvfiscanf_r+0x4e>
 800c362:	9b00      	ldr	r3, [sp, #0]
 800c364:	07c0      	lsls	r0, r0, #31
 800c366:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c368:	f103 0104 	add.w	r1, r3, #4
 800c36c:	9100      	str	r1, [sp, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	bf4c      	ite	mi
 800c372:	801a      	strhmi	r2, [r3, #0]
 800c374:	601a      	strpl	r2, [r3, #0]
 800c376:	e6f2      	b.n	800c15e <__ssvfiscanf_r+0x4e>
 800c378:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c37a:	4621      	mov	r1, r4
 800c37c:	4630      	mov	r0, r6
 800c37e:	4798      	blx	r3
 800c380:	2800      	cmp	r0, #0
 800c382:	d0be      	beq.n	800c302 <__ssvfiscanf_r+0x1f2>
 800c384:	e79e      	b.n	800c2c4 <__ssvfiscanf_r+0x1b4>
 800c386:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c388:	3201      	adds	r2, #1
 800c38a:	9245      	str	r2, [sp, #276]	@ 0x114
 800c38c:	6862      	ldr	r2, [r4, #4]
 800c38e:	3a01      	subs	r2, #1
 800c390:	2a00      	cmp	r2, #0
 800c392:	6062      	str	r2, [r4, #4]
 800c394:	dd02      	ble.n	800c39c <__ssvfiscanf_r+0x28c>
 800c396:	3301      	adds	r3, #1
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	e7b5      	b.n	800c308 <__ssvfiscanf_r+0x1f8>
 800c39c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c39e:	4621      	mov	r1, r4
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	4798      	blx	r3
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d0af      	beq.n	800c308 <__ssvfiscanf_r+0x1f8>
 800c3a8:	e78c      	b.n	800c2c4 <__ssvfiscanf_r+0x1b4>
 800c3aa:	2b04      	cmp	r3, #4
 800c3ac:	dc0e      	bgt.n	800c3cc <__ssvfiscanf_r+0x2bc>
 800c3ae:	466b      	mov	r3, sp
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	a941      	add	r1, sp, #260	@ 0x104
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f000 f87b 	bl	800c4b0 <_scanf_i>
 800c3ba:	e7b3      	b.n	800c324 <__ssvfiscanf_r+0x214>
 800c3bc:	0800dbc9 	.word	0x0800dbc9
 800c3c0:	0800c05d 	.word	0x0800c05d
 800c3c4:	0800c0d7 	.word	0x0800c0d7
 800c3c8:	0800d9ad 	.word	0x0800d9ad
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f8 <__ssvfiscanf_r+0x2e8>)
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f43f aec5 	beq.w	800c15e <__ssvfiscanf_r+0x4e>
 800c3d4:	466b      	mov	r3, sp
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	a941      	add	r1, sp, #260	@ 0x104
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f7fc fde0 	bl	8008fa0 <_scanf_float>
 800c3e0:	e7a0      	b.n	800c324 <__ssvfiscanf_r+0x214>
 800c3e2:	89a3      	ldrh	r3, [r4, #12]
 800c3e4:	065b      	lsls	r3, r3, #25
 800c3e6:	f53f af71 	bmi.w	800c2cc <__ssvfiscanf_r+0x1bc>
 800c3ea:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c3f4:	e7f9      	b.n	800c3ea <__ssvfiscanf_r+0x2da>
 800c3f6:	bf00      	nop
 800c3f8:	08008fa1 	.word	0x08008fa1

0800c3fc <_scanf_chars>:
 800c3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c400:	4615      	mov	r5, r2
 800c402:	688a      	ldr	r2, [r1, #8]
 800c404:	4680      	mov	r8, r0
 800c406:	460c      	mov	r4, r1
 800c408:	b932      	cbnz	r2, 800c418 <_scanf_chars+0x1c>
 800c40a:	698a      	ldr	r2, [r1, #24]
 800c40c:	2a00      	cmp	r2, #0
 800c40e:	bf14      	ite	ne
 800c410:	f04f 32ff 	movne.w	r2, #4294967295
 800c414:	2201      	moveq	r2, #1
 800c416:	608a      	str	r2, [r1, #8]
 800c418:	6822      	ldr	r2, [r4, #0]
 800c41a:	2700      	movs	r7, #0
 800c41c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800c4ac <_scanf_chars+0xb0>
 800c420:	06d1      	lsls	r1, r2, #27
 800c422:	bf5f      	itttt	pl
 800c424:	681a      	ldrpl	r2, [r3, #0]
 800c426:	1d11      	addpl	r1, r2, #4
 800c428:	6019      	strpl	r1, [r3, #0]
 800c42a:	6816      	ldrpl	r6, [r2, #0]
 800c42c:	69a0      	ldr	r0, [r4, #24]
 800c42e:	b188      	cbz	r0, 800c454 <_scanf_chars+0x58>
 800c430:	2801      	cmp	r0, #1
 800c432:	d107      	bne.n	800c444 <_scanf_chars+0x48>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	781a      	ldrb	r2, [r3, #0]
 800c438:	6963      	ldr	r3, [r4, #20]
 800c43a:	5c9b      	ldrb	r3, [r3, r2]
 800c43c:	b953      	cbnz	r3, 800c454 <_scanf_chars+0x58>
 800c43e:	2f00      	cmp	r7, #0
 800c440:	d031      	beq.n	800c4a6 <_scanf_chars+0xaa>
 800c442:	e022      	b.n	800c48a <_scanf_chars+0x8e>
 800c444:	2802      	cmp	r0, #2
 800c446:	d120      	bne.n	800c48a <_scanf_chars+0x8e>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c450:	071b      	lsls	r3, r3, #28
 800c452:	d41a      	bmi.n	800c48a <_scanf_chars+0x8e>
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	3701      	adds	r7, #1
 800c458:	06da      	lsls	r2, r3, #27
 800c45a:	bf5e      	ittt	pl
 800c45c:	682b      	ldrpl	r3, [r5, #0]
 800c45e:	781b      	ldrbpl	r3, [r3, #0]
 800c460:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c464:	682a      	ldr	r2, [r5, #0]
 800c466:	686b      	ldr	r3, [r5, #4]
 800c468:	3201      	adds	r2, #1
 800c46a:	3b01      	subs	r3, #1
 800c46c:	602a      	str	r2, [r5, #0]
 800c46e:	68a2      	ldr	r2, [r4, #8]
 800c470:	606b      	str	r3, [r5, #4]
 800c472:	3a01      	subs	r2, #1
 800c474:	60a2      	str	r2, [r4, #8]
 800c476:	b142      	cbz	r2, 800c48a <_scanf_chars+0x8e>
 800c478:	2b00      	cmp	r3, #0
 800c47a:	dcd7      	bgt.n	800c42c <_scanf_chars+0x30>
 800c47c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c480:	4629      	mov	r1, r5
 800c482:	4640      	mov	r0, r8
 800c484:	4798      	blx	r3
 800c486:	2800      	cmp	r0, #0
 800c488:	d0d0      	beq.n	800c42c <_scanf_chars+0x30>
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	f013 0310 	ands.w	r3, r3, #16
 800c490:	d105      	bne.n	800c49e <_scanf_chars+0xa2>
 800c492:	68e2      	ldr	r2, [r4, #12]
 800c494:	3201      	adds	r2, #1
 800c496:	60e2      	str	r2, [r4, #12]
 800c498:	69a2      	ldr	r2, [r4, #24]
 800c49a:	b102      	cbz	r2, 800c49e <_scanf_chars+0xa2>
 800c49c:	7033      	strb	r3, [r6, #0]
 800c49e:	6923      	ldr	r3, [r4, #16]
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	443b      	add	r3, r7
 800c4a4:	6123      	str	r3, [r4, #16]
 800c4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4aa:	bf00      	nop
 800c4ac:	0800dbc9 	.word	0x0800dbc9

0800c4b0 <_scanf_i>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	4698      	mov	r8, r3
 800c4b6:	b087      	sub	sp, #28
 800c4b8:	4b72      	ldr	r3, [pc, #456]	@ (800c684 <_scanf_i+0x1d4>)
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	4682      	mov	sl, r0
 800c4be:	4616      	mov	r6, r2
 800c4c0:	4627      	mov	r7, r4
 800c4c2:	f04f 0b00 	mov.w	fp, #0
 800c4c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4ca:	ab03      	add	r3, sp, #12
 800c4cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c4d0:	4b6d      	ldr	r3, [pc, #436]	@ (800c688 <_scanf_i+0x1d8>)
 800c4d2:	69a1      	ldr	r1, [r4, #24]
 800c4d4:	4a6d      	ldr	r2, [pc, #436]	@ (800c68c <_scanf_i+0x1dc>)
 800c4d6:	2903      	cmp	r1, #3
 800c4d8:	bf08      	it	eq
 800c4da:	461a      	moveq	r2, r3
 800c4dc:	68a3      	ldr	r3, [r4, #8]
 800c4de:	9201      	str	r2, [sp, #4]
 800c4e0:	1e5a      	subs	r2, r3, #1
 800c4e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c4e6:	bf89      	itett	hi
 800c4e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c4ec:	f04f 0900 	movls.w	r9, #0
 800c4f0:	eb03 0905 	addhi.w	r9, r3, r5
 800c4f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c4f8:	bf88      	it	hi
 800c4fa:	60a3      	strhi	r3, [r4, #8]
 800c4fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c500:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c504:	463d      	mov	r5, r7
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	6831      	ldr	r1, [r6, #0]
 800c50a:	ab03      	add	r3, sp, #12
 800c50c:	2202      	movs	r2, #2
 800c50e:	7809      	ldrb	r1, [r1, #0]
 800c510:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c514:	f7fd f997 	bl	8009846 <memchr>
 800c518:	b328      	cbz	r0, 800c566 <_scanf_i+0xb6>
 800c51a:	f1bb 0f01 	cmp.w	fp, #1
 800c51e:	d159      	bne.n	800c5d4 <_scanf_i+0x124>
 800c520:	6862      	ldr	r2, [r4, #4]
 800c522:	b92a      	cbnz	r2, 800c530 <_scanf_i+0x80>
 800c524:	6822      	ldr	r2, [r4, #0]
 800c526:	2108      	movs	r1, #8
 800c528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c52c:	6061      	str	r1, [r4, #4]
 800c52e:	6022      	str	r2, [r4, #0]
 800c530:	6822      	ldr	r2, [r4, #0]
 800c532:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c536:	6022      	str	r2, [r4, #0]
 800c538:	68a2      	ldr	r2, [r4, #8]
 800c53a:	1e51      	subs	r1, r2, #1
 800c53c:	60a1      	str	r1, [r4, #8]
 800c53e:	b192      	cbz	r2, 800c566 <_scanf_i+0xb6>
 800c540:	6832      	ldr	r2, [r6, #0]
 800c542:	1c51      	adds	r1, r2, #1
 800c544:	6031      	str	r1, [r6, #0]
 800c546:	7812      	ldrb	r2, [r2, #0]
 800c548:	f805 2b01 	strb.w	r2, [r5], #1
 800c54c:	6872      	ldr	r2, [r6, #4]
 800c54e:	3a01      	subs	r2, #1
 800c550:	2a00      	cmp	r2, #0
 800c552:	6072      	str	r2, [r6, #4]
 800c554:	dc07      	bgt.n	800c566 <_scanf_i+0xb6>
 800c556:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c55a:	4631      	mov	r1, r6
 800c55c:	4650      	mov	r0, sl
 800c55e:	4790      	blx	r2
 800c560:	2800      	cmp	r0, #0
 800c562:	f040 8085 	bne.w	800c670 <_scanf_i+0x1c0>
 800c566:	f10b 0b01 	add.w	fp, fp, #1
 800c56a:	f1bb 0f03 	cmp.w	fp, #3
 800c56e:	d1cb      	bne.n	800c508 <_scanf_i+0x58>
 800c570:	6863      	ldr	r3, [r4, #4]
 800c572:	b90b      	cbnz	r3, 800c578 <_scanf_i+0xc8>
 800c574:	230a      	movs	r3, #10
 800c576:	6063      	str	r3, [r4, #4]
 800c578:	6863      	ldr	r3, [r4, #4]
 800c57a:	f04f 0b00 	mov.w	fp, #0
 800c57e:	4944      	ldr	r1, [pc, #272]	@ (800c690 <_scanf_i+0x1e0>)
 800c580:	6960      	ldr	r0, [r4, #20]
 800c582:	1ac9      	subs	r1, r1, r3
 800c584:	f000 f932 	bl	800c7ec <__sccl>
 800c588:	68a3      	ldr	r3, [r4, #8]
 800c58a:	6822      	ldr	r2, [r4, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d03d      	beq.n	800c60c <_scanf_i+0x15c>
 800c590:	6831      	ldr	r1, [r6, #0]
 800c592:	6960      	ldr	r0, [r4, #20]
 800c594:	f891 c000 	ldrb.w	ip, [r1]
 800c598:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d035      	beq.n	800c60c <_scanf_i+0x15c>
 800c5a0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c5a4:	d124      	bne.n	800c5f0 <_scanf_i+0x140>
 800c5a6:	0510      	lsls	r0, r2, #20
 800c5a8:	d522      	bpl.n	800c5f0 <_scanf_i+0x140>
 800c5aa:	f10b 0b01 	add.w	fp, fp, #1
 800c5ae:	f1b9 0f00 	cmp.w	r9, #0
 800c5b2:	d003      	beq.n	800c5bc <_scanf_i+0x10c>
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	f109 39ff 	add.w	r9, r9, #4294967295
 800c5ba:	60a3      	str	r3, [r4, #8]
 800c5bc:	6873      	ldr	r3, [r6, #4]
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	6073      	str	r3, [r6, #4]
 800c5c4:	dd1b      	ble.n	800c5fe <_scanf_i+0x14e>
 800c5c6:	6833      	ldr	r3, [r6, #0]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	6033      	str	r3, [r6, #0]
 800c5cc:	68a3      	ldr	r3, [r4, #8]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	60a3      	str	r3, [r4, #8]
 800c5d2:	e7d9      	b.n	800c588 <_scanf_i+0xd8>
 800c5d4:	f1bb 0f02 	cmp.w	fp, #2
 800c5d8:	d1ae      	bne.n	800c538 <_scanf_i+0x88>
 800c5da:	6822      	ldr	r2, [r4, #0]
 800c5dc:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c5e0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c5e4:	d1c4      	bne.n	800c570 <_scanf_i+0xc0>
 800c5e6:	2110      	movs	r1, #16
 800c5e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c5ec:	6061      	str	r1, [r4, #4]
 800c5ee:	e7a2      	b.n	800c536 <_scanf_i+0x86>
 800c5f0:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c5f4:	6022      	str	r2, [r4, #0]
 800c5f6:	780b      	ldrb	r3, [r1, #0]
 800c5f8:	f805 3b01 	strb.w	r3, [r5], #1
 800c5fc:	e7de      	b.n	800c5bc <_scanf_i+0x10c>
 800c5fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c602:	4631      	mov	r1, r6
 800c604:	4650      	mov	r0, sl
 800c606:	4798      	blx	r3
 800c608:	2800      	cmp	r0, #0
 800c60a:	d0df      	beq.n	800c5cc <_scanf_i+0x11c>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	05d9      	lsls	r1, r3, #23
 800c610:	d50d      	bpl.n	800c62e <_scanf_i+0x17e>
 800c612:	42bd      	cmp	r5, r7
 800c614:	d909      	bls.n	800c62a <_scanf_i+0x17a>
 800c616:	f105 39ff 	add.w	r9, r5, #4294967295
 800c61a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c61e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c622:	4632      	mov	r2, r6
 800c624:	464d      	mov	r5, r9
 800c626:	4650      	mov	r0, sl
 800c628:	4798      	blx	r3
 800c62a:	42bd      	cmp	r5, r7
 800c62c:	d028      	beq.n	800c680 <_scanf_i+0x1d0>
 800c62e:	6822      	ldr	r2, [r4, #0]
 800c630:	f012 0210 	ands.w	r2, r2, #16
 800c634:	d113      	bne.n	800c65e <_scanf_i+0x1ae>
 800c636:	702a      	strb	r2, [r5, #0]
 800c638:	4639      	mov	r1, r7
 800c63a:	6863      	ldr	r3, [r4, #4]
 800c63c:	4650      	mov	r0, sl
 800c63e:	9e01      	ldr	r6, [sp, #4]
 800c640:	47b0      	blx	r6
 800c642:	f8d8 3000 	ldr.w	r3, [r8]
 800c646:	6821      	ldr	r1, [r4, #0]
 800c648:	1d1a      	adds	r2, r3, #4
 800c64a:	f011 0f20 	tst.w	r1, #32
 800c64e:	f8c8 2000 	str.w	r2, [r8]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	d00f      	beq.n	800c676 <_scanf_i+0x1c6>
 800c656:	6018      	str	r0, [r3, #0]
 800c658:	68e3      	ldr	r3, [r4, #12]
 800c65a:	3301      	adds	r3, #1
 800c65c:	60e3      	str	r3, [r4, #12]
 800c65e:	1bed      	subs	r5, r5, r7
 800c660:	6923      	ldr	r3, [r4, #16]
 800c662:	2000      	movs	r0, #0
 800c664:	445d      	add	r5, fp
 800c666:	442b      	add	r3, r5
 800c668:	6123      	str	r3, [r4, #16]
 800c66a:	b007      	add	sp, #28
 800c66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c670:	f04f 0b00 	mov.w	fp, #0
 800c674:	e7ca      	b.n	800c60c <_scanf_i+0x15c>
 800c676:	07ca      	lsls	r2, r1, #31
 800c678:	bf4c      	ite	mi
 800c67a:	8018      	strhmi	r0, [r3, #0]
 800c67c:	6018      	strpl	r0, [r3, #0]
 800c67e:	e7eb      	b.n	800c658 <_scanf_i+0x1a8>
 800c680:	2001      	movs	r0, #1
 800c682:	e7f2      	b.n	800c66a <_scanf_i+0x1ba>
 800c684:	0800d7fc 	.word	0x0800d7fc
 800c688:	0800bda9 	.word	0x0800bda9
 800c68c:	0800d17d 	.word	0x0800d17d
 800c690:	0800d9c8 	.word	0x0800d9c8

0800c694 <__sflush_r>:
 800c694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c69c:	0716      	lsls	r6, r2, #28
 800c69e:	4605      	mov	r5, r0
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	d454      	bmi.n	800c74e <__sflush_r+0xba>
 800c6a4:	684b      	ldr	r3, [r1, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	dc02      	bgt.n	800c6b0 <__sflush_r+0x1c>
 800c6aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	dd48      	ble.n	800c742 <__sflush_r+0xae>
 800c6b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6b2:	2e00      	cmp	r6, #0
 800c6b4:	d045      	beq.n	800c742 <__sflush_r+0xae>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6bc:	682f      	ldr	r7, [r5, #0]
 800c6be:	6a21      	ldr	r1, [r4, #32]
 800c6c0:	602b      	str	r3, [r5, #0]
 800c6c2:	d030      	beq.n	800c726 <__sflush_r+0x92>
 800c6c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6c6:	89a3      	ldrh	r3, [r4, #12]
 800c6c8:	0759      	lsls	r1, r3, #29
 800c6ca:	d505      	bpl.n	800c6d8 <__sflush_r+0x44>
 800c6cc:	6863      	ldr	r3, [r4, #4]
 800c6ce:	1ad2      	subs	r2, r2, r3
 800c6d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6d2:	b10b      	cbz	r3, 800c6d8 <__sflush_r+0x44>
 800c6d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6d6:	1ad2      	subs	r2, r2, r3
 800c6d8:	2300      	movs	r3, #0
 800c6da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6dc:	6a21      	ldr	r1, [r4, #32]
 800c6de:	4628      	mov	r0, r5
 800c6e0:	47b0      	blx	r6
 800c6e2:	1c43      	adds	r3, r0, #1
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	d106      	bne.n	800c6f6 <__sflush_r+0x62>
 800c6e8:	6829      	ldr	r1, [r5, #0]
 800c6ea:	291d      	cmp	r1, #29
 800c6ec:	d82b      	bhi.n	800c746 <__sflush_r+0xb2>
 800c6ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c798 <__sflush_r+0x104>)
 800c6f0:	40ca      	lsrs	r2, r1
 800c6f2:	07d6      	lsls	r6, r2, #31
 800c6f4:	d527      	bpl.n	800c746 <__sflush_r+0xb2>
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	04d9      	lsls	r1, r3, #19
 800c6fa:	6062      	str	r2, [r4, #4]
 800c6fc:	6922      	ldr	r2, [r4, #16]
 800c6fe:	6022      	str	r2, [r4, #0]
 800c700:	d504      	bpl.n	800c70c <__sflush_r+0x78>
 800c702:	1c42      	adds	r2, r0, #1
 800c704:	d101      	bne.n	800c70a <__sflush_r+0x76>
 800c706:	682b      	ldr	r3, [r5, #0]
 800c708:	b903      	cbnz	r3, 800c70c <__sflush_r+0x78>
 800c70a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c70e:	602f      	str	r7, [r5, #0]
 800c710:	b1b9      	cbz	r1, 800c742 <__sflush_r+0xae>
 800c712:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c716:	4299      	cmp	r1, r3
 800c718:	d002      	beq.n	800c720 <__sflush_r+0x8c>
 800c71a:	4628      	mov	r0, r5
 800c71c:	f7fd ff0a 	bl	800a534 <_free_r>
 800c720:	2300      	movs	r3, #0
 800c722:	6363      	str	r3, [r4, #52]	@ 0x34
 800c724:	e00d      	b.n	800c742 <__sflush_r+0xae>
 800c726:	2301      	movs	r3, #1
 800c728:	4628      	mov	r0, r5
 800c72a:	47b0      	blx	r6
 800c72c:	4602      	mov	r2, r0
 800c72e:	1c50      	adds	r0, r2, #1
 800c730:	d1c9      	bne.n	800c6c6 <__sflush_r+0x32>
 800c732:	682b      	ldr	r3, [r5, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d0c6      	beq.n	800c6c6 <__sflush_r+0x32>
 800c738:	2b1d      	cmp	r3, #29
 800c73a:	d001      	beq.n	800c740 <__sflush_r+0xac>
 800c73c:	2b16      	cmp	r3, #22
 800c73e:	d11d      	bne.n	800c77c <__sflush_r+0xe8>
 800c740:	602f      	str	r7, [r5, #0]
 800c742:	2000      	movs	r0, #0
 800c744:	e021      	b.n	800c78a <__sflush_r+0xf6>
 800c746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c74a:	b21b      	sxth	r3, r3
 800c74c:	e01a      	b.n	800c784 <__sflush_r+0xf0>
 800c74e:	690f      	ldr	r7, [r1, #16]
 800c750:	2f00      	cmp	r7, #0
 800c752:	d0f6      	beq.n	800c742 <__sflush_r+0xae>
 800c754:	0793      	lsls	r3, r2, #30
 800c756:	680e      	ldr	r6, [r1, #0]
 800c758:	600f      	str	r7, [r1, #0]
 800c75a:	bf0c      	ite	eq
 800c75c:	694b      	ldreq	r3, [r1, #20]
 800c75e:	2300      	movne	r3, #0
 800c760:	eba6 0807 	sub.w	r8, r6, r7
 800c764:	608b      	str	r3, [r1, #8]
 800c766:	f1b8 0f00 	cmp.w	r8, #0
 800c76a:	ddea      	ble.n	800c742 <__sflush_r+0xae>
 800c76c:	4643      	mov	r3, r8
 800c76e:	463a      	mov	r2, r7
 800c770:	6a21      	ldr	r1, [r4, #32]
 800c772:	4628      	mov	r0, r5
 800c774:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c776:	47b0      	blx	r6
 800c778:	2800      	cmp	r0, #0
 800c77a:	dc08      	bgt.n	800c78e <__sflush_r+0xfa>
 800c77c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c784:	f04f 30ff 	mov.w	r0, #4294967295
 800c788:	81a3      	strh	r3, [r4, #12]
 800c78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c78e:	4407      	add	r7, r0
 800c790:	eba8 0800 	sub.w	r8, r8, r0
 800c794:	e7e7      	b.n	800c766 <__sflush_r+0xd2>
 800c796:	bf00      	nop
 800c798:	20400001 	.word	0x20400001

0800c79c <_fflush_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	690b      	ldr	r3, [r1, #16]
 800c7a0:	4605      	mov	r5, r0
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	b913      	cbnz	r3, 800c7ac <_fflush_r+0x10>
 800c7a6:	2500      	movs	r5, #0
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	bd38      	pop	{r3, r4, r5, pc}
 800c7ac:	b118      	cbz	r0, 800c7b6 <_fflush_r+0x1a>
 800c7ae:	6a03      	ldr	r3, [r0, #32]
 800c7b0:	b90b      	cbnz	r3, 800c7b6 <_fflush_r+0x1a>
 800c7b2:	f7fc fe8f 	bl	80094d4 <__sinit>
 800c7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d0f3      	beq.n	800c7a6 <_fflush_r+0xa>
 800c7be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7c0:	07d0      	lsls	r0, r2, #31
 800c7c2:	d404      	bmi.n	800c7ce <_fflush_r+0x32>
 800c7c4:	0599      	lsls	r1, r3, #22
 800c7c6:	d402      	bmi.n	800c7ce <_fflush_r+0x32>
 800c7c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7ca:	f7fd f83a 	bl	8009842 <__retarget_lock_acquire_recursive>
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	4621      	mov	r1, r4
 800c7d2:	f7ff ff5f 	bl	800c694 <__sflush_r>
 800c7d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7d8:	4605      	mov	r5, r0
 800c7da:	07da      	lsls	r2, r3, #31
 800c7dc:	d4e4      	bmi.n	800c7a8 <_fflush_r+0xc>
 800c7de:	89a3      	ldrh	r3, [r4, #12]
 800c7e0:	059b      	lsls	r3, r3, #22
 800c7e2:	d4e1      	bmi.n	800c7a8 <_fflush_r+0xc>
 800c7e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7e6:	f7fd f82d 	bl	8009844 <__retarget_lock_release_recursive>
 800c7ea:	e7dd      	b.n	800c7a8 <_fflush_r+0xc>

0800c7ec <__sccl>:
 800c7ec:	b570      	push	{r4, r5, r6, lr}
 800c7ee:	780b      	ldrb	r3, [r1, #0]
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	3801      	subs	r0, #1
 800c7f4:	2b5e      	cmp	r3, #94	@ 0x5e
 800c7f6:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c7fa:	bf13      	iteet	ne
 800c7fc:	1c4a      	addne	r2, r1, #1
 800c7fe:	1c8a      	addeq	r2, r1, #2
 800c800:	784b      	ldrbeq	r3, [r1, #1]
 800c802:	2100      	movne	r1, #0
 800c804:	bf08      	it	eq
 800c806:	2101      	moveq	r1, #1
 800c808:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c80c:	42a8      	cmp	r0, r5
 800c80e:	d1fb      	bne.n	800c808 <__sccl+0x1c>
 800c810:	b90b      	cbnz	r3, 800c816 <__sccl+0x2a>
 800c812:	1e50      	subs	r0, r2, #1
 800c814:	bd70      	pop	{r4, r5, r6, pc}
 800c816:	f081 0101 	eor.w	r1, r1, #1
 800c81a:	4610      	mov	r0, r2
 800c81c:	54e1      	strb	r1, [r4, r3]
 800c81e:	4602      	mov	r2, r0
 800c820:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c824:	2d2d      	cmp	r5, #45	@ 0x2d
 800c826:	d005      	beq.n	800c834 <__sccl+0x48>
 800c828:	2d5d      	cmp	r5, #93	@ 0x5d
 800c82a:	d016      	beq.n	800c85a <__sccl+0x6e>
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	d0f1      	beq.n	800c814 <__sccl+0x28>
 800c830:	462b      	mov	r3, r5
 800c832:	e7f2      	b.n	800c81a <__sccl+0x2e>
 800c834:	7846      	ldrb	r6, [r0, #1]
 800c836:	2e5d      	cmp	r6, #93	@ 0x5d
 800c838:	d0fa      	beq.n	800c830 <__sccl+0x44>
 800c83a:	42b3      	cmp	r3, r6
 800c83c:	dcf8      	bgt.n	800c830 <__sccl+0x44>
 800c83e:	3002      	adds	r0, #2
 800c840:	461a      	mov	r2, r3
 800c842:	3201      	adds	r2, #1
 800c844:	4296      	cmp	r6, r2
 800c846:	54a1      	strb	r1, [r4, r2]
 800c848:	dcfb      	bgt.n	800c842 <__sccl+0x56>
 800c84a:	1af2      	subs	r2, r6, r3
 800c84c:	1c5d      	adds	r5, r3, #1
 800c84e:	3a01      	subs	r2, #1
 800c850:	42b3      	cmp	r3, r6
 800c852:	bfa8      	it	ge
 800c854:	2200      	movge	r2, #0
 800c856:	18ab      	adds	r3, r5, r2
 800c858:	e7e1      	b.n	800c81e <__sccl+0x32>
 800c85a:	4610      	mov	r0, r2
 800c85c:	e7da      	b.n	800c814 <__sccl+0x28>

0800c85e <__submore>:
 800c85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c862:	460c      	mov	r4, r1
 800c864:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c866:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c86a:	4299      	cmp	r1, r3
 800c86c:	d11a      	bne.n	800c8a4 <__submore+0x46>
 800c86e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c872:	f7fd fed3 	bl	800a61c <_malloc_r>
 800c876:	b918      	cbnz	r0, 800c880 <__submore+0x22>
 800c878:	f04f 30ff 	mov.w	r0, #4294967295
 800c87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c884:	6360      	str	r0, [r4, #52]	@ 0x34
 800c886:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c88a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c88c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c890:	7083      	strb	r3, [r0, #2]
 800c892:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c896:	7043      	strb	r3, [r0, #1]
 800c898:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c89c:	7003      	strb	r3, [r0, #0]
 800c89e:	6020      	str	r0, [r4, #0]
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	e7eb      	b.n	800c87c <__submore+0x1e>
 800c8a4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c8a6:	0077      	lsls	r7, r6, #1
 800c8a8:	463a      	mov	r2, r7
 800c8aa:	f000 fbca 	bl	800d042 <_realloc_r>
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d0e1      	beq.n	800c878 <__submore+0x1a>
 800c8b4:	eb00 0806 	add.w	r8, r0, r6
 800c8b8:	4601      	mov	r1, r0
 800c8ba:	4632      	mov	r2, r6
 800c8bc:	4640      	mov	r0, r8
 800c8be:	f000 f82f 	bl	800c920 <memcpy>
 800c8c2:	f8c4 8000 	str.w	r8, [r4]
 800c8c6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c8ca:	e7e9      	b.n	800c8a0 <__submore+0x42>

0800c8cc <memmove>:
 800c8cc:	4288      	cmp	r0, r1
 800c8ce:	b510      	push	{r4, lr}
 800c8d0:	eb01 0402 	add.w	r4, r1, r2
 800c8d4:	d902      	bls.n	800c8dc <memmove+0x10>
 800c8d6:	4284      	cmp	r4, r0
 800c8d8:	4623      	mov	r3, r4
 800c8da:	d807      	bhi.n	800c8ec <memmove+0x20>
 800c8dc:	1e43      	subs	r3, r0, #1
 800c8de:	42a1      	cmp	r1, r4
 800c8e0:	d008      	beq.n	800c8f4 <memmove+0x28>
 800c8e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8ea:	e7f8      	b.n	800c8de <memmove+0x12>
 800c8ec:	4402      	add	r2, r0
 800c8ee:	4601      	mov	r1, r0
 800c8f0:	428a      	cmp	r2, r1
 800c8f2:	d100      	bne.n	800c8f6 <memmove+0x2a>
 800c8f4:	bd10      	pop	{r4, pc}
 800c8f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8fe:	e7f7      	b.n	800c8f0 <memmove+0x24>

0800c900 <_sbrk_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	2300      	movs	r3, #0
 800c904:	4d05      	ldr	r5, [pc, #20]	@ (800c91c <_sbrk_r+0x1c>)
 800c906:	4604      	mov	r4, r0
 800c908:	4608      	mov	r0, r1
 800c90a:	602b      	str	r3, [r5, #0]
 800c90c:	f7f5 fb4a 	bl	8001fa4 <_sbrk>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d102      	bne.n	800c91a <_sbrk_r+0x1a>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	b103      	cbz	r3, 800c91a <_sbrk_r+0x1a>
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	200004e8 	.word	0x200004e8

0800c920 <memcpy>:
 800c920:	440a      	add	r2, r1
 800c922:	1e43      	subs	r3, r0, #1
 800c924:	4291      	cmp	r1, r2
 800c926:	d100      	bne.n	800c92a <memcpy+0xa>
 800c928:	4770      	bx	lr
 800c92a:	b510      	push	{r4, lr}
 800c92c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c930:	4291      	cmp	r1, r2
 800c932:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c936:	d1f9      	bne.n	800c92c <memcpy+0xc>
 800c938:	bd10      	pop	{r4, pc}
 800c93a:	0000      	movs	r0, r0
 800c93c:	0000      	movs	r0, r0
	...

0800c940 <nan>:
 800c940:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c948 <nan+0x8>
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	00000000 	.word	0x00000000
 800c94c:	7ff80000 	.word	0x7ff80000

0800c950 <__assert_func>:
 800c950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c952:	4614      	mov	r4, r2
 800c954:	461a      	mov	r2, r3
 800c956:	4b09      	ldr	r3, [pc, #36]	@ (800c97c <__assert_func+0x2c>)
 800c958:	4605      	mov	r5, r0
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68d8      	ldr	r0, [r3, #12]
 800c95e:	b14c      	cbz	r4, 800c974 <__assert_func+0x24>
 800c960:	4b07      	ldr	r3, [pc, #28]	@ (800c980 <__assert_func+0x30>)
 800c962:	9100      	str	r1, [sp, #0]
 800c964:	4907      	ldr	r1, [pc, #28]	@ (800c984 <__assert_func+0x34>)
 800c966:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c96a:	462b      	mov	r3, r5
 800c96c:	f000 fc16 	bl	800d19c <fiprintf>
 800c970:	f000 fc26 	bl	800d1c0 <abort>
 800c974:	4b04      	ldr	r3, [pc, #16]	@ (800c988 <__assert_func+0x38>)
 800c976:	461c      	mov	r4, r3
 800c978:	e7f3      	b.n	800c962 <__assert_func+0x12>
 800c97a:	bf00      	nop
 800c97c:	20000018 	.word	0x20000018
 800c980:	0800d9db 	.word	0x0800d9db
 800c984:	0800d9e8 	.word	0x0800d9e8
 800c988:	0800da16 	.word	0x0800da16

0800c98c <_calloc_r>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	fba1 5402 	umull	r5, r4, r1, r2
 800c992:	b934      	cbnz	r4, 800c9a2 <_calloc_r+0x16>
 800c994:	4629      	mov	r1, r5
 800c996:	f7fd fe41 	bl	800a61c <_malloc_r>
 800c99a:	4606      	mov	r6, r0
 800c99c:	b928      	cbnz	r0, 800c9aa <_calloc_r+0x1e>
 800c99e:	4630      	mov	r0, r6
 800c9a0:	bd70      	pop	{r4, r5, r6, pc}
 800c9a2:	220c      	movs	r2, #12
 800c9a4:	2600      	movs	r6, #0
 800c9a6:	6002      	str	r2, [r0, #0]
 800c9a8:	e7f9      	b.n	800c99e <_calloc_r+0x12>
 800c9aa:	462a      	mov	r2, r5
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	f7fc fe90 	bl	80096d2 <memset>
 800c9b2:	e7f4      	b.n	800c99e <_calloc_r+0x12>

0800c9b4 <rshift>:
 800c9b4:	6903      	ldr	r3, [r0, #16]
 800c9b6:	114a      	asrs	r2, r1, #5
 800c9b8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c9bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9c0:	f100 0414 	add.w	r4, r0, #20
 800c9c4:	dd45      	ble.n	800ca52 <rshift+0x9e>
 800c9c6:	f011 011f 	ands.w	r1, r1, #31
 800c9ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c9ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c9d2:	d10c      	bne.n	800c9ee <rshift+0x3a>
 800c9d4:	f100 0710 	add.w	r7, r0, #16
 800c9d8:	4629      	mov	r1, r5
 800c9da:	42b1      	cmp	r1, r6
 800c9dc:	d334      	bcc.n	800ca48 <rshift+0x94>
 800c9de:	1a9b      	subs	r3, r3, r2
 800c9e0:	1eea      	subs	r2, r5, #3
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4296      	cmp	r6, r2
 800c9e6:	bf38      	it	cc
 800c9e8:	2300      	movcc	r3, #0
 800c9ea:	4423      	add	r3, r4
 800c9ec:	e015      	b.n	800ca1a <rshift+0x66>
 800c9ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c9f2:	f1c1 0820 	rsb	r8, r1, #32
 800c9f6:	f105 0e04 	add.w	lr, r5, #4
 800c9fa:	46a1      	mov	r9, r4
 800c9fc:	40cf      	lsrs	r7, r1
 800c9fe:	4576      	cmp	r6, lr
 800ca00:	46f4      	mov	ip, lr
 800ca02:	d815      	bhi.n	800ca30 <rshift+0x7c>
 800ca04:	1a9a      	subs	r2, r3, r2
 800ca06:	3501      	adds	r5, #1
 800ca08:	0092      	lsls	r2, r2, #2
 800ca0a:	3a04      	subs	r2, #4
 800ca0c:	42ae      	cmp	r6, r5
 800ca0e:	bf38      	it	cc
 800ca10:	2200      	movcc	r2, #0
 800ca12:	18a3      	adds	r3, r4, r2
 800ca14:	50a7      	str	r7, [r4, r2]
 800ca16:	b107      	cbz	r7, 800ca1a <rshift+0x66>
 800ca18:	3304      	adds	r3, #4
 800ca1a:	1b1a      	subs	r2, r3, r4
 800ca1c:	42a3      	cmp	r3, r4
 800ca1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca22:	bf08      	it	eq
 800ca24:	2300      	moveq	r3, #0
 800ca26:	6102      	str	r2, [r0, #16]
 800ca28:	bf08      	it	eq
 800ca2a:	6143      	streq	r3, [r0, #20]
 800ca2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca30:	f8dc c000 	ldr.w	ip, [ip]
 800ca34:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca38:	ea4c 0707 	orr.w	r7, ip, r7
 800ca3c:	f849 7b04 	str.w	r7, [r9], #4
 800ca40:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca44:	40cf      	lsrs	r7, r1
 800ca46:	e7da      	b.n	800c9fe <rshift+0x4a>
 800ca48:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca4c:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca50:	e7c3      	b.n	800c9da <rshift+0x26>
 800ca52:	4623      	mov	r3, r4
 800ca54:	e7e1      	b.n	800ca1a <rshift+0x66>

0800ca56 <__hexdig_fun>:
 800ca56:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ca5a:	2b09      	cmp	r3, #9
 800ca5c:	d802      	bhi.n	800ca64 <__hexdig_fun+0xe>
 800ca5e:	3820      	subs	r0, #32
 800ca60:	b2c0      	uxtb	r0, r0
 800ca62:	4770      	bx	lr
 800ca64:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ca68:	2b05      	cmp	r3, #5
 800ca6a:	d801      	bhi.n	800ca70 <__hexdig_fun+0x1a>
 800ca6c:	3847      	subs	r0, #71	@ 0x47
 800ca6e:	e7f7      	b.n	800ca60 <__hexdig_fun+0xa>
 800ca70:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ca74:	2b05      	cmp	r3, #5
 800ca76:	d801      	bhi.n	800ca7c <__hexdig_fun+0x26>
 800ca78:	3827      	subs	r0, #39	@ 0x27
 800ca7a:	e7f1      	b.n	800ca60 <__hexdig_fun+0xa>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	4770      	bx	lr

0800ca80 <__gethex>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	b085      	sub	sp, #20
 800ca86:	468a      	mov	sl, r1
 800ca88:	4690      	mov	r8, r2
 800ca8a:	9302      	str	r3, [sp, #8]
 800ca8c:	680b      	ldr	r3, [r1, #0]
 800ca8e:	9001      	str	r0, [sp, #4]
 800ca90:	1c9c      	adds	r4, r3, #2
 800ca92:	46a1      	mov	r9, r4
 800ca94:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ca98:	2830      	cmp	r0, #48	@ 0x30
 800ca9a:	d0fa      	beq.n	800ca92 <__gethex+0x12>
 800ca9c:	eba9 0303 	sub.w	r3, r9, r3
 800caa0:	f1a3 0b02 	sub.w	fp, r3, #2
 800caa4:	f7ff ffd7 	bl	800ca56 <__hexdig_fun>
 800caa8:	4605      	mov	r5, r0
 800caaa:	2800      	cmp	r0, #0
 800caac:	d166      	bne.n	800cb7c <__gethex+0xfc>
 800caae:	2201      	movs	r2, #1
 800cab0:	499e      	ldr	r1, [pc, #632]	@ (800cd2c <__gethex+0x2ac>)
 800cab2:	4648      	mov	r0, r9
 800cab4:	f7fc fe15 	bl	80096e2 <strncmp>
 800cab8:	4607      	mov	r7, r0
 800caba:	2800      	cmp	r0, #0
 800cabc:	d165      	bne.n	800cb8a <__gethex+0x10a>
 800cabe:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cac2:	4626      	mov	r6, r4
 800cac4:	f7ff ffc7 	bl	800ca56 <__hexdig_fun>
 800cac8:	2800      	cmp	r0, #0
 800caca:	d060      	beq.n	800cb8e <__gethex+0x10e>
 800cacc:	4623      	mov	r3, r4
 800cace:	7818      	ldrb	r0, [r3, #0]
 800cad0:	4699      	mov	r9, r3
 800cad2:	3301      	adds	r3, #1
 800cad4:	2830      	cmp	r0, #48	@ 0x30
 800cad6:	d0fa      	beq.n	800cace <__gethex+0x4e>
 800cad8:	f7ff ffbd 	bl	800ca56 <__hexdig_fun>
 800cadc:	fab0 f580 	clz	r5, r0
 800cae0:	f04f 0b01 	mov.w	fp, #1
 800cae4:	096d      	lsrs	r5, r5, #5
 800cae6:	464a      	mov	r2, r9
 800cae8:	4616      	mov	r6, r2
 800caea:	3201      	adds	r2, #1
 800caec:	7830      	ldrb	r0, [r6, #0]
 800caee:	f7ff ffb2 	bl	800ca56 <__hexdig_fun>
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d1f8      	bne.n	800cae8 <__gethex+0x68>
 800caf6:	2201      	movs	r2, #1
 800caf8:	498c      	ldr	r1, [pc, #560]	@ (800cd2c <__gethex+0x2ac>)
 800cafa:	4630      	mov	r0, r6
 800cafc:	f7fc fdf1 	bl	80096e2 <strncmp>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d13e      	bne.n	800cb82 <__gethex+0x102>
 800cb04:	b944      	cbnz	r4, 800cb18 <__gethex+0x98>
 800cb06:	1c74      	adds	r4, r6, #1
 800cb08:	4622      	mov	r2, r4
 800cb0a:	4616      	mov	r6, r2
 800cb0c:	3201      	adds	r2, #1
 800cb0e:	7830      	ldrb	r0, [r6, #0]
 800cb10:	f7ff ffa1 	bl	800ca56 <__hexdig_fun>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d1f8      	bne.n	800cb0a <__gethex+0x8a>
 800cb18:	1ba4      	subs	r4, r4, r6
 800cb1a:	00a7      	lsls	r7, r4, #2
 800cb1c:	7833      	ldrb	r3, [r6, #0]
 800cb1e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cb22:	2b50      	cmp	r3, #80	@ 0x50
 800cb24:	d13d      	bne.n	800cba2 <__gethex+0x122>
 800cb26:	7873      	ldrb	r3, [r6, #1]
 800cb28:	2b2b      	cmp	r3, #43	@ 0x2b
 800cb2a:	d032      	beq.n	800cb92 <__gethex+0x112>
 800cb2c:	2b2d      	cmp	r3, #45	@ 0x2d
 800cb2e:	d033      	beq.n	800cb98 <__gethex+0x118>
 800cb30:	1c71      	adds	r1, r6, #1
 800cb32:	2400      	movs	r4, #0
 800cb34:	7808      	ldrb	r0, [r1, #0]
 800cb36:	f7ff ff8e 	bl	800ca56 <__hexdig_fun>
 800cb3a:	1e43      	subs	r3, r0, #1
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2b18      	cmp	r3, #24
 800cb40:	d82f      	bhi.n	800cba2 <__gethex+0x122>
 800cb42:	f1a0 0210 	sub.w	r2, r0, #16
 800cb46:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb4a:	f7ff ff84 	bl	800ca56 <__hexdig_fun>
 800cb4e:	f100 3cff 	add.w	ip, r0, #4294967295
 800cb52:	230a      	movs	r3, #10
 800cb54:	fa5f fc8c 	uxtb.w	ip, ip
 800cb58:	f1bc 0f18 	cmp.w	ip, #24
 800cb5c:	d91e      	bls.n	800cb9c <__gethex+0x11c>
 800cb5e:	b104      	cbz	r4, 800cb62 <__gethex+0xe2>
 800cb60:	4252      	negs	r2, r2
 800cb62:	4417      	add	r7, r2
 800cb64:	f8ca 1000 	str.w	r1, [sl]
 800cb68:	b1ed      	cbz	r5, 800cba6 <__gethex+0x126>
 800cb6a:	f1bb 0f00 	cmp.w	fp, #0
 800cb6e:	bf0c      	ite	eq
 800cb70:	2506      	moveq	r5, #6
 800cb72:	2500      	movne	r5, #0
 800cb74:	4628      	mov	r0, r5
 800cb76:	b005      	add	sp, #20
 800cb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb7c:	2500      	movs	r5, #0
 800cb7e:	462c      	mov	r4, r5
 800cb80:	e7b1      	b.n	800cae6 <__gethex+0x66>
 800cb82:	2c00      	cmp	r4, #0
 800cb84:	d1c8      	bne.n	800cb18 <__gethex+0x98>
 800cb86:	4627      	mov	r7, r4
 800cb88:	e7c8      	b.n	800cb1c <__gethex+0x9c>
 800cb8a:	464e      	mov	r6, r9
 800cb8c:	462f      	mov	r7, r5
 800cb8e:	2501      	movs	r5, #1
 800cb90:	e7c4      	b.n	800cb1c <__gethex+0x9c>
 800cb92:	2400      	movs	r4, #0
 800cb94:	1cb1      	adds	r1, r6, #2
 800cb96:	e7cd      	b.n	800cb34 <__gethex+0xb4>
 800cb98:	2401      	movs	r4, #1
 800cb9a:	e7fb      	b.n	800cb94 <__gethex+0x114>
 800cb9c:	fb03 0002 	mla	r0, r3, r2, r0
 800cba0:	e7cf      	b.n	800cb42 <__gethex+0xc2>
 800cba2:	4631      	mov	r1, r6
 800cba4:	e7de      	b.n	800cb64 <__gethex+0xe4>
 800cba6:	eba6 0309 	sub.w	r3, r6, r9
 800cbaa:	4629      	mov	r1, r5
 800cbac:	3b01      	subs	r3, #1
 800cbae:	2b07      	cmp	r3, #7
 800cbb0:	dc0a      	bgt.n	800cbc8 <__gethex+0x148>
 800cbb2:	9801      	ldr	r0, [sp, #4]
 800cbb4:	f7fd fdbe 	bl	800a734 <_Balloc>
 800cbb8:	4604      	mov	r4, r0
 800cbba:	b940      	cbnz	r0, 800cbce <__gethex+0x14e>
 800cbbc:	4b5c      	ldr	r3, [pc, #368]	@ (800cd30 <__gethex+0x2b0>)
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	21e4      	movs	r1, #228	@ 0xe4
 800cbc2:	485c      	ldr	r0, [pc, #368]	@ (800cd34 <__gethex+0x2b4>)
 800cbc4:	f7ff fec4 	bl	800c950 <__assert_func>
 800cbc8:	3101      	adds	r1, #1
 800cbca:	105b      	asrs	r3, r3, #1
 800cbcc:	e7ef      	b.n	800cbae <__gethex+0x12e>
 800cbce:	f100 0a14 	add.w	sl, r0, #20
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4655      	mov	r5, sl
 800cbd6:	469b      	mov	fp, r3
 800cbd8:	45b1      	cmp	r9, r6
 800cbda:	d337      	bcc.n	800cc4c <__gethex+0x1cc>
 800cbdc:	f845 bb04 	str.w	fp, [r5], #4
 800cbe0:	eba5 050a 	sub.w	r5, r5, sl
 800cbe4:	4658      	mov	r0, fp
 800cbe6:	10ad      	asrs	r5, r5, #2
 800cbe8:	6125      	str	r5, [r4, #16]
 800cbea:	016d      	lsls	r5, r5, #5
 800cbec:	f7fd fe96 	bl	800a91c <__hi0bits>
 800cbf0:	f8d8 6000 	ldr.w	r6, [r8]
 800cbf4:	1a2d      	subs	r5, r5, r0
 800cbf6:	42b5      	cmp	r5, r6
 800cbf8:	dd54      	ble.n	800cca4 <__gethex+0x224>
 800cbfa:	1bad      	subs	r5, r5, r6
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	4629      	mov	r1, r5
 800cc00:	f7fe fa2d 	bl	800b05e <__any_on>
 800cc04:	4681      	mov	r9, r0
 800cc06:	b178      	cbz	r0, 800cc28 <__gethex+0x1a8>
 800cc08:	1e6b      	subs	r3, r5, #1
 800cc0a:	f04f 0901 	mov.w	r9, #1
 800cc0e:	1159      	asrs	r1, r3, #5
 800cc10:	f003 021f 	and.w	r2, r3, #31
 800cc14:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc18:	fa09 f202 	lsl.w	r2, r9, r2
 800cc1c:	420a      	tst	r2, r1
 800cc1e:	d003      	beq.n	800cc28 <__gethex+0x1a8>
 800cc20:	454b      	cmp	r3, r9
 800cc22:	dc36      	bgt.n	800cc92 <__gethex+0x212>
 800cc24:	f04f 0902 	mov.w	r9, #2
 800cc28:	442f      	add	r7, r5
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f7ff fec1 	bl	800c9b4 <rshift>
 800cc32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc36:	42bb      	cmp	r3, r7
 800cc38:	da42      	bge.n	800ccc0 <__gethex+0x240>
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	9801      	ldr	r0, [sp, #4]
 800cc3e:	f7fd fdb9 	bl	800a7b4 <_Bfree>
 800cc42:	2300      	movs	r3, #0
 800cc44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc46:	25a3      	movs	r5, #163	@ 0xa3
 800cc48:	6013      	str	r3, [r2, #0]
 800cc4a:	e793      	b.n	800cb74 <__gethex+0xf4>
 800cc4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cc50:	2a2e      	cmp	r2, #46	@ 0x2e
 800cc52:	d012      	beq.n	800cc7a <__gethex+0x1fa>
 800cc54:	2b20      	cmp	r3, #32
 800cc56:	d104      	bne.n	800cc62 <__gethex+0x1e2>
 800cc58:	f845 bb04 	str.w	fp, [r5], #4
 800cc5c:	f04f 0b00 	mov.w	fp, #0
 800cc60:	465b      	mov	r3, fp
 800cc62:	7830      	ldrb	r0, [r6, #0]
 800cc64:	9303      	str	r3, [sp, #12]
 800cc66:	f7ff fef6 	bl	800ca56 <__hexdig_fun>
 800cc6a:	9b03      	ldr	r3, [sp, #12]
 800cc6c:	f000 000f 	and.w	r0, r0, #15
 800cc70:	4098      	lsls	r0, r3
 800cc72:	3304      	adds	r3, #4
 800cc74:	ea4b 0b00 	orr.w	fp, fp, r0
 800cc78:	e7ae      	b.n	800cbd8 <__gethex+0x158>
 800cc7a:	45b1      	cmp	r9, r6
 800cc7c:	d8ea      	bhi.n	800cc54 <__gethex+0x1d4>
 800cc7e:	2201      	movs	r2, #1
 800cc80:	492a      	ldr	r1, [pc, #168]	@ (800cd2c <__gethex+0x2ac>)
 800cc82:	4630      	mov	r0, r6
 800cc84:	9303      	str	r3, [sp, #12]
 800cc86:	f7fc fd2c 	bl	80096e2 <strncmp>
 800cc8a:	9b03      	ldr	r3, [sp, #12]
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d1e1      	bne.n	800cc54 <__gethex+0x1d4>
 800cc90:	e7a2      	b.n	800cbd8 <__gethex+0x158>
 800cc92:	1ea9      	subs	r1, r5, #2
 800cc94:	4620      	mov	r0, r4
 800cc96:	f7fe f9e2 	bl	800b05e <__any_on>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d0c2      	beq.n	800cc24 <__gethex+0x1a4>
 800cc9e:	f04f 0903 	mov.w	r9, #3
 800cca2:	e7c1      	b.n	800cc28 <__gethex+0x1a8>
 800cca4:	da09      	bge.n	800ccba <__gethex+0x23a>
 800cca6:	1b75      	subs	r5, r6, r5
 800cca8:	4621      	mov	r1, r4
 800ccaa:	9801      	ldr	r0, [sp, #4]
 800ccac:	462a      	mov	r2, r5
 800ccae:	1b7f      	subs	r7, r7, r5
 800ccb0:	f7fd ff94 	bl	800abdc <__lshift>
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	f100 0a14 	add.w	sl, r0, #20
 800ccba:	f04f 0900 	mov.w	r9, #0
 800ccbe:	e7b8      	b.n	800cc32 <__gethex+0x1b2>
 800ccc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ccc4:	42bd      	cmp	r5, r7
 800ccc6:	dd6f      	ble.n	800cda8 <__gethex+0x328>
 800ccc8:	1bed      	subs	r5, r5, r7
 800ccca:	42ae      	cmp	r6, r5
 800cccc:	dc34      	bgt.n	800cd38 <__gethex+0x2b8>
 800ccce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d022      	beq.n	800cd1c <__gethex+0x29c>
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d024      	beq.n	800cd24 <__gethex+0x2a4>
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d115      	bne.n	800cd0a <__gethex+0x28a>
 800ccde:	42ae      	cmp	r6, r5
 800cce0:	d113      	bne.n	800cd0a <__gethex+0x28a>
 800cce2:	2e01      	cmp	r6, #1
 800cce4:	d10b      	bne.n	800ccfe <__gethex+0x27e>
 800cce6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ccea:	2562      	movs	r5, #98	@ 0x62
 800ccec:	9a02      	ldr	r2, [sp, #8]
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	6123      	str	r3, [r4, #16]
 800ccf4:	f8ca 3000 	str.w	r3, [sl]
 800ccf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccfa:	601c      	str	r4, [r3, #0]
 800ccfc:	e73a      	b.n	800cb74 <__gethex+0xf4>
 800ccfe:	1e71      	subs	r1, r6, #1
 800cd00:	4620      	mov	r0, r4
 800cd02:	f7fe f9ac 	bl	800b05e <__any_on>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d1ed      	bne.n	800cce6 <__gethex+0x266>
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	9801      	ldr	r0, [sp, #4]
 800cd0e:	f7fd fd51 	bl	800a7b4 <_Bfree>
 800cd12:	2300      	movs	r3, #0
 800cd14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd16:	2550      	movs	r5, #80	@ 0x50
 800cd18:	6013      	str	r3, [r2, #0]
 800cd1a:	e72b      	b.n	800cb74 <__gethex+0xf4>
 800cd1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1f3      	bne.n	800cd0a <__gethex+0x28a>
 800cd22:	e7e0      	b.n	800cce6 <__gethex+0x266>
 800cd24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1dd      	bne.n	800cce6 <__gethex+0x266>
 800cd2a:	e7ee      	b.n	800cd0a <__gethex+0x28a>
 800cd2c:	0800d9a5 	.word	0x0800d9a5
 800cd30:	0800d93b 	.word	0x0800d93b
 800cd34:	0800da17 	.word	0x0800da17
 800cd38:	1e6f      	subs	r7, r5, #1
 800cd3a:	f1b9 0f00 	cmp.w	r9, #0
 800cd3e:	d130      	bne.n	800cda2 <__gethex+0x322>
 800cd40:	b127      	cbz	r7, 800cd4c <__gethex+0x2cc>
 800cd42:	4639      	mov	r1, r7
 800cd44:	4620      	mov	r0, r4
 800cd46:	f7fe f98a 	bl	800b05e <__any_on>
 800cd4a:	4681      	mov	r9, r0
 800cd4c:	117a      	asrs	r2, r7, #5
 800cd4e:	2301      	movs	r3, #1
 800cd50:	f007 071f 	and.w	r7, r7, #31
 800cd54:	4629      	mov	r1, r5
 800cd56:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	40bb      	lsls	r3, r7
 800cd5e:	1b76      	subs	r6, r6, r5
 800cd60:	2502      	movs	r5, #2
 800cd62:	4213      	tst	r3, r2
 800cd64:	bf18      	it	ne
 800cd66:	f049 0902 	orrne.w	r9, r9, #2
 800cd6a:	f7ff fe23 	bl	800c9b4 <rshift>
 800cd6e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cd72:	f1b9 0f00 	cmp.w	r9, #0
 800cd76:	d047      	beq.n	800ce08 <__gethex+0x388>
 800cd78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d015      	beq.n	800cdac <__gethex+0x32c>
 800cd80:	2b03      	cmp	r3, #3
 800cd82:	d017      	beq.n	800cdb4 <__gethex+0x334>
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d109      	bne.n	800cd9c <__gethex+0x31c>
 800cd88:	f019 0f02 	tst.w	r9, #2
 800cd8c:	d006      	beq.n	800cd9c <__gethex+0x31c>
 800cd8e:	f8da 3000 	ldr.w	r3, [sl]
 800cd92:	ea49 0903 	orr.w	r9, r9, r3
 800cd96:	f019 0f01 	tst.w	r9, #1
 800cd9a:	d10e      	bne.n	800cdba <__gethex+0x33a>
 800cd9c:	f045 0510 	orr.w	r5, r5, #16
 800cda0:	e032      	b.n	800ce08 <__gethex+0x388>
 800cda2:	f04f 0901 	mov.w	r9, #1
 800cda6:	e7d1      	b.n	800cd4c <__gethex+0x2cc>
 800cda8:	2501      	movs	r5, #1
 800cdaa:	e7e2      	b.n	800cd72 <__gethex+0x2f2>
 800cdac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdae:	f1c3 0301 	rsb	r3, r3, #1
 800cdb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cdb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d0f0      	beq.n	800cd9c <__gethex+0x31c>
 800cdba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cdbe:	f104 0314 	add.w	r3, r4, #20
 800cdc2:	f04f 0c00 	mov.w	ip, #0
 800cdc6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cdca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdd4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cdd8:	d01b      	beq.n	800ce12 <__gethex+0x392>
 800cdda:	3201      	adds	r2, #1
 800cddc:	6002      	str	r2, [r0, #0]
 800cdde:	2d02      	cmp	r5, #2
 800cde0:	f104 0314 	add.w	r3, r4, #20
 800cde4:	d13c      	bne.n	800ce60 <__gethex+0x3e0>
 800cde6:	f8d8 2000 	ldr.w	r2, [r8]
 800cdea:	3a01      	subs	r2, #1
 800cdec:	42b2      	cmp	r2, r6
 800cdee:	d109      	bne.n	800ce04 <__gethex+0x384>
 800cdf0:	1171      	asrs	r1, r6, #5
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f006 061f 	and.w	r6, r6, #31
 800cdf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cdfc:	fa02 f606 	lsl.w	r6, r2, r6
 800ce00:	421e      	tst	r6, r3
 800ce02:	d13a      	bne.n	800ce7a <__gethex+0x3fa>
 800ce04:	f045 0520 	orr.w	r5, r5, #32
 800ce08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce0a:	601c      	str	r4, [r3, #0]
 800ce0c:	9b02      	ldr	r3, [sp, #8]
 800ce0e:	601f      	str	r7, [r3, #0]
 800ce10:	e6b0      	b.n	800cb74 <__gethex+0xf4>
 800ce12:	4299      	cmp	r1, r3
 800ce14:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce18:	d8d9      	bhi.n	800cdce <__gethex+0x34e>
 800ce1a:	68a3      	ldr	r3, [r4, #8]
 800ce1c:	459b      	cmp	fp, r3
 800ce1e:	db17      	blt.n	800ce50 <__gethex+0x3d0>
 800ce20:	6861      	ldr	r1, [r4, #4]
 800ce22:	9801      	ldr	r0, [sp, #4]
 800ce24:	3101      	adds	r1, #1
 800ce26:	f7fd fc85 	bl	800a734 <_Balloc>
 800ce2a:	4681      	mov	r9, r0
 800ce2c:	b918      	cbnz	r0, 800ce36 <__gethex+0x3b6>
 800ce2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ce98 <__gethex+0x418>)
 800ce30:	4602      	mov	r2, r0
 800ce32:	2184      	movs	r1, #132	@ 0x84
 800ce34:	e6c5      	b.n	800cbc2 <__gethex+0x142>
 800ce36:	6922      	ldr	r2, [r4, #16]
 800ce38:	f104 010c 	add.w	r1, r4, #12
 800ce3c:	300c      	adds	r0, #12
 800ce3e:	3202      	adds	r2, #2
 800ce40:	0092      	lsls	r2, r2, #2
 800ce42:	f7ff fd6d 	bl	800c920 <memcpy>
 800ce46:	4621      	mov	r1, r4
 800ce48:	464c      	mov	r4, r9
 800ce4a:	9801      	ldr	r0, [sp, #4]
 800ce4c:	f7fd fcb2 	bl	800a7b4 <_Bfree>
 800ce50:	6923      	ldr	r3, [r4, #16]
 800ce52:	1c5a      	adds	r2, r3, #1
 800ce54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce58:	6122      	str	r2, [r4, #16]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	615a      	str	r2, [r3, #20]
 800ce5e:	e7be      	b.n	800cdde <__gethex+0x35e>
 800ce60:	6922      	ldr	r2, [r4, #16]
 800ce62:	455a      	cmp	r2, fp
 800ce64:	dd0b      	ble.n	800ce7e <__gethex+0x3fe>
 800ce66:	2101      	movs	r1, #1
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f7ff fda3 	bl	800c9b4 <rshift>
 800ce6e:	3701      	adds	r7, #1
 800ce70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce74:	42bb      	cmp	r3, r7
 800ce76:	f6ff aee0 	blt.w	800cc3a <__gethex+0x1ba>
 800ce7a:	2501      	movs	r5, #1
 800ce7c:	e7c2      	b.n	800ce04 <__gethex+0x384>
 800ce7e:	f016 061f 	ands.w	r6, r6, #31
 800ce82:	d0fa      	beq.n	800ce7a <__gethex+0x3fa>
 800ce84:	4453      	add	r3, sl
 800ce86:	f1c6 0620 	rsb	r6, r6, #32
 800ce8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ce8e:	f7fd fd45 	bl	800a91c <__hi0bits>
 800ce92:	42b0      	cmp	r0, r6
 800ce94:	dbe7      	blt.n	800ce66 <__gethex+0x3e6>
 800ce96:	e7f0      	b.n	800ce7a <__gethex+0x3fa>
 800ce98:	0800d93b 	.word	0x0800d93b

0800ce9c <L_shift>:
 800ce9c:	f1c2 0208 	rsb	r2, r2, #8
 800cea0:	0092      	lsls	r2, r2, #2
 800cea2:	b570      	push	{r4, r5, r6, lr}
 800cea4:	f1c2 0620 	rsb	r6, r2, #32
 800cea8:	6843      	ldr	r3, [r0, #4]
 800ceaa:	6804      	ldr	r4, [r0, #0]
 800ceac:	fa03 f506 	lsl.w	r5, r3, r6
 800ceb0:	40d3      	lsrs	r3, r2
 800ceb2:	432c      	orrs	r4, r5
 800ceb4:	6004      	str	r4, [r0, #0]
 800ceb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ceba:	4288      	cmp	r0, r1
 800cebc:	d3f4      	bcc.n	800cea8 <L_shift+0xc>
 800cebe:	bd70      	pop	{r4, r5, r6, pc}

0800cec0 <__match>:
 800cec0:	6803      	ldr	r3, [r0, #0]
 800cec2:	3301      	adds	r3, #1
 800cec4:	b530      	push	{r4, r5, lr}
 800cec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceca:	b914      	cbnz	r4, 800ced2 <__match+0x12>
 800cecc:	6003      	str	r3, [r0, #0]
 800cece:	2001      	movs	r0, #1
 800ced0:	bd30      	pop	{r4, r5, pc}
 800ced2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ced6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ceda:	2d19      	cmp	r5, #25
 800cedc:	bf98      	it	ls
 800cede:	3220      	addls	r2, #32
 800cee0:	42a2      	cmp	r2, r4
 800cee2:	d0f0      	beq.n	800cec6 <__match+0x6>
 800cee4:	2000      	movs	r0, #0
 800cee6:	e7f3      	b.n	800ced0 <__match+0x10>

0800cee8 <__hexnan>:
 800cee8:	680b      	ldr	r3, [r1, #0]
 800ceea:	6801      	ldr	r1, [r0, #0]
 800ceec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef0:	115e      	asrs	r6, r3, #5
 800cef2:	f013 031f 	ands.w	r3, r3, #31
 800cef6:	f04f 0500 	mov.w	r5, #0
 800cefa:	b087      	sub	sp, #28
 800cefc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf00:	4682      	mov	sl, r0
 800cf02:	4690      	mov	r8, r2
 800cf04:	46ab      	mov	fp, r5
 800cf06:	bf18      	it	ne
 800cf08:	3604      	addne	r6, #4
 800cf0a:	9301      	str	r3, [sp, #4]
 800cf0c:	9502      	str	r5, [sp, #8]
 800cf0e:	1f37      	subs	r7, r6, #4
 800cf10:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf14:	46b9      	mov	r9, r7
 800cf16:	463c      	mov	r4, r7
 800cf18:	1c4b      	adds	r3, r1, #1
 800cf1a:	784a      	ldrb	r2, [r1, #1]
 800cf1c:	9303      	str	r3, [sp, #12]
 800cf1e:	b342      	cbz	r2, 800cf72 <__hexnan+0x8a>
 800cf20:	4610      	mov	r0, r2
 800cf22:	9105      	str	r1, [sp, #20]
 800cf24:	9204      	str	r2, [sp, #16]
 800cf26:	f7ff fd96 	bl	800ca56 <__hexdig_fun>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	d151      	bne.n	800cfd2 <__hexnan+0xea>
 800cf2e:	9a04      	ldr	r2, [sp, #16]
 800cf30:	9905      	ldr	r1, [sp, #20]
 800cf32:	2a20      	cmp	r2, #32
 800cf34:	d818      	bhi.n	800cf68 <__hexnan+0x80>
 800cf36:	9b02      	ldr	r3, [sp, #8]
 800cf38:	459b      	cmp	fp, r3
 800cf3a:	dd13      	ble.n	800cf64 <__hexnan+0x7c>
 800cf3c:	454c      	cmp	r4, r9
 800cf3e:	d206      	bcs.n	800cf4e <__hexnan+0x66>
 800cf40:	2d07      	cmp	r5, #7
 800cf42:	dc04      	bgt.n	800cf4e <__hexnan+0x66>
 800cf44:	462a      	mov	r2, r5
 800cf46:	4649      	mov	r1, r9
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f7ff ffa7 	bl	800ce9c <L_shift>
 800cf4e:	4544      	cmp	r4, r8
 800cf50:	d951      	bls.n	800cff6 <__hexnan+0x10e>
 800cf52:	2300      	movs	r3, #0
 800cf54:	f1a4 0904 	sub.w	r9, r4, #4
 800cf58:	f8cd b008 	str.w	fp, [sp, #8]
 800cf5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf60:	461d      	mov	r5, r3
 800cf62:	464c      	mov	r4, r9
 800cf64:	9903      	ldr	r1, [sp, #12]
 800cf66:	e7d7      	b.n	800cf18 <__hexnan+0x30>
 800cf68:	2a29      	cmp	r2, #41	@ 0x29
 800cf6a:	d156      	bne.n	800d01a <__hexnan+0x132>
 800cf6c:	3102      	adds	r1, #2
 800cf6e:	f8ca 1000 	str.w	r1, [sl]
 800cf72:	f1bb 0f00 	cmp.w	fp, #0
 800cf76:	d050      	beq.n	800d01a <__hexnan+0x132>
 800cf78:	454c      	cmp	r4, r9
 800cf7a:	d206      	bcs.n	800cf8a <__hexnan+0xa2>
 800cf7c:	2d07      	cmp	r5, #7
 800cf7e:	dc04      	bgt.n	800cf8a <__hexnan+0xa2>
 800cf80:	462a      	mov	r2, r5
 800cf82:	4649      	mov	r1, r9
 800cf84:	4620      	mov	r0, r4
 800cf86:	f7ff ff89 	bl	800ce9c <L_shift>
 800cf8a:	4544      	cmp	r4, r8
 800cf8c:	d935      	bls.n	800cffa <__hexnan+0x112>
 800cf8e:	f1a8 0204 	sub.w	r2, r8, #4
 800cf92:	4623      	mov	r3, r4
 800cf94:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf98:	429f      	cmp	r7, r3
 800cf9a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf9e:	d2f9      	bcs.n	800cf94 <__hexnan+0xac>
 800cfa0:	1b3b      	subs	r3, r7, r4
 800cfa2:	3e03      	subs	r6, #3
 800cfa4:	3401      	adds	r4, #1
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f023 0303 	bic.w	r3, r3, #3
 800cfac:	3304      	adds	r3, #4
 800cfae:	42b4      	cmp	r4, r6
 800cfb0:	bf88      	it	hi
 800cfb2:	2304      	movhi	r3, #4
 800cfb4:	4443      	add	r3, r8
 800cfb6:	f843 2b04 	str.w	r2, [r3], #4
 800cfba:	429f      	cmp	r7, r3
 800cfbc:	d2fb      	bcs.n	800cfb6 <__hexnan+0xce>
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	b91b      	cbnz	r3, 800cfca <__hexnan+0xe2>
 800cfc2:	4547      	cmp	r7, r8
 800cfc4:	d127      	bne.n	800d016 <__hexnan+0x12e>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	603b      	str	r3, [r7, #0]
 800cfca:	2005      	movs	r0, #5
 800cfcc:	b007      	add	sp, #28
 800cfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd2:	3501      	adds	r5, #1
 800cfd4:	f10b 0b01 	add.w	fp, fp, #1
 800cfd8:	2d08      	cmp	r5, #8
 800cfda:	dd05      	ble.n	800cfe8 <__hexnan+0x100>
 800cfdc:	4544      	cmp	r4, r8
 800cfde:	d9c1      	bls.n	800cf64 <__hexnan+0x7c>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	3c04      	subs	r4, #4
 800cfe4:	2501      	movs	r5, #1
 800cfe6:	6023      	str	r3, [r4, #0]
 800cfe8:	6822      	ldr	r2, [r4, #0]
 800cfea:	f000 000f 	and.w	r0, r0, #15
 800cfee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cff2:	6020      	str	r0, [r4, #0]
 800cff4:	e7b6      	b.n	800cf64 <__hexnan+0x7c>
 800cff6:	2508      	movs	r5, #8
 800cff8:	e7b4      	b.n	800cf64 <__hexnan+0x7c>
 800cffa:	9b01      	ldr	r3, [sp, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d0de      	beq.n	800cfbe <__hexnan+0xd6>
 800d000:	f1c3 0320 	rsb	r3, r3, #32
 800d004:	f04f 32ff 	mov.w	r2, #4294967295
 800d008:	40da      	lsrs	r2, r3
 800d00a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d00e:	4013      	ands	r3, r2
 800d010:	f846 3c04 	str.w	r3, [r6, #-4]
 800d014:	e7d3      	b.n	800cfbe <__hexnan+0xd6>
 800d016:	3f04      	subs	r7, #4
 800d018:	e7d1      	b.n	800cfbe <__hexnan+0xd6>
 800d01a:	2004      	movs	r0, #4
 800d01c:	e7d6      	b.n	800cfcc <__hexnan+0xe4>

0800d01e <__ascii_mbtowc>:
 800d01e:	b082      	sub	sp, #8
 800d020:	b901      	cbnz	r1, 800d024 <__ascii_mbtowc+0x6>
 800d022:	a901      	add	r1, sp, #4
 800d024:	b142      	cbz	r2, 800d038 <__ascii_mbtowc+0x1a>
 800d026:	b14b      	cbz	r3, 800d03c <__ascii_mbtowc+0x1e>
 800d028:	7813      	ldrb	r3, [r2, #0]
 800d02a:	600b      	str	r3, [r1, #0]
 800d02c:	7812      	ldrb	r2, [r2, #0]
 800d02e:	1e10      	subs	r0, r2, #0
 800d030:	bf18      	it	ne
 800d032:	2001      	movne	r0, #1
 800d034:	b002      	add	sp, #8
 800d036:	4770      	bx	lr
 800d038:	4610      	mov	r0, r2
 800d03a:	e7fb      	b.n	800d034 <__ascii_mbtowc+0x16>
 800d03c:	f06f 0001 	mvn.w	r0, #1
 800d040:	e7f8      	b.n	800d034 <__ascii_mbtowc+0x16>

0800d042 <_realloc_r>:
 800d042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d046:	4607      	mov	r7, r0
 800d048:	4614      	mov	r4, r2
 800d04a:	460d      	mov	r5, r1
 800d04c:	b921      	cbnz	r1, 800d058 <_realloc_r+0x16>
 800d04e:	4611      	mov	r1, r2
 800d050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d054:	f7fd bae2 	b.w	800a61c <_malloc_r>
 800d058:	b92a      	cbnz	r2, 800d066 <_realloc_r+0x24>
 800d05a:	4625      	mov	r5, r4
 800d05c:	f7fd fa6a 	bl	800a534 <_free_r>
 800d060:	4628      	mov	r0, r5
 800d062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d066:	f000 f8b2 	bl	800d1ce <_malloc_usable_size_r>
 800d06a:	4284      	cmp	r4, r0
 800d06c:	4606      	mov	r6, r0
 800d06e:	d802      	bhi.n	800d076 <_realloc_r+0x34>
 800d070:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d074:	d8f4      	bhi.n	800d060 <_realloc_r+0x1e>
 800d076:	4621      	mov	r1, r4
 800d078:	4638      	mov	r0, r7
 800d07a:	f7fd facf 	bl	800a61c <_malloc_r>
 800d07e:	4680      	mov	r8, r0
 800d080:	b908      	cbnz	r0, 800d086 <_realloc_r+0x44>
 800d082:	4645      	mov	r5, r8
 800d084:	e7ec      	b.n	800d060 <_realloc_r+0x1e>
 800d086:	42b4      	cmp	r4, r6
 800d088:	4622      	mov	r2, r4
 800d08a:	4629      	mov	r1, r5
 800d08c:	bf28      	it	cs
 800d08e:	4632      	movcs	r2, r6
 800d090:	f7ff fc46 	bl	800c920 <memcpy>
 800d094:	4629      	mov	r1, r5
 800d096:	4638      	mov	r0, r7
 800d098:	f7fd fa4c 	bl	800a534 <_free_r>
 800d09c:	e7f1      	b.n	800d082 <_realloc_r+0x40>
	...

0800d0a0 <_strtoul_l.isra.0>:
 800d0a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0a4:	4686      	mov	lr, r0
 800d0a6:	460d      	mov	r5, r1
 800d0a8:	4e33      	ldr	r6, [pc, #204]	@ (800d178 <_strtoul_l.isra.0+0xd8>)
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0b0:	5d37      	ldrb	r7, [r6, r4]
 800d0b2:	f017 0708 	ands.w	r7, r7, #8
 800d0b6:	d1f8      	bne.n	800d0aa <_strtoul_l.isra.0+0xa>
 800d0b8:	2c2d      	cmp	r4, #45	@ 0x2d
 800d0ba:	d110      	bne.n	800d0de <_strtoul_l.isra.0+0x3e>
 800d0bc:	782c      	ldrb	r4, [r5, #0]
 800d0be:	2701      	movs	r7, #1
 800d0c0:	1c85      	adds	r5, r0, #2
 800d0c2:	f033 0010 	bics.w	r0, r3, #16
 800d0c6:	d115      	bne.n	800d0f4 <_strtoul_l.isra.0+0x54>
 800d0c8:	2c30      	cmp	r4, #48	@ 0x30
 800d0ca:	d10d      	bne.n	800d0e8 <_strtoul_l.isra.0+0x48>
 800d0cc:	7828      	ldrb	r0, [r5, #0]
 800d0ce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d0d2:	2858      	cmp	r0, #88	@ 0x58
 800d0d4:	d108      	bne.n	800d0e8 <_strtoul_l.isra.0+0x48>
 800d0d6:	786c      	ldrb	r4, [r5, #1]
 800d0d8:	3502      	adds	r5, #2
 800d0da:	2310      	movs	r3, #16
 800d0dc:	e00a      	b.n	800d0f4 <_strtoul_l.isra.0+0x54>
 800d0de:	2c2b      	cmp	r4, #43	@ 0x2b
 800d0e0:	bf04      	itt	eq
 800d0e2:	782c      	ldrbeq	r4, [r5, #0]
 800d0e4:	1c85      	addeq	r5, r0, #2
 800d0e6:	e7ec      	b.n	800d0c2 <_strtoul_l.isra.0+0x22>
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1f6      	bne.n	800d0da <_strtoul_l.isra.0+0x3a>
 800d0ec:	2c30      	cmp	r4, #48	@ 0x30
 800d0ee:	bf14      	ite	ne
 800d0f0:	230a      	movne	r3, #10
 800d0f2:	2308      	moveq	r3, #8
 800d0f4:	f04f 38ff 	mov.w	r8, #4294967295
 800d0f8:	2600      	movs	r6, #0
 800d0fa:	fbb8 f8f3 	udiv	r8, r8, r3
 800d0fe:	fb03 f908 	mul.w	r9, r3, r8
 800d102:	4630      	mov	r0, r6
 800d104:	ea6f 0909 	mvn.w	r9, r9
 800d108:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d10c:	f1bc 0f09 	cmp.w	ip, #9
 800d110:	d810      	bhi.n	800d134 <_strtoul_l.isra.0+0x94>
 800d112:	4664      	mov	r4, ip
 800d114:	42a3      	cmp	r3, r4
 800d116:	dd1e      	ble.n	800d156 <_strtoul_l.isra.0+0xb6>
 800d118:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d11c:	d007      	beq.n	800d12e <_strtoul_l.isra.0+0x8e>
 800d11e:	4580      	cmp	r8, r0
 800d120:	d316      	bcc.n	800d150 <_strtoul_l.isra.0+0xb0>
 800d122:	d101      	bne.n	800d128 <_strtoul_l.isra.0+0x88>
 800d124:	45a1      	cmp	r9, r4
 800d126:	db13      	blt.n	800d150 <_strtoul_l.isra.0+0xb0>
 800d128:	fb00 4003 	mla	r0, r0, r3, r4
 800d12c:	2601      	movs	r6, #1
 800d12e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d132:	e7e9      	b.n	800d108 <_strtoul_l.isra.0+0x68>
 800d134:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d138:	f1bc 0f19 	cmp.w	ip, #25
 800d13c:	d801      	bhi.n	800d142 <_strtoul_l.isra.0+0xa2>
 800d13e:	3c37      	subs	r4, #55	@ 0x37
 800d140:	e7e8      	b.n	800d114 <_strtoul_l.isra.0+0x74>
 800d142:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d146:	f1bc 0f19 	cmp.w	ip, #25
 800d14a:	d804      	bhi.n	800d156 <_strtoul_l.isra.0+0xb6>
 800d14c:	3c57      	subs	r4, #87	@ 0x57
 800d14e:	e7e1      	b.n	800d114 <_strtoul_l.isra.0+0x74>
 800d150:	f04f 36ff 	mov.w	r6, #4294967295
 800d154:	e7eb      	b.n	800d12e <_strtoul_l.isra.0+0x8e>
 800d156:	1c73      	adds	r3, r6, #1
 800d158:	d106      	bne.n	800d168 <_strtoul_l.isra.0+0xc8>
 800d15a:	2322      	movs	r3, #34	@ 0x22
 800d15c:	4630      	mov	r0, r6
 800d15e:	f8ce 3000 	str.w	r3, [lr]
 800d162:	b932      	cbnz	r2, 800d172 <_strtoul_l.isra.0+0xd2>
 800d164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d168:	b107      	cbz	r7, 800d16c <_strtoul_l.isra.0+0xcc>
 800d16a:	4240      	negs	r0, r0
 800d16c:	2a00      	cmp	r2, #0
 800d16e:	d0f9      	beq.n	800d164 <_strtoul_l.isra.0+0xc4>
 800d170:	b106      	cbz	r6, 800d174 <_strtoul_l.isra.0+0xd4>
 800d172:	1e69      	subs	r1, r5, #1
 800d174:	6011      	str	r1, [r2, #0]
 800d176:	e7f5      	b.n	800d164 <_strtoul_l.isra.0+0xc4>
 800d178:	0800dbc9 	.word	0x0800dbc9

0800d17c <_strtoul_r>:
 800d17c:	f7ff bf90 	b.w	800d0a0 <_strtoul_l.isra.0>

0800d180 <__ascii_wctomb>:
 800d180:	4603      	mov	r3, r0
 800d182:	4608      	mov	r0, r1
 800d184:	b141      	cbz	r1, 800d198 <__ascii_wctomb+0x18>
 800d186:	2aff      	cmp	r2, #255	@ 0xff
 800d188:	d904      	bls.n	800d194 <__ascii_wctomb+0x14>
 800d18a:	228a      	movs	r2, #138	@ 0x8a
 800d18c:	f04f 30ff 	mov.w	r0, #4294967295
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	4770      	bx	lr
 800d194:	2001      	movs	r0, #1
 800d196:	700a      	strb	r2, [r1, #0]
 800d198:	4770      	bx	lr
	...

0800d19c <fiprintf>:
 800d19c:	b40e      	push	{r1, r2, r3}
 800d19e:	b503      	push	{r0, r1, lr}
 800d1a0:	ab03      	add	r3, sp, #12
 800d1a2:	4601      	mov	r1, r0
 800d1a4:	4805      	ldr	r0, [pc, #20]	@ (800d1bc <fiprintf+0x20>)
 800d1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1aa:	6800      	ldr	r0, [r0, #0]
 800d1ac:	9301      	str	r3, [sp, #4]
 800d1ae:	f000 f83f 	bl	800d230 <_vfiprintf_r>
 800d1b2:	b002      	add	sp, #8
 800d1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1b8:	b003      	add	sp, #12
 800d1ba:	4770      	bx	lr
 800d1bc:	20000018 	.word	0x20000018

0800d1c0 <abort>:
 800d1c0:	2006      	movs	r0, #6
 800d1c2:	b508      	push	{r3, lr}
 800d1c4:	f000 fa08 	bl	800d5d8 <raise>
 800d1c8:	2001      	movs	r0, #1
 800d1ca:	f7f4 fe73 	bl	8001eb4 <_exit>

0800d1ce <_malloc_usable_size_r>:
 800d1ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1d2:	1f18      	subs	r0, r3, #4
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	bfbc      	itt	lt
 800d1d8:	580b      	ldrlt	r3, [r1, r0]
 800d1da:	18c0      	addlt	r0, r0, r3
 800d1dc:	4770      	bx	lr

0800d1de <__sfputc_r>:
 800d1de:	6893      	ldr	r3, [r2, #8]
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	b410      	push	{r4}
 800d1e6:	6093      	str	r3, [r2, #8]
 800d1e8:	da08      	bge.n	800d1fc <__sfputc_r+0x1e>
 800d1ea:	6994      	ldr	r4, [r2, #24]
 800d1ec:	42a3      	cmp	r3, r4
 800d1ee:	db01      	blt.n	800d1f4 <__sfputc_r+0x16>
 800d1f0:	290a      	cmp	r1, #10
 800d1f2:	d103      	bne.n	800d1fc <__sfputc_r+0x1e>
 800d1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1f8:	f000 b932 	b.w	800d460 <__swbuf_r>
 800d1fc:	6813      	ldr	r3, [r2, #0]
 800d1fe:	1c58      	adds	r0, r3, #1
 800d200:	6010      	str	r0, [r2, #0]
 800d202:	4608      	mov	r0, r1
 800d204:	7019      	strb	r1, [r3, #0]
 800d206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <__sfputs_r>:
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20e:	4606      	mov	r6, r0
 800d210:	460f      	mov	r7, r1
 800d212:	4614      	mov	r4, r2
 800d214:	18d5      	adds	r5, r2, r3
 800d216:	42ac      	cmp	r4, r5
 800d218:	d101      	bne.n	800d21e <__sfputs_r+0x12>
 800d21a:	2000      	movs	r0, #0
 800d21c:	e007      	b.n	800d22e <__sfputs_r+0x22>
 800d21e:	463a      	mov	r2, r7
 800d220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d224:	4630      	mov	r0, r6
 800d226:	f7ff ffda 	bl	800d1de <__sfputc_r>
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	d1f3      	bne.n	800d216 <__sfputs_r+0xa>
 800d22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d230 <_vfiprintf_r>:
 800d230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d234:	460d      	mov	r5, r1
 800d236:	b09d      	sub	sp, #116	@ 0x74
 800d238:	4614      	mov	r4, r2
 800d23a:	4698      	mov	r8, r3
 800d23c:	4606      	mov	r6, r0
 800d23e:	b118      	cbz	r0, 800d248 <_vfiprintf_r+0x18>
 800d240:	6a03      	ldr	r3, [r0, #32]
 800d242:	b90b      	cbnz	r3, 800d248 <_vfiprintf_r+0x18>
 800d244:	f7fc f946 	bl	80094d4 <__sinit>
 800d248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d24a:	07d9      	lsls	r1, r3, #31
 800d24c:	d405      	bmi.n	800d25a <_vfiprintf_r+0x2a>
 800d24e:	89ab      	ldrh	r3, [r5, #12]
 800d250:	059a      	lsls	r2, r3, #22
 800d252:	d402      	bmi.n	800d25a <_vfiprintf_r+0x2a>
 800d254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d256:	f7fc faf4 	bl	8009842 <__retarget_lock_acquire_recursive>
 800d25a:	89ab      	ldrh	r3, [r5, #12]
 800d25c:	071b      	lsls	r3, r3, #28
 800d25e:	d501      	bpl.n	800d264 <_vfiprintf_r+0x34>
 800d260:	692b      	ldr	r3, [r5, #16]
 800d262:	b99b      	cbnz	r3, 800d28c <_vfiprintf_r+0x5c>
 800d264:	4629      	mov	r1, r5
 800d266:	4630      	mov	r0, r6
 800d268:	f000 f938 	bl	800d4dc <__swsetup_r>
 800d26c:	b170      	cbz	r0, 800d28c <_vfiprintf_r+0x5c>
 800d26e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d270:	07dc      	lsls	r4, r3, #31
 800d272:	d504      	bpl.n	800d27e <_vfiprintf_r+0x4e>
 800d274:	f04f 30ff 	mov.w	r0, #4294967295
 800d278:	b01d      	add	sp, #116	@ 0x74
 800d27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27e:	89ab      	ldrh	r3, [r5, #12]
 800d280:	0598      	lsls	r0, r3, #22
 800d282:	d4f7      	bmi.n	800d274 <_vfiprintf_r+0x44>
 800d284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d286:	f7fc fadd 	bl	8009844 <__retarget_lock_release_recursive>
 800d28a:	e7f3      	b.n	800d274 <_vfiprintf_r+0x44>
 800d28c:	2300      	movs	r3, #0
 800d28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d292:	f04f 0901 	mov.w	r9, #1
 800d296:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d44c <_vfiprintf_r+0x21c>
 800d29a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d29c:	2320      	movs	r3, #32
 800d29e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2a2:	2330      	movs	r3, #48	@ 0x30
 800d2a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2a8:	4623      	mov	r3, r4
 800d2aa:	469a      	mov	sl, r3
 800d2ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2b0:	b10a      	cbz	r2, 800d2b6 <_vfiprintf_r+0x86>
 800d2b2:	2a25      	cmp	r2, #37	@ 0x25
 800d2b4:	d1f9      	bne.n	800d2aa <_vfiprintf_r+0x7a>
 800d2b6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ba:	d00b      	beq.n	800d2d4 <_vfiprintf_r+0xa4>
 800d2bc:	465b      	mov	r3, fp
 800d2be:	4622      	mov	r2, r4
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f7ff ffa2 	bl	800d20c <__sfputs_r>
 800d2c8:	3001      	adds	r0, #1
 800d2ca:	f000 80a7 	beq.w	800d41c <_vfiprintf_r+0x1ec>
 800d2ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2d0:	445a      	add	r2, fp
 800d2d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 809f 	beq.w	800d41c <_vfiprintf_r+0x1ec>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e4:	f10a 0a01 	add.w	sl, sl, #1
 800d2e8:	9304      	str	r3, [sp, #16]
 800d2ea:	9307      	str	r3, [sp, #28]
 800d2ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2f6:	4654      	mov	r4, sl
 800d2f8:	2205      	movs	r2, #5
 800d2fa:	4854      	ldr	r0, [pc, #336]	@ (800d44c <_vfiprintf_r+0x21c>)
 800d2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d300:	f7fc faa1 	bl	8009846 <memchr>
 800d304:	9a04      	ldr	r2, [sp, #16]
 800d306:	b9d8      	cbnz	r0, 800d340 <_vfiprintf_r+0x110>
 800d308:	06d1      	lsls	r1, r2, #27
 800d30a:	bf44      	itt	mi
 800d30c:	2320      	movmi	r3, #32
 800d30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d312:	0713      	lsls	r3, r2, #28
 800d314:	bf44      	itt	mi
 800d316:	232b      	movmi	r3, #43	@ 0x2b
 800d318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d31c:	f89a 3000 	ldrb.w	r3, [sl]
 800d320:	2b2a      	cmp	r3, #42	@ 0x2a
 800d322:	d015      	beq.n	800d350 <_vfiprintf_r+0x120>
 800d324:	9a07      	ldr	r2, [sp, #28]
 800d326:	4654      	mov	r4, sl
 800d328:	2000      	movs	r0, #0
 800d32a:	f04f 0c0a 	mov.w	ip, #10
 800d32e:	4621      	mov	r1, r4
 800d330:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d334:	3b30      	subs	r3, #48	@ 0x30
 800d336:	2b09      	cmp	r3, #9
 800d338:	d94b      	bls.n	800d3d2 <_vfiprintf_r+0x1a2>
 800d33a:	b1b0      	cbz	r0, 800d36a <_vfiprintf_r+0x13a>
 800d33c:	9207      	str	r2, [sp, #28]
 800d33e:	e014      	b.n	800d36a <_vfiprintf_r+0x13a>
 800d340:	eba0 0308 	sub.w	r3, r0, r8
 800d344:	46a2      	mov	sl, r4
 800d346:	fa09 f303 	lsl.w	r3, r9, r3
 800d34a:	4313      	orrs	r3, r2
 800d34c:	9304      	str	r3, [sp, #16]
 800d34e:	e7d2      	b.n	800d2f6 <_vfiprintf_r+0xc6>
 800d350:	9b03      	ldr	r3, [sp, #12]
 800d352:	1d19      	adds	r1, r3, #4
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	9103      	str	r1, [sp, #12]
 800d35a:	bfbb      	ittet	lt
 800d35c:	425b      	neglt	r3, r3
 800d35e:	f042 0202 	orrlt.w	r2, r2, #2
 800d362:	9307      	strge	r3, [sp, #28]
 800d364:	9307      	strlt	r3, [sp, #28]
 800d366:	bfb8      	it	lt
 800d368:	9204      	strlt	r2, [sp, #16]
 800d36a:	7823      	ldrb	r3, [r4, #0]
 800d36c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d36e:	d10a      	bne.n	800d386 <_vfiprintf_r+0x156>
 800d370:	7863      	ldrb	r3, [r4, #1]
 800d372:	2b2a      	cmp	r3, #42	@ 0x2a
 800d374:	d132      	bne.n	800d3dc <_vfiprintf_r+0x1ac>
 800d376:	9b03      	ldr	r3, [sp, #12]
 800d378:	3402      	adds	r4, #2
 800d37a:	1d1a      	adds	r2, r3, #4
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d382:	9203      	str	r2, [sp, #12]
 800d384:	9305      	str	r3, [sp, #20]
 800d386:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d45c <_vfiprintf_r+0x22c>
 800d38a:	2203      	movs	r2, #3
 800d38c:	7821      	ldrb	r1, [r4, #0]
 800d38e:	4650      	mov	r0, sl
 800d390:	f7fc fa59 	bl	8009846 <memchr>
 800d394:	b138      	cbz	r0, 800d3a6 <_vfiprintf_r+0x176>
 800d396:	eba0 000a 	sub.w	r0, r0, sl
 800d39a:	2240      	movs	r2, #64	@ 0x40
 800d39c:	9b04      	ldr	r3, [sp, #16]
 800d39e:	3401      	adds	r4, #1
 800d3a0:	4082      	lsls	r2, r0
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	9304      	str	r3, [sp, #16]
 800d3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3aa:	2206      	movs	r2, #6
 800d3ac:	4828      	ldr	r0, [pc, #160]	@ (800d450 <_vfiprintf_r+0x220>)
 800d3ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3b2:	f7fc fa48 	bl	8009846 <memchr>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d03f      	beq.n	800d43a <_vfiprintf_r+0x20a>
 800d3ba:	4b26      	ldr	r3, [pc, #152]	@ (800d454 <_vfiprintf_r+0x224>)
 800d3bc:	bb1b      	cbnz	r3, 800d406 <_vfiprintf_r+0x1d6>
 800d3be:	9b03      	ldr	r3, [sp, #12]
 800d3c0:	3307      	adds	r3, #7
 800d3c2:	f023 0307 	bic.w	r3, r3, #7
 800d3c6:	3308      	adds	r3, #8
 800d3c8:	9303      	str	r3, [sp, #12]
 800d3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3cc:	443b      	add	r3, r7
 800d3ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3d0:	e76a      	b.n	800d2a8 <_vfiprintf_r+0x78>
 800d3d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	2001      	movs	r0, #1
 800d3da:	e7a8      	b.n	800d32e <_vfiprintf_r+0xfe>
 800d3dc:	2300      	movs	r3, #0
 800d3de:	3401      	adds	r4, #1
 800d3e0:	f04f 0c0a 	mov.w	ip, #10
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	9305      	str	r3, [sp, #20]
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3ee:	3a30      	subs	r2, #48	@ 0x30
 800d3f0:	2a09      	cmp	r2, #9
 800d3f2:	d903      	bls.n	800d3fc <_vfiprintf_r+0x1cc>
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d0c6      	beq.n	800d386 <_vfiprintf_r+0x156>
 800d3f8:	9105      	str	r1, [sp, #20]
 800d3fa:	e7c4      	b.n	800d386 <_vfiprintf_r+0x156>
 800d3fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d400:	4604      	mov	r4, r0
 800d402:	2301      	movs	r3, #1
 800d404:	e7f0      	b.n	800d3e8 <_vfiprintf_r+0x1b8>
 800d406:	ab03      	add	r3, sp, #12
 800d408:	462a      	mov	r2, r5
 800d40a:	a904      	add	r1, sp, #16
 800d40c:	4630      	mov	r0, r6
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	4b11      	ldr	r3, [pc, #68]	@ (800d458 <_vfiprintf_r+0x228>)
 800d412:	f7fb fa0b 	bl	800882c <_printf_float>
 800d416:	4607      	mov	r7, r0
 800d418:	1c78      	adds	r0, r7, #1
 800d41a:	d1d6      	bne.n	800d3ca <_vfiprintf_r+0x19a>
 800d41c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d41e:	07d9      	lsls	r1, r3, #31
 800d420:	d405      	bmi.n	800d42e <_vfiprintf_r+0x1fe>
 800d422:	89ab      	ldrh	r3, [r5, #12]
 800d424:	059a      	lsls	r2, r3, #22
 800d426:	d402      	bmi.n	800d42e <_vfiprintf_r+0x1fe>
 800d428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d42a:	f7fc fa0b 	bl	8009844 <__retarget_lock_release_recursive>
 800d42e:	89ab      	ldrh	r3, [r5, #12]
 800d430:	065b      	lsls	r3, r3, #25
 800d432:	f53f af1f 	bmi.w	800d274 <_vfiprintf_r+0x44>
 800d436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d438:	e71e      	b.n	800d278 <_vfiprintf_r+0x48>
 800d43a:	ab03      	add	r3, sp, #12
 800d43c:	462a      	mov	r2, r5
 800d43e:	a904      	add	r1, sp, #16
 800d440:	4630      	mov	r0, r6
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	4b04      	ldr	r3, [pc, #16]	@ (800d458 <_vfiprintf_r+0x228>)
 800d446:	f7fb fc8d 	bl	8008d64 <_printf_i>
 800d44a:	e7e4      	b.n	800d416 <_vfiprintf_r+0x1e6>
 800d44c:	0800d9a7 	.word	0x0800d9a7
 800d450:	0800d9b1 	.word	0x0800d9b1
 800d454:	0800882d 	.word	0x0800882d
 800d458:	0800d20d 	.word	0x0800d20d
 800d45c:	0800d9ad 	.word	0x0800d9ad

0800d460 <__swbuf_r>:
 800d460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d462:	460e      	mov	r6, r1
 800d464:	4614      	mov	r4, r2
 800d466:	4605      	mov	r5, r0
 800d468:	b118      	cbz	r0, 800d472 <__swbuf_r+0x12>
 800d46a:	6a03      	ldr	r3, [r0, #32]
 800d46c:	b90b      	cbnz	r3, 800d472 <__swbuf_r+0x12>
 800d46e:	f7fc f831 	bl	80094d4 <__sinit>
 800d472:	69a3      	ldr	r3, [r4, #24]
 800d474:	60a3      	str	r3, [r4, #8]
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	071a      	lsls	r2, r3, #28
 800d47a:	d501      	bpl.n	800d480 <__swbuf_r+0x20>
 800d47c:	6923      	ldr	r3, [r4, #16]
 800d47e:	b943      	cbnz	r3, 800d492 <__swbuf_r+0x32>
 800d480:	4621      	mov	r1, r4
 800d482:	4628      	mov	r0, r5
 800d484:	f000 f82a 	bl	800d4dc <__swsetup_r>
 800d488:	b118      	cbz	r0, 800d492 <__swbuf_r+0x32>
 800d48a:	f04f 37ff 	mov.w	r7, #4294967295
 800d48e:	4638      	mov	r0, r7
 800d490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	b2f6      	uxtb	r6, r6
 800d496:	6922      	ldr	r2, [r4, #16]
 800d498:	4637      	mov	r7, r6
 800d49a:	1a98      	subs	r0, r3, r2
 800d49c:	6963      	ldr	r3, [r4, #20]
 800d49e:	4283      	cmp	r3, r0
 800d4a0:	dc05      	bgt.n	800d4ae <__swbuf_r+0x4e>
 800d4a2:	4621      	mov	r1, r4
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	f7ff f979 	bl	800c79c <_fflush_r>
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	d1ed      	bne.n	800d48a <__swbuf_r+0x2a>
 800d4ae:	68a3      	ldr	r3, [r4, #8]
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	60a3      	str	r3, [r4, #8]
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	6022      	str	r2, [r4, #0]
 800d4ba:	701e      	strb	r6, [r3, #0]
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	6962      	ldr	r2, [r4, #20]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d004      	beq.n	800d4ce <__swbuf_r+0x6e>
 800d4c4:	89a3      	ldrh	r3, [r4, #12]
 800d4c6:	07db      	lsls	r3, r3, #31
 800d4c8:	d5e1      	bpl.n	800d48e <__swbuf_r+0x2e>
 800d4ca:	2e0a      	cmp	r6, #10
 800d4cc:	d1df      	bne.n	800d48e <__swbuf_r+0x2e>
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f7ff f963 	bl	800c79c <_fflush_r>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d0d9      	beq.n	800d48e <__swbuf_r+0x2e>
 800d4da:	e7d6      	b.n	800d48a <__swbuf_r+0x2a>

0800d4dc <__swsetup_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	4b29      	ldr	r3, [pc, #164]	@ (800d584 <__swsetup_r+0xa8>)
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	6818      	ldr	r0, [r3, #0]
 800d4e6:	b118      	cbz	r0, 800d4f0 <__swsetup_r+0x14>
 800d4e8:	6a03      	ldr	r3, [r0, #32]
 800d4ea:	b90b      	cbnz	r3, 800d4f0 <__swsetup_r+0x14>
 800d4ec:	f7fb fff2 	bl	80094d4 <__sinit>
 800d4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4f4:	0719      	lsls	r1, r3, #28
 800d4f6:	d422      	bmi.n	800d53e <__swsetup_r+0x62>
 800d4f8:	06da      	lsls	r2, r3, #27
 800d4fa:	d407      	bmi.n	800d50c <__swsetup_r+0x30>
 800d4fc:	2209      	movs	r2, #9
 800d4fe:	602a      	str	r2, [r5, #0]
 800d500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d504:	f04f 30ff 	mov.w	r0, #4294967295
 800d508:	81a3      	strh	r3, [r4, #12]
 800d50a:	e033      	b.n	800d574 <__swsetup_r+0x98>
 800d50c:	0758      	lsls	r0, r3, #29
 800d50e:	d512      	bpl.n	800d536 <__swsetup_r+0x5a>
 800d510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d512:	b141      	cbz	r1, 800d526 <__swsetup_r+0x4a>
 800d514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d518:	4299      	cmp	r1, r3
 800d51a:	d002      	beq.n	800d522 <__swsetup_r+0x46>
 800d51c:	4628      	mov	r0, r5
 800d51e:	f7fd f809 	bl	800a534 <_free_r>
 800d522:	2300      	movs	r3, #0
 800d524:	6363      	str	r3, [r4, #52]	@ 0x34
 800d526:	89a3      	ldrh	r3, [r4, #12]
 800d528:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d52c:	81a3      	strh	r3, [r4, #12]
 800d52e:	2300      	movs	r3, #0
 800d530:	6063      	str	r3, [r4, #4]
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	6023      	str	r3, [r4, #0]
 800d536:	89a3      	ldrh	r3, [r4, #12]
 800d538:	f043 0308 	orr.w	r3, r3, #8
 800d53c:	81a3      	strh	r3, [r4, #12]
 800d53e:	6923      	ldr	r3, [r4, #16]
 800d540:	b94b      	cbnz	r3, 800d556 <__swsetup_r+0x7a>
 800d542:	89a3      	ldrh	r3, [r4, #12]
 800d544:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d54c:	d003      	beq.n	800d556 <__swsetup_r+0x7a>
 800d54e:	4621      	mov	r1, r4
 800d550:	4628      	mov	r0, r5
 800d552:	f000 f882 	bl	800d65a <__smakebuf_r>
 800d556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d55a:	f013 0201 	ands.w	r2, r3, #1
 800d55e:	d00a      	beq.n	800d576 <__swsetup_r+0x9a>
 800d560:	2200      	movs	r2, #0
 800d562:	60a2      	str	r2, [r4, #8]
 800d564:	6962      	ldr	r2, [r4, #20]
 800d566:	4252      	negs	r2, r2
 800d568:	61a2      	str	r2, [r4, #24]
 800d56a:	6922      	ldr	r2, [r4, #16]
 800d56c:	b942      	cbnz	r2, 800d580 <__swsetup_r+0xa4>
 800d56e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d572:	d1c5      	bne.n	800d500 <__swsetup_r+0x24>
 800d574:	bd38      	pop	{r3, r4, r5, pc}
 800d576:	0799      	lsls	r1, r3, #30
 800d578:	bf58      	it	pl
 800d57a:	6962      	ldrpl	r2, [r4, #20]
 800d57c:	60a2      	str	r2, [r4, #8]
 800d57e:	e7f4      	b.n	800d56a <__swsetup_r+0x8e>
 800d580:	2000      	movs	r0, #0
 800d582:	e7f7      	b.n	800d574 <__swsetup_r+0x98>
 800d584:	20000018 	.word	0x20000018

0800d588 <_raise_r>:
 800d588:	291f      	cmp	r1, #31
 800d58a:	b538      	push	{r3, r4, r5, lr}
 800d58c:	4605      	mov	r5, r0
 800d58e:	460c      	mov	r4, r1
 800d590:	d904      	bls.n	800d59c <_raise_r+0x14>
 800d592:	2316      	movs	r3, #22
 800d594:	6003      	str	r3, [r0, #0]
 800d596:	f04f 30ff 	mov.w	r0, #4294967295
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d59e:	b112      	cbz	r2, 800d5a6 <_raise_r+0x1e>
 800d5a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5a4:	b94b      	cbnz	r3, 800d5ba <_raise_r+0x32>
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	f000 f830 	bl	800d60c <_getpid_r>
 800d5ac:	4622      	mov	r2, r4
 800d5ae:	4601      	mov	r1, r0
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5b6:	f000 b817 	b.w	800d5e8 <_kill_r>
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d00a      	beq.n	800d5d4 <_raise_r+0x4c>
 800d5be:	1c59      	adds	r1, r3, #1
 800d5c0:	d103      	bne.n	800d5ca <_raise_r+0x42>
 800d5c2:	2316      	movs	r3, #22
 800d5c4:	6003      	str	r3, [r0, #0]
 800d5c6:	2001      	movs	r0, #1
 800d5c8:	e7e7      	b.n	800d59a <_raise_r+0x12>
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5d2:	4798      	blx	r3
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	e7e0      	b.n	800d59a <_raise_r+0x12>

0800d5d8 <raise>:
 800d5d8:	4b02      	ldr	r3, [pc, #8]	@ (800d5e4 <raise+0xc>)
 800d5da:	4601      	mov	r1, r0
 800d5dc:	6818      	ldr	r0, [r3, #0]
 800d5de:	f7ff bfd3 	b.w	800d588 <_raise_r>
 800d5e2:	bf00      	nop
 800d5e4:	20000018 	.word	0x20000018

0800d5e8 <_kill_r>:
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	4d06      	ldr	r5, [pc, #24]	@ (800d608 <_kill_r+0x20>)
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	4608      	mov	r0, r1
 800d5f2:	4611      	mov	r1, r2
 800d5f4:	602b      	str	r3, [r5, #0]
 800d5f6:	f7f4 fc4d 	bl	8001e94 <_kill>
 800d5fa:	1c43      	adds	r3, r0, #1
 800d5fc:	d102      	bne.n	800d604 <_kill_r+0x1c>
 800d5fe:	682b      	ldr	r3, [r5, #0]
 800d600:	b103      	cbz	r3, 800d604 <_kill_r+0x1c>
 800d602:	6023      	str	r3, [r4, #0]
 800d604:	bd38      	pop	{r3, r4, r5, pc}
 800d606:	bf00      	nop
 800d608:	200004e8 	.word	0x200004e8

0800d60c <_getpid_r>:
 800d60c:	f7f4 bc3a 	b.w	8001e84 <_getpid>

0800d610 <__swhatbuf_r>:
 800d610:	b570      	push	{r4, r5, r6, lr}
 800d612:	460c      	mov	r4, r1
 800d614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d618:	b096      	sub	sp, #88	@ 0x58
 800d61a:	4615      	mov	r5, r2
 800d61c:	2900      	cmp	r1, #0
 800d61e:	461e      	mov	r6, r3
 800d620:	da0c      	bge.n	800d63c <__swhatbuf_r+0x2c>
 800d622:	89a3      	ldrh	r3, [r4, #12]
 800d624:	2100      	movs	r1, #0
 800d626:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d62a:	bf14      	ite	ne
 800d62c:	2340      	movne	r3, #64	@ 0x40
 800d62e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d632:	2000      	movs	r0, #0
 800d634:	6031      	str	r1, [r6, #0]
 800d636:	602b      	str	r3, [r5, #0]
 800d638:	b016      	add	sp, #88	@ 0x58
 800d63a:	bd70      	pop	{r4, r5, r6, pc}
 800d63c:	466a      	mov	r2, sp
 800d63e:	f000 f849 	bl	800d6d4 <_fstat_r>
 800d642:	2800      	cmp	r0, #0
 800d644:	dbed      	blt.n	800d622 <__swhatbuf_r+0x12>
 800d646:	9901      	ldr	r1, [sp, #4]
 800d648:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d64c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d650:	4259      	negs	r1, r3
 800d652:	4159      	adcs	r1, r3
 800d654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d658:	e7eb      	b.n	800d632 <__swhatbuf_r+0x22>

0800d65a <__smakebuf_r>:
 800d65a:	898b      	ldrh	r3, [r1, #12]
 800d65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d65e:	079d      	lsls	r5, r3, #30
 800d660:	4606      	mov	r6, r0
 800d662:	460c      	mov	r4, r1
 800d664:	d507      	bpl.n	800d676 <__smakebuf_r+0x1c>
 800d666:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d66a:	6023      	str	r3, [r4, #0]
 800d66c:	6123      	str	r3, [r4, #16]
 800d66e:	2301      	movs	r3, #1
 800d670:	6163      	str	r3, [r4, #20]
 800d672:	b003      	add	sp, #12
 800d674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d676:	ab01      	add	r3, sp, #4
 800d678:	466a      	mov	r2, sp
 800d67a:	f7ff ffc9 	bl	800d610 <__swhatbuf_r>
 800d67e:	9f00      	ldr	r7, [sp, #0]
 800d680:	4605      	mov	r5, r0
 800d682:	4630      	mov	r0, r6
 800d684:	4639      	mov	r1, r7
 800d686:	f7fc ffc9 	bl	800a61c <_malloc_r>
 800d68a:	b948      	cbnz	r0, 800d6a0 <__smakebuf_r+0x46>
 800d68c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d690:	059a      	lsls	r2, r3, #22
 800d692:	d4ee      	bmi.n	800d672 <__smakebuf_r+0x18>
 800d694:	f023 0303 	bic.w	r3, r3, #3
 800d698:	f043 0302 	orr.w	r3, r3, #2
 800d69c:	81a3      	strh	r3, [r4, #12]
 800d69e:	e7e2      	b.n	800d666 <__smakebuf_r+0xc>
 800d6a0:	89a3      	ldrh	r3, [r4, #12]
 800d6a2:	6020      	str	r0, [r4, #0]
 800d6a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6a8:	81a3      	strh	r3, [r4, #12]
 800d6aa:	9b01      	ldr	r3, [sp, #4]
 800d6ac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6b0:	b15b      	cbz	r3, 800d6ca <__smakebuf_r+0x70>
 800d6b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f000 f81e 	bl	800d6f8 <_isatty_r>
 800d6bc:	b128      	cbz	r0, 800d6ca <__smakebuf_r+0x70>
 800d6be:	89a3      	ldrh	r3, [r4, #12]
 800d6c0:	f023 0303 	bic.w	r3, r3, #3
 800d6c4:	f043 0301 	orr.w	r3, r3, #1
 800d6c8:	81a3      	strh	r3, [r4, #12]
 800d6ca:	89a3      	ldrh	r3, [r4, #12]
 800d6cc:	431d      	orrs	r5, r3
 800d6ce:	81a5      	strh	r5, [r4, #12]
 800d6d0:	e7cf      	b.n	800d672 <__smakebuf_r+0x18>
	...

0800d6d4 <_fstat_r>:
 800d6d4:	b538      	push	{r3, r4, r5, lr}
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	4d06      	ldr	r5, [pc, #24]	@ (800d6f4 <_fstat_r+0x20>)
 800d6da:	4604      	mov	r4, r0
 800d6dc:	4608      	mov	r0, r1
 800d6de:	4611      	mov	r1, r2
 800d6e0:	602b      	str	r3, [r5, #0]
 800d6e2:	f7f4 fc37 	bl	8001f54 <_fstat>
 800d6e6:	1c43      	adds	r3, r0, #1
 800d6e8:	d102      	bne.n	800d6f0 <_fstat_r+0x1c>
 800d6ea:	682b      	ldr	r3, [r5, #0]
 800d6ec:	b103      	cbz	r3, 800d6f0 <_fstat_r+0x1c>
 800d6ee:	6023      	str	r3, [r4, #0]
 800d6f0:	bd38      	pop	{r3, r4, r5, pc}
 800d6f2:	bf00      	nop
 800d6f4:	200004e8 	.word	0x200004e8

0800d6f8 <_isatty_r>:
 800d6f8:	b538      	push	{r3, r4, r5, lr}
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	4d05      	ldr	r5, [pc, #20]	@ (800d714 <_isatty_r+0x1c>)
 800d6fe:	4604      	mov	r4, r0
 800d700:	4608      	mov	r0, r1
 800d702:	602b      	str	r3, [r5, #0]
 800d704:	f7f4 fc36 	bl	8001f74 <_isatty>
 800d708:	1c43      	adds	r3, r0, #1
 800d70a:	d102      	bne.n	800d712 <_isatty_r+0x1a>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	b103      	cbz	r3, 800d712 <_isatty_r+0x1a>
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	bd38      	pop	{r3, r4, r5, pc}
 800d714:	200004e8 	.word	0x200004e8

0800d718 <_init>:
 800d718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d71a:	bf00      	nop
 800d71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d71e:	bc08      	pop	{r3}
 800d720:	469e      	mov	lr, r3
 800d722:	4770      	bx	lr

0800d724 <_fini>:
 800d724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d726:	bf00      	nop
 800d728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d72a:	bc08      	pop	{r3}
 800d72c:	469e      	mov	lr, r3
 800d72e:	4770      	bx	lr
